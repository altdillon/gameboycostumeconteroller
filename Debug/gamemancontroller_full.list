
gamemancontroller_full.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b63c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000010c  0800b7ec  0800b7ec  0001b7ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b8f8  0800b8f8  00020124  2**0
                  CONTENTS
  4 .ARM          00000008  0800b8f8  0800b8f8  0001b8f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b900  0800b900  00020124  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b900  0800b900  0001b900  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b904  0800b904  0001b904  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000124  20000000  0800b908  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000024e0  20000124  0800ba2c  00020124  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002604  0800ba2c  00022604  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020124  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020154  2**0
                  CONTENTS, READONLY
 13 .debug_info   000233de  00000000  00000000  00020197  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004edf  00000000  00000000  00043575  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001e20  00000000  00000000  00048458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001737  00000000  00000000  0004a278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002d570  00000000  00000000  0004b9af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00021e9b  00000000  00000000  00078f1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010f081  00000000  00000000  0009adba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007f08  00000000  00000000  001a9e3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  001b1d44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000124 	.word	0x20000124
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800b7d4 	.word	0x0800b7d4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000128 	.word	0x20000128
 80001ec:	0800b7d4 	.word	0x0800b7d4

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000200:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000204:	f000 b970 	b.w	80004e8 <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9e08      	ldr	r6, [sp, #32]
 8000226:	460d      	mov	r5, r1
 8000228:	4604      	mov	r4, r0
 800022a:	460f      	mov	r7, r1
 800022c:	2b00      	cmp	r3, #0
 800022e:	d14a      	bne.n	80002c6 <__udivmoddi4+0xa6>
 8000230:	428a      	cmp	r2, r1
 8000232:	4694      	mov	ip, r2
 8000234:	d965      	bls.n	8000302 <__udivmoddi4+0xe2>
 8000236:	fab2 f382 	clz	r3, r2
 800023a:	b143      	cbz	r3, 800024e <__udivmoddi4+0x2e>
 800023c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000240:	f1c3 0220 	rsb	r2, r3, #32
 8000244:	409f      	lsls	r7, r3
 8000246:	fa20 f202 	lsr.w	r2, r0, r2
 800024a:	4317      	orrs	r7, r2
 800024c:	409c      	lsls	r4, r3
 800024e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000252:	fa1f f58c 	uxth.w	r5, ip
 8000256:	fbb7 f1fe 	udiv	r1, r7, lr
 800025a:	0c22      	lsrs	r2, r4, #16
 800025c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000260:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000264:	fb01 f005 	mul.w	r0, r1, r5
 8000268:	4290      	cmp	r0, r2
 800026a:	d90a      	bls.n	8000282 <__udivmoddi4+0x62>
 800026c:	eb1c 0202 	adds.w	r2, ip, r2
 8000270:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000274:	f080 811c 	bcs.w	80004b0 <__udivmoddi4+0x290>
 8000278:	4290      	cmp	r0, r2
 800027a:	f240 8119 	bls.w	80004b0 <__udivmoddi4+0x290>
 800027e:	3902      	subs	r1, #2
 8000280:	4462      	add	r2, ip
 8000282:	1a12      	subs	r2, r2, r0
 8000284:	b2a4      	uxth	r4, r4
 8000286:	fbb2 f0fe 	udiv	r0, r2, lr
 800028a:	fb0e 2210 	mls	r2, lr, r0, r2
 800028e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000292:	fb00 f505 	mul.w	r5, r0, r5
 8000296:	42a5      	cmp	r5, r4
 8000298:	d90a      	bls.n	80002b0 <__udivmoddi4+0x90>
 800029a:	eb1c 0404 	adds.w	r4, ip, r4
 800029e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002a2:	f080 8107 	bcs.w	80004b4 <__udivmoddi4+0x294>
 80002a6:	42a5      	cmp	r5, r4
 80002a8:	f240 8104 	bls.w	80004b4 <__udivmoddi4+0x294>
 80002ac:	4464      	add	r4, ip
 80002ae:	3802      	subs	r0, #2
 80002b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002b4:	1b64      	subs	r4, r4, r5
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11e      	cbz	r6, 80002c2 <__udivmoddi4+0xa2>
 80002ba:	40dc      	lsrs	r4, r3
 80002bc:	2300      	movs	r3, #0
 80002be:	e9c6 4300 	strd	r4, r3, [r6]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d908      	bls.n	80002dc <__udivmoddi4+0xbc>
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	f000 80ed 	beq.w	80004aa <__udivmoddi4+0x28a>
 80002d0:	2100      	movs	r1, #0
 80002d2:	e9c6 0500 	strd	r0, r5, [r6]
 80002d6:	4608      	mov	r0, r1
 80002d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002dc:	fab3 f183 	clz	r1, r3
 80002e0:	2900      	cmp	r1, #0
 80002e2:	d149      	bne.n	8000378 <__udivmoddi4+0x158>
 80002e4:	42ab      	cmp	r3, r5
 80002e6:	d302      	bcc.n	80002ee <__udivmoddi4+0xce>
 80002e8:	4282      	cmp	r2, r0
 80002ea:	f200 80f8 	bhi.w	80004de <__udivmoddi4+0x2be>
 80002ee:	1a84      	subs	r4, r0, r2
 80002f0:	eb65 0203 	sbc.w	r2, r5, r3
 80002f4:	2001      	movs	r0, #1
 80002f6:	4617      	mov	r7, r2
 80002f8:	2e00      	cmp	r6, #0
 80002fa:	d0e2      	beq.n	80002c2 <__udivmoddi4+0xa2>
 80002fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000300:	e7df      	b.n	80002c2 <__udivmoddi4+0xa2>
 8000302:	b902      	cbnz	r2, 8000306 <__udivmoddi4+0xe6>
 8000304:	deff      	udf	#255	; 0xff
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	2b00      	cmp	r3, #0
 800030c:	f040 8090 	bne.w	8000430 <__udivmoddi4+0x210>
 8000310:	1a8a      	subs	r2, r1, r2
 8000312:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000316:	fa1f fe8c 	uxth.w	lr, ip
 800031a:	2101      	movs	r1, #1
 800031c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000320:	fb07 2015 	mls	r0, r7, r5, r2
 8000324:	0c22      	lsrs	r2, r4, #16
 8000326:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800032a:	fb0e f005 	mul.w	r0, lr, r5
 800032e:	4290      	cmp	r0, r2
 8000330:	d908      	bls.n	8000344 <__udivmoddi4+0x124>
 8000332:	eb1c 0202 	adds.w	r2, ip, r2
 8000336:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x122>
 800033c:	4290      	cmp	r0, r2
 800033e:	f200 80cb 	bhi.w	80004d8 <__udivmoddi4+0x2b8>
 8000342:	4645      	mov	r5, r8
 8000344:	1a12      	subs	r2, r2, r0
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb2 f0f7 	udiv	r0, r2, r7
 800034c:	fb07 2210 	mls	r2, r7, r0, r2
 8000350:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000354:	fb0e fe00 	mul.w	lr, lr, r0
 8000358:	45a6      	cmp	lr, r4
 800035a:	d908      	bls.n	800036e <__udivmoddi4+0x14e>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000364:	d202      	bcs.n	800036c <__udivmoddi4+0x14c>
 8000366:	45a6      	cmp	lr, r4
 8000368:	f200 80bb 	bhi.w	80004e2 <__udivmoddi4+0x2c2>
 800036c:	4610      	mov	r0, r2
 800036e:	eba4 040e 	sub.w	r4, r4, lr
 8000372:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000376:	e79f      	b.n	80002b8 <__udivmoddi4+0x98>
 8000378:	f1c1 0720 	rsb	r7, r1, #32
 800037c:	408b      	lsls	r3, r1
 800037e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000382:	ea4c 0c03 	orr.w	ip, ip, r3
 8000386:	fa05 f401 	lsl.w	r4, r5, r1
 800038a:	fa20 f307 	lsr.w	r3, r0, r7
 800038e:	40fd      	lsrs	r5, r7
 8000390:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000394:	4323      	orrs	r3, r4
 8000396:	fbb5 f8f9 	udiv	r8, r5, r9
 800039a:	fa1f fe8c 	uxth.w	lr, ip
 800039e:	fb09 5518 	mls	r5, r9, r8, r5
 80003a2:	0c1c      	lsrs	r4, r3, #16
 80003a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003a8:	fb08 f50e 	mul.w	r5, r8, lr
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	fa02 f201 	lsl.w	r2, r2, r1
 80003b2:	fa00 f001 	lsl.w	r0, r0, r1
 80003b6:	d90b      	bls.n	80003d0 <__udivmoddi4+0x1b0>
 80003b8:	eb1c 0404 	adds.w	r4, ip, r4
 80003bc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003c0:	f080 8088 	bcs.w	80004d4 <__udivmoddi4+0x2b4>
 80003c4:	42a5      	cmp	r5, r4
 80003c6:	f240 8085 	bls.w	80004d4 <__udivmoddi4+0x2b4>
 80003ca:	f1a8 0802 	sub.w	r8, r8, #2
 80003ce:	4464      	add	r4, ip
 80003d0:	1b64      	subs	r4, r4, r5
 80003d2:	b29d      	uxth	r5, r3
 80003d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003d8:	fb09 4413 	mls	r4, r9, r3, r4
 80003dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003e4:	45a6      	cmp	lr, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x1da>
 80003e8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ec:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003f0:	d26c      	bcs.n	80004cc <__udivmoddi4+0x2ac>
 80003f2:	45a6      	cmp	lr, r4
 80003f4:	d96a      	bls.n	80004cc <__udivmoddi4+0x2ac>
 80003f6:	3b02      	subs	r3, #2
 80003f8:	4464      	add	r4, ip
 80003fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000402:	eba4 040e 	sub.w	r4, r4, lr
 8000406:	42ac      	cmp	r4, r5
 8000408:	46c8      	mov	r8, r9
 800040a:	46ae      	mov	lr, r5
 800040c:	d356      	bcc.n	80004bc <__udivmoddi4+0x29c>
 800040e:	d053      	beq.n	80004b8 <__udivmoddi4+0x298>
 8000410:	b156      	cbz	r6, 8000428 <__udivmoddi4+0x208>
 8000412:	ebb0 0208 	subs.w	r2, r0, r8
 8000416:	eb64 040e 	sbc.w	r4, r4, lr
 800041a:	fa04 f707 	lsl.w	r7, r4, r7
 800041e:	40ca      	lsrs	r2, r1
 8000420:	40cc      	lsrs	r4, r1
 8000422:	4317      	orrs	r7, r2
 8000424:	e9c6 7400 	strd	r7, r4, [r6]
 8000428:	4618      	mov	r0, r3
 800042a:	2100      	movs	r1, #0
 800042c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000430:	f1c3 0120 	rsb	r1, r3, #32
 8000434:	fa02 fc03 	lsl.w	ip, r2, r3
 8000438:	fa20 f201 	lsr.w	r2, r0, r1
 800043c:	fa25 f101 	lsr.w	r1, r5, r1
 8000440:	409d      	lsls	r5, r3
 8000442:	432a      	orrs	r2, r5
 8000444:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000450:	fb07 1510 	mls	r5, r7, r0, r1
 8000454:	0c11      	lsrs	r1, r2, #16
 8000456:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800045a:	fb00 f50e 	mul.w	r5, r0, lr
 800045e:	428d      	cmp	r5, r1
 8000460:	fa04 f403 	lsl.w	r4, r4, r3
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x258>
 8000466:	eb1c 0101 	adds.w	r1, ip, r1
 800046a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800046e:	d22f      	bcs.n	80004d0 <__udivmoddi4+0x2b0>
 8000470:	428d      	cmp	r5, r1
 8000472:	d92d      	bls.n	80004d0 <__udivmoddi4+0x2b0>
 8000474:	3802      	subs	r0, #2
 8000476:	4461      	add	r1, ip
 8000478:	1b49      	subs	r1, r1, r5
 800047a:	b292      	uxth	r2, r2
 800047c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000480:	fb07 1115 	mls	r1, r7, r5, r1
 8000484:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000488:	fb05 f10e 	mul.w	r1, r5, lr
 800048c:	4291      	cmp	r1, r2
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x282>
 8000490:	eb1c 0202 	adds.w	r2, ip, r2
 8000494:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000498:	d216      	bcs.n	80004c8 <__udivmoddi4+0x2a8>
 800049a:	4291      	cmp	r1, r2
 800049c:	d914      	bls.n	80004c8 <__udivmoddi4+0x2a8>
 800049e:	3d02      	subs	r5, #2
 80004a0:	4462      	add	r2, ip
 80004a2:	1a52      	subs	r2, r2, r1
 80004a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004a8:	e738      	b.n	800031c <__udivmoddi4+0xfc>
 80004aa:	4631      	mov	r1, r6
 80004ac:	4630      	mov	r0, r6
 80004ae:	e708      	b.n	80002c2 <__udivmoddi4+0xa2>
 80004b0:	4639      	mov	r1, r7
 80004b2:	e6e6      	b.n	8000282 <__udivmoddi4+0x62>
 80004b4:	4610      	mov	r0, r2
 80004b6:	e6fb      	b.n	80002b0 <__udivmoddi4+0x90>
 80004b8:	4548      	cmp	r0, r9
 80004ba:	d2a9      	bcs.n	8000410 <__udivmoddi4+0x1f0>
 80004bc:	ebb9 0802 	subs.w	r8, r9, r2
 80004c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004c4:	3b01      	subs	r3, #1
 80004c6:	e7a3      	b.n	8000410 <__udivmoddi4+0x1f0>
 80004c8:	4645      	mov	r5, r8
 80004ca:	e7ea      	b.n	80004a2 <__udivmoddi4+0x282>
 80004cc:	462b      	mov	r3, r5
 80004ce:	e794      	b.n	80003fa <__udivmoddi4+0x1da>
 80004d0:	4640      	mov	r0, r8
 80004d2:	e7d1      	b.n	8000478 <__udivmoddi4+0x258>
 80004d4:	46d0      	mov	r8, sl
 80004d6:	e77b      	b.n	80003d0 <__udivmoddi4+0x1b0>
 80004d8:	3d02      	subs	r5, #2
 80004da:	4462      	add	r2, ip
 80004dc:	e732      	b.n	8000344 <__udivmoddi4+0x124>
 80004de:	4608      	mov	r0, r1
 80004e0:	e70a      	b.n	80002f8 <__udivmoddi4+0xd8>
 80004e2:	4464      	add	r4, ip
 80004e4:	3802      	subs	r0, #2
 80004e6:	e742      	b.n	800036e <__udivmoddi4+0x14e>

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <getKey>:

	return -1; // stub or error lol
}

int getKey(capkey_t *key,TIM_HandleTypeDef *htim)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b086      	sub	sp, #24
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
 80004f4:	6039      	str	r1, [r7, #0]
	const uint32_t timeOut = 4000;
 80004f6:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 80004fa:	613b      	str	r3, [r7, #16]
	// start, stop, and delta time
	uint32_t startTime = 0;
 80004fc:	2300      	movs	r3, #0
 80004fe:	60fb      	str	r3, [r7, #12]
	uint32_t stopTime = 0;
 8000500:	2300      	movs	r3, #0
 8000502:	60bb      	str	r3, [r7, #8]
	uint32_t deltaTime = 0;
 8000504:	2300      	movs	r3, #0
 8000506:	617b      	str	r3, [r7, #20]

	// set the driver pin to high and do the thing
	startTime = __HAL_TIM_GET_COUNTER(htim);
 8000508:	683b      	ldr	r3, [r7, #0]
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800050e:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin(driverpin_GPIO_Port,driverpin_Pin,1);
 8000510:	2201      	movs	r2, #1
 8000512:	2108      	movs	r1, #8
 8000514:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000518:	f001 f8cc 	bl	80016b4 <HAL_GPIO_WritePin>

	// after we set the pin to high, or we get a time out, which ever comes first
	while(HAL_GPIO_ReadPin(key->gpioport,key->gpiopin) == 0)
 800051c:	e00c      	b.n	8000538 <getKey+0x4c>
	{
		deltaTime = __HAL_TIM_GET_COUNTER(htim) - startTime;
 800051e:	683b      	ldr	r3, [r7, #0]
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000524:	68fb      	ldr	r3, [r7, #12]
 8000526:	1ad3      	subs	r3, r2, r3
 8000528:	617b      	str	r3, [r7, #20]
		if(deltaTime > timeOut)
 800052a:	697a      	ldr	r2, [r7, #20]
 800052c:	693b      	ldr	r3, [r7, #16]
 800052e:	429a      	cmp	r2, r3
 8000530:	d902      	bls.n	8000538 <getKey+0x4c>
		{
			deltaTime = timeOut; // just make the delta time the timeout time
 8000532:	693b      	ldr	r3, [r7, #16]
 8000534:	617b      	str	r3, [r7, #20]
			break;
 8000536:	e00a      	b.n	800054e <getKey+0x62>
	while(HAL_GPIO_ReadPin(key->gpioport,key->gpiopin) == 0)
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	685a      	ldr	r2, [r3, #4]
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	891b      	ldrh	r3, [r3, #8]
 8000540:	4619      	mov	r1, r3
 8000542:	4610      	mov	r0, r2
 8000544:	f001 f89e 	bl	8001684 <HAL_GPIO_ReadPin>
 8000548:	4603      	mov	r3, r0
 800054a:	2b00      	cmp	r3, #0
 800054c:	d0e7      	beq.n	800051e <getKey+0x32>
		}
	}

	// return the data
	HAL_GPIO_WritePin(driverpin_GPIO_Port,driverpin_Pin,0);
 800054e:	2200      	movs	r2, #0
 8000550:	2108      	movs	r1, #8
 8000552:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000556:	f001 f8ad 	bl	80016b4 <HAL_GPIO_WritePin>
	return deltaTime;
 800055a:	697b      	ldr	r3, [r7, #20]
//		}
//	}

//	HAL_GPIO_WritePin(key->gpioport,key->gpiopin,0);
	return deltaTime;
}
 800055c:	4618      	mov	r0, r3
 800055e:	3718      	adds	r7, #24
 8000560:	46bd      	mov	sp, r7
 8000562:	bd80      	pop	{r7, pc}

08000564 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000568:	f000 fd4f 	bl	800100a <HAL_Init>

  /* USER CODE BEGIN Init */
  buttonA.pinIndex = 0;
 800056c:	4b66      	ldr	r3, [pc, #408]	; (8000708 <main+0x1a4>)
 800056e:	2200      	movs	r2, #0
 8000570:	709a      	strb	r2, [r3, #2]
  //buttonA.pinName = "btnA";
  buttonA.gpioport = btnA_GPIO_Port;
 8000572:	4b65      	ldr	r3, [pc, #404]	; (8000708 <main+0x1a4>)
 8000574:	4a65      	ldr	r2, [pc, #404]	; (800070c <main+0x1a8>)
 8000576:	605a      	str	r2, [r3, #4]
  buttonA.gpiopin = btnA_Pin;
 8000578:	4b63      	ldr	r3, [pc, #396]	; (8000708 <main+0x1a4>)
 800057a:	2201      	movs	r2, #1
 800057c:	811a      	strh	r2, [r3, #8]
  buttonA.triggerTime = 3000;
 800057e:	4b62      	ldr	r3, [pc, #392]	; (8000708 <main+0x1a4>)
 8000580:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000584:	815a      	strh	r2, [r3, #10]
  buttonA.keyCode = 0x04;
 8000586:	4b60      	ldr	r3, [pc, #384]	; (8000708 <main+0x1a4>)
 8000588:	2204      	movs	r2, #4
 800058a:	741a      	strb	r2, [r3, #16]

  // B button

  buttonB.pinIndex = 1;
 800058c:	4b60      	ldr	r3, [pc, #384]	; (8000710 <main+0x1ac>)
 800058e:	2201      	movs	r2, #1
 8000590:	709a      	strb	r2, [r3, #2]
  buttonB.gpioport = btnB_GPIO_Port;
 8000592:	4b5f      	ldr	r3, [pc, #380]	; (8000710 <main+0x1ac>)
 8000594:	4a5d      	ldr	r2, [pc, #372]	; (800070c <main+0x1a8>)
 8000596:	605a      	str	r2, [r3, #4]
  buttonB.gpiopin = btnB_Pin;
 8000598:	4b5d      	ldr	r3, [pc, #372]	; (8000710 <main+0x1ac>)
 800059a:	2208      	movs	r2, #8
 800059c:	811a      	strh	r2, [r3, #8]
  buttonB.triggerTime = 3000;
 800059e:	4b5c      	ldr	r3, [pc, #368]	; (8000710 <main+0x1ac>)
 80005a0:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80005a4:	815a      	strh	r2, [r3, #10]
  buttonB.keyCode = 0x05;
 80005a6:	4b5a      	ldr	r3, [pc, #360]	; (8000710 <main+0x1ac>)
 80005a8:	2205      	movs	r2, #5
 80005aa:	741a      	strb	r2, [r3, #16]

  // X button

  buttonX.pinIndex = 2;
 80005ac:	4b59      	ldr	r3, [pc, #356]	; (8000714 <main+0x1b0>)
 80005ae:	2202      	movs	r2, #2
 80005b0:	709a      	strb	r2, [r3, #2]
  buttonX.gpioport = btnX_GPIO_Port;
 80005b2:	4b58      	ldr	r3, [pc, #352]	; (8000714 <main+0x1b0>)
 80005b4:	4a55      	ldr	r2, [pc, #340]	; (800070c <main+0x1a8>)
 80005b6:	605a      	str	r2, [r3, #4]
  buttonX.gpiopin = btnX_Pin;
 80005b8:	4b56      	ldr	r3, [pc, #344]	; (8000714 <main+0x1b0>)
 80005ba:	2202      	movs	r2, #2
 80005bc:	811a      	strh	r2, [r3, #8]
  buttonX.triggerTime = 3000;
 80005be:	4b55      	ldr	r3, [pc, #340]	; (8000714 <main+0x1b0>)
 80005c0:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80005c4:	815a      	strh	r2, [r3, #10]
  buttonX.keyCode = 0x1B;
 80005c6:	4b53      	ldr	r3, [pc, #332]	; (8000714 <main+0x1b0>)
 80005c8:	221b      	movs	r2, #27
 80005ca:	741a      	strb	r2, [r3, #16]

  // Y button

  buttonY.pinIndex = 3;
 80005cc:	4b52      	ldr	r3, [pc, #328]	; (8000718 <main+0x1b4>)
 80005ce:	2203      	movs	r2, #3
 80005d0:	709a      	strb	r2, [r3, #2]
  buttonY.gpioport = btnY_GPIO_Port;
 80005d2:	4b51      	ldr	r3, [pc, #324]	; (8000718 <main+0x1b4>)
 80005d4:	4a4d      	ldr	r2, [pc, #308]	; (800070c <main+0x1a8>)
 80005d6:	605a      	str	r2, [r3, #4]
  buttonY.gpiopin = btnY_Pin;
 80005d8:	4b4f      	ldr	r3, [pc, #316]	; (8000718 <main+0x1b4>)
 80005da:	2210      	movs	r2, #16
 80005dc:	811a      	strh	r2, [r3, #8]
  buttonY.triggerTime = 3000;
 80005de:	4b4e      	ldr	r3, [pc, #312]	; (8000718 <main+0x1b4>)
 80005e0:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80005e4:	815a      	strh	r2, [r3, #10]
  buttonY.keyCode = 0x1C;
 80005e6:	4b4c      	ldr	r3, [pc, #304]	; (8000718 <main+0x1b4>)
 80005e8:	221c      	movs	r2, #28
 80005ea:	741a      	strb	r2, [r3, #16]

  // up button

  buttonUp.pinIndex = 4;
 80005ec:	4b4b      	ldr	r3, [pc, #300]	; (800071c <main+0x1b8>)
 80005ee:	2204      	movs	r2, #4
 80005f0:	709a      	strb	r2, [r3, #2]
  buttonUp.gpioport = btnUP_GPIO_Port;
 80005f2:	4b4a      	ldr	r3, [pc, #296]	; (800071c <main+0x1b8>)
 80005f4:	4a4a      	ldr	r2, [pc, #296]	; (8000720 <main+0x1bc>)
 80005f6:	605a      	str	r2, [r3, #4]
  buttonUp.gpiopin = btnUP_Pin;
 80005f8:	4b48      	ldr	r3, [pc, #288]	; (800071c <main+0x1b8>)
 80005fa:	2240      	movs	r2, #64	; 0x40
 80005fc:	811a      	strh	r2, [r3, #8]
  buttonUp.triggerTime = 3000;
 80005fe:	4b47      	ldr	r3, [pc, #284]	; (800071c <main+0x1b8>)
 8000600:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000604:	815a      	strh	r2, [r3, #10]
  buttonUp.keyCode = 0x52;
 8000606:	4b45      	ldr	r3, [pc, #276]	; (800071c <main+0x1b8>)
 8000608:	2252      	movs	r2, #82	; 0x52
 800060a:	741a      	strb	r2, [r3, #16]

  // down button

  buttonDown.pinIndex = 5;
 800060c:	4b45      	ldr	r3, [pc, #276]	; (8000724 <main+0x1c0>)
 800060e:	2205      	movs	r2, #5
 8000610:	709a      	strb	r2, [r3, #2]
  buttonDown.gpioport = btnDOWN_GPIO_Port;
 8000612:	4b44      	ldr	r3, [pc, #272]	; (8000724 <main+0x1c0>)
 8000614:	4a44      	ldr	r2, [pc, #272]	; (8000728 <main+0x1c4>)
 8000616:	605a      	str	r2, [r3, #4]
  buttonDown.gpiopin = btnDOWN_Pin;
 8000618:	4b42      	ldr	r3, [pc, #264]	; (8000724 <main+0x1c0>)
 800061a:	2204      	movs	r2, #4
 800061c:	811a      	strh	r2, [r3, #8]
  buttonDown.triggerTime = 3000;
 800061e:	4b41      	ldr	r3, [pc, #260]	; (8000724 <main+0x1c0>)
 8000620:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000624:	815a      	strh	r2, [r3, #10]
  buttonDown.keyCode = 0x51;
 8000626:	4b3f      	ldr	r3, [pc, #252]	; (8000724 <main+0x1c0>)
 8000628:	2251      	movs	r2, #81	; 0x51
 800062a:	741a      	strb	r2, [r3, #16]

  // left button

  buttonLeft.pinIndex = 6;
 800062c:	4b3f      	ldr	r3, [pc, #252]	; (800072c <main+0x1c8>)
 800062e:	2206      	movs	r2, #6
 8000630:	709a      	strb	r2, [r3, #2]
  buttonLeft.gpioport = btnLEFT_GPIO_Port;
 8000632:	4b3e      	ldr	r3, [pc, #248]	; (800072c <main+0x1c8>)
 8000634:	4a3c      	ldr	r2, [pc, #240]	; (8000728 <main+0x1c4>)
 8000636:	605a      	str	r2, [r3, #4]
  buttonLeft.gpiopin = btnLEFT_Pin;
 8000638:	4b3c      	ldr	r3, [pc, #240]	; (800072c <main+0x1c8>)
 800063a:	2202      	movs	r2, #2
 800063c:	811a      	strh	r2, [r3, #8]
  buttonLeft.triggerTime = 3000;
 800063e:	4b3b      	ldr	r3, [pc, #236]	; (800072c <main+0x1c8>)
 8000640:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000644:	815a      	strh	r2, [r3, #10]
  buttonLeft.keyCode = 0x50;
 8000646:	4b39      	ldr	r3, [pc, #228]	; (800072c <main+0x1c8>)
 8000648:	2250      	movs	r2, #80	; 0x50
 800064a:	741a      	strb	r2, [r3, #16]

  // right button

  buttonRight.pinIndex = 7;
 800064c:	4b38      	ldr	r3, [pc, #224]	; (8000730 <main+0x1cc>)
 800064e:	2207      	movs	r2, #7
 8000650:	709a      	strb	r2, [r3, #2]
  buttonRight.gpioport = btnRIGHT_GPIO_Port;
 8000652:	4b37      	ldr	r3, [pc, #220]	; (8000730 <main+0x1cc>)
 8000654:	4a37      	ldr	r2, [pc, #220]	; (8000734 <main+0x1d0>)
 8000656:	605a      	str	r2, [r3, #4]
  buttonRight.gpiopin = btnRIGHT_Pin;
 8000658:	4b35      	ldr	r3, [pc, #212]	; (8000730 <main+0x1cc>)
 800065a:	2280      	movs	r2, #128	; 0x80
 800065c:	811a      	strh	r2, [r3, #8]
  buttonRight.triggerTime = 3000;
 800065e:	4b34      	ldr	r3, [pc, #208]	; (8000730 <main+0x1cc>)
 8000660:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000664:	815a      	strh	r2, [r3, #10]
  buttonRight.keyCode = 0x4F;
 8000666:	4b32      	ldr	r3, [pc, #200]	; (8000730 <main+0x1cc>)
 8000668:	224f      	movs	r2, #79	; 0x4f
 800066a:	741a      	strb	r2, [r3, #16]

  // select button

  buttonSelect.pinIndex = 8;
 800066c:	4b32      	ldr	r3, [pc, #200]	; (8000738 <main+0x1d4>)
 800066e:	2208      	movs	r2, #8
 8000670:	709a      	strb	r2, [r3, #2]
  buttonSelect.gpioport = btnSELECT_GPIO_Port;
 8000672:	4b31      	ldr	r3, [pc, #196]	; (8000738 <main+0x1d4>)
 8000674:	4a2a      	ldr	r2, [pc, #168]	; (8000720 <main+0x1bc>)
 8000676:	605a      	str	r2, [r3, #4]
  buttonSelect.gpiopin = btnSELECT_Pin;
 8000678:	4b2f      	ldr	r3, [pc, #188]	; (8000738 <main+0x1d4>)
 800067a:	2204      	movs	r2, #4
 800067c:	811a      	strh	r2, [r3, #8]
  buttonSelect.triggerTime = 3000;
 800067e:	4b2e      	ldr	r3, [pc, #184]	; (8000738 <main+0x1d4>)
 8000680:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000684:	815a      	strh	r2, [r3, #10]
  buttonSelect.keyCode = 0x18; // scan key code for u
 8000686:	4b2c      	ldr	r3, [pc, #176]	; (8000738 <main+0x1d4>)
 8000688:	2218      	movs	r2, #24
 800068a:	741a      	strb	r2, [r3, #16]

  // start button

  buttonStart.pinIndex = 9;
 800068c:	4b2b      	ldr	r3, [pc, #172]	; (800073c <main+0x1d8>)
 800068e:	2209      	movs	r2, #9
 8000690:	709a      	strb	r2, [r3, #2]
  buttonStart.gpioport = btnSTART_GPIO_Port;
 8000692:	4b2a      	ldr	r3, [pc, #168]	; (800073c <main+0x1d8>)
 8000694:	4a1d      	ldr	r2, [pc, #116]	; (800070c <main+0x1a8>)
 8000696:	605a      	str	r2, [r3, #4]
  buttonStart.gpiopin = btnSTART_Pin;
 8000698:	4b28      	ldr	r3, [pc, #160]	; (800073c <main+0x1d8>)
 800069a:	2220      	movs	r2, #32
 800069c:	811a      	strh	r2, [r3, #8]
  buttonStart.triggerTime = 3000;
 800069e:	4b27      	ldr	r3, [pc, #156]	; (800073c <main+0x1d8>)
 80006a0:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80006a4:	815a      	strh	r2, [r3, #10]
  buttonStart.keyCode = 0x19; // scan key code for v
 80006a6:	4b25      	ldr	r3, [pc, #148]	; (800073c <main+0x1d8>)
 80006a8:	2219      	movs	r2, #25
 80006aa:	741a      	strb	r2, [r3, #16]

  // HOTKEY

  buttonHotkey.pinIndex = 10;
 80006ac:	4b24      	ldr	r3, [pc, #144]	; (8000740 <main+0x1dc>)
 80006ae:	220a      	movs	r2, #10
 80006b0:	709a      	strb	r2, [r3, #2]
  buttonHotkey.gpioport = HOTKEY_GPIO_Port;
 80006b2:	4b23      	ldr	r3, [pc, #140]	; (8000740 <main+0x1dc>)
 80006b4:	4a1f      	ldr	r2, [pc, #124]	; (8000734 <main+0x1d0>)
 80006b6:	605a      	str	r2, [r3, #4]
  buttonHotkey.gpiopin = HOTKEY_Pin;
 80006b8:	4b21      	ldr	r3, [pc, #132]	; (8000740 <main+0x1dc>)
 80006ba:	2240      	movs	r2, #64	; 0x40
 80006bc:	811a      	strh	r2, [r3, #8]
  buttonHotkey.triggerTime = 3000;
 80006be:	4b20      	ldr	r3, [pc, #128]	; (8000740 <main+0x1dc>)
 80006c0:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80006c4:	815a      	strh	r2, [r3, #10]
  buttonHotkey.keyCode = 0x0B; // scan key code for h
 80006c6:	4b1e      	ldr	r3, [pc, #120]	; (8000740 <main+0x1dc>)
 80006c8:	220b      	movs	r2, #11
 80006ca:	741a      	strb	r2, [r3, #16]

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006cc:	f000 f846 	bl	800075c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006d0:	f000 f924 	bl	800091c <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 80006d4:	f000 f8a6 	bl	8000824 <MX_LPUART1_UART_Init>
  MX_TIM2_Init();
 80006d8:	f000 f8d2 	bl	8000880 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80006dc:	f007 fd66 	bl	80081ac <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80006e0:	4a18      	ldr	r2, [pc, #96]	; (8000744 <main+0x1e0>)
 80006e2:	2100      	movs	r1, #0
 80006e4:	4818      	ldr	r0, [pc, #96]	; (8000748 <main+0x1e4>)
 80006e6:	f007 fdab 	bl	8008240 <osThreadNew>
 80006ea:	4603      	mov	r3, r0
 80006ec:	4a17      	ldr	r2, [pc, #92]	; (800074c <main+0x1e8>)
 80006ee:	6013      	str	r3, [r2, #0]
  checkkeysTaskHandle = osThreadNew(checkkeys, NULL, &checkkeysTaskHandle_attributes);
 80006f0:	4a17      	ldr	r2, [pc, #92]	; (8000750 <main+0x1ec>)
 80006f2:	2100      	movs	r1, #0
 80006f4:	4817      	ldr	r0, [pc, #92]	; (8000754 <main+0x1f0>)
 80006f6:	f007 fda3 	bl	8008240 <osThreadNew>
 80006fa:	4603      	mov	r3, r0
 80006fc:	4a16      	ldr	r2, [pc, #88]	; (8000758 <main+0x1f4>)
 80006fe:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000700:	f007 fd78 	bl	80081f4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000704:	e7fe      	b.n	8000704 <main+0x1a0>
 8000706:	bf00      	nop
 8000708:	2000021c 	.word	0x2000021c
 800070c:	48000800 	.word	0x48000800
 8000710:	20000230 	.word	0x20000230
 8000714:	20000244 	.word	0x20000244
 8000718:	20000258 	.word	0x20000258
 800071c:	2000026c 	.word	0x2000026c
 8000720:	48000400 	.word	0x48000400
 8000724:	20000280 	.word	0x20000280
 8000728:	48001400 	.word	0x48001400
 800072c:	20000294 	.word	0x20000294
 8000730:	200002a8 	.word	0x200002a8
 8000734:	48000c00 	.word	0x48000c00
 8000738:	200002bc 	.word	0x200002bc
 800073c:	200002d0 	.word	0x200002d0
 8000740:	200002e4 	.word	0x200002e4
 8000744:	0800b868 	.word	0x0800b868
 8000748:	08000dcd 	.word	0x08000dcd
 800074c:	20000214 	.word	0x20000214
 8000750:	0800b88c 	.word	0x0800b88c
 8000754:	08000b0d 	.word	0x08000b0d
 8000758:	20000218 	.word	0x20000218

0800075c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b096      	sub	sp, #88	; 0x58
 8000760:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000762:	f107 0314 	add.w	r3, r7, #20
 8000766:	2244      	movs	r2, #68	; 0x44
 8000768:	2100      	movs	r1, #0
 800076a:	4618      	mov	r0, r3
 800076c:	f00a fff8 	bl	800b760 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000770:	463b      	mov	r3, r7
 8000772:	2200      	movs	r2, #0
 8000774:	601a      	str	r2, [r3, #0]
 8000776:	605a      	str	r2, [r3, #4]
 8000778:	609a      	str	r2, [r3, #8]
 800077a:	60da      	str	r2, [r3, #12]
 800077c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800077e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000782:	f002 f95d 	bl	8002a40 <HAL_PWREx_ControlVoltageScaling>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800078c:	f000 fb28 	bl	8000de0 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000790:	f002 f938 	bl	8002a04 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000794:	4b22      	ldr	r3, [pc, #136]	; (8000820 <SystemClock_Config+0xc4>)
 8000796:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800079a:	4a21      	ldr	r2, [pc, #132]	; (8000820 <SystemClock_Config+0xc4>)
 800079c:	f023 0318 	bic.w	r3, r3, #24
 80007a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80007a4:	2314      	movs	r3, #20
 80007a6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80007a8:	2301      	movs	r3, #1
 80007aa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80007ac:	2301      	movs	r3, #1
 80007ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80007b0:	2300      	movs	r3, #0
 80007b2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80007b4:	2360      	movs	r3, #96	; 0x60
 80007b6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007b8:	2302      	movs	r3, #2
 80007ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80007bc:	2301      	movs	r3, #1
 80007be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80007c0:	2301      	movs	r3, #1
 80007c2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 71;
 80007c4:	2347      	movs	r3, #71	; 0x47
 80007c6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007c8:	2302      	movs	r3, #2
 80007ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007cc:	2302      	movs	r3, #2
 80007ce:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV6;
 80007d0:	2306      	movs	r3, #6
 80007d2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007d4:	f107 0314 	add.w	r3, r7, #20
 80007d8:	4618      	mov	r0, r3
 80007da:	f002 f9a7 	bl	8002b2c <HAL_RCC_OscConfig>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80007e4:	f000 fafc 	bl	8000de0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007e8:	230f      	movs	r3, #15
 80007ea:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ec:	2303      	movs	r3, #3
 80007ee:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007f0:	2300      	movs	r3, #0
 80007f2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007f8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007fa:	2300      	movs	r3, #0
 80007fc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007fe:	463b      	mov	r3, r7
 8000800:	2102      	movs	r1, #2
 8000802:	4618      	mov	r0, r3
 8000804:	f002 fdac 	bl	8003360 <HAL_RCC_ClockConfig>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800080e:	f000 fae7 	bl	8000de0 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000812:	f003 fac5 	bl	8003da0 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000816:	bf00      	nop
 8000818:	3758      	adds	r7, #88	; 0x58
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	40021000 	.word	0x40021000

08000824 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000828:	4b12      	ldr	r3, [pc, #72]	; (8000874 <MX_LPUART1_UART_Init+0x50>)
 800082a:	4a13      	ldr	r2, [pc, #76]	; (8000878 <MX_LPUART1_UART_Init+0x54>)
 800082c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 800082e:	4b11      	ldr	r3, [pc, #68]	; (8000874 <MX_LPUART1_UART_Init+0x50>)
 8000830:	4a12      	ldr	r2, [pc, #72]	; (800087c <MX_LPUART1_UART_Init+0x58>)
 8000832:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 8000834:	4b0f      	ldr	r3, [pc, #60]	; (8000874 <MX_LPUART1_UART_Init+0x50>)
 8000836:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800083a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800083c:	4b0d      	ldr	r3, [pc, #52]	; (8000874 <MX_LPUART1_UART_Init+0x50>)
 800083e:	2200      	movs	r2, #0
 8000840:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000842:	4b0c      	ldr	r3, [pc, #48]	; (8000874 <MX_LPUART1_UART_Init+0x50>)
 8000844:	2200      	movs	r2, #0
 8000846:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000848:	4b0a      	ldr	r3, [pc, #40]	; (8000874 <MX_LPUART1_UART_Init+0x50>)
 800084a:	220c      	movs	r2, #12
 800084c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800084e:	4b09      	ldr	r3, [pc, #36]	; (8000874 <MX_LPUART1_UART_Init+0x50>)
 8000850:	2200      	movs	r2, #0
 8000852:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000854:	4b07      	ldr	r3, [pc, #28]	; (8000874 <MX_LPUART1_UART_Init+0x50>)
 8000856:	2200      	movs	r2, #0
 8000858:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800085a:	4b06      	ldr	r3, [pc, #24]	; (8000874 <MX_LPUART1_UART_Init+0x50>)
 800085c:	2200      	movs	r2, #0
 800085e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000860:	4804      	ldr	r0, [pc, #16]	; (8000874 <MX_LPUART1_UART_Init+0x50>)
 8000862:	f003 ffc1 	bl	80047e8 <HAL_UART_Init>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 800086c:	f000 fab8 	bl	8000de0 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000870:	bf00      	nop
 8000872:	bd80      	pop	{r7, pc}
 8000874:	20000140 	.word	0x20000140
 8000878:	40008000 	.word	0x40008000
 800087c:	00033324 	.word	0x00033324

08000880 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b088      	sub	sp, #32
 8000884:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000886:	f107 0310 	add.w	r3, r7, #16
 800088a:	2200      	movs	r2, #0
 800088c:	601a      	str	r2, [r3, #0]
 800088e:	605a      	str	r2, [r3, #4]
 8000890:	609a      	str	r2, [r3, #8]
 8000892:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000894:	1d3b      	adds	r3, r7, #4
 8000896:	2200      	movs	r2, #0
 8000898:	601a      	str	r2, [r3, #0]
 800089a:	605a      	str	r2, [r3, #4]
 800089c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800089e:	4b1e      	ldr	r3, [pc, #120]	; (8000918 <MX_TIM2_Init+0x98>)
 80008a0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008a4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80008a6:	4b1c      	ldr	r3, [pc, #112]	; (8000918 <MX_TIM2_Init+0x98>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008ac:	4b1a      	ldr	r3, [pc, #104]	; (8000918 <MX_TIM2_Init+0x98>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80008b2:	4b19      	ldr	r3, [pc, #100]	; (8000918 <MX_TIM2_Init+0x98>)
 80008b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80008b8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008ba:	4b17      	ldr	r3, [pc, #92]	; (8000918 <MX_TIM2_Init+0x98>)
 80008bc:	2200      	movs	r2, #0
 80008be:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008c0:	4b15      	ldr	r3, [pc, #84]	; (8000918 <MX_TIM2_Init+0x98>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008c6:	4814      	ldr	r0, [pc, #80]	; (8000918 <MX_TIM2_Init+0x98>)
 80008c8:	f003 fc48 	bl	800415c <HAL_TIM_Base_Init>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80008d2:	f000 fa85 	bl	8000de0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008da:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008dc:	f107 0310 	add.w	r3, r7, #16
 80008e0:	4619      	mov	r1, r3
 80008e2:	480d      	ldr	r0, [pc, #52]	; (8000918 <MX_TIM2_Init+0x98>)
 80008e4:	f003 fcfa 	bl	80042dc <HAL_TIM_ConfigClockSource>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80008ee:	f000 fa77 	bl	8000de0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008f2:	2300      	movs	r3, #0
 80008f4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008f6:	2300      	movs	r3, #0
 80008f8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008fa:	1d3b      	adds	r3, r7, #4
 80008fc:	4619      	mov	r1, r3
 80008fe:	4806      	ldr	r0, [pc, #24]	; (8000918 <MX_TIM2_Init+0x98>)
 8000900:	f003 feea 	bl	80046d8 <HAL_TIMEx_MasterConfigSynchronization>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800090a:	f000 fa69 	bl	8000de0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800090e:	bf00      	nop
 8000910:	3720      	adds	r7, #32
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	200001c8 	.word	0x200001c8

0800091c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b08c      	sub	sp, #48	; 0x30
 8000920:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000922:	f107 031c 	add.w	r3, r7, #28
 8000926:	2200      	movs	r2, #0
 8000928:	601a      	str	r2, [r3, #0]
 800092a:	605a      	str	r2, [r3, #4]
 800092c:	609a      	str	r2, [r3, #8]
 800092e:	60da      	str	r2, [r3, #12]
 8000930:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000932:	4b70      	ldr	r3, [pc, #448]	; (8000af4 <MX_GPIO_Init+0x1d8>)
 8000934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000936:	4a6f      	ldr	r2, [pc, #444]	; (8000af4 <MX_GPIO_Init+0x1d8>)
 8000938:	f043 0304 	orr.w	r3, r3, #4
 800093c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800093e:	4b6d      	ldr	r3, [pc, #436]	; (8000af4 <MX_GPIO_Init+0x1d8>)
 8000940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000942:	f003 0304 	and.w	r3, r3, #4
 8000946:	61bb      	str	r3, [r7, #24]
 8000948:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800094a:	4b6a      	ldr	r3, [pc, #424]	; (8000af4 <MX_GPIO_Init+0x1d8>)
 800094c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800094e:	4a69      	ldr	r2, [pc, #420]	; (8000af4 <MX_GPIO_Init+0x1d8>)
 8000950:	f043 0320 	orr.w	r3, r3, #32
 8000954:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000956:	4b67      	ldr	r3, [pc, #412]	; (8000af4 <MX_GPIO_Init+0x1d8>)
 8000958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800095a:	f003 0320 	and.w	r3, r3, #32
 800095e:	617b      	str	r3, [r7, #20]
 8000960:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000962:	4b64      	ldr	r3, [pc, #400]	; (8000af4 <MX_GPIO_Init+0x1d8>)
 8000964:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000966:	4a63      	ldr	r2, [pc, #396]	; (8000af4 <MX_GPIO_Init+0x1d8>)
 8000968:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800096c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800096e:	4b61      	ldr	r3, [pc, #388]	; (8000af4 <MX_GPIO_Init+0x1d8>)
 8000970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000972:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000976:	613b      	str	r3, [r7, #16]
 8000978:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800097a:	4b5e      	ldr	r3, [pc, #376]	; (8000af4 <MX_GPIO_Init+0x1d8>)
 800097c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800097e:	4a5d      	ldr	r2, [pc, #372]	; (8000af4 <MX_GPIO_Init+0x1d8>)
 8000980:	f043 0301 	orr.w	r3, r3, #1
 8000984:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000986:	4b5b      	ldr	r3, [pc, #364]	; (8000af4 <MX_GPIO_Init+0x1d8>)
 8000988:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800098a:	f003 0301 	and.w	r3, r3, #1
 800098e:	60fb      	str	r3, [r7, #12]
 8000990:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000992:	4b58      	ldr	r3, [pc, #352]	; (8000af4 <MX_GPIO_Init+0x1d8>)
 8000994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000996:	4a57      	ldr	r2, [pc, #348]	; (8000af4 <MX_GPIO_Init+0x1d8>)
 8000998:	f043 0302 	orr.w	r3, r3, #2
 800099c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800099e:	4b55      	ldr	r3, [pc, #340]	; (8000af4 <MX_GPIO_Init+0x1d8>)
 80009a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009a2:	f003 0302 	and.w	r3, r3, #2
 80009a6:	60bb      	str	r3, [r7, #8]
 80009a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009aa:	4b52      	ldr	r3, [pc, #328]	; (8000af4 <MX_GPIO_Init+0x1d8>)
 80009ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ae:	4a51      	ldr	r2, [pc, #324]	; (8000af4 <MX_GPIO_Init+0x1d8>)
 80009b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009b6:	4b4f      	ldr	r3, [pc, #316]	; (8000af4 <MX_GPIO_Init+0x1d8>)
 80009b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009be:	607b      	str	r3, [r7, #4]
 80009c0:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 80009c2:	f002 f8a3 	bl	8002b0c <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009c6:	4b4b      	ldr	r3, [pc, #300]	; (8000af4 <MX_GPIO_Init+0x1d8>)
 80009c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ca:	4a4a      	ldr	r2, [pc, #296]	; (8000af4 <MX_GPIO_Init+0x1d8>)
 80009cc:	f043 0308 	orr.w	r3, r3, #8
 80009d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009d2:	4b48      	ldr	r3, [pc, #288]	; (8000af4 <MX_GPIO_Init+0x1d8>)
 80009d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009d6:	f003 0308 	and.w	r3, r3, #8
 80009da:	603b      	str	r3, [r7, #0]
 80009dc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(driverpin_GPIO_Port, driverpin_Pin, GPIO_PIN_RESET);
 80009de:	2200      	movs	r2, #0
 80009e0:	2108      	movs	r1, #8
 80009e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009e6:	f000 fe65 	bl	80016b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Red_Pin|LD2_Pin, GPIO_PIN_RESET);
 80009ea:	2200      	movs	r2, #0
 80009ec:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 80009f0:	4841      	ldr	r0, [pc, #260]	; (8000af8 <MX_GPIO_Init+0x1dc>)
 80009f2:	f000 fe5f 	bl	80016b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80009f6:	2200      	movs	r2, #0
 80009f8:	2140      	movs	r1, #64	; 0x40
 80009fa:	4840      	ldr	r0, [pc, #256]	; (8000afc <MX_GPIO_Init+0x1e0>)
 80009fc:	f000 fe5a 	bl	80016b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a00:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a06:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a10:	f107 031c 	add.w	r3, r7, #28
 8000a14:	4619      	mov	r1, r3
 8000a16:	483a      	ldr	r0, [pc, #232]	; (8000b00 <MX_GPIO_Init+0x1e4>)
 8000a18:	f000 fca2 	bl	8001360 <HAL_GPIO_Init>

  /*Configure GPIO pins : btnLEFT_Pin btnDOWN_Pin */
  GPIO_InitStruct.Pin = btnLEFT_Pin|btnDOWN_Pin;
 8000a1c:	2306      	movs	r3, #6
 8000a1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a20:	2300      	movs	r3, #0
 8000a22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a24:	2300      	movs	r3, #0
 8000a26:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000a28:	f107 031c 	add.w	r3, r7, #28
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	4835      	ldr	r0, [pc, #212]	; (8000b04 <MX_GPIO_Init+0x1e8>)
 8000a30:	f000 fc96 	bl	8001360 <HAL_GPIO_Init>

  /*Configure GPIO pins : btnA_Pin btnX_Pin btnB_Pin btnY_Pin
                           btnSTART_Pin */
  GPIO_InitStruct.Pin = btnA_Pin|btnX_Pin|btnB_Pin|btnY_Pin
 8000a34:	233b      	movs	r3, #59	; 0x3b
 8000a36:	61fb      	str	r3, [r7, #28]
                          |btnSTART_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a40:	f107 031c 	add.w	r3, r7, #28
 8000a44:	4619      	mov	r1, r3
 8000a46:	482e      	ldr	r0, [pc, #184]	; (8000b00 <MX_GPIO_Init+0x1e4>)
 8000a48:	f000 fc8a 	bl	8001360 <HAL_GPIO_Init>

  /*Configure GPIO pin : driverpin_Pin */
  GPIO_InitStruct.Pin = driverpin_Pin;
 8000a4c:	2308      	movs	r3, #8
 8000a4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a50:	2301      	movs	r3, #1
 8000a52:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a54:	2300      	movs	r3, #0
 8000a56:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(driverpin_GPIO_Port, &GPIO_InitStruct);
 8000a5c:	f107 031c 	add.w	r3, r7, #28
 8000a60:	4619      	mov	r1, r3
 8000a62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a66:	f000 fc7b 	bl	8001360 <HAL_GPIO_Init>

  /*Configure GPIO pins : btnSELECT_Pin btnUP_Pin */
  GPIO_InitStruct.Pin = btnSELECT_Pin|btnUP_Pin;
 8000a6a:	2344      	movs	r3, #68	; 0x44
 8000a6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a72:	2300      	movs	r3, #0
 8000a74:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a76:	f107 031c 	add.w	r3, r7, #28
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	481e      	ldr	r0, [pc, #120]	; (8000af8 <MX_GPIO_Init+0x1dc>)
 8000a7e:	f000 fc6f 	bl	8001360 <HAL_GPIO_Init>

  /*Configure GPIO pins : Red_Pin LD2_Pin */
  GPIO_InitStruct.Pin = Red_Pin|LD2_Pin;
 8000a82:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000a86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a88:	2301      	movs	r3, #1
 8000a8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a90:	2300      	movs	r3, #0
 8000a92:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a94:	f107 031c 	add.w	r3, r7, #28
 8000a98:	4619      	mov	r1, r3
 8000a9a:	4817      	ldr	r0, [pc, #92]	; (8000af8 <MX_GPIO_Init+0x1dc>)
 8000a9c:	f000 fc60 	bl	8001360 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000aa0:	2320      	movs	r3, #32
 8000aa2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000aac:	f107 031c 	add.w	r3, r7, #28
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4812      	ldr	r0, [pc, #72]	; (8000afc <MX_GPIO_Init+0x1e0>)
 8000ab4:	f000 fc54 	bl	8001360 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000ab8:	2340      	movs	r3, #64	; 0x40
 8000aba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000abc:	2301      	movs	r3, #1
 8000abe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000ac8:	f107 031c 	add.w	r3, r7, #28
 8000acc:	4619      	mov	r1, r3
 8000ace:	480b      	ldr	r0, [pc, #44]	; (8000afc <MX_GPIO_Init+0x1e0>)
 8000ad0:	f000 fc46 	bl	8001360 <HAL_GPIO_Init>

  /*Configure GPIO pins : HOTKEY_Pin btnRIGHT_Pin */
  GPIO_InitStruct.Pin = HOTKEY_Pin|btnRIGHT_Pin;
 8000ad4:	23c0      	movs	r3, #192	; 0xc0
 8000ad6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000adc:	2300      	movs	r3, #0
 8000ade:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ae0:	f107 031c 	add.w	r3, r7, #28
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4808      	ldr	r0, [pc, #32]	; (8000b08 <MX_GPIO_Init+0x1ec>)
 8000ae8:	f000 fc3a 	bl	8001360 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000aec:	bf00      	nop
 8000aee:	3730      	adds	r7, #48	; 0x30
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	40021000 	.word	0x40021000
 8000af8:	48000400 	.word	0x48000400
 8000afc:	48001800 	.word	0x48001800
 8000b00:	48000800 	.word	0x48000800
 8000b04:	48001400 	.word	0x48001400
 8000b08:	48000c00 	.word	0x48000c00

08000b0c <checkkeys>:

/* USER CODE BEGIN 4 */
void checkkeys(void *argument)
{
 8000b0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000b10:	b088      	sub	sp, #32
 8000b12:	af00      	add	r7, sp, #0
 8000b14:	60f8      	str	r0, [r7, #12]
	// make sure to actually start the counter!
	HAL_TIM_Base_Start(&htim2);
 8000b16:	48a0      	ldr	r0, [pc, #640]	; (8000d98 <checkkeys+0x28c>)
 8000b18:	f003 fb78 	bl	800420c <HAL_TIM_Base_Start>
//	buttons[7] = buttonRight;
//	buttons[8] = buttonSelect;
//	buttons[9] = buttonStart;
//	buttons[10] = buttonHotkey;

	capkey_t buttons[keycount];
 8000b1c:	230b      	movs	r3, #11
 8000b1e:	3b01      	subs	r3, #1
 8000b20:	61bb      	str	r3, [r7, #24]
 8000b22:	230b      	movs	r3, #11
 8000b24:	b2db      	uxtb	r3, r3
 8000b26:	2200      	movs	r2, #0
 8000b28:	603b      	str	r3, [r7, #0]
 8000b2a:	607a      	str	r2, [r7, #4]
 8000b2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000b30:	f04f 0000 	mov.w	r0, #0
 8000b34:	f04f 0100 	mov.w	r1, #0
 8000b38:	0099      	lsls	r1, r3, #2
 8000b3a:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8000b3e:	0090      	lsls	r0, r2, #2
 8000b40:	4602      	mov	r2, r0
 8000b42:	460b      	mov	r3, r1
 8000b44:	6839      	ldr	r1, [r7, #0]
 8000b46:	eb12 0801 	adds.w	r8, r2, r1
 8000b4a:	6879      	ldr	r1, [r7, #4]
 8000b4c:	eb43 0901 	adc.w	r9, r3, r1
 8000b50:	f04f 0200 	mov.w	r2, #0
 8000b54:	f04f 0300 	mov.w	r3, #0
 8000b58:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8000b5c:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8000b60:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8000b64:	230b      	movs	r3, #11
 8000b66:	b2db      	uxtb	r3, r3
 8000b68:	2200      	movs	r2, #0
 8000b6a:	469a      	mov	sl, r3
 8000b6c:	4693      	mov	fp, r2
 8000b6e:	4652      	mov	r2, sl
 8000b70:	465b      	mov	r3, fp
 8000b72:	f04f 0000 	mov.w	r0, #0
 8000b76:	f04f 0100 	mov.w	r1, #0
 8000b7a:	0099      	lsls	r1, r3, #2
 8000b7c:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8000b80:	0090      	lsls	r0, r2, #2
 8000b82:	4602      	mov	r2, r0
 8000b84:	460b      	mov	r3, r1
 8000b86:	eb12 040a 	adds.w	r4, r2, sl
 8000b8a:	eb43 050b 	adc.w	r5, r3, fp
 8000b8e:	f04f 0200 	mov.w	r2, #0
 8000b92:	f04f 0300 	mov.w	r3, #0
 8000b96:	016b      	lsls	r3, r5, #5
 8000b98:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8000b9c:	0162      	lsls	r2, r4, #5
 8000b9e:	230b      	movs	r3, #11
 8000ba0:	461a      	mov	r2, r3
 8000ba2:	4613      	mov	r3, r2
 8000ba4:	009b      	lsls	r3, r3, #2
 8000ba6:	4413      	add	r3, r2
 8000ba8:	009b      	lsls	r3, r3, #2
 8000baa:	3307      	adds	r3, #7
 8000bac:	08db      	lsrs	r3, r3, #3
 8000bae:	00db      	lsls	r3, r3, #3
 8000bb0:	ebad 0d03 	sub.w	sp, sp, r3
 8000bb4:	466b      	mov	r3, sp
 8000bb6:	3303      	adds	r3, #3
 8000bb8:	089b      	lsrs	r3, r3, #2
 8000bba:	009b      	lsls	r3, r3, #2
 8000bbc:	617b      	str	r3, [r7, #20]
	buttons[0] = buttonA;
 8000bbe:	697b      	ldr	r3, [r7, #20]
 8000bc0:	4a76      	ldr	r2, [pc, #472]	; (8000d9c <checkkeys+0x290>)
 8000bc2:	461c      	mov	r4, r3
 8000bc4:	4615      	mov	r5, r2
 8000bc6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bc8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bca:	682b      	ldr	r3, [r5, #0]
 8000bcc:	6023      	str	r3, [r4, #0]
	buttons[1] = buttonB;
 8000bce:	697b      	ldr	r3, [r7, #20]
 8000bd0:	4a73      	ldr	r2, [pc, #460]	; (8000da0 <checkkeys+0x294>)
 8000bd2:	f103 0414 	add.w	r4, r3, #20
 8000bd6:	4615      	mov	r5, r2
 8000bd8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bdc:	682b      	ldr	r3, [r5, #0]
 8000bde:	6023      	str	r3, [r4, #0]
	buttons[2] = buttonX;
 8000be0:	697b      	ldr	r3, [r7, #20]
 8000be2:	4a70      	ldr	r2, [pc, #448]	; (8000da4 <checkkeys+0x298>)
 8000be4:	f103 0428 	add.w	r4, r3, #40	; 0x28
 8000be8:	4615      	mov	r5, r2
 8000bea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bee:	682b      	ldr	r3, [r5, #0]
 8000bf0:	6023      	str	r3, [r4, #0]
	buttons[3] = buttonY;
 8000bf2:	697b      	ldr	r3, [r7, #20]
 8000bf4:	4a6c      	ldr	r2, [pc, #432]	; (8000da8 <checkkeys+0x29c>)
 8000bf6:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 8000bfa:	4615      	mov	r5, r2
 8000bfc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bfe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c00:	682b      	ldr	r3, [r5, #0]
 8000c02:	6023      	str	r3, [r4, #0]
	buttons[4] = buttonUp;
 8000c04:	697b      	ldr	r3, [r7, #20]
 8000c06:	4a69      	ldr	r2, [pc, #420]	; (8000dac <checkkeys+0x2a0>)
 8000c08:	f103 0450 	add.w	r4, r3, #80	; 0x50
 8000c0c:	4615      	mov	r5, r2
 8000c0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c12:	682b      	ldr	r3, [r5, #0]
 8000c14:	6023      	str	r3, [r4, #0]
	buttons[5] = buttonDown;
 8000c16:	697b      	ldr	r3, [r7, #20]
 8000c18:	4a65      	ldr	r2, [pc, #404]	; (8000db0 <checkkeys+0x2a4>)
 8000c1a:	f103 0464 	add.w	r4, r3, #100	; 0x64
 8000c1e:	4615      	mov	r5, r2
 8000c20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c24:	682b      	ldr	r3, [r5, #0]
 8000c26:	6023      	str	r3, [r4, #0]
	buttons[6] = buttonLeft;
 8000c28:	697b      	ldr	r3, [r7, #20]
 8000c2a:	4a62      	ldr	r2, [pc, #392]	; (8000db4 <checkkeys+0x2a8>)
 8000c2c:	f103 0478 	add.w	r4, r3, #120	; 0x78
 8000c30:	4615      	mov	r5, r2
 8000c32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c36:	682b      	ldr	r3, [r5, #0]
 8000c38:	6023      	str	r3, [r4, #0]
	buttons[7] = buttonRight;
 8000c3a:	697b      	ldr	r3, [r7, #20]
 8000c3c:	4a5e      	ldr	r2, [pc, #376]	; (8000db8 <checkkeys+0x2ac>)
 8000c3e:	f103 048c 	add.w	r4, r3, #140	; 0x8c
 8000c42:	4615      	mov	r5, r2
 8000c44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c48:	682b      	ldr	r3, [r5, #0]
 8000c4a:	6023      	str	r3, [r4, #0]
	buttons[8] = buttonSelect;
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	4a5b      	ldr	r2, [pc, #364]	; (8000dbc <checkkeys+0x2b0>)
 8000c50:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 8000c54:	4615      	mov	r5, r2
 8000c56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c58:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c5a:	682b      	ldr	r3, [r5, #0]
 8000c5c:	6023      	str	r3, [r4, #0]
	buttons[9] = buttonStart;
 8000c5e:	697b      	ldr	r3, [r7, #20]
 8000c60:	4a57      	ldr	r2, [pc, #348]	; (8000dc0 <checkkeys+0x2b4>)
 8000c62:	f103 04b4 	add.w	r4, r3, #180	; 0xb4
 8000c66:	4615      	mov	r5, r2
 8000c68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c6c:	682b      	ldr	r3, [r5, #0]
 8000c6e:	6023      	str	r3, [r4, #0]
	buttons[10] = buttonHotkey;
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	4a54      	ldr	r2, [pc, #336]	; (8000dc4 <checkkeys+0x2b8>)
 8000c74:	f103 04c8 	add.w	r4, r3, #200	; 0xc8
 8000c78:	4615      	mov	r5, r2
 8000c7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c7e:	682b      	ldr	r3, [r5, #0]
 8000c80:	6023      	str	r3, [r4, #0]

	// main loop
	for(;;)
	{
		// iterate through all the keys and see if we got a hit
		for(uint8_t i=0;i<keycount;i++)
 8000c82:	2300      	movs	r3, #0
 8000c84:	77fb      	strb	r3, [r7, #31]
 8000c86:	e081      	b.n	8000d8c <checkkeys+0x280>
		{
			uint32_t keyTime = getKey(&buttons[i],&htim2); // run a hit scan for the keytime
 8000c88:	7ffa      	ldrb	r2, [r7, #31]
 8000c8a:	4613      	mov	r3, r2
 8000c8c:	009b      	lsls	r3, r3, #2
 8000c8e:	4413      	add	r3, r2
 8000c90:	009b      	lsls	r3, r3, #2
 8000c92:	697a      	ldr	r2, [r7, #20]
 8000c94:	4413      	add	r3, r2
 8000c96:	4940      	ldr	r1, [pc, #256]	; (8000d98 <checkkeys+0x28c>)
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f7ff fc27 	bl	80004ec <getKey>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	613b      	str	r3, [r7, #16]
			if(keyTime > buttons[i].triggerTime) // is the measured transient time greater than the recorded hit time?
 8000ca2:	7ffa      	ldrb	r2, [r7, #31]
 8000ca4:	6979      	ldr	r1, [r7, #20]
 8000ca6:	4613      	mov	r3, r2
 8000ca8:	009b      	lsls	r3, r3, #2
 8000caa:	4413      	add	r3, r2
 8000cac:	009b      	lsls	r3, r3, #2
 8000cae:	440b      	add	r3, r1
 8000cb0:	330a      	adds	r3, #10
 8000cb2:	881b      	ldrh	r3, [r3, #0]
 8000cb4:	461a      	mov	r2, r3
 8000cb6:	693b      	ldr	r3, [r7, #16]
 8000cb8:	4293      	cmp	r3, r2
 8000cba:	d909      	bls.n	8000cd0 <checkkeys+0x1c4>
			{
				// TODO: send the keycode to the client
				buttons[i].state = true;
 8000cbc:	7ffa      	ldrb	r2, [r7, #31]
 8000cbe:	6979      	ldr	r1, [r7, #20]
 8000cc0:	4613      	mov	r3, r2
 8000cc2:	009b      	lsls	r3, r3, #2
 8000cc4:	4413      	add	r3, r2
 8000cc6:	009b      	lsls	r3, r3, #2
 8000cc8:	440b      	add	r3, r1
 8000cca:	2201      	movs	r2, #1
 8000ccc:	701a      	strb	r2, [r3, #0]
 8000cce:	e008      	b.n	8000ce2 <checkkeys+0x1d6>
			}
			else
			{
				buttons[i].state = false;
 8000cd0:	7ffa      	ldrb	r2, [r7, #31]
 8000cd2:	6979      	ldr	r1, [r7, #20]
 8000cd4:	4613      	mov	r3, r2
 8000cd6:	009b      	lsls	r3, r3, #2
 8000cd8:	4413      	add	r3, r2
 8000cda:	009b      	lsls	r3, r3, #2
 8000cdc:	440b      	add	r3, r1
 8000cde:	2200      	movs	r2, #0
 8000ce0:	701a      	strb	r2, [r3, #0]
			}

			// if last state is false and current state is true then send a zero
			if(buttons[i].lastState == true && buttons[i].state == false)
 8000ce2:	7ffa      	ldrb	r2, [r7, #31]
 8000ce4:	6979      	ldr	r1, [r7, #20]
 8000ce6:	4613      	mov	r3, r2
 8000ce8:	009b      	lsls	r3, r3, #2
 8000cea:	4413      	add	r3, r2
 8000cec:	009b      	lsls	r3, r3, #2
 8000cee:	440b      	add	r3, r1
 8000cf0:	3301      	adds	r3, #1
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d013      	beq.n	8000d20 <checkkeys+0x214>
 8000cf8:	7ffa      	ldrb	r2, [r7, #31]
 8000cfa:	6979      	ldr	r1, [r7, #20]
 8000cfc:	4613      	mov	r3, r2
 8000cfe:	009b      	lsls	r3, r3, #2
 8000d00:	4413      	add	r3, r2
 8000d02:	009b      	lsls	r3, r3, #2
 8000d04:	440b      	add	r3, r1
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	f083 0301 	eor.w	r3, r3, #1
 8000d0c:	b2db      	uxtb	r3, r3
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d006      	beq.n	8000d20 <checkkeys+0x214>
			{
				// key up, send a zero
				HAL_GPIO_WritePin(Red_GPIO_Port,Red_Pin,0);
 8000d12:	2200      	movs	r2, #0
 8000d14:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d18:	482b      	ldr	r0, [pc, #172]	; (8000dc8 <checkkeys+0x2bc>)
 8000d1a:	f000 fccb 	bl	80016b4 <HAL_GPIO_WritePin>
 8000d1e:	e01d      	b.n	8000d5c <checkkeys+0x250>
			}
			else if(buttons[i].lastState == false && buttons[i].state == true)
 8000d20:	7ffa      	ldrb	r2, [r7, #31]
 8000d22:	6979      	ldr	r1, [r7, #20]
 8000d24:	4613      	mov	r3, r2
 8000d26:	009b      	lsls	r3, r3, #2
 8000d28:	4413      	add	r3, r2
 8000d2a:	009b      	lsls	r3, r3, #2
 8000d2c:	440b      	add	r3, r1
 8000d2e:	3301      	adds	r3, #1
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	f083 0301 	eor.w	r3, r3, #1
 8000d36:	b2db      	uxtb	r3, r3
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d00f      	beq.n	8000d5c <checkkeys+0x250>
 8000d3c:	7ffa      	ldrb	r2, [r7, #31]
 8000d3e:	6979      	ldr	r1, [r7, #20]
 8000d40:	4613      	mov	r3, r2
 8000d42:	009b      	lsls	r3, r3, #2
 8000d44:	4413      	add	r3, r2
 8000d46:	009b      	lsls	r3, r3, #2
 8000d48:	440b      	add	r3, r1
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d005      	beq.n	8000d5c <checkkeys+0x250>
			{
				// key down, send a key code
				HAL_GPIO_WritePin(Red_GPIO_Port,Red_Pin,1);
 8000d50:	2201      	movs	r2, #1
 8000d52:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d56:	481c      	ldr	r0, [pc, #112]	; (8000dc8 <checkkeys+0x2bc>)
 8000d58:	f000 fcac 	bl	80016b4 <HAL_GPIO_WritePin>
			}

			buttons[i].lastState = buttons[i].state; // update the state
 8000d5c:	7ff9      	ldrb	r1, [r7, #31]
 8000d5e:	7ffa      	ldrb	r2, [r7, #31]
 8000d60:	6978      	ldr	r0, [r7, #20]
 8000d62:	460b      	mov	r3, r1
 8000d64:	009b      	lsls	r3, r3, #2
 8000d66:	440b      	add	r3, r1
 8000d68:	009b      	lsls	r3, r3, #2
 8000d6a:	4403      	add	r3, r0
 8000d6c:	7818      	ldrb	r0, [r3, #0]
 8000d6e:	6979      	ldr	r1, [r7, #20]
 8000d70:	4613      	mov	r3, r2
 8000d72:	009b      	lsls	r3, r3, #2
 8000d74:	4413      	add	r3, r2
 8000d76:	009b      	lsls	r3, r3, #2
 8000d78:	440b      	add	r3, r1
 8000d7a:	3301      	adds	r3, #1
 8000d7c:	4602      	mov	r2, r0
 8000d7e:	701a      	strb	r2, [r3, #0]
			osDelay(1);
 8000d80:	2001      	movs	r0, #1
 8000d82:	f007 faef 	bl	8008364 <osDelay>
		for(uint8_t i=0;i<keycount;i++)
 8000d86:	7ffb      	ldrb	r3, [r7, #31]
 8000d88:	3301      	adds	r3, #1
 8000d8a:	77fb      	strb	r3, [r7, #31]
 8000d8c:	220b      	movs	r2, #11
 8000d8e:	7ffb      	ldrb	r3, [r7, #31]
 8000d90:	4293      	cmp	r3, r2
 8000d92:	f4ff af79 	bcc.w	8000c88 <checkkeys+0x17c>
 8000d96:	e774      	b.n	8000c82 <checkkeys+0x176>
 8000d98:	200001c8 	.word	0x200001c8
 8000d9c:	2000021c 	.word	0x2000021c
 8000da0:	20000230 	.word	0x20000230
 8000da4:	20000244 	.word	0x20000244
 8000da8:	20000258 	.word	0x20000258
 8000dac:	2000026c 	.word	0x2000026c
 8000db0:	20000280 	.word	0x20000280
 8000db4:	20000294 	.word	0x20000294
 8000db8:	200002a8 	.word	0x200002a8
 8000dbc:	200002bc 	.word	0x200002bc
 8000dc0:	200002d0 	.word	0x200002d0
 8000dc4:	200002e4 	.word	0x200002e4
 8000dc8:	48000400 	.word	0x48000400

08000dcc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000dd4:	f009 ff3a 	bl	800ac4c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000dd8:	2001      	movs	r0, #1
 8000dda:	f007 fac3 	bl	8008364 <osDelay>
 8000dde:	e7fb      	b.n	8000dd8 <StartDefaultTask+0xc>

08000de0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000de4:	b672      	cpsid	i
}
 8000de6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000de8:	e7fe      	b.n	8000de8 <Error_Handler+0x8>
	...

08000dec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000df2:	4b11      	ldr	r3, [pc, #68]	; (8000e38 <HAL_MspInit+0x4c>)
 8000df4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000df6:	4a10      	ldr	r2, [pc, #64]	; (8000e38 <HAL_MspInit+0x4c>)
 8000df8:	f043 0301 	orr.w	r3, r3, #1
 8000dfc:	6613      	str	r3, [r2, #96]	; 0x60
 8000dfe:	4b0e      	ldr	r3, [pc, #56]	; (8000e38 <HAL_MspInit+0x4c>)
 8000e00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e02:	f003 0301 	and.w	r3, r3, #1
 8000e06:	607b      	str	r3, [r7, #4]
 8000e08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e0a:	4b0b      	ldr	r3, [pc, #44]	; (8000e38 <HAL_MspInit+0x4c>)
 8000e0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e0e:	4a0a      	ldr	r2, [pc, #40]	; (8000e38 <HAL_MspInit+0x4c>)
 8000e10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e14:	6593      	str	r3, [r2, #88]	; 0x58
 8000e16:	4b08      	ldr	r3, [pc, #32]	; (8000e38 <HAL_MspInit+0x4c>)
 8000e18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e1e:	603b      	str	r3, [r7, #0]
 8000e20:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000e22:	2200      	movs	r2, #0
 8000e24:	210f      	movs	r1, #15
 8000e26:	f06f 0001 	mvn.w	r0, #1
 8000e2a:	f000 fa62 	bl	80012f2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e2e:	bf00      	nop
 8000e30:	3708      	adds	r7, #8
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	40021000 	.word	0x40021000

08000e3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b0ac      	sub	sp, #176	; 0xb0
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e44:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e48:	2200      	movs	r2, #0
 8000e4a:	601a      	str	r2, [r3, #0]
 8000e4c:	605a      	str	r2, [r3, #4]
 8000e4e:	609a      	str	r2, [r3, #8]
 8000e50:	60da      	str	r2, [r3, #12]
 8000e52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e54:	f107 0310 	add.w	r3, r7, #16
 8000e58:	228c      	movs	r2, #140	; 0x8c
 8000e5a:	2100      	movs	r1, #0
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f00a fc7f 	bl	800b760 <memset>
  if(huart->Instance==LPUART1)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4a22      	ldr	r2, [pc, #136]	; (8000ef0 <HAL_UART_MspInit+0xb4>)
 8000e68:	4293      	cmp	r3, r2
 8000e6a:	d13d      	bne.n	8000ee8 <HAL_UART_MspInit+0xac>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000e6c:	2320      	movs	r3, #32
 8000e6e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000e70:	2300      	movs	r3, #0
 8000e72:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e74:	f107 0310 	add.w	r3, r7, #16
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f002 fc95 	bl	80037a8 <HAL_RCCEx_PeriphCLKConfig>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000e84:	f7ff ffac 	bl	8000de0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000e88:	4b1a      	ldr	r3, [pc, #104]	; (8000ef4 <HAL_UART_MspInit+0xb8>)
 8000e8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e8c:	4a19      	ldr	r2, [pc, #100]	; (8000ef4 <HAL_UART_MspInit+0xb8>)
 8000e8e:	f043 0301 	orr.w	r3, r3, #1
 8000e92:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000e94:	4b17      	ldr	r3, [pc, #92]	; (8000ef4 <HAL_UART_MspInit+0xb8>)
 8000e96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e98:	f003 0301 	and.w	r3, r3, #1
 8000e9c:	60fb      	str	r3, [r7, #12]
 8000e9e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ea0:	4b14      	ldr	r3, [pc, #80]	; (8000ef4 <HAL_UART_MspInit+0xb8>)
 8000ea2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ea4:	4a13      	ldr	r2, [pc, #76]	; (8000ef4 <HAL_UART_MspInit+0xb8>)
 8000ea6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000eaa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eac:	4b11      	ldr	r3, [pc, #68]	; (8000ef4 <HAL_UART_MspInit+0xb8>)
 8000eae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000eb4:	60bb      	str	r3, [r7, #8]
 8000eb6:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8000eb8:	f001 fe28 	bl	8002b0c <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000ebc:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000ec0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec4:	2302      	movs	r3, #2
 8000ec6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ed0:	2303      	movs	r3, #3
 8000ed2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000ed6:	2308      	movs	r3, #8
 8000ed8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000edc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	4805      	ldr	r0, [pc, #20]	; (8000ef8 <HAL_UART_MspInit+0xbc>)
 8000ee4:	f000 fa3c 	bl	8001360 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000ee8:	bf00      	nop
 8000eea:	37b0      	adds	r7, #176	; 0xb0
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	40008000 	.word	0x40008000
 8000ef4:	40021000 	.word	0x40021000
 8000ef8:	48001800 	.word	0x48001800

08000efc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b085      	sub	sp, #20
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f0c:	d10b      	bne.n	8000f26 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f0e:	4b09      	ldr	r3, [pc, #36]	; (8000f34 <HAL_TIM_Base_MspInit+0x38>)
 8000f10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f12:	4a08      	ldr	r2, [pc, #32]	; (8000f34 <HAL_TIM_Base_MspInit+0x38>)
 8000f14:	f043 0301 	orr.w	r3, r3, #1
 8000f18:	6593      	str	r3, [r2, #88]	; 0x58
 8000f1a:	4b06      	ldr	r3, [pc, #24]	; (8000f34 <HAL_TIM_Base_MspInit+0x38>)
 8000f1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f1e:	f003 0301 	and.w	r3, r3, #1
 8000f22:	60fb      	str	r3, [r7, #12]
 8000f24:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000f26:	bf00      	nop
 8000f28:	3714      	adds	r7, #20
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	40021000 	.word	0x40021000

08000f38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f3c:	e7fe      	b.n	8000f3c <NMI_Handler+0x4>

08000f3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f3e:	b480      	push	{r7}
 8000f40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f42:	e7fe      	b.n	8000f42 <HardFault_Handler+0x4>

08000f44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f48:	e7fe      	b.n	8000f48 <MemManage_Handler+0x4>

08000f4a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f4a:	b480      	push	{r7}
 8000f4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f4e:	e7fe      	b.n	8000f4e <BusFault_Handler+0x4>

08000f50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f54:	e7fe      	b.n	8000f54 <UsageFault_Handler+0x4>

08000f56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f56:	b480      	push	{r7}
 8000f58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f5a:	bf00      	nop
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr

08000f64 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f68:	f000 f8a4 	bl	80010b4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000f6c:	f008 fe08 	bl	8009b80 <xTaskGetSchedulerState>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b01      	cmp	r3, #1
 8000f74:	d001      	beq.n	8000f7a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000f76:	f009 fbef 	bl	800a758 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f7a:	bf00      	nop
 8000f7c:	bd80      	pop	{r7, pc}
	...

08000f80 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000f84:	4802      	ldr	r0, [pc, #8]	; (8000f90 <OTG_FS_IRQHandler+0x10>)
 8000f86:	f000 fd00 	bl	800198a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000f8a:	bf00      	nop
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	200020e4 	.word	0x200020e4

08000f94 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000f98:	4b06      	ldr	r3, [pc, #24]	; (8000fb4 <SystemInit+0x20>)
 8000f9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f9e:	4a05      	ldr	r2, [pc, #20]	; (8000fb4 <SystemInit+0x20>)
 8000fa0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fa4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000fa8:	bf00      	nop
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	e000ed00 	.word	0xe000ed00

08000fb8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000fb8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ff0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000fbc:	f7ff ffea 	bl	8000f94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fc0:	480c      	ldr	r0, [pc, #48]	; (8000ff4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000fc2:	490d      	ldr	r1, [pc, #52]	; (8000ff8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fc4:	4a0d      	ldr	r2, [pc, #52]	; (8000ffc <LoopForever+0xe>)
  movs r3, #0
 8000fc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fc8:	e002      	b.n	8000fd0 <LoopCopyDataInit>

08000fca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fcc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fce:	3304      	adds	r3, #4

08000fd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fd4:	d3f9      	bcc.n	8000fca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fd6:	4a0a      	ldr	r2, [pc, #40]	; (8001000 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fd8:	4c0a      	ldr	r4, [pc, #40]	; (8001004 <LoopForever+0x16>)
  movs r3, #0
 8000fda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fdc:	e001      	b.n	8000fe2 <LoopFillZerobss>

08000fde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fe0:	3204      	adds	r2, #4

08000fe2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fe2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fe4:	d3fb      	bcc.n	8000fde <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fe6:	f00a fbc3 	bl	800b770 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000fea:	f7ff fabb 	bl	8000564 <main>

08000fee <LoopForever>:

LoopForever:
    b LoopForever
 8000fee:	e7fe      	b.n	8000fee <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ff0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000ff4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ff8:	20000124 	.word	0x20000124
  ldr r2, =_sidata
 8000ffc:	0800b908 	.word	0x0800b908
  ldr r2, =_sbss
 8001000:	20000124 	.word	0x20000124
  ldr r4, =_ebss
 8001004:	20002604 	.word	0x20002604

08001008 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001008:	e7fe      	b.n	8001008 <ADC1_2_IRQHandler>

0800100a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800100a:	b580      	push	{r7, lr}
 800100c:	b082      	sub	sp, #8
 800100e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001010:	2300      	movs	r3, #0
 8001012:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001014:	2003      	movs	r0, #3
 8001016:	f000 f961 	bl	80012dc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800101a:	200f      	movs	r0, #15
 800101c:	f000 f80e 	bl	800103c <HAL_InitTick>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d002      	beq.n	800102c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001026:	2301      	movs	r3, #1
 8001028:	71fb      	strb	r3, [r7, #7]
 800102a:	e001      	b.n	8001030 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800102c:	f7ff fede 	bl	8000dec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001030:	79fb      	ldrb	r3, [r7, #7]
}
 8001032:	4618      	mov	r0, r3
 8001034:	3708      	adds	r7, #8
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
	...

0800103c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b084      	sub	sp, #16
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001044:	2300      	movs	r3, #0
 8001046:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001048:	4b17      	ldr	r3, [pc, #92]	; (80010a8 <HAL_InitTick+0x6c>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d023      	beq.n	8001098 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001050:	4b16      	ldr	r3, [pc, #88]	; (80010ac <HAL_InitTick+0x70>)
 8001052:	681a      	ldr	r2, [r3, #0]
 8001054:	4b14      	ldr	r3, [pc, #80]	; (80010a8 <HAL_InitTick+0x6c>)
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	4619      	mov	r1, r3
 800105a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800105e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001062:	fbb2 f3f3 	udiv	r3, r2, r3
 8001066:	4618      	mov	r0, r3
 8001068:	f000 f96d 	bl	8001346 <HAL_SYSTICK_Config>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d10f      	bne.n	8001092 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	2b0f      	cmp	r3, #15
 8001076:	d809      	bhi.n	800108c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001078:	2200      	movs	r2, #0
 800107a:	6879      	ldr	r1, [r7, #4]
 800107c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001080:	f000 f937 	bl	80012f2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001084:	4a0a      	ldr	r2, [pc, #40]	; (80010b0 <HAL_InitTick+0x74>)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	6013      	str	r3, [r2, #0]
 800108a:	e007      	b.n	800109c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800108c:	2301      	movs	r3, #1
 800108e:	73fb      	strb	r3, [r7, #15]
 8001090:	e004      	b.n	800109c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001092:	2301      	movs	r3, #1
 8001094:	73fb      	strb	r3, [r7, #15]
 8001096:	e001      	b.n	800109c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001098:	2301      	movs	r3, #1
 800109a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800109c:	7bfb      	ldrb	r3, [r7, #15]
}
 800109e:	4618      	mov	r0, r3
 80010a0:	3710      	adds	r7, #16
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	20000008 	.word	0x20000008
 80010ac:	20000000 	.word	0x20000000
 80010b0:	20000004 	.word	0x20000004

080010b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010b8:	4b06      	ldr	r3, [pc, #24]	; (80010d4 <HAL_IncTick+0x20>)
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	461a      	mov	r2, r3
 80010be:	4b06      	ldr	r3, [pc, #24]	; (80010d8 <HAL_IncTick+0x24>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4413      	add	r3, r2
 80010c4:	4a04      	ldr	r2, [pc, #16]	; (80010d8 <HAL_IncTick+0x24>)
 80010c6:	6013      	str	r3, [r2, #0]
}
 80010c8:	bf00      	nop
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	20000008 	.word	0x20000008
 80010d8:	200002f8 	.word	0x200002f8

080010dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  return uwTick;
 80010e0:	4b03      	ldr	r3, [pc, #12]	; (80010f0 <HAL_GetTick+0x14>)
 80010e2:	681b      	ldr	r3, [r3, #0]
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	200002f8 	.word	0x200002f8

080010f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b084      	sub	sp, #16
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010fc:	f7ff ffee 	bl	80010dc <HAL_GetTick>
 8001100:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800110c:	d005      	beq.n	800111a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800110e:	4b0a      	ldr	r3, [pc, #40]	; (8001138 <HAL_Delay+0x44>)
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	461a      	mov	r2, r3
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	4413      	add	r3, r2
 8001118:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800111a:	bf00      	nop
 800111c:	f7ff ffde 	bl	80010dc <HAL_GetTick>
 8001120:	4602      	mov	r2, r0
 8001122:	68bb      	ldr	r3, [r7, #8]
 8001124:	1ad3      	subs	r3, r2, r3
 8001126:	68fa      	ldr	r2, [r7, #12]
 8001128:	429a      	cmp	r2, r3
 800112a:	d8f7      	bhi.n	800111c <HAL_Delay+0x28>
  {
  }
}
 800112c:	bf00      	nop
 800112e:	bf00      	nop
 8001130:	3710      	adds	r7, #16
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	20000008 	.word	0x20000008

0800113c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800113c:	b480      	push	{r7}
 800113e:	b085      	sub	sp, #20
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	f003 0307 	and.w	r3, r3, #7
 800114a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800114c:	4b0c      	ldr	r3, [pc, #48]	; (8001180 <__NVIC_SetPriorityGrouping+0x44>)
 800114e:	68db      	ldr	r3, [r3, #12]
 8001150:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001152:	68ba      	ldr	r2, [r7, #8]
 8001154:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001158:	4013      	ands	r3, r2
 800115a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001160:	68bb      	ldr	r3, [r7, #8]
 8001162:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001164:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001168:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800116c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800116e:	4a04      	ldr	r2, [pc, #16]	; (8001180 <__NVIC_SetPriorityGrouping+0x44>)
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	60d3      	str	r3, [r2, #12]
}
 8001174:	bf00      	nop
 8001176:	3714      	adds	r7, #20
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr
 8001180:	e000ed00 	.word	0xe000ed00

08001184 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001188:	4b04      	ldr	r3, [pc, #16]	; (800119c <__NVIC_GetPriorityGrouping+0x18>)
 800118a:	68db      	ldr	r3, [r3, #12]
 800118c:	0a1b      	lsrs	r3, r3, #8
 800118e:	f003 0307 	and.w	r3, r3, #7
}
 8001192:	4618      	mov	r0, r3
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr
 800119c:	e000ed00 	.word	0xe000ed00

080011a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	4603      	mov	r3, r0
 80011a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	db0b      	blt.n	80011ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011b2:	79fb      	ldrb	r3, [r7, #7]
 80011b4:	f003 021f 	and.w	r2, r3, #31
 80011b8:	4907      	ldr	r1, [pc, #28]	; (80011d8 <__NVIC_EnableIRQ+0x38>)
 80011ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011be:	095b      	lsrs	r3, r3, #5
 80011c0:	2001      	movs	r0, #1
 80011c2:	fa00 f202 	lsl.w	r2, r0, r2
 80011c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011ca:	bf00      	nop
 80011cc:	370c      	adds	r7, #12
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	e000e100 	.word	0xe000e100

080011dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	4603      	mov	r3, r0
 80011e4:	6039      	str	r1, [r7, #0]
 80011e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	db0a      	blt.n	8001206 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	b2da      	uxtb	r2, r3
 80011f4:	490c      	ldr	r1, [pc, #48]	; (8001228 <__NVIC_SetPriority+0x4c>)
 80011f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011fa:	0112      	lsls	r2, r2, #4
 80011fc:	b2d2      	uxtb	r2, r2
 80011fe:	440b      	add	r3, r1
 8001200:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001204:	e00a      	b.n	800121c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	b2da      	uxtb	r2, r3
 800120a:	4908      	ldr	r1, [pc, #32]	; (800122c <__NVIC_SetPriority+0x50>)
 800120c:	79fb      	ldrb	r3, [r7, #7]
 800120e:	f003 030f 	and.w	r3, r3, #15
 8001212:	3b04      	subs	r3, #4
 8001214:	0112      	lsls	r2, r2, #4
 8001216:	b2d2      	uxtb	r2, r2
 8001218:	440b      	add	r3, r1
 800121a:	761a      	strb	r2, [r3, #24]
}
 800121c:	bf00      	nop
 800121e:	370c      	adds	r7, #12
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr
 8001228:	e000e100 	.word	0xe000e100
 800122c:	e000ed00 	.word	0xe000ed00

08001230 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001230:	b480      	push	{r7}
 8001232:	b089      	sub	sp, #36	; 0x24
 8001234:	af00      	add	r7, sp, #0
 8001236:	60f8      	str	r0, [r7, #12]
 8001238:	60b9      	str	r1, [r7, #8]
 800123a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	f003 0307 	and.w	r3, r3, #7
 8001242:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001244:	69fb      	ldr	r3, [r7, #28]
 8001246:	f1c3 0307 	rsb	r3, r3, #7
 800124a:	2b04      	cmp	r3, #4
 800124c:	bf28      	it	cs
 800124e:	2304      	movcs	r3, #4
 8001250:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	3304      	adds	r3, #4
 8001256:	2b06      	cmp	r3, #6
 8001258:	d902      	bls.n	8001260 <NVIC_EncodePriority+0x30>
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	3b03      	subs	r3, #3
 800125e:	e000      	b.n	8001262 <NVIC_EncodePriority+0x32>
 8001260:	2300      	movs	r3, #0
 8001262:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001264:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001268:	69bb      	ldr	r3, [r7, #24]
 800126a:	fa02 f303 	lsl.w	r3, r2, r3
 800126e:	43da      	mvns	r2, r3
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	401a      	ands	r2, r3
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001278:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	fa01 f303 	lsl.w	r3, r1, r3
 8001282:	43d9      	mvns	r1, r3
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001288:	4313      	orrs	r3, r2
         );
}
 800128a:	4618      	mov	r0, r3
 800128c:	3724      	adds	r7, #36	; 0x24
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
	...

08001298 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	3b01      	subs	r3, #1
 80012a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012a8:	d301      	bcc.n	80012ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012aa:	2301      	movs	r3, #1
 80012ac:	e00f      	b.n	80012ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012ae:	4a0a      	ldr	r2, [pc, #40]	; (80012d8 <SysTick_Config+0x40>)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	3b01      	subs	r3, #1
 80012b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012b6:	210f      	movs	r1, #15
 80012b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80012bc:	f7ff ff8e 	bl	80011dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012c0:	4b05      	ldr	r3, [pc, #20]	; (80012d8 <SysTick_Config+0x40>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012c6:	4b04      	ldr	r3, [pc, #16]	; (80012d8 <SysTick_Config+0x40>)
 80012c8:	2207      	movs	r2, #7
 80012ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012cc:	2300      	movs	r3, #0
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	e000e010 	.word	0xe000e010

080012dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012e4:	6878      	ldr	r0, [r7, #4]
 80012e6:	f7ff ff29 	bl	800113c <__NVIC_SetPriorityGrouping>
}
 80012ea:	bf00      	nop
 80012ec:	3708      	adds	r7, #8
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}

080012f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012f2:	b580      	push	{r7, lr}
 80012f4:	b086      	sub	sp, #24
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	4603      	mov	r3, r0
 80012fa:	60b9      	str	r1, [r7, #8]
 80012fc:	607a      	str	r2, [r7, #4]
 80012fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001300:	2300      	movs	r3, #0
 8001302:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001304:	f7ff ff3e 	bl	8001184 <__NVIC_GetPriorityGrouping>
 8001308:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800130a:	687a      	ldr	r2, [r7, #4]
 800130c:	68b9      	ldr	r1, [r7, #8]
 800130e:	6978      	ldr	r0, [r7, #20]
 8001310:	f7ff ff8e 	bl	8001230 <NVIC_EncodePriority>
 8001314:	4602      	mov	r2, r0
 8001316:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800131a:	4611      	mov	r1, r2
 800131c:	4618      	mov	r0, r3
 800131e:	f7ff ff5d 	bl	80011dc <__NVIC_SetPriority>
}
 8001322:	bf00      	nop
 8001324:	3718      	adds	r7, #24
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}

0800132a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800132a:	b580      	push	{r7, lr}
 800132c:	b082      	sub	sp, #8
 800132e:	af00      	add	r7, sp, #0
 8001330:	4603      	mov	r3, r0
 8001332:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001334:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001338:	4618      	mov	r0, r3
 800133a:	f7ff ff31 	bl	80011a0 <__NVIC_EnableIRQ>
}
 800133e:	bf00      	nop
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}

08001346 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001346:	b580      	push	{r7, lr}
 8001348:	b082      	sub	sp, #8
 800134a:	af00      	add	r7, sp, #0
 800134c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800134e:	6878      	ldr	r0, [r7, #4]
 8001350:	f7ff ffa2 	bl	8001298 <SysTick_Config>
 8001354:	4603      	mov	r3, r0
}
 8001356:	4618      	mov	r0, r3
 8001358:	3708      	adds	r7, #8
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
	...

08001360 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001360:	b480      	push	{r7}
 8001362:	b087      	sub	sp, #28
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
 8001368:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800136a:	2300      	movs	r3, #0
 800136c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800136e:	e166      	b.n	800163e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	2101      	movs	r1, #1
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	fa01 f303 	lsl.w	r3, r1, r3
 800137c:	4013      	ands	r3, r2
 800137e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	2b00      	cmp	r3, #0
 8001384:	f000 8158 	beq.w	8001638 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	f003 0303 	and.w	r3, r3, #3
 8001390:	2b01      	cmp	r3, #1
 8001392:	d005      	beq.n	80013a0 <HAL_GPIO_Init+0x40>
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	f003 0303 	and.w	r3, r3, #3
 800139c:	2b02      	cmp	r3, #2
 800139e:	d130      	bne.n	8001402 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	689b      	ldr	r3, [r3, #8]
 80013a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80013a6:	697b      	ldr	r3, [r7, #20]
 80013a8:	005b      	lsls	r3, r3, #1
 80013aa:	2203      	movs	r2, #3
 80013ac:	fa02 f303 	lsl.w	r3, r2, r3
 80013b0:	43db      	mvns	r3, r3
 80013b2:	693a      	ldr	r2, [r7, #16]
 80013b4:	4013      	ands	r3, r2
 80013b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	68da      	ldr	r2, [r3, #12]
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	005b      	lsls	r3, r3, #1
 80013c0:	fa02 f303 	lsl.w	r3, r2, r3
 80013c4:	693a      	ldr	r2, [r7, #16]
 80013c6:	4313      	orrs	r3, r2
 80013c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	693a      	ldr	r2, [r7, #16]
 80013ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80013d6:	2201      	movs	r2, #1
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	fa02 f303 	lsl.w	r3, r2, r3
 80013de:	43db      	mvns	r3, r3
 80013e0:	693a      	ldr	r2, [r7, #16]
 80013e2:	4013      	ands	r3, r2
 80013e4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	091b      	lsrs	r3, r3, #4
 80013ec:	f003 0201 	and.w	r2, r3, #1
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	fa02 f303 	lsl.w	r3, r2, r3
 80013f6:	693a      	ldr	r2, [r7, #16]
 80013f8:	4313      	orrs	r3, r2
 80013fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	693a      	ldr	r2, [r7, #16]
 8001400:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	f003 0303 	and.w	r3, r3, #3
 800140a:	2b03      	cmp	r3, #3
 800140c:	d017      	beq.n	800143e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	68db      	ldr	r3, [r3, #12]
 8001412:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	005b      	lsls	r3, r3, #1
 8001418:	2203      	movs	r2, #3
 800141a:	fa02 f303 	lsl.w	r3, r2, r3
 800141e:	43db      	mvns	r3, r3
 8001420:	693a      	ldr	r2, [r7, #16]
 8001422:	4013      	ands	r3, r2
 8001424:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	689a      	ldr	r2, [r3, #8]
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	005b      	lsls	r3, r3, #1
 800142e:	fa02 f303 	lsl.w	r3, r2, r3
 8001432:	693a      	ldr	r2, [r7, #16]
 8001434:	4313      	orrs	r3, r2
 8001436:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	693a      	ldr	r2, [r7, #16]
 800143c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	f003 0303 	and.w	r3, r3, #3
 8001446:	2b02      	cmp	r3, #2
 8001448:	d123      	bne.n	8001492 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	08da      	lsrs	r2, r3, #3
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	3208      	adds	r2, #8
 8001452:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001456:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	f003 0307 	and.w	r3, r3, #7
 800145e:	009b      	lsls	r3, r3, #2
 8001460:	220f      	movs	r2, #15
 8001462:	fa02 f303 	lsl.w	r3, r2, r3
 8001466:	43db      	mvns	r3, r3
 8001468:	693a      	ldr	r2, [r7, #16]
 800146a:	4013      	ands	r3, r2
 800146c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	691a      	ldr	r2, [r3, #16]
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	f003 0307 	and.w	r3, r3, #7
 8001478:	009b      	lsls	r3, r3, #2
 800147a:	fa02 f303 	lsl.w	r3, r2, r3
 800147e:	693a      	ldr	r2, [r7, #16]
 8001480:	4313      	orrs	r3, r2
 8001482:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	08da      	lsrs	r2, r3, #3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	3208      	adds	r2, #8
 800148c:	6939      	ldr	r1, [r7, #16]
 800148e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	005b      	lsls	r3, r3, #1
 800149c:	2203      	movs	r2, #3
 800149e:	fa02 f303 	lsl.w	r3, r2, r3
 80014a2:	43db      	mvns	r3, r3
 80014a4:	693a      	ldr	r2, [r7, #16]
 80014a6:	4013      	ands	r3, r2
 80014a8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	f003 0203 	and.w	r2, r3, #3
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	005b      	lsls	r3, r3, #1
 80014b6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ba:	693a      	ldr	r2, [r7, #16]
 80014bc:	4313      	orrs	r3, r2
 80014be:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	693a      	ldr	r2, [r7, #16]
 80014c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	f000 80b2 	beq.w	8001638 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014d4:	4b61      	ldr	r3, [pc, #388]	; (800165c <HAL_GPIO_Init+0x2fc>)
 80014d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014d8:	4a60      	ldr	r2, [pc, #384]	; (800165c <HAL_GPIO_Init+0x2fc>)
 80014da:	f043 0301 	orr.w	r3, r3, #1
 80014de:	6613      	str	r3, [r2, #96]	; 0x60
 80014e0:	4b5e      	ldr	r3, [pc, #376]	; (800165c <HAL_GPIO_Init+0x2fc>)
 80014e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014e4:	f003 0301 	and.w	r3, r3, #1
 80014e8:	60bb      	str	r3, [r7, #8]
 80014ea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80014ec:	4a5c      	ldr	r2, [pc, #368]	; (8001660 <HAL_GPIO_Init+0x300>)
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	089b      	lsrs	r3, r3, #2
 80014f2:	3302      	adds	r3, #2
 80014f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	f003 0303 	and.w	r3, r3, #3
 8001500:	009b      	lsls	r3, r3, #2
 8001502:	220f      	movs	r2, #15
 8001504:	fa02 f303 	lsl.w	r3, r2, r3
 8001508:	43db      	mvns	r3, r3
 800150a:	693a      	ldr	r2, [r7, #16]
 800150c:	4013      	ands	r3, r2
 800150e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001516:	d02b      	beq.n	8001570 <HAL_GPIO_Init+0x210>
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	4a52      	ldr	r2, [pc, #328]	; (8001664 <HAL_GPIO_Init+0x304>)
 800151c:	4293      	cmp	r3, r2
 800151e:	d025      	beq.n	800156c <HAL_GPIO_Init+0x20c>
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	4a51      	ldr	r2, [pc, #324]	; (8001668 <HAL_GPIO_Init+0x308>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d01f      	beq.n	8001568 <HAL_GPIO_Init+0x208>
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	4a50      	ldr	r2, [pc, #320]	; (800166c <HAL_GPIO_Init+0x30c>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d019      	beq.n	8001564 <HAL_GPIO_Init+0x204>
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	4a4f      	ldr	r2, [pc, #316]	; (8001670 <HAL_GPIO_Init+0x310>)
 8001534:	4293      	cmp	r3, r2
 8001536:	d013      	beq.n	8001560 <HAL_GPIO_Init+0x200>
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	4a4e      	ldr	r2, [pc, #312]	; (8001674 <HAL_GPIO_Init+0x314>)
 800153c:	4293      	cmp	r3, r2
 800153e:	d00d      	beq.n	800155c <HAL_GPIO_Init+0x1fc>
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	4a4d      	ldr	r2, [pc, #308]	; (8001678 <HAL_GPIO_Init+0x318>)
 8001544:	4293      	cmp	r3, r2
 8001546:	d007      	beq.n	8001558 <HAL_GPIO_Init+0x1f8>
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	4a4c      	ldr	r2, [pc, #304]	; (800167c <HAL_GPIO_Init+0x31c>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d101      	bne.n	8001554 <HAL_GPIO_Init+0x1f4>
 8001550:	2307      	movs	r3, #7
 8001552:	e00e      	b.n	8001572 <HAL_GPIO_Init+0x212>
 8001554:	2308      	movs	r3, #8
 8001556:	e00c      	b.n	8001572 <HAL_GPIO_Init+0x212>
 8001558:	2306      	movs	r3, #6
 800155a:	e00a      	b.n	8001572 <HAL_GPIO_Init+0x212>
 800155c:	2305      	movs	r3, #5
 800155e:	e008      	b.n	8001572 <HAL_GPIO_Init+0x212>
 8001560:	2304      	movs	r3, #4
 8001562:	e006      	b.n	8001572 <HAL_GPIO_Init+0x212>
 8001564:	2303      	movs	r3, #3
 8001566:	e004      	b.n	8001572 <HAL_GPIO_Init+0x212>
 8001568:	2302      	movs	r3, #2
 800156a:	e002      	b.n	8001572 <HAL_GPIO_Init+0x212>
 800156c:	2301      	movs	r3, #1
 800156e:	e000      	b.n	8001572 <HAL_GPIO_Init+0x212>
 8001570:	2300      	movs	r3, #0
 8001572:	697a      	ldr	r2, [r7, #20]
 8001574:	f002 0203 	and.w	r2, r2, #3
 8001578:	0092      	lsls	r2, r2, #2
 800157a:	4093      	lsls	r3, r2
 800157c:	693a      	ldr	r2, [r7, #16]
 800157e:	4313      	orrs	r3, r2
 8001580:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001582:	4937      	ldr	r1, [pc, #220]	; (8001660 <HAL_GPIO_Init+0x300>)
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	089b      	lsrs	r3, r3, #2
 8001588:	3302      	adds	r3, #2
 800158a:	693a      	ldr	r2, [r7, #16]
 800158c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001590:	4b3b      	ldr	r3, [pc, #236]	; (8001680 <HAL_GPIO_Init+0x320>)
 8001592:	689b      	ldr	r3, [r3, #8]
 8001594:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	43db      	mvns	r3, r3
 800159a:	693a      	ldr	r2, [r7, #16]
 800159c:	4013      	ands	r3, r2
 800159e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d003      	beq.n	80015b4 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80015ac:	693a      	ldr	r2, [r7, #16]
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	4313      	orrs	r3, r2
 80015b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80015b4:	4a32      	ldr	r2, [pc, #200]	; (8001680 <HAL_GPIO_Init+0x320>)
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80015ba:	4b31      	ldr	r3, [pc, #196]	; (8001680 <HAL_GPIO_Init+0x320>)
 80015bc:	68db      	ldr	r3, [r3, #12]
 80015be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	43db      	mvns	r3, r3
 80015c4:	693a      	ldr	r2, [r7, #16]
 80015c6:	4013      	ands	r3, r2
 80015c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d003      	beq.n	80015de <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80015d6:	693a      	ldr	r2, [r7, #16]
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	4313      	orrs	r3, r2
 80015dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80015de:	4a28      	ldr	r2, [pc, #160]	; (8001680 <HAL_GPIO_Init+0x320>)
 80015e0:	693b      	ldr	r3, [r7, #16]
 80015e2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80015e4:	4b26      	ldr	r3, [pc, #152]	; (8001680 <HAL_GPIO_Init+0x320>)
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	43db      	mvns	r3, r3
 80015ee:	693a      	ldr	r2, [r7, #16]
 80015f0:	4013      	ands	r3, r2
 80015f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d003      	beq.n	8001608 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001600:	693a      	ldr	r2, [r7, #16]
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	4313      	orrs	r3, r2
 8001606:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001608:	4a1d      	ldr	r2, [pc, #116]	; (8001680 <HAL_GPIO_Init+0x320>)
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800160e:	4b1c      	ldr	r3, [pc, #112]	; (8001680 <HAL_GPIO_Init+0x320>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	43db      	mvns	r3, r3
 8001618:	693a      	ldr	r2, [r7, #16]
 800161a:	4013      	ands	r3, r2
 800161c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001626:	2b00      	cmp	r3, #0
 8001628:	d003      	beq.n	8001632 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800162a:	693a      	ldr	r2, [r7, #16]
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	4313      	orrs	r3, r2
 8001630:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001632:	4a13      	ldr	r2, [pc, #76]	; (8001680 <HAL_GPIO_Init+0x320>)
 8001634:	693b      	ldr	r3, [r7, #16]
 8001636:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	3301      	adds	r3, #1
 800163c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	fa22 f303 	lsr.w	r3, r2, r3
 8001648:	2b00      	cmp	r3, #0
 800164a:	f47f ae91 	bne.w	8001370 <HAL_GPIO_Init+0x10>
  }
}
 800164e:	bf00      	nop
 8001650:	bf00      	nop
 8001652:	371c      	adds	r7, #28
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr
 800165c:	40021000 	.word	0x40021000
 8001660:	40010000 	.word	0x40010000
 8001664:	48000400 	.word	0x48000400
 8001668:	48000800 	.word	0x48000800
 800166c:	48000c00 	.word	0x48000c00
 8001670:	48001000 	.word	0x48001000
 8001674:	48001400 	.word	0x48001400
 8001678:	48001800 	.word	0x48001800
 800167c:	48001c00 	.word	0x48001c00
 8001680:	40010400 	.word	0x40010400

08001684 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001684:	b480      	push	{r7}
 8001686:	b085      	sub	sp, #20
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
 800168c:	460b      	mov	r3, r1
 800168e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	691a      	ldr	r2, [r3, #16]
 8001694:	887b      	ldrh	r3, [r7, #2]
 8001696:	4013      	ands	r3, r2
 8001698:	2b00      	cmp	r3, #0
 800169a:	d002      	beq.n	80016a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800169c:	2301      	movs	r3, #1
 800169e:	73fb      	strb	r3, [r7, #15]
 80016a0:	e001      	b.n	80016a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80016a2:	2300      	movs	r3, #0
 80016a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80016a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	3714      	adds	r7, #20
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr

080016b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
 80016bc:	460b      	mov	r3, r1
 80016be:	807b      	strh	r3, [r7, #2]
 80016c0:	4613      	mov	r3, r2
 80016c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016c4:	787b      	ldrb	r3, [r7, #1]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d003      	beq.n	80016d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80016ca:	887a      	ldrh	r2, [r7, #2]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80016d0:	e002      	b.n	80016d8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80016d2:	887a      	ldrh	r2, [r7, #2]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80016d8:	bf00      	nop
 80016da:	370c      	adds	r7, #12
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr

080016e4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80016e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016e6:	b08f      	sub	sp, #60	; 0x3c
 80016e8:	af0a      	add	r7, sp, #40	; 0x28
 80016ea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d101      	bne.n	80016f6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	e116      	b.n	8001924 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001702:	b2db      	uxtb	r3, r3
 8001704:	2b00      	cmp	r3, #0
 8001706:	d106      	bne.n	8001716 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2200      	movs	r2, #0
 800170c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001710:	6878      	ldr	r0, [r7, #4]
 8001712:	f009 fbe3 	bl	800aedc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2203      	movs	r2, #3
 800171a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800171e:	68bb      	ldr	r3, [r7, #8]
 8001720:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001722:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001726:	2b00      	cmp	r3, #0
 8001728:	d102      	bne.n	8001730 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2200      	movs	r2, #0
 800172e:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4618      	mov	r0, r3
 8001736:	f003 fe4c 	bl	80053d2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	603b      	str	r3, [r7, #0]
 8001740:	687e      	ldr	r6, [r7, #4]
 8001742:	466d      	mov	r5, sp
 8001744:	f106 0410 	add.w	r4, r6, #16
 8001748:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800174a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800174c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800174e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001750:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001754:	e885 0003 	stmia.w	r5, {r0, r1}
 8001758:	1d33      	adds	r3, r6, #4
 800175a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800175c:	6838      	ldr	r0, [r7, #0]
 800175e:	f003 fd5e 	bl	800521e <USB_CoreInit>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d005      	beq.n	8001774 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2202      	movs	r2, #2
 800176c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001770:	2301      	movs	r3, #1
 8001772:	e0d7      	b.n	8001924 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	2100      	movs	r1, #0
 800177a:	4618      	mov	r0, r3
 800177c:	f003 fe3a 	bl	80053f4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001780:	2300      	movs	r3, #0
 8001782:	73fb      	strb	r3, [r7, #15]
 8001784:	e04a      	b.n	800181c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001786:	7bfa      	ldrb	r2, [r7, #15]
 8001788:	6879      	ldr	r1, [r7, #4]
 800178a:	4613      	mov	r3, r2
 800178c:	00db      	lsls	r3, r3, #3
 800178e:	4413      	add	r3, r2
 8001790:	009b      	lsls	r3, r3, #2
 8001792:	440b      	add	r3, r1
 8001794:	333d      	adds	r3, #61	; 0x3d
 8001796:	2201      	movs	r2, #1
 8001798:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800179a:	7bfa      	ldrb	r2, [r7, #15]
 800179c:	6879      	ldr	r1, [r7, #4]
 800179e:	4613      	mov	r3, r2
 80017a0:	00db      	lsls	r3, r3, #3
 80017a2:	4413      	add	r3, r2
 80017a4:	009b      	lsls	r3, r3, #2
 80017a6:	440b      	add	r3, r1
 80017a8:	333c      	adds	r3, #60	; 0x3c
 80017aa:	7bfa      	ldrb	r2, [r7, #15]
 80017ac:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 80017ae:	7bfa      	ldrb	r2, [r7, #15]
 80017b0:	7bfb      	ldrb	r3, [r7, #15]
 80017b2:	b298      	uxth	r0, r3
 80017b4:	6879      	ldr	r1, [r7, #4]
 80017b6:	4613      	mov	r3, r2
 80017b8:	00db      	lsls	r3, r3, #3
 80017ba:	4413      	add	r3, r2
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	440b      	add	r3, r1
 80017c0:	3356      	adds	r3, #86	; 0x56
 80017c2:	4602      	mov	r2, r0
 80017c4:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80017c6:	7bfa      	ldrb	r2, [r7, #15]
 80017c8:	6879      	ldr	r1, [r7, #4]
 80017ca:	4613      	mov	r3, r2
 80017cc:	00db      	lsls	r3, r3, #3
 80017ce:	4413      	add	r3, r2
 80017d0:	009b      	lsls	r3, r3, #2
 80017d2:	440b      	add	r3, r1
 80017d4:	3340      	adds	r3, #64	; 0x40
 80017d6:	2200      	movs	r2, #0
 80017d8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80017da:	7bfa      	ldrb	r2, [r7, #15]
 80017dc:	6879      	ldr	r1, [r7, #4]
 80017de:	4613      	mov	r3, r2
 80017e0:	00db      	lsls	r3, r3, #3
 80017e2:	4413      	add	r3, r2
 80017e4:	009b      	lsls	r3, r3, #2
 80017e6:	440b      	add	r3, r1
 80017e8:	3344      	adds	r3, #68	; 0x44
 80017ea:	2200      	movs	r2, #0
 80017ec:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80017ee:	7bfa      	ldrb	r2, [r7, #15]
 80017f0:	6879      	ldr	r1, [r7, #4]
 80017f2:	4613      	mov	r3, r2
 80017f4:	00db      	lsls	r3, r3, #3
 80017f6:	4413      	add	r3, r2
 80017f8:	009b      	lsls	r3, r3, #2
 80017fa:	440b      	add	r3, r1
 80017fc:	3348      	adds	r3, #72	; 0x48
 80017fe:	2200      	movs	r2, #0
 8001800:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001802:	7bfa      	ldrb	r2, [r7, #15]
 8001804:	6879      	ldr	r1, [r7, #4]
 8001806:	4613      	mov	r3, r2
 8001808:	00db      	lsls	r3, r3, #3
 800180a:	4413      	add	r3, r2
 800180c:	009b      	lsls	r3, r3, #2
 800180e:	440b      	add	r3, r1
 8001810:	334c      	adds	r3, #76	; 0x4c
 8001812:	2200      	movs	r2, #0
 8001814:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001816:	7bfb      	ldrb	r3, [r7, #15]
 8001818:	3301      	adds	r3, #1
 800181a:	73fb      	strb	r3, [r7, #15]
 800181c:	7bfa      	ldrb	r2, [r7, #15]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	429a      	cmp	r2, r3
 8001824:	d3af      	bcc.n	8001786 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001826:	2300      	movs	r3, #0
 8001828:	73fb      	strb	r3, [r7, #15]
 800182a:	e044      	b.n	80018b6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800182c:	7bfa      	ldrb	r2, [r7, #15]
 800182e:	6879      	ldr	r1, [r7, #4]
 8001830:	4613      	mov	r3, r2
 8001832:	00db      	lsls	r3, r3, #3
 8001834:	4413      	add	r3, r2
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	440b      	add	r3, r1
 800183a:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800183e:	2200      	movs	r2, #0
 8001840:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001842:	7bfa      	ldrb	r2, [r7, #15]
 8001844:	6879      	ldr	r1, [r7, #4]
 8001846:	4613      	mov	r3, r2
 8001848:	00db      	lsls	r3, r3, #3
 800184a:	4413      	add	r3, r2
 800184c:	009b      	lsls	r3, r3, #2
 800184e:	440b      	add	r3, r1
 8001850:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001854:	7bfa      	ldrb	r2, [r7, #15]
 8001856:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001858:	7bfa      	ldrb	r2, [r7, #15]
 800185a:	6879      	ldr	r1, [r7, #4]
 800185c:	4613      	mov	r3, r2
 800185e:	00db      	lsls	r3, r3, #3
 8001860:	4413      	add	r3, r2
 8001862:	009b      	lsls	r3, r3, #2
 8001864:	440b      	add	r3, r1
 8001866:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800186a:	2200      	movs	r2, #0
 800186c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800186e:	7bfa      	ldrb	r2, [r7, #15]
 8001870:	6879      	ldr	r1, [r7, #4]
 8001872:	4613      	mov	r3, r2
 8001874:	00db      	lsls	r3, r3, #3
 8001876:	4413      	add	r3, r2
 8001878:	009b      	lsls	r3, r3, #2
 800187a:	440b      	add	r3, r1
 800187c:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8001880:	2200      	movs	r2, #0
 8001882:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001884:	7bfa      	ldrb	r2, [r7, #15]
 8001886:	6879      	ldr	r1, [r7, #4]
 8001888:	4613      	mov	r3, r2
 800188a:	00db      	lsls	r3, r3, #3
 800188c:	4413      	add	r3, r2
 800188e:	009b      	lsls	r3, r3, #2
 8001890:	440b      	add	r3, r1
 8001892:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001896:	2200      	movs	r2, #0
 8001898:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800189a:	7bfa      	ldrb	r2, [r7, #15]
 800189c:	6879      	ldr	r1, [r7, #4]
 800189e:	4613      	mov	r3, r2
 80018a0:	00db      	lsls	r3, r3, #3
 80018a2:	4413      	add	r3, r2
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	440b      	add	r3, r1
 80018a8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80018ac:	2200      	movs	r2, #0
 80018ae:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018b0:	7bfb      	ldrb	r3, [r7, #15]
 80018b2:	3301      	adds	r3, #1
 80018b4:	73fb      	strb	r3, [r7, #15]
 80018b6:	7bfa      	ldrb	r2, [r7, #15]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	429a      	cmp	r2, r3
 80018be:	d3b5      	bcc.n	800182c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	603b      	str	r3, [r7, #0]
 80018c6:	687e      	ldr	r6, [r7, #4]
 80018c8:	466d      	mov	r5, sp
 80018ca:	f106 0410 	add.w	r4, r6, #16
 80018ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018d6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80018da:	e885 0003 	stmia.w	r5, {r0, r1}
 80018de:	1d33      	adds	r3, r6, #4
 80018e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80018e2:	6838      	ldr	r0, [r7, #0]
 80018e4:	f003 fdd2 	bl	800548c <USB_DevInit>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d005      	beq.n	80018fa <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2202      	movs	r2, #2
 80018f2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e014      	b.n	8001924 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2200      	movs	r2, #0
 80018fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2201      	movs	r2, #1
 8001906:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800190e:	2b01      	cmp	r3, #1
 8001910:	d102      	bne.n	8001918 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001912:	6878      	ldr	r0, [r7, #4]
 8001914:	f001 f852 	bl	80029bc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4618      	mov	r0, r3
 800191e:	f004 fd80 	bl	8006422 <USB_DevDisconnect>

  return HAL_OK;
 8001922:	2300      	movs	r3, #0
}
 8001924:	4618      	mov	r0, r3
 8001926:	3714      	adds	r7, #20
 8001928:	46bd      	mov	sp, r7
 800192a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800192c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001940:	2b01      	cmp	r3, #1
 8001942:	d101      	bne.n	8001948 <HAL_PCD_Start+0x1c>
 8001944:	2302      	movs	r3, #2
 8001946:	e01c      	b.n	8001982 <HAL_PCD_Start+0x56>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2201      	movs	r2, #1
 800194c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001954:	2b01      	cmp	r3, #1
 8001956:	d105      	bne.n	8001964 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800195c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4618      	mov	r0, r3
 800196a:	f003 fd21 	bl	80053b0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4618      	mov	r0, r3
 8001974:	f004 fd34 	bl	80063e0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2200      	movs	r2, #0
 800197c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001980:	2300      	movs	r3, #0
}
 8001982:	4618      	mov	r0, r3
 8001984:	3710      	adds	r7, #16
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}

0800198a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800198a:	b590      	push	{r4, r7, lr}
 800198c:	b08d      	sub	sp, #52	; 0x34
 800198e:	af00      	add	r7, sp, #0
 8001990:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001998:	6a3b      	ldr	r3, [r7, #32]
 800199a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4618      	mov	r0, r3
 80019a2:	f004 fdf2 	bl	800658a <USB_GetMode>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	f040 847e 	bne.w	80022aa <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4618      	mov	r0, r3
 80019b4:	f004 fd56 	bl	8006464 <USB_ReadInterrupts>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	f000 8474 	beq.w	80022a8 <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80019c0:	69fb      	ldr	r3, [r7, #28]
 80019c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	0a1b      	lsrs	r3, r3, #8
 80019ca:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4618      	mov	r0, r3
 80019da:	f004 fd43 	bl	8006464 <USB_ReadInterrupts>
 80019de:	4603      	mov	r3, r0
 80019e0:	f003 0302 	and.w	r3, r3, #2
 80019e4:	2b02      	cmp	r3, #2
 80019e6:	d107      	bne.n	80019f8 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	695a      	ldr	r2, [r3, #20]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f002 0202 	and.w	r2, r2, #2
 80019f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4618      	mov	r0, r3
 80019fe:	f004 fd31 	bl	8006464 <USB_ReadInterrupts>
 8001a02:	4603      	mov	r3, r0
 8001a04:	f003 0310 	and.w	r3, r3, #16
 8001a08:	2b10      	cmp	r3, #16
 8001a0a:	d161      	bne.n	8001ad0 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	699a      	ldr	r2, [r3, #24]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f022 0210 	bic.w	r2, r2, #16
 8001a1a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001a1c:	6a3b      	ldr	r3, [r7, #32]
 8001a1e:	6a1b      	ldr	r3, [r3, #32]
 8001a20:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001a22:	69bb      	ldr	r3, [r7, #24]
 8001a24:	f003 020f 	and.w	r2, r3, #15
 8001a28:	4613      	mov	r3, r2
 8001a2a:	00db      	lsls	r3, r3, #3
 8001a2c:	4413      	add	r3, r2
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001a34:	687a      	ldr	r2, [r7, #4]
 8001a36:	4413      	add	r3, r2
 8001a38:	3304      	adds	r3, #4
 8001a3a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001a3c:	69bb      	ldr	r3, [r7, #24]
 8001a3e:	0c5b      	lsrs	r3, r3, #17
 8001a40:	f003 030f 	and.w	r3, r3, #15
 8001a44:	2b02      	cmp	r3, #2
 8001a46:	d124      	bne.n	8001a92 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001a48:	69ba      	ldr	r2, [r7, #24]
 8001a4a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001a4e:	4013      	ands	r3, r2
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d035      	beq.n	8001ac0 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001a58:	69bb      	ldr	r3, [r7, #24]
 8001a5a:	091b      	lsrs	r3, r3, #4
 8001a5c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001a5e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001a62:	b29b      	uxth	r3, r3
 8001a64:	461a      	mov	r2, r3
 8001a66:	6a38      	ldr	r0, [r7, #32]
 8001a68:	f004 fb68 	bl	800613c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	68da      	ldr	r2, [r3, #12]
 8001a70:	69bb      	ldr	r3, [r7, #24]
 8001a72:	091b      	lsrs	r3, r3, #4
 8001a74:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001a78:	441a      	add	r2, r3
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	695a      	ldr	r2, [r3, #20]
 8001a82:	69bb      	ldr	r3, [r7, #24]
 8001a84:	091b      	lsrs	r3, r3, #4
 8001a86:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001a8a:	441a      	add	r2, r3
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	615a      	str	r2, [r3, #20]
 8001a90:	e016      	b.n	8001ac0 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001a92:	69bb      	ldr	r3, [r7, #24]
 8001a94:	0c5b      	lsrs	r3, r3, #17
 8001a96:	f003 030f 	and.w	r3, r3, #15
 8001a9a:	2b06      	cmp	r3, #6
 8001a9c:	d110      	bne.n	8001ac0 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001aa4:	2208      	movs	r2, #8
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	6a38      	ldr	r0, [r7, #32]
 8001aaa:	f004 fb47 	bl	800613c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	695a      	ldr	r2, [r3, #20]
 8001ab2:	69bb      	ldr	r3, [r7, #24]
 8001ab4:	091b      	lsrs	r3, r3, #4
 8001ab6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001aba:	441a      	add	r2, r3
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	699a      	ldr	r2, [r3, #24]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f042 0210 	orr.w	r2, r2, #16
 8001ace:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f004 fcc5 	bl	8006464 <USB_ReadInterrupts>
 8001ada:	4603      	mov	r3, r0
 8001adc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ae0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001ae4:	f040 80a7 	bne.w	8001c36 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4618      	mov	r0, r3
 8001af2:	f004 fcca 	bl	800648a <USB_ReadDevAllOutEpInterrupt>
 8001af6:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001af8:	e099      	b.n	8001c2e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001afc:	f003 0301 	and.w	r3, r3, #1
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	f000 808e 	beq.w	8001c22 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b0c:	b2d2      	uxtb	r2, r2
 8001b0e:	4611      	mov	r1, r2
 8001b10:	4618      	mov	r0, r3
 8001b12:	f004 fcee 	bl	80064f2 <USB_ReadDevOutEPInterrupt>
 8001b16:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	f003 0301 	and.w	r3, r3, #1
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d00c      	beq.n	8001b3c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b24:	015a      	lsls	r2, r3, #5
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	4413      	add	r3, r2
 8001b2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b2e:	461a      	mov	r2, r3
 8001b30:	2301      	movs	r3, #1
 8001b32:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001b34:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b36:	6878      	ldr	r0, [r7, #4]
 8001b38:	f000 fe66 	bl	8002808 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	f003 0308 	and.w	r3, r3, #8
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d00c      	beq.n	8001b60 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b48:	015a      	lsls	r2, r3, #5
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	4413      	add	r3, r2
 8001b4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b52:	461a      	mov	r2, r3
 8001b54:	2308      	movs	r3, #8
 8001b56:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001b58:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b5a:	6878      	ldr	r0, [r7, #4]
 8001b5c:	f000 fea2 	bl	80028a4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	f003 0310 	and.w	r3, r3, #16
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d008      	beq.n	8001b7c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b6c:	015a      	lsls	r2, r3, #5
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	4413      	add	r3, r2
 8001b72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b76:	461a      	mov	r2, r3
 8001b78:	2310      	movs	r3, #16
 8001b7a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001b7c:	693b      	ldr	r3, [r7, #16]
 8001b7e:	f003 0302 	and.w	r3, r3, #2
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d030      	beq.n	8001be8 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001b86:	6a3b      	ldr	r3, [r7, #32]
 8001b88:	695b      	ldr	r3, [r3, #20]
 8001b8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b8e:	2b80      	cmp	r3, #128	; 0x80
 8001b90:	d109      	bne.n	8001ba6 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	69fa      	ldr	r2, [r7, #28]
 8001b9c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ba0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ba4:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001ba6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ba8:	4613      	mov	r3, r2
 8001baa:	00db      	lsls	r3, r3, #3
 8001bac:	4413      	add	r3, r2
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001bb4:	687a      	ldr	r2, [r7, #4]
 8001bb6:	4413      	add	r3, r2
 8001bb8:	3304      	adds	r3, #4
 8001bba:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	78db      	ldrb	r3, [r3, #3]
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d108      	bne.n	8001bd6 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	4619      	mov	r1, r3
 8001bd0:	6878      	ldr	r0, [r7, #4]
 8001bd2:	f009 fae9 	bl	800b1a8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd8:	015a      	lsls	r2, r3, #5
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	4413      	add	r3, r2
 8001bde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001be2:	461a      	mov	r2, r3
 8001be4:	2302      	movs	r3, #2
 8001be6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	f003 0320 	and.w	r3, r3, #32
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d008      	beq.n	8001c04 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf4:	015a      	lsls	r2, r3, #5
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	4413      	add	r3, r2
 8001bfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001bfe:	461a      	mov	r2, r3
 8001c00:	2320      	movs	r3, #32
 8001c02:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d009      	beq.n	8001c22 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c10:	015a      	lsls	r2, r3, #5
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	4413      	add	r3, r2
 8001c16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c1a:	461a      	mov	r2, r3
 8001c1c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c20:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c24:	3301      	adds	r3, #1
 8001c26:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c2a:	085b      	lsrs	r3, r3, #1
 8001c2c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	f47f af62 	bne.w	8001afa <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f004 fc12 	bl	8006464 <USB_ReadInterrupts>
 8001c40:	4603      	mov	r3, r0
 8001c42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c46:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001c4a:	f040 80a4 	bne.w	8001d96 <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4618      	mov	r0, r3
 8001c54:	f004 fc33 	bl	80064be <USB_ReadDevAllInEpInterrupt>
 8001c58:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001c5e:	e096      	b.n	8001d8e <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c62:	f003 0301 	and.w	r3, r3, #1
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	f000 808b 	beq.w	8001d82 <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c72:	b2d2      	uxtb	r2, r2
 8001c74:	4611      	mov	r1, r2
 8001c76:	4618      	mov	r0, r3
 8001c78:	f004 fc59 	bl	800652e <USB_ReadDevInEPInterrupt>
 8001c7c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	f003 0301 	and.w	r3, r3, #1
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d020      	beq.n	8001cca <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c8a:	f003 030f 	and.w	r3, r3, #15
 8001c8e:	2201      	movs	r2, #1
 8001c90:	fa02 f303 	lsl.w	r3, r2, r3
 8001c94:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	43db      	mvns	r3, r3
 8001ca2:	69f9      	ldr	r1, [r7, #28]
 8001ca4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001ca8:	4013      	ands	r3, r2
 8001caa:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cae:	015a      	lsls	r2, r3, #5
 8001cb0:	69fb      	ldr	r3, [r7, #28]
 8001cb2:	4413      	add	r3, r2
 8001cb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001cb8:	461a      	mov	r2, r3
 8001cba:	2301      	movs	r3, #1
 8001cbc:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	f009 f9da 	bl	800b07e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	f003 0308 	and.w	r3, r3, #8
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d008      	beq.n	8001ce6 <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd6:	015a      	lsls	r2, r3, #5
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	4413      	add	r3, r2
 8001cdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ce0:	461a      	mov	r2, r3
 8001ce2:	2308      	movs	r3, #8
 8001ce4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	f003 0310 	and.w	r3, r3, #16
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d008      	beq.n	8001d02 <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf2:	015a      	lsls	r2, r3, #5
 8001cf4:	69fb      	ldr	r3, [r7, #28]
 8001cf6:	4413      	add	r3, r2
 8001cf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001cfc:	461a      	mov	r2, r3
 8001cfe:	2310      	movs	r3, #16
 8001d00:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d008      	beq.n	8001d1e <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d0e:	015a      	lsls	r2, r3, #5
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	4413      	add	r3, r2
 8001d14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d18:	461a      	mov	r2, r3
 8001d1a:	2340      	movs	r3, #64	; 0x40
 8001d1c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	f003 0302 	and.w	r3, r3, #2
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d023      	beq.n	8001d70 <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001d28:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001d2a:	6a38      	ldr	r0, [r7, #32]
 8001d2c:	f003 fcf0 	bl	8005710 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001d30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d32:	4613      	mov	r3, r2
 8001d34:	00db      	lsls	r3, r3, #3
 8001d36:	4413      	add	r3, r2
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	3338      	adds	r3, #56	; 0x38
 8001d3c:	687a      	ldr	r2, [r7, #4]
 8001d3e:	4413      	add	r3, r2
 8001d40:	3304      	adds	r3, #4
 8001d42:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	78db      	ldrb	r3, [r3, #3]
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	d108      	bne.n	8001d5e <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	4619      	mov	r1, r3
 8001d58:	6878      	ldr	r0, [r7, #4]
 8001d5a:	f009 fa37 	bl	800b1cc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d60:	015a      	lsls	r2, r3, #5
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	4413      	add	r3, r2
 8001d66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d6a:	461a      	mov	r2, r3
 8001d6c:	2302      	movs	r3, #2
 8001d6e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d003      	beq.n	8001d82 <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001d7a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001d7c:	6878      	ldr	r0, [r7, #4]
 8001d7e:	f000 fcba 	bl	80026f6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d84:	3301      	adds	r3, #1
 8001d86:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d8a:	085b      	lsrs	r3, r3, #1
 8001d8c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	f47f af65 	bne.w	8001c60 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f004 fb62 	bl	8006464 <USB_ReadInterrupts>
 8001da0:	4603      	mov	r3, r0
 8001da2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001da6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001daa:	d122      	bne.n	8001df2 <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001dac:	69fb      	ldr	r3, [r7, #28]
 8001dae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	69fa      	ldr	r2, [r7, #28]
 8001db6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001dba:	f023 0301 	bic.w	r3, r3, #1
 8001dbe:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001dc6:	2b01      	cmp	r3, #1
 8001dc8:	d108      	bne.n	8001ddc <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001dd2:	2100      	movs	r1, #0
 8001dd4:	6878      	ldr	r0, [r7, #4]
 8001dd6:	f009 fc57 	bl	800b688 <HAL_PCDEx_LPM_Callback>
 8001dda:	e002      	b.n	8001de2 <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	f009 f9bb 	bl	800b158 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	695a      	ldr	r2, [r3, #20]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001df0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4618      	mov	r0, r3
 8001df8:	f004 fb34 	bl	8006464 <USB_ReadInterrupts>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001e06:	d112      	bne.n	8001e2e <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001e08:	69fb      	ldr	r3, [r7, #28]
 8001e0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	f003 0301 	and.w	r3, r3, #1
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d102      	bne.n	8001e1e <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001e18:	6878      	ldr	r0, [r7, #4]
 8001e1a:	f009 f977 	bl	800b10c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	695a      	ldr	r2, [r3, #20]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001e2c:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4618      	mov	r0, r3
 8001e34:	f004 fb16 	bl	8006464 <USB_ReadInterrupts>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001e3e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001e42:	d121      	bne.n	8001e88 <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	695a      	ldr	r2, [r3, #20]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8001e52:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d111      	bne.n	8001e82 <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2201      	movs	r2, #1
 8001e62:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e6c:	089b      	lsrs	r3, r3, #2
 8001e6e:	f003 020f 	and.w	r2, r3, #15
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001e78:	2101      	movs	r1, #1
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f009 fc04 	bl	800b688 <HAL_PCDEx_LPM_Callback>
 8001e80:	e002      	b.n	8001e88 <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f009 f942 	bl	800b10c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f004 fae9 	bl	8006464 <USB_ReadInterrupts>
 8001e92:	4603      	mov	r3, r0
 8001e94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e9c:	f040 80b5 	bne.w	800200a <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001ea0:	69fb      	ldr	r3, [r7, #28]
 8001ea2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	69fa      	ldr	r2, [r7, #28]
 8001eaa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001eae:	f023 0301 	bic.w	r3, r3, #1
 8001eb2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	2110      	movs	r1, #16
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f003 fc28 	bl	8005710 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ec4:	e046      	b.n	8001f54 <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ec8:	015a      	lsls	r2, r3, #5
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	4413      	add	r3, r2
 8001ece:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ed2:	461a      	mov	r2, r3
 8001ed4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001ed8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001eda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001edc:	015a      	lsls	r2, r3, #5
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	4413      	add	r3, r2
 8001ee2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001eea:	0151      	lsls	r1, r2, #5
 8001eec:	69fa      	ldr	r2, [r7, #28]
 8001eee:	440a      	add	r2, r1
 8001ef0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001ef4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001ef8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001efc:	015a      	lsls	r2, r3, #5
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	4413      	add	r3, r2
 8001f02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f06:	461a      	mov	r2, r3
 8001f08:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001f0c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f10:	015a      	lsls	r2, r3, #5
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	4413      	add	r3, r2
 8001f16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f1e:	0151      	lsls	r1, r2, #5
 8001f20:	69fa      	ldr	r2, [r7, #28]
 8001f22:	440a      	add	r2, r1
 8001f24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001f28:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001f2c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f30:	015a      	lsls	r2, r3, #5
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	4413      	add	r3, r2
 8001f36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f3e:	0151      	lsls	r1, r2, #5
 8001f40:	69fa      	ldr	r2, [r7, #28]
 8001f42:	440a      	add	r2, r1
 8001f44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001f48:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001f4c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f50:	3301      	adds	r3, #1
 8001f52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	d3b3      	bcc.n	8001ec6 <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f64:	69db      	ldr	r3, [r3, #28]
 8001f66:	69fa      	ldr	r2, [r7, #28]
 8001f68:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f6c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001f70:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d016      	beq.n	8001fa8 <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f84:	69fa      	ldr	r2, [r7, #28]
 8001f86:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f8a:	f043 030b 	orr.w	r3, r3, #11
 8001f8e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001f92:	69fb      	ldr	r3, [r7, #28]
 8001f94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f9a:	69fa      	ldr	r2, [r7, #28]
 8001f9c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001fa0:	f043 030b 	orr.w	r3, r3, #11
 8001fa4:	6453      	str	r3, [r2, #68]	; 0x44
 8001fa6:	e015      	b.n	8001fd4 <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001fae:	695b      	ldr	r3, [r3, #20]
 8001fb0:	69fa      	ldr	r2, [r7, #28]
 8001fb2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001fb6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001fba:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001fbe:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001fc6:	691b      	ldr	r3, [r3, #16]
 8001fc8:	69fa      	ldr	r2, [r7, #28]
 8001fca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001fce:	f043 030b 	orr.w	r3, r3, #11
 8001fd2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	69fa      	ldr	r2, [r7, #28]
 8001fde:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001fe2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001fe6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	4610      	mov	r0, r2
 8001ff6:	f004 faf9 	bl	80065ec <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	695a      	ldr	r2, [r3, #20]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002008:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4618      	mov	r0, r3
 8002010:	f004 fa28 	bl	8006464 <USB_ReadInterrupts>
 8002014:	4603      	mov	r3, r0
 8002016:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800201a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800201e:	d124      	bne.n	800206a <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4618      	mov	r0, r3
 8002026:	f004 fabe 	bl	80065a6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4618      	mov	r0, r3
 8002030:	f003 fbeb 	bl	800580a <USB_GetDevSpeed>
 8002034:	4603      	mov	r3, r0
 8002036:	461a      	mov	r2, r3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681c      	ldr	r4, [r3, #0]
 8002040:	f001 fb1a 	bl	8003678 <HAL_RCC_GetHCLKFreq>
 8002044:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800204a:	b2db      	uxtb	r3, r3
 800204c:	461a      	mov	r2, r3
 800204e:	4620      	mov	r0, r4
 8002050:	f003 f912 	bl	8005278 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002054:	6878      	ldr	r0, [r7, #4]
 8002056:	f009 f83a 	bl	800b0ce <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	695a      	ldr	r2, [r3, #20]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002068:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4618      	mov	r0, r3
 8002070:	f004 f9f8 	bl	8006464 <USB_ReadInterrupts>
 8002074:	4603      	mov	r3, r0
 8002076:	f003 0308 	and.w	r3, r3, #8
 800207a:	2b08      	cmp	r3, #8
 800207c:	d10a      	bne.n	8002094 <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f009 f817 	bl	800b0b2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	695a      	ldr	r2, [r3, #20]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f002 0208 	and.w	r2, r2, #8
 8002092:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4618      	mov	r0, r3
 800209a:	f004 f9e3 	bl	8006464 <USB_ReadInterrupts>
 800209e:	4603      	mov	r3, r0
 80020a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020a4:	2b80      	cmp	r3, #128	; 0x80
 80020a6:	d122      	bne.n	80020ee <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80020a8:	6a3b      	ldr	r3, [r7, #32]
 80020aa:	699b      	ldr	r3, [r3, #24]
 80020ac:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80020b0:	6a3b      	ldr	r3, [r7, #32]
 80020b2:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80020b4:	2301      	movs	r3, #1
 80020b6:	627b      	str	r3, [r7, #36]	; 0x24
 80020b8:	e014      	b.n	80020e4 <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80020ba:	6879      	ldr	r1, [r7, #4]
 80020bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020be:	4613      	mov	r3, r2
 80020c0:	00db      	lsls	r3, r3, #3
 80020c2:	4413      	add	r3, r2
 80020c4:	009b      	lsls	r3, r3, #2
 80020c6:	440b      	add	r3, r1
 80020c8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d105      	bne.n	80020de <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80020d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	4619      	mov	r1, r3
 80020d8:	6878      	ldr	r0, [r7, #4]
 80020da:	f000 fadb 	bl	8002694 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80020de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e0:	3301      	adds	r3, #1
 80020e2:	627b      	str	r3, [r7, #36]	; 0x24
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d3e5      	bcc.n	80020ba <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4618      	mov	r0, r3
 80020f4:	f004 f9b6 	bl	8006464 <USB_ReadInterrupts>
 80020f8:	4603      	mov	r3, r0
 80020fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002102:	d13b      	bne.n	800217c <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002104:	2301      	movs	r3, #1
 8002106:	627b      	str	r3, [r7, #36]	; 0x24
 8002108:	e02b      	b.n	8002162 <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800210a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800210c:	015a      	lsls	r2, r3, #5
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	4413      	add	r3, r2
 8002112:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800211a:	6879      	ldr	r1, [r7, #4]
 800211c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800211e:	4613      	mov	r3, r2
 8002120:	00db      	lsls	r3, r3, #3
 8002122:	4413      	add	r3, r2
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	440b      	add	r3, r1
 8002128:	3340      	adds	r3, #64	; 0x40
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	2b01      	cmp	r3, #1
 800212e:	d115      	bne.n	800215c <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002130:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002132:	2b00      	cmp	r3, #0
 8002134:	da12      	bge.n	800215c <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002136:	6879      	ldr	r1, [r7, #4]
 8002138:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800213a:	4613      	mov	r3, r2
 800213c:	00db      	lsls	r3, r3, #3
 800213e:	4413      	add	r3, r2
 8002140:	009b      	lsls	r3, r3, #2
 8002142:	440b      	add	r3, r1
 8002144:	333f      	adds	r3, #63	; 0x3f
 8002146:	2201      	movs	r2, #1
 8002148:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800214a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214c:	b2db      	uxtb	r3, r3
 800214e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002152:	b2db      	uxtb	r3, r3
 8002154:	4619      	mov	r1, r3
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	f000 fa9c 	bl	8002694 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800215c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215e:	3301      	adds	r3, #1
 8002160:	627b      	str	r3, [r7, #36]	; 0x24
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002168:	429a      	cmp	r2, r3
 800216a:	d3ce      	bcc.n	800210a <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	695a      	ldr	r2, [r3, #20]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800217a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4618      	mov	r0, r3
 8002182:	f004 f96f 	bl	8006464 <USB_ReadInterrupts>
 8002186:	4603      	mov	r3, r0
 8002188:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800218c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002190:	d155      	bne.n	800223e <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002192:	2301      	movs	r3, #1
 8002194:	627b      	str	r3, [r7, #36]	; 0x24
 8002196:	e045      	b.n	8002224 <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800219a:	015a      	lsls	r2, r3, #5
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	4413      	add	r3, r2
 80021a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80021a8:	6879      	ldr	r1, [r7, #4]
 80021aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021ac:	4613      	mov	r3, r2
 80021ae:	00db      	lsls	r3, r3, #3
 80021b0:	4413      	add	r3, r2
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	440b      	add	r3, r1
 80021b6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80021ba:	781b      	ldrb	r3, [r3, #0]
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d12e      	bne.n	800221e <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80021c0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	da2b      	bge.n	800221e <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80021c6:	69bb      	ldr	r3, [r7, #24]
 80021c8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80021d2:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80021d6:	429a      	cmp	r2, r3
 80021d8:	d121      	bne.n	800221e <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80021da:	6879      	ldr	r1, [r7, #4]
 80021dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021de:	4613      	mov	r3, r2
 80021e0:	00db      	lsls	r3, r3, #3
 80021e2:	4413      	add	r3, r2
 80021e4:	009b      	lsls	r3, r3, #2
 80021e6:	440b      	add	r3, r1
 80021e8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80021ec:	2201      	movs	r2, #1
 80021ee:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80021f0:	6a3b      	ldr	r3, [r7, #32]
 80021f2:	699b      	ldr	r3, [r3, #24]
 80021f4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80021f8:	6a3b      	ldr	r3, [r7, #32]
 80021fa:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80021fc:	6a3b      	ldr	r3, [r7, #32]
 80021fe:	695b      	ldr	r3, [r3, #20]
 8002200:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002204:	2b00      	cmp	r3, #0
 8002206:	d10a      	bne.n	800221e <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002208:	69fb      	ldr	r3, [r7, #28]
 800220a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	69fa      	ldr	r2, [r7, #28]
 8002212:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002216:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800221a:	6053      	str	r3, [r2, #4]
            break;
 800221c:	e007      	b.n	800222e <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800221e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002220:	3301      	adds	r3, #1
 8002222:	627b      	str	r3, [r7, #36]	; 0x24
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800222a:	429a      	cmp	r2, r3
 800222c:	d3b4      	bcc.n	8002198 <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	695a      	ldr	r2, [r3, #20]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800223c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4618      	mov	r0, r3
 8002244:	f004 f90e 	bl	8006464 <USB_ReadInterrupts>
 8002248:	4603      	mov	r3, r0
 800224a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800224e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002252:	d10a      	bne.n	800226a <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002254:	6878      	ldr	r0, [r7, #4]
 8002256:	f008 ffcb 	bl	800b1f0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	695a      	ldr	r2, [r3, #20]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002268:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4618      	mov	r0, r3
 8002270:	f004 f8f8 	bl	8006464 <USB_ReadInterrupts>
 8002274:	4603      	mov	r3, r0
 8002276:	f003 0304 	and.w	r3, r3, #4
 800227a:	2b04      	cmp	r3, #4
 800227c:	d115      	bne.n	80022aa <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002286:	69bb      	ldr	r3, [r7, #24]
 8002288:	f003 0304 	and.w	r3, r3, #4
 800228c:	2b00      	cmp	r3, #0
 800228e:	d002      	beq.n	8002296 <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002290:	6878      	ldr	r0, [r7, #4]
 8002292:	f008 ffbb 	bl	800b20c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	6859      	ldr	r1, [r3, #4]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	69ba      	ldr	r2, [r7, #24]
 80022a2:	430a      	orrs	r2, r1
 80022a4:	605a      	str	r2, [r3, #4]
 80022a6:	e000      	b.n	80022aa <HAL_PCD_IRQHandler+0x920>
      return;
 80022a8:	bf00      	nop
    }
  }
}
 80022aa:	3734      	adds	r7, #52	; 0x34
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd90      	pop	{r4, r7, pc}

080022b0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b082      	sub	sp, #8
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
 80022b8:	460b      	mov	r3, r1
 80022ba:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d101      	bne.n	80022ca <HAL_PCD_SetAddress+0x1a>
 80022c6:	2302      	movs	r3, #2
 80022c8:	e013      	b.n	80022f2 <HAL_PCD_SetAddress+0x42>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2201      	movs	r2, #1
 80022ce:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	78fa      	ldrb	r2, [r7, #3]
 80022d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	78fa      	ldrb	r2, [r7, #3]
 80022e0:	4611      	mov	r1, r2
 80022e2:	4618      	mov	r0, r3
 80022e4:	f004 f856 	bl	8006394 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2200      	movs	r2, #0
 80022ec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80022f0:	2300      	movs	r3, #0
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	3708      	adds	r7, #8
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}

080022fa <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80022fa:	b580      	push	{r7, lr}
 80022fc:	b084      	sub	sp, #16
 80022fe:	af00      	add	r7, sp, #0
 8002300:	6078      	str	r0, [r7, #4]
 8002302:	4608      	mov	r0, r1
 8002304:	4611      	mov	r1, r2
 8002306:	461a      	mov	r2, r3
 8002308:	4603      	mov	r3, r0
 800230a:	70fb      	strb	r3, [r7, #3]
 800230c:	460b      	mov	r3, r1
 800230e:	803b      	strh	r3, [r7, #0]
 8002310:	4613      	mov	r3, r2
 8002312:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002314:	2300      	movs	r3, #0
 8002316:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002318:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800231c:	2b00      	cmp	r3, #0
 800231e:	da0f      	bge.n	8002340 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002320:	78fb      	ldrb	r3, [r7, #3]
 8002322:	f003 020f 	and.w	r2, r3, #15
 8002326:	4613      	mov	r3, r2
 8002328:	00db      	lsls	r3, r3, #3
 800232a:	4413      	add	r3, r2
 800232c:	009b      	lsls	r3, r3, #2
 800232e:	3338      	adds	r3, #56	; 0x38
 8002330:	687a      	ldr	r2, [r7, #4]
 8002332:	4413      	add	r3, r2
 8002334:	3304      	adds	r3, #4
 8002336:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	2201      	movs	r2, #1
 800233c:	705a      	strb	r2, [r3, #1]
 800233e:	e00f      	b.n	8002360 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002340:	78fb      	ldrb	r3, [r7, #3]
 8002342:	f003 020f 	and.w	r2, r3, #15
 8002346:	4613      	mov	r3, r2
 8002348:	00db      	lsls	r3, r3, #3
 800234a:	4413      	add	r3, r2
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	4413      	add	r3, r2
 8002356:	3304      	adds	r3, #4
 8002358:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	2200      	movs	r2, #0
 800235e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002360:	78fb      	ldrb	r3, [r7, #3]
 8002362:	f003 030f 	and.w	r3, r3, #15
 8002366:	b2da      	uxtb	r2, r3
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800236c:	883a      	ldrh	r2, [r7, #0]
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	78ba      	ldrb	r2, [r7, #2]
 8002376:	711a      	strb	r2, [r3, #4]

#if defined (USB_OTG_FS)
  if (ep->is_in != 0U)
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	785b      	ldrb	r3, [r3, #1]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d004      	beq.n	800238a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	b29a      	uxth	r2, r3
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	835a      	strh	r2, [r3, #26]
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800238a:	78bb      	ldrb	r3, [r7, #2]
 800238c:	2b02      	cmp	r3, #2
 800238e:	d102      	bne.n	8002396 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	2200      	movs	r2, #0
 8002394:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800239c:	2b01      	cmp	r3, #1
 800239e:	d101      	bne.n	80023a4 <HAL_PCD_EP_Open+0xaa>
 80023a0:	2302      	movs	r3, #2
 80023a2:	e00e      	b.n	80023c2 <HAL_PCD_EP_Open+0xc8>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2201      	movs	r2, #1
 80023a8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	68f9      	ldr	r1, [r7, #12]
 80023b2:	4618      	mov	r0, r3
 80023b4:	f003 fa48 	bl	8005848 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2200      	movs	r2, #0
 80023bc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80023c0:	7afb      	ldrb	r3, [r7, #11]
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3710      	adds	r7, #16
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}

080023ca <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80023ca:	b580      	push	{r7, lr}
 80023cc:	b084      	sub	sp, #16
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	6078      	str	r0, [r7, #4]
 80023d2:	460b      	mov	r3, r1
 80023d4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80023d6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	da0f      	bge.n	80023fe <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80023de:	78fb      	ldrb	r3, [r7, #3]
 80023e0:	f003 020f 	and.w	r2, r3, #15
 80023e4:	4613      	mov	r3, r2
 80023e6:	00db      	lsls	r3, r3, #3
 80023e8:	4413      	add	r3, r2
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	3338      	adds	r3, #56	; 0x38
 80023ee:	687a      	ldr	r2, [r7, #4]
 80023f0:	4413      	add	r3, r2
 80023f2:	3304      	adds	r3, #4
 80023f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	2201      	movs	r2, #1
 80023fa:	705a      	strb	r2, [r3, #1]
 80023fc:	e00f      	b.n	800241e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80023fe:	78fb      	ldrb	r3, [r7, #3]
 8002400:	f003 020f 	and.w	r2, r3, #15
 8002404:	4613      	mov	r3, r2
 8002406:	00db      	lsls	r3, r3, #3
 8002408:	4413      	add	r3, r2
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002410:	687a      	ldr	r2, [r7, #4]
 8002412:	4413      	add	r3, r2
 8002414:	3304      	adds	r3, #4
 8002416:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2200      	movs	r2, #0
 800241c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800241e:	78fb      	ldrb	r3, [r7, #3]
 8002420:	f003 030f 	and.w	r3, r3, #15
 8002424:	b2da      	uxtb	r2, r3
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002430:	2b01      	cmp	r3, #1
 8002432:	d101      	bne.n	8002438 <HAL_PCD_EP_Close+0x6e>
 8002434:	2302      	movs	r3, #2
 8002436:	e00e      	b.n	8002456 <HAL_PCD_EP_Close+0x8c>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2201      	movs	r2, #1
 800243c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	68f9      	ldr	r1, [r7, #12]
 8002446:	4618      	mov	r0, r3
 8002448:	f003 fa86 	bl	8005958 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2200      	movs	r2, #0
 8002450:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002454:	2300      	movs	r3, #0
}
 8002456:	4618      	mov	r0, r3
 8002458:	3710      	adds	r7, #16
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}

0800245e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800245e:	b580      	push	{r7, lr}
 8002460:	b086      	sub	sp, #24
 8002462:	af00      	add	r7, sp, #0
 8002464:	60f8      	str	r0, [r7, #12]
 8002466:	607a      	str	r2, [r7, #4]
 8002468:	603b      	str	r3, [r7, #0]
 800246a:	460b      	mov	r3, r1
 800246c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800246e:	7afb      	ldrb	r3, [r7, #11]
 8002470:	f003 020f 	and.w	r2, r3, #15
 8002474:	4613      	mov	r3, r2
 8002476:	00db      	lsls	r3, r3, #3
 8002478:	4413      	add	r3, r2
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002480:	68fa      	ldr	r2, [r7, #12]
 8002482:	4413      	add	r3, r2
 8002484:	3304      	adds	r3, #4
 8002486:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	683a      	ldr	r2, [r7, #0]
 8002492:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	2200      	movs	r2, #0
 8002498:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	2200      	movs	r2, #0
 800249e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80024a0:	7afb      	ldrb	r3, [r7, #11]
 80024a2:	f003 030f 	and.w	r3, r3, #15
 80024a6:	b2da      	uxtb	r2, r3
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	6979      	ldr	r1, [r7, #20]
 80024b2:	4618      	mov	r0, r3
 80024b4:	f003 fb2c 	bl	8005b10 <USB_EPStartXfer>

  return HAL_OK;
 80024b8:	2300      	movs	r3, #0
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3718      	adds	r7, #24
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}

080024c2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80024c2:	b580      	push	{r7, lr}
 80024c4:	b086      	sub	sp, #24
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	60f8      	str	r0, [r7, #12]
 80024ca:	607a      	str	r2, [r7, #4]
 80024cc:	603b      	str	r3, [r7, #0]
 80024ce:	460b      	mov	r3, r1
 80024d0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80024d2:	7afb      	ldrb	r3, [r7, #11]
 80024d4:	f003 020f 	and.w	r2, r3, #15
 80024d8:	4613      	mov	r3, r2
 80024da:	00db      	lsls	r3, r3, #3
 80024dc:	4413      	add	r3, r2
 80024de:	009b      	lsls	r3, r3, #2
 80024e0:	3338      	adds	r3, #56	; 0x38
 80024e2:	68fa      	ldr	r2, [r7, #12]
 80024e4:	4413      	add	r3, r2
 80024e6:	3304      	adds	r3, #4
 80024e8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	687a      	ldr	r2, [r7, #4]
 80024ee:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	683a      	ldr	r2, [r7, #0]
 80024f4:	611a      	str	r2, [r3, #16]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	2200      	movs	r2, #0
 80024fa:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	2201      	movs	r2, #1
 8002500:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002502:	7afb      	ldrb	r3, [r7, #11]
 8002504:	f003 030f 	and.w	r3, r3, #15
 8002508:	b2da      	uxtb	r2, r3
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	6979      	ldr	r1, [r7, #20]
 8002514:	4618      	mov	r0, r3
 8002516:	f003 fafb 	bl	8005b10 <USB_EPStartXfer>

  return HAL_OK;
 800251a:	2300      	movs	r3, #0
}
 800251c:	4618      	mov	r0, r3
 800251e:	3718      	adds	r7, #24
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}

08002524 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b084      	sub	sp, #16
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
 800252c:	460b      	mov	r3, r1
 800252e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002530:	78fb      	ldrb	r3, [r7, #3]
 8002532:	f003 020f 	and.w	r2, r3, #15
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	429a      	cmp	r2, r3
 800253c:	d901      	bls.n	8002542 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e04e      	b.n	80025e0 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002542:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002546:	2b00      	cmp	r3, #0
 8002548:	da0f      	bge.n	800256a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800254a:	78fb      	ldrb	r3, [r7, #3]
 800254c:	f003 020f 	and.w	r2, r3, #15
 8002550:	4613      	mov	r3, r2
 8002552:	00db      	lsls	r3, r3, #3
 8002554:	4413      	add	r3, r2
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	3338      	adds	r3, #56	; 0x38
 800255a:	687a      	ldr	r2, [r7, #4]
 800255c:	4413      	add	r3, r2
 800255e:	3304      	adds	r3, #4
 8002560:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	2201      	movs	r2, #1
 8002566:	705a      	strb	r2, [r3, #1]
 8002568:	e00d      	b.n	8002586 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800256a:	78fa      	ldrb	r2, [r7, #3]
 800256c:	4613      	mov	r3, r2
 800256e:	00db      	lsls	r3, r3, #3
 8002570:	4413      	add	r3, r2
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002578:	687a      	ldr	r2, [r7, #4]
 800257a:	4413      	add	r3, r2
 800257c:	3304      	adds	r3, #4
 800257e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	2200      	movs	r2, #0
 8002584:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	2201      	movs	r2, #1
 800258a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800258c:	78fb      	ldrb	r3, [r7, #3]
 800258e:	f003 030f 	and.w	r3, r3, #15
 8002592:	b2da      	uxtb	r2, r3
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d101      	bne.n	80025a6 <HAL_PCD_EP_SetStall+0x82>
 80025a2:	2302      	movs	r3, #2
 80025a4:	e01c      	b.n	80025e0 <HAL_PCD_EP_SetStall+0xbc>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2201      	movs	r2, #1
 80025aa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	68f9      	ldr	r1, [r7, #12]
 80025b4:	4618      	mov	r0, r3
 80025b6:	f003 fe19 	bl	80061ec <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80025ba:	78fb      	ldrb	r3, [r7, #3]
 80025bc:	f003 030f 	and.w	r3, r3, #15
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d108      	bne.n	80025d6 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80025ce:	4619      	mov	r1, r3
 80025d0:	4610      	mov	r0, r2
 80025d2:	f004 f80b 	bl	80065ec <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2200      	movs	r2, #0
 80025da:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80025de:	2300      	movs	r3, #0
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3710      	adds	r7, #16
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}

080025e8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b084      	sub	sp, #16
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
 80025f0:	460b      	mov	r3, r1
 80025f2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80025f4:	78fb      	ldrb	r3, [r7, #3]
 80025f6:	f003 020f 	and.w	r2, r3, #15
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	429a      	cmp	r2, r3
 8002600:	d901      	bls.n	8002606 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e042      	b.n	800268c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002606:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800260a:	2b00      	cmp	r3, #0
 800260c:	da0f      	bge.n	800262e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800260e:	78fb      	ldrb	r3, [r7, #3]
 8002610:	f003 020f 	and.w	r2, r3, #15
 8002614:	4613      	mov	r3, r2
 8002616:	00db      	lsls	r3, r3, #3
 8002618:	4413      	add	r3, r2
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	3338      	adds	r3, #56	; 0x38
 800261e:	687a      	ldr	r2, [r7, #4]
 8002620:	4413      	add	r3, r2
 8002622:	3304      	adds	r3, #4
 8002624:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	2201      	movs	r2, #1
 800262a:	705a      	strb	r2, [r3, #1]
 800262c:	e00f      	b.n	800264e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800262e:	78fb      	ldrb	r3, [r7, #3]
 8002630:	f003 020f 	and.w	r2, r3, #15
 8002634:	4613      	mov	r3, r2
 8002636:	00db      	lsls	r3, r3, #3
 8002638:	4413      	add	r3, r2
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002640:	687a      	ldr	r2, [r7, #4]
 8002642:	4413      	add	r3, r2
 8002644:	3304      	adds	r3, #4
 8002646:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	2200      	movs	r2, #0
 800264c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2200      	movs	r2, #0
 8002652:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002654:	78fb      	ldrb	r3, [r7, #3]
 8002656:	f003 030f 	and.w	r3, r3, #15
 800265a:	b2da      	uxtb	r2, r3
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002666:	2b01      	cmp	r3, #1
 8002668:	d101      	bne.n	800266e <HAL_PCD_EP_ClrStall+0x86>
 800266a:	2302      	movs	r3, #2
 800266c:	e00e      	b.n	800268c <HAL_PCD_EP_ClrStall+0xa4>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2201      	movs	r2, #1
 8002672:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	68f9      	ldr	r1, [r7, #12]
 800267c:	4618      	mov	r0, r3
 800267e:	f003 fe23 	bl	80062c8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2200      	movs	r2, #0
 8002686:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800268a:	2300      	movs	r3, #0
}
 800268c:	4618      	mov	r0, r3
 800268e:	3710      	adds	r7, #16
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}

08002694 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b084      	sub	sp, #16
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
 800269c:	460b      	mov	r3, r1
 800269e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80026a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	da0c      	bge.n	80026c2 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80026a8:	78fb      	ldrb	r3, [r7, #3]
 80026aa:	f003 020f 	and.w	r2, r3, #15
 80026ae:	4613      	mov	r3, r2
 80026b0:	00db      	lsls	r3, r3, #3
 80026b2:	4413      	add	r3, r2
 80026b4:	009b      	lsls	r3, r3, #2
 80026b6:	3338      	adds	r3, #56	; 0x38
 80026b8:	687a      	ldr	r2, [r7, #4]
 80026ba:	4413      	add	r3, r2
 80026bc:	3304      	adds	r3, #4
 80026be:	60fb      	str	r3, [r7, #12]
 80026c0:	e00c      	b.n	80026dc <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80026c2:	78fb      	ldrb	r3, [r7, #3]
 80026c4:	f003 020f 	and.w	r2, r3, #15
 80026c8:	4613      	mov	r3, r2
 80026ca:	00db      	lsls	r3, r3, #3
 80026cc:	4413      	add	r3, r2
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80026d4:	687a      	ldr	r2, [r7, #4]
 80026d6:	4413      	add	r3, r2
 80026d8:	3304      	adds	r3, #4
 80026da:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	68f9      	ldr	r1, [r7, #12]
 80026e2:	4618      	mov	r0, r3
 80026e4:	f003 fc46 	bl	8005f74 <USB_EPStopXfer>
 80026e8:	4603      	mov	r3, r0
 80026ea:	72fb      	strb	r3, [r7, #11]

  return ret;
 80026ec:	7afb      	ldrb	r3, [r7, #11]
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3710      	adds	r7, #16
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}

080026f6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80026f6:	b580      	push	{r7, lr}
 80026f8:	b088      	sub	sp, #32
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	6078      	str	r0, [r7, #4]
 80026fe:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800270a:	683a      	ldr	r2, [r7, #0]
 800270c:	4613      	mov	r3, r2
 800270e:	00db      	lsls	r3, r3, #3
 8002710:	4413      	add	r3, r2
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	3338      	adds	r3, #56	; 0x38
 8002716:	687a      	ldr	r2, [r7, #4]
 8002718:	4413      	add	r3, r2
 800271a:	3304      	adds	r3, #4
 800271c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	695a      	ldr	r2, [r3, #20]
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	691b      	ldr	r3, [r3, #16]
 8002726:	429a      	cmp	r2, r3
 8002728:	d901      	bls.n	800272e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e067      	b.n	80027fe <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	691a      	ldr	r2, [r3, #16]
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	695b      	ldr	r3, [r3, #20]
 8002736:	1ad3      	subs	r3, r2, r3
 8002738:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	69fa      	ldr	r2, [r7, #28]
 8002740:	429a      	cmp	r2, r3
 8002742:	d902      	bls.n	800274a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	3303      	adds	r3, #3
 800274e:	089b      	lsrs	r3, r3, #2
 8002750:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002752:	e026      	b.n	80027a2 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	691a      	ldr	r2, [r3, #16]
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	695b      	ldr	r3, [r3, #20]
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	69fa      	ldr	r2, [r7, #28]
 8002766:	429a      	cmp	r2, r3
 8002768:	d902      	bls.n	8002770 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	3303      	adds	r3, #3
 8002774:	089b      	lsrs	r3, r3, #2
 8002776:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	68d9      	ldr	r1, [r3, #12]
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	b2da      	uxtb	r2, r3
 8002780:	69fb      	ldr	r3, [r7, #28]
 8002782:	b29b      	uxth	r3, r3
 8002784:	6978      	ldr	r0, [r7, #20]
 8002786:	f003 fc9f 	bl	80060c8 <USB_WritePacket>

    ep->xfer_buff  += len;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	68da      	ldr	r2, [r3, #12]
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	441a      	add	r2, r3
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	695a      	ldr	r2, [r3, #20]
 800279a:	69fb      	ldr	r3, [r7, #28]
 800279c:	441a      	add	r2, r3
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	015a      	lsls	r2, r3, #5
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	4413      	add	r3, r2
 80027aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027ae:	699b      	ldr	r3, [r3, #24]
 80027b0:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80027b2:	69ba      	ldr	r2, [r7, #24]
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d809      	bhi.n	80027cc <PCD_WriteEmptyTxFifo+0xd6>
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	695a      	ldr	r2, [r3, #20]
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80027c0:	429a      	cmp	r2, r3
 80027c2:	d203      	bcs.n	80027cc <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	691b      	ldr	r3, [r3, #16]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d1c3      	bne.n	8002754 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	691a      	ldr	r2, [r3, #16]
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	695b      	ldr	r3, [r3, #20]
 80027d4:	429a      	cmp	r2, r3
 80027d6:	d811      	bhi.n	80027fc <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	f003 030f 	and.w	r3, r3, #15
 80027de:	2201      	movs	r2, #1
 80027e0:	fa02 f303 	lsl.w	r3, r2, r3
 80027e4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	43db      	mvns	r3, r3
 80027f2:	6939      	ldr	r1, [r7, #16]
 80027f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80027f8:	4013      	ands	r3, r2
 80027fa:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80027fc:	2300      	movs	r3, #0
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3720      	adds	r7, #32
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
	...

08002808 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b086      	sub	sp, #24
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
 8002810:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	333c      	adds	r3, #60	; 0x3c
 8002820:	3304      	adds	r3, #4
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	015a      	lsls	r2, r3, #5
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	4413      	add	r3, r2
 800282e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	4a19      	ldr	r2, [pc, #100]	; (80028a0 <PCD_EP_OutXfrComplete_int+0x98>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d124      	bne.n	8002888 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002844:	2b00      	cmp	r3, #0
 8002846:	d00a      	beq.n	800285e <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	015a      	lsls	r2, r3, #5
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	4413      	add	r3, r2
 8002850:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002854:	461a      	mov	r2, r3
 8002856:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800285a:	6093      	str	r3, [r2, #8]
 800285c:	e01a      	b.n	8002894 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	f003 0320 	and.w	r3, r3, #32
 8002864:	2b00      	cmp	r3, #0
 8002866:	d008      	beq.n	800287a <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	015a      	lsls	r2, r3, #5
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	4413      	add	r3, r2
 8002870:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002874:	461a      	mov	r2, r3
 8002876:	2320      	movs	r3, #32
 8002878:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	b2db      	uxtb	r3, r3
 800287e:	4619      	mov	r1, r3
 8002880:	6878      	ldr	r0, [r7, #4]
 8002882:	f008 fbe1 	bl	800b048 <HAL_PCD_DataOutStageCallback>
 8002886:	e005      	b.n	8002894 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	b2db      	uxtb	r3, r3
 800288c:	4619      	mov	r1, r3
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f008 fbda 	bl	800b048 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8002894:	2300      	movs	r3, #0
}
 8002896:	4618      	mov	r0, r3
 8002898:	3718      	adds	r7, #24
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}
 800289e:	bf00      	nop
 80028a0:	4f54310a 	.word	0x4f54310a

080028a4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b086      	sub	sp, #24
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
 80028ac:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	333c      	adds	r3, #60	; 0x3c
 80028bc:	3304      	adds	r3, #4
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	015a      	lsls	r2, r3, #5
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	4413      	add	r3, r2
 80028ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	4a0c      	ldr	r2, [pc, #48]	; (8002908 <PCD_EP_OutSetupPacket_int+0x64>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d90e      	bls.n	80028f8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d009      	beq.n	80028f8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	015a      	lsls	r2, r3, #5
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	4413      	add	r3, r2
 80028ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028f0:	461a      	mov	r2, r3
 80028f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80028f6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	f008 fb93 	bl	800b024 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 80028fe:	2300      	movs	r3, #0
}
 8002900:	4618      	mov	r0, r3
 8002902:	3718      	adds	r7, #24
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}
 8002908:	4f54300a 	.word	0x4f54300a

0800290c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800290c:	b480      	push	{r7}
 800290e:	b085      	sub	sp, #20
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
 8002914:	460b      	mov	r3, r1
 8002916:	70fb      	strb	r3, [r7, #3]
 8002918:	4613      	mov	r3, r2
 800291a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002922:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002924:	78fb      	ldrb	r3, [r7, #3]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d107      	bne.n	800293a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800292a:	883b      	ldrh	r3, [r7, #0]
 800292c:	0419      	lsls	r1, r3, #16
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	68ba      	ldr	r2, [r7, #8]
 8002934:	430a      	orrs	r2, r1
 8002936:	629a      	str	r2, [r3, #40]	; 0x28
 8002938:	e028      	b.n	800298c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002940:	0c1b      	lsrs	r3, r3, #16
 8002942:	68ba      	ldr	r2, [r7, #8]
 8002944:	4413      	add	r3, r2
 8002946:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002948:	2300      	movs	r3, #0
 800294a:	73fb      	strb	r3, [r7, #15]
 800294c:	e00d      	b.n	800296a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	7bfb      	ldrb	r3, [r7, #15]
 8002954:	3340      	adds	r3, #64	; 0x40
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	4413      	add	r3, r2
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	0c1b      	lsrs	r3, r3, #16
 800295e:	68ba      	ldr	r2, [r7, #8]
 8002960:	4413      	add	r3, r2
 8002962:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002964:	7bfb      	ldrb	r3, [r7, #15]
 8002966:	3301      	adds	r3, #1
 8002968:	73fb      	strb	r3, [r7, #15]
 800296a:	7bfa      	ldrb	r2, [r7, #15]
 800296c:	78fb      	ldrb	r3, [r7, #3]
 800296e:	3b01      	subs	r3, #1
 8002970:	429a      	cmp	r2, r3
 8002972:	d3ec      	bcc.n	800294e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002974:	883b      	ldrh	r3, [r7, #0]
 8002976:	0418      	lsls	r0, r3, #16
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6819      	ldr	r1, [r3, #0]
 800297c:	78fb      	ldrb	r3, [r7, #3]
 800297e:	3b01      	subs	r3, #1
 8002980:	68ba      	ldr	r2, [r7, #8]
 8002982:	4302      	orrs	r2, r0
 8002984:	3340      	adds	r3, #64	; 0x40
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	440b      	add	r3, r1
 800298a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800298c:	2300      	movs	r3, #0
}
 800298e:	4618      	mov	r0, r3
 8002990:	3714      	adds	r7, #20
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr

0800299a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800299a:	b480      	push	{r7}
 800299c:	b083      	sub	sp, #12
 800299e:	af00      	add	r7, sp, #0
 80029a0:	6078      	str	r0, [r7, #4]
 80029a2:	460b      	mov	r3, r1
 80029a4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	887a      	ldrh	r2, [r7, #2]
 80029ac:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80029ae:	2300      	movs	r3, #0
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	370c      	adds	r7, #12
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr

080029bc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80029bc:	b480      	push	{r7}
 80029be:	b085      	sub	sp, #20
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2201      	movs	r2, #1
 80029ce:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2200      	movs	r2, #0
 80029d6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	699b      	ldr	r3, [r3, #24]
 80029de:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029ee:	f043 0303 	orr.w	r3, r3, #3
 80029f2:	68fa      	ldr	r2, [r7, #12]
 80029f4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80029f6:	2300      	movs	r3, #0
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	3714      	adds	r7, #20
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr

08002a04 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002a04:	b480      	push	{r7}
 8002a06:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a08:	4b05      	ldr	r3, [pc, #20]	; (8002a20 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a04      	ldr	r2, [pc, #16]	; (8002a20 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002a0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a12:	6013      	str	r3, [r2, #0]
}
 8002a14:	bf00      	nop
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr
 8002a1e:	bf00      	nop
 8002a20:	40007000 	.word	0x40007000

08002a24 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002a24:	b480      	push	{r7}
 8002a26:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002a28:	4b04      	ldr	r3, [pc, #16]	; (8002a3c <HAL_PWREx_GetVoltageRange+0x18>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	46bd      	mov	sp, r7
 8002a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a38:	4770      	bx	lr
 8002a3a:	bf00      	nop
 8002a3c:	40007000 	.word	0x40007000

08002a40 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b085      	sub	sp, #20
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a4e:	d130      	bne.n	8002ab2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a50:	4b23      	ldr	r3, [pc, #140]	; (8002ae0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002a58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a5c:	d038      	beq.n	8002ad0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a5e:	4b20      	ldr	r3, [pc, #128]	; (8002ae0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002a66:	4a1e      	ldr	r2, [pc, #120]	; (8002ae0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a68:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a6c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002a6e:	4b1d      	ldr	r3, [pc, #116]	; (8002ae4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	2232      	movs	r2, #50	; 0x32
 8002a74:	fb02 f303 	mul.w	r3, r2, r3
 8002a78:	4a1b      	ldr	r2, [pc, #108]	; (8002ae8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002a7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a7e:	0c9b      	lsrs	r3, r3, #18
 8002a80:	3301      	adds	r3, #1
 8002a82:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a84:	e002      	b.n	8002a8c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	3b01      	subs	r3, #1
 8002a8a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a8c:	4b14      	ldr	r3, [pc, #80]	; (8002ae0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a8e:	695b      	ldr	r3, [r3, #20]
 8002a90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a98:	d102      	bne.n	8002aa0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d1f2      	bne.n	8002a86 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002aa0:	4b0f      	ldr	r3, [pc, #60]	; (8002ae0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002aa2:	695b      	ldr	r3, [r3, #20]
 8002aa4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002aa8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002aac:	d110      	bne.n	8002ad0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	e00f      	b.n	8002ad2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002ab2:	4b0b      	ldr	r3, [pc, #44]	; (8002ae0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002aba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002abe:	d007      	beq.n	8002ad0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002ac0:	4b07      	ldr	r3, [pc, #28]	; (8002ae0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002ac8:	4a05      	ldr	r2, [pc, #20]	; (8002ae0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002aca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ace:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002ad0:	2300      	movs	r3, #0
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	3714      	adds	r7, #20
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr
 8002ade:	bf00      	nop
 8002ae0:	40007000 	.word	0x40007000
 8002ae4:	20000000 	.word	0x20000000
 8002ae8:	431bde83 	.word	0x431bde83

08002aec <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002aec:	b480      	push	{r7}
 8002aee:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002af0:	4b05      	ldr	r3, [pc, #20]	; (8002b08 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	4a04      	ldr	r2, [pc, #16]	; (8002b08 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002af6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002afa:	6053      	str	r3, [r2, #4]
}
 8002afc:	bf00      	nop
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr
 8002b06:	bf00      	nop
 8002b08:	40007000 	.word	0x40007000

08002b0c <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8002b10:	4b05      	ldr	r3, [pc, #20]	; (8002b28 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	4a04      	ldr	r2, [pc, #16]	; (8002b28 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002b16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b1a:	6053      	str	r3, [r2, #4]
}
 8002b1c:	bf00      	nop
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr
 8002b26:	bf00      	nop
 8002b28:	40007000 	.word	0x40007000

08002b2c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b088      	sub	sp, #32
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d102      	bne.n	8002b40 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	f000 bc08 	b.w	8003350 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b40:	4b96      	ldr	r3, [pc, #600]	; (8002d9c <HAL_RCC_OscConfig+0x270>)
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	f003 030c 	and.w	r3, r3, #12
 8002b48:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b4a:	4b94      	ldr	r3, [pc, #592]	; (8002d9c <HAL_RCC_OscConfig+0x270>)
 8002b4c:	68db      	ldr	r3, [r3, #12]
 8002b4e:	f003 0303 	and.w	r3, r3, #3
 8002b52:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 0310 	and.w	r3, r3, #16
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	f000 80e4 	beq.w	8002d2a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002b62:	69bb      	ldr	r3, [r7, #24]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d007      	beq.n	8002b78 <HAL_RCC_OscConfig+0x4c>
 8002b68:	69bb      	ldr	r3, [r7, #24]
 8002b6a:	2b0c      	cmp	r3, #12
 8002b6c:	f040 808b 	bne.w	8002c86 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	f040 8087 	bne.w	8002c86 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002b78:	4b88      	ldr	r3, [pc, #544]	; (8002d9c <HAL_RCC_OscConfig+0x270>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 0302 	and.w	r3, r3, #2
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d005      	beq.n	8002b90 <HAL_RCC_OscConfig+0x64>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	699b      	ldr	r3, [r3, #24]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d101      	bne.n	8002b90 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e3df      	b.n	8003350 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6a1a      	ldr	r2, [r3, #32]
 8002b94:	4b81      	ldr	r3, [pc, #516]	; (8002d9c <HAL_RCC_OscConfig+0x270>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0308 	and.w	r3, r3, #8
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d004      	beq.n	8002baa <HAL_RCC_OscConfig+0x7e>
 8002ba0:	4b7e      	ldr	r3, [pc, #504]	; (8002d9c <HAL_RCC_OscConfig+0x270>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ba8:	e005      	b.n	8002bb6 <HAL_RCC_OscConfig+0x8a>
 8002baa:	4b7c      	ldr	r3, [pc, #496]	; (8002d9c <HAL_RCC_OscConfig+0x270>)
 8002bac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bb0:	091b      	lsrs	r3, r3, #4
 8002bb2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d223      	bcs.n	8002c02 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6a1b      	ldr	r3, [r3, #32]
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f000 fd92 	bl	80036e8 <RCC_SetFlashLatencyFromMSIRange>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d001      	beq.n	8002bce <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e3c0      	b.n	8003350 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002bce:	4b73      	ldr	r3, [pc, #460]	; (8002d9c <HAL_RCC_OscConfig+0x270>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a72      	ldr	r2, [pc, #456]	; (8002d9c <HAL_RCC_OscConfig+0x270>)
 8002bd4:	f043 0308 	orr.w	r3, r3, #8
 8002bd8:	6013      	str	r3, [r2, #0]
 8002bda:	4b70      	ldr	r3, [pc, #448]	; (8002d9c <HAL_RCC_OscConfig+0x270>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6a1b      	ldr	r3, [r3, #32]
 8002be6:	496d      	ldr	r1, [pc, #436]	; (8002d9c <HAL_RCC_OscConfig+0x270>)
 8002be8:	4313      	orrs	r3, r2
 8002bea:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002bec:	4b6b      	ldr	r3, [pc, #428]	; (8002d9c <HAL_RCC_OscConfig+0x270>)
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	69db      	ldr	r3, [r3, #28]
 8002bf8:	021b      	lsls	r3, r3, #8
 8002bfa:	4968      	ldr	r1, [pc, #416]	; (8002d9c <HAL_RCC_OscConfig+0x270>)
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	604b      	str	r3, [r1, #4]
 8002c00:	e025      	b.n	8002c4e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c02:	4b66      	ldr	r3, [pc, #408]	; (8002d9c <HAL_RCC_OscConfig+0x270>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a65      	ldr	r2, [pc, #404]	; (8002d9c <HAL_RCC_OscConfig+0x270>)
 8002c08:	f043 0308 	orr.w	r3, r3, #8
 8002c0c:	6013      	str	r3, [r2, #0]
 8002c0e:	4b63      	ldr	r3, [pc, #396]	; (8002d9c <HAL_RCC_OscConfig+0x270>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6a1b      	ldr	r3, [r3, #32]
 8002c1a:	4960      	ldr	r1, [pc, #384]	; (8002d9c <HAL_RCC_OscConfig+0x270>)
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c20:	4b5e      	ldr	r3, [pc, #376]	; (8002d9c <HAL_RCC_OscConfig+0x270>)
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	69db      	ldr	r3, [r3, #28]
 8002c2c:	021b      	lsls	r3, r3, #8
 8002c2e:	495b      	ldr	r1, [pc, #364]	; (8002d9c <HAL_RCC_OscConfig+0x270>)
 8002c30:	4313      	orrs	r3, r2
 8002c32:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c34:	69bb      	ldr	r3, [r7, #24]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d109      	bne.n	8002c4e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6a1b      	ldr	r3, [r3, #32]
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f000 fd52 	bl	80036e8 <RCC_SetFlashLatencyFromMSIRange>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d001      	beq.n	8002c4e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e380      	b.n	8003350 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002c4e:	f000 fc87 	bl	8003560 <HAL_RCC_GetSysClockFreq>
 8002c52:	4602      	mov	r2, r0
 8002c54:	4b51      	ldr	r3, [pc, #324]	; (8002d9c <HAL_RCC_OscConfig+0x270>)
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	091b      	lsrs	r3, r3, #4
 8002c5a:	f003 030f 	and.w	r3, r3, #15
 8002c5e:	4950      	ldr	r1, [pc, #320]	; (8002da0 <HAL_RCC_OscConfig+0x274>)
 8002c60:	5ccb      	ldrb	r3, [r1, r3]
 8002c62:	f003 031f 	and.w	r3, r3, #31
 8002c66:	fa22 f303 	lsr.w	r3, r2, r3
 8002c6a:	4a4e      	ldr	r2, [pc, #312]	; (8002da4 <HAL_RCC_OscConfig+0x278>)
 8002c6c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002c6e:	4b4e      	ldr	r3, [pc, #312]	; (8002da8 <HAL_RCC_OscConfig+0x27c>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4618      	mov	r0, r3
 8002c74:	f7fe f9e2 	bl	800103c <HAL_InitTick>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002c7c:	7bfb      	ldrb	r3, [r7, #15]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d052      	beq.n	8002d28 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002c82:	7bfb      	ldrb	r3, [r7, #15]
 8002c84:	e364      	b.n	8003350 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	699b      	ldr	r3, [r3, #24]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d032      	beq.n	8002cf4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002c8e:	4b43      	ldr	r3, [pc, #268]	; (8002d9c <HAL_RCC_OscConfig+0x270>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a42      	ldr	r2, [pc, #264]	; (8002d9c <HAL_RCC_OscConfig+0x270>)
 8002c94:	f043 0301 	orr.w	r3, r3, #1
 8002c98:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002c9a:	f7fe fa1f 	bl	80010dc <HAL_GetTick>
 8002c9e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ca0:	e008      	b.n	8002cb4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ca2:	f7fe fa1b 	bl	80010dc <HAL_GetTick>
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	1ad3      	subs	r3, r2, r3
 8002cac:	2b02      	cmp	r3, #2
 8002cae:	d901      	bls.n	8002cb4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002cb0:	2303      	movs	r3, #3
 8002cb2:	e34d      	b.n	8003350 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002cb4:	4b39      	ldr	r3, [pc, #228]	; (8002d9c <HAL_RCC_OscConfig+0x270>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 0302 	and.w	r3, r3, #2
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d0f0      	beq.n	8002ca2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002cc0:	4b36      	ldr	r3, [pc, #216]	; (8002d9c <HAL_RCC_OscConfig+0x270>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a35      	ldr	r2, [pc, #212]	; (8002d9c <HAL_RCC_OscConfig+0x270>)
 8002cc6:	f043 0308 	orr.w	r3, r3, #8
 8002cca:	6013      	str	r3, [r2, #0]
 8002ccc:	4b33      	ldr	r3, [pc, #204]	; (8002d9c <HAL_RCC_OscConfig+0x270>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6a1b      	ldr	r3, [r3, #32]
 8002cd8:	4930      	ldr	r1, [pc, #192]	; (8002d9c <HAL_RCC_OscConfig+0x270>)
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002cde:	4b2f      	ldr	r3, [pc, #188]	; (8002d9c <HAL_RCC_OscConfig+0x270>)
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	69db      	ldr	r3, [r3, #28]
 8002cea:	021b      	lsls	r3, r3, #8
 8002cec:	492b      	ldr	r1, [pc, #172]	; (8002d9c <HAL_RCC_OscConfig+0x270>)
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	604b      	str	r3, [r1, #4]
 8002cf2:	e01a      	b.n	8002d2a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002cf4:	4b29      	ldr	r3, [pc, #164]	; (8002d9c <HAL_RCC_OscConfig+0x270>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a28      	ldr	r2, [pc, #160]	; (8002d9c <HAL_RCC_OscConfig+0x270>)
 8002cfa:	f023 0301 	bic.w	r3, r3, #1
 8002cfe:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002d00:	f7fe f9ec 	bl	80010dc <HAL_GetTick>
 8002d04:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002d06:	e008      	b.n	8002d1a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d08:	f7fe f9e8 	bl	80010dc <HAL_GetTick>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	2b02      	cmp	r3, #2
 8002d14:	d901      	bls.n	8002d1a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002d16:	2303      	movs	r3, #3
 8002d18:	e31a      	b.n	8003350 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002d1a:	4b20      	ldr	r3, [pc, #128]	; (8002d9c <HAL_RCC_OscConfig+0x270>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 0302 	and.w	r3, r3, #2
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d1f0      	bne.n	8002d08 <HAL_RCC_OscConfig+0x1dc>
 8002d26:	e000      	b.n	8002d2a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002d28:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 0301 	and.w	r3, r3, #1
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d073      	beq.n	8002e1e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002d36:	69bb      	ldr	r3, [r7, #24]
 8002d38:	2b08      	cmp	r3, #8
 8002d3a:	d005      	beq.n	8002d48 <HAL_RCC_OscConfig+0x21c>
 8002d3c:	69bb      	ldr	r3, [r7, #24]
 8002d3e:	2b0c      	cmp	r3, #12
 8002d40:	d10e      	bne.n	8002d60 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	2b03      	cmp	r3, #3
 8002d46:	d10b      	bne.n	8002d60 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d48:	4b14      	ldr	r3, [pc, #80]	; (8002d9c <HAL_RCC_OscConfig+0x270>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d063      	beq.n	8002e1c <HAL_RCC_OscConfig+0x2f0>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d15f      	bne.n	8002e1c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e2f7      	b.n	8003350 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d68:	d106      	bne.n	8002d78 <HAL_RCC_OscConfig+0x24c>
 8002d6a:	4b0c      	ldr	r3, [pc, #48]	; (8002d9c <HAL_RCC_OscConfig+0x270>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a0b      	ldr	r2, [pc, #44]	; (8002d9c <HAL_RCC_OscConfig+0x270>)
 8002d70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d74:	6013      	str	r3, [r2, #0]
 8002d76:	e025      	b.n	8002dc4 <HAL_RCC_OscConfig+0x298>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d80:	d114      	bne.n	8002dac <HAL_RCC_OscConfig+0x280>
 8002d82:	4b06      	ldr	r3, [pc, #24]	; (8002d9c <HAL_RCC_OscConfig+0x270>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a05      	ldr	r2, [pc, #20]	; (8002d9c <HAL_RCC_OscConfig+0x270>)
 8002d88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d8c:	6013      	str	r3, [r2, #0]
 8002d8e:	4b03      	ldr	r3, [pc, #12]	; (8002d9c <HAL_RCC_OscConfig+0x270>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a02      	ldr	r2, [pc, #8]	; (8002d9c <HAL_RCC_OscConfig+0x270>)
 8002d94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d98:	6013      	str	r3, [r2, #0]
 8002d9a:	e013      	b.n	8002dc4 <HAL_RCC_OscConfig+0x298>
 8002d9c:	40021000 	.word	0x40021000
 8002da0:	0800b8b0 	.word	0x0800b8b0
 8002da4:	20000000 	.word	0x20000000
 8002da8:	20000004 	.word	0x20000004
 8002dac:	4ba0      	ldr	r3, [pc, #640]	; (8003030 <HAL_RCC_OscConfig+0x504>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a9f      	ldr	r2, [pc, #636]	; (8003030 <HAL_RCC_OscConfig+0x504>)
 8002db2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002db6:	6013      	str	r3, [r2, #0]
 8002db8:	4b9d      	ldr	r3, [pc, #628]	; (8003030 <HAL_RCC_OscConfig+0x504>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a9c      	ldr	r2, [pc, #624]	; (8003030 <HAL_RCC_OscConfig+0x504>)
 8002dbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dc2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d013      	beq.n	8002df4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dcc:	f7fe f986 	bl	80010dc <HAL_GetTick>
 8002dd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002dd2:	e008      	b.n	8002de6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002dd4:	f7fe f982 	bl	80010dc <HAL_GetTick>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	2b64      	cmp	r3, #100	; 0x64
 8002de0:	d901      	bls.n	8002de6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002de2:	2303      	movs	r3, #3
 8002de4:	e2b4      	b.n	8003350 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002de6:	4b92      	ldr	r3, [pc, #584]	; (8003030 <HAL_RCC_OscConfig+0x504>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d0f0      	beq.n	8002dd4 <HAL_RCC_OscConfig+0x2a8>
 8002df2:	e014      	b.n	8002e1e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002df4:	f7fe f972 	bl	80010dc <HAL_GetTick>
 8002df8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002dfa:	e008      	b.n	8002e0e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002dfc:	f7fe f96e 	bl	80010dc <HAL_GetTick>
 8002e00:	4602      	mov	r2, r0
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	2b64      	cmp	r3, #100	; 0x64
 8002e08:	d901      	bls.n	8002e0e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002e0a:	2303      	movs	r3, #3
 8002e0c:	e2a0      	b.n	8003350 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e0e:	4b88      	ldr	r3, [pc, #544]	; (8003030 <HAL_RCC_OscConfig+0x504>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d1f0      	bne.n	8002dfc <HAL_RCC_OscConfig+0x2d0>
 8002e1a:	e000      	b.n	8002e1e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f003 0302 	and.w	r3, r3, #2
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d060      	beq.n	8002eec <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002e2a:	69bb      	ldr	r3, [r7, #24]
 8002e2c:	2b04      	cmp	r3, #4
 8002e2e:	d005      	beq.n	8002e3c <HAL_RCC_OscConfig+0x310>
 8002e30:	69bb      	ldr	r3, [r7, #24]
 8002e32:	2b0c      	cmp	r3, #12
 8002e34:	d119      	bne.n	8002e6a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	2b02      	cmp	r3, #2
 8002e3a:	d116      	bne.n	8002e6a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e3c:	4b7c      	ldr	r3, [pc, #496]	; (8003030 <HAL_RCC_OscConfig+0x504>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d005      	beq.n	8002e54 <HAL_RCC_OscConfig+0x328>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	68db      	ldr	r3, [r3, #12]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d101      	bne.n	8002e54 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	e27d      	b.n	8003350 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e54:	4b76      	ldr	r3, [pc, #472]	; (8003030 <HAL_RCC_OscConfig+0x504>)
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	691b      	ldr	r3, [r3, #16]
 8002e60:	061b      	lsls	r3, r3, #24
 8002e62:	4973      	ldr	r1, [pc, #460]	; (8003030 <HAL_RCC_OscConfig+0x504>)
 8002e64:	4313      	orrs	r3, r2
 8002e66:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e68:	e040      	b.n	8002eec <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	68db      	ldr	r3, [r3, #12]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d023      	beq.n	8002eba <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e72:	4b6f      	ldr	r3, [pc, #444]	; (8003030 <HAL_RCC_OscConfig+0x504>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a6e      	ldr	r2, [pc, #440]	; (8003030 <HAL_RCC_OscConfig+0x504>)
 8002e78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e7e:	f7fe f92d 	bl	80010dc <HAL_GetTick>
 8002e82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e84:	e008      	b.n	8002e98 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e86:	f7fe f929 	bl	80010dc <HAL_GetTick>
 8002e8a:	4602      	mov	r2, r0
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	1ad3      	subs	r3, r2, r3
 8002e90:	2b02      	cmp	r3, #2
 8002e92:	d901      	bls.n	8002e98 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002e94:	2303      	movs	r3, #3
 8002e96:	e25b      	b.n	8003350 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e98:	4b65      	ldr	r3, [pc, #404]	; (8003030 <HAL_RCC_OscConfig+0x504>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d0f0      	beq.n	8002e86 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ea4:	4b62      	ldr	r3, [pc, #392]	; (8003030 <HAL_RCC_OscConfig+0x504>)
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	691b      	ldr	r3, [r3, #16]
 8002eb0:	061b      	lsls	r3, r3, #24
 8002eb2:	495f      	ldr	r1, [pc, #380]	; (8003030 <HAL_RCC_OscConfig+0x504>)
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	604b      	str	r3, [r1, #4]
 8002eb8:	e018      	b.n	8002eec <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002eba:	4b5d      	ldr	r3, [pc, #372]	; (8003030 <HAL_RCC_OscConfig+0x504>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a5c      	ldr	r2, [pc, #368]	; (8003030 <HAL_RCC_OscConfig+0x504>)
 8002ec0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ec4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ec6:	f7fe f909 	bl	80010dc <HAL_GetTick>
 8002eca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ecc:	e008      	b.n	8002ee0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ece:	f7fe f905 	bl	80010dc <HAL_GetTick>
 8002ed2:	4602      	mov	r2, r0
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	1ad3      	subs	r3, r2, r3
 8002ed8:	2b02      	cmp	r3, #2
 8002eda:	d901      	bls.n	8002ee0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002edc:	2303      	movs	r3, #3
 8002ede:	e237      	b.n	8003350 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ee0:	4b53      	ldr	r3, [pc, #332]	; (8003030 <HAL_RCC_OscConfig+0x504>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d1f0      	bne.n	8002ece <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 0308 	and.w	r3, r3, #8
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d03c      	beq.n	8002f72 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	695b      	ldr	r3, [r3, #20]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d01c      	beq.n	8002f3a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f00:	4b4b      	ldr	r3, [pc, #300]	; (8003030 <HAL_RCC_OscConfig+0x504>)
 8002f02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f06:	4a4a      	ldr	r2, [pc, #296]	; (8003030 <HAL_RCC_OscConfig+0x504>)
 8002f08:	f043 0301 	orr.w	r3, r3, #1
 8002f0c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f10:	f7fe f8e4 	bl	80010dc <HAL_GetTick>
 8002f14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f16:	e008      	b.n	8002f2a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f18:	f7fe f8e0 	bl	80010dc <HAL_GetTick>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	1ad3      	subs	r3, r2, r3
 8002f22:	2b02      	cmp	r3, #2
 8002f24:	d901      	bls.n	8002f2a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002f26:	2303      	movs	r3, #3
 8002f28:	e212      	b.n	8003350 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f2a:	4b41      	ldr	r3, [pc, #260]	; (8003030 <HAL_RCC_OscConfig+0x504>)
 8002f2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f30:	f003 0302 	and.w	r3, r3, #2
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d0ef      	beq.n	8002f18 <HAL_RCC_OscConfig+0x3ec>
 8002f38:	e01b      	b.n	8002f72 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f3a:	4b3d      	ldr	r3, [pc, #244]	; (8003030 <HAL_RCC_OscConfig+0x504>)
 8002f3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f40:	4a3b      	ldr	r2, [pc, #236]	; (8003030 <HAL_RCC_OscConfig+0x504>)
 8002f42:	f023 0301 	bic.w	r3, r3, #1
 8002f46:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f4a:	f7fe f8c7 	bl	80010dc <HAL_GetTick>
 8002f4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f50:	e008      	b.n	8002f64 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f52:	f7fe f8c3 	bl	80010dc <HAL_GetTick>
 8002f56:	4602      	mov	r2, r0
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	1ad3      	subs	r3, r2, r3
 8002f5c:	2b02      	cmp	r3, #2
 8002f5e:	d901      	bls.n	8002f64 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002f60:	2303      	movs	r3, #3
 8002f62:	e1f5      	b.n	8003350 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f64:	4b32      	ldr	r3, [pc, #200]	; (8003030 <HAL_RCC_OscConfig+0x504>)
 8002f66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f6a:	f003 0302 	and.w	r3, r3, #2
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d1ef      	bne.n	8002f52 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 0304 	and.w	r3, r3, #4
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	f000 80a6 	beq.w	80030cc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f80:	2300      	movs	r3, #0
 8002f82:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002f84:	4b2a      	ldr	r3, [pc, #168]	; (8003030 <HAL_RCC_OscConfig+0x504>)
 8002f86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d10d      	bne.n	8002fac <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f90:	4b27      	ldr	r3, [pc, #156]	; (8003030 <HAL_RCC_OscConfig+0x504>)
 8002f92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f94:	4a26      	ldr	r2, [pc, #152]	; (8003030 <HAL_RCC_OscConfig+0x504>)
 8002f96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f9a:	6593      	str	r3, [r2, #88]	; 0x58
 8002f9c:	4b24      	ldr	r3, [pc, #144]	; (8003030 <HAL_RCC_OscConfig+0x504>)
 8002f9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fa4:	60bb      	str	r3, [r7, #8]
 8002fa6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fac:	4b21      	ldr	r3, [pc, #132]	; (8003034 <HAL_RCC_OscConfig+0x508>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d118      	bne.n	8002fea <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002fb8:	4b1e      	ldr	r3, [pc, #120]	; (8003034 <HAL_RCC_OscConfig+0x508>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a1d      	ldr	r2, [pc, #116]	; (8003034 <HAL_RCC_OscConfig+0x508>)
 8002fbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fc2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fc4:	f7fe f88a 	bl	80010dc <HAL_GetTick>
 8002fc8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fca:	e008      	b.n	8002fde <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fcc:	f7fe f886 	bl	80010dc <HAL_GetTick>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	1ad3      	subs	r3, r2, r3
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	d901      	bls.n	8002fde <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	e1b8      	b.n	8003350 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fde:	4b15      	ldr	r3, [pc, #84]	; (8003034 <HAL_RCC_OscConfig+0x508>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d0f0      	beq.n	8002fcc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	2b01      	cmp	r3, #1
 8002ff0:	d108      	bne.n	8003004 <HAL_RCC_OscConfig+0x4d8>
 8002ff2:	4b0f      	ldr	r3, [pc, #60]	; (8003030 <HAL_RCC_OscConfig+0x504>)
 8002ff4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ff8:	4a0d      	ldr	r2, [pc, #52]	; (8003030 <HAL_RCC_OscConfig+0x504>)
 8002ffa:	f043 0301 	orr.w	r3, r3, #1
 8002ffe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003002:	e029      	b.n	8003058 <HAL_RCC_OscConfig+0x52c>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	2b05      	cmp	r3, #5
 800300a:	d115      	bne.n	8003038 <HAL_RCC_OscConfig+0x50c>
 800300c:	4b08      	ldr	r3, [pc, #32]	; (8003030 <HAL_RCC_OscConfig+0x504>)
 800300e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003012:	4a07      	ldr	r2, [pc, #28]	; (8003030 <HAL_RCC_OscConfig+0x504>)
 8003014:	f043 0304 	orr.w	r3, r3, #4
 8003018:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800301c:	4b04      	ldr	r3, [pc, #16]	; (8003030 <HAL_RCC_OscConfig+0x504>)
 800301e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003022:	4a03      	ldr	r2, [pc, #12]	; (8003030 <HAL_RCC_OscConfig+0x504>)
 8003024:	f043 0301 	orr.w	r3, r3, #1
 8003028:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800302c:	e014      	b.n	8003058 <HAL_RCC_OscConfig+0x52c>
 800302e:	bf00      	nop
 8003030:	40021000 	.word	0x40021000
 8003034:	40007000 	.word	0x40007000
 8003038:	4b9d      	ldr	r3, [pc, #628]	; (80032b0 <HAL_RCC_OscConfig+0x784>)
 800303a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800303e:	4a9c      	ldr	r2, [pc, #624]	; (80032b0 <HAL_RCC_OscConfig+0x784>)
 8003040:	f023 0301 	bic.w	r3, r3, #1
 8003044:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003048:	4b99      	ldr	r3, [pc, #612]	; (80032b0 <HAL_RCC_OscConfig+0x784>)
 800304a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800304e:	4a98      	ldr	r2, [pc, #608]	; (80032b0 <HAL_RCC_OscConfig+0x784>)
 8003050:	f023 0304 	bic.w	r3, r3, #4
 8003054:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d016      	beq.n	800308e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003060:	f7fe f83c 	bl	80010dc <HAL_GetTick>
 8003064:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003066:	e00a      	b.n	800307e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003068:	f7fe f838 	bl	80010dc <HAL_GetTick>
 800306c:	4602      	mov	r2, r0
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	1ad3      	subs	r3, r2, r3
 8003072:	f241 3288 	movw	r2, #5000	; 0x1388
 8003076:	4293      	cmp	r3, r2
 8003078:	d901      	bls.n	800307e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800307a:	2303      	movs	r3, #3
 800307c:	e168      	b.n	8003350 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800307e:	4b8c      	ldr	r3, [pc, #560]	; (80032b0 <HAL_RCC_OscConfig+0x784>)
 8003080:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003084:	f003 0302 	and.w	r3, r3, #2
 8003088:	2b00      	cmp	r3, #0
 800308a:	d0ed      	beq.n	8003068 <HAL_RCC_OscConfig+0x53c>
 800308c:	e015      	b.n	80030ba <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800308e:	f7fe f825 	bl	80010dc <HAL_GetTick>
 8003092:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003094:	e00a      	b.n	80030ac <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003096:	f7fe f821 	bl	80010dc <HAL_GetTick>
 800309a:	4602      	mov	r2, r0
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	1ad3      	subs	r3, r2, r3
 80030a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d901      	bls.n	80030ac <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80030a8:	2303      	movs	r3, #3
 80030aa:	e151      	b.n	8003350 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80030ac:	4b80      	ldr	r3, [pc, #512]	; (80032b0 <HAL_RCC_OscConfig+0x784>)
 80030ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030b2:	f003 0302 	and.w	r3, r3, #2
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d1ed      	bne.n	8003096 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030ba:	7ffb      	ldrb	r3, [r7, #31]
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d105      	bne.n	80030cc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030c0:	4b7b      	ldr	r3, [pc, #492]	; (80032b0 <HAL_RCC_OscConfig+0x784>)
 80030c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030c4:	4a7a      	ldr	r2, [pc, #488]	; (80032b0 <HAL_RCC_OscConfig+0x784>)
 80030c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030ca:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 0320 	and.w	r3, r3, #32
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d03c      	beq.n	8003152 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d01c      	beq.n	800311a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80030e0:	4b73      	ldr	r3, [pc, #460]	; (80032b0 <HAL_RCC_OscConfig+0x784>)
 80030e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80030e6:	4a72      	ldr	r2, [pc, #456]	; (80032b0 <HAL_RCC_OscConfig+0x784>)
 80030e8:	f043 0301 	orr.w	r3, r3, #1
 80030ec:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030f0:	f7fd fff4 	bl	80010dc <HAL_GetTick>
 80030f4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80030f6:	e008      	b.n	800310a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80030f8:	f7fd fff0 	bl	80010dc <HAL_GetTick>
 80030fc:	4602      	mov	r2, r0
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	2b02      	cmp	r3, #2
 8003104:	d901      	bls.n	800310a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003106:	2303      	movs	r3, #3
 8003108:	e122      	b.n	8003350 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800310a:	4b69      	ldr	r3, [pc, #420]	; (80032b0 <HAL_RCC_OscConfig+0x784>)
 800310c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003110:	f003 0302 	and.w	r3, r3, #2
 8003114:	2b00      	cmp	r3, #0
 8003116:	d0ef      	beq.n	80030f8 <HAL_RCC_OscConfig+0x5cc>
 8003118:	e01b      	b.n	8003152 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800311a:	4b65      	ldr	r3, [pc, #404]	; (80032b0 <HAL_RCC_OscConfig+0x784>)
 800311c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003120:	4a63      	ldr	r2, [pc, #396]	; (80032b0 <HAL_RCC_OscConfig+0x784>)
 8003122:	f023 0301 	bic.w	r3, r3, #1
 8003126:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800312a:	f7fd ffd7 	bl	80010dc <HAL_GetTick>
 800312e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003130:	e008      	b.n	8003144 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003132:	f7fd ffd3 	bl	80010dc <HAL_GetTick>
 8003136:	4602      	mov	r2, r0
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	1ad3      	subs	r3, r2, r3
 800313c:	2b02      	cmp	r3, #2
 800313e:	d901      	bls.n	8003144 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003140:	2303      	movs	r3, #3
 8003142:	e105      	b.n	8003350 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003144:	4b5a      	ldr	r3, [pc, #360]	; (80032b0 <HAL_RCC_OscConfig+0x784>)
 8003146:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800314a:	f003 0302 	and.w	r3, r3, #2
 800314e:	2b00      	cmp	r3, #0
 8003150:	d1ef      	bne.n	8003132 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003156:	2b00      	cmp	r3, #0
 8003158:	f000 80f9 	beq.w	800334e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003160:	2b02      	cmp	r3, #2
 8003162:	f040 80cf 	bne.w	8003304 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003166:	4b52      	ldr	r3, [pc, #328]	; (80032b0 <HAL_RCC_OscConfig+0x784>)
 8003168:	68db      	ldr	r3, [r3, #12]
 800316a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	f003 0203 	and.w	r2, r3, #3
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003176:	429a      	cmp	r2, r3
 8003178:	d12c      	bne.n	80031d4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003184:	3b01      	subs	r3, #1
 8003186:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003188:	429a      	cmp	r2, r3
 800318a:	d123      	bne.n	80031d4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003196:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003198:	429a      	cmp	r2, r3
 800319a:	d11b      	bne.n	80031d4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031a6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d113      	bne.n	80031d4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031b6:	085b      	lsrs	r3, r3, #1
 80031b8:	3b01      	subs	r3, #1
 80031ba:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80031bc:	429a      	cmp	r2, r3
 80031be:	d109      	bne.n	80031d4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ca:	085b      	lsrs	r3, r3, #1
 80031cc:	3b01      	subs	r3, #1
 80031ce:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80031d0:	429a      	cmp	r2, r3
 80031d2:	d071      	beq.n	80032b8 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80031d4:	69bb      	ldr	r3, [r7, #24]
 80031d6:	2b0c      	cmp	r3, #12
 80031d8:	d068      	beq.n	80032ac <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80031da:	4b35      	ldr	r3, [pc, #212]	; (80032b0 <HAL_RCC_OscConfig+0x784>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d105      	bne.n	80031f2 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80031e6:	4b32      	ldr	r3, [pc, #200]	; (80032b0 <HAL_RCC_OscConfig+0x784>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d001      	beq.n	80031f6 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e0ac      	b.n	8003350 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80031f6:	4b2e      	ldr	r3, [pc, #184]	; (80032b0 <HAL_RCC_OscConfig+0x784>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a2d      	ldr	r2, [pc, #180]	; (80032b0 <HAL_RCC_OscConfig+0x784>)
 80031fc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003200:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003202:	f7fd ff6b 	bl	80010dc <HAL_GetTick>
 8003206:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003208:	e008      	b.n	800321c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800320a:	f7fd ff67 	bl	80010dc <HAL_GetTick>
 800320e:	4602      	mov	r2, r0
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	1ad3      	subs	r3, r2, r3
 8003214:	2b02      	cmp	r3, #2
 8003216:	d901      	bls.n	800321c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8003218:	2303      	movs	r3, #3
 800321a:	e099      	b.n	8003350 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800321c:	4b24      	ldr	r3, [pc, #144]	; (80032b0 <HAL_RCC_OscConfig+0x784>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003224:	2b00      	cmp	r3, #0
 8003226:	d1f0      	bne.n	800320a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003228:	4b21      	ldr	r3, [pc, #132]	; (80032b0 <HAL_RCC_OscConfig+0x784>)
 800322a:	68da      	ldr	r2, [r3, #12]
 800322c:	4b21      	ldr	r3, [pc, #132]	; (80032b4 <HAL_RCC_OscConfig+0x788>)
 800322e:	4013      	ands	r3, r2
 8003230:	687a      	ldr	r2, [r7, #4]
 8003232:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003234:	687a      	ldr	r2, [r7, #4]
 8003236:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003238:	3a01      	subs	r2, #1
 800323a:	0112      	lsls	r2, r2, #4
 800323c:	4311      	orrs	r1, r2
 800323e:	687a      	ldr	r2, [r7, #4]
 8003240:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003242:	0212      	lsls	r2, r2, #8
 8003244:	4311      	orrs	r1, r2
 8003246:	687a      	ldr	r2, [r7, #4]
 8003248:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800324a:	0852      	lsrs	r2, r2, #1
 800324c:	3a01      	subs	r2, #1
 800324e:	0552      	lsls	r2, r2, #21
 8003250:	4311      	orrs	r1, r2
 8003252:	687a      	ldr	r2, [r7, #4]
 8003254:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003256:	0852      	lsrs	r2, r2, #1
 8003258:	3a01      	subs	r2, #1
 800325a:	0652      	lsls	r2, r2, #25
 800325c:	4311      	orrs	r1, r2
 800325e:	687a      	ldr	r2, [r7, #4]
 8003260:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003262:	06d2      	lsls	r2, r2, #27
 8003264:	430a      	orrs	r2, r1
 8003266:	4912      	ldr	r1, [pc, #72]	; (80032b0 <HAL_RCC_OscConfig+0x784>)
 8003268:	4313      	orrs	r3, r2
 800326a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800326c:	4b10      	ldr	r3, [pc, #64]	; (80032b0 <HAL_RCC_OscConfig+0x784>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a0f      	ldr	r2, [pc, #60]	; (80032b0 <HAL_RCC_OscConfig+0x784>)
 8003272:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003276:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003278:	4b0d      	ldr	r3, [pc, #52]	; (80032b0 <HAL_RCC_OscConfig+0x784>)
 800327a:	68db      	ldr	r3, [r3, #12]
 800327c:	4a0c      	ldr	r2, [pc, #48]	; (80032b0 <HAL_RCC_OscConfig+0x784>)
 800327e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003282:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003284:	f7fd ff2a 	bl	80010dc <HAL_GetTick>
 8003288:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800328a:	e008      	b.n	800329e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800328c:	f7fd ff26 	bl	80010dc <HAL_GetTick>
 8003290:	4602      	mov	r2, r0
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	2b02      	cmp	r3, #2
 8003298:	d901      	bls.n	800329e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800329a:	2303      	movs	r3, #3
 800329c:	e058      	b.n	8003350 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800329e:	4b04      	ldr	r3, [pc, #16]	; (80032b0 <HAL_RCC_OscConfig+0x784>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d0f0      	beq.n	800328c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80032aa:	e050      	b.n	800334e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	e04f      	b.n	8003350 <HAL_RCC_OscConfig+0x824>
 80032b0:	40021000 	.word	0x40021000
 80032b4:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032b8:	4b27      	ldr	r3, [pc, #156]	; (8003358 <HAL_RCC_OscConfig+0x82c>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d144      	bne.n	800334e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80032c4:	4b24      	ldr	r3, [pc, #144]	; (8003358 <HAL_RCC_OscConfig+0x82c>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a23      	ldr	r2, [pc, #140]	; (8003358 <HAL_RCC_OscConfig+0x82c>)
 80032ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032ce:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80032d0:	4b21      	ldr	r3, [pc, #132]	; (8003358 <HAL_RCC_OscConfig+0x82c>)
 80032d2:	68db      	ldr	r3, [r3, #12]
 80032d4:	4a20      	ldr	r2, [pc, #128]	; (8003358 <HAL_RCC_OscConfig+0x82c>)
 80032d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032da:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80032dc:	f7fd fefe 	bl	80010dc <HAL_GetTick>
 80032e0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032e2:	e008      	b.n	80032f6 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032e4:	f7fd fefa 	bl	80010dc <HAL_GetTick>
 80032e8:	4602      	mov	r2, r0
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	2b02      	cmp	r3, #2
 80032f0:	d901      	bls.n	80032f6 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80032f2:	2303      	movs	r3, #3
 80032f4:	e02c      	b.n	8003350 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032f6:	4b18      	ldr	r3, [pc, #96]	; (8003358 <HAL_RCC_OscConfig+0x82c>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d0f0      	beq.n	80032e4 <HAL_RCC_OscConfig+0x7b8>
 8003302:	e024      	b.n	800334e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003304:	69bb      	ldr	r3, [r7, #24]
 8003306:	2b0c      	cmp	r3, #12
 8003308:	d01f      	beq.n	800334a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800330a:	4b13      	ldr	r3, [pc, #76]	; (8003358 <HAL_RCC_OscConfig+0x82c>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a12      	ldr	r2, [pc, #72]	; (8003358 <HAL_RCC_OscConfig+0x82c>)
 8003310:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003314:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003316:	f7fd fee1 	bl	80010dc <HAL_GetTick>
 800331a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800331c:	e008      	b.n	8003330 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800331e:	f7fd fedd 	bl	80010dc <HAL_GetTick>
 8003322:	4602      	mov	r2, r0
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	1ad3      	subs	r3, r2, r3
 8003328:	2b02      	cmp	r3, #2
 800332a:	d901      	bls.n	8003330 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 800332c:	2303      	movs	r3, #3
 800332e:	e00f      	b.n	8003350 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003330:	4b09      	ldr	r3, [pc, #36]	; (8003358 <HAL_RCC_OscConfig+0x82c>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003338:	2b00      	cmp	r3, #0
 800333a:	d1f0      	bne.n	800331e <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800333c:	4b06      	ldr	r3, [pc, #24]	; (8003358 <HAL_RCC_OscConfig+0x82c>)
 800333e:	68da      	ldr	r2, [r3, #12]
 8003340:	4905      	ldr	r1, [pc, #20]	; (8003358 <HAL_RCC_OscConfig+0x82c>)
 8003342:	4b06      	ldr	r3, [pc, #24]	; (800335c <HAL_RCC_OscConfig+0x830>)
 8003344:	4013      	ands	r3, r2
 8003346:	60cb      	str	r3, [r1, #12]
 8003348:	e001      	b.n	800334e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	e000      	b.n	8003350 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800334e:	2300      	movs	r3, #0
}
 8003350:	4618      	mov	r0, r3
 8003352:	3720      	adds	r7, #32
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}
 8003358:	40021000 	.word	0x40021000
 800335c:	feeefffc 	.word	0xfeeefffc

08003360 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b084      	sub	sp, #16
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
 8003368:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d101      	bne.n	8003374 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	e0e7      	b.n	8003544 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003374:	4b75      	ldr	r3, [pc, #468]	; (800354c <HAL_RCC_ClockConfig+0x1ec>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 0307 	and.w	r3, r3, #7
 800337c:	683a      	ldr	r2, [r7, #0]
 800337e:	429a      	cmp	r2, r3
 8003380:	d910      	bls.n	80033a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003382:	4b72      	ldr	r3, [pc, #456]	; (800354c <HAL_RCC_ClockConfig+0x1ec>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f023 0207 	bic.w	r2, r3, #7
 800338a:	4970      	ldr	r1, [pc, #448]	; (800354c <HAL_RCC_ClockConfig+0x1ec>)
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	4313      	orrs	r3, r2
 8003390:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003392:	4b6e      	ldr	r3, [pc, #440]	; (800354c <HAL_RCC_ClockConfig+0x1ec>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 0307 	and.w	r3, r3, #7
 800339a:	683a      	ldr	r2, [r7, #0]
 800339c:	429a      	cmp	r2, r3
 800339e:	d001      	beq.n	80033a4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	e0cf      	b.n	8003544 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 0302 	and.w	r3, r3, #2
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d010      	beq.n	80033d2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	689a      	ldr	r2, [r3, #8]
 80033b4:	4b66      	ldr	r3, [pc, #408]	; (8003550 <HAL_RCC_ClockConfig+0x1f0>)
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033bc:	429a      	cmp	r2, r3
 80033be:	d908      	bls.n	80033d2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033c0:	4b63      	ldr	r3, [pc, #396]	; (8003550 <HAL_RCC_ClockConfig+0x1f0>)
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	4960      	ldr	r1, [pc, #384]	; (8003550 <HAL_RCC_ClockConfig+0x1f0>)
 80033ce:	4313      	orrs	r3, r2
 80033d0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 0301 	and.w	r3, r3, #1
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d04c      	beq.n	8003478 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	2b03      	cmp	r3, #3
 80033e4:	d107      	bne.n	80033f6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033e6:	4b5a      	ldr	r3, [pc, #360]	; (8003550 <HAL_RCC_ClockConfig+0x1f0>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d121      	bne.n	8003436 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e0a6      	b.n	8003544 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	2b02      	cmp	r3, #2
 80033fc:	d107      	bne.n	800340e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033fe:	4b54      	ldr	r3, [pc, #336]	; (8003550 <HAL_RCC_ClockConfig+0x1f0>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003406:	2b00      	cmp	r3, #0
 8003408:	d115      	bne.n	8003436 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e09a      	b.n	8003544 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d107      	bne.n	8003426 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003416:	4b4e      	ldr	r3, [pc, #312]	; (8003550 <HAL_RCC_ClockConfig+0x1f0>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 0302 	and.w	r3, r3, #2
 800341e:	2b00      	cmp	r3, #0
 8003420:	d109      	bne.n	8003436 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e08e      	b.n	8003544 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003426:	4b4a      	ldr	r3, [pc, #296]	; (8003550 <HAL_RCC_ClockConfig+0x1f0>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800342e:	2b00      	cmp	r3, #0
 8003430:	d101      	bne.n	8003436 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e086      	b.n	8003544 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003436:	4b46      	ldr	r3, [pc, #280]	; (8003550 <HAL_RCC_ClockConfig+0x1f0>)
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	f023 0203 	bic.w	r2, r3, #3
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	4943      	ldr	r1, [pc, #268]	; (8003550 <HAL_RCC_ClockConfig+0x1f0>)
 8003444:	4313      	orrs	r3, r2
 8003446:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003448:	f7fd fe48 	bl	80010dc <HAL_GetTick>
 800344c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800344e:	e00a      	b.n	8003466 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003450:	f7fd fe44 	bl	80010dc <HAL_GetTick>
 8003454:	4602      	mov	r2, r0
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	f241 3288 	movw	r2, #5000	; 0x1388
 800345e:	4293      	cmp	r3, r2
 8003460:	d901      	bls.n	8003466 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003462:	2303      	movs	r3, #3
 8003464:	e06e      	b.n	8003544 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003466:	4b3a      	ldr	r3, [pc, #232]	; (8003550 <HAL_RCC_ClockConfig+0x1f0>)
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	f003 020c 	and.w	r2, r3, #12
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	429a      	cmp	r2, r3
 8003476:	d1eb      	bne.n	8003450 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f003 0302 	and.w	r3, r3, #2
 8003480:	2b00      	cmp	r3, #0
 8003482:	d010      	beq.n	80034a6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	689a      	ldr	r2, [r3, #8]
 8003488:	4b31      	ldr	r3, [pc, #196]	; (8003550 <HAL_RCC_ClockConfig+0x1f0>)
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003490:	429a      	cmp	r2, r3
 8003492:	d208      	bcs.n	80034a6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003494:	4b2e      	ldr	r3, [pc, #184]	; (8003550 <HAL_RCC_ClockConfig+0x1f0>)
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	492b      	ldr	r1, [pc, #172]	; (8003550 <HAL_RCC_ClockConfig+0x1f0>)
 80034a2:	4313      	orrs	r3, r2
 80034a4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80034a6:	4b29      	ldr	r3, [pc, #164]	; (800354c <HAL_RCC_ClockConfig+0x1ec>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 0307 	and.w	r3, r3, #7
 80034ae:	683a      	ldr	r2, [r7, #0]
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d210      	bcs.n	80034d6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034b4:	4b25      	ldr	r3, [pc, #148]	; (800354c <HAL_RCC_ClockConfig+0x1ec>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f023 0207 	bic.w	r2, r3, #7
 80034bc:	4923      	ldr	r1, [pc, #140]	; (800354c <HAL_RCC_ClockConfig+0x1ec>)
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	4313      	orrs	r3, r2
 80034c2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034c4:	4b21      	ldr	r3, [pc, #132]	; (800354c <HAL_RCC_ClockConfig+0x1ec>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 0307 	and.w	r3, r3, #7
 80034cc:	683a      	ldr	r2, [r7, #0]
 80034ce:	429a      	cmp	r2, r3
 80034d0:	d001      	beq.n	80034d6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	e036      	b.n	8003544 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 0304 	and.w	r3, r3, #4
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d008      	beq.n	80034f4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034e2:	4b1b      	ldr	r3, [pc, #108]	; (8003550 <HAL_RCC_ClockConfig+0x1f0>)
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	68db      	ldr	r3, [r3, #12]
 80034ee:	4918      	ldr	r1, [pc, #96]	; (8003550 <HAL_RCC_ClockConfig+0x1f0>)
 80034f0:	4313      	orrs	r3, r2
 80034f2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 0308 	and.w	r3, r3, #8
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d009      	beq.n	8003514 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003500:	4b13      	ldr	r3, [pc, #76]	; (8003550 <HAL_RCC_ClockConfig+0x1f0>)
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	691b      	ldr	r3, [r3, #16]
 800350c:	00db      	lsls	r3, r3, #3
 800350e:	4910      	ldr	r1, [pc, #64]	; (8003550 <HAL_RCC_ClockConfig+0x1f0>)
 8003510:	4313      	orrs	r3, r2
 8003512:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003514:	f000 f824 	bl	8003560 <HAL_RCC_GetSysClockFreq>
 8003518:	4602      	mov	r2, r0
 800351a:	4b0d      	ldr	r3, [pc, #52]	; (8003550 <HAL_RCC_ClockConfig+0x1f0>)
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	091b      	lsrs	r3, r3, #4
 8003520:	f003 030f 	and.w	r3, r3, #15
 8003524:	490b      	ldr	r1, [pc, #44]	; (8003554 <HAL_RCC_ClockConfig+0x1f4>)
 8003526:	5ccb      	ldrb	r3, [r1, r3]
 8003528:	f003 031f 	and.w	r3, r3, #31
 800352c:	fa22 f303 	lsr.w	r3, r2, r3
 8003530:	4a09      	ldr	r2, [pc, #36]	; (8003558 <HAL_RCC_ClockConfig+0x1f8>)
 8003532:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003534:	4b09      	ldr	r3, [pc, #36]	; (800355c <HAL_RCC_ClockConfig+0x1fc>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4618      	mov	r0, r3
 800353a:	f7fd fd7f 	bl	800103c <HAL_InitTick>
 800353e:	4603      	mov	r3, r0
 8003540:	72fb      	strb	r3, [r7, #11]

  return status;
 8003542:	7afb      	ldrb	r3, [r7, #11]
}
 8003544:	4618      	mov	r0, r3
 8003546:	3710      	adds	r7, #16
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}
 800354c:	40022000 	.word	0x40022000
 8003550:	40021000 	.word	0x40021000
 8003554:	0800b8b0 	.word	0x0800b8b0
 8003558:	20000000 	.word	0x20000000
 800355c:	20000004 	.word	0x20000004

08003560 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003560:	b480      	push	{r7}
 8003562:	b089      	sub	sp, #36	; 0x24
 8003564:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003566:	2300      	movs	r3, #0
 8003568:	61fb      	str	r3, [r7, #28]
 800356a:	2300      	movs	r3, #0
 800356c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800356e:	4b3e      	ldr	r3, [pc, #248]	; (8003668 <HAL_RCC_GetSysClockFreq+0x108>)
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	f003 030c 	and.w	r3, r3, #12
 8003576:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003578:	4b3b      	ldr	r3, [pc, #236]	; (8003668 <HAL_RCC_GetSysClockFreq+0x108>)
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	f003 0303 	and.w	r3, r3, #3
 8003580:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d005      	beq.n	8003594 <HAL_RCC_GetSysClockFreq+0x34>
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	2b0c      	cmp	r3, #12
 800358c:	d121      	bne.n	80035d2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2b01      	cmp	r3, #1
 8003592:	d11e      	bne.n	80035d2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003594:	4b34      	ldr	r3, [pc, #208]	; (8003668 <HAL_RCC_GetSysClockFreq+0x108>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 0308 	and.w	r3, r3, #8
 800359c:	2b00      	cmp	r3, #0
 800359e:	d107      	bne.n	80035b0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80035a0:	4b31      	ldr	r3, [pc, #196]	; (8003668 <HAL_RCC_GetSysClockFreq+0x108>)
 80035a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035a6:	0a1b      	lsrs	r3, r3, #8
 80035a8:	f003 030f 	and.w	r3, r3, #15
 80035ac:	61fb      	str	r3, [r7, #28]
 80035ae:	e005      	b.n	80035bc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80035b0:	4b2d      	ldr	r3, [pc, #180]	; (8003668 <HAL_RCC_GetSysClockFreq+0x108>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	091b      	lsrs	r3, r3, #4
 80035b6:	f003 030f 	and.w	r3, r3, #15
 80035ba:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80035bc:	4a2b      	ldr	r2, [pc, #172]	; (800366c <HAL_RCC_GetSysClockFreq+0x10c>)
 80035be:	69fb      	ldr	r3, [r7, #28]
 80035c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035c4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d10d      	bne.n	80035e8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80035cc:	69fb      	ldr	r3, [r7, #28]
 80035ce:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80035d0:	e00a      	b.n	80035e8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	2b04      	cmp	r3, #4
 80035d6:	d102      	bne.n	80035de <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80035d8:	4b25      	ldr	r3, [pc, #148]	; (8003670 <HAL_RCC_GetSysClockFreq+0x110>)
 80035da:	61bb      	str	r3, [r7, #24]
 80035dc:	e004      	b.n	80035e8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	2b08      	cmp	r3, #8
 80035e2:	d101      	bne.n	80035e8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80035e4:	4b23      	ldr	r3, [pc, #140]	; (8003674 <HAL_RCC_GetSysClockFreq+0x114>)
 80035e6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	2b0c      	cmp	r3, #12
 80035ec:	d134      	bne.n	8003658 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80035ee:	4b1e      	ldr	r3, [pc, #120]	; (8003668 <HAL_RCC_GetSysClockFreq+0x108>)
 80035f0:	68db      	ldr	r3, [r3, #12]
 80035f2:	f003 0303 	and.w	r3, r3, #3
 80035f6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	2b02      	cmp	r3, #2
 80035fc:	d003      	beq.n	8003606 <HAL_RCC_GetSysClockFreq+0xa6>
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	2b03      	cmp	r3, #3
 8003602:	d003      	beq.n	800360c <HAL_RCC_GetSysClockFreq+0xac>
 8003604:	e005      	b.n	8003612 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003606:	4b1a      	ldr	r3, [pc, #104]	; (8003670 <HAL_RCC_GetSysClockFreq+0x110>)
 8003608:	617b      	str	r3, [r7, #20]
      break;
 800360a:	e005      	b.n	8003618 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800360c:	4b19      	ldr	r3, [pc, #100]	; (8003674 <HAL_RCC_GetSysClockFreq+0x114>)
 800360e:	617b      	str	r3, [r7, #20]
      break;
 8003610:	e002      	b.n	8003618 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003612:	69fb      	ldr	r3, [r7, #28]
 8003614:	617b      	str	r3, [r7, #20]
      break;
 8003616:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003618:	4b13      	ldr	r3, [pc, #76]	; (8003668 <HAL_RCC_GetSysClockFreq+0x108>)
 800361a:	68db      	ldr	r3, [r3, #12]
 800361c:	091b      	lsrs	r3, r3, #4
 800361e:	f003 0307 	and.w	r3, r3, #7
 8003622:	3301      	adds	r3, #1
 8003624:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003626:	4b10      	ldr	r3, [pc, #64]	; (8003668 <HAL_RCC_GetSysClockFreq+0x108>)
 8003628:	68db      	ldr	r3, [r3, #12]
 800362a:	0a1b      	lsrs	r3, r3, #8
 800362c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003630:	697a      	ldr	r2, [r7, #20]
 8003632:	fb03 f202 	mul.w	r2, r3, r2
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	fbb2 f3f3 	udiv	r3, r2, r3
 800363c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800363e:	4b0a      	ldr	r3, [pc, #40]	; (8003668 <HAL_RCC_GetSysClockFreq+0x108>)
 8003640:	68db      	ldr	r3, [r3, #12]
 8003642:	0e5b      	lsrs	r3, r3, #25
 8003644:	f003 0303 	and.w	r3, r3, #3
 8003648:	3301      	adds	r3, #1
 800364a:	005b      	lsls	r3, r3, #1
 800364c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800364e:	697a      	ldr	r2, [r7, #20]
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	fbb2 f3f3 	udiv	r3, r2, r3
 8003656:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003658:	69bb      	ldr	r3, [r7, #24]
}
 800365a:	4618      	mov	r0, r3
 800365c:	3724      	adds	r7, #36	; 0x24
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr
 8003666:	bf00      	nop
 8003668:	40021000 	.word	0x40021000
 800366c:	0800b8c8 	.word	0x0800b8c8
 8003670:	00f42400 	.word	0x00f42400
 8003674:	007a1200 	.word	0x007a1200

08003678 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003678:	b480      	push	{r7}
 800367a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800367c:	4b03      	ldr	r3, [pc, #12]	; (800368c <HAL_RCC_GetHCLKFreq+0x14>)
 800367e:	681b      	ldr	r3, [r3, #0]
}
 8003680:	4618      	mov	r0, r3
 8003682:	46bd      	mov	sp, r7
 8003684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003688:	4770      	bx	lr
 800368a:	bf00      	nop
 800368c:	20000000 	.word	0x20000000

08003690 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003694:	f7ff fff0 	bl	8003678 <HAL_RCC_GetHCLKFreq>
 8003698:	4602      	mov	r2, r0
 800369a:	4b06      	ldr	r3, [pc, #24]	; (80036b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	0a1b      	lsrs	r3, r3, #8
 80036a0:	f003 0307 	and.w	r3, r3, #7
 80036a4:	4904      	ldr	r1, [pc, #16]	; (80036b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80036a6:	5ccb      	ldrb	r3, [r1, r3]
 80036a8:	f003 031f 	and.w	r3, r3, #31
 80036ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	bd80      	pop	{r7, pc}
 80036b4:	40021000 	.word	0x40021000
 80036b8:	0800b8c0 	.word	0x0800b8c0

080036bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80036c0:	f7ff ffda 	bl	8003678 <HAL_RCC_GetHCLKFreq>
 80036c4:	4602      	mov	r2, r0
 80036c6:	4b06      	ldr	r3, [pc, #24]	; (80036e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	0adb      	lsrs	r3, r3, #11
 80036cc:	f003 0307 	and.w	r3, r3, #7
 80036d0:	4904      	ldr	r1, [pc, #16]	; (80036e4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80036d2:	5ccb      	ldrb	r3, [r1, r3]
 80036d4:	f003 031f 	and.w	r3, r3, #31
 80036d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036dc:	4618      	mov	r0, r3
 80036de:	bd80      	pop	{r7, pc}
 80036e0:	40021000 	.word	0x40021000
 80036e4:	0800b8c0 	.word	0x0800b8c0

080036e8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b086      	sub	sp, #24
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80036f0:	2300      	movs	r3, #0
 80036f2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80036f4:	4b2a      	ldr	r3, [pc, #168]	; (80037a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80036f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d003      	beq.n	8003708 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003700:	f7ff f990 	bl	8002a24 <HAL_PWREx_GetVoltageRange>
 8003704:	6178      	str	r0, [r7, #20]
 8003706:	e014      	b.n	8003732 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003708:	4b25      	ldr	r3, [pc, #148]	; (80037a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800370a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800370c:	4a24      	ldr	r2, [pc, #144]	; (80037a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800370e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003712:	6593      	str	r3, [r2, #88]	; 0x58
 8003714:	4b22      	ldr	r3, [pc, #136]	; (80037a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003716:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003718:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800371c:	60fb      	str	r3, [r7, #12]
 800371e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003720:	f7ff f980 	bl	8002a24 <HAL_PWREx_GetVoltageRange>
 8003724:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003726:	4b1e      	ldr	r3, [pc, #120]	; (80037a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003728:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800372a:	4a1d      	ldr	r2, [pc, #116]	; (80037a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800372c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003730:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003738:	d10b      	bne.n	8003752 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2b80      	cmp	r3, #128	; 0x80
 800373e:	d919      	bls.n	8003774 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2ba0      	cmp	r3, #160	; 0xa0
 8003744:	d902      	bls.n	800374c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003746:	2302      	movs	r3, #2
 8003748:	613b      	str	r3, [r7, #16]
 800374a:	e013      	b.n	8003774 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800374c:	2301      	movs	r3, #1
 800374e:	613b      	str	r3, [r7, #16]
 8003750:	e010      	b.n	8003774 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2b80      	cmp	r3, #128	; 0x80
 8003756:	d902      	bls.n	800375e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003758:	2303      	movs	r3, #3
 800375a:	613b      	str	r3, [r7, #16]
 800375c:	e00a      	b.n	8003774 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2b80      	cmp	r3, #128	; 0x80
 8003762:	d102      	bne.n	800376a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003764:	2302      	movs	r3, #2
 8003766:	613b      	str	r3, [r7, #16]
 8003768:	e004      	b.n	8003774 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2b70      	cmp	r3, #112	; 0x70
 800376e:	d101      	bne.n	8003774 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003770:	2301      	movs	r3, #1
 8003772:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003774:	4b0b      	ldr	r3, [pc, #44]	; (80037a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f023 0207 	bic.w	r2, r3, #7
 800377c:	4909      	ldr	r1, [pc, #36]	; (80037a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	4313      	orrs	r3, r2
 8003782:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003784:	4b07      	ldr	r3, [pc, #28]	; (80037a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f003 0307 	and.w	r3, r3, #7
 800378c:	693a      	ldr	r2, [r7, #16]
 800378e:	429a      	cmp	r2, r3
 8003790:	d001      	beq.n	8003796 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	e000      	b.n	8003798 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003796:	2300      	movs	r3, #0
}
 8003798:	4618      	mov	r0, r3
 800379a:	3718      	adds	r7, #24
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}
 80037a0:	40021000 	.word	0x40021000
 80037a4:	40022000 	.word	0x40022000

080037a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b086      	sub	sp, #24
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80037b0:	2300      	movs	r3, #0
 80037b2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80037b4:	2300      	movs	r3, #0
 80037b6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d041      	beq.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80037c8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80037cc:	d02a      	beq.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80037ce:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80037d2:	d824      	bhi.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80037d4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80037d8:	d008      	beq.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x44>
 80037da:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80037de:	d81e      	bhi.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d00a      	beq.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x52>
 80037e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037e8:	d010      	beq.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x64>
 80037ea:	e018      	b.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80037ec:	4b86      	ldr	r3, [pc, #536]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	4a85      	ldr	r2, [pc, #532]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037f6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80037f8:	e015      	b.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	3304      	adds	r3, #4
 80037fe:	2100      	movs	r1, #0
 8003800:	4618      	mov	r0, r3
 8003802:	f000 fadd 	bl	8003dc0 <RCCEx_PLLSAI1_Config>
 8003806:	4603      	mov	r3, r0
 8003808:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800380a:	e00c      	b.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	3320      	adds	r3, #32
 8003810:	2100      	movs	r1, #0
 8003812:	4618      	mov	r0, r3
 8003814:	f000 fbc6 	bl	8003fa4 <RCCEx_PLLSAI2_Config>
 8003818:	4603      	mov	r3, r0
 800381a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800381c:	e003      	b.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	74fb      	strb	r3, [r7, #19]
      break;
 8003822:	e000      	b.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003824:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003826:	7cfb      	ldrb	r3, [r7, #19]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d10b      	bne.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800382c:	4b76      	ldr	r3, [pc, #472]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800382e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003832:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800383a:	4973      	ldr	r1, [pc, #460]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800383c:	4313      	orrs	r3, r2
 800383e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003842:	e001      	b.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003844:	7cfb      	ldrb	r3, [r7, #19]
 8003846:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003850:	2b00      	cmp	r3, #0
 8003852:	d041      	beq.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003858:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800385c:	d02a      	beq.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800385e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003862:	d824      	bhi.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003864:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003868:	d008      	beq.n	800387c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800386a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800386e:	d81e      	bhi.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003870:	2b00      	cmp	r3, #0
 8003872:	d00a      	beq.n	800388a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003874:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003878:	d010      	beq.n	800389c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800387a:	e018      	b.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800387c:	4b62      	ldr	r3, [pc, #392]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800387e:	68db      	ldr	r3, [r3, #12]
 8003880:	4a61      	ldr	r2, [pc, #388]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003882:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003886:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003888:	e015      	b.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	3304      	adds	r3, #4
 800388e:	2100      	movs	r1, #0
 8003890:	4618      	mov	r0, r3
 8003892:	f000 fa95 	bl	8003dc0 <RCCEx_PLLSAI1_Config>
 8003896:	4603      	mov	r3, r0
 8003898:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800389a:	e00c      	b.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	3320      	adds	r3, #32
 80038a0:	2100      	movs	r1, #0
 80038a2:	4618      	mov	r0, r3
 80038a4:	f000 fb7e 	bl	8003fa4 <RCCEx_PLLSAI2_Config>
 80038a8:	4603      	mov	r3, r0
 80038aa:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80038ac:	e003      	b.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	74fb      	strb	r3, [r7, #19]
      break;
 80038b2:	e000      	b.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80038b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038b6:	7cfb      	ldrb	r3, [r7, #19]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d10b      	bne.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80038bc:	4b52      	ldr	r3, [pc, #328]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038c2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038ca:	494f      	ldr	r1, [pc, #316]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038cc:	4313      	orrs	r3, r2
 80038ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80038d2:	e001      	b.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038d4:	7cfb      	ldrb	r3, [r7, #19]
 80038d6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	f000 80a0 	beq.w	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038e6:	2300      	movs	r3, #0
 80038e8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80038ea:	4b47      	ldr	r3, [pc, #284]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d101      	bne.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x152>
 80038f6:	2301      	movs	r3, #1
 80038f8:	e000      	b.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0x154>
 80038fa:	2300      	movs	r3, #0
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d00d      	beq.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003900:	4b41      	ldr	r3, [pc, #260]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003902:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003904:	4a40      	ldr	r2, [pc, #256]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003906:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800390a:	6593      	str	r3, [r2, #88]	; 0x58
 800390c:	4b3e      	ldr	r3, [pc, #248]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800390e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003910:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003914:	60bb      	str	r3, [r7, #8]
 8003916:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003918:	2301      	movs	r3, #1
 800391a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800391c:	4b3b      	ldr	r3, [pc, #236]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a3a      	ldr	r2, [pc, #232]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003922:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003926:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003928:	f7fd fbd8 	bl	80010dc <HAL_GetTick>
 800392c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800392e:	e009      	b.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003930:	f7fd fbd4 	bl	80010dc <HAL_GetTick>
 8003934:	4602      	mov	r2, r0
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	1ad3      	subs	r3, r2, r3
 800393a:	2b02      	cmp	r3, #2
 800393c:	d902      	bls.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800393e:	2303      	movs	r3, #3
 8003940:	74fb      	strb	r3, [r7, #19]
        break;
 8003942:	e005      	b.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003944:	4b31      	ldr	r3, [pc, #196]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800394c:	2b00      	cmp	r3, #0
 800394e:	d0ef      	beq.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003950:	7cfb      	ldrb	r3, [r7, #19]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d15c      	bne.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003956:	4b2c      	ldr	r3, [pc, #176]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003958:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800395c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003960:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d01f      	beq.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800396e:	697a      	ldr	r2, [r7, #20]
 8003970:	429a      	cmp	r2, r3
 8003972:	d019      	beq.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003974:	4b24      	ldr	r3, [pc, #144]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003976:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800397a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800397e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003980:	4b21      	ldr	r3, [pc, #132]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003982:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003986:	4a20      	ldr	r2, [pc, #128]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003988:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800398c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003990:	4b1d      	ldr	r3, [pc, #116]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003992:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003996:	4a1c      	ldr	r2, [pc, #112]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003998:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800399c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80039a0:	4a19      	ldr	r2, [pc, #100]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	f003 0301 	and.w	r3, r3, #1
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d016      	beq.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039b2:	f7fd fb93 	bl	80010dc <HAL_GetTick>
 80039b6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039b8:	e00b      	b.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039ba:	f7fd fb8f 	bl	80010dc <HAL_GetTick>
 80039be:	4602      	mov	r2, r0
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	1ad3      	subs	r3, r2, r3
 80039c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d902      	bls.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80039cc:	2303      	movs	r3, #3
 80039ce:	74fb      	strb	r3, [r7, #19]
            break;
 80039d0:	e006      	b.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039d2:	4b0d      	ldr	r3, [pc, #52]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039d8:	f003 0302 	and.w	r3, r3, #2
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d0ec      	beq.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80039e0:	7cfb      	ldrb	r3, [r7, #19]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d10c      	bne.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80039e6:	4b08      	ldr	r3, [pc, #32]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039f6:	4904      	ldr	r1, [pc, #16]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039f8:	4313      	orrs	r3, r2
 80039fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80039fe:	e009      	b.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003a00:	7cfb      	ldrb	r3, [r7, #19]
 8003a02:	74bb      	strb	r3, [r7, #18]
 8003a04:	e006      	b.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003a06:	bf00      	nop
 8003a08:	40021000 	.word	0x40021000
 8003a0c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a10:	7cfb      	ldrb	r3, [r7, #19]
 8003a12:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a14:	7c7b      	ldrb	r3, [r7, #17]
 8003a16:	2b01      	cmp	r3, #1
 8003a18:	d105      	bne.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a1a:	4ba6      	ldr	r3, [pc, #664]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003a1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a1e:	4aa5      	ldr	r2, [pc, #660]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003a20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a24:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f003 0301 	and.w	r3, r3, #1
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d00a      	beq.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003a32:	4ba0      	ldr	r3, [pc, #640]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003a34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a38:	f023 0203 	bic.w	r2, r3, #3
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a40:	499c      	ldr	r1, [pc, #624]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003a42:	4313      	orrs	r3, r2
 8003a44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f003 0302 	and.w	r3, r3, #2
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d00a      	beq.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003a54:	4b97      	ldr	r3, [pc, #604]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a5a:	f023 020c 	bic.w	r2, r3, #12
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a62:	4994      	ldr	r1, [pc, #592]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003a64:	4313      	orrs	r3, r2
 8003a66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f003 0304 	and.w	r3, r3, #4
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d00a      	beq.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003a76:	4b8f      	ldr	r3, [pc, #572]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003a78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a7c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a84:	498b      	ldr	r1, [pc, #556]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003a86:	4313      	orrs	r3, r2
 8003a88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f003 0308 	and.w	r3, r3, #8
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d00a      	beq.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003a98:	4b86      	ldr	r3, [pc, #536]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a9e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aa6:	4983      	ldr	r1, [pc, #524]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f003 0310 	and.w	r3, r3, #16
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d00a      	beq.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003aba:	4b7e      	ldr	r3, [pc, #504]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003abc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ac0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ac8:	497a      	ldr	r1, [pc, #488]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003aca:	4313      	orrs	r3, r2
 8003acc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 0320 	and.w	r3, r3, #32
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d00a      	beq.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003adc:	4b75      	ldr	r3, [pc, #468]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ae2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003aea:	4972      	ldr	r1, [pc, #456]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003aec:	4313      	orrs	r3, r2
 8003aee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d00a      	beq.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003afe:	4b6d      	ldr	r3, [pc, #436]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003b00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b04:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b0c:	4969      	ldr	r1, [pc, #420]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d00a      	beq.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003b20:	4b64      	ldr	r3, [pc, #400]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b26:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b2e:	4961      	ldr	r1, [pc, #388]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003b30:	4313      	orrs	r3, r2
 8003b32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d00a      	beq.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003b42:	4b5c      	ldr	r3, [pc, #368]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003b44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b48:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b50:	4958      	ldr	r1, [pc, #352]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003b52:	4313      	orrs	r3, r2
 8003b54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d00a      	beq.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003b64:	4b53      	ldr	r3, [pc, #332]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003b66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b6a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b72:	4950      	ldr	r1, [pc, #320]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003b74:	4313      	orrs	r3, r2
 8003b76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d00a      	beq.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003b86:	4b4b      	ldr	r3, [pc, #300]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003b88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b8c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b94:	4947      	ldr	r1, [pc, #284]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003b96:	4313      	orrs	r3, r2
 8003b98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d00a      	beq.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003ba8:	4b42      	ldr	r3, [pc, #264]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003baa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003bae:	f023 0203 	bic.w	r2, r3, #3
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bb6:	493f      	ldr	r1, [pc, #252]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d028      	beq.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003bca:	4b3a      	ldr	r3, [pc, #232]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003bcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bd0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bd8:	4936      	ldr	r1, [pc, #216]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003be4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003be8:	d106      	bne.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003bea:	4b32      	ldr	r3, [pc, #200]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003bec:	68db      	ldr	r3, [r3, #12]
 8003bee:	4a31      	ldr	r2, [pc, #196]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003bf0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003bf4:	60d3      	str	r3, [r2, #12]
 8003bf6:	e011      	b.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bfc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003c00:	d10c      	bne.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	3304      	adds	r3, #4
 8003c06:	2101      	movs	r1, #1
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f000 f8d9 	bl	8003dc0 <RCCEx_PLLSAI1_Config>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003c12:	7cfb      	ldrb	r3, [r7, #19]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d001      	beq.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 8003c18:	7cfb      	ldrb	r3, [r7, #19]
 8003c1a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d028      	beq.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003c28:	4b22      	ldr	r3, [pc, #136]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c2e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c36:	491f      	ldr	r1, [pc, #124]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c42:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c46:	d106      	bne.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c48:	4b1a      	ldr	r3, [pc, #104]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003c4a:	68db      	ldr	r3, [r3, #12]
 8003c4c:	4a19      	ldr	r2, [pc, #100]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003c4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c52:	60d3      	str	r3, [r2, #12]
 8003c54:	e011      	b.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c5a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003c5e:	d10c      	bne.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	3304      	adds	r3, #4
 8003c64:	2101      	movs	r1, #1
 8003c66:	4618      	mov	r0, r3
 8003c68:	f000 f8aa 	bl	8003dc0 <RCCEx_PLLSAI1_Config>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c70:	7cfb      	ldrb	r3, [r7, #19]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d001      	beq.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 8003c76:	7cfb      	ldrb	r3, [r7, #19]
 8003c78:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d02a      	beq.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003c86:	4b0b      	ldr	r3, [pc, #44]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003c88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c8c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c94:	4907      	ldr	r1, [pc, #28]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003c96:	4313      	orrs	r3, r2
 8003c98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ca0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ca4:	d108      	bne.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ca6:	4b03      	ldr	r3, [pc, #12]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003ca8:	68db      	ldr	r3, [r3, #12]
 8003caa:	4a02      	ldr	r2, [pc, #8]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003cac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003cb0:	60d3      	str	r3, [r2, #12]
 8003cb2:	e013      	b.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x534>
 8003cb4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003cbc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003cc0:	d10c      	bne.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	3304      	adds	r3, #4
 8003cc6:	2101      	movs	r1, #1
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f000 f879 	bl	8003dc0 <RCCEx_PLLSAI1_Config>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003cd2:	7cfb      	ldrb	r3, [r7, #19]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d001      	beq.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8003cd8:	7cfb      	ldrb	r3, [r7, #19]
 8003cda:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d02f      	beq.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003ce8:	4b2c      	ldr	r3, [pc, #176]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cee:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003cf6:	4929      	ldr	r1, [pc, #164]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d02:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d06:	d10d      	bne.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	3304      	adds	r3, #4
 8003d0c:	2102      	movs	r1, #2
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f000 f856 	bl	8003dc0 <RCCEx_PLLSAI1_Config>
 8003d14:	4603      	mov	r3, r0
 8003d16:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003d18:	7cfb      	ldrb	r3, [r7, #19]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d014      	beq.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8003d1e:	7cfb      	ldrb	r3, [r7, #19]
 8003d20:	74bb      	strb	r3, [r7, #18]
 8003d22:	e011      	b.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d2c:	d10c      	bne.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	3320      	adds	r3, #32
 8003d32:	2102      	movs	r1, #2
 8003d34:	4618      	mov	r0, r3
 8003d36:	f000 f935 	bl	8003fa4 <RCCEx_PLLSAI2_Config>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003d3e:	7cfb      	ldrb	r3, [r7, #19]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d001      	beq.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8003d44:	7cfb      	ldrb	r3, [r7, #19]
 8003d46:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d00b      	beq.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003d54:	4b11      	ldr	r3, [pc, #68]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d5a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d64:	490d      	ldr	r1, [pc, #52]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003d66:	4313      	orrs	r3, r2
 8003d68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d00b      	beq.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003d78:	4b08      	ldr	r3, [pc, #32]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d7e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d88:	4904      	ldr	r1, [pc, #16]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003d90:	7cbb      	ldrb	r3, [r7, #18]
}
 8003d92:	4618      	mov	r0, r3
 8003d94:	3718      	adds	r7, #24
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}
 8003d9a:	bf00      	nop
 8003d9c:	40021000 	.word	0x40021000

08003da0 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003da0:	b480      	push	{r7}
 8003da2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003da4:	4b05      	ldr	r3, [pc, #20]	; (8003dbc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a04      	ldr	r2, [pc, #16]	; (8003dbc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003daa:	f043 0304 	orr.w	r3, r3, #4
 8003dae:	6013      	str	r3, [r2, #0]
}
 8003db0:	bf00      	nop
 8003db2:	46bd      	mov	sp, r7
 8003db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db8:	4770      	bx	lr
 8003dba:	bf00      	nop
 8003dbc:	40021000 	.word	0x40021000

08003dc0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b084      	sub	sp, #16
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
 8003dc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003dce:	4b74      	ldr	r3, [pc, #464]	; (8003fa0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003dd0:	68db      	ldr	r3, [r3, #12]
 8003dd2:	f003 0303 	and.w	r3, r3, #3
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d018      	beq.n	8003e0c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003dda:	4b71      	ldr	r3, [pc, #452]	; (8003fa0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ddc:	68db      	ldr	r3, [r3, #12]
 8003dde:	f003 0203 	and.w	r2, r3, #3
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	429a      	cmp	r2, r3
 8003de8:	d10d      	bne.n	8003e06 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
       ||
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d009      	beq.n	8003e06 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003df2:	4b6b      	ldr	r3, [pc, #428]	; (8003fa0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003df4:	68db      	ldr	r3, [r3, #12]
 8003df6:	091b      	lsrs	r3, r3, #4
 8003df8:	f003 0307 	and.w	r3, r3, #7
 8003dfc:	1c5a      	adds	r2, r3, #1
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	685b      	ldr	r3, [r3, #4]
       ||
 8003e02:	429a      	cmp	r2, r3
 8003e04:	d047      	beq.n	8003e96 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	73fb      	strb	r3, [r7, #15]
 8003e0a:	e044      	b.n	8003e96 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	2b03      	cmp	r3, #3
 8003e12:	d018      	beq.n	8003e46 <RCCEx_PLLSAI1_Config+0x86>
 8003e14:	2b03      	cmp	r3, #3
 8003e16:	d825      	bhi.n	8003e64 <RCCEx_PLLSAI1_Config+0xa4>
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	d002      	beq.n	8003e22 <RCCEx_PLLSAI1_Config+0x62>
 8003e1c:	2b02      	cmp	r3, #2
 8003e1e:	d009      	beq.n	8003e34 <RCCEx_PLLSAI1_Config+0x74>
 8003e20:	e020      	b.n	8003e64 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003e22:	4b5f      	ldr	r3, [pc, #380]	; (8003fa0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f003 0302 	and.w	r3, r3, #2
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d11d      	bne.n	8003e6a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e32:	e01a      	b.n	8003e6a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003e34:	4b5a      	ldr	r3, [pc, #360]	; (8003fa0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d116      	bne.n	8003e6e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003e40:	2301      	movs	r3, #1
 8003e42:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e44:	e013      	b.n	8003e6e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003e46:	4b56      	ldr	r3, [pc, #344]	; (8003fa0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d10f      	bne.n	8003e72 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003e52:	4b53      	ldr	r3, [pc, #332]	; (8003fa0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d109      	bne.n	8003e72 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003e62:	e006      	b.n	8003e72 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	73fb      	strb	r3, [r7, #15]
      break;
 8003e68:	e004      	b.n	8003e74 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003e6a:	bf00      	nop
 8003e6c:	e002      	b.n	8003e74 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003e6e:	bf00      	nop
 8003e70:	e000      	b.n	8003e74 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003e72:	bf00      	nop
    }

    if(status == HAL_OK)
 8003e74:	7bfb      	ldrb	r3, [r7, #15]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d10d      	bne.n	8003e96 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003e7a:	4b49      	ldr	r3, [pc, #292]	; (8003fa0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e7c:	68db      	ldr	r3, [r3, #12]
 8003e7e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6819      	ldr	r1, [r3, #0]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	3b01      	subs	r3, #1
 8003e8c:	011b      	lsls	r3, r3, #4
 8003e8e:	430b      	orrs	r3, r1
 8003e90:	4943      	ldr	r1, [pc, #268]	; (8003fa0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e92:	4313      	orrs	r3, r2
 8003e94:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003e96:	7bfb      	ldrb	r3, [r7, #15]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d17c      	bne.n	8003f96 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003e9c:	4b40      	ldr	r3, [pc, #256]	; (8003fa0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a3f      	ldr	r2, [pc, #252]	; (8003fa0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ea2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003ea6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ea8:	f7fd f918 	bl	80010dc <HAL_GetTick>
 8003eac:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003eae:	e009      	b.n	8003ec4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003eb0:	f7fd f914 	bl	80010dc <HAL_GetTick>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	1ad3      	subs	r3, r2, r3
 8003eba:	2b02      	cmp	r3, #2
 8003ebc:	d902      	bls.n	8003ec4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003ebe:	2303      	movs	r3, #3
 8003ec0:	73fb      	strb	r3, [r7, #15]
        break;
 8003ec2:	e005      	b.n	8003ed0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003ec4:	4b36      	ldr	r3, [pc, #216]	; (8003fa0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d1ef      	bne.n	8003eb0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003ed0:	7bfb      	ldrb	r3, [r7, #15]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d15f      	bne.n	8003f96 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d110      	bne.n	8003efe <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003edc:	4b30      	ldr	r3, [pc, #192]	; (8003fa0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ede:	691b      	ldr	r3, [r3, #16]
 8003ee0:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003ee4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003ee8:	687a      	ldr	r2, [r7, #4]
 8003eea:	6892      	ldr	r2, [r2, #8]
 8003eec:	0211      	lsls	r1, r2, #8
 8003eee:	687a      	ldr	r2, [r7, #4]
 8003ef0:	68d2      	ldr	r2, [r2, #12]
 8003ef2:	06d2      	lsls	r2, r2, #27
 8003ef4:	430a      	orrs	r2, r1
 8003ef6:	492a      	ldr	r1, [pc, #168]	; (8003fa0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	610b      	str	r3, [r1, #16]
 8003efc:	e027      	b.n	8003f4e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	d112      	bne.n	8003f2a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003f04:	4b26      	ldr	r3, [pc, #152]	; (8003fa0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f06:	691b      	ldr	r3, [r3, #16]
 8003f08:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003f0c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003f10:	687a      	ldr	r2, [r7, #4]
 8003f12:	6892      	ldr	r2, [r2, #8]
 8003f14:	0211      	lsls	r1, r2, #8
 8003f16:	687a      	ldr	r2, [r7, #4]
 8003f18:	6912      	ldr	r2, [r2, #16]
 8003f1a:	0852      	lsrs	r2, r2, #1
 8003f1c:	3a01      	subs	r2, #1
 8003f1e:	0552      	lsls	r2, r2, #21
 8003f20:	430a      	orrs	r2, r1
 8003f22:	491f      	ldr	r1, [pc, #124]	; (8003fa0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f24:	4313      	orrs	r3, r2
 8003f26:	610b      	str	r3, [r1, #16]
 8003f28:	e011      	b.n	8003f4e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003f2a:	4b1d      	ldr	r3, [pc, #116]	; (8003fa0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f2c:	691b      	ldr	r3, [r3, #16]
 8003f2e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003f32:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003f36:	687a      	ldr	r2, [r7, #4]
 8003f38:	6892      	ldr	r2, [r2, #8]
 8003f3a:	0211      	lsls	r1, r2, #8
 8003f3c:	687a      	ldr	r2, [r7, #4]
 8003f3e:	6952      	ldr	r2, [r2, #20]
 8003f40:	0852      	lsrs	r2, r2, #1
 8003f42:	3a01      	subs	r2, #1
 8003f44:	0652      	lsls	r2, r2, #25
 8003f46:	430a      	orrs	r2, r1
 8003f48:	4915      	ldr	r1, [pc, #84]	; (8003fa0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003f4e:	4b14      	ldr	r3, [pc, #80]	; (8003fa0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a13      	ldr	r2, [pc, #76]	; (8003fa0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f54:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003f58:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f5a:	f7fd f8bf 	bl	80010dc <HAL_GetTick>
 8003f5e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003f60:	e009      	b.n	8003f76 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003f62:	f7fd f8bb 	bl	80010dc <HAL_GetTick>
 8003f66:	4602      	mov	r2, r0
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	1ad3      	subs	r3, r2, r3
 8003f6c:	2b02      	cmp	r3, #2
 8003f6e:	d902      	bls.n	8003f76 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003f70:	2303      	movs	r3, #3
 8003f72:	73fb      	strb	r3, [r7, #15]
          break;
 8003f74:	e005      	b.n	8003f82 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003f76:	4b0a      	ldr	r3, [pc, #40]	; (8003fa0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d0ef      	beq.n	8003f62 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003f82:	7bfb      	ldrb	r3, [r7, #15]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d106      	bne.n	8003f96 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003f88:	4b05      	ldr	r3, [pc, #20]	; (8003fa0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f8a:	691a      	ldr	r2, [r3, #16]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	699b      	ldr	r3, [r3, #24]
 8003f90:	4903      	ldr	r1, [pc, #12]	; (8003fa0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f92:	4313      	orrs	r3, r2
 8003f94:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003f96:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	3710      	adds	r7, #16
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}
 8003fa0:	40021000 	.word	0x40021000

08003fa4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b084      	sub	sp, #16
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
 8003fac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003fb2:	4b69      	ldr	r3, [pc, #420]	; (8004158 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003fb4:	68db      	ldr	r3, [r3, #12]
 8003fb6:	f003 0303 	and.w	r3, r3, #3
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d018      	beq.n	8003ff0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003fbe:	4b66      	ldr	r3, [pc, #408]	; (8004158 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003fc0:	68db      	ldr	r3, [r3, #12]
 8003fc2:	f003 0203 	and.w	r2, r3, #3
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	429a      	cmp	r2, r3
 8003fcc:	d10d      	bne.n	8003fea <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
       ||
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d009      	beq.n	8003fea <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003fd6:	4b60      	ldr	r3, [pc, #384]	; (8004158 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003fd8:	68db      	ldr	r3, [r3, #12]
 8003fda:	091b      	lsrs	r3, r3, #4
 8003fdc:	f003 0307 	and.w	r3, r3, #7
 8003fe0:	1c5a      	adds	r2, r3, #1
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	685b      	ldr	r3, [r3, #4]
       ||
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	d047      	beq.n	800407a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	73fb      	strb	r3, [r7, #15]
 8003fee:	e044      	b.n	800407a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	2b03      	cmp	r3, #3
 8003ff6:	d018      	beq.n	800402a <RCCEx_PLLSAI2_Config+0x86>
 8003ff8:	2b03      	cmp	r3, #3
 8003ffa:	d825      	bhi.n	8004048 <RCCEx_PLLSAI2_Config+0xa4>
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	d002      	beq.n	8004006 <RCCEx_PLLSAI2_Config+0x62>
 8004000:	2b02      	cmp	r3, #2
 8004002:	d009      	beq.n	8004018 <RCCEx_PLLSAI2_Config+0x74>
 8004004:	e020      	b.n	8004048 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004006:	4b54      	ldr	r3, [pc, #336]	; (8004158 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f003 0302 	and.w	r3, r3, #2
 800400e:	2b00      	cmp	r3, #0
 8004010:	d11d      	bne.n	800404e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004016:	e01a      	b.n	800404e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004018:	4b4f      	ldr	r3, [pc, #316]	; (8004158 <RCCEx_PLLSAI2_Config+0x1b4>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004020:	2b00      	cmp	r3, #0
 8004022:	d116      	bne.n	8004052 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004024:	2301      	movs	r3, #1
 8004026:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004028:	e013      	b.n	8004052 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800402a:	4b4b      	ldr	r3, [pc, #300]	; (8004158 <RCCEx_PLLSAI2_Config+0x1b4>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004032:	2b00      	cmp	r3, #0
 8004034:	d10f      	bne.n	8004056 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004036:	4b48      	ldr	r3, [pc, #288]	; (8004158 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800403e:	2b00      	cmp	r3, #0
 8004040:	d109      	bne.n	8004056 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004046:	e006      	b.n	8004056 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004048:	2301      	movs	r3, #1
 800404a:	73fb      	strb	r3, [r7, #15]
      break;
 800404c:	e004      	b.n	8004058 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800404e:	bf00      	nop
 8004050:	e002      	b.n	8004058 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004052:	bf00      	nop
 8004054:	e000      	b.n	8004058 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004056:	bf00      	nop
    }

    if(status == HAL_OK)
 8004058:	7bfb      	ldrb	r3, [r7, #15]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d10d      	bne.n	800407a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800405e:	4b3e      	ldr	r3, [pc, #248]	; (8004158 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004060:	68db      	ldr	r3, [r3, #12]
 8004062:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6819      	ldr	r1, [r3, #0]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	3b01      	subs	r3, #1
 8004070:	011b      	lsls	r3, r3, #4
 8004072:	430b      	orrs	r3, r1
 8004074:	4938      	ldr	r1, [pc, #224]	; (8004158 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004076:	4313      	orrs	r3, r2
 8004078:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800407a:	7bfb      	ldrb	r3, [r7, #15]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d166      	bne.n	800414e <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004080:	4b35      	ldr	r3, [pc, #212]	; (8004158 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a34      	ldr	r2, [pc, #208]	; (8004158 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004086:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800408a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800408c:	f7fd f826 	bl	80010dc <HAL_GetTick>
 8004090:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004092:	e009      	b.n	80040a8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004094:	f7fd f822 	bl	80010dc <HAL_GetTick>
 8004098:	4602      	mov	r2, r0
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	1ad3      	subs	r3, r2, r3
 800409e:	2b02      	cmp	r3, #2
 80040a0:	d902      	bls.n	80040a8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80040a2:	2303      	movs	r3, #3
 80040a4:	73fb      	strb	r3, [r7, #15]
        break;
 80040a6:	e005      	b.n	80040b4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80040a8:	4b2b      	ldr	r3, [pc, #172]	; (8004158 <RCCEx_PLLSAI2_Config+0x1b4>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d1ef      	bne.n	8004094 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80040b4:	7bfb      	ldrb	r3, [r7, #15]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d149      	bne.n	800414e <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d110      	bne.n	80040e2 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80040c0:	4b25      	ldr	r3, [pc, #148]	; (8004158 <RCCEx_PLLSAI2_Config+0x1b4>)
 80040c2:	695b      	ldr	r3, [r3, #20]
 80040c4:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80040c8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80040cc:	687a      	ldr	r2, [r7, #4]
 80040ce:	6892      	ldr	r2, [r2, #8]
 80040d0:	0211      	lsls	r1, r2, #8
 80040d2:	687a      	ldr	r2, [r7, #4]
 80040d4:	68d2      	ldr	r2, [r2, #12]
 80040d6:	06d2      	lsls	r2, r2, #27
 80040d8:	430a      	orrs	r2, r1
 80040da:	491f      	ldr	r1, [pc, #124]	; (8004158 <RCCEx_PLLSAI2_Config+0x1b4>)
 80040dc:	4313      	orrs	r3, r2
 80040de:	614b      	str	r3, [r1, #20]
 80040e0:	e011      	b.n	8004106 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80040e2:	4b1d      	ldr	r3, [pc, #116]	; (8004158 <RCCEx_PLLSAI2_Config+0x1b4>)
 80040e4:	695b      	ldr	r3, [r3, #20]
 80040e6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80040ea:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80040ee:	687a      	ldr	r2, [r7, #4]
 80040f0:	6892      	ldr	r2, [r2, #8]
 80040f2:	0211      	lsls	r1, r2, #8
 80040f4:	687a      	ldr	r2, [r7, #4]
 80040f6:	6912      	ldr	r2, [r2, #16]
 80040f8:	0852      	lsrs	r2, r2, #1
 80040fa:	3a01      	subs	r2, #1
 80040fc:	0652      	lsls	r2, r2, #25
 80040fe:	430a      	orrs	r2, r1
 8004100:	4915      	ldr	r1, [pc, #84]	; (8004158 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004102:	4313      	orrs	r3, r2
 8004104:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004106:	4b14      	ldr	r3, [pc, #80]	; (8004158 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a13      	ldr	r2, [pc, #76]	; (8004158 <RCCEx_PLLSAI2_Config+0x1b4>)
 800410c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004110:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004112:	f7fc ffe3 	bl	80010dc <HAL_GetTick>
 8004116:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004118:	e009      	b.n	800412e <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800411a:	f7fc ffdf 	bl	80010dc <HAL_GetTick>
 800411e:	4602      	mov	r2, r0
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	1ad3      	subs	r3, r2, r3
 8004124:	2b02      	cmp	r3, #2
 8004126:	d902      	bls.n	800412e <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8004128:	2303      	movs	r3, #3
 800412a:	73fb      	strb	r3, [r7, #15]
          break;
 800412c:	e005      	b.n	800413a <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800412e:	4b0a      	ldr	r3, [pc, #40]	; (8004158 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004136:	2b00      	cmp	r3, #0
 8004138:	d0ef      	beq.n	800411a <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 800413a:	7bfb      	ldrb	r3, [r7, #15]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d106      	bne.n	800414e <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004140:	4b05      	ldr	r3, [pc, #20]	; (8004158 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004142:	695a      	ldr	r2, [r3, #20]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	695b      	ldr	r3, [r3, #20]
 8004148:	4903      	ldr	r1, [pc, #12]	; (8004158 <RCCEx_PLLSAI2_Config+0x1b4>)
 800414a:	4313      	orrs	r3, r2
 800414c:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800414e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004150:	4618      	mov	r0, r3
 8004152:	3710      	adds	r7, #16
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}
 8004158:	40021000 	.word	0x40021000

0800415c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b082      	sub	sp, #8
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d101      	bne.n	800416e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	e049      	b.n	8004202 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004174:	b2db      	uxtb	r3, r3
 8004176:	2b00      	cmp	r3, #0
 8004178:	d106      	bne.n	8004188 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2200      	movs	r2, #0
 800417e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004182:	6878      	ldr	r0, [r7, #4]
 8004184:	f7fc feba 	bl	8000efc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2202      	movs	r2, #2
 800418c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681a      	ldr	r2, [r3, #0]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	3304      	adds	r3, #4
 8004198:	4619      	mov	r1, r3
 800419a:	4610      	mov	r0, r2
 800419c:	f000 f968 	bl	8004470 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2201      	movs	r2, #1
 80041a4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2201      	movs	r2, #1
 80041ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2201      	movs	r2, #1
 80041b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2201      	movs	r2, #1
 80041bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2201      	movs	r2, #1
 80041c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2201      	movs	r2, #1
 80041cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2201      	movs	r2, #1
 80041d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2201      	movs	r2, #1
 80041dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2201      	movs	r2, #1
 80041e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2201      	movs	r2, #1
 80041ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2201      	movs	r2, #1
 80041f4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2201      	movs	r2, #1
 80041fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004200:	2300      	movs	r3, #0
}
 8004202:	4618      	mov	r0, r3
 8004204:	3708      	adds	r7, #8
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}
	...

0800420c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800420c:	b480      	push	{r7}
 800420e:	b085      	sub	sp, #20
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800421a:	b2db      	uxtb	r3, r3
 800421c:	2b01      	cmp	r3, #1
 800421e:	d001      	beq.n	8004224 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004220:	2301      	movs	r3, #1
 8004222:	e047      	b.n	80042b4 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2202      	movs	r2, #2
 8004228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a23      	ldr	r2, [pc, #140]	; (80042c0 <HAL_TIM_Base_Start+0xb4>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d01d      	beq.n	8004272 <HAL_TIM_Base_Start+0x66>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800423e:	d018      	beq.n	8004272 <HAL_TIM_Base_Start+0x66>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a1f      	ldr	r2, [pc, #124]	; (80042c4 <HAL_TIM_Base_Start+0xb8>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d013      	beq.n	8004272 <HAL_TIM_Base_Start+0x66>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a1e      	ldr	r2, [pc, #120]	; (80042c8 <HAL_TIM_Base_Start+0xbc>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d00e      	beq.n	8004272 <HAL_TIM_Base_Start+0x66>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a1c      	ldr	r2, [pc, #112]	; (80042cc <HAL_TIM_Base_Start+0xc0>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d009      	beq.n	8004272 <HAL_TIM_Base_Start+0x66>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a1b      	ldr	r2, [pc, #108]	; (80042d0 <HAL_TIM_Base_Start+0xc4>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d004      	beq.n	8004272 <HAL_TIM_Base_Start+0x66>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a19      	ldr	r2, [pc, #100]	; (80042d4 <HAL_TIM_Base_Start+0xc8>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d115      	bne.n	800429e <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	689a      	ldr	r2, [r3, #8]
 8004278:	4b17      	ldr	r3, [pc, #92]	; (80042d8 <HAL_TIM_Base_Start+0xcc>)
 800427a:	4013      	ands	r3, r2
 800427c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2b06      	cmp	r3, #6
 8004282:	d015      	beq.n	80042b0 <HAL_TIM_Base_Start+0xa4>
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800428a:	d011      	beq.n	80042b0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	681a      	ldr	r2, [r3, #0]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f042 0201 	orr.w	r2, r2, #1
 800429a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800429c:	e008      	b.n	80042b0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	681a      	ldr	r2, [r3, #0]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f042 0201 	orr.w	r2, r2, #1
 80042ac:	601a      	str	r2, [r3, #0]
 80042ae:	e000      	b.n	80042b2 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042b0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80042b2:	2300      	movs	r3, #0
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	3714      	adds	r7, #20
 80042b8:	46bd      	mov	sp, r7
 80042ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042be:	4770      	bx	lr
 80042c0:	40012c00 	.word	0x40012c00
 80042c4:	40000400 	.word	0x40000400
 80042c8:	40000800 	.word	0x40000800
 80042cc:	40000c00 	.word	0x40000c00
 80042d0:	40013400 	.word	0x40013400
 80042d4:	40014000 	.word	0x40014000
 80042d8:	00010007 	.word	0x00010007

080042dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b084      	sub	sp, #16
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
 80042e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80042e6:	2300      	movs	r3, #0
 80042e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d101      	bne.n	80042f8 <HAL_TIM_ConfigClockSource+0x1c>
 80042f4:	2302      	movs	r3, #2
 80042f6:	e0b6      	b.n	8004466 <HAL_TIM_ConfigClockSource+0x18a>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2201      	movs	r2, #1
 80042fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2202      	movs	r2, #2
 8004304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004316:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800431a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004322:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	68ba      	ldr	r2, [r7, #8]
 800432a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004334:	d03e      	beq.n	80043b4 <HAL_TIM_ConfigClockSource+0xd8>
 8004336:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800433a:	f200 8087 	bhi.w	800444c <HAL_TIM_ConfigClockSource+0x170>
 800433e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004342:	f000 8086 	beq.w	8004452 <HAL_TIM_ConfigClockSource+0x176>
 8004346:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800434a:	d87f      	bhi.n	800444c <HAL_TIM_ConfigClockSource+0x170>
 800434c:	2b70      	cmp	r3, #112	; 0x70
 800434e:	d01a      	beq.n	8004386 <HAL_TIM_ConfigClockSource+0xaa>
 8004350:	2b70      	cmp	r3, #112	; 0x70
 8004352:	d87b      	bhi.n	800444c <HAL_TIM_ConfigClockSource+0x170>
 8004354:	2b60      	cmp	r3, #96	; 0x60
 8004356:	d050      	beq.n	80043fa <HAL_TIM_ConfigClockSource+0x11e>
 8004358:	2b60      	cmp	r3, #96	; 0x60
 800435a:	d877      	bhi.n	800444c <HAL_TIM_ConfigClockSource+0x170>
 800435c:	2b50      	cmp	r3, #80	; 0x50
 800435e:	d03c      	beq.n	80043da <HAL_TIM_ConfigClockSource+0xfe>
 8004360:	2b50      	cmp	r3, #80	; 0x50
 8004362:	d873      	bhi.n	800444c <HAL_TIM_ConfigClockSource+0x170>
 8004364:	2b40      	cmp	r3, #64	; 0x40
 8004366:	d058      	beq.n	800441a <HAL_TIM_ConfigClockSource+0x13e>
 8004368:	2b40      	cmp	r3, #64	; 0x40
 800436a:	d86f      	bhi.n	800444c <HAL_TIM_ConfigClockSource+0x170>
 800436c:	2b30      	cmp	r3, #48	; 0x30
 800436e:	d064      	beq.n	800443a <HAL_TIM_ConfigClockSource+0x15e>
 8004370:	2b30      	cmp	r3, #48	; 0x30
 8004372:	d86b      	bhi.n	800444c <HAL_TIM_ConfigClockSource+0x170>
 8004374:	2b20      	cmp	r3, #32
 8004376:	d060      	beq.n	800443a <HAL_TIM_ConfigClockSource+0x15e>
 8004378:	2b20      	cmp	r3, #32
 800437a:	d867      	bhi.n	800444c <HAL_TIM_ConfigClockSource+0x170>
 800437c:	2b00      	cmp	r3, #0
 800437e:	d05c      	beq.n	800443a <HAL_TIM_ConfigClockSource+0x15e>
 8004380:	2b10      	cmp	r3, #16
 8004382:	d05a      	beq.n	800443a <HAL_TIM_ConfigClockSource+0x15e>
 8004384:	e062      	b.n	800444c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004396:	f000 f97f 	bl	8004698 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	689b      	ldr	r3, [r3, #8]
 80043a0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80043a8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	68ba      	ldr	r2, [r7, #8]
 80043b0:	609a      	str	r2, [r3, #8]
      break;
 80043b2:	e04f      	b.n	8004454 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80043c4:	f000 f968 	bl	8004698 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	689a      	ldr	r2, [r3, #8]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80043d6:	609a      	str	r2, [r3, #8]
      break;
 80043d8:	e03c      	b.n	8004454 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043e6:	461a      	mov	r2, r3
 80043e8:	f000 f8dc 	bl	80045a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	2150      	movs	r1, #80	; 0x50
 80043f2:	4618      	mov	r0, r3
 80043f4:	f000 f935 	bl	8004662 <TIM_ITRx_SetConfig>
      break;
 80043f8:	e02c      	b.n	8004454 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004406:	461a      	mov	r2, r3
 8004408:	f000 f8fb 	bl	8004602 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	2160      	movs	r1, #96	; 0x60
 8004412:	4618      	mov	r0, r3
 8004414:	f000 f925 	bl	8004662 <TIM_ITRx_SetConfig>
      break;
 8004418:	e01c      	b.n	8004454 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004426:	461a      	mov	r2, r3
 8004428:	f000 f8bc 	bl	80045a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	2140      	movs	r1, #64	; 0x40
 8004432:	4618      	mov	r0, r3
 8004434:	f000 f915 	bl	8004662 <TIM_ITRx_SetConfig>
      break;
 8004438:	e00c      	b.n	8004454 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681a      	ldr	r2, [r3, #0]
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4619      	mov	r1, r3
 8004444:	4610      	mov	r0, r2
 8004446:	f000 f90c 	bl	8004662 <TIM_ITRx_SetConfig>
      break;
 800444a:	e003      	b.n	8004454 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800444c:	2301      	movs	r3, #1
 800444e:	73fb      	strb	r3, [r7, #15]
      break;
 8004450:	e000      	b.n	8004454 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004452:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2201      	movs	r2, #1
 8004458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2200      	movs	r2, #0
 8004460:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004464:	7bfb      	ldrb	r3, [r7, #15]
}
 8004466:	4618      	mov	r0, r3
 8004468:	3710      	adds	r7, #16
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}
	...

08004470 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004470:	b480      	push	{r7}
 8004472:	b085      	sub	sp, #20
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
 8004478:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	4a40      	ldr	r2, [pc, #256]	; (8004584 <TIM_Base_SetConfig+0x114>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d013      	beq.n	80044b0 <TIM_Base_SetConfig+0x40>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800448e:	d00f      	beq.n	80044b0 <TIM_Base_SetConfig+0x40>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	4a3d      	ldr	r2, [pc, #244]	; (8004588 <TIM_Base_SetConfig+0x118>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d00b      	beq.n	80044b0 <TIM_Base_SetConfig+0x40>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	4a3c      	ldr	r2, [pc, #240]	; (800458c <TIM_Base_SetConfig+0x11c>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d007      	beq.n	80044b0 <TIM_Base_SetConfig+0x40>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	4a3b      	ldr	r2, [pc, #236]	; (8004590 <TIM_Base_SetConfig+0x120>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d003      	beq.n	80044b0 <TIM_Base_SetConfig+0x40>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	4a3a      	ldr	r2, [pc, #232]	; (8004594 <TIM_Base_SetConfig+0x124>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d108      	bne.n	80044c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	68fa      	ldr	r2, [r7, #12]
 80044be:	4313      	orrs	r3, r2
 80044c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	4a2f      	ldr	r2, [pc, #188]	; (8004584 <TIM_Base_SetConfig+0x114>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d01f      	beq.n	800450a <TIM_Base_SetConfig+0x9a>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044d0:	d01b      	beq.n	800450a <TIM_Base_SetConfig+0x9a>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	4a2c      	ldr	r2, [pc, #176]	; (8004588 <TIM_Base_SetConfig+0x118>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d017      	beq.n	800450a <TIM_Base_SetConfig+0x9a>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	4a2b      	ldr	r2, [pc, #172]	; (800458c <TIM_Base_SetConfig+0x11c>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d013      	beq.n	800450a <TIM_Base_SetConfig+0x9a>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	4a2a      	ldr	r2, [pc, #168]	; (8004590 <TIM_Base_SetConfig+0x120>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d00f      	beq.n	800450a <TIM_Base_SetConfig+0x9a>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	4a29      	ldr	r2, [pc, #164]	; (8004594 <TIM_Base_SetConfig+0x124>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d00b      	beq.n	800450a <TIM_Base_SetConfig+0x9a>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	4a28      	ldr	r2, [pc, #160]	; (8004598 <TIM_Base_SetConfig+0x128>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d007      	beq.n	800450a <TIM_Base_SetConfig+0x9a>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	4a27      	ldr	r2, [pc, #156]	; (800459c <TIM_Base_SetConfig+0x12c>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d003      	beq.n	800450a <TIM_Base_SetConfig+0x9a>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	4a26      	ldr	r2, [pc, #152]	; (80045a0 <TIM_Base_SetConfig+0x130>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d108      	bne.n	800451c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004510:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	68db      	ldr	r3, [r3, #12]
 8004516:	68fa      	ldr	r2, [r7, #12]
 8004518:	4313      	orrs	r3, r2
 800451a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	695b      	ldr	r3, [r3, #20]
 8004526:	4313      	orrs	r3, r2
 8004528:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	68fa      	ldr	r2, [r7, #12]
 800452e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	689a      	ldr	r2, [r3, #8]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	4a10      	ldr	r2, [pc, #64]	; (8004584 <TIM_Base_SetConfig+0x114>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d00f      	beq.n	8004568 <TIM_Base_SetConfig+0xf8>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	4a12      	ldr	r2, [pc, #72]	; (8004594 <TIM_Base_SetConfig+0x124>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d00b      	beq.n	8004568 <TIM_Base_SetConfig+0xf8>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	4a11      	ldr	r2, [pc, #68]	; (8004598 <TIM_Base_SetConfig+0x128>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d007      	beq.n	8004568 <TIM_Base_SetConfig+0xf8>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	4a10      	ldr	r2, [pc, #64]	; (800459c <TIM_Base_SetConfig+0x12c>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d003      	beq.n	8004568 <TIM_Base_SetConfig+0xf8>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	4a0f      	ldr	r2, [pc, #60]	; (80045a0 <TIM_Base_SetConfig+0x130>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d103      	bne.n	8004570 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	691a      	ldr	r2, [r3, #16]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2201      	movs	r2, #1
 8004574:	615a      	str	r2, [r3, #20]
}
 8004576:	bf00      	nop
 8004578:	3714      	adds	r7, #20
 800457a:	46bd      	mov	sp, r7
 800457c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004580:	4770      	bx	lr
 8004582:	bf00      	nop
 8004584:	40012c00 	.word	0x40012c00
 8004588:	40000400 	.word	0x40000400
 800458c:	40000800 	.word	0x40000800
 8004590:	40000c00 	.word	0x40000c00
 8004594:	40013400 	.word	0x40013400
 8004598:	40014000 	.word	0x40014000
 800459c:	40014400 	.word	0x40014400
 80045a0:	40014800 	.word	0x40014800

080045a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b087      	sub	sp, #28
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	60f8      	str	r0, [r7, #12]
 80045ac:	60b9      	str	r1, [r7, #8]
 80045ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	6a1b      	ldr	r3, [r3, #32]
 80045b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	6a1b      	ldr	r3, [r3, #32]
 80045ba:	f023 0201 	bic.w	r2, r3, #1
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	699b      	ldr	r3, [r3, #24]
 80045c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80045ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	011b      	lsls	r3, r3, #4
 80045d4:	693a      	ldr	r2, [r7, #16]
 80045d6:	4313      	orrs	r3, r2
 80045d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	f023 030a 	bic.w	r3, r3, #10
 80045e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80045e2:	697a      	ldr	r2, [r7, #20]
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	4313      	orrs	r3, r2
 80045e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	693a      	ldr	r2, [r7, #16]
 80045ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	697a      	ldr	r2, [r7, #20]
 80045f4:	621a      	str	r2, [r3, #32]
}
 80045f6:	bf00      	nop
 80045f8:	371c      	adds	r7, #28
 80045fa:	46bd      	mov	sp, r7
 80045fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004600:	4770      	bx	lr

08004602 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004602:	b480      	push	{r7}
 8004604:	b087      	sub	sp, #28
 8004606:	af00      	add	r7, sp, #0
 8004608:	60f8      	str	r0, [r7, #12]
 800460a:	60b9      	str	r1, [r7, #8]
 800460c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	6a1b      	ldr	r3, [r3, #32]
 8004612:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	6a1b      	ldr	r3, [r3, #32]
 8004618:	f023 0210 	bic.w	r2, r3, #16
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	699b      	ldr	r3, [r3, #24]
 8004624:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800462c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	031b      	lsls	r3, r3, #12
 8004632:	693a      	ldr	r2, [r7, #16]
 8004634:	4313      	orrs	r3, r2
 8004636:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800463e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	011b      	lsls	r3, r3, #4
 8004644:	697a      	ldr	r2, [r7, #20]
 8004646:	4313      	orrs	r3, r2
 8004648:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	693a      	ldr	r2, [r7, #16]
 800464e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	697a      	ldr	r2, [r7, #20]
 8004654:	621a      	str	r2, [r3, #32]
}
 8004656:	bf00      	nop
 8004658:	371c      	adds	r7, #28
 800465a:	46bd      	mov	sp, r7
 800465c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004660:	4770      	bx	lr

08004662 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004662:	b480      	push	{r7}
 8004664:	b085      	sub	sp, #20
 8004666:	af00      	add	r7, sp, #0
 8004668:	6078      	str	r0, [r7, #4]
 800466a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004678:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800467a:	683a      	ldr	r2, [r7, #0]
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	4313      	orrs	r3, r2
 8004680:	f043 0307 	orr.w	r3, r3, #7
 8004684:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	68fa      	ldr	r2, [r7, #12]
 800468a:	609a      	str	r2, [r3, #8]
}
 800468c:	bf00      	nop
 800468e:	3714      	adds	r7, #20
 8004690:	46bd      	mov	sp, r7
 8004692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004696:	4770      	bx	lr

08004698 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004698:	b480      	push	{r7}
 800469a:	b087      	sub	sp, #28
 800469c:	af00      	add	r7, sp, #0
 800469e:	60f8      	str	r0, [r7, #12]
 80046a0:	60b9      	str	r1, [r7, #8]
 80046a2:	607a      	str	r2, [r7, #4]
 80046a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80046b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	021a      	lsls	r2, r3, #8
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	431a      	orrs	r2, r3
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	4313      	orrs	r3, r2
 80046c0:	697a      	ldr	r2, [r7, #20]
 80046c2:	4313      	orrs	r3, r2
 80046c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	697a      	ldr	r2, [r7, #20]
 80046ca:	609a      	str	r2, [r3, #8]
}
 80046cc:	bf00      	nop
 80046ce:	371c      	adds	r7, #28
 80046d0:	46bd      	mov	sp, r7
 80046d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d6:	4770      	bx	lr

080046d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80046d8:	b480      	push	{r7}
 80046da:	b085      	sub	sp, #20
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
 80046e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	d101      	bne.n	80046f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80046ec:	2302      	movs	r3, #2
 80046ee:	e068      	b.n	80047c2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2201      	movs	r2, #1
 80046f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2202      	movs	r2, #2
 80046fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a2e      	ldr	r2, [pc, #184]	; (80047d0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d004      	beq.n	8004724 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a2d      	ldr	r2, [pc, #180]	; (80047d4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d108      	bne.n	8004736 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800472a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	68fa      	ldr	r2, [r7, #12]
 8004732:	4313      	orrs	r3, r2
 8004734:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800473c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	68fa      	ldr	r2, [r7, #12]
 8004744:	4313      	orrs	r3, r2
 8004746:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	68fa      	ldr	r2, [r7, #12]
 800474e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a1e      	ldr	r2, [pc, #120]	; (80047d0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d01d      	beq.n	8004796 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004762:	d018      	beq.n	8004796 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a1b      	ldr	r2, [pc, #108]	; (80047d8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d013      	beq.n	8004796 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a1a      	ldr	r2, [pc, #104]	; (80047dc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d00e      	beq.n	8004796 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a18      	ldr	r2, [pc, #96]	; (80047e0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d009      	beq.n	8004796 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a13      	ldr	r2, [pc, #76]	; (80047d4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d004      	beq.n	8004796 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a14      	ldr	r2, [pc, #80]	; (80047e4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d10c      	bne.n	80047b0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800479c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	689b      	ldr	r3, [r3, #8]
 80047a2:	68ba      	ldr	r2, [r7, #8]
 80047a4:	4313      	orrs	r3, r2
 80047a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	68ba      	ldr	r2, [r7, #8]
 80047ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2201      	movs	r2, #1
 80047b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2200      	movs	r2, #0
 80047bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80047c0:	2300      	movs	r3, #0
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	3714      	adds	r7, #20
 80047c6:	46bd      	mov	sp, r7
 80047c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047cc:	4770      	bx	lr
 80047ce:	bf00      	nop
 80047d0:	40012c00 	.word	0x40012c00
 80047d4:	40013400 	.word	0x40013400
 80047d8:	40000400 	.word	0x40000400
 80047dc:	40000800 	.word	0x40000800
 80047e0:	40000c00 	.word	0x40000c00
 80047e4:	40014000 	.word	0x40014000

080047e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b082      	sub	sp, #8
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d101      	bne.n	80047fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	e040      	b.n	800487c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d106      	bne.n	8004810 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2200      	movs	r2, #0
 8004806:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	f7fc fb16 	bl	8000e3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2224      	movs	r2, #36	; 0x24
 8004814:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	681a      	ldr	r2, [r3, #0]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f022 0201 	bic.w	r2, r2, #1
 8004824:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800482a:	2b00      	cmp	r3, #0
 800482c:	d002      	beq.n	8004834 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	f000 fae0 	bl	8004df4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004834:	6878      	ldr	r0, [r7, #4]
 8004836:	f000 f825 	bl	8004884 <UART_SetConfig>
 800483a:	4603      	mov	r3, r0
 800483c:	2b01      	cmp	r3, #1
 800483e:	d101      	bne.n	8004844 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004840:	2301      	movs	r3, #1
 8004842:	e01b      	b.n	800487c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	685a      	ldr	r2, [r3, #4]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004852:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	689a      	ldr	r2, [r3, #8]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004862:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	681a      	ldr	r2, [r3, #0]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f042 0201 	orr.w	r2, r2, #1
 8004872:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004874:	6878      	ldr	r0, [r7, #4]
 8004876:	f000 fb5f 	bl	8004f38 <UART_CheckIdleState>
 800487a:	4603      	mov	r3, r0
}
 800487c:	4618      	mov	r0, r3
 800487e:	3708      	adds	r7, #8
 8004880:	46bd      	mov	sp, r7
 8004882:	bd80      	pop	{r7, pc}

08004884 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004884:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004888:	b08a      	sub	sp, #40	; 0x28
 800488a:	af00      	add	r7, sp, #0
 800488c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800488e:	2300      	movs	r3, #0
 8004890:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	689a      	ldr	r2, [r3, #8]
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	691b      	ldr	r3, [r3, #16]
 800489c:	431a      	orrs	r2, r3
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	695b      	ldr	r3, [r3, #20]
 80048a2:	431a      	orrs	r2, r3
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	69db      	ldr	r3, [r3, #28]
 80048a8:	4313      	orrs	r3, r2
 80048aa:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	681a      	ldr	r2, [r3, #0]
 80048b2:	4ba4      	ldr	r3, [pc, #656]	; (8004b44 <UART_SetConfig+0x2c0>)
 80048b4:	4013      	ands	r3, r2
 80048b6:	68fa      	ldr	r2, [r7, #12]
 80048b8:	6812      	ldr	r2, [r2, #0]
 80048ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80048bc:	430b      	orrs	r3, r1
 80048be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	68da      	ldr	r2, [r3, #12]
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	430a      	orrs	r2, r1
 80048d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	699b      	ldr	r3, [r3, #24]
 80048da:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a99      	ldr	r2, [pc, #612]	; (8004b48 <UART_SetConfig+0x2c4>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d004      	beq.n	80048f0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	6a1b      	ldr	r3, [r3, #32]
 80048ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048ec:	4313      	orrs	r3, r2
 80048ee:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	689b      	ldr	r3, [r3, #8]
 80048f6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004900:	430a      	orrs	r2, r1
 8004902:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a90      	ldr	r2, [pc, #576]	; (8004b4c <UART_SetConfig+0x2c8>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d126      	bne.n	800495c <UART_SetConfig+0xd8>
 800490e:	4b90      	ldr	r3, [pc, #576]	; (8004b50 <UART_SetConfig+0x2cc>)
 8004910:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004914:	f003 0303 	and.w	r3, r3, #3
 8004918:	2b03      	cmp	r3, #3
 800491a:	d81b      	bhi.n	8004954 <UART_SetConfig+0xd0>
 800491c:	a201      	add	r2, pc, #4	; (adr r2, 8004924 <UART_SetConfig+0xa0>)
 800491e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004922:	bf00      	nop
 8004924:	08004935 	.word	0x08004935
 8004928:	08004945 	.word	0x08004945
 800492c:	0800493d 	.word	0x0800493d
 8004930:	0800494d 	.word	0x0800494d
 8004934:	2301      	movs	r3, #1
 8004936:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800493a:	e116      	b.n	8004b6a <UART_SetConfig+0x2e6>
 800493c:	2302      	movs	r3, #2
 800493e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004942:	e112      	b.n	8004b6a <UART_SetConfig+0x2e6>
 8004944:	2304      	movs	r3, #4
 8004946:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800494a:	e10e      	b.n	8004b6a <UART_SetConfig+0x2e6>
 800494c:	2308      	movs	r3, #8
 800494e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004952:	e10a      	b.n	8004b6a <UART_SetConfig+0x2e6>
 8004954:	2310      	movs	r3, #16
 8004956:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800495a:	e106      	b.n	8004b6a <UART_SetConfig+0x2e6>
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a7c      	ldr	r2, [pc, #496]	; (8004b54 <UART_SetConfig+0x2d0>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d138      	bne.n	80049d8 <UART_SetConfig+0x154>
 8004966:	4b7a      	ldr	r3, [pc, #488]	; (8004b50 <UART_SetConfig+0x2cc>)
 8004968:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800496c:	f003 030c 	and.w	r3, r3, #12
 8004970:	2b0c      	cmp	r3, #12
 8004972:	d82d      	bhi.n	80049d0 <UART_SetConfig+0x14c>
 8004974:	a201      	add	r2, pc, #4	; (adr r2, 800497c <UART_SetConfig+0xf8>)
 8004976:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800497a:	bf00      	nop
 800497c:	080049b1 	.word	0x080049b1
 8004980:	080049d1 	.word	0x080049d1
 8004984:	080049d1 	.word	0x080049d1
 8004988:	080049d1 	.word	0x080049d1
 800498c:	080049c1 	.word	0x080049c1
 8004990:	080049d1 	.word	0x080049d1
 8004994:	080049d1 	.word	0x080049d1
 8004998:	080049d1 	.word	0x080049d1
 800499c:	080049b9 	.word	0x080049b9
 80049a0:	080049d1 	.word	0x080049d1
 80049a4:	080049d1 	.word	0x080049d1
 80049a8:	080049d1 	.word	0x080049d1
 80049ac:	080049c9 	.word	0x080049c9
 80049b0:	2300      	movs	r3, #0
 80049b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049b6:	e0d8      	b.n	8004b6a <UART_SetConfig+0x2e6>
 80049b8:	2302      	movs	r3, #2
 80049ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049be:	e0d4      	b.n	8004b6a <UART_SetConfig+0x2e6>
 80049c0:	2304      	movs	r3, #4
 80049c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049c6:	e0d0      	b.n	8004b6a <UART_SetConfig+0x2e6>
 80049c8:	2308      	movs	r3, #8
 80049ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049ce:	e0cc      	b.n	8004b6a <UART_SetConfig+0x2e6>
 80049d0:	2310      	movs	r3, #16
 80049d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049d6:	e0c8      	b.n	8004b6a <UART_SetConfig+0x2e6>
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a5e      	ldr	r2, [pc, #376]	; (8004b58 <UART_SetConfig+0x2d4>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d125      	bne.n	8004a2e <UART_SetConfig+0x1aa>
 80049e2:	4b5b      	ldr	r3, [pc, #364]	; (8004b50 <UART_SetConfig+0x2cc>)
 80049e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049e8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80049ec:	2b30      	cmp	r3, #48	; 0x30
 80049ee:	d016      	beq.n	8004a1e <UART_SetConfig+0x19a>
 80049f0:	2b30      	cmp	r3, #48	; 0x30
 80049f2:	d818      	bhi.n	8004a26 <UART_SetConfig+0x1a2>
 80049f4:	2b20      	cmp	r3, #32
 80049f6:	d00a      	beq.n	8004a0e <UART_SetConfig+0x18a>
 80049f8:	2b20      	cmp	r3, #32
 80049fa:	d814      	bhi.n	8004a26 <UART_SetConfig+0x1a2>
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d002      	beq.n	8004a06 <UART_SetConfig+0x182>
 8004a00:	2b10      	cmp	r3, #16
 8004a02:	d008      	beq.n	8004a16 <UART_SetConfig+0x192>
 8004a04:	e00f      	b.n	8004a26 <UART_SetConfig+0x1a2>
 8004a06:	2300      	movs	r3, #0
 8004a08:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a0c:	e0ad      	b.n	8004b6a <UART_SetConfig+0x2e6>
 8004a0e:	2302      	movs	r3, #2
 8004a10:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a14:	e0a9      	b.n	8004b6a <UART_SetConfig+0x2e6>
 8004a16:	2304      	movs	r3, #4
 8004a18:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a1c:	e0a5      	b.n	8004b6a <UART_SetConfig+0x2e6>
 8004a1e:	2308      	movs	r3, #8
 8004a20:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a24:	e0a1      	b.n	8004b6a <UART_SetConfig+0x2e6>
 8004a26:	2310      	movs	r3, #16
 8004a28:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a2c:	e09d      	b.n	8004b6a <UART_SetConfig+0x2e6>
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a4a      	ldr	r2, [pc, #296]	; (8004b5c <UART_SetConfig+0x2d8>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d125      	bne.n	8004a84 <UART_SetConfig+0x200>
 8004a38:	4b45      	ldr	r3, [pc, #276]	; (8004b50 <UART_SetConfig+0x2cc>)
 8004a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a3e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004a42:	2bc0      	cmp	r3, #192	; 0xc0
 8004a44:	d016      	beq.n	8004a74 <UART_SetConfig+0x1f0>
 8004a46:	2bc0      	cmp	r3, #192	; 0xc0
 8004a48:	d818      	bhi.n	8004a7c <UART_SetConfig+0x1f8>
 8004a4a:	2b80      	cmp	r3, #128	; 0x80
 8004a4c:	d00a      	beq.n	8004a64 <UART_SetConfig+0x1e0>
 8004a4e:	2b80      	cmp	r3, #128	; 0x80
 8004a50:	d814      	bhi.n	8004a7c <UART_SetConfig+0x1f8>
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d002      	beq.n	8004a5c <UART_SetConfig+0x1d8>
 8004a56:	2b40      	cmp	r3, #64	; 0x40
 8004a58:	d008      	beq.n	8004a6c <UART_SetConfig+0x1e8>
 8004a5a:	e00f      	b.n	8004a7c <UART_SetConfig+0x1f8>
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a62:	e082      	b.n	8004b6a <UART_SetConfig+0x2e6>
 8004a64:	2302      	movs	r3, #2
 8004a66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a6a:	e07e      	b.n	8004b6a <UART_SetConfig+0x2e6>
 8004a6c:	2304      	movs	r3, #4
 8004a6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a72:	e07a      	b.n	8004b6a <UART_SetConfig+0x2e6>
 8004a74:	2308      	movs	r3, #8
 8004a76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a7a:	e076      	b.n	8004b6a <UART_SetConfig+0x2e6>
 8004a7c:	2310      	movs	r3, #16
 8004a7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a82:	e072      	b.n	8004b6a <UART_SetConfig+0x2e6>
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a35      	ldr	r2, [pc, #212]	; (8004b60 <UART_SetConfig+0x2dc>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d12a      	bne.n	8004ae4 <UART_SetConfig+0x260>
 8004a8e:	4b30      	ldr	r3, [pc, #192]	; (8004b50 <UART_SetConfig+0x2cc>)
 8004a90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a98:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a9c:	d01a      	beq.n	8004ad4 <UART_SetConfig+0x250>
 8004a9e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004aa2:	d81b      	bhi.n	8004adc <UART_SetConfig+0x258>
 8004aa4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004aa8:	d00c      	beq.n	8004ac4 <UART_SetConfig+0x240>
 8004aaa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004aae:	d815      	bhi.n	8004adc <UART_SetConfig+0x258>
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d003      	beq.n	8004abc <UART_SetConfig+0x238>
 8004ab4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ab8:	d008      	beq.n	8004acc <UART_SetConfig+0x248>
 8004aba:	e00f      	b.n	8004adc <UART_SetConfig+0x258>
 8004abc:	2300      	movs	r3, #0
 8004abe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ac2:	e052      	b.n	8004b6a <UART_SetConfig+0x2e6>
 8004ac4:	2302      	movs	r3, #2
 8004ac6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004aca:	e04e      	b.n	8004b6a <UART_SetConfig+0x2e6>
 8004acc:	2304      	movs	r3, #4
 8004ace:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ad2:	e04a      	b.n	8004b6a <UART_SetConfig+0x2e6>
 8004ad4:	2308      	movs	r3, #8
 8004ad6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ada:	e046      	b.n	8004b6a <UART_SetConfig+0x2e6>
 8004adc:	2310      	movs	r3, #16
 8004ade:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ae2:	e042      	b.n	8004b6a <UART_SetConfig+0x2e6>
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a17      	ldr	r2, [pc, #92]	; (8004b48 <UART_SetConfig+0x2c4>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d13a      	bne.n	8004b64 <UART_SetConfig+0x2e0>
 8004aee:	4b18      	ldr	r3, [pc, #96]	; (8004b50 <UART_SetConfig+0x2cc>)
 8004af0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004af4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004af8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004afc:	d01a      	beq.n	8004b34 <UART_SetConfig+0x2b0>
 8004afe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004b02:	d81b      	bhi.n	8004b3c <UART_SetConfig+0x2b8>
 8004b04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b08:	d00c      	beq.n	8004b24 <UART_SetConfig+0x2a0>
 8004b0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b0e:	d815      	bhi.n	8004b3c <UART_SetConfig+0x2b8>
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d003      	beq.n	8004b1c <UART_SetConfig+0x298>
 8004b14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b18:	d008      	beq.n	8004b2c <UART_SetConfig+0x2a8>
 8004b1a:	e00f      	b.n	8004b3c <UART_SetConfig+0x2b8>
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b22:	e022      	b.n	8004b6a <UART_SetConfig+0x2e6>
 8004b24:	2302      	movs	r3, #2
 8004b26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b2a:	e01e      	b.n	8004b6a <UART_SetConfig+0x2e6>
 8004b2c:	2304      	movs	r3, #4
 8004b2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b32:	e01a      	b.n	8004b6a <UART_SetConfig+0x2e6>
 8004b34:	2308      	movs	r3, #8
 8004b36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b3a:	e016      	b.n	8004b6a <UART_SetConfig+0x2e6>
 8004b3c:	2310      	movs	r3, #16
 8004b3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b42:	e012      	b.n	8004b6a <UART_SetConfig+0x2e6>
 8004b44:	efff69f3 	.word	0xefff69f3
 8004b48:	40008000 	.word	0x40008000
 8004b4c:	40013800 	.word	0x40013800
 8004b50:	40021000 	.word	0x40021000
 8004b54:	40004400 	.word	0x40004400
 8004b58:	40004800 	.word	0x40004800
 8004b5c:	40004c00 	.word	0x40004c00
 8004b60:	40005000 	.word	0x40005000
 8004b64:	2310      	movs	r3, #16
 8004b66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a9f      	ldr	r2, [pc, #636]	; (8004dec <UART_SetConfig+0x568>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d17a      	bne.n	8004c6a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004b74:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004b78:	2b08      	cmp	r3, #8
 8004b7a:	d824      	bhi.n	8004bc6 <UART_SetConfig+0x342>
 8004b7c:	a201      	add	r2, pc, #4	; (adr r2, 8004b84 <UART_SetConfig+0x300>)
 8004b7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b82:	bf00      	nop
 8004b84:	08004ba9 	.word	0x08004ba9
 8004b88:	08004bc7 	.word	0x08004bc7
 8004b8c:	08004bb1 	.word	0x08004bb1
 8004b90:	08004bc7 	.word	0x08004bc7
 8004b94:	08004bb7 	.word	0x08004bb7
 8004b98:	08004bc7 	.word	0x08004bc7
 8004b9c:	08004bc7 	.word	0x08004bc7
 8004ba0:	08004bc7 	.word	0x08004bc7
 8004ba4:	08004bbf 	.word	0x08004bbf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ba8:	f7fe fd72 	bl	8003690 <HAL_RCC_GetPCLK1Freq>
 8004bac:	61f8      	str	r0, [r7, #28]
        break;
 8004bae:	e010      	b.n	8004bd2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004bb0:	4b8f      	ldr	r3, [pc, #572]	; (8004df0 <UART_SetConfig+0x56c>)
 8004bb2:	61fb      	str	r3, [r7, #28]
        break;
 8004bb4:	e00d      	b.n	8004bd2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004bb6:	f7fe fcd3 	bl	8003560 <HAL_RCC_GetSysClockFreq>
 8004bba:	61f8      	str	r0, [r7, #28]
        break;
 8004bbc:	e009      	b.n	8004bd2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004bbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004bc2:	61fb      	str	r3, [r7, #28]
        break;
 8004bc4:	e005      	b.n	8004bd2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004bd0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004bd2:	69fb      	ldr	r3, [r7, #28]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	f000 80fb 	beq.w	8004dd0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	685a      	ldr	r2, [r3, #4]
 8004bde:	4613      	mov	r3, r2
 8004be0:	005b      	lsls	r3, r3, #1
 8004be2:	4413      	add	r3, r2
 8004be4:	69fa      	ldr	r2, [r7, #28]
 8004be6:	429a      	cmp	r2, r3
 8004be8:	d305      	bcc.n	8004bf6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004bf0:	69fa      	ldr	r2, [r7, #28]
 8004bf2:	429a      	cmp	r2, r3
 8004bf4:	d903      	bls.n	8004bfe <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004bfc:	e0e8      	b.n	8004dd0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004bfe:	69fb      	ldr	r3, [r7, #28]
 8004c00:	2200      	movs	r2, #0
 8004c02:	461c      	mov	r4, r3
 8004c04:	4615      	mov	r5, r2
 8004c06:	f04f 0200 	mov.w	r2, #0
 8004c0a:	f04f 0300 	mov.w	r3, #0
 8004c0e:	022b      	lsls	r3, r5, #8
 8004c10:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004c14:	0222      	lsls	r2, r4, #8
 8004c16:	68f9      	ldr	r1, [r7, #12]
 8004c18:	6849      	ldr	r1, [r1, #4]
 8004c1a:	0849      	lsrs	r1, r1, #1
 8004c1c:	2000      	movs	r0, #0
 8004c1e:	4688      	mov	r8, r1
 8004c20:	4681      	mov	r9, r0
 8004c22:	eb12 0a08 	adds.w	sl, r2, r8
 8004c26:	eb43 0b09 	adc.w	fp, r3, r9
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	603b      	str	r3, [r7, #0]
 8004c32:	607a      	str	r2, [r7, #4]
 8004c34:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c38:	4650      	mov	r0, sl
 8004c3a:	4659      	mov	r1, fp
 8004c3c:	f7fb fad8 	bl	80001f0 <__aeabi_uldivmod>
 8004c40:	4602      	mov	r2, r0
 8004c42:	460b      	mov	r3, r1
 8004c44:	4613      	mov	r3, r2
 8004c46:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004c48:	69bb      	ldr	r3, [r7, #24]
 8004c4a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c4e:	d308      	bcc.n	8004c62 <UART_SetConfig+0x3de>
 8004c50:	69bb      	ldr	r3, [r7, #24]
 8004c52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c56:	d204      	bcs.n	8004c62 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	69ba      	ldr	r2, [r7, #24]
 8004c5e:	60da      	str	r2, [r3, #12]
 8004c60:	e0b6      	b.n	8004dd0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004c62:	2301      	movs	r3, #1
 8004c64:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004c68:	e0b2      	b.n	8004dd0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	69db      	ldr	r3, [r3, #28]
 8004c6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c72:	d15e      	bne.n	8004d32 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004c74:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004c78:	2b08      	cmp	r3, #8
 8004c7a:	d828      	bhi.n	8004cce <UART_SetConfig+0x44a>
 8004c7c:	a201      	add	r2, pc, #4	; (adr r2, 8004c84 <UART_SetConfig+0x400>)
 8004c7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c82:	bf00      	nop
 8004c84:	08004ca9 	.word	0x08004ca9
 8004c88:	08004cb1 	.word	0x08004cb1
 8004c8c:	08004cb9 	.word	0x08004cb9
 8004c90:	08004ccf 	.word	0x08004ccf
 8004c94:	08004cbf 	.word	0x08004cbf
 8004c98:	08004ccf 	.word	0x08004ccf
 8004c9c:	08004ccf 	.word	0x08004ccf
 8004ca0:	08004ccf 	.word	0x08004ccf
 8004ca4:	08004cc7 	.word	0x08004cc7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ca8:	f7fe fcf2 	bl	8003690 <HAL_RCC_GetPCLK1Freq>
 8004cac:	61f8      	str	r0, [r7, #28]
        break;
 8004cae:	e014      	b.n	8004cda <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004cb0:	f7fe fd04 	bl	80036bc <HAL_RCC_GetPCLK2Freq>
 8004cb4:	61f8      	str	r0, [r7, #28]
        break;
 8004cb6:	e010      	b.n	8004cda <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004cb8:	4b4d      	ldr	r3, [pc, #308]	; (8004df0 <UART_SetConfig+0x56c>)
 8004cba:	61fb      	str	r3, [r7, #28]
        break;
 8004cbc:	e00d      	b.n	8004cda <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004cbe:	f7fe fc4f 	bl	8003560 <HAL_RCC_GetSysClockFreq>
 8004cc2:	61f8      	str	r0, [r7, #28]
        break;
 8004cc4:	e009      	b.n	8004cda <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004cc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004cca:	61fb      	str	r3, [r7, #28]
        break;
 8004ccc:	e005      	b.n	8004cda <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004cd8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004cda:	69fb      	ldr	r3, [r7, #28]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d077      	beq.n	8004dd0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004ce0:	69fb      	ldr	r3, [r7, #28]
 8004ce2:	005a      	lsls	r2, r3, #1
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	085b      	lsrs	r3, r3, #1
 8004cea:	441a      	add	r2, r3
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cf4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004cf6:	69bb      	ldr	r3, [r7, #24]
 8004cf8:	2b0f      	cmp	r3, #15
 8004cfa:	d916      	bls.n	8004d2a <UART_SetConfig+0x4a6>
 8004cfc:	69bb      	ldr	r3, [r7, #24]
 8004cfe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d02:	d212      	bcs.n	8004d2a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004d04:	69bb      	ldr	r3, [r7, #24]
 8004d06:	b29b      	uxth	r3, r3
 8004d08:	f023 030f 	bic.w	r3, r3, #15
 8004d0c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004d0e:	69bb      	ldr	r3, [r7, #24]
 8004d10:	085b      	lsrs	r3, r3, #1
 8004d12:	b29b      	uxth	r3, r3
 8004d14:	f003 0307 	and.w	r3, r3, #7
 8004d18:	b29a      	uxth	r2, r3
 8004d1a:	8afb      	ldrh	r3, [r7, #22]
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	8afa      	ldrh	r2, [r7, #22]
 8004d26:	60da      	str	r2, [r3, #12]
 8004d28:	e052      	b.n	8004dd0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004d30:	e04e      	b.n	8004dd0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004d32:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004d36:	2b08      	cmp	r3, #8
 8004d38:	d827      	bhi.n	8004d8a <UART_SetConfig+0x506>
 8004d3a:	a201      	add	r2, pc, #4	; (adr r2, 8004d40 <UART_SetConfig+0x4bc>)
 8004d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d40:	08004d65 	.word	0x08004d65
 8004d44:	08004d6d 	.word	0x08004d6d
 8004d48:	08004d75 	.word	0x08004d75
 8004d4c:	08004d8b 	.word	0x08004d8b
 8004d50:	08004d7b 	.word	0x08004d7b
 8004d54:	08004d8b 	.word	0x08004d8b
 8004d58:	08004d8b 	.word	0x08004d8b
 8004d5c:	08004d8b 	.word	0x08004d8b
 8004d60:	08004d83 	.word	0x08004d83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d64:	f7fe fc94 	bl	8003690 <HAL_RCC_GetPCLK1Freq>
 8004d68:	61f8      	str	r0, [r7, #28]
        break;
 8004d6a:	e014      	b.n	8004d96 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d6c:	f7fe fca6 	bl	80036bc <HAL_RCC_GetPCLK2Freq>
 8004d70:	61f8      	str	r0, [r7, #28]
        break;
 8004d72:	e010      	b.n	8004d96 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d74:	4b1e      	ldr	r3, [pc, #120]	; (8004df0 <UART_SetConfig+0x56c>)
 8004d76:	61fb      	str	r3, [r7, #28]
        break;
 8004d78:	e00d      	b.n	8004d96 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d7a:	f7fe fbf1 	bl	8003560 <HAL_RCC_GetSysClockFreq>
 8004d7e:	61f8      	str	r0, [r7, #28]
        break;
 8004d80:	e009      	b.n	8004d96 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d86:	61fb      	str	r3, [r7, #28]
        break;
 8004d88:	e005      	b.n	8004d96 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004d94:	bf00      	nop
    }

    if (pclk != 0U)
 8004d96:	69fb      	ldr	r3, [r7, #28]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d019      	beq.n	8004dd0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	085a      	lsrs	r2, r3, #1
 8004da2:	69fb      	ldr	r3, [r7, #28]
 8004da4:	441a      	add	r2, r3
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dae:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004db0:	69bb      	ldr	r3, [r7, #24]
 8004db2:	2b0f      	cmp	r3, #15
 8004db4:	d909      	bls.n	8004dca <UART_SetConfig+0x546>
 8004db6:	69bb      	ldr	r3, [r7, #24]
 8004db8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dbc:	d205      	bcs.n	8004dca <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004dbe:	69bb      	ldr	r3, [r7, #24]
 8004dc0:	b29a      	uxth	r2, r3
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	60da      	str	r2, [r3, #12]
 8004dc8:	e002      	b.n	8004dd0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004ddc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	3728      	adds	r7, #40	; 0x28
 8004de4:	46bd      	mov	sp, r7
 8004de6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004dea:	bf00      	nop
 8004dec:	40008000 	.word	0x40008000
 8004df0:	00f42400 	.word	0x00f42400

08004df4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b083      	sub	sp, #12
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e00:	f003 0308 	and.w	r3, r3, #8
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d00a      	beq.n	8004e1e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	430a      	orrs	r2, r1
 8004e1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e22:	f003 0301 	and.w	r3, r3, #1
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d00a      	beq.n	8004e40 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	430a      	orrs	r2, r1
 8004e3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e44:	f003 0302 	and.w	r3, r3, #2
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d00a      	beq.n	8004e62 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	430a      	orrs	r2, r1
 8004e60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e66:	f003 0304 	and.w	r3, r3, #4
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d00a      	beq.n	8004e84 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	430a      	orrs	r2, r1
 8004e82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e88:	f003 0310 	and.w	r3, r3, #16
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d00a      	beq.n	8004ea6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	689b      	ldr	r3, [r3, #8]
 8004e96:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	430a      	orrs	r2, r1
 8004ea4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eaa:	f003 0320 	and.w	r3, r3, #32
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d00a      	beq.n	8004ec8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	689b      	ldr	r3, [r3, #8]
 8004eb8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	430a      	orrs	r2, r1
 8004ec6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ecc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d01a      	beq.n	8004f0a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	430a      	orrs	r2, r1
 8004ee8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ef2:	d10a      	bne.n	8004f0a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	430a      	orrs	r2, r1
 8004f08:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d00a      	beq.n	8004f2c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	430a      	orrs	r2, r1
 8004f2a:	605a      	str	r2, [r3, #4]
  }
}
 8004f2c:	bf00      	nop
 8004f2e:	370c      	adds	r7, #12
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr

08004f38 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b098      	sub	sp, #96	; 0x60
 8004f3c:	af02      	add	r7, sp, #8
 8004f3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2200      	movs	r2, #0
 8004f44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004f48:	f7fc f8c8 	bl	80010dc <HAL_GetTick>
 8004f4c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f003 0308 	and.w	r3, r3, #8
 8004f58:	2b08      	cmp	r3, #8
 8004f5a:	d12e      	bne.n	8004fba <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f5c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004f60:	9300      	str	r3, [sp, #0]
 8004f62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f64:	2200      	movs	r2, #0
 8004f66:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f000 f88c 	bl	8005088 <UART_WaitOnFlagUntilTimeout>
 8004f70:	4603      	mov	r3, r0
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d021      	beq.n	8004fba <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f7e:	e853 3f00 	ldrex	r3, [r3]
 8004f82:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004f84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f8a:	653b      	str	r3, [r7, #80]	; 0x50
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	461a      	mov	r2, r3
 8004f92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f94:	647b      	str	r3, [r7, #68]	; 0x44
 8004f96:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f98:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004f9a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004f9c:	e841 2300 	strex	r3, r2, [r1]
 8004fa0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004fa2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d1e6      	bne.n	8004f76 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2220      	movs	r2, #32
 8004fac:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004fb6:	2303      	movs	r3, #3
 8004fb8:	e062      	b.n	8005080 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f003 0304 	and.w	r3, r3, #4
 8004fc4:	2b04      	cmp	r3, #4
 8004fc6:	d149      	bne.n	800505c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004fc8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004fcc:	9300      	str	r3, [sp, #0]
 8004fce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	f000 f856 	bl	8005088 <UART_WaitOnFlagUntilTimeout>
 8004fdc:	4603      	mov	r3, r0
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d03c      	beq.n	800505c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fea:	e853 3f00 	ldrex	r3, [r3]
 8004fee:	623b      	str	r3, [r7, #32]
   return(result);
 8004ff0:	6a3b      	ldr	r3, [r7, #32]
 8004ff2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004ff6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	461a      	mov	r2, r3
 8004ffe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005000:	633b      	str	r3, [r7, #48]	; 0x30
 8005002:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005004:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005006:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005008:	e841 2300 	strex	r3, r2, [r1]
 800500c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800500e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005010:	2b00      	cmp	r3, #0
 8005012:	d1e6      	bne.n	8004fe2 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	3308      	adds	r3, #8
 800501a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	e853 3f00 	ldrex	r3, [r3]
 8005022:	60fb      	str	r3, [r7, #12]
   return(result);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	f023 0301 	bic.w	r3, r3, #1
 800502a:	64bb      	str	r3, [r7, #72]	; 0x48
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	3308      	adds	r3, #8
 8005032:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005034:	61fa      	str	r2, [r7, #28]
 8005036:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005038:	69b9      	ldr	r1, [r7, #24]
 800503a:	69fa      	ldr	r2, [r7, #28]
 800503c:	e841 2300 	strex	r3, r2, [r1]
 8005040:	617b      	str	r3, [r7, #20]
   return(result);
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d1e5      	bne.n	8005014 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2220      	movs	r2, #32
 800504c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2200      	movs	r2, #0
 8005054:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005058:	2303      	movs	r3, #3
 800505a:	e011      	b.n	8005080 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2220      	movs	r2, #32
 8005060:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2220      	movs	r2, #32
 8005066:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2200      	movs	r2, #0
 800506e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2200      	movs	r2, #0
 8005074:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2200      	movs	r2, #0
 800507a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800507e:	2300      	movs	r3, #0
}
 8005080:	4618      	mov	r0, r3
 8005082:	3758      	adds	r7, #88	; 0x58
 8005084:	46bd      	mov	sp, r7
 8005086:	bd80      	pop	{r7, pc}

08005088 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b084      	sub	sp, #16
 800508c:	af00      	add	r7, sp, #0
 800508e:	60f8      	str	r0, [r7, #12]
 8005090:	60b9      	str	r1, [r7, #8]
 8005092:	603b      	str	r3, [r7, #0]
 8005094:	4613      	mov	r3, r2
 8005096:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005098:	e049      	b.n	800512e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800509a:	69bb      	ldr	r3, [r7, #24]
 800509c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80050a0:	d045      	beq.n	800512e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050a2:	f7fc f81b 	bl	80010dc <HAL_GetTick>
 80050a6:	4602      	mov	r2, r0
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	1ad3      	subs	r3, r2, r3
 80050ac:	69ba      	ldr	r2, [r7, #24]
 80050ae:	429a      	cmp	r2, r3
 80050b0:	d302      	bcc.n	80050b8 <UART_WaitOnFlagUntilTimeout+0x30>
 80050b2:	69bb      	ldr	r3, [r7, #24]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d101      	bne.n	80050bc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80050b8:	2303      	movs	r3, #3
 80050ba:	e048      	b.n	800514e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f003 0304 	and.w	r3, r3, #4
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d031      	beq.n	800512e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	69db      	ldr	r3, [r3, #28]
 80050d0:	f003 0308 	and.w	r3, r3, #8
 80050d4:	2b08      	cmp	r3, #8
 80050d6:	d110      	bne.n	80050fa <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	2208      	movs	r2, #8
 80050de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80050e0:	68f8      	ldr	r0, [r7, #12]
 80050e2:	f000 f838 	bl	8005156 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2208      	movs	r2, #8
 80050ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2200      	movs	r2, #0
 80050f2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80050f6:	2301      	movs	r3, #1
 80050f8:	e029      	b.n	800514e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	69db      	ldr	r3, [r3, #28]
 8005100:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005104:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005108:	d111      	bne.n	800512e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005112:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005114:	68f8      	ldr	r0, [r7, #12]
 8005116:	f000 f81e 	bl	8005156 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	2220      	movs	r2, #32
 800511e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	2200      	movs	r2, #0
 8005126:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800512a:	2303      	movs	r3, #3
 800512c:	e00f      	b.n	800514e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	69da      	ldr	r2, [r3, #28]
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	4013      	ands	r3, r2
 8005138:	68ba      	ldr	r2, [r7, #8]
 800513a:	429a      	cmp	r2, r3
 800513c:	bf0c      	ite	eq
 800513e:	2301      	moveq	r3, #1
 8005140:	2300      	movne	r3, #0
 8005142:	b2db      	uxtb	r3, r3
 8005144:	461a      	mov	r2, r3
 8005146:	79fb      	ldrb	r3, [r7, #7]
 8005148:	429a      	cmp	r2, r3
 800514a:	d0a6      	beq.n	800509a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800514c:	2300      	movs	r3, #0
}
 800514e:	4618      	mov	r0, r3
 8005150:	3710      	adds	r7, #16
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}

08005156 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005156:	b480      	push	{r7}
 8005158:	b095      	sub	sp, #84	; 0x54
 800515a:	af00      	add	r7, sp, #0
 800515c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005164:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005166:	e853 3f00 	ldrex	r3, [r3]
 800516a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800516c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800516e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005172:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	461a      	mov	r2, r3
 800517a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800517c:	643b      	str	r3, [r7, #64]	; 0x40
 800517e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005180:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005182:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005184:	e841 2300 	strex	r3, r2, [r1]
 8005188:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800518a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800518c:	2b00      	cmp	r3, #0
 800518e:	d1e6      	bne.n	800515e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	3308      	adds	r3, #8
 8005196:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005198:	6a3b      	ldr	r3, [r7, #32]
 800519a:	e853 3f00 	ldrex	r3, [r3]
 800519e:	61fb      	str	r3, [r7, #28]
   return(result);
 80051a0:	69fb      	ldr	r3, [r7, #28]
 80051a2:	f023 0301 	bic.w	r3, r3, #1
 80051a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	3308      	adds	r3, #8
 80051ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80051b0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80051b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80051b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80051b8:	e841 2300 	strex	r3, r2, [r1]
 80051bc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80051be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d1e5      	bne.n	8005190 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051c8:	2b01      	cmp	r3, #1
 80051ca:	d118      	bne.n	80051fe <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	e853 3f00 	ldrex	r3, [r3]
 80051d8:	60bb      	str	r3, [r7, #8]
   return(result);
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	f023 0310 	bic.w	r3, r3, #16
 80051e0:	647b      	str	r3, [r7, #68]	; 0x44
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	461a      	mov	r2, r3
 80051e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051ea:	61bb      	str	r3, [r7, #24]
 80051ec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ee:	6979      	ldr	r1, [r7, #20]
 80051f0:	69ba      	ldr	r2, [r7, #24]
 80051f2:	e841 2300 	strex	r3, r2, [r1]
 80051f6:	613b      	str	r3, [r7, #16]
   return(result);
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d1e6      	bne.n	80051cc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2220      	movs	r2, #32
 8005202:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2200      	movs	r2, #0
 800520a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2200      	movs	r2, #0
 8005210:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005212:	bf00      	nop
 8005214:	3754      	adds	r7, #84	; 0x54
 8005216:	46bd      	mov	sp, r7
 8005218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521c:	4770      	bx	lr

0800521e <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800521e:	b084      	sub	sp, #16
 8005220:	b580      	push	{r7, lr}
 8005222:	b084      	sub	sp, #16
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
 8005228:	f107 001c 	add.w	r0, r7, #28
 800522c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	68db      	ldr	r3, [r3, #12]
 8005234:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800523c:	6878      	ldr	r0, [r7, #4]
 800523e:	f001 fa1d 	bl	800667c <USB_CoreReset>
 8005242:	4603      	mov	r3, r0
 8005244:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8005246:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005248:	2b00      	cmp	r3, #0
 800524a:	d106      	bne.n	800525a <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005250:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	639a      	str	r2, [r3, #56]	; 0x38
 8005258:	e005      	b.n	8005266 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800525e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8005266:	7bfb      	ldrb	r3, [r7, #15]
}
 8005268:	4618      	mov	r0, r3
 800526a:	3710      	adds	r7, #16
 800526c:	46bd      	mov	sp, r7
 800526e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005272:	b004      	add	sp, #16
 8005274:	4770      	bx	lr
	...

08005278 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005278:	b480      	push	{r7}
 800527a:	b087      	sub	sp, #28
 800527c:	af00      	add	r7, sp, #0
 800527e:	60f8      	str	r0, [r7, #12]
 8005280:	60b9      	str	r1, [r7, #8]
 8005282:	4613      	mov	r3, r2
 8005284:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005286:	79fb      	ldrb	r3, [r7, #7]
 8005288:	2b02      	cmp	r3, #2
 800528a:	d165      	bne.n	8005358 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	4a3e      	ldr	r2, [pc, #248]	; (8005388 <USB_SetTurnaroundTime+0x110>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d906      	bls.n	80052a2 <USB_SetTurnaroundTime+0x2a>
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	4a3d      	ldr	r2, [pc, #244]	; (800538c <USB_SetTurnaroundTime+0x114>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d202      	bcs.n	80052a2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800529c:	230f      	movs	r3, #15
 800529e:	617b      	str	r3, [r7, #20]
 80052a0:	e05c      	b.n	800535c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	4a39      	ldr	r2, [pc, #228]	; (800538c <USB_SetTurnaroundTime+0x114>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d306      	bcc.n	80052b8 <USB_SetTurnaroundTime+0x40>
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	4a38      	ldr	r2, [pc, #224]	; (8005390 <USB_SetTurnaroundTime+0x118>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d202      	bcs.n	80052b8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80052b2:	230e      	movs	r3, #14
 80052b4:	617b      	str	r3, [r7, #20]
 80052b6:	e051      	b.n	800535c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	4a35      	ldr	r2, [pc, #212]	; (8005390 <USB_SetTurnaroundTime+0x118>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d306      	bcc.n	80052ce <USB_SetTurnaroundTime+0x56>
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	4a34      	ldr	r2, [pc, #208]	; (8005394 <USB_SetTurnaroundTime+0x11c>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d202      	bcs.n	80052ce <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80052c8:	230d      	movs	r3, #13
 80052ca:	617b      	str	r3, [r7, #20]
 80052cc:	e046      	b.n	800535c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	4a30      	ldr	r2, [pc, #192]	; (8005394 <USB_SetTurnaroundTime+0x11c>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d306      	bcc.n	80052e4 <USB_SetTurnaroundTime+0x6c>
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	4a2f      	ldr	r2, [pc, #188]	; (8005398 <USB_SetTurnaroundTime+0x120>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d802      	bhi.n	80052e4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80052de:	230c      	movs	r3, #12
 80052e0:	617b      	str	r3, [r7, #20]
 80052e2:	e03b      	b.n	800535c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	4a2c      	ldr	r2, [pc, #176]	; (8005398 <USB_SetTurnaroundTime+0x120>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d906      	bls.n	80052fa <USB_SetTurnaroundTime+0x82>
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	4a2b      	ldr	r2, [pc, #172]	; (800539c <USB_SetTurnaroundTime+0x124>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d802      	bhi.n	80052fa <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80052f4:	230b      	movs	r3, #11
 80052f6:	617b      	str	r3, [r7, #20]
 80052f8:	e030      	b.n	800535c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	4a27      	ldr	r2, [pc, #156]	; (800539c <USB_SetTurnaroundTime+0x124>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d906      	bls.n	8005310 <USB_SetTurnaroundTime+0x98>
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	4a26      	ldr	r2, [pc, #152]	; (80053a0 <USB_SetTurnaroundTime+0x128>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d802      	bhi.n	8005310 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800530a:	230a      	movs	r3, #10
 800530c:	617b      	str	r3, [r7, #20]
 800530e:	e025      	b.n	800535c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	4a23      	ldr	r2, [pc, #140]	; (80053a0 <USB_SetTurnaroundTime+0x128>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d906      	bls.n	8005326 <USB_SetTurnaroundTime+0xae>
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	4a22      	ldr	r2, [pc, #136]	; (80053a4 <USB_SetTurnaroundTime+0x12c>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d202      	bcs.n	8005326 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005320:	2309      	movs	r3, #9
 8005322:	617b      	str	r3, [r7, #20]
 8005324:	e01a      	b.n	800535c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	4a1e      	ldr	r2, [pc, #120]	; (80053a4 <USB_SetTurnaroundTime+0x12c>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d306      	bcc.n	800533c <USB_SetTurnaroundTime+0xc4>
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	4a1d      	ldr	r2, [pc, #116]	; (80053a8 <USB_SetTurnaroundTime+0x130>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d802      	bhi.n	800533c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005336:	2308      	movs	r3, #8
 8005338:	617b      	str	r3, [r7, #20]
 800533a:	e00f      	b.n	800535c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	4a1a      	ldr	r2, [pc, #104]	; (80053a8 <USB_SetTurnaroundTime+0x130>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d906      	bls.n	8005352 <USB_SetTurnaroundTime+0xda>
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	4a19      	ldr	r2, [pc, #100]	; (80053ac <USB_SetTurnaroundTime+0x134>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d202      	bcs.n	8005352 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800534c:	2307      	movs	r3, #7
 800534e:	617b      	str	r3, [r7, #20]
 8005350:	e004      	b.n	800535c <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005352:	2306      	movs	r3, #6
 8005354:	617b      	str	r3, [r7, #20]
 8005356:	e001      	b.n	800535c <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005358:	2309      	movs	r3, #9
 800535a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	68db      	ldr	r3, [r3, #12]
 8005360:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	68da      	ldr	r2, [r3, #12]
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	029b      	lsls	r3, r3, #10
 8005370:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005374:	431a      	orrs	r2, r3
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800537a:	2300      	movs	r3, #0
}
 800537c:	4618      	mov	r0, r3
 800537e:	371c      	adds	r7, #28
 8005380:	46bd      	mov	sp, r7
 8005382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005386:	4770      	bx	lr
 8005388:	00d8acbf 	.word	0x00d8acbf
 800538c:	00e4e1c0 	.word	0x00e4e1c0
 8005390:	00f42400 	.word	0x00f42400
 8005394:	01067380 	.word	0x01067380
 8005398:	011a499f 	.word	0x011a499f
 800539c:	01312cff 	.word	0x01312cff
 80053a0:	014ca43f 	.word	0x014ca43f
 80053a4:	016e3600 	.word	0x016e3600
 80053a8:	01a6ab1f 	.word	0x01a6ab1f
 80053ac:	01e84800 	.word	0x01e84800

080053b0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b083      	sub	sp, #12
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	689b      	ldr	r3, [r3, #8]
 80053bc:	f043 0201 	orr.w	r2, r3, #1
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80053c4:	2300      	movs	r3, #0
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	370c      	adds	r7, #12
 80053ca:	46bd      	mov	sp, r7
 80053cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d0:	4770      	bx	lr

080053d2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80053d2:	b480      	push	{r7}
 80053d4:	b083      	sub	sp, #12
 80053d6:	af00      	add	r7, sp, #0
 80053d8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	689b      	ldr	r3, [r3, #8]
 80053de:	f023 0201 	bic.w	r2, r3, #1
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80053e6:	2300      	movs	r3, #0
}
 80053e8:	4618      	mov	r0, r3
 80053ea:	370c      	adds	r7, #12
 80053ec:	46bd      	mov	sp, r7
 80053ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f2:	4770      	bx	lr

080053f4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b084      	sub	sp, #16
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
 80053fc:	460b      	mov	r3, r1
 80053fe:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005400:	2300      	movs	r3, #0
 8005402:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	68db      	ldr	r3, [r3, #12]
 8005408:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005410:	78fb      	ldrb	r3, [r7, #3]
 8005412:	2b01      	cmp	r3, #1
 8005414:	d115      	bne.n	8005442 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	68db      	ldr	r3, [r3, #12]
 800541a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005422:	2001      	movs	r0, #1
 8005424:	f7fb fe66 	bl	80010f4 <HAL_Delay>
      ms++;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	3301      	adds	r3, #1
 800542c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	f001 f8ab 	bl	800658a <USB_GetMode>
 8005434:	4603      	mov	r3, r0
 8005436:	2b01      	cmp	r3, #1
 8005438:	d01e      	beq.n	8005478 <USB_SetCurrentMode+0x84>
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	2b31      	cmp	r3, #49	; 0x31
 800543e:	d9f0      	bls.n	8005422 <USB_SetCurrentMode+0x2e>
 8005440:	e01a      	b.n	8005478 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005442:	78fb      	ldrb	r3, [r7, #3]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d115      	bne.n	8005474 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	68db      	ldr	r3, [r3, #12]
 800544c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005454:	2001      	movs	r0, #1
 8005456:	f7fb fe4d 	bl	80010f4 <HAL_Delay>
      ms++;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	3301      	adds	r3, #1
 800545e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005460:	6878      	ldr	r0, [r7, #4]
 8005462:	f001 f892 	bl	800658a <USB_GetMode>
 8005466:	4603      	mov	r3, r0
 8005468:	2b00      	cmp	r3, #0
 800546a:	d005      	beq.n	8005478 <USB_SetCurrentMode+0x84>
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	2b31      	cmp	r3, #49	; 0x31
 8005470:	d9f0      	bls.n	8005454 <USB_SetCurrentMode+0x60>
 8005472:	e001      	b.n	8005478 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005474:	2301      	movs	r3, #1
 8005476:	e005      	b.n	8005484 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	2b32      	cmp	r3, #50	; 0x32
 800547c:	d101      	bne.n	8005482 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800547e:	2301      	movs	r3, #1
 8005480:	e000      	b.n	8005484 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005482:	2300      	movs	r3, #0
}
 8005484:	4618      	mov	r0, r3
 8005486:	3710      	adds	r7, #16
 8005488:	46bd      	mov	sp, r7
 800548a:	bd80      	pop	{r7, pc}

0800548c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800548c:	b084      	sub	sp, #16
 800548e:	b580      	push	{r7, lr}
 8005490:	b086      	sub	sp, #24
 8005492:	af00      	add	r7, sp, #0
 8005494:	6078      	str	r0, [r7, #4]
 8005496:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800549a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800549e:	2300      	movs	r3, #0
 80054a0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80054a6:	2300      	movs	r3, #0
 80054a8:	613b      	str	r3, [r7, #16]
 80054aa:	e009      	b.n	80054c0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80054ac:	687a      	ldr	r2, [r7, #4]
 80054ae:	693b      	ldr	r3, [r7, #16]
 80054b0:	3340      	adds	r3, #64	; 0x40
 80054b2:	009b      	lsls	r3, r3, #2
 80054b4:	4413      	add	r3, r2
 80054b6:	2200      	movs	r2, #0
 80054b8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	3301      	adds	r3, #1
 80054be:	613b      	str	r3, [r7, #16]
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	2b0e      	cmp	r3, #14
 80054c4:	d9f2      	bls.n	80054ac <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80054c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d11c      	bne.n	8005506 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	68fa      	ldr	r2, [r7, #12]
 80054d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80054da:	f043 0302 	orr.w	r3, r3, #2
 80054de:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054e4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	601a      	str	r2, [r3, #0]
 8005504:	e005      	b.n	8005512 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800550a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005518:	461a      	mov	r2, r3
 800551a:	2300      	movs	r3, #0
 800551c:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800551e:	2103      	movs	r1, #3
 8005520:	6878      	ldr	r0, [r7, #4]
 8005522:	f000 f959 	bl	80057d8 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005526:	2110      	movs	r1, #16
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	f000 f8f1 	bl	8005710 <USB_FlushTxFifo>
 800552e:	4603      	mov	r3, r0
 8005530:	2b00      	cmp	r3, #0
 8005532:	d001      	beq.n	8005538 <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 8005534:	2301      	movs	r3, #1
 8005536:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005538:	6878      	ldr	r0, [r7, #4]
 800553a:	f000 f91d 	bl	8005778 <USB_FlushRxFifo>
 800553e:	4603      	mov	r3, r0
 8005540:	2b00      	cmp	r3, #0
 8005542:	d001      	beq.n	8005548 <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 8005544:	2301      	movs	r3, #1
 8005546:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800554e:	461a      	mov	r2, r3
 8005550:	2300      	movs	r3, #0
 8005552:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800555a:	461a      	mov	r2, r3
 800555c:	2300      	movs	r3, #0
 800555e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005566:	461a      	mov	r2, r3
 8005568:	2300      	movs	r3, #0
 800556a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800556c:	2300      	movs	r3, #0
 800556e:	613b      	str	r3, [r7, #16]
 8005570:	e043      	b.n	80055fa <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	015a      	lsls	r2, r3, #5
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	4413      	add	r3, r2
 800557a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005584:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005588:	d118      	bne.n	80055bc <USB_DevInit+0x130>
    {
      if (i == 0U)
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d10a      	bne.n	80055a6 <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	015a      	lsls	r2, r3, #5
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	4413      	add	r3, r2
 8005598:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800559c:	461a      	mov	r2, r3
 800559e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80055a2:	6013      	str	r3, [r2, #0]
 80055a4:	e013      	b.n	80055ce <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	015a      	lsls	r2, r3, #5
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	4413      	add	r3, r2
 80055ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055b2:	461a      	mov	r2, r3
 80055b4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80055b8:	6013      	str	r3, [r2, #0]
 80055ba:	e008      	b.n	80055ce <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80055bc:	693b      	ldr	r3, [r7, #16]
 80055be:	015a      	lsls	r2, r3, #5
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	4413      	add	r3, r2
 80055c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055c8:	461a      	mov	r2, r3
 80055ca:	2300      	movs	r3, #0
 80055cc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80055ce:	693b      	ldr	r3, [r7, #16]
 80055d0:	015a      	lsls	r2, r3, #5
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	4413      	add	r3, r2
 80055d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055da:	461a      	mov	r2, r3
 80055dc:	2300      	movs	r3, #0
 80055de:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80055e0:	693b      	ldr	r3, [r7, #16]
 80055e2:	015a      	lsls	r2, r3, #5
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	4413      	add	r3, r2
 80055e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055ec:	461a      	mov	r2, r3
 80055ee:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80055f2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80055f4:	693b      	ldr	r3, [r7, #16]
 80055f6:	3301      	adds	r3, #1
 80055f8:	613b      	str	r3, [r7, #16]
 80055fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055fc:	693a      	ldr	r2, [r7, #16]
 80055fe:	429a      	cmp	r2, r3
 8005600:	d3b7      	bcc.n	8005572 <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005602:	2300      	movs	r3, #0
 8005604:	613b      	str	r3, [r7, #16]
 8005606:	e043      	b.n	8005690 <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	015a      	lsls	r2, r3, #5
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	4413      	add	r3, r2
 8005610:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800561a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800561e:	d118      	bne.n	8005652 <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 8005620:	693b      	ldr	r3, [r7, #16]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d10a      	bne.n	800563c <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005626:	693b      	ldr	r3, [r7, #16]
 8005628:	015a      	lsls	r2, r3, #5
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	4413      	add	r3, r2
 800562e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005632:	461a      	mov	r2, r3
 8005634:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005638:	6013      	str	r3, [r2, #0]
 800563a:	e013      	b.n	8005664 <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800563c:	693b      	ldr	r3, [r7, #16]
 800563e:	015a      	lsls	r2, r3, #5
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	4413      	add	r3, r2
 8005644:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005648:	461a      	mov	r2, r3
 800564a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800564e:	6013      	str	r3, [r2, #0]
 8005650:	e008      	b.n	8005664 <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005652:	693b      	ldr	r3, [r7, #16]
 8005654:	015a      	lsls	r2, r3, #5
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	4413      	add	r3, r2
 800565a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800565e:	461a      	mov	r2, r3
 8005660:	2300      	movs	r3, #0
 8005662:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	015a      	lsls	r2, r3, #5
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	4413      	add	r3, r2
 800566c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005670:	461a      	mov	r2, r3
 8005672:	2300      	movs	r3, #0
 8005674:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005676:	693b      	ldr	r3, [r7, #16]
 8005678:	015a      	lsls	r2, r3, #5
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	4413      	add	r3, r2
 800567e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005682:	461a      	mov	r2, r3
 8005684:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005688:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	3301      	adds	r3, #1
 800568e:	613b      	str	r3, [r7, #16]
 8005690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005692:	693a      	ldr	r2, [r7, #16]
 8005694:	429a      	cmp	r2, r3
 8005696:	d3b7      	bcc.n	8005608 <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800569e:	691b      	ldr	r3, [r3, #16]
 80056a0:	68fa      	ldr	r2, [r7, #12]
 80056a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80056a6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80056aa:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2200      	movs	r2, #0
 80056b0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80056b8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	699b      	ldr	r3, [r3, #24]
 80056be:	f043 0210 	orr.w	r2, r3, #16
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	699a      	ldr	r2, [r3, #24]
 80056ca:	4b10      	ldr	r3, [pc, #64]	; (800570c <USB_DevInit+0x280>)
 80056cc:	4313      	orrs	r3, r2
 80056ce:	687a      	ldr	r2, [r7, #4]
 80056d0:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80056d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d005      	beq.n	80056e4 <USB_DevInit+0x258>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	699b      	ldr	r3, [r3, #24]
 80056dc:	f043 0208 	orr.w	r2, r3, #8
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80056e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056e6:	2b01      	cmp	r3, #1
 80056e8:	d107      	bne.n	80056fa <USB_DevInit+0x26e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	699b      	ldr	r3, [r3, #24]
 80056ee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80056f2:	f043 0304 	orr.w	r3, r3, #4
 80056f6:	687a      	ldr	r2, [r7, #4]
 80056f8:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80056fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80056fc:	4618      	mov	r0, r3
 80056fe:	3718      	adds	r7, #24
 8005700:	46bd      	mov	sp, r7
 8005702:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005706:	b004      	add	sp, #16
 8005708:	4770      	bx	lr
 800570a:	bf00      	nop
 800570c:	803c3800 	.word	0x803c3800

08005710 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005710:	b480      	push	{r7}
 8005712:	b085      	sub	sp, #20
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
 8005718:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800571a:	2300      	movs	r3, #0
 800571c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	3301      	adds	r3, #1
 8005722:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	4a13      	ldr	r2, [pc, #76]	; (8005774 <USB_FlushTxFifo+0x64>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d901      	bls.n	8005730 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800572c:	2303      	movs	r3, #3
 800572e:	e01b      	b.n	8005768 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	691b      	ldr	r3, [r3, #16]
 8005734:	2b00      	cmp	r3, #0
 8005736:	daf2      	bge.n	800571e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005738:	2300      	movs	r3, #0
 800573a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	019b      	lsls	r3, r3, #6
 8005740:	f043 0220 	orr.w	r2, r3, #32
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	3301      	adds	r3, #1
 800574c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	4a08      	ldr	r2, [pc, #32]	; (8005774 <USB_FlushTxFifo+0x64>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d901      	bls.n	800575a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005756:	2303      	movs	r3, #3
 8005758:	e006      	b.n	8005768 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	691b      	ldr	r3, [r3, #16]
 800575e:	f003 0320 	and.w	r3, r3, #32
 8005762:	2b20      	cmp	r3, #32
 8005764:	d0f0      	beq.n	8005748 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005766:	2300      	movs	r3, #0
}
 8005768:	4618      	mov	r0, r3
 800576a:	3714      	adds	r7, #20
 800576c:	46bd      	mov	sp, r7
 800576e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005772:	4770      	bx	lr
 8005774:	00030d40 	.word	0x00030d40

08005778 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005778:	b480      	push	{r7}
 800577a:	b085      	sub	sp, #20
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005780:	2300      	movs	r3, #0
 8005782:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	3301      	adds	r3, #1
 8005788:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	4a11      	ldr	r2, [pc, #68]	; (80057d4 <USB_FlushRxFifo+0x5c>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d901      	bls.n	8005796 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005792:	2303      	movs	r3, #3
 8005794:	e018      	b.n	80057c8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	691b      	ldr	r3, [r3, #16]
 800579a:	2b00      	cmp	r3, #0
 800579c:	daf2      	bge.n	8005784 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800579e:	2300      	movs	r3, #0
 80057a0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2210      	movs	r2, #16
 80057a6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	3301      	adds	r3, #1
 80057ac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	4a08      	ldr	r2, [pc, #32]	; (80057d4 <USB_FlushRxFifo+0x5c>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d901      	bls.n	80057ba <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80057b6:	2303      	movs	r3, #3
 80057b8:	e006      	b.n	80057c8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	691b      	ldr	r3, [r3, #16]
 80057be:	f003 0310 	and.w	r3, r3, #16
 80057c2:	2b10      	cmp	r3, #16
 80057c4:	d0f0      	beq.n	80057a8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80057c6:	2300      	movs	r3, #0
}
 80057c8:	4618      	mov	r0, r3
 80057ca:	3714      	adds	r7, #20
 80057cc:	46bd      	mov	sp, r7
 80057ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d2:	4770      	bx	lr
 80057d4:	00030d40 	.word	0x00030d40

080057d8 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80057d8:	b480      	push	{r7}
 80057da:	b085      	sub	sp, #20
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
 80057e0:	460b      	mov	r3, r1
 80057e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057ee:	681a      	ldr	r2, [r3, #0]
 80057f0:	78fb      	ldrb	r3, [r7, #3]
 80057f2:	68f9      	ldr	r1, [r7, #12]
 80057f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80057f8:	4313      	orrs	r3, r2
 80057fa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80057fc:	2300      	movs	r3, #0
}
 80057fe:	4618      	mov	r0, r3
 8005800:	3714      	adds	r7, #20
 8005802:	46bd      	mov	sp, r7
 8005804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005808:	4770      	bx	lr

0800580a <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800580a:	b480      	push	{r7}
 800580c:	b087      	sub	sp, #28
 800580e:	af00      	add	r7, sp, #0
 8005810:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800581c:	689b      	ldr	r3, [r3, #8]
 800581e:	f003 0306 	and.w	r3, r3, #6
 8005822:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	2b02      	cmp	r3, #2
 8005828:	d002      	beq.n	8005830 <USB_GetDevSpeed+0x26>
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	2b06      	cmp	r3, #6
 800582e:	d102      	bne.n	8005836 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005830:	2302      	movs	r3, #2
 8005832:	75fb      	strb	r3, [r7, #23]
 8005834:	e001      	b.n	800583a <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 8005836:	230f      	movs	r3, #15
 8005838:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800583a:	7dfb      	ldrb	r3, [r7, #23]
}
 800583c:	4618      	mov	r0, r3
 800583e:	371c      	adds	r7, #28
 8005840:	46bd      	mov	sp, r7
 8005842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005846:	4770      	bx	lr

08005848 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005848:	b480      	push	{r7}
 800584a:	b085      	sub	sp, #20
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
 8005850:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	781b      	ldrb	r3, [r3, #0]
 800585a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	785b      	ldrb	r3, [r3, #1]
 8005860:	2b01      	cmp	r3, #1
 8005862:	d13a      	bne.n	80058da <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800586a:	69da      	ldr	r2, [r3, #28]
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	781b      	ldrb	r3, [r3, #0]
 8005870:	f003 030f 	and.w	r3, r3, #15
 8005874:	2101      	movs	r1, #1
 8005876:	fa01 f303 	lsl.w	r3, r1, r3
 800587a:	b29b      	uxth	r3, r3
 800587c:	68f9      	ldr	r1, [r7, #12]
 800587e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005882:	4313      	orrs	r3, r2
 8005884:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	015a      	lsls	r2, r3, #5
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	4413      	add	r3, r2
 800588e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005898:	2b00      	cmp	r3, #0
 800589a:	d155      	bne.n	8005948 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	015a      	lsls	r2, r3, #5
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	4413      	add	r3, r2
 80058a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058a8:	681a      	ldr	r2, [r3, #0]
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	689b      	ldr	r3, [r3, #8]
 80058ae:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	791b      	ldrb	r3, [r3, #4]
 80058b6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80058b8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	059b      	lsls	r3, r3, #22
 80058be:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80058c0:	4313      	orrs	r3, r2
 80058c2:	68ba      	ldr	r2, [r7, #8]
 80058c4:	0151      	lsls	r1, r2, #5
 80058c6:	68fa      	ldr	r2, [r7, #12]
 80058c8:	440a      	add	r2, r1
 80058ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058d6:	6013      	str	r3, [r2, #0]
 80058d8:	e036      	b.n	8005948 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058e0:	69da      	ldr	r2, [r3, #28]
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	781b      	ldrb	r3, [r3, #0]
 80058e6:	f003 030f 	and.w	r3, r3, #15
 80058ea:	2101      	movs	r1, #1
 80058ec:	fa01 f303 	lsl.w	r3, r1, r3
 80058f0:	041b      	lsls	r3, r3, #16
 80058f2:	68f9      	ldr	r1, [r7, #12]
 80058f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80058f8:	4313      	orrs	r3, r2
 80058fa:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	015a      	lsls	r2, r3, #5
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	4413      	add	r3, r2
 8005904:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800590e:	2b00      	cmp	r3, #0
 8005910:	d11a      	bne.n	8005948 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	015a      	lsls	r2, r3, #5
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	4413      	add	r3, r2
 800591a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800591e:	681a      	ldr	r2, [r3, #0]
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	689b      	ldr	r3, [r3, #8]
 8005924:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	791b      	ldrb	r3, [r3, #4]
 800592c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800592e:	430b      	orrs	r3, r1
 8005930:	4313      	orrs	r3, r2
 8005932:	68ba      	ldr	r2, [r7, #8]
 8005934:	0151      	lsls	r1, r2, #5
 8005936:	68fa      	ldr	r2, [r7, #12]
 8005938:	440a      	add	r2, r1
 800593a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800593e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005942:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005946:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005948:	2300      	movs	r3, #0
}
 800594a:	4618      	mov	r0, r3
 800594c:	3714      	adds	r7, #20
 800594e:	46bd      	mov	sp, r7
 8005950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005954:	4770      	bx	lr
	...

08005958 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005958:	b480      	push	{r7}
 800595a:	b085      	sub	sp, #20
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
 8005960:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	781b      	ldrb	r3, [r3, #0]
 800596a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	785b      	ldrb	r3, [r3, #1]
 8005970:	2b01      	cmp	r3, #1
 8005972:	d161      	bne.n	8005a38 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	015a      	lsls	r2, r3, #5
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	4413      	add	r3, r2
 800597c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005986:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800598a:	d11f      	bne.n	80059cc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	015a      	lsls	r2, r3, #5
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	4413      	add	r3, r2
 8005994:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	68ba      	ldr	r2, [r7, #8]
 800599c:	0151      	lsls	r1, r2, #5
 800599e:	68fa      	ldr	r2, [r7, #12]
 80059a0:	440a      	add	r2, r1
 80059a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059a6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80059aa:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	015a      	lsls	r2, r3, #5
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	4413      	add	r3, r2
 80059b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	68ba      	ldr	r2, [r7, #8]
 80059bc:	0151      	lsls	r1, r2, #5
 80059be:	68fa      	ldr	r2, [r7, #12]
 80059c0:	440a      	add	r2, r1
 80059c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059c6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80059ca:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	781b      	ldrb	r3, [r3, #0]
 80059d8:	f003 030f 	and.w	r3, r3, #15
 80059dc:	2101      	movs	r1, #1
 80059de:	fa01 f303 	lsl.w	r3, r1, r3
 80059e2:	b29b      	uxth	r3, r3
 80059e4:	43db      	mvns	r3, r3
 80059e6:	68f9      	ldr	r1, [r7, #12]
 80059e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80059ec:	4013      	ands	r3, r2
 80059ee:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059f6:	69da      	ldr	r2, [r3, #28]
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	781b      	ldrb	r3, [r3, #0]
 80059fc:	f003 030f 	and.w	r3, r3, #15
 8005a00:	2101      	movs	r1, #1
 8005a02:	fa01 f303 	lsl.w	r3, r1, r3
 8005a06:	b29b      	uxth	r3, r3
 8005a08:	43db      	mvns	r3, r3
 8005a0a:	68f9      	ldr	r1, [r7, #12]
 8005a0c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a10:	4013      	ands	r3, r2
 8005a12:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	015a      	lsls	r2, r3, #5
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	4413      	add	r3, r2
 8005a1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a20:	681a      	ldr	r2, [r3, #0]
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	0159      	lsls	r1, r3, #5
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	440b      	add	r3, r1
 8005a2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a2e:	4619      	mov	r1, r3
 8005a30:	4b35      	ldr	r3, [pc, #212]	; (8005b08 <USB_DeactivateEndpoint+0x1b0>)
 8005a32:	4013      	ands	r3, r2
 8005a34:	600b      	str	r3, [r1, #0]
 8005a36:	e060      	b.n	8005afa <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	015a      	lsls	r2, r3, #5
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	4413      	add	r3, r2
 8005a40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a4a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a4e:	d11f      	bne.n	8005a90 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	015a      	lsls	r2, r3, #5
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	4413      	add	r3, r2
 8005a58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	68ba      	ldr	r2, [r7, #8]
 8005a60:	0151      	lsls	r1, r2, #5
 8005a62:	68fa      	ldr	r2, [r7, #12]
 8005a64:	440a      	add	r2, r1
 8005a66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a6a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005a6e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	015a      	lsls	r2, r3, #5
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	4413      	add	r3, r2
 8005a78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	68ba      	ldr	r2, [r7, #8]
 8005a80:	0151      	lsls	r1, r2, #5
 8005a82:	68fa      	ldr	r2, [r7, #12]
 8005a84:	440a      	add	r2, r1
 8005a86:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a8a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005a8e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a96:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	781b      	ldrb	r3, [r3, #0]
 8005a9c:	f003 030f 	and.w	r3, r3, #15
 8005aa0:	2101      	movs	r1, #1
 8005aa2:	fa01 f303 	lsl.w	r3, r1, r3
 8005aa6:	041b      	lsls	r3, r3, #16
 8005aa8:	43db      	mvns	r3, r3
 8005aaa:	68f9      	ldr	r1, [r7, #12]
 8005aac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ab0:	4013      	ands	r3, r2
 8005ab2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005aba:	69da      	ldr	r2, [r3, #28]
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	781b      	ldrb	r3, [r3, #0]
 8005ac0:	f003 030f 	and.w	r3, r3, #15
 8005ac4:	2101      	movs	r1, #1
 8005ac6:	fa01 f303 	lsl.w	r3, r1, r3
 8005aca:	041b      	lsls	r3, r3, #16
 8005acc:	43db      	mvns	r3, r3
 8005ace:	68f9      	ldr	r1, [r7, #12]
 8005ad0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ad4:	4013      	ands	r3, r2
 8005ad6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	015a      	lsls	r2, r3, #5
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	4413      	add	r3, r2
 8005ae0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ae4:	681a      	ldr	r2, [r3, #0]
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	0159      	lsls	r1, r3, #5
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	440b      	add	r3, r1
 8005aee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005af2:	4619      	mov	r1, r3
 8005af4:	4b05      	ldr	r3, [pc, #20]	; (8005b0c <USB_DeactivateEndpoint+0x1b4>)
 8005af6:	4013      	ands	r3, r2
 8005af8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005afa:	2300      	movs	r3, #0
}
 8005afc:	4618      	mov	r0, r3
 8005afe:	3714      	adds	r7, #20
 8005b00:	46bd      	mov	sp, r7
 8005b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b06:	4770      	bx	lr
 8005b08:	ec337800 	.word	0xec337800
 8005b0c:	eff37800 	.word	0xeff37800

08005b10 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b086      	sub	sp, #24
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
 8005b18:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	781b      	ldrb	r3, [r3, #0]
 8005b22:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	785b      	ldrb	r3, [r3, #1]
 8005b28:	2b01      	cmp	r3, #1
 8005b2a:	f040 8128 	bne.w	8005d7e <USB_EPStartXfer+0x26e>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	691b      	ldr	r3, [r3, #16]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d132      	bne.n	8005b9c <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005b36:	693b      	ldr	r3, [r7, #16]
 8005b38:	015a      	lsls	r2, r3, #5
 8005b3a:	697b      	ldr	r3, [r7, #20]
 8005b3c:	4413      	add	r3, r2
 8005b3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b42:	691b      	ldr	r3, [r3, #16]
 8005b44:	693a      	ldr	r2, [r7, #16]
 8005b46:	0151      	lsls	r1, r2, #5
 8005b48:	697a      	ldr	r2, [r7, #20]
 8005b4a:	440a      	add	r2, r1
 8005b4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b50:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005b54:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005b58:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005b5a:	693b      	ldr	r3, [r7, #16]
 8005b5c:	015a      	lsls	r2, r3, #5
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	4413      	add	r3, r2
 8005b62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b66:	691b      	ldr	r3, [r3, #16]
 8005b68:	693a      	ldr	r2, [r7, #16]
 8005b6a:	0151      	lsls	r1, r2, #5
 8005b6c:	697a      	ldr	r2, [r7, #20]
 8005b6e:	440a      	add	r2, r1
 8005b70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b74:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005b78:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005b7a:	693b      	ldr	r3, [r7, #16]
 8005b7c:	015a      	lsls	r2, r3, #5
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	4413      	add	r3, r2
 8005b82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b86:	691b      	ldr	r3, [r3, #16]
 8005b88:	693a      	ldr	r2, [r7, #16]
 8005b8a:	0151      	lsls	r1, r2, #5
 8005b8c:	697a      	ldr	r2, [r7, #20]
 8005b8e:	440a      	add	r2, r1
 8005b90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b94:	0cdb      	lsrs	r3, r3, #19
 8005b96:	04db      	lsls	r3, r3, #19
 8005b98:	6113      	str	r3, [r2, #16]
 8005b9a:	e092      	b.n	8005cc2 <USB_EPStartXfer+0x1b2>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005b9c:	693b      	ldr	r3, [r7, #16]
 8005b9e:	015a      	lsls	r2, r3, #5
 8005ba0:	697b      	ldr	r3, [r7, #20]
 8005ba2:	4413      	add	r3, r2
 8005ba4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ba8:	691b      	ldr	r3, [r3, #16]
 8005baa:	693a      	ldr	r2, [r7, #16]
 8005bac:	0151      	lsls	r1, r2, #5
 8005bae:	697a      	ldr	r2, [r7, #20]
 8005bb0:	440a      	add	r2, r1
 8005bb2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bb6:	0cdb      	lsrs	r3, r3, #19
 8005bb8:	04db      	lsls	r3, r3, #19
 8005bba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005bbc:	693b      	ldr	r3, [r7, #16]
 8005bbe:	015a      	lsls	r2, r3, #5
 8005bc0:	697b      	ldr	r3, [r7, #20]
 8005bc2:	4413      	add	r3, r2
 8005bc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bc8:	691b      	ldr	r3, [r3, #16]
 8005bca:	693a      	ldr	r2, [r7, #16]
 8005bcc:	0151      	lsls	r1, r2, #5
 8005bce:	697a      	ldr	r2, [r7, #20]
 8005bd0:	440a      	add	r2, r1
 8005bd2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bd6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005bda:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005bde:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8005be0:	693b      	ldr	r3, [r7, #16]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d11a      	bne.n	8005c1c <USB_EPStartXfer+0x10c>
      {
        if (ep->xfer_len > ep->maxpacket)
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	691a      	ldr	r2, [r3, #16]
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	689b      	ldr	r3, [r3, #8]
 8005bee:	429a      	cmp	r2, r3
 8005bf0:	d903      	bls.n	8005bfa <USB_EPStartXfer+0xea>
        {
          ep->xfer_len = ep->maxpacket;
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	689a      	ldr	r2, [r3, #8]
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005bfa:	693b      	ldr	r3, [r7, #16]
 8005bfc:	015a      	lsls	r2, r3, #5
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	4413      	add	r3, r2
 8005c02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c06:	691b      	ldr	r3, [r3, #16]
 8005c08:	693a      	ldr	r2, [r7, #16]
 8005c0a:	0151      	lsls	r1, r2, #5
 8005c0c:	697a      	ldr	r2, [r7, #20]
 8005c0e:	440a      	add	r2, r1
 8005c10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c14:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005c18:	6113      	str	r3, [r2, #16]
 8005c1a:	e01b      	b.n	8005c54 <USB_EPStartXfer+0x144>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005c1c:	693b      	ldr	r3, [r7, #16]
 8005c1e:	015a      	lsls	r2, r3, #5
 8005c20:	697b      	ldr	r3, [r7, #20]
 8005c22:	4413      	add	r3, r2
 8005c24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c28:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	6919      	ldr	r1, [r3, #16]
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	689b      	ldr	r3, [r3, #8]
 8005c32:	440b      	add	r3, r1
 8005c34:	1e59      	subs	r1, r3, #1
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	689b      	ldr	r3, [r3, #8]
 8005c3a:	fbb1 f3f3 	udiv	r3, r1, r3
 8005c3e:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005c40:	4b8d      	ldr	r3, [pc, #564]	; (8005e78 <USB_EPStartXfer+0x368>)
 8005c42:	400b      	ands	r3, r1
 8005c44:	6939      	ldr	r1, [r7, #16]
 8005c46:	0148      	lsls	r0, r1, #5
 8005c48:	6979      	ldr	r1, [r7, #20]
 8005c4a:	4401      	add	r1, r0
 8005c4c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005c50:	4313      	orrs	r3, r2
 8005c52:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005c54:	693b      	ldr	r3, [r7, #16]
 8005c56:	015a      	lsls	r2, r3, #5
 8005c58:	697b      	ldr	r3, [r7, #20]
 8005c5a:	4413      	add	r3, r2
 8005c5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c60:	691a      	ldr	r2, [r3, #16]
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	691b      	ldr	r3, [r3, #16]
 8005c66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c6a:	6939      	ldr	r1, [r7, #16]
 8005c6c:	0148      	lsls	r0, r1, #5
 8005c6e:	6979      	ldr	r1, [r7, #20]
 8005c70:	4401      	add	r1, r0
 8005c72:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005c76:	4313      	orrs	r3, r2
 8005c78:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	791b      	ldrb	r3, [r3, #4]
 8005c7e:	2b01      	cmp	r3, #1
 8005c80:	d11f      	bne.n	8005cc2 <USB_EPStartXfer+0x1b2>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	015a      	lsls	r2, r3, #5
 8005c86:	697b      	ldr	r3, [r7, #20]
 8005c88:	4413      	add	r3, r2
 8005c8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c8e:	691b      	ldr	r3, [r3, #16]
 8005c90:	693a      	ldr	r2, [r7, #16]
 8005c92:	0151      	lsls	r1, r2, #5
 8005c94:	697a      	ldr	r2, [r7, #20]
 8005c96:	440a      	add	r2, r1
 8005c98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c9c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005ca0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005ca2:	693b      	ldr	r3, [r7, #16]
 8005ca4:	015a      	lsls	r2, r3, #5
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	4413      	add	r3, r2
 8005caa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cae:	691b      	ldr	r3, [r3, #16]
 8005cb0:	693a      	ldr	r2, [r7, #16]
 8005cb2:	0151      	lsls	r1, r2, #5
 8005cb4:	697a      	ldr	r2, [r7, #20]
 8005cb6:	440a      	add	r2, r1
 8005cb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cbc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005cc0:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	015a      	lsls	r2, r3, #5
 8005cc6:	697b      	ldr	r3, [r7, #20]
 8005cc8:	4413      	add	r3, r2
 8005cca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	693a      	ldr	r2, [r7, #16]
 8005cd2:	0151      	lsls	r1, r2, #5
 8005cd4:	697a      	ldr	r2, [r7, #20]
 8005cd6:	440a      	add	r2, r1
 8005cd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cdc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005ce0:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	791b      	ldrb	r3, [r3, #4]
 8005ce6:	2b01      	cmp	r3, #1
 8005ce8:	d015      	beq.n	8005d16 <USB_EPStartXfer+0x206>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	691b      	ldr	r3, [r3, #16]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	f000 8139 	beq.w	8005f66 <USB_EPStartXfer+0x456>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cfa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	781b      	ldrb	r3, [r3, #0]
 8005d00:	f003 030f 	and.w	r3, r3, #15
 8005d04:	2101      	movs	r1, #1
 8005d06:	fa01 f303 	lsl.w	r3, r1, r3
 8005d0a:	6979      	ldr	r1, [r7, #20]
 8005d0c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d10:	4313      	orrs	r3, r2
 8005d12:	634b      	str	r3, [r1, #52]	; 0x34
 8005d14:	e127      	b.n	8005f66 <USB_EPStartXfer+0x456>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d1c:	689b      	ldr	r3, [r3, #8]
 8005d1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d110      	bne.n	8005d48 <USB_EPStartXfer+0x238>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005d26:	693b      	ldr	r3, [r7, #16]
 8005d28:	015a      	lsls	r2, r3, #5
 8005d2a:	697b      	ldr	r3, [r7, #20]
 8005d2c:	4413      	add	r3, r2
 8005d2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	693a      	ldr	r2, [r7, #16]
 8005d36:	0151      	lsls	r1, r2, #5
 8005d38:	697a      	ldr	r2, [r7, #20]
 8005d3a:	440a      	add	r2, r1
 8005d3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d40:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005d44:	6013      	str	r3, [r2, #0]
 8005d46:	e00f      	b.n	8005d68 <USB_EPStartXfer+0x258>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005d48:	693b      	ldr	r3, [r7, #16]
 8005d4a:	015a      	lsls	r2, r3, #5
 8005d4c:	697b      	ldr	r3, [r7, #20]
 8005d4e:	4413      	add	r3, r2
 8005d50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	693a      	ldr	r2, [r7, #16]
 8005d58:	0151      	lsls	r1, r2, #5
 8005d5a:	697a      	ldr	r2, [r7, #20]
 8005d5c:	440a      	add	r2, r1
 8005d5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d66:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	68d9      	ldr	r1, [r3, #12]
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	781a      	ldrb	r2, [r3, #0]
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	691b      	ldr	r3, [r3, #16]
 8005d74:	b29b      	uxth	r3, r3
 8005d76:	6878      	ldr	r0, [r7, #4]
 8005d78:	f000 f9a6 	bl	80060c8 <USB_WritePacket>
 8005d7c:	e0f3      	b.n	8005f66 <USB_EPStartXfer+0x456>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	015a      	lsls	r2, r3, #5
 8005d82:	697b      	ldr	r3, [r7, #20]
 8005d84:	4413      	add	r3, r2
 8005d86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d8a:	691b      	ldr	r3, [r3, #16]
 8005d8c:	693a      	ldr	r2, [r7, #16]
 8005d8e:	0151      	lsls	r1, r2, #5
 8005d90:	697a      	ldr	r2, [r7, #20]
 8005d92:	440a      	add	r2, r1
 8005d94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d98:	0cdb      	lsrs	r3, r3, #19
 8005d9a:	04db      	lsls	r3, r3, #19
 8005d9c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	015a      	lsls	r2, r3, #5
 8005da2:	697b      	ldr	r3, [r7, #20]
 8005da4:	4413      	add	r3, r2
 8005da6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005daa:	691b      	ldr	r3, [r3, #16]
 8005dac:	693a      	ldr	r2, [r7, #16]
 8005dae:	0151      	lsls	r1, r2, #5
 8005db0:	697a      	ldr	r2, [r7, #20]
 8005db2:	440a      	add	r2, r1
 8005db4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005db8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005dbc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005dc0:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8005dc2:	693b      	ldr	r3, [r7, #16]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d12f      	bne.n	8005e28 <USB_EPStartXfer+0x318>
    {
      if (ep->xfer_len > 0U)
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	691b      	ldr	r3, [r3, #16]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d003      	beq.n	8005dd8 <USB_EPStartXfer+0x2c8>
      {
        ep->xfer_len = ep->maxpacket;
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	689a      	ldr	r2, [r3, #8]
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	689a      	ldr	r2, [r3, #8]
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005de0:	693b      	ldr	r3, [r7, #16]
 8005de2:	015a      	lsls	r2, r3, #5
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	4413      	add	r3, r2
 8005de8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dec:	691a      	ldr	r2, [r3, #16]
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	6a1b      	ldr	r3, [r3, #32]
 8005df2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005df6:	6939      	ldr	r1, [r7, #16]
 8005df8:	0148      	lsls	r0, r1, #5
 8005dfa:	6979      	ldr	r1, [r7, #20]
 8005dfc:	4401      	add	r1, r0
 8005dfe:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005e02:	4313      	orrs	r3, r2
 8005e04:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005e06:	693b      	ldr	r3, [r7, #16]
 8005e08:	015a      	lsls	r2, r3, #5
 8005e0a:	697b      	ldr	r3, [r7, #20]
 8005e0c:	4413      	add	r3, r2
 8005e0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e12:	691b      	ldr	r3, [r3, #16]
 8005e14:	693a      	ldr	r2, [r7, #16]
 8005e16:	0151      	lsls	r1, r2, #5
 8005e18:	697a      	ldr	r2, [r7, #20]
 8005e1a:	440a      	add	r2, r1
 8005e1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e20:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005e24:	6113      	str	r3, [r2, #16]
 8005e26:	e061      	b.n	8005eec <USB_EPStartXfer+0x3dc>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	691b      	ldr	r3, [r3, #16]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d125      	bne.n	8005e7c <USB_EPStartXfer+0x36c>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005e30:	693b      	ldr	r3, [r7, #16]
 8005e32:	015a      	lsls	r2, r3, #5
 8005e34:	697b      	ldr	r3, [r7, #20]
 8005e36:	4413      	add	r3, r2
 8005e38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e3c:	691a      	ldr	r2, [r3, #16]
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	689b      	ldr	r3, [r3, #8]
 8005e42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e46:	6939      	ldr	r1, [r7, #16]
 8005e48:	0148      	lsls	r0, r1, #5
 8005e4a:	6979      	ldr	r1, [r7, #20]
 8005e4c:	4401      	add	r1, r0
 8005e4e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005e52:	4313      	orrs	r3, r2
 8005e54:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005e56:	693b      	ldr	r3, [r7, #16]
 8005e58:	015a      	lsls	r2, r3, #5
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	4413      	add	r3, r2
 8005e5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e62:	691b      	ldr	r3, [r3, #16]
 8005e64:	693a      	ldr	r2, [r7, #16]
 8005e66:	0151      	lsls	r1, r2, #5
 8005e68:	697a      	ldr	r2, [r7, #20]
 8005e6a:	440a      	add	r2, r1
 8005e6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e70:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005e74:	6113      	str	r3, [r2, #16]
 8005e76:	e039      	b.n	8005eec <USB_EPStartXfer+0x3dc>
 8005e78:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	691a      	ldr	r2, [r3, #16]
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	689b      	ldr	r3, [r3, #8]
 8005e84:	4413      	add	r3, r2
 8005e86:	1e5a      	subs	r2, r3, #1
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	689b      	ldr	r3, [r3, #8]
 8005e8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e90:	81fb      	strh	r3, [r7, #14]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	689b      	ldr	r3, [r3, #8]
 8005e96:	89fa      	ldrh	r2, [r7, #14]
 8005e98:	fb03 f202 	mul.w	r2, r3, r2
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005ea0:	693b      	ldr	r3, [r7, #16]
 8005ea2:	015a      	lsls	r2, r3, #5
 8005ea4:	697b      	ldr	r3, [r7, #20]
 8005ea6:	4413      	add	r3, r2
 8005ea8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eac:	691a      	ldr	r2, [r3, #16]
 8005eae:	89fb      	ldrh	r3, [r7, #14]
 8005eb0:	04d9      	lsls	r1, r3, #19
 8005eb2:	4b2f      	ldr	r3, [pc, #188]	; (8005f70 <USB_EPStartXfer+0x460>)
 8005eb4:	400b      	ands	r3, r1
 8005eb6:	6939      	ldr	r1, [r7, #16]
 8005eb8:	0148      	lsls	r0, r1, #5
 8005eba:	6979      	ldr	r1, [r7, #20]
 8005ebc:	4401      	add	r1, r0
 8005ebe:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005ec6:	693b      	ldr	r3, [r7, #16]
 8005ec8:	015a      	lsls	r2, r3, #5
 8005eca:	697b      	ldr	r3, [r7, #20]
 8005ecc:	4413      	add	r3, r2
 8005ece:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ed2:	691a      	ldr	r2, [r3, #16]
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	6a1b      	ldr	r3, [r3, #32]
 8005ed8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005edc:	6939      	ldr	r1, [r7, #16]
 8005ede:	0148      	lsls	r0, r1, #5
 8005ee0:	6979      	ldr	r1, [r7, #20]
 8005ee2:	4401      	add	r1, r0
 8005ee4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	610b      	str	r3, [r1, #16]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	791b      	ldrb	r3, [r3, #4]
 8005ef0:	2b01      	cmp	r3, #1
 8005ef2:	d128      	bne.n	8005f46 <USB_EPStartXfer+0x436>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005ef4:	697b      	ldr	r3, [r7, #20]
 8005ef6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005efa:	689b      	ldr	r3, [r3, #8]
 8005efc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d110      	bne.n	8005f26 <USB_EPStartXfer+0x416>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005f04:	693b      	ldr	r3, [r7, #16]
 8005f06:	015a      	lsls	r2, r3, #5
 8005f08:	697b      	ldr	r3, [r7, #20]
 8005f0a:	4413      	add	r3, r2
 8005f0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	693a      	ldr	r2, [r7, #16]
 8005f14:	0151      	lsls	r1, r2, #5
 8005f16:	697a      	ldr	r2, [r7, #20]
 8005f18:	440a      	add	r2, r1
 8005f1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f1e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005f22:	6013      	str	r3, [r2, #0]
 8005f24:	e00f      	b.n	8005f46 <USB_EPStartXfer+0x436>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005f26:	693b      	ldr	r3, [r7, #16]
 8005f28:	015a      	lsls	r2, r3, #5
 8005f2a:	697b      	ldr	r3, [r7, #20]
 8005f2c:	4413      	add	r3, r2
 8005f2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	693a      	ldr	r2, [r7, #16]
 8005f36:	0151      	lsls	r1, r2, #5
 8005f38:	697a      	ldr	r2, [r7, #20]
 8005f3a:	440a      	add	r2, r1
 8005f3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f44:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005f46:	693b      	ldr	r3, [r7, #16]
 8005f48:	015a      	lsls	r2, r3, #5
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	4413      	add	r3, r2
 8005f4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	693a      	ldr	r2, [r7, #16]
 8005f56:	0151      	lsls	r1, r2, #5
 8005f58:	697a      	ldr	r2, [r7, #20]
 8005f5a:	440a      	add	r2, r1
 8005f5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f60:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005f64:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005f66:	2300      	movs	r3, #0
}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	3718      	adds	r7, #24
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	bd80      	pop	{r7, pc}
 8005f70:	1ff80000 	.word	0x1ff80000

08005f74 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005f74:	b480      	push	{r7}
 8005f76:	b087      	sub	sp, #28
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
 8005f7c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005f7e:	2300      	movs	r3, #0
 8005f80:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005f82:	2300      	movs	r3, #0
 8005f84:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	785b      	ldrb	r3, [r3, #1]
 8005f8e:	2b01      	cmp	r3, #1
 8005f90:	d14a      	bne.n	8006028 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	781b      	ldrb	r3, [r3, #0]
 8005f96:	015a      	lsls	r2, r3, #5
 8005f98:	693b      	ldr	r3, [r7, #16]
 8005f9a:	4413      	add	r3, r2
 8005f9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005fa6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005faa:	f040 8086 	bne.w	80060ba <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	781b      	ldrb	r3, [r3, #0]
 8005fb2:	015a      	lsls	r2, r3, #5
 8005fb4:	693b      	ldr	r3, [r7, #16]
 8005fb6:	4413      	add	r3, r2
 8005fb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	683a      	ldr	r2, [r7, #0]
 8005fc0:	7812      	ldrb	r2, [r2, #0]
 8005fc2:	0151      	lsls	r1, r2, #5
 8005fc4:	693a      	ldr	r2, [r7, #16]
 8005fc6:	440a      	add	r2, r1
 8005fc8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fcc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005fd0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	781b      	ldrb	r3, [r3, #0]
 8005fd6:	015a      	lsls	r2, r3, #5
 8005fd8:	693b      	ldr	r3, [r7, #16]
 8005fda:	4413      	add	r3, r2
 8005fdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	683a      	ldr	r2, [r7, #0]
 8005fe4:	7812      	ldrb	r2, [r2, #0]
 8005fe6:	0151      	lsls	r1, r2, #5
 8005fe8:	693a      	ldr	r2, [r7, #16]
 8005fea:	440a      	add	r2, r1
 8005fec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ff0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005ff4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	3301      	adds	r3, #1
 8005ffa:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	f242 7210 	movw	r2, #10000	; 0x2710
 8006002:	4293      	cmp	r3, r2
 8006004:	d902      	bls.n	800600c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006006:	2301      	movs	r3, #1
 8006008:	75fb      	strb	r3, [r7, #23]
          break;
 800600a:	e056      	b.n	80060ba <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	781b      	ldrb	r3, [r3, #0]
 8006010:	015a      	lsls	r2, r3, #5
 8006012:	693b      	ldr	r3, [r7, #16]
 8006014:	4413      	add	r3, r2
 8006016:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006020:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006024:	d0e7      	beq.n	8005ff6 <USB_EPStopXfer+0x82>
 8006026:	e048      	b.n	80060ba <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	781b      	ldrb	r3, [r3, #0]
 800602c:	015a      	lsls	r2, r3, #5
 800602e:	693b      	ldr	r3, [r7, #16]
 8006030:	4413      	add	r3, r2
 8006032:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800603c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006040:	d13b      	bne.n	80060ba <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	781b      	ldrb	r3, [r3, #0]
 8006046:	015a      	lsls	r2, r3, #5
 8006048:	693b      	ldr	r3, [r7, #16]
 800604a:	4413      	add	r3, r2
 800604c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	683a      	ldr	r2, [r7, #0]
 8006054:	7812      	ldrb	r2, [r2, #0]
 8006056:	0151      	lsls	r1, r2, #5
 8006058:	693a      	ldr	r2, [r7, #16]
 800605a:	440a      	add	r2, r1
 800605c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006060:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006064:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	781b      	ldrb	r3, [r3, #0]
 800606a:	015a      	lsls	r2, r3, #5
 800606c:	693b      	ldr	r3, [r7, #16]
 800606e:	4413      	add	r3, r2
 8006070:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	683a      	ldr	r2, [r7, #0]
 8006078:	7812      	ldrb	r2, [r2, #0]
 800607a:	0151      	lsls	r1, r2, #5
 800607c:	693a      	ldr	r2, [r7, #16]
 800607e:	440a      	add	r2, r1
 8006080:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006084:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006088:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	3301      	adds	r3, #1
 800608e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	f242 7210 	movw	r2, #10000	; 0x2710
 8006096:	4293      	cmp	r3, r2
 8006098:	d902      	bls.n	80060a0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800609a:	2301      	movs	r3, #1
 800609c:	75fb      	strb	r3, [r7, #23]
          break;
 800609e:	e00c      	b.n	80060ba <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	781b      	ldrb	r3, [r3, #0]
 80060a4:	015a      	lsls	r2, r3, #5
 80060a6:	693b      	ldr	r3, [r7, #16]
 80060a8:	4413      	add	r3, r2
 80060aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80060b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80060b8:	d0e7      	beq.n	800608a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80060ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80060bc:	4618      	mov	r0, r3
 80060be:	371c      	adds	r7, #28
 80060c0:	46bd      	mov	sp, r7
 80060c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c6:	4770      	bx	lr

080060c8 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 80060c8:	b480      	push	{r7}
 80060ca:	b089      	sub	sp, #36	; 0x24
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	60f8      	str	r0, [r7, #12]
 80060d0:	60b9      	str	r1, [r7, #8]
 80060d2:	4611      	mov	r1, r2
 80060d4:	461a      	mov	r2, r3
 80060d6:	460b      	mov	r3, r1
 80060d8:	71fb      	strb	r3, [r7, #7]
 80060da:	4613      	mov	r3, r2
 80060dc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 80060e6:	88bb      	ldrh	r3, [r7, #4]
 80060e8:	3303      	adds	r3, #3
 80060ea:	089b      	lsrs	r3, r3, #2
 80060ec:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 80060ee:	2300      	movs	r3, #0
 80060f0:	61bb      	str	r3, [r7, #24]
 80060f2:	e018      	b.n	8006126 <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80060f4:	79fb      	ldrb	r3, [r7, #7]
 80060f6:	031a      	lsls	r2, r3, #12
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	4413      	add	r3, r2
 80060fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006100:	461a      	mov	r2, r3
 8006102:	69fb      	ldr	r3, [r7, #28]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	6013      	str	r3, [r2, #0]
    pSrc++;
 8006108:	69fb      	ldr	r3, [r7, #28]
 800610a:	3301      	adds	r3, #1
 800610c:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800610e:	69fb      	ldr	r3, [r7, #28]
 8006110:	3301      	adds	r3, #1
 8006112:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8006114:	69fb      	ldr	r3, [r7, #28]
 8006116:	3301      	adds	r3, #1
 8006118:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800611a:	69fb      	ldr	r3, [r7, #28]
 800611c:	3301      	adds	r3, #1
 800611e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8006120:	69bb      	ldr	r3, [r7, #24]
 8006122:	3301      	adds	r3, #1
 8006124:	61bb      	str	r3, [r7, #24]
 8006126:	69ba      	ldr	r2, [r7, #24]
 8006128:	693b      	ldr	r3, [r7, #16]
 800612a:	429a      	cmp	r2, r3
 800612c:	d3e2      	bcc.n	80060f4 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 800612e:	2300      	movs	r3, #0
}
 8006130:	4618      	mov	r0, r3
 8006132:	3724      	adds	r7, #36	; 0x24
 8006134:	46bd      	mov	sp, r7
 8006136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613a:	4770      	bx	lr

0800613c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800613c:	b480      	push	{r7}
 800613e:	b08b      	sub	sp, #44	; 0x2c
 8006140:	af00      	add	r7, sp, #0
 8006142:	60f8      	str	r0, [r7, #12]
 8006144:	60b9      	str	r1, [r7, #8]
 8006146:	4613      	mov	r3, r2
 8006148:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800614e:	68bb      	ldr	r3, [r7, #8]
 8006150:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006152:	88fb      	ldrh	r3, [r7, #6]
 8006154:	089b      	lsrs	r3, r3, #2
 8006156:	b29b      	uxth	r3, r3
 8006158:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800615a:	88fb      	ldrh	r3, [r7, #6]
 800615c:	f003 0303 	and.w	r3, r3, #3
 8006160:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006162:	2300      	movs	r3, #0
 8006164:	623b      	str	r3, [r7, #32]
 8006166:	e014      	b.n	8006192 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006168:	69bb      	ldr	r3, [r7, #24]
 800616a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800616e:	681a      	ldr	r2, [r3, #0]
 8006170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006172:	601a      	str	r2, [r3, #0]
    pDest++;
 8006174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006176:	3301      	adds	r3, #1
 8006178:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800617a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800617c:	3301      	adds	r3, #1
 800617e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006182:	3301      	adds	r3, #1
 8006184:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006188:	3301      	adds	r3, #1
 800618a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800618c:	6a3b      	ldr	r3, [r7, #32]
 800618e:	3301      	adds	r3, #1
 8006190:	623b      	str	r3, [r7, #32]
 8006192:	6a3a      	ldr	r2, [r7, #32]
 8006194:	697b      	ldr	r3, [r7, #20]
 8006196:	429a      	cmp	r2, r3
 8006198:	d3e6      	bcc.n	8006168 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800619a:	8bfb      	ldrh	r3, [r7, #30]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d01e      	beq.n	80061de <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80061a0:	2300      	movs	r3, #0
 80061a2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80061a4:	69bb      	ldr	r3, [r7, #24]
 80061a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80061aa:	461a      	mov	r2, r3
 80061ac:	f107 0310 	add.w	r3, r7, #16
 80061b0:	6812      	ldr	r2, [r2, #0]
 80061b2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80061b4:	693a      	ldr	r2, [r7, #16]
 80061b6:	6a3b      	ldr	r3, [r7, #32]
 80061b8:	b2db      	uxtb	r3, r3
 80061ba:	00db      	lsls	r3, r3, #3
 80061bc:	fa22 f303 	lsr.w	r3, r2, r3
 80061c0:	b2da      	uxtb	r2, r3
 80061c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c4:	701a      	strb	r2, [r3, #0]
      i++;
 80061c6:	6a3b      	ldr	r3, [r7, #32]
 80061c8:	3301      	adds	r3, #1
 80061ca:	623b      	str	r3, [r7, #32]
      pDest++;
 80061cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ce:	3301      	adds	r3, #1
 80061d0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80061d2:	8bfb      	ldrh	r3, [r7, #30]
 80061d4:	3b01      	subs	r3, #1
 80061d6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80061d8:	8bfb      	ldrh	r3, [r7, #30]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d1ea      	bne.n	80061b4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80061de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80061e0:	4618      	mov	r0, r3
 80061e2:	372c      	adds	r7, #44	; 0x2c
 80061e4:	46bd      	mov	sp, r7
 80061e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ea:	4770      	bx	lr

080061ec <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80061ec:	b480      	push	{r7}
 80061ee:	b085      	sub	sp, #20
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
 80061f4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	781b      	ldrb	r3, [r3, #0]
 80061fe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	785b      	ldrb	r3, [r3, #1]
 8006204:	2b01      	cmp	r3, #1
 8006206:	d12c      	bne.n	8006262 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	015a      	lsls	r2, r3, #5
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	4413      	add	r3, r2
 8006210:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	2b00      	cmp	r3, #0
 8006218:	db12      	blt.n	8006240 <USB_EPSetStall+0x54>
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d00f      	beq.n	8006240 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	015a      	lsls	r2, r3, #5
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	4413      	add	r3, r2
 8006228:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	68ba      	ldr	r2, [r7, #8]
 8006230:	0151      	lsls	r1, r2, #5
 8006232:	68fa      	ldr	r2, [r7, #12]
 8006234:	440a      	add	r2, r1
 8006236:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800623a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800623e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	015a      	lsls	r2, r3, #5
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	4413      	add	r3, r2
 8006248:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	68ba      	ldr	r2, [r7, #8]
 8006250:	0151      	lsls	r1, r2, #5
 8006252:	68fa      	ldr	r2, [r7, #12]
 8006254:	440a      	add	r2, r1
 8006256:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800625a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800625e:	6013      	str	r3, [r2, #0]
 8006260:	e02b      	b.n	80062ba <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	015a      	lsls	r2, r3, #5
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	4413      	add	r3, r2
 800626a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	2b00      	cmp	r3, #0
 8006272:	db12      	blt.n	800629a <USB_EPSetStall+0xae>
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d00f      	beq.n	800629a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	015a      	lsls	r2, r3, #5
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	4413      	add	r3, r2
 8006282:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	68ba      	ldr	r2, [r7, #8]
 800628a:	0151      	lsls	r1, r2, #5
 800628c:	68fa      	ldr	r2, [r7, #12]
 800628e:	440a      	add	r2, r1
 8006290:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006294:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006298:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	015a      	lsls	r2, r3, #5
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	4413      	add	r3, r2
 80062a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	68ba      	ldr	r2, [r7, #8]
 80062aa:	0151      	lsls	r1, r2, #5
 80062ac:	68fa      	ldr	r2, [r7, #12]
 80062ae:	440a      	add	r2, r1
 80062b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062b4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80062b8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80062ba:	2300      	movs	r3, #0
}
 80062bc:	4618      	mov	r0, r3
 80062be:	3714      	adds	r7, #20
 80062c0:	46bd      	mov	sp, r7
 80062c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c6:	4770      	bx	lr

080062c8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80062c8:	b480      	push	{r7}
 80062ca:	b085      	sub	sp, #20
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
 80062d0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	781b      	ldrb	r3, [r3, #0]
 80062da:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	785b      	ldrb	r3, [r3, #1]
 80062e0:	2b01      	cmp	r3, #1
 80062e2:	d128      	bne.n	8006336 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	015a      	lsls	r2, r3, #5
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	4413      	add	r3, r2
 80062ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	68ba      	ldr	r2, [r7, #8]
 80062f4:	0151      	lsls	r1, r2, #5
 80062f6:	68fa      	ldr	r2, [r7, #12]
 80062f8:	440a      	add	r2, r1
 80062fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062fe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006302:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	791b      	ldrb	r3, [r3, #4]
 8006308:	2b03      	cmp	r3, #3
 800630a:	d003      	beq.n	8006314 <USB_EPClearStall+0x4c>
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	791b      	ldrb	r3, [r3, #4]
 8006310:	2b02      	cmp	r3, #2
 8006312:	d138      	bne.n	8006386 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	015a      	lsls	r2, r3, #5
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	4413      	add	r3, r2
 800631c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	68ba      	ldr	r2, [r7, #8]
 8006324:	0151      	lsls	r1, r2, #5
 8006326:	68fa      	ldr	r2, [r7, #12]
 8006328:	440a      	add	r2, r1
 800632a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800632e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006332:	6013      	str	r3, [r2, #0]
 8006334:	e027      	b.n	8006386 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	015a      	lsls	r2, r3, #5
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	4413      	add	r3, r2
 800633e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	68ba      	ldr	r2, [r7, #8]
 8006346:	0151      	lsls	r1, r2, #5
 8006348:	68fa      	ldr	r2, [r7, #12]
 800634a:	440a      	add	r2, r1
 800634c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006350:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006354:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	791b      	ldrb	r3, [r3, #4]
 800635a:	2b03      	cmp	r3, #3
 800635c:	d003      	beq.n	8006366 <USB_EPClearStall+0x9e>
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	791b      	ldrb	r3, [r3, #4]
 8006362:	2b02      	cmp	r3, #2
 8006364:	d10f      	bne.n	8006386 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006366:	68bb      	ldr	r3, [r7, #8]
 8006368:	015a      	lsls	r2, r3, #5
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	4413      	add	r3, r2
 800636e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	68ba      	ldr	r2, [r7, #8]
 8006376:	0151      	lsls	r1, r2, #5
 8006378:	68fa      	ldr	r2, [r7, #12]
 800637a:	440a      	add	r2, r1
 800637c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006380:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006384:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006386:	2300      	movs	r3, #0
}
 8006388:	4618      	mov	r0, r3
 800638a:	3714      	adds	r7, #20
 800638c:	46bd      	mov	sp, r7
 800638e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006392:	4770      	bx	lr

08006394 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006394:	b480      	push	{r7}
 8006396:	b085      	sub	sp, #20
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
 800639c:	460b      	mov	r3, r1
 800639e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	68fa      	ldr	r2, [r7, #12]
 80063ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80063b2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80063b6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063be:	681a      	ldr	r2, [r3, #0]
 80063c0:	78fb      	ldrb	r3, [r7, #3]
 80063c2:	011b      	lsls	r3, r3, #4
 80063c4:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80063c8:	68f9      	ldr	r1, [r7, #12]
 80063ca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80063ce:	4313      	orrs	r3, r2
 80063d0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80063d2:	2300      	movs	r3, #0
}
 80063d4:	4618      	mov	r0, r3
 80063d6:	3714      	adds	r7, #20
 80063d8:	46bd      	mov	sp, r7
 80063da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063de:	4770      	bx	lr

080063e0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80063e0:	b480      	push	{r7}
 80063e2:	b085      	sub	sp, #20
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	68fa      	ldr	r2, [r7, #12]
 80063f6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80063fa:	f023 0303 	bic.w	r3, r3, #3
 80063fe:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006406:	685b      	ldr	r3, [r3, #4]
 8006408:	68fa      	ldr	r2, [r7, #12]
 800640a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800640e:	f023 0302 	bic.w	r3, r3, #2
 8006412:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006414:	2300      	movs	r3, #0
}
 8006416:	4618      	mov	r0, r3
 8006418:	3714      	adds	r7, #20
 800641a:	46bd      	mov	sp, r7
 800641c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006420:	4770      	bx	lr

08006422 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006422:	b480      	push	{r7}
 8006424:	b085      	sub	sp, #20
 8006426:	af00      	add	r7, sp, #0
 8006428:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	68fa      	ldr	r2, [r7, #12]
 8006438:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800643c:	f023 0303 	bic.w	r3, r3, #3
 8006440:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006448:	685b      	ldr	r3, [r3, #4]
 800644a:	68fa      	ldr	r2, [r7, #12]
 800644c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006450:	f043 0302 	orr.w	r3, r3, #2
 8006454:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006456:	2300      	movs	r3, #0
}
 8006458:	4618      	mov	r0, r3
 800645a:	3714      	adds	r7, #20
 800645c:	46bd      	mov	sp, r7
 800645e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006462:	4770      	bx	lr

08006464 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006464:	b480      	push	{r7}
 8006466:	b085      	sub	sp, #20
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	695b      	ldr	r3, [r3, #20]
 8006470:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	699b      	ldr	r3, [r3, #24]
 8006476:	68fa      	ldr	r2, [r7, #12]
 8006478:	4013      	ands	r3, r2
 800647a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800647c:	68fb      	ldr	r3, [r7, #12]
}
 800647e:	4618      	mov	r0, r3
 8006480:	3714      	adds	r7, #20
 8006482:	46bd      	mov	sp, r7
 8006484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006488:	4770      	bx	lr

0800648a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800648a:	b480      	push	{r7}
 800648c:	b085      	sub	sp, #20
 800648e:	af00      	add	r7, sp, #0
 8006490:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800649c:	699b      	ldr	r3, [r3, #24]
 800649e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064a6:	69db      	ldr	r3, [r3, #28]
 80064a8:	68ba      	ldr	r2, [r7, #8]
 80064aa:	4013      	ands	r3, r2
 80064ac:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	0c1b      	lsrs	r3, r3, #16
}
 80064b2:	4618      	mov	r0, r3
 80064b4:	3714      	adds	r7, #20
 80064b6:	46bd      	mov	sp, r7
 80064b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064bc:	4770      	bx	lr

080064be <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80064be:	b480      	push	{r7}
 80064c0:	b085      	sub	sp, #20
 80064c2:	af00      	add	r7, sp, #0
 80064c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064d0:	699b      	ldr	r3, [r3, #24]
 80064d2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064da:	69db      	ldr	r3, [r3, #28]
 80064dc:	68ba      	ldr	r2, [r7, #8]
 80064de:	4013      	ands	r3, r2
 80064e0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80064e2:	68bb      	ldr	r3, [r7, #8]
 80064e4:	b29b      	uxth	r3, r3
}
 80064e6:	4618      	mov	r0, r3
 80064e8:	3714      	adds	r7, #20
 80064ea:	46bd      	mov	sp, r7
 80064ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f0:	4770      	bx	lr

080064f2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80064f2:	b480      	push	{r7}
 80064f4:	b085      	sub	sp, #20
 80064f6:	af00      	add	r7, sp, #0
 80064f8:	6078      	str	r0, [r7, #4]
 80064fa:	460b      	mov	r3, r1
 80064fc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006502:	78fb      	ldrb	r3, [r7, #3]
 8006504:	015a      	lsls	r2, r3, #5
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	4413      	add	r3, r2
 800650a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800650e:	689b      	ldr	r3, [r3, #8]
 8006510:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006518:	695b      	ldr	r3, [r3, #20]
 800651a:	68ba      	ldr	r2, [r7, #8]
 800651c:	4013      	ands	r3, r2
 800651e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006520:	68bb      	ldr	r3, [r7, #8]
}
 8006522:	4618      	mov	r0, r3
 8006524:	3714      	adds	r7, #20
 8006526:	46bd      	mov	sp, r7
 8006528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652c:	4770      	bx	lr

0800652e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800652e:	b480      	push	{r7}
 8006530:	b087      	sub	sp, #28
 8006532:	af00      	add	r7, sp, #0
 8006534:	6078      	str	r0, [r7, #4]
 8006536:	460b      	mov	r3, r1
 8006538:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006544:	691b      	ldr	r3, [r3, #16]
 8006546:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006548:	697b      	ldr	r3, [r7, #20]
 800654a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800654e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006550:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006552:	78fb      	ldrb	r3, [r7, #3]
 8006554:	f003 030f 	and.w	r3, r3, #15
 8006558:	68fa      	ldr	r2, [r7, #12]
 800655a:	fa22 f303 	lsr.w	r3, r2, r3
 800655e:	01db      	lsls	r3, r3, #7
 8006560:	b2db      	uxtb	r3, r3
 8006562:	693a      	ldr	r2, [r7, #16]
 8006564:	4313      	orrs	r3, r2
 8006566:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006568:	78fb      	ldrb	r3, [r7, #3]
 800656a:	015a      	lsls	r2, r3, #5
 800656c:	697b      	ldr	r3, [r7, #20]
 800656e:	4413      	add	r3, r2
 8006570:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006574:	689b      	ldr	r3, [r3, #8]
 8006576:	693a      	ldr	r2, [r7, #16]
 8006578:	4013      	ands	r3, r2
 800657a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800657c:	68bb      	ldr	r3, [r7, #8]
}
 800657e:	4618      	mov	r0, r3
 8006580:	371c      	adds	r7, #28
 8006582:	46bd      	mov	sp, r7
 8006584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006588:	4770      	bx	lr

0800658a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800658a:	b480      	push	{r7}
 800658c:	b083      	sub	sp, #12
 800658e:	af00      	add	r7, sp, #0
 8006590:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	695b      	ldr	r3, [r3, #20]
 8006596:	f003 0301 	and.w	r3, r3, #1
}
 800659a:	4618      	mov	r0, r3
 800659c:	370c      	adds	r7, #12
 800659e:	46bd      	mov	sp, r7
 80065a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a4:	4770      	bx	lr

080065a6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80065a6:	b480      	push	{r7}
 80065a8:	b085      	sub	sp, #20
 80065aa:	af00      	add	r7, sp, #0
 80065ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	68fa      	ldr	r2, [r7, #12]
 80065bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065c0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80065c4:	f023 0307 	bic.w	r3, r3, #7
 80065c8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065d0:	685b      	ldr	r3, [r3, #4]
 80065d2:	68fa      	ldr	r2, [r7, #12]
 80065d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80065d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065dc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80065de:	2300      	movs	r3, #0
}
 80065e0:	4618      	mov	r0, r3
 80065e2:	3714      	adds	r7, #20
 80065e4:	46bd      	mov	sp, r7
 80065e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ea:	4770      	bx	lr

080065ec <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 80065ec:	b480      	push	{r7}
 80065ee:	b085      	sub	sp, #20
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
 80065f4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	333c      	adds	r3, #60	; 0x3c
 80065fe:	3304      	adds	r3, #4
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	4a1c      	ldr	r2, [pc, #112]	; (8006678 <USB_EP0_OutStart+0x8c>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d90a      	bls.n	8006622 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006618:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800661c:	d101      	bne.n	8006622 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 800661e:	2300      	movs	r3, #0
 8006620:	e024      	b.n	800666c <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006628:	461a      	mov	r2, r3
 800662a:	2300      	movs	r3, #0
 800662c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006634:	691b      	ldr	r3, [r3, #16]
 8006636:	68fa      	ldr	r2, [r7, #12]
 8006638:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800663c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006640:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006648:	691b      	ldr	r3, [r3, #16]
 800664a:	68fa      	ldr	r2, [r7, #12]
 800664c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006650:	f043 0318 	orr.w	r3, r3, #24
 8006654:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800665c:	691b      	ldr	r3, [r3, #16]
 800665e:	68fa      	ldr	r2, [r7, #12]
 8006660:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006664:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006668:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 800666a:	2300      	movs	r3, #0
}
 800666c:	4618      	mov	r0, r3
 800666e:	3714      	adds	r7, #20
 8006670:	46bd      	mov	sp, r7
 8006672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006676:	4770      	bx	lr
 8006678:	4f54300a 	.word	0x4f54300a

0800667c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800667c:	b480      	push	{r7}
 800667e:	b085      	sub	sp, #20
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006684:	2300      	movs	r3, #0
 8006686:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	3301      	adds	r3, #1
 800668c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	4a13      	ldr	r2, [pc, #76]	; (80066e0 <USB_CoreReset+0x64>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d901      	bls.n	800669a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006696:	2303      	movs	r3, #3
 8006698:	e01b      	b.n	80066d2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	691b      	ldr	r3, [r3, #16]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	daf2      	bge.n	8006688 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80066a2:	2300      	movs	r3, #0
 80066a4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	691b      	ldr	r3, [r3, #16]
 80066aa:	f043 0201 	orr.w	r2, r3, #1
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	3301      	adds	r3, #1
 80066b6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	4a09      	ldr	r2, [pc, #36]	; (80066e0 <USB_CoreReset+0x64>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d901      	bls.n	80066c4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80066c0:	2303      	movs	r3, #3
 80066c2:	e006      	b.n	80066d2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	691b      	ldr	r3, [r3, #16]
 80066c8:	f003 0301 	and.w	r3, r3, #1
 80066cc:	2b01      	cmp	r3, #1
 80066ce:	d0f0      	beq.n	80066b2 <USB_CoreReset+0x36>

  return HAL_OK;
 80066d0:	2300      	movs	r3, #0
}
 80066d2:	4618      	mov	r0, r3
 80066d4:	3714      	adds	r7, #20
 80066d6:	46bd      	mov	sp, r7
 80066d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066dc:	4770      	bx	lr
 80066de:	bf00      	nop
 80066e0:	00030d40 	.word	0x00030d40

080066e4 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b084      	sub	sp, #16
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
 80066ec:	460b      	mov	r3, r1
 80066ee:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 80066f0:	2010      	movs	r0, #16
 80066f2:	f005 f817 	bl	800b724 <USBD_static_malloc>
 80066f6:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d109      	bne.n	8006712 <USBD_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	32b0      	adds	r2, #176	; 0xb0
 8006708:	2100      	movs	r1, #0
 800670a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800670e:	2302      	movs	r3, #2
 8006710:	e048      	b.n	80067a4 <USBD_HID_Init+0xc0>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	32b0      	adds	r2, #176	; 0xb0
 800671c:	68f9      	ldr	r1, [r7, #12]
 800671e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	32b0      	adds	r2, #176	; 0xb0
 800672c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	7c1b      	ldrb	r3, [r3, #16]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d10d      	bne.n	800675a <USBD_HID_Init+0x76>
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 800673e:	4b1b      	ldr	r3, [pc, #108]	; (80067ac <USBD_HID_Init+0xc8>)
 8006740:	781b      	ldrb	r3, [r3, #0]
 8006742:	f003 020f 	and.w	r2, r3, #15
 8006746:	6879      	ldr	r1, [r7, #4]
 8006748:	4613      	mov	r3, r2
 800674a:	009b      	lsls	r3, r3, #2
 800674c:	4413      	add	r3, r2
 800674e:	009b      	lsls	r3, r3, #2
 8006750:	440b      	add	r3, r1
 8006752:	3326      	adds	r3, #38	; 0x26
 8006754:	2207      	movs	r2, #7
 8006756:	801a      	strh	r2, [r3, #0]
 8006758:	e00c      	b.n	8006774 <USBD_HID_Init+0x90>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 800675a:	4b14      	ldr	r3, [pc, #80]	; (80067ac <USBD_HID_Init+0xc8>)
 800675c:	781b      	ldrb	r3, [r3, #0]
 800675e:	f003 020f 	and.w	r2, r3, #15
 8006762:	6879      	ldr	r1, [r7, #4]
 8006764:	4613      	mov	r3, r2
 8006766:	009b      	lsls	r3, r3, #2
 8006768:	4413      	add	r3, r2
 800676a:	009b      	lsls	r3, r3, #2
 800676c:	440b      	add	r3, r1
 800676e:	3326      	adds	r3, #38	; 0x26
 8006770:	220a      	movs	r2, #10
 8006772:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8006774:	4b0d      	ldr	r3, [pc, #52]	; (80067ac <USBD_HID_Init+0xc8>)
 8006776:	7819      	ldrb	r1, [r3, #0]
 8006778:	2304      	movs	r3, #4
 800677a:	2203      	movs	r2, #3
 800677c:	6878      	ldr	r0, [r7, #4]
 800677e:	f004 fdd1 	bl	800b324 <USBD_LL_OpenEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 8006782:	4b0a      	ldr	r3, [pc, #40]	; (80067ac <USBD_HID_Init+0xc8>)
 8006784:	781b      	ldrb	r3, [r3, #0]
 8006786:	f003 020f 	and.w	r2, r3, #15
 800678a:	6879      	ldr	r1, [r7, #4]
 800678c:	4613      	mov	r3, r2
 800678e:	009b      	lsls	r3, r3, #2
 8006790:	4413      	add	r3, r2
 8006792:	009b      	lsls	r3, r3, #2
 8006794:	440b      	add	r3, r1
 8006796:	3324      	adds	r3, #36	; 0x24
 8006798:	2201      	movs	r2, #1
 800679a:	801a      	strh	r2, [r3, #0]

  hhid->state = USBD_HID_IDLE;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	2200      	movs	r2, #0
 80067a0:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 80067a2:	2300      	movs	r3, #0
}
 80067a4:	4618      	mov	r0, r3
 80067a6:	3710      	adds	r7, #16
 80067a8:	46bd      	mov	sp, r7
 80067aa:	bd80      	pop	{r7, pc}
 80067ac:	200000bf 	.word	0x200000bf

080067b0 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b082      	sub	sp, #8
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
 80067b8:	460b      	mov	r3, r1
 80067ba:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 80067bc:	4b1f      	ldr	r3, [pc, #124]	; (800683c <USBD_HID_DeInit+0x8c>)
 80067be:	781b      	ldrb	r3, [r3, #0]
 80067c0:	4619      	mov	r1, r3
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	f004 fdec 	bl	800b3a0 <USBD_LL_CloseEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 80067c8:	4b1c      	ldr	r3, [pc, #112]	; (800683c <USBD_HID_DeInit+0x8c>)
 80067ca:	781b      	ldrb	r3, [r3, #0]
 80067cc:	f003 020f 	and.w	r2, r3, #15
 80067d0:	6879      	ldr	r1, [r7, #4]
 80067d2:	4613      	mov	r3, r2
 80067d4:	009b      	lsls	r3, r3, #2
 80067d6:	4413      	add	r3, r2
 80067d8:	009b      	lsls	r3, r3, #2
 80067da:	440b      	add	r3, r1
 80067dc:	3324      	adds	r3, #36	; 0x24
 80067de:	2200      	movs	r2, #0
 80067e0:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 80067e2:	4b16      	ldr	r3, [pc, #88]	; (800683c <USBD_HID_DeInit+0x8c>)
 80067e4:	781b      	ldrb	r3, [r3, #0]
 80067e6:	f003 020f 	and.w	r2, r3, #15
 80067ea:	6879      	ldr	r1, [r7, #4]
 80067ec:	4613      	mov	r3, r2
 80067ee:	009b      	lsls	r3, r3, #2
 80067f0:	4413      	add	r3, r2
 80067f2:	009b      	lsls	r3, r3, #2
 80067f4:	440b      	add	r3, r1
 80067f6:	3326      	adds	r3, #38	; 0x26
 80067f8:	2200      	movs	r2, #0
 80067fa:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	32b0      	adds	r2, #176	; 0xb0
 8006806:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d011      	beq.n	8006832 <USBD_HID_DeInit+0x82>
  {
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	32b0      	adds	r2, #176	; 0xb0
 8006818:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800681c:	4618      	mov	r0, r3
 800681e:	f004 ff8f 	bl	800b740 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	32b0      	adds	r2, #176	; 0xb0
 800682c:	2100      	movs	r1, #0
 800682e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)USBD_OK;
 8006832:	2300      	movs	r3, #0
}
 8006834:	4618      	mov	r0, r3
 8006836:	3708      	adds	r7, #8
 8006838:	46bd      	mov	sp, r7
 800683a:	bd80      	pop	{r7, pc}
 800683c:	200000bf 	.word	0x200000bf

08006840 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b086      	sub	sp, #24
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
 8006848:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	32b0      	adds	r2, #176	; 0xb0
 8006854:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006858:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800685a:	2300      	movs	r3, #0
 800685c:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 800685e:	2300      	movs	r3, #0
 8006860:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d101      	bne.n	800686c <USBD_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8006868:	2303      	movs	r3, #3
 800686a:	e0e8      	b.n	8006a3e <USBD_HID_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	781b      	ldrb	r3, [r3, #0]
 8006870:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006874:	2b00      	cmp	r3, #0
 8006876:	d046      	beq.n	8006906 <USBD_HID_Setup+0xc6>
 8006878:	2b20      	cmp	r3, #32
 800687a:	f040 80d8 	bne.w	8006a2e <USBD_HID_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	785b      	ldrb	r3, [r3, #1]
 8006882:	3b02      	subs	r3, #2
 8006884:	2b09      	cmp	r3, #9
 8006886:	d836      	bhi.n	80068f6 <USBD_HID_Setup+0xb6>
 8006888:	a201      	add	r2, pc, #4	; (adr r2, 8006890 <USBD_HID_Setup+0x50>)
 800688a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800688e:	bf00      	nop
 8006890:	080068e7 	.word	0x080068e7
 8006894:	080068c7 	.word	0x080068c7
 8006898:	080068f7 	.word	0x080068f7
 800689c:	080068f7 	.word	0x080068f7
 80068a0:	080068f7 	.word	0x080068f7
 80068a4:	080068f7 	.word	0x080068f7
 80068a8:	080068f7 	.word	0x080068f7
 80068ac:	080068f7 	.word	0x080068f7
 80068b0:	080068d5 	.word	0x080068d5
 80068b4:	080068b9 	.word	0x080068b9
      {
        case USBD_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	885b      	ldrh	r3, [r3, #2]
 80068bc:	b2db      	uxtb	r3, r3
 80068be:	461a      	mov	r2, r3
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	601a      	str	r2, [r3, #0]
          break;
 80068c4:	e01e      	b.n	8006904 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	2201      	movs	r2, #1
 80068ca:	4619      	mov	r1, r3
 80068cc:	6878      	ldr	r0, [r7, #4]
 80068ce:	f001 fbd5 	bl	800807c <USBD_CtlSendData>
          break;
 80068d2:	e017      	b.n	8006904 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	885b      	ldrh	r3, [r3, #2]
 80068d8:	0a1b      	lsrs	r3, r3, #8
 80068da:	b29b      	uxth	r3, r3
 80068dc:	b2db      	uxtb	r3, r3
 80068de:	461a      	mov	r2, r3
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	605a      	str	r2, [r3, #4]
          break;
 80068e4:	e00e      	b.n	8006904 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	3304      	adds	r3, #4
 80068ea:	2201      	movs	r2, #1
 80068ec:	4619      	mov	r1, r3
 80068ee:	6878      	ldr	r0, [r7, #4]
 80068f0:	f001 fbc4 	bl	800807c <USBD_CtlSendData>
          break;
 80068f4:	e006      	b.n	8006904 <USBD_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80068f6:	6839      	ldr	r1, [r7, #0]
 80068f8:	6878      	ldr	r0, [r7, #4]
 80068fa:	f001 fb4e 	bl	8007f9a <USBD_CtlError>
          ret = USBD_FAIL;
 80068fe:	2303      	movs	r3, #3
 8006900:	75fb      	strb	r3, [r7, #23]
          break;
 8006902:	bf00      	nop
      }
      break;
 8006904:	e09a      	b.n	8006a3c <USBD_HID_Setup+0x1fc>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	785b      	ldrb	r3, [r3, #1]
 800690a:	2b0b      	cmp	r3, #11
 800690c:	f200 8086 	bhi.w	8006a1c <USBD_HID_Setup+0x1dc>
 8006910:	a201      	add	r2, pc, #4	; (adr r2, 8006918 <USBD_HID_Setup+0xd8>)
 8006912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006916:	bf00      	nop
 8006918:	08006949 	.word	0x08006949
 800691c:	08006a2b 	.word	0x08006a2b
 8006920:	08006a1d 	.word	0x08006a1d
 8006924:	08006a1d 	.word	0x08006a1d
 8006928:	08006a1d 	.word	0x08006a1d
 800692c:	08006a1d 	.word	0x08006a1d
 8006930:	08006973 	.word	0x08006973
 8006934:	08006a1d 	.word	0x08006a1d
 8006938:	08006a1d 	.word	0x08006a1d
 800693c:	08006a1d 	.word	0x08006a1d
 8006940:	080069cb 	.word	0x080069cb
 8006944:	080069f5 	.word	0x080069f5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800694e:	b2db      	uxtb	r3, r3
 8006950:	2b03      	cmp	r3, #3
 8006952:	d107      	bne.n	8006964 <USBD_HID_Setup+0x124>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006954:	f107 030a 	add.w	r3, r7, #10
 8006958:	2202      	movs	r2, #2
 800695a:	4619      	mov	r1, r3
 800695c:	6878      	ldr	r0, [r7, #4]
 800695e:	f001 fb8d 	bl	800807c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006962:	e063      	b.n	8006a2c <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8006964:	6839      	ldr	r1, [r7, #0]
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f001 fb17 	bl	8007f9a <USBD_CtlError>
            ret = USBD_FAIL;
 800696c:	2303      	movs	r3, #3
 800696e:	75fb      	strb	r3, [r7, #23]
          break;
 8006970:	e05c      	b.n	8006a2c <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	885b      	ldrh	r3, [r3, #2]
 8006976:	0a1b      	lsrs	r3, r3, #8
 8006978:	b29b      	uxth	r3, r3
 800697a:	2b22      	cmp	r3, #34	; 0x22
 800697c:	d108      	bne.n	8006990 <USBD_HID_Setup+0x150>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	88db      	ldrh	r3, [r3, #6]
 8006982:	2b3f      	cmp	r3, #63	; 0x3f
 8006984:	bf28      	it	cs
 8006986:	233f      	movcs	r3, #63	; 0x3f
 8006988:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 800698a:	4b2f      	ldr	r3, [pc, #188]	; (8006a48 <USBD_HID_Setup+0x208>)
 800698c:	613b      	str	r3, [r7, #16]
 800698e:	e015      	b.n	80069bc <USBD_HID_Setup+0x17c>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	885b      	ldrh	r3, [r3, #2]
 8006994:	0a1b      	lsrs	r3, r3, #8
 8006996:	b29b      	uxth	r3, r3
 8006998:	2b21      	cmp	r3, #33	; 0x21
 800699a:	d108      	bne.n	80069ae <USBD_HID_Setup+0x16e>
          {
            pbuf = USBD_HID_Desc;
 800699c:	4b2b      	ldr	r3, [pc, #172]	; (8006a4c <USBD_HID_Setup+0x20c>)
 800699e:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	88db      	ldrh	r3, [r3, #6]
 80069a4:	2b09      	cmp	r3, #9
 80069a6:	bf28      	it	cs
 80069a8:	2309      	movcs	r3, #9
 80069aa:	82bb      	strh	r3, [r7, #20]
 80069ac:	e006      	b.n	80069bc <USBD_HID_Setup+0x17c>
          }
          else
          {
            USBD_CtlError(pdev, req);
 80069ae:	6839      	ldr	r1, [r7, #0]
 80069b0:	6878      	ldr	r0, [r7, #4]
 80069b2:	f001 faf2 	bl	8007f9a <USBD_CtlError>
            ret = USBD_FAIL;
 80069b6:	2303      	movs	r3, #3
 80069b8:	75fb      	strb	r3, [r7, #23]
            break;
 80069ba:	e037      	b.n	8006a2c <USBD_HID_Setup+0x1ec>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 80069bc:	8abb      	ldrh	r3, [r7, #20]
 80069be:	461a      	mov	r2, r3
 80069c0:	6939      	ldr	r1, [r7, #16]
 80069c2:	6878      	ldr	r0, [r7, #4]
 80069c4:	f001 fb5a 	bl	800807c <USBD_CtlSendData>
          break;
 80069c8:	e030      	b.n	8006a2c <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069d0:	b2db      	uxtb	r3, r3
 80069d2:	2b03      	cmp	r3, #3
 80069d4:	d107      	bne.n	80069e6 <USBD_HID_Setup+0x1a6>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	3308      	adds	r3, #8
 80069da:	2201      	movs	r2, #1
 80069dc:	4619      	mov	r1, r3
 80069de:	6878      	ldr	r0, [r7, #4]
 80069e0:	f001 fb4c 	bl	800807c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80069e4:	e022      	b.n	8006a2c <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 80069e6:	6839      	ldr	r1, [r7, #0]
 80069e8:	6878      	ldr	r0, [r7, #4]
 80069ea:	f001 fad6 	bl	8007f9a <USBD_CtlError>
            ret = USBD_FAIL;
 80069ee:	2303      	movs	r3, #3
 80069f0:	75fb      	strb	r3, [r7, #23]
          break;
 80069f2:	e01b      	b.n	8006a2c <USBD_HID_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069fa:	b2db      	uxtb	r3, r3
 80069fc:	2b03      	cmp	r3, #3
 80069fe:	d106      	bne.n	8006a0e <USBD_HID_Setup+0x1ce>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	885b      	ldrh	r3, [r3, #2]
 8006a04:	b2db      	uxtb	r3, r3
 8006a06:	461a      	mov	r2, r3
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006a0c:	e00e      	b.n	8006a2c <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8006a0e:	6839      	ldr	r1, [r7, #0]
 8006a10:	6878      	ldr	r0, [r7, #4]
 8006a12:	f001 fac2 	bl	8007f9a <USBD_CtlError>
            ret = USBD_FAIL;
 8006a16:	2303      	movs	r3, #3
 8006a18:	75fb      	strb	r3, [r7, #23]
          break;
 8006a1a:	e007      	b.n	8006a2c <USBD_HID_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006a1c:	6839      	ldr	r1, [r7, #0]
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	f001 fabb 	bl	8007f9a <USBD_CtlError>
          ret = USBD_FAIL;
 8006a24:	2303      	movs	r3, #3
 8006a26:	75fb      	strb	r3, [r7, #23]
          break;
 8006a28:	e000      	b.n	8006a2c <USBD_HID_Setup+0x1ec>
          break;
 8006a2a:	bf00      	nop
      }
      break;
 8006a2c:	e006      	b.n	8006a3c <USBD_HID_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 8006a2e:	6839      	ldr	r1, [r7, #0]
 8006a30:	6878      	ldr	r0, [r7, #4]
 8006a32:	f001 fab2 	bl	8007f9a <USBD_CtlError>
      ret = USBD_FAIL;
 8006a36:	2303      	movs	r3, #3
 8006a38:	75fb      	strb	r3, [r7, #23]
      break;
 8006a3a:	bf00      	nop
  }

  return (uint8_t)ret;
 8006a3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a3e:	4618      	mov	r0, r3
 8006a40:	3718      	adds	r7, #24
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bd80      	pop	{r7, pc}
 8006a46:	bf00      	nop
 8006a48:	20000080 	.word	0x20000080
 8006a4c:	20000068 	.word	0x20000068

08006a50 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b084      	sub	sp, #16
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8006a58:	2181      	movs	r1, #129	; 0x81
 8006a5a:	4809      	ldr	r0, [pc, #36]	; (8006a80 <USBD_HID_GetFSCfgDesc+0x30>)
 8006a5c:	f000 fc3b 	bl	80072d6 <USBD_GetEpDesc>
 8006a60:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d002      	beq.n	8006a6e <USBD_HID_GetFSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	220a      	movs	r2, #10
 8006a6c:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2222      	movs	r2, #34	; 0x22
 8006a72:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8006a74:	4b02      	ldr	r3, [pc, #8]	; (8006a80 <USBD_HID_GetFSCfgDesc+0x30>)
}
 8006a76:	4618      	mov	r0, r3
 8006a78:	3710      	adds	r7, #16
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bd80      	pop	{r7, pc}
 8006a7e:	bf00      	nop
 8006a80:	20000044 	.word	0x20000044

08006a84 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b084      	sub	sp, #16
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8006a8c:	2181      	movs	r1, #129	; 0x81
 8006a8e:	4809      	ldr	r0, [pc, #36]	; (8006ab4 <USBD_HID_GetHSCfgDesc+0x30>)
 8006a90:	f000 fc21 	bl	80072d6 <USBD_GetEpDesc>
 8006a94:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d002      	beq.n	8006aa2 <USBD_HID_GetHSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_HS_BINTERVAL;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	2207      	movs	r2, #7
 8006aa0:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2222      	movs	r2, #34	; 0x22
 8006aa6:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8006aa8:	4b02      	ldr	r3, [pc, #8]	; (8006ab4 <USBD_HID_GetHSCfgDesc+0x30>)
}
 8006aaa:	4618      	mov	r0, r3
 8006aac:	3710      	adds	r7, #16
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	bd80      	pop	{r7, pc}
 8006ab2:	bf00      	nop
 8006ab4:	20000044 	.word	0x20000044

08006ab8 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b084      	sub	sp, #16
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8006ac0:	2181      	movs	r1, #129	; 0x81
 8006ac2:	4809      	ldr	r0, [pc, #36]	; (8006ae8 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
 8006ac4:	f000 fc07 	bl	80072d6 <USBD_GetEpDesc>
 8006ac8:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d002      	beq.n	8006ad6 <USBD_HID_GetOtherSpeedCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	220a      	movs	r2, #10
 8006ad4:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2222      	movs	r2, #34	; 0x22
 8006ada:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8006adc:	4b02      	ldr	r3, [pc, #8]	; (8006ae8 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
}
 8006ade:	4618      	mov	r0, r3
 8006ae0:	3710      	adds	r7, #16
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	bd80      	pop	{r7, pc}
 8006ae6:	bf00      	nop
 8006ae8:	20000044 	.word	0x20000044

08006aec <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006aec:	b480      	push	{r7}
 8006aee:	b083      	sub	sp, #12
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
 8006af4:	460b      	mov	r3, r1
 8006af6:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = USBD_HID_IDLE;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	32b0      	adds	r2, #176	; 0xb0
 8006b02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b06:	2200      	movs	r2, #0
 8006b08:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8006b0a:	2300      	movs	r3, #0
}
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	370c      	adds	r7, #12
 8006b10:	46bd      	mov	sp, r7
 8006b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b16:	4770      	bx	lr

08006b18 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8006b18:	b480      	push	{r7}
 8006b1a:	b083      	sub	sp, #12
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	220a      	movs	r2, #10
 8006b24:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 8006b26:	4b03      	ldr	r3, [pc, #12]	; (8006b34 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8006b28:	4618      	mov	r0, r3
 8006b2a:	370c      	adds	r7, #12
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b32:	4770      	bx	lr
 8006b34:	20000074 	.word	0x20000074

08006b38 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b086      	sub	sp, #24
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	60f8      	str	r0, [r7, #12]
 8006b40:	60b9      	str	r1, [r7, #8]
 8006b42:	4613      	mov	r3, r2
 8006b44:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d101      	bne.n	8006b50 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006b4c:	2303      	movs	r3, #3
 8006b4e:	e01f      	b.n	8006b90 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	2200      	movs	r2, #0
 8006b54:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	2200      	movs	r2, #0
 8006b64:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d003      	beq.n	8006b76 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	68ba      	ldr	r2, [r7, #8]
 8006b72:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	2201      	movs	r2, #1
 8006b7a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	79fa      	ldrb	r2, [r7, #7]
 8006b82:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006b84:	68f8      	ldr	r0, [r7, #12]
 8006b86:	f004 fb4f 	bl	800b228 <USBD_LL_Init>
 8006b8a:	4603      	mov	r3, r0
 8006b8c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006b8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b90:	4618      	mov	r0, r3
 8006b92:	3718      	adds	r7, #24
 8006b94:	46bd      	mov	sp, r7
 8006b96:	bd80      	pop	{r7, pc}

08006b98 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b084      	sub	sp, #16
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
 8006ba0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d101      	bne.n	8006bb0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006bac:	2303      	movs	r3, #3
 8006bae:	e025      	b.n	8006bfc <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	683a      	ldr	r2, [r7, #0]
 8006bb4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	32ae      	adds	r2, #174	; 0xae
 8006bc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d00f      	beq.n	8006bec <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	32ae      	adds	r2, #174	; 0xae
 8006bd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bdc:	f107 020e 	add.w	r2, r7, #14
 8006be0:	4610      	mov	r0, r2
 8006be2:	4798      	blx	r3
 8006be4:	4602      	mov	r2, r0
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8006bf2:	1c5a      	adds	r2, r3, #1
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8006bfa:	2300      	movs	r3, #0
}
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	3710      	adds	r7, #16
 8006c00:	46bd      	mov	sp, r7
 8006c02:	bd80      	pop	{r7, pc}

08006c04 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b082      	sub	sp, #8
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006c0c:	6878      	ldr	r0, [r7, #4]
 8006c0e:	f004 fb57 	bl	800b2c0 <USBD_LL_Start>
 8006c12:	4603      	mov	r3, r0
}
 8006c14:	4618      	mov	r0, r3
 8006c16:	3708      	adds	r7, #8
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	bd80      	pop	{r7, pc}

08006c1c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	b083      	sub	sp, #12
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006c24:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006c26:	4618      	mov	r0, r3
 8006c28:	370c      	adds	r7, #12
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c30:	4770      	bx	lr

08006c32 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006c32:	b580      	push	{r7, lr}
 8006c34:	b084      	sub	sp, #16
 8006c36:	af00      	add	r7, sp, #0
 8006c38:	6078      	str	r0, [r7, #4]
 8006c3a:	460b      	mov	r3, r1
 8006c3c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006c3e:	2300      	movs	r3, #0
 8006c40:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d009      	beq.n	8006c60 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	78fa      	ldrb	r2, [r7, #3]
 8006c56:	4611      	mov	r1, r2
 8006c58:	6878      	ldr	r0, [r7, #4]
 8006c5a:	4798      	blx	r3
 8006c5c:	4603      	mov	r3, r0
 8006c5e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006c60:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c62:	4618      	mov	r0, r3
 8006c64:	3710      	adds	r7, #16
 8006c66:	46bd      	mov	sp, r7
 8006c68:	bd80      	pop	{r7, pc}

08006c6a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006c6a:	b580      	push	{r7, lr}
 8006c6c:	b084      	sub	sp, #16
 8006c6e:	af00      	add	r7, sp, #0
 8006c70:	6078      	str	r0, [r7, #4]
 8006c72:	460b      	mov	r3, r1
 8006c74:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006c76:	2300      	movs	r3, #0
 8006c78:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c80:	685b      	ldr	r3, [r3, #4]
 8006c82:	78fa      	ldrb	r2, [r7, #3]
 8006c84:	4611      	mov	r1, r2
 8006c86:	6878      	ldr	r0, [r7, #4]
 8006c88:	4798      	blx	r3
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d001      	beq.n	8006c94 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006c90:	2303      	movs	r3, #3
 8006c92:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006c94:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c96:	4618      	mov	r0, r3
 8006c98:	3710      	adds	r7, #16
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bd80      	pop	{r7, pc}

08006c9e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006c9e:	b580      	push	{r7, lr}
 8006ca0:	b084      	sub	sp, #16
 8006ca2:	af00      	add	r7, sp, #0
 8006ca4:	6078      	str	r0, [r7, #4]
 8006ca6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006cae:	6839      	ldr	r1, [r7, #0]
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	f001 f938 	bl	8007f26 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2201      	movs	r2, #1
 8006cba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006cc4:	461a      	mov	r2, r3
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006cd2:	f003 031f 	and.w	r3, r3, #31
 8006cd6:	2b02      	cmp	r3, #2
 8006cd8:	d01a      	beq.n	8006d10 <USBD_LL_SetupStage+0x72>
 8006cda:	2b02      	cmp	r3, #2
 8006cdc:	d822      	bhi.n	8006d24 <USBD_LL_SetupStage+0x86>
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d002      	beq.n	8006ce8 <USBD_LL_SetupStage+0x4a>
 8006ce2:	2b01      	cmp	r3, #1
 8006ce4:	d00a      	beq.n	8006cfc <USBD_LL_SetupStage+0x5e>
 8006ce6:	e01d      	b.n	8006d24 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006cee:	4619      	mov	r1, r3
 8006cf0:	6878      	ldr	r0, [r7, #4]
 8006cf2:	f000 fb65 	bl	80073c0 <USBD_StdDevReq>
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	73fb      	strb	r3, [r7, #15]
      break;
 8006cfa:	e020      	b.n	8006d3e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006d02:	4619      	mov	r1, r3
 8006d04:	6878      	ldr	r0, [r7, #4]
 8006d06:	f000 fbcd 	bl	80074a4 <USBD_StdItfReq>
 8006d0a:	4603      	mov	r3, r0
 8006d0c:	73fb      	strb	r3, [r7, #15]
      break;
 8006d0e:	e016      	b.n	8006d3e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006d16:	4619      	mov	r1, r3
 8006d18:	6878      	ldr	r0, [r7, #4]
 8006d1a:	f000 fc2f 	bl	800757c <USBD_StdEPReq>
 8006d1e:	4603      	mov	r3, r0
 8006d20:	73fb      	strb	r3, [r7, #15]
      break;
 8006d22:	e00c      	b.n	8006d3e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006d2a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006d2e:	b2db      	uxtb	r3, r3
 8006d30:	4619      	mov	r1, r3
 8006d32:	6878      	ldr	r0, [r7, #4]
 8006d34:	f004 fb6a 	bl	800b40c <USBD_LL_StallEP>
 8006d38:	4603      	mov	r3, r0
 8006d3a:	73fb      	strb	r3, [r7, #15]
      break;
 8006d3c:	bf00      	nop
  }

  return ret;
 8006d3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d40:	4618      	mov	r0, r3
 8006d42:	3710      	adds	r7, #16
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bd80      	pop	{r7, pc}

08006d48 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b086      	sub	sp, #24
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	60f8      	str	r0, [r7, #12]
 8006d50:	460b      	mov	r3, r1
 8006d52:	607a      	str	r2, [r7, #4]
 8006d54:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006d56:	2300      	movs	r3, #0
 8006d58:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006d5a:	7afb      	ldrb	r3, [r7, #11]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d16e      	bne.n	8006e3e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006d66:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006d6e:	2b03      	cmp	r3, #3
 8006d70:	f040 8098 	bne.w	8006ea4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006d74:	693b      	ldr	r3, [r7, #16]
 8006d76:	689a      	ldr	r2, [r3, #8]
 8006d78:	693b      	ldr	r3, [r7, #16]
 8006d7a:	68db      	ldr	r3, [r3, #12]
 8006d7c:	429a      	cmp	r2, r3
 8006d7e:	d913      	bls.n	8006da8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006d80:	693b      	ldr	r3, [r7, #16]
 8006d82:	689a      	ldr	r2, [r3, #8]
 8006d84:	693b      	ldr	r3, [r7, #16]
 8006d86:	68db      	ldr	r3, [r3, #12]
 8006d88:	1ad2      	subs	r2, r2, r3
 8006d8a:	693b      	ldr	r3, [r7, #16]
 8006d8c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006d8e:	693b      	ldr	r3, [r7, #16]
 8006d90:	68da      	ldr	r2, [r3, #12]
 8006d92:	693b      	ldr	r3, [r7, #16]
 8006d94:	689b      	ldr	r3, [r3, #8]
 8006d96:	4293      	cmp	r3, r2
 8006d98:	bf28      	it	cs
 8006d9a:	4613      	movcs	r3, r2
 8006d9c:	461a      	mov	r2, r3
 8006d9e:	6879      	ldr	r1, [r7, #4]
 8006da0:	68f8      	ldr	r0, [r7, #12]
 8006da2:	f001 f997 	bl	80080d4 <USBD_CtlContinueRx>
 8006da6:	e07d      	b.n	8006ea4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006dae:	f003 031f 	and.w	r3, r3, #31
 8006db2:	2b02      	cmp	r3, #2
 8006db4:	d014      	beq.n	8006de0 <USBD_LL_DataOutStage+0x98>
 8006db6:	2b02      	cmp	r3, #2
 8006db8:	d81d      	bhi.n	8006df6 <USBD_LL_DataOutStage+0xae>
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d002      	beq.n	8006dc4 <USBD_LL_DataOutStage+0x7c>
 8006dbe:	2b01      	cmp	r3, #1
 8006dc0:	d003      	beq.n	8006dca <USBD_LL_DataOutStage+0x82>
 8006dc2:	e018      	b.n	8006df6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	75bb      	strb	r3, [r7, #22]
            break;
 8006dc8:	e018      	b.n	8006dfc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006dd0:	b2db      	uxtb	r3, r3
 8006dd2:	4619      	mov	r1, r3
 8006dd4:	68f8      	ldr	r0, [r7, #12]
 8006dd6:	f000 fa64 	bl	80072a2 <USBD_CoreFindIF>
 8006dda:	4603      	mov	r3, r0
 8006ddc:	75bb      	strb	r3, [r7, #22]
            break;
 8006dde:	e00d      	b.n	8006dfc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006de6:	b2db      	uxtb	r3, r3
 8006de8:	4619      	mov	r1, r3
 8006dea:	68f8      	ldr	r0, [r7, #12]
 8006dec:	f000 fa66 	bl	80072bc <USBD_CoreFindEP>
 8006df0:	4603      	mov	r3, r0
 8006df2:	75bb      	strb	r3, [r7, #22]
            break;
 8006df4:	e002      	b.n	8006dfc <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006df6:	2300      	movs	r3, #0
 8006df8:	75bb      	strb	r3, [r7, #22]
            break;
 8006dfa:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006dfc:	7dbb      	ldrb	r3, [r7, #22]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d119      	bne.n	8006e36 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e08:	b2db      	uxtb	r3, r3
 8006e0a:	2b03      	cmp	r3, #3
 8006e0c:	d113      	bne.n	8006e36 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006e0e:	7dba      	ldrb	r2, [r7, #22]
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	32ae      	adds	r2, #174	; 0xae
 8006e14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e18:	691b      	ldr	r3, [r3, #16]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d00b      	beq.n	8006e36 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006e1e:	7dba      	ldrb	r2, [r7, #22]
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006e26:	7dba      	ldrb	r2, [r7, #22]
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	32ae      	adds	r2, #174	; 0xae
 8006e2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e30:	691b      	ldr	r3, [r3, #16]
 8006e32:	68f8      	ldr	r0, [r7, #12]
 8006e34:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006e36:	68f8      	ldr	r0, [r7, #12]
 8006e38:	f001 f95d 	bl	80080f6 <USBD_CtlSendStatus>
 8006e3c:	e032      	b.n	8006ea4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006e3e:	7afb      	ldrb	r3, [r7, #11]
 8006e40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e44:	b2db      	uxtb	r3, r3
 8006e46:	4619      	mov	r1, r3
 8006e48:	68f8      	ldr	r0, [r7, #12]
 8006e4a:	f000 fa37 	bl	80072bc <USBD_CoreFindEP>
 8006e4e:	4603      	mov	r3, r0
 8006e50:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006e52:	7dbb      	ldrb	r3, [r7, #22]
 8006e54:	2bff      	cmp	r3, #255	; 0xff
 8006e56:	d025      	beq.n	8006ea4 <USBD_LL_DataOutStage+0x15c>
 8006e58:	7dbb      	ldrb	r3, [r7, #22]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d122      	bne.n	8006ea4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e64:	b2db      	uxtb	r3, r3
 8006e66:	2b03      	cmp	r3, #3
 8006e68:	d117      	bne.n	8006e9a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006e6a:	7dba      	ldrb	r2, [r7, #22]
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	32ae      	adds	r2, #174	; 0xae
 8006e70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e74:	699b      	ldr	r3, [r3, #24]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d00f      	beq.n	8006e9a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006e7a:	7dba      	ldrb	r2, [r7, #22]
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006e82:	7dba      	ldrb	r2, [r7, #22]
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	32ae      	adds	r2, #174	; 0xae
 8006e88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e8c:	699b      	ldr	r3, [r3, #24]
 8006e8e:	7afa      	ldrb	r2, [r7, #11]
 8006e90:	4611      	mov	r1, r2
 8006e92:	68f8      	ldr	r0, [r7, #12]
 8006e94:	4798      	blx	r3
 8006e96:	4603      	mov	r3, r0
 8006e98:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006e9a:	7dfb      	ldrb	r3, [r7, #23]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d001      	beq.n	8006ea4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006ea0:	7dfb      	ldrb	r3, [r7, #23]
 8006ea2:	e000      	b.n	8006ea6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006ea4:	2300      	movs	r3, #0
}
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	3718      	adds	r7, #24
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	bd80      	pop	{r7, pc}

08006eae <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006eae:	b580      	push	{r7, lr}
 8006eb0:	b086      	sub	sp, #24
 8006eb2:	af00      	add	r7, sp, #0
 8006eb4:	60f8      	str	r0, [r7, #12]
 8006eb6:	460b      	mov	r3, r1
 8006eb8:	607a      	str	r2, [r7, #4]
 8006eba:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006ebc:	7afb      	ldrb	r3, [r7, #11]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d16f      	bne.n	8006fa2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	3314      	adds	r3, #20
 8006ec6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006ece:	2b02      	cmp	r3, #2
 8006ed0:	d15a      	bne.n	8006f88 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006ed2:	693b      	ldr	r3, [r7, #16]
 8006ed4:	689a      	ldr	r2, [r3, #8]
 8006ed6:	693b      	ldr	r3, [r7, #16]
 8006ed8:	68db      	ldr	r3, [r3, #12]
 8006eda:	429a      	cmp	r2, r3
 8006edc:	d914      	bls.n	8006f08 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006ede:	693b      	ldr	r3, [r7, #16]
 8006ee0:	689a      	ldr	r2, [r3, #8]
 8006ee2:	693b      	ldr	r3, [r7, #16]
 8006ee4:	68db      	ldr	r3, [r3, #12]
 8006ee6:	1ad2      	subs	r2, r2, r3
 8006ee8:	693b      	ldr	r3, [r7, #16]
 8006eea:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006eec:	693b      	ldr	r3, [r7, #16]
 8006eee:	689b      	ldr	r3, [r3, #8]
 8006ef0:	461a      	mov	r2, r3
 8006ef2:	6879      	ldr	r1, [r7, #4]
 8006ef4:	68f8      	ldr	r0, [r7, #12]
 8006ef6:	f001 f8dc 	bl	80080b2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006efa:	2300      	movs	r3, #0
 8006efc:	2200      	movs	r2, #0
 8006efe:	2100      	movs	r1, #0
 8006f00:	68f8      	ldr	r0, [r7, #12]
 8006f02:	f004 fb89 	bl	800b618 <USBD_LL_PrepareReceive>
 8006f06:	e03f      	b.n	8006f88 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006f08:	693b      	ldr	r3, [r7, #16]
 8006f0a:	68da      	ldr	r2, [r3, #12]
 8006f0c:	693b      	ldr	r3, [r7, #16]
 8006f0e:	689b      	ldr	r3, [r3, #8]
 8006f10:	429a      	cmp	r2, r3
 8006f12:	d11c      	bne.n	8006f4e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006f14:	693b      	ldr	r3, [r7, #16]
 8006f16:	685a      	ldr	r2, [r3, #4]
 8006f18:	693b      	ldr	r3, [r7, #16]
 8006f1a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006f1c:	429a      	cmp	r2, r3
 8006f1e:	d316      	bcc.n	8006f4e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006f20:	693b      	ldr	r3, [r7, #16]
 8006f22:	685a      	ldr	r2, [r3, #4]
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006f2a:	429a      	cmp	r2, r3
 8006f2c:	d20f      	bcs.n	8006f4e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006f2e:	2200      	movs	r2, #0
 8006f30:	2100      	movs	r1, #0
 8006f32:	68f8      	ldr	r0, [r7, #12]
 8006f34:	f001 f8bd 	bl	80080b2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006f40:	2300      	movs	r3, #0
 8006f42:	2200      	movs	r2, #0
 8006f44:	2100      	movs	r1, #0
 8006f46:	68f8      	ldr	r0, [r7, #12]
 8006f48:	f004 fb66 	bl	800b618 <USBD_LL_PrepareReceive>
 8006f4c:	e01c      	b.n	8006f88 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f54:	b2db      	uxtb	r3, r3
 8006f56:	2b03      	cmp	r3, #3
 8006f58:	d10f      	bne.n	8006f7a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f60:	68db      	ldr	r3, [r3, #12]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d009      	beq.n	8006f7a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	2200      	movs	r2, #0
 8006f6a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f74:	68db      	ldr	r3, [r3, #12]
 8006f76:	68f8      	ldr	r0, [r7, #12]
 8006f78:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006f7a:	2180      	movs	r1, #128	; 0x80
 8006f7c:	68f8      	ldr	r0, [r7, #12]
 8006f7e:	f004 fa45 	bl	800b40c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006f82:	68f8      	ldr	r0, [r7, #12]
 8006f84:	f001 f8ca 	bl	800811c <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d03a      	beq.n	8007008 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006f92:	68f8      	ldr	r0, [r7, #12]
 8006f94:	f7ff fe42 	bl	8006c1c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006fa0:	e032      	b.n	8007008 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006fa2:	7afb      	ldrb	r3, [r7, #11]
 8006fa4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006fa8:	b2db      	uxtb	r3, r3
 8006faa:	4619      	mov	r1, r3
 8006fac:	68f8      	ldr	r0, [r7, #12]
 8006fae:	f000 f985 	bl	80072bc <USBD_CoreFindEP>
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006fb6:	7dfb      	ldrb	r3, [r7, #23]
 8006fb8:	2bff      	cmp	r3, #255	; 0xff
 8006fba:	d025      	beq.n	8007008 <USBD_LL_DataInStage+0x15a>
 8006fbc:	7dfb      	ldrb	r3, [r7, #23]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d122      	bne.n	8007008 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fc8:	b2db      	uxtb	r3, r3
 8006fca:	2b03      	cmp	r3, #3
 8006fcc:	d11c      	bne.n	8007008 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006fce:	7dfa      	ldrb	r2, [r7, #23]
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	32ae      	adds	r2, #174	; 0xae
 8006fd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fd8:	695b      	ldr	r3, [r3, #20]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d014      	beq.n	8007008 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006fde:	7dfa      	ldrb	r2, [r7, #23]
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006fe6:	7dfa      	ldrb	r2, [r7, #23]
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	32ae      	adds	r2, #174	; 0xae
 8006fec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ff0:	695b      	ldr	r3, [r3, #20]
 8006ff2:	7afa      	ldrb	r2, [r7, #11]
 8006ff4:	4611      	mov	r1, r2
 8006ff6:	68f8      	ldr	r0, [r7, #12]
 8006ff8:	4798      	blx	r3
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006ffe:	7dbb      	ldrb	r3, [r7, #22]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d001      	beq.n	8007008 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007004:	7dbb      	ldrb	r3, [r7, #22]
 8007006:	e000      	b.n	800700a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007008:	2300      	movs	r3, #0
}
 800700a:	4618      	mov	r0, r3
 800700c:	3718      	adds	r7, #24
 800700e:	46bd      	mov	sp, r7
 8007010:	bd80      	pop	{r7, pc}

08007012 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007012:	b580      	push	{r7, lr}
 8007014:	b084      	sub	sp, #16
 8007016:	af00      	add	r7, sp, #0
 8007018:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800701a:	2300      	movs	r3, #0
 800701c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2201      	movs	r2, #1
 8007022:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2200      	movs	r2, #0
 800702a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2200      	movs	r2, #0
 8007032:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2200      	movs	r2, #0
 8007038:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2200      	movs	r2, #0
 8007040:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800704a:	2b00      	cmp	r3, #0
 800704c:	d014      	beq.n	8007078 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007054:	685b      	ldr	r3, [r3, #4]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d00e      	beq.n	8007078 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007060:	685b      	ldr	r3, [r3, #4]
 8007062:	687a      	ldr	r2, [r7, #4]
 8007064:	6852      	ldr	r2, [r2, #4]
 8007066:	b2d2      	uxtb	r2, r2
 8007068:	4611      	mov	r1, r2
 800706a:	6878      	ldr	r0, [r7, #4]
 800706c:	4798      	blx	r3
 800706e:	4603      	mov	r3, r0
 8007070:	2b00      	cmp	r3, #0
 8007072:	d001      	beq.n	8007078 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007074:	2303      	movs	r3, #3
 8007076:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007078:	2340      	movs	r3, #64	; 0x40
 800707a:	2200      	movs	r2, #0
 800707c:	2100      	movs	r1, #0
 800707e:	6878      	ldr	r0, [r7, #4]
 8007080:	f004 f950 	bl	800b324 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2201      	movs	r2, #1
 8007088:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2240      	movs	r2, #64	; 0x40
 8007090:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007094:	2340      	movs	r3, #64	; 0x40
 8007096:	2200      	movs	r2, #0
 8007098:	2180      	movs	r1, #128	; 0x80
 800709a:	6878      	ldr	r0, [r7, #4]
 800709c:	f004 f942 	bl	800b324 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2201      	movs	r2, #1
 80070a4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2240      	movs	r2, #64	; 0x40
 80070aa:	621a      	str	r2, [r3, #32]

  return ret;
 80070ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80070ae:	4618      	mov	r0, r3
 80070b0:	3710      	adds	r7, #16
 80070b2:	46bd      	mov	sp, r7
 80070b4:	bd80      	pop	{r7, pc}

080070b6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80070b6:	b480      	push	{r7}
 80070b8:	b083      	sub	sp, #12
 80070ba:	af00      	add	r7, sp, #0
 80070bc:	6078      	str	r0, [r7, #4]
 80070be:	460b      	mov	r3, r1
 80070c0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	78fa      	ldrb	r2, [r7, #3]
 80070c6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80070c8:	2300      	movs	r3, #0
}
 80070ca:	4618      	mov	r0, r3
 80070cc:	370c      	adds	r7, #12
 80070ce:	46bd      	mov	sp, r7
 80070d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d4:	4770      	bx	lr

080070d6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80070d6:	b480      	push	{r7}
 80070d8:	b083      	sub	sp, #12
 80070da:	af00      	add	r7, sp, #0
 80070dc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070e4:	b2db      	uxtb	r3, r3
 80070e6:	2b04      	cmp	r3, #4
 80070e8:	d006      	beq.n	80070f8 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070f0:	b2da      	uxtb	r2, r3
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2204      	movs	r2, #4
 80070fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007100:	2300      	movs	r3, #0
}
 8007102:	4618      	mov	r0, r3
 8007104:	370c      	adds	r7, #12
 8007106:	46bd      	mov	sp, r7
 8007108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710c:	4770      	bx	lr

0800710e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800710e:	b480      	push	{r7}
 8007110:	b083      	sub	sp, #12
 8007112:	af00      	add	r7, sp, #0
 8007114:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800711c:	b2db      	uxtb	r3, r3
 800711e:	2b04      	cmp	r3, #4
 8007120:	d106      	bne.n	8007130 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007128:	b2da      	uxtb	r2, r3
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007130:	2300      	movs	r3, #0
}
 8007132:	4618      	mov	r0, r3
 8007134:	370c      	adds	r7, #12
 8007136:	46bd      	mov	sp, r7
 8007138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713c:	4770      	bx	lr

0800713e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800713e:	b580      	push	{r7, lr}
 8007140:	b082      	sub	sp, #8
 8007142:	af00      	add	r7, sp, #0
 8007144:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800714c:	b2db      	uxtb	r3, r3
 800714e:	2b03      	cmp	r3, #3
 8007150:	d110      	bne.n	8007174 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007158:	2b00      	cmp	r3, #0
 800715a:	d00b      	beq.n	8007174 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007162:	69db      	ldr	r3, [r3, #28]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d005      	beq.n	8007174 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800716e:	69db      	ldr	r3, [r3, #28]
 8007170:	6878      	ldr	r0, [r7, #4]
 8007172:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007174:	2300      	movs	r3, #0
}
 8007176:	4618      	mov	r0, r3
 8007178:	3708      	adds	r7, #8
 800717a:	46bd      	mov	sp, r7
 800717c:	bd80      	pop	{r7, pc}

0800717e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800717e:	b580      	push	{r7, lr}
 8007180:	b082      	sub	sp, #8
 8007182:	af00      	add	r7, sp, #0
 8007184:	6078      	str	r0, [r7, #4]
 8007186:	460b      	mov	r3, r1
 8007188:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	32ae      	adds	r2, #174	; 0xae
 8007194:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d101      	bne.n	80071a0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800719c:	2303      	movs	r3, #3
 800719e:	e01c      	b.n	80071da <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071a6:	b2db      	uxtb	r3, r3
 80071a8:	2b03      	cmp	r3, #3
 80071aa:	d115      	bne.n	80071d8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	32ae      	adds	r2, #174	; 0xae
 80071b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071ba:	6a1b      	ldr	r3, [r3, #32]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d00b      	beq.n	80071d8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	32ae      	adds	r2, #174	; 0xae
 80071ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071ce:	6a1b      	ldr	r3, [r3, #32]
 80071d0:	78fa      	ldrb	r2, [r7, #3]
 80071d2:	4611      	mov	r1, r2
 80071d4:	6878      	ldr	r0, [r7, #4]
 80071d6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80071d8:	2300      	movs	r3, #0
}
 80071da:	4618      	mov	r0, r3
 80071dc:	3708      	adds	r7, #8
 80071de:	46bd      	mov	sp, r7
 80071e0:	bd80      	pop	{r7, pc}

080071e2 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80071e2:	b580      	push	{r7, lr}
 80071e4:	b082      	sub	sp, #8
 80071e6:	af00      	add	r7, sp, #0
 80071e8:	6078      	str	r0, [r7, #4]
 80071ea:	460b      	mov	r3, r1
 80071ec:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	32ae      	adds	r2, #174	; 0xae
 80071f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d101      	bne.n	8007204 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007200:	2303      	movs	r3, #3
 8007202:	e01c      	b.n	800723e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800720a:	b2db      	uxtb	r3, r3
 800720c:	2b03      	cmp	r3, #3
 800720e:	d115      	bne.n	800723c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	32ae      	adds	r2, #174	; 0xae
 800721a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800721e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007220:	2b00      	cmp	r3, #0
 8007222:	d00b      	beq.n	800723c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	32ae      	adds	r2, #174	; 0xae
 800722e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007234:	78fa      	ldrb	r2, [r7, #3]
 8007236:	4611      	mov	r1, r2
 8007238:	6878      	ldr	r0, [r7, #4]
 800723a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800723c:	2300      	movs	r3, #0
}
 800723e:	4618      	mov	r0, r3
 8007240:	3708      	adds	r7, #8
 8007242:	46bd      	mov	sp, r7
 8007244:	bd80      	pop	{r7, pc}

08007246 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007246:	b480      	push	{r7}
 8007248:	b083      	sub	sp, #12
 800724a:	af00      	add	r7, sp, #0
 800724c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800724e:	2300      	movs	r3, #0
}
 8007250:	4618      	mov	r0, r3
 8007252:	370c      	adds	r7, #12
 8007254:	46bd      	mov	sp, r7
 8007256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725a:	4770      	bx	lr

0800725c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b084      	sub	sp, #16
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007264:	2300      	movs	r3, #0
 8007266:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2201      	movs	r2, #1
 800726c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007276:	2b00      	cmp	r3, #0
 8007278:	d00e      	beq.n	8007298 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007280:	685b      	ldr	r3, [r3, #4]
 8007282:	687a      	ldr	r2, [r7, #4]
 8007284:	6852      	ldr	r2, [r2, #4]
 8007286:	b2d2      	uxtb	r2, r2
 8007288:	4611      	mov	r1, r2
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	4798      	blx	r3
 800728e:	4603      	mov	r3, r0
 8007290:	2b00      	cmp	r3, #0
 8007292:	d001      	beq.n	8007298 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007294:	2303      	movs	r3, #3
 8007296:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007298:	7bfb      	ldrb	r3, [r7, #15]
}
 800729a:	4618      	mov	r0, r3
 800729c:	3710      	adds	r7, #16
 800729e:	46bd      	mov	sp, r7
 80072a0:	bd80      	pop	{r7, pc}

080072a2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80072a2:	b480      	push	{r7}
 80072a4:	b083      	sub	sp, #12
 80072a6:	af00      	add	r7, sp, #0
 80072a8:	6078      	str	r0, [r7, #4]
 80072aa:	460b      	mov	r3, r1
 80072ac:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80072ae:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80072b0:	4618      	mov	r0, r3
 80072b2:	370c      	adds	r7, #12
 80072b4:	46bd      	mov	sp, r7
 80072b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ba:	4770      	bx	lr

080072bc <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80072bc:	b480      	push	{r7}
 80072be:	b083      	sub	sp, #12
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
 80072c4:	460b      	mov	r3, r1
 80072c6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80072c8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80072ca:	4618      	mov	r0, r3
 80072cc:	370c      	adds	r7, #12
 80072ce:	46bd      	mov	sp, r7
 80072d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d4:	4770      	bx	lr

080072d6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80072d6:	b580      	push	{r7, lr}
 80072d8:	b086      	sub	sp, #24
 80072da:	af00      	add	r7, sp, #0
 80072dc:	6078      	str	r0, [r7, #4]
 80072de:	460b      	mov	r3, r1
 80072e0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80072ea:	2300      	movs	r3, #0
 80072ec:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	885b      	ldrh	r3, [r3, #2]
 80072f2:	b29a      	uxth	r2, r3
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	781b      	ldrb	r3, [r3, #0]
 80072f8:	b29b      	uxth	r3, r3
 80072fa:	429a      	cmp	r2, r3
 80072fc:	d920      	bls.n	8007340 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	781b      	ldrb	r3, [r3, #0]
 8007302:	b29b      	uxth	r3, r3
 8007304:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007306:	e013      	b.n	8007330 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007308:	f107 030a 	add.w	r3, r7, #10
 800730c:	4619      	mov	r1, r3
 800730e:	6978      	ldr	r0, [r7, #20]
 8007310:	f000 f81b 	bl	800734a <USBD_GetNextDesc>
 8007314:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007316:	697b      	ldr	r3, [r7, #20]
 8007318:	785b      	ldrb	r3, [r3, #1]
 800731a:	2b05      	cmp	r3, #5
 800731c:	d108      	bne.n	8007330 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800731e:	697b      	ldr	r3, [r7, #20]
 8007320:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007322:	693b      	ldr	r3, [r7, #16]
 8007324:	789b      	ldrb	r3, [r3, #2]
 8007326:	78fa      	ldrb	r2, [r7, #3]
 8007328:	429a      	cmp	r2, r3
 800732a:	d008      	beq.n	800733e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800732c:	2300      	movs	r3, #0
 800732e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	885b      	ldrh	r3, [r3, #2]
 8007334:	b29a      	uxth	r2, r3
 8007336:	897b      	ldrh	r3, [r7, #10]
 8007338:	429a      	cmp	r2, r3
 800733a:	d8e5      	bhi.n	8007308 <USBD_GetEpDesc+0x32>
 800733c:	e000      	b.n	8007340 <USBD_GetEpDesc+0x6a>
          break;
 800733e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007340:	693b      	ldr	r3, [r7, #16]
}
 8007342:	4618      	mov	r0, r3
 8007344:	3718      	adds	r7, #24
 8007346:	46bd      	mov	sp, r7
 8007348:	bd80      	pop	{r7, pc}

0800734a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800734a:	b480      	push	{r7}
 800734c:	b085      	sub	sp, #20
 800734e:	af00      	add	r7, sp, #0
 8007350:	6078      	str	r0, [r7, #4]
 8007352:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	881a      	ldrh	r2, [r3, #0]
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	781b      	ldrb	r3, [r3, #0]
 8007360:	b29b      	uxth	r3, r3
 8007362:	4413      	add	r3, r2
 8007364:	b29a      	uxth	r2, r3
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	781b      	ldrb	r3, [r3, #0]
 800736e:	461a      	mov	r2, r3
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	4413      	add	r3, r2
 8007374:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007376:	68fb      	ldr	r3, [r7, #12]
}
 8007378:	4618      	mov	r0, r3
 800737a:	3714      	adds	r7, #20
 800737c:	46bd      	mov	sp, r7
 800737e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007382:	4770      	bx	lr

08007384 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007384:	b480      	push	{r7}
 8007386:	b087      	sub	sp, #28
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007390:	697b      	ldr	r3, [r7, #20]
 8007392:	781b      	ldrb	r3, [r3, #0]
 8007394:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007396:	697b      	ldr	r3, [r7, #20]
 8007398:	3301      	adds	r3, #1
 800739a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800739c:	697b      	ldr	r3, [r7, #20]
 800739e:	781b      	ldrb	r3, [r3, #0]
 80073a0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80073a2:	8a3b      	ldrh	r3, [r7, #16]
 80073a4:	021b      	lsls	r3, r3, #8
 80073a6:	b21a      	sxth	r2, r3
 80073a8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80073ac:	4313      	orrs	r3, r2
 80073ae:	b21b      	sxth	r3, r3
 80073b0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80073b2:	89fb      	ldrh	r3, [r7, #14]
}
 80073b4:	4618      	mov	r0, r3
 80073b6:	371c      	adds	r7, #28
 80073b8:	46bd      	mov	sp, r7
 80073ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073be:	4770      	bx	lr

080073c0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b084      	sub	sp, #16
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
 80073c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80073ca:	2300      	movs	r3, #0
 80073cc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	781b      	ldrb	r3, [r3, #0]
 80073d2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80073d6:	2b40      	cmp	r3, #64	; 0x40
 80073d8:	d005      	beq.n	80073e6 <USBD_StdDevReq+0x26>
 80073da:	2b40      	cmp	r3, #64	; 0x40
 80073dc:	d857      	bhi.n	800748e <USBD_StdDevReq+0xce>
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d00f      	beq.n	8007402 <USBD_StdDevReq+0x42>
 80073e2:	2b20      	cmp	r3, #32
 80073e4:	d153      	bne.n	800748e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	32ae      	adds	r2, #174	; 0xae
 80073f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073f4:	689b      	ldr	r3, [r3, #8]
 80073f6:	6839      	ldr	r1, [r7, #0]
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	4798      	blx	r3
 80073fc:	4603      	mov	r3, r0
 80073fe:	73fb      	strb	r3, [r7, #15]
      break;
 8007400:	e04a      	b.n	8007498 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	785b      	ldrb	r3, [r3, #1]
 8007406:	2b09      	cmp	r3, #9
 8007408:	d83b      	bhi.n	8007482 <USBD_StdDevReq+0xc2>
 800740a:	a201      	add	r2, pc, #4	; (adr r2, 8007410 <USBD_StdDevReq+0x50>)
 800740c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007410:	08007465 	.word	0x08007465
 8007414:	08007479 	.word	0x08007479
 8007418:	08007483 	.word	0x08007483
 800741c:	0800746f 	.word	0x0800746f
 8007420:	08007483 	.word	0x08007483
 8007424:	08007443 	.word	0x08007443
 8007428:	08007439 	.word	0x08007439
 800742c:	08007483 	.word	0x08007483
 8007430:	0800745b 	.word	0x0800745b
 8007434:	0800744d 	.word	0x0800744d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007438:	6839      	ldr	r1, [r7, #0]
 800743a:	6878      	ldr	r0, [r7, #4]
 800743c:	f000 fa3c 	bl	80078b8 <USBD_GetDescriptor>
          break;
 8007440:	e024      	b.n	800748c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007442:	6839      	ldr	r1, [r7, #0]
 8007444:	6878      	ldr	r0, [r7, #4]
 8007446:	f000 fbcb 	bl	8007be0 <USBD_SetAddress>
          break;
 800744a:	e01f      	b.n	800748c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800744c:	6839      	ldr	r1, [r7, #0]
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	f000 fc0a 	bl	8007c68 <USBD_SetConfig>
 8007454:	4603      	mov	r3, r0
 8007456:	73fb      	strb	r3, [r7, #15]
          break;
 8007458:	e018      	b.n	800748c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800745a:	6839      	ldr	r1, [r7, #0]
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	f000 fcad 	bl	8007dbc <USBD_GetConfig>
          break;
 8007462:	e013      	b.n	800748c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007464:	6839      	ldr	r1, [r7, #0]
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	f000 fcde 	bl	8007e28 <USBD_GetStatus>
          break;
 800746c:	e00e      	b.n	800748c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800746e:	6839      	ldr	r1, [r7, #0]
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f000 fd0d 	bl	8007e90 <USBD_SetFeature>
          break;
 8007476:	e009      	b.n	800748c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007478:	6839      	ldr	r1, [r7, #0]
 800747a:	6878      	ldr	r0, [r7, #4]
 800747c:	f000 fd31 	bl	8007ee2 <USBD_ClrFeature>
          break;
 8007480:	e004      	b.n	800748c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007482:	6839      	ldr	r1, [r7, #0]
 8007484:	6878      	ldr	r0, [r7, #4]
 8007486:	f000 fd88 	bl	8007f9a <USBD_CtlError>
          break;
 800748a:	bf00      	nop
      }
      break;
 800748c:	e004      	b.n	8007498 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800748e:	6839      	ldr	r1, [r7, #0]
 8007490:	6878      	ldr	r0, [r7, #4]
 8007492:	f000 fd82 	bl	8007f9a <USBD_CtlError>
      break;
 8007496:	bf00      	nop
  }

  return ret;
 8007498:	7bfb      	ldrb	r3, [r7, #15]
}
 800749a:	4618      	mov	r0, r3
 800749c:	3710      	adds	r7, #16
 800749e:	46bd      	mov	sp, r7
 80074a0:	bd80      	pop	{r7, pc}
 80074a2:	bf00      	nop

080074a4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b084      	sub	sp, #16
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
 80074ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80074ae:	2300      	movs	r3, #0
 80074b0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	781b      	ldrb	r3, [r3, #0]
 80074b6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80074ba:	2b40      	cmp	r3, #64	; 0x40
 80074bc:	d005      	beq.n	80074ca <USBD_StdItfReq+0x26>
 80074be:	2b40      	cmp	r3, #64	; 0x40
 80074c0:	d852      	bhi.n	8007568 <USBD_StdItfReq+0xc4>
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d001      	beq.n	80074ca <USBD_StdItfReq+0x26>
 80074c6:	2b20      	cmp	r3, #32
 80074c8:	d14e      	bne.n	8007568 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074d0:	b2db      	uxtb	r3, r3
 80074d2:	3b01      	subs	r3, #1
 80074d4:	2b02      	cmp	r3, #2
 80074d6:	d840      	bhi.n	800755a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	889b      	ldrh	r3, [r3, #4]
 80074dc:	b2db      	uxtb	r3, r3
 80074de:	2b01      	cmp	r3, #1
 80074e0:	d836      	bhi.n	8007550 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	889b      	ldrh	r3, [r3, #4]
 80074e6:	b2db      	uxtb	r3, r3
 80074e8:	4619      	mov	r1, r3
 80074ea:	6878      	ldr	r0, [r7, #4]
 80074ec:	f7ff fed9 	bl	80072a2 <USBD_CoreFindIF>
 80074f0:	4603      	mov	r3, r0
 80074f2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80074f4:	7bbb      	ldrb	r3, [r7, #14]
 80074f6:	2bff      	cmp	r3, #255	; 0xff
 80074f8:	d01d      	beq.n	8007536 <USBD_StdItfReq+0x92>
 80074fa:	7bbb      	ldrb	r3, [r7, #14]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d11a      	bne.n	8007536 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007500:	7bba      	ldrb	r2, [r7, #14]
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	32ae      	adds	r2, #174	; 0xae
 8007506:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800750a:	689b      	ldr	r3, [r3, #8]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d00f      	beq.n	8007530 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007510:	7bba      	ldrb	r2, [r7, #14]
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007518:	7bba      	ldrb	r2, [r7, #14]
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	32ae      	adds	r2, #174	; 0xae
 800751e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007522:	689b      	ldr	r3, [r3, #8]
 8007524:	6839      	ldr	r1, [r7, #0]
 8007526:	6878      	ldr	r0, [r7, #4]
 8007528:	4798      	blx	r3
 800752a:	4603      	mov	r3, r0
 800752c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800752e:	e004      	b.n	800753a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007530:	2303      	movs	r3, #3
 8007532:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007534:	e001      	b.n	800753a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007536:	2303      	movs	r3, #3
 8007538:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	88db      	ldrh	r3, [r3, #6]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d110      	bne.n	8007564 <USBD_StdItfReq+0xc0>
 8007542:	7bfb      	ldrb	r3, [r7, #15]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d10d      	bne.n	8007564 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007548:	6878      	ldr	r0, [r7, #4]
 800754a:	f000 fdd4 	bl	80080f6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800754e:	e009      	b.n	8007564 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007550:	6839      	ldr	r1, [r7, #0]
 8007552:	6878      	ldr	r0, [r7, #4]
 8007554:	f000 fd21 	bl	8007f9a <USBD_CtlError>
          break;
 8007558:	e004      	b.n	8007564 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800755a:	6839      	ldr	r1, [r7, #0]
 800755c:	6878      	ldr	r0, [r7, #4]
 800755e:	f000 fd1c 	bl	8007f9a <USBD_CtlError>
          break;
 8007562:	e000      	b.n	8007566 <USBD_StdItfReq+0xc2>
          break;
 8007564:	bf00      	nop
      }
      break;
 8007566:	e004      	b.n	8007572 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007568:	6839      	ldr	r1, [r7, #0]
 800756a:	6878      	ldr	r0, [r7, #4]
 800756c:	f000 fd15 	bl	8007f9a <USBD_CtlError>
      break;
 8007570:	bf00      	nop
  }

  return ret;
 8007572:	7bfb      	ldrb	r3, [r7, #15]
}
 8007574:	4618      	mov	r0, r3
 8007576:	3710      	adds	r7, #16
 8007578:	46bd      	mov	sp, r7
 800757a:	bd80      	pop	{r7, pc}

0800757c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b084      	sub	sp, #16
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
 8007584:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007586:	2300      	movs	r3, #0
 8007588:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	889b      	ldrh	r3, [r3, #4]
 800758e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	781b      	ldrb	r3, [r3, #0]
 8007594:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007598:	2b40      	cmp	r3, #64	; 0x40
 800759a:	d007      	beq.n	80075ac <USBD_StdEPReq+0x30>
 800759c:	2b40      	cmp	r3, #64	; 0x40
 800759e:	f200 817f 	bhi.w	80078a0 <USBD_StdEPReq+0x324>
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d02a      	beq.n	80075fc <USBD_StdEPReq+0x80>
 80075a6:	2b20      	cmp	r3, #32
 80075a8:	f040 817a 	bne.w	80078a0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80075ac:	7bbb      	ldrb	r3, [r7, #14]
 80075ae:	4619      	mov	r1, r3
 80075b0:	6878      	ldr	r0, [r7, #4]
 80075b2:	f7ff fe83 	bl	80072bc <USBD_CoreFindEP>
 80075b6:	4603      	mov	r3, r0
 80075b8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80075ba:	7b7b      	ldrb	r3, [r7, #13]
 80075bc:	2bff      	cmp	r3, #255	; 0xff
 80075be:	f000 8174 	beq.w	80078aa <USBD_StdEPReq+0x32e>
 80075c2:	7b7b      	ldrb	r3, [r7, #13]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	f040 8170 	bne.w	80078aa <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80075ca:	7b7a      	ldrb	r2, [r7, #13]
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80075d2:	7b7a      	ldrb	r2, [r7, #13]
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	32ae      	adds	r2, #174	; 0xae
 80075d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075dc:	689b      	ldr	r3, [r3, #8]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	f000 8163 	beq.w	80078aa <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80075e4:	7b7a      	ldrb	r2, [r7, #13]
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	32ae      	adds	r2, #174	; 0xae
 80075ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075ee:	689b      	ldr	r3, [r3, #8]
 80075f0:	6839      	ldr	r1, [r7, #0]
 80075f2:	6878      	ldr	r0, [r7, #4]
 80075f4:	4798      	blx	r3
 80075f6:	4603      	mov	r3, r0
 80075f8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80075fa:	e156      	b.n	80078aa <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	785b      	ldrb	r3, [r3, #1]
 8007600:	2b03      	cmp	r3, #3
 8007602:	d008      	beq.n	8007616 <USBD_StdEPReq+0x9a>
 8007604:	2b03      	cmp	r3, #3
 8007606:	f300 8145 	bgt.w	8007894 <USBD_StdEPReq+0x318>
 800760a:	2b00      	cmp	r3, #0
 800760c:	f000 809b 	beq.w	8007746 <USBD_StdEPReq+0x1ca>
 8007610:	2b01      	cmp	r3, #1
 8007612:	d03c      	beq.n	800768e <USBD_StdEPReq+0x112>
 8007614:	e13e      	b.n	8007894 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800761c:	b2db      	uxtb	r3, r3
 800761e:	2b02      	cmp	r3, #2
 8007620:	d002      	beq.n	8007628 <USBD_StdEPReq+0xac>
 8007622:	2b03      	cmp	r3, #3
 8007624:	d016      	beq.n	8007654 <USBD_StdEPReq+0xd8>
 8007626:	e02c      	b.n	8007682 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007628:	7bbb      	ldrb	r3, [r7, #14]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d00d      	beq.n	800764a <USBD_StdEPReq+0xce>
 800762e:	7bbb      	ldrb	r3, [r7, #14]
 8007630:	2b80      	cmp	r3, #128	; 0x80
 8007632:	d00a      	beq.n	800764a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007634:	7bbb      	ldrb	r3, [r7, #14]
 8007636:	4619      	mov	r1, r3
 8007638:	6878      	ldr	r0, [r7, #4]
 800763a:	f003 fee7 	bl	800b40c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800763e:	2180      	movs	r1, #128	; 0x80
 8007640:	6878      	ldr	r0, [r7, #4]
 8007642:	f003 fee3 	bl	800b40c <USBD_LL_StallEP>
 8007646:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007648:	e020      	b.n	800768c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800764a:	6839      	ldr	r1, [r7, #0]
 800764c:	6878      	ldr	r0, [r7, #4]
 800764e:	f000 fca4 	bl	8007f9a <USBD_CtlError>
              break;
 8007652:	e01b      	b.n	800768c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	885b      	ldrh	r3, [r3, #2]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d10e      	bne.n	800767a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800765c:	7bbb      	ldrb	r3, [r7, #14]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d00b      	beq.n	800767a <USBD_StdEPReq+0xfe>
 8007662:	7bbb      	ldrb	r3, [r7, #14]
 8007664:	2b80      	cmp	r3, #128	; 0x80
 8007666:	d008      	beq.n	800767a <USBD_StdEPReq+0xfe>
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	88db      	ldrh	r3, [r3, #6]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d104      	bne.n	800767a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007670:	7bbb      	ldrb	r3, [r7, #14]
 8007672:	4619      	mov	r1, r3
 8007674:	6878      	ldr	r0, [r7, #4]
 8007676:	f003 fec9 	bl	800b40c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	f000 fd3b 	bl	80080f6 <USBD_CtlSendStatus>

              break;
 8007680:	e004      	b.n	800768c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007682:	6839      	ldr	r1, [r7, #0]
 8007684:	6878      	ldr	r0, [r7, #4]
 8007686:	f000 fc88 	bl	8007f9a <USBD_CtlError>
              break;
 800768a:	bf00      	nop
          }
          break;
 800768c:	e107      	b.n	800789e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007694:	b2db      	uxtb	r3, r3
 8007696:	2b02      	cmp	r3, #2
 8007698:	d002      	beq.n	80076a0 <USBD_StdEPReq+0x124>
 800769a:	2b03      	cmp	r3, #3
 800769c:	d016      	beq.n	80076cc <USBD_StdEPReq+0x150>
 800769e:	e04b      	b.n	8007738 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80076a0:	7bbb      	ldrb	r3, [r7, #14]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d00d      	beq.n	80076c2 <USBD_StdEPReq+0x146>
 80076a6:	7bbb      	ldrb	r3, [r7, #14]
 80076a8:	2b80      	cmp	r3, #128	; 0x80
 80076aa:	d00a      	beq.n	80076c2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80076ac:	7bbb      	ldrb	r3, [r7, #14]
 80076ae:	4619      	mov	r1, r3
 80076b0:	6878      	ldr	r0, [r7, #4]
 80076b2:	f003 feab 	bl	800b40c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80076b6:	2180      	movs	r1, #128	; 0x80
 80076b8:	6878      	ldr	r0, [r7, #4]
 80076ba:	f003 fea7 	bl	800b40c <USBD_LL_StallEP>
 80076be:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80076c0:	e040      	b.n	8007744 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80076c2:	6839      	ldr	r1, [r7, #0]
 80076c4:	6878      	ldr	r0, [r7, #4]
 80076c6:	f000 fc68 	bl	8007f9a <USBD_CtlError>
              break;
 80076ca:	e03b      	b.n	8007744 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	885b      	ldrh	r3, [r3, #2]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d136      	bne.n	8007742 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80076d4:	7bbb      	ldrb	r3, [r7, #14]
 80076d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d004      	beq.n	80076e8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80076de:	7bbb      	ldrb	r3, [r7, #14]
 80076e0:	4619      	mov	r1, r3
 80076e2:	6878      	ldr	r0, [r7, #4]
 80076e4:	f003 fec8 	bl	800b478 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80076e8:	6878      	ldr	r0, [r7, #4]
 80076ea:	f000 fd04 	bl	80080f6 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80076ee:	7bbb      	ldrb	r3, [r7, #14]
 80076f0:	4619      	mov	r1, r3
 80076f2:	6878      	ldr	r0, [r7, #4]
 80076f4:	f7ff fde2 	bl	80072bc <USBD_CoreFindEP>
 80076f8:	4603      	mov	r3, r0
 80076fa:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80076fc:	7b7b      	ldrb	r3, [r7, #13]
 80076fe:	2bff      	cmp	r3, #255	; 0xff
 8007700:	d01f      	beq.n	8007742 <USBD_StdEPReq+0x1c6>
 8007702:	7b7b      	ldrb	r3, [r7, #13]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d11c      	bne.n	8007742 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007708:	7b7a      	ldrb	r2, [r7, #13]
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007710:	7b7a      	ldrb	r2, [r7, #13]
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	32ae      	adds	r2, #174	; 0xae
 8007716:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800771a:	689b      	ldr	r3, [r3, #8]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d010      	beq.n	8007742 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007720:	7b7a      	ldrb	r2, [r7, #13]
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	32ae      	adds	r2, #174	; 0xae
 8007726:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800772a:	689b      	ldr	r3, [r3, #8]
 800772c:	6839      	ldr	r1, [r7, #0]
 800772e:	6878      	ldr	r0, [r7, #4]
 8007730:	4798      	blx	r3
 8007732:	4603      	mov	r3, r0
 8007734:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007736:	e004      	b.n	8007742 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007738:	6839      	ldr	r1, [r7, #0]
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	f000 fc2d 	bl	8007f9a <USBD_CtlError>
              break;
 8007740:	e000      	b.n	8007744 <USBD_StdEPReq+0x1c8>
              break;
 8007742:	bf00      	nop
          }
          break;
 8007744:	e0ab      	b.n	800789e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800774c:	b2db      	uxtb	r3, r3
 800774e:	2b02      	cmp	r3, #2
 8007750:	d002      	beq.n	8007758 <USBD_StdEPReq+0x1dc>
 8007752:	2b03      	cmp	r3, #3
 8007754:	d032      	beq.n	80077bc <USBD_StdEPReq+0x240>
 8007756:	e097      	b.n	8007888 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007758:	7bbb      	ldrb	r3, [r7, #14]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d007      	beq.n	800776e <USBD_StdEPReq+0x1f2>
 800775e:	7bbb      	ldrb	r3, [r7, #14]
 8007760:	2b80      	cmp	r3, #128	; 0x80
 8007762:	d004      	beq.n	800776e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007764:	6839      	ldr	r1, [r7, #0]
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	f000 fc17 	bl	8007f9a <USBD_CtlError>
                break;
 800776c:	e091      	b.n	8007892 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800776e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007772:	2b00      	cmp	r3, #0
 8007774:	da0b      	bge.n	800778e <USBD_StdEPReq+0x212>
 8007776:	7bbb      	ldrb	r3, [r7, #14]
 8007778:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800777c:	4613      	mov	r3, r2
 800777e:	009b      	lsls	r3, r3, #2
 8007780:	4413      	add	r3, r2
 8007782:	009b      	lsls	r3, r3, #2
 8007784:	3310      	adds	r3, #16
 8007786:	687a      	ldr	r2, [r7, #4]
 8007788:	4413      	add	r3, r2
 800778a:	3304      	adds	r3, #4
 800778c:	e00b      	b.n	80077a6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800778e:	7bbb      	ldrb	r3, [r7, #14]
 8007790:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007794:	4613      	mov	r3, r2
 8007796:	009b      	lsls	r3, r3, #2
 8007798:	4413      	add	r3, r2
 800779a:	009b      	lsls	r3, r3, #2
 800779c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80077a0:	687a      	ldr	r2, [r7, #4]
 80077a2:	4413      	add	r3, r2
 80077a4:	3304      	adds	r3, #4
 80077a6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80077a8:	68bb      	ldr	r3, [r7, #8]
 80077aa:	2200      	movs	r2, #0
 80077ac:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80077ae:	68bb      	ldr	r3, [r7, #8]
 80077b0:	2202      	movs	r2, #2
 80077b2:	4619      	mov	r1, r3
 80077b4:	6878      	ldr	r0, [r7, #4]
 80077b6:	f000 fc61 	bl	800807c <USBD_CtlSendData>
              break;
 80077ba:	e06a      	b.n	8007892 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80077bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	da11      	bge.n	80077e8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80077c4:	7bbb      	ldrb	r3, [r7, #14]
 80077c6:	f003 020f 	and.w	r2, r3, #15
 80077ca:	6879      	ldr	r1, [r7, #4]
 80077cc:	4613      	mov	r3, r2
 80077ce:	009b      	lsls	r3, r3, #2
 80077d0:	4413      	add	r3, r2
 80077d2:	009b      	lsls	r3, r3, #2
 80077d4:	440b      	add	r3, r1
 80077d6:	3324      	adds	r3, #36	; 0x24
 80077d8:	881b      	ldrh	r3, [r3, #0]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d117      	bne.n	800780e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80077de:	6839      	ldr	r1, [r7, #0]
 80077e0:	6878      	ldr	r0, [r7, #4]
 80077e2:	f000 fbda 	bl	8007f9a <USBD_CtlError>
                  break;
 80077e6:	e054      	b.n	8007892 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80077e8:	7bbb      	ldrb	r3, [r7, #14]
 80077ea:	f003 020f 	and.w	r2, r3, #15
 80077ee:	6879      	ldr	r1, [r7, #4]
 80077f0:	4613      	mov	r3, r2
 80077f2:	009b      	lsls	r3, r3, #2
 80077f4:	4413      	add	r3, r2
 80077f6:	009b      	lsls	r3, r3, #2
 80077f8:	440b      	add	r3, r1
 80077fa:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80077fe:	881b      	ldrh	r3, [r3, #0]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d104      	bne.n	800780e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007804:	6839      	ldr	r1, [r7, #0]
 8007806:	6878      	ldr	r0, [r7, #4]
 8007808:	f000 fbc7 	bl	8007f9a <USBD_CtlError>
                  break;
 800780c:	e041      	b.n	8007892 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800780e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007812:	2b00      	cmp	r3, #0
 8007814:	da0b      	bge.n	800782e <USBD_StdEPReq+0x2b2>
 8007816:	7bbb      	ldrb	r3, [r7, #14]
 8007818:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800781c:	4613      	mov	r3, r2
 800781e:	009b      	lsls	r3, r3, #2
 8007820:	4413      	add	r3, r2
 8007822:	009b      	lsls	r3, r3, #2
 8007824:	3310      	adds	r3, #16
 8007826:	687a      	ldr	r2, [r7, #4]
 8007828:	4413      	add	r3, r2
 800782a:	3304      	adds	r3, #4
 800782c:	e00b      	b.n	8007846 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800782e:	7bbb      	ldrb	r3, [r7, #14]
 8007830:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007834:	4613      	mov	r3, r2
 8007836:	009b      	lsls	r3, r3, #2
 8007838:	4413      	add	r3, r2
 800783a:	009b      	lsls	r3, r3, #2
 800783c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007840:	687a      	ldr	r2, [r7, #4]
 8007842:	4413      	add	r3, r2
 8007844:	3304      	adds	r3, #4
 8007846:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007848:	7bbb      	ldrb	r3, [r7, #14]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d002      	beq.n	8007854 <USBD_StdEPReq+0x2d8>
 800784e:	7bbb      	ldrb	r3, [r7, #14]
 8007850:	2b80      	cmp	r3, #128	; 0x80
 8007852:	d103      	bne.n	800785c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007854:	68bb      	ldr	r3, [r7, #8]
 8007856:	2200      	movs	r2, #0
 8007858:	601a      	str	r2, [r3, #0]
 800785a:	e00e      	b.n	800787a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800785c:	7bbb      	ldrb	r3, [r7, #14]
 800785e:	4619      	mov	r1, r3
 8007860:	6878      	ldr	r0, [r7, #4]
 8007862:	f003 fe3f 	bl	800b4e4 <USBD_LL_IsStallEP>
 8007866:	4603      	mov	r3, r0
 8007868:	2b00      	cmp	r3, #0
 800786a:	d003      	beq.n	8007874 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800786c:	68bb      	ldr	r3, [r7, #8]
 800786e:	2201      	movs	r2, #1
 8007870:	601a      	str	r2, [r3, #0]
 8007872:	e002      	b.n	800787a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007874:	68bb      	ldr	r3, [r7, #8]
 8007876:	2200      	movs	r2, #0
 8007878:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800787a:	68bb      	ldr	r3, [r7, #8]
 800787c:	2202      	movs	r2, #2
 800787e:	4619      	mov	r1, r3
 8007880:	6878      	ldr	r0, [r7, #4]
 8007882:	f000 fbfb 	bl	800807c <USBD_CtlSendData>
              break;
 8007886:	e004      	b.n	8007892 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007888:	6839      	ldr	r1, [r7, #0]
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	f000 fb85 	bl	8007f9a <USBD_CtlError>
              break;
 8007890:	bf00      	nop
          }
          break;
 8007892:	e004      	b.n	800789e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007894:	6839      	ldr	r1, [r7, #0]
 8007896:	6878      	ldr	r0, [r7, #4]
 8007898:	f000 fb7f 	bl	8007f9a <USBD_CtlError>
          break;
 800789c:	bf00      	nop
      }
      break;
 800789e:	e005      	b.n	80078ac <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80078a0:	6839      	ldr	r1, [r7, #0]
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f000 fb79 	bl	8007f9a <USBD_CtlError>
      break;
 80078a8:	e000      	b.n	80078ac <USBD_StdEPReq+0x330>
      break;
 80078aa:	bf00      	nop
  }

  return ret;
 80078ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80078ae:	4618      	mov	r0, r3
 80078b0:	3710      	adds	r7, #16
 80078b2:	46bd      	mov	sp, r7
 80078b4:	bd80      	pop	{r7, pc}
	...

080078b8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b084      	sub	sp, #16
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
 80078c0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80078c2:	2300      	movs	r3, #0
 80078c4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80078c6:	2300      	movs	r3, #0
 80078c8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80078ca:	2300      	movs	r3, #0
 80078cc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	885b      	ldrh	r3, [r3, #2]
 80078d2:	0a1b      	lsrs	r3, r3, #8
 80078d4:	b29b      	uxth	r3, r3
 80078d6:	3b01      	subs	r3, #1
 80078d8:	2b0e      	cmp	r3, #14
 80078da:	f200 8152 	bhi.w	8007b82 <USBD_GetDescriptor+0x2ca>
 80078de:	a201      	add	r2, pc, #4	; (adr r2, 80078e4 <USBD_GetDescriptor+0x2c>)
 80078e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078e4:	08007955 	.word	0x08007955
 80078e8:	0800796d 	.word	0x0800796d
 80078ec:	080079ad 	.word	0x080079ad
 80078f0:	08007b83 	.word	0x08007b83
 80078f4:	08007b83 	.word	0x08007b83
 80078f8:	08007b23 	.word	0x08007b23
 80078fc:	08007b4f 	.word	0x08007b4f
 8007900:	08007b83 	.word	0x08007b83
 8007904:	08007b83 	.word	0x08007b83
 8007908:	08007b83 	.word	0x08007b83
 800790c:	08007b83 	.word	0x08007b83
 8007910:	08007b83 	.word	0x08007b83
 8007914:	08007b83 	.word	0x08007b83
 8007918:	08007b83 	.word	0x08007b83
 800791c:	08007921 	.word	0x08007921
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007926:	69db      	ldr	r3, [r3, #28]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d00b      	beq.n	8007944 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007932:	69db      	ldr	r3, [r3, #28]
 8007934:	687a      	ldr	r2, [r7, #4]
 8007936:	7c12      	ldrb	r2, [r2, #16]
 8007938:	f107 0108 	add.w	r1, r7, #8
 800793c:	4610      	mov	r0, r2
 800793e:	4798      	blx	r3
 8007940:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007942:	e126      	b.n	8007b92 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007944:	6839      	ldr	r1, [r7, #0]
 8007946:	6878      	ldr	r0, [r7, #4]
 8007948:	f000 fb27 	bl	8007f9a <USBD_CtlError>
        err++;
 800794c:	7afb      	ldrb	r3, [r7, #11]
 800794e:	3301      	adds	r3, #1
 8007950:	72fb      	strb	r3, [r7, #11]
      break;
 8007952:	e11e      	b.n	8007b92 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	687a      	ldr	r2, [r7, #4]
 800795e:	7c12      	ldrb	r2, [r2, #16]
 8007960:	f107 0108 	add.w	r1, r7, #8
 8007964:	4610      	mov	r0, r2
 8007966:	4798      	blx	r3
 8007968:	60f8      	str	r0, [r7, #12]
      break;
 800796a:	e112      	b.n	8007b92 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	7c1b      	ldrb	r3, [r3, #16]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d10d      	bne.n	8007990 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800797a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800797c:	f107 0208 	add.w	r2, r7, #8
 8007980:	4610      	mov	r0, r2
 8007982:	4798      	blx	r3
 8007984:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	3301      	adds	r3, #1
 800798a:	2202      	movs	r2, #2
 800798c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800798e:	e100      	b.n	8007b92 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007998:	f107 0208 	add.w	r2, r7, #8
 800799c:	4610      	mov	r0, r2
 800799e:	4798      	blx	r3
 80079a0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	3301      	adds	r3, #1
 80079a6:	2202      	movs	r2, #2
 80079a8:	701a      	strb	r2, [r3, #0]
      break;
 80079aa:	e0f2      	b.n	8007b92 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	885b      	ldrh	r3, [r3, #2]
 80079b0:	b2db      	uxtb	r3, r3
 80079b2:	2b05      	cmp	r3, #5
 80079b4:	f200 80ac 	bhi.w	8007b10 <USBD_GetDescriptor+0x258>
 80079b8:	a201      	add	r2, pc, #4	; (adr r2, 80079c0 <USBD_GetDescriptor+0x108>)
 80079ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079be:	bf00      	nop
 80079c0:	080079d9 	.word	0x080079d9
 80079c4:	08007a0d 	.word	0x08007a0d
 80079c8:	08007a41 	.word	0x08007a41
 80079cc:	08007a75 	.word	0x08007a75
 80079d0:	08007aa9 	.word	0x08007aa9
 80079d4:	08007add 	.word	0x08007add
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079de:	685b      	ldr	r3, [r3, #4]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d00b      	beq.n	80079fc <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079ea:	685b      	ldr	r3, [r3, #4]
 80079ec:	687a      	ldr	r2, [r7, #4]
 80079ee:	7c12      	ldrb	r2, [r2, #16]
 80079f0:	f107 0108 	add.w	r1, r7, #8
 80079f4:	4610      	mov	r0, r2
 80079f6:	4798      	blx	r3
 80079f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80079fa:	e091      	b.n	8007b20 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80079fc:	6839      	ldr	r1, [r7, #0]
 80079fe:	6878      	ldr	r0, [r7, #4]
 8007a00:	f000 facb 	bl	8007f9a <USBD_CtlError>
            err++;
 8007a04:	7afb      	ldrb	r3, [r7, #11]
 8007a06:	3301      	adds	r3, #1
 8007a08:	72fb      	strb	r3, [r7, #11]
          break;
 8007a0a:	e089      	b.n	8007b20 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a12:	689b      	ldr	r3, [r3, #8]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d00b      	beq.n	8007a30 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a1e:	689b      	ldr	r3, [r3, #8]
 8007a20:	687a      	ldr	r2, [r7, #4]
 8007a22:	7c12      	ldrb	r2, [r2, #16]
 8007a24:	f107 0108 	add.w	r1, r7, #8
 8007a28:	4610      	mov	r0, r2
 8007a2a:	4798      	blx	r3
 8007a2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a2e:	e077      	b.n	8007b20 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007a30:	6839      	ldr	r1, [r7, #0]
 8007a32:	6878      	ldr	r0, [r7, #4]
 8007a34:	f000 fab1 	bl	8007f9a <USBD_CtlError>
            err++;
 8007a38:	7afb      	ldrb	r3, [r7, #11]
 8007a3a:	3301      	adds	r3, #1
 8007a3c:	72fb      	strb	r3, [r7, #11]
          break;
 8007a3e:	e06f      	b.n	8007b20 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a46:	68db      	ldr	r3, [r3, #12]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d00b      	beq.n	8007a64 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a52:	68db      	ldr	r3, [r3, #12]
 8007a54:	687a      	ldr	r2, [r7, #4]
 8007a56:	7c12      	ldrb	r2, [r2, #16]
 8007a58:	f107 0108 	add.w	r1, r7, #8
 8007a5c:	4610      	mov	r0, r2
 8007a5e:	4798      	blx	r3
 8007a60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a62:	e05d      	b.n	8007b20 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007a64:	6839      	ldr	r1, [r7, #0]
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	f000 fa97 	bl	8007f9a <USBD_CtlError>
            err++;
 8007a6c:	7afb      	ldrb	r3, [r7, #11]
 8007a6e:	3301      	adds	r3, #1
 8007a70:	72fb      	strb	r3, [r7, #11]
          break;
 8007a72:	e055      	b.n	8007b20 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a7a:	691b      	ldr	r3, [r3, #16]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d00b      	beq.n	8007a98 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a86:	691b      	ldr	r3, [r3, #16]
 8007a88:	687a      	ldr	r2, [r7, #4]
 8007a8a:	7c12      	ldrb	r2, [r2, #16]
 8007a8c:	f107 0108 	add.w	r1, r7, #8
 8007a90:	4610      	mov	r0, r2
 8007a92:	4798      	blx	r3
 8007a94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a96:	e043      	b.n	8007b20 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007a98:	6839      	ldr	r1, [r7, #0]
 8007a9a:	6878      	ldr	r0, [r7, #4]
 8007a9c:	f000 fa7d 	bl	8007f9a <USBD_CtlError>
            err++;
 8007aa0:	7afb      	ldrb	r3, [r7, #11]
 8007aa2:	3301      	adds	r3, #1
 8007aa4:	72fb      	strb	r3, [r7, #11]
          break;
 8007aa6:	e03b      	b.n	8007b20 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007aae:	695b      	ldr	r3, [r3, #20]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d00b      	beq.n	8007acc <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007aba:	695b      	ldr	r3, [r3, #20]
 8007abc:	687a      	ldr	r2, [r7, #4]
 8007abe:	7c12      	ldrb	r2, [r2, #16]
 8007ac0:	f107 0108 	add.w	r1, r7, #8
 8007ac4:	4610      	mov	r0, r2
 8007ac6:	4798      	blx	r3
 8007ac8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007aca:	e029      	b.n	8007b20 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007acc:	6839      	ldr	r1, [r7, #0]
 8007ace:	6878      	ldr	r0, [r7, #4]
 8007ad0:	f000 fa63 	bl	8007f9a <USBD_CtlError>
            err++;
 8007ad4:	7afb      	ldrb	r3, [r7, #11]
 8007ad6:	3301      	adds	r3, #1
 8007ad8:	72fb      	strb	r3, [r7, #11]
          break;
 8007ada:	e021      	b.n	8007b20 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ae2:	699b      	ldr	r3, [r3, #24]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d00b      	beq.n	8007b00 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007aee:	699b      	ldr	r3, [r3, #24]
 8007af0:	687a      	ldr	r2, [r7, #4]
 8007af2:	7c12      	ldrb	r2, [r2, #16]
 8007af4:	f107 0108 	add.w	r1, r7, #8
 8007af8:	4610      	mov	r0, r2
 8007afa:	4798      	blx	r3
 8007afc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007afe:	e00f      	b.n	8007b20 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007b00:	6839      	ldr	r1, [r7, #0]
 8007b02:	6878      	ldr	r0, [r7, #4]
 8007b04:	f000 fa49 	bl	8007f9a <USBD_CtlError>
            err++;
 8007b08:	7afb      	ldrb	r3, [r7, #11]
 8007b0a:	3301      	adds	r3, #1
 8007b0c:	72fb      	strb	r3, [r7, #11]
          break;
 8007b0e:	e007      	b.n	8007b20 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007b10:	6839      	ldr	r1, [r7, #0]
 8007b12:	6878      	ldr	r0, [r7, #4]
 8007b14:	f000 fa41 	bl	8007f9a <USBD_CtlError>
          err++;
 8007b18:	7afb      	ldrb	r3, [r7, #11]
 8007b1a:	3301      	adds	r3, #1
 8007b1c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007b1e:	bf00      	nop
      }
      break;
 8007b20:	e037      	b.n	8007b92 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	7c1b      	ldrb	r3, [r3, #16]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d109      	bne.n	8007b3e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b32:	f107 0208 	add.w	r2, r7, #8
 8007b36:	4610      	mov	r0, r2
 8007b38:	4798      	blx	r3
 8007b3a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007b3c:	e029      	b.n	8007b92 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007b3e:	6839      	ldr	r1, [r7, #0]
 8007b40:	6878      	ldr	r0, [r7, #4]
 8007b42:	f000 fa2a 	bl	8007f9a <USBD_CtlError>
        err++;
 8007b46:	7afb      	ldrb	r3, [r7, #11]
 8007b48:	3301      	adds	r3, #1
 8007b4a:	72fb      	strb	r3, [r7, #11]
      break;
 8007b4c:	e021      	b.n	8007b92 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	7c1b      	ldrb	r3, [r3, #16]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d10d      	bne.n	8007b72 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b5e:	f107 0208 	add.w	r2, r7, #8
 8007b62:	4610      	mov	r0, r2
 8007b64:	4798      	blx	r3
 8007b66:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	3301      	adds	r3, #1
 8007b6c:	2207      	movs	r2, #7
 8007b6e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007b70:	e00f      	b.n	8007b92 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007b72:	6839      	ldr	r1, [r7, #0]
 8007b74:	6878      	ldr	r0, [r7, #4]
 8007b76:	f000 fa10 	bl	8007f9a <USBD_CtlError>
        err++;
 8007b7a:	7afb      	ldrb	r3, [r7, #11]
 8007b7c:	3301      	adds	r3, #1
 8007b7e:	72fb      	strb	r3, [r7, #11]
      break;
 8007b80:	e007      	b.n	8007b92 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8007b82:	6839      	ldr	r1, [r7, #0]
 8007b84:	6878      	ldr	r0, [r7, #4]
 8007b86:	f000 fa08 	bl	8007f9a <USBD_CtlError>
      err++;
 8007b8a:	7afb      	ldrb	r3, [r7, #11]
 8007b8c:	3301      	adds	r3, #1
 8007b8e:	72fb      	strb	r3, [r7, #11]
      break;
 8007b90:	bf00      	nop
  }

  if (err != 0U)
 8007b92:	7afb      	ldrb	r3, [r7, #11]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d11e      	bne.n	8007bd6 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	88db      	ldrh	r3, [r3, #6]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d016      	beq.n	8007bce <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8007ba0:	893b      	ldrh	r3, [r7, #8]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d00e      	beq.n	8007bc4 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8007ba6:	683b      	ldr	r3, [r7, #0]
 8007ba8:	88da      	ldrh	r2, [r3, #6]
 8007baa:	893b      	ldrh	r3, [r7, #8]
 8007bac:	4293      	cmp	r3, r2
 8007bae:	bf28      	it	cs
 8007bb0:	4613      	movcs	r3, r2
 8007bb2:	b29b      	uxth	r3, r3
 8007bb4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007bb6:	893b      	ldrh	r3, [r7, #8]
 8007bb8:	461a      	mov	r2, r3
 8007bba:	68f9      	ldr	r1, [r7, #12]
 8007bbc:	6878      	ldr	r0, [r7, #4]
 8007bbe:	f000 fa5d 	bl	800807c <USBD_CtlSendData>
 8007bc2:	e009      	b.n	8007bd8 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007bc4:	6839      	ldr	r1, [r7, #0]
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	f000 f9e7 	bl	8007f9a <USBD_CtlError>
 8007bcc:	e004      	b.n	8007bd8 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007bce:	6878      	ldr	r0, [r7, #4]
 8007bd0:	f000 fa91 	bl	80080f6 <USBD_CtlSendStatus>
 8007bd4:	e000      	b.n	8007bd8 <USBD_GetDescriptor+0x320>
    return;
 8007bd6:	bf00      	nop
  }
}
 8007bd8:	3710      	adds	r7, #16
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	bd80      	pop	{r7, pc}
 8007bde:	bf00      	nop

08007be0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b084      	sub	sp, #16
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
 8007be8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	889b      	ldrh	r3, [r3, #4]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d131      	bne.n	8007c56 <USBD_SetAddress+0x76>
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	88db      	ldrh	r3, [r3, #6]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d12d      	bne.n	8007c56 <USBD_SetAddress+0x76>
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	885b      	ldrh	r3, [r3, #2]
 8007bfe:	2b7f      	cmp	r3, #127	; 0x7f
 8007c00:	d829      	bhi.n	8007c56 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	885b      	ldrh	r3, [r3, #2]
 8007c06:	b2db      	uxtb	r3, r3
 8007c08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c0c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c14:	b2db      	uxtb	r3, r3
 8007c16:	2b03      	cmp	r3, #3
 8007c18:	d104      	bne.n	8007c24 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007c1a:	6839      	ldr	r1, [r7, #0]
 8007c1c:	6878      	ldr	r0, [r7, #4]
 8007c1e:	f000 f9bc 	bl	8007f9a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c22:	e01d      	b.n	8007c60 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	7bfa      	ldrb	r2, [r7, #15]
 8007c28:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007c2c:	7bfb      	ldrb	r3, [r7, #15]
 8007c2e:	4619      	mov	r1, r3
 8007c30:	6878      	ldr	r0, [r7, #4]
 8007c32:	f003 fc83 	bl	800b53c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007c36:	6878      	ldr	r0, [r7, #4]
 8007c38:	f000 fa5d 	bl	80080f6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007c3c:	7bfb      	ldrb	r3, [r7, #15]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d004      	beq.n	8007c4c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2202      	movs	r2, #2
 8007c46:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c4a:	e009      	b.n	8007c60 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2201      	movs	r2, #1
 8007c50:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c54:	e004      	b.n	8007c60 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007c56:	6839      	ldr	r1, [r7, #0]
 8007c58:	6878      	ldr	r0, [r7, #4]
 8007c5a:	f000 f99e 	bl	8007f9a <USBD_CtlError>
  }
}
 8007c5e:	bf00      	nop
 8007c60:	bf00      	nop
 8007c62:	3710      	adds	r7, #16
 8007c64:	46bd      	mov	sp, r7
 8007c66:	bd80      	pop	{r7, pc}

08007c68 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b084      	sub	sp, #16
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
 8007c70:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007c72:	2300      	movs	r3, #0
 8007c74:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007c76:	683b      	ldr	r3, [r7, #0]
 8007c78:	885b      	ldrh	r3, [r3, #2]
 8007c7a:	b2da      	uxtb	r2, r3
 8007c7c:	4b4e      	ldr	r3, [pc, #312]	; (8007db8 <USBD_SetConfig+0x150>)
 8007c7e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007c80:	4b4d      	ldr	r3, [pc, #308]	; (8007db8 <USBD_SetConfig+0x150>)
 8007c82:	781b      	ldrb	r3, [r3, #0]
 8007c84:	2b01      	cmp	r3, #1
 8007c86:	d905      	bls.n	8007c94 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007c88:	6839      	ldr	r1, [r7, #0]
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	f000 f985 	bl	8007f9a <USBD_CtlError>
    return USBD_FAIL;
 8007c90:	2303      	movs	r3, #3
 8007c92:	e08c      	b.n	8007dae <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c9a:	b2db      	uxtb	r3, r3
 8007c9c:	2b02      	cmp	r3, #2
 8007c9e:	d002      	beq.n	8007ca6 <USBD_SetConfig+0x3e>
 8007ca0:	2b03      	cmp	r3, #3
 8007ca2:	d029      	beq.n	8007cf8 <USBD_SetConfig+0x90>
 8007ca4:	e075      	b.n	8007d92 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007ca6:	4b44      	ldr	r3, [pc, #272]	; (8007db8 <USBD_SetConfig+0x150>)
 8007ca8:	781b      	ldrb	r3, [r3, #0]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d020      	beq.n	8007cf0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007cae:	4b42      	ldr	r3, [pc, #264]	; (8007db8 <USBD_SetConfig+0x150>)
 8007cb0:	781b      	ldrb	r3, [r3, #0]
 8007cb2:	461a      	mov	r2, r3
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007cb8:	4b3f      	ldr	r3, [pc, #252]	; (8007db8 <USBD_SetConfig+0x150>)
 8007cba:	781b      	ldrb	r3, [r3, #0]
 8007cbc:	4619      	mov	r1, r3
 8007cbe:	6878      	ldr	r0, [r7, #4]
 8007cc0:	f7fe ffb7 	bl	8006c32 <USBD_SetClassConfig>
 8007cc4:	4603      	mov	r3, r0
 8007cc6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007cc8:	7bfb      	ldrb	r3, [r7, #15]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d008      	beq.n	8007ce0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007cce:	6839      	ldr	r1, [r7, #0]
 8007cd0:	6878      	ldr	r0, [r7, #4]
 8007cd2:	f000 f962 	bl	8007f9a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2202      	movs	r2, #2
 8007cda:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007cde:	e065      	b.n	8007dac <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007ce0:	6878      	ldr	r0, [r7, #4]
 8007ce2:	f000 fa08 	bl	80080f6 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	2203      	movs	r2, #3
 8007cea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007cee:	e05d      	b.n	8007dac <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007cf0:	6878      	ldr	r0, [r7, #4]
 8007cf2:	f000 fa00 	bl	80080f6 <USBD_CtlSendStatus>
      break;
 8007cf6:	e059      	b.n	8007dac <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007cf8:	4b2f      	ldr	r3, [pc, #188]	; (8007db8 <USBD_SetConfig+0x150>)
 8007cfa:	781b      	ldrb	r3, [r3, #0]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d112      	bne.n	8007d26 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2202      	movs	r2, #2
 8007d04:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007d08:	4b2b      	ldr	r3, [pc, #172]	; (8007db8 <USBD_SetConfig+0x150>)
 8007d0a:	781b      	ldrb	r3, [r3, #0]
 8007d0c:	461a      	mov	r2, r3
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007d12:	4b29      	ldr	r3, [pc, #164]	; (8007db8 <USBD_SetConfig+0x150>)
 8007d14:	781b      	ldrb	r3, [r3, #0]
 8007d16:	4619      	mov	r1, r3
 8007d18:	6878      	ldr	r0, [r7, #4]
 8007d1a:	f7fe ffa6 	bl	8006c6a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007d1e:	6878      	ldr	r0, [r7, #4]
 8007d20:	f000 f9e9 	bl	80080f6 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007d24:	e042      	b.n	8007dac <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007d26:	4b24      	ldr	r3, [pc, #144]	; (8007db8 <USBD_SetConfig+0x150>)
 8007d28:	781b      	ldrb	r3, [r3, #0]
 8007d2a:	461a      	mov	r2, r3
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	685b      	ldr	r3, [r3, #4]
 8007d30:	429a      	cmp	r2, r3
 8007d32:	d02a      	beq.n	8007d8a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	685b      	ldr	r3, [r3, #4]
 8007d38:	b2db      	uxtb	r3, r3
 8007d3a:	4619      	mov	r1, r3
 8007d3c:	6878      	ldr	r0, [r7, #4]
 8007d3e:	f7fe ff94 	bl	8006c6a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007d42:	4b1d      	ldr	r3, [pc, #116]	; (8007db8 <USBD_SetConfig+0x150>)
 8007d44:	781b      	ldrb	r3, [r3, #0]
 8007d46:	461a      	mov	r2, r3
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007d4c:	4b1a      	ldr	r3, [pc, #104]	; (8007db8 <USBD_SetConfig+0x150>)
 8007d4e:	781b      	ldrb	r3, [r3, #0]
 8007d50:	4619      	mov	r1, r3
 8007d52:	6878      	ldr	r0, [r7, #4]
 8007d54:	f7fe ff6d 	bl	8006c32 <USBD_SetClassConfig>
 8007d58:	4603      	mov	r3, r0
 8007d5a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007d5c:	7bfb      	ldrb	r3, [r7, #15]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d00f      	beq.n	8007d82 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007d62:	6839      	ldr	r1, [r7, #0]
 8007d64:	6878      	ldr	r0, [r7, #4]
 8007d66:	f000 f918 	bl	8007f9a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	685b      	ldr	r3, [r3, #4]
 8007d6e:	b2db      	uxtb	r3, r3
 8007d70:	4619      	mov	r1, r3
 8007d72:	6878      	ldr	r0, [r7, #4]
 8007d74:	f7fe ff79 	bl	8006c6a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2202      	movs	r2, #2
 8007d7c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007d80:	e014      	b.n	8007dac <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007d82:	6878      	ldr	r0, [r7, #4]
 8007d84:	f000 f9b7 	bl	80080f6 <USBD_CtlSendStatus>
      break;
 8007d88:	e010      	b.n	8007dac <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007d8a:	6878      	ldr	r0, [r7, #4]
 8007d8c:	f000 f9b3 	bl	80080f6 <USBD_CtlSendStatus>
      break;
 8007d90:	e00c      	b.n	8007dac <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007d92:	6839      	ldr	r1, [r7, #0]
 8007d94:	6878      	ldr	r0, [r7, #4]
 8007d96:	f000 f900 	bl	8007f9a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007d9a:	4b07      	ldr	r3, [pc, #28]	; (8007db8 <USBD_SetConfig+0x150>)
 8007d9c:	781b      	ldrb	r3, [r3, #0]
 8007d9e:	4619      	mov	r1, r3
 8007da0:	6878      	ldr	r0, [r7, #4]
 8007da2:	f7fe ff62 	bl	8006c6a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007da6:	2303      	movs	r3, #3
 8007da8:	73fb      	strb	r3, [r7, #15]
      break;
 8007daa:	bf00      	nop
  }

  return ret;
 8007dac:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dae:	4618      	mov	r0, r3
 8007db0:	3710      	adds	r7, #16
 8007db2:	46bd      	mov	sp, r7
 8007db4:	bd80      	pop	{r7, pc}
 8007db6:	bf00      	nop
 8007db8:	200002fc 	.word	0x200002fc

08007dbc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b082      	sub	sp, #8
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
 8007dc4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	88db      	ldrh	r3, [r3, #6]
 8007dca:	2b01      	cmp	r3, #1
 8007dcc:	d004      	beq.n	8007dd8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007dce:	6839      	ldr	r1, [r7, #0]
 8007dd0:	6878      	ldr	r0, [r7, #4]
 8007dd2:	f000 f8e2 	bl	8007f9a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007dd6:	e023      	b.n	8007e20 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007dde:	b2db      	uxtb	r3, r3
 8007de0:	2b02      	cmp	r3, #2
 8007de2:	dc02      	bgt.n	8007dea <USBD_GetConfig+0x2e>
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	dc03      	bgt.n	8007df0 <USBD_GetConfig+0x34>
 8007de8:	e015      	b.n	8007e16 <USBD_GetConfig+0x5a>
 8007dea:	2b03      	cmp	r3, #3
 8007dec:	d00b      	beq.n	8007e06 <USBD_GetConfig+0x4a>
 8007dee:	e012      	b.n	8007e16 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2200      	movs	r2, #0
 8007df4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	3308      	adds	r3, #8
 8007dfa:	2201      	movs	r2, #1
 8007dfc:	4619      	mov	r1, r3
 8007dfe:	6878      	ldr	r0, [r7, #4]
 8007e00:	f000 f93c 	bl	800807c <USBD_CtlSendData>
        break;
 8007e04:	e00c      	b.n	8007e20 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	3304      	adds	r3, #4
 8007e0a:	2201      	movs	r2, #1
 8007e0c:	4619      	mov	r1, r3
 8007e0e:	6878      	ldr	r0, [r7, #4]
 8007e10:	f000 f934 	bl	800807c <USBD_CtlSendData>
        break;
 8007e14:	e004      	b.n	8007e20 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007e16:	6839      	ldr	r1, [r7, #0]
 8007e18:	6878      	ldr	r0, [r7, #4]
 8007e1a:	f000 f8be 	bl	8007f9a <USBD_CtlError>
        break;
 8007e1e:	bf00      	nop
}
 8007e20:	bf00      	nop
 8007e22:	3708      	adds	r7, #8
 8007e24:	46bd      	mov	sp, r7
 8007e26:	bd80      	pop	{r7, pc}

08007e28 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b082      	sub	sp, #8
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
 8007e30:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e38:	b2db      	uxtb	r3, r3
 8007e3a:	3b01      	subs	r3, #1
 8007e3c:	2b02      	cmp	r3, #2
 8007e3e:	d81e      	bhi.n	8007e7e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007e40:	683b      	ldr	r3, [r7, #0]
 8007e42:	88db      	ldrh	r3, [r3, #6]
 8007e44:	2b02      	cmp	r3, #2
 8007e46:	d004      	beq.n	8007e52 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007e48:	6839      	ldr	r1, [r7, #0]
 8007e4a:	6878      	ldr	r0, [r7, #4]
 8007e4c:	f000 f8a5 	bl	8007f9a <USBD_CtlError>
        break;
 8007e50:	e01a      	b.n	8007e88 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2201      	movs	r2, #1
 8007e56:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d005      	beq.n	8007e6e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	68db      	ldr	r3, [r3, #12]
 8007e66:	f043 0202 	orr.w	r2, r3, #2
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	330c      	adds	r3, #12
 8007e72:	2202      	movs	r2, #2
 8007e74:	4619      	mov	r1, r3
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	f000 f900 	bl	800807c <USBD_CtlSendData>
      break;
 8007e7c:	e004      	b.n	8007e88 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007e7e:	6839      	ldr	r1, [r7, #0]
 8007e80:	6878      	ldr	r0, [r7, #4]
 8007e82:	f000 f88a 	bl	8007f9a <USBD_CtlError>
      break;
 8007e86:	bf00      	nop
  }
}
 8007e88:	bf00      	nop
 8007e8a:	3708      	adds	r7, #8
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	bd80      	pop	{r7, pc}

08007e90 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b082      	sub	sp, #8
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
 8007e98:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	885b      	ldrh	r3, [r3, #2]
 8007e9e:	2b01      	cmp	r3, #1
 8007ea0:	d107      	bne.n	8007eb2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2201      	movs	r2, #1
 8007ea6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007eaa:	6878      	ldr	r0, [r7, #4]
 8007eac:	f000 f923 	bl	80080f6 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007eb0:	e013      	b.n	8007eda <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	885b      	ldrh	r3, [r3, #2]
 8007eb6:	2b02      	cmp	r3, #2
 8007eb8:	d10b      	bne.n	8007ed2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8007eba:	683b      	ldr	r3, [r7, #0]
 8007ebc:	889b      	ldrh	r3, [r3, #4]
 8007ebe:	0a1b      	lsrs	r3, r3, #8
 8007ec0:	b29b      	uxth	r3, r3
 8007ec2:	b2da      	uxtb	r2, r3
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007eca:	6878      	ldr	r0, [r7, #4]
 8007ecc:	f000 f913 	bl	80080f6 <USBD_CtlSendStatus>
}
 8007ed0:	e003      	b.n	8007eda <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007ed2:	6839      	ldr	r1, [r7, #0]
 8007ed4:	6878      	ldr	r0, [r7, #4]
 8007ed6:	f000 f860 	bl	8007f9a <USBD_CtlError>
}
 8007eda:	bf00      	nop
 8007edc:	3708      	adds	r7, #8
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	bd80      	pop	{r7, pc}

08007ee2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ee2:	b580      	push	{r7, lr}
 8007ee4:	b082      	sub	sp, #8
 8007ee6:	af00      	add	r7, sp, #0
 8007ee8:	6078      	str	r0, [r7, #4]
 8007eea:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ef2:	b2db      	uxtb	r3, r3
 8007ef4:	3b01      	subs	r3, #1
 8007ef6:	2b02      	cmp	r3, #2
 8007ef8:	d80b      	bhi.n	8007f12 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007efa:	683b      	ldr	r3, [r7, #0]
 8007efc:	885b      	ldrh	r3, [r3, #2]
 8007efe:	2b01      	cmp	r3, #1
 8007f00:	d10c      	bne.n	8007f1c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2200      	movs	r2, #0
 8007f06:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007f0a:	6878      	ldr	r0, [r7, #4]
 8007f0c:	f000 f8f3 	bl	80080f6 <USBD_CtlSendStatus>
      }
      break;
 8007f10:	e004      	b.n	8007f1c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007f12:	6839      	ldr	r1, [r7, #0]
 8007f14:	6878      	ldr	r0, [r7, #4]
 8007f16:	f000 f840 	bl	8007f9a <USBD_CtlError>
      break;
 8007f1a:	e000      	b.n	8007f1e <USBD_ClrFeature+0x3c>
      break;
 8007f1c:	bf00      	nop
  }
}
 8007f1e:	bf00      	nop
 8007f20:	3708      	adds	r7, #8
 8007f22:	46bd      	mov	sp, r7
 8007f24:	bd80      	pop	{r7, pc}

08007f26 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007f26:	b580      	push	{r7, lr}
 8007f28:	b084      	sub	sp, #16
 8007f2a:	af00      	add	r7, sp, #0
 8007f2c:	6078      	str	r0, [r7, #4]
 8007f2e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	781a      	ldrb	r2, [r3, #0]
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	3301      	adds	r3, #1
 8007f40:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	781a      	ldrb	r2, [r3, #0]
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	3301      	adds	r3, #1
 8007f4e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007f50:	68f8      	ldr	r0, [r7, #12]
 8007f52:	f7ff fa17 	bl	8007384 <SWAPBYTE>
 8007f56:	4603      	mov	r3, r0
 8007f58:	461a      	mov	r2, r3
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	3301      	adds	r3, #1
 8007f62:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	3301      	adds	r3, #1
 8007f68:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007f6a:	68f8      	ldr	r0, [r7, #12]
 8007f6c:	f7ff fa0a 	bl	8007384 <SWAPBYTE>
 8007f70:	4603      	mov	r3, r0
 8007f72:	461a      	mov	r2, r3
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	3301      	adds	r3, #1
 8007f7c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	3301      	adds	r3, #1
 8007f82:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007f84:	68f8      	ldr	r0, [r7, #12]
 8007f86:	f7ff f9fd 	bl	8007384 <SWAPBYTE>
 8007f8a:	4603      	mov	r3, r0
 8007f8c:	461a      	mov	r2, r3
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	80da      	strh	r2, [r3, #6]
}
 8007f92:	bf00      	nop
 8007f94:	3710      	adds	r7, #16
 8007f96:	46bd      	mov	sp, r7
 8007f98:	bd80      	pop	{r7, pc}

08007f9a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f9a:	b580      	push	{r7, lr}
 8007f9c:	b082      	sub	sp, #8
 8007f9e:	af00      	add	r7, sp, #0
 8007fa0:	6078      	str	r0, [r7, #4]
 8007fa2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007fa4:	2180      	movs	r1, #128	; 0x80
 8007fa6:	6878      	ldr	r0, [r7, #4]
 8007fa8:	f003 fa30 	bl	800b40c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007fac:	2100      	movs	r1, #0
 8007fae:	6878      	ldr	r0, [r7, #4]
 8007fb0:	f003 fa2c 	bl	800b40c <USBD_LL_StallEP>
}
 8007fb4:	bf00      	nop
 8007fb6:	3708      	adds	r7, #8
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	bd80      	pop	{r7, pc}

08007fbc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b086      	sub	sp, #24
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	60f8      	str	r0, [r7, #12]
 8007fc4:	60b9      	str	r1, [r7, #8]
 8007fc6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007fc8:	2300      	movs	r3, #0
 8007fca:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d036      	beq.n	8008040 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007fd6:	6938      	ldr	r0, [r7, #16]
 8007fd8:	f000 f836 	bl	8008048 <USBD_GetLen>
 8007fdc:	4603      	mov	r3, r0
 8007fde:	3301      	adds	r3, #1
 8007fe0:	b29b      	uxth	r3, r3
 8007fe2:	005b      	lsls	r3, r3, #1
 8007fe4:	b29a      	uxth	r2, r3
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007fea:	7dfb      	ldrb	r3, [r7, #23]
 8007fec:	68ba      	ldr	r2, [r7, #8]
 8007fee:	4413      	add	r3, r2
 8007ff0:	687a      	ldr	r2, [r7, #4]
 8007ff2:	7812      	ldrb	r2, [r2, #0]
 8007ff4:	701a      	strb	r2, [r3, #0]
  idx++;
 8007ff6:	7dfb      	ldrb	r3, [r7, #23]
 8007ff8:	3301      	adds	r3, #1
 8007ffa:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007ffc:	7dfb      	ldrb	r3, [r7, #23]
 8007ffe:	68ba      	ldr	r2, [r7, #8]
 8008000:	4413      	add	r3, r2
 8008002:	2203      	movs	r2, #3
 8008004:	701a      	strb	r2, [r3, #0]
  idx++;
 8008006:	7dfb      	ldrb	r3, [r7, #23]
 8008008:	3301      	adds	r3, #1
 800800a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800800c:	e013      	b.n	8008036 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800800e:	7dfb      	ldrb	r3, [r7, #23]
 8008010:	68ba      	ldr	r2, [r7, #8]
 8008012:	4413      	add	r3, r2
 8008014:	693a      	ldr	r2, [r7, #16]
 8008016:	7812      	ldrb	r2, [r2, #0]
 8008018:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800801a:	693b      	ldr	r3, [r7, #16]
 800801c:	3301      	adds	r3, #1
 800801e:	613b      	str	r3, [r7, #16]
    idx++;
 8008020:	7dfb      	ldrb	r3, [r7, #23]
 8008022:	3301      	adds	r3, #1
 8008024:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008026:	7dfb      	ldrb	r3, [r7, #23]
 8008028:	68ba      	ldr	r2, [r7, #8]
 800802a:	4413      	add	r3, r2
 800802c:	2200      	movs	r2, #0
 800802e:	701a      	strb	r2, [r3, #0]
    idx++;
 8008030:	7dfb      	ldrb	r3, [r7, #23]
 8008032:	3301      	adds	r3, #1
 8008034:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008036:	693b      	ldr	r3, [r7, #16]
 8008038:	781b      	ldrb	r3, [r3, #0]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d1e7      	bne.n	800800e <USBD_GetString+0x52>
 800803e:	e000      	b.n	8008042 <USBD_GetString+0x86>
    return;
 8008040:	bf00      	nop
  }
}
 8008042:	3718      	adds	r7, #24
 8008044:	46bd      	mov	sp, r7
 8008046:	bd80      	pop	{r7, pc}

08008048 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008048:	b480      	push	{r7}
 800804a:	b085      	sub	sp, #20
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008050:	2300      	movs	r3, #0
 8008052:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008058:	e005      	b.n	8008066 <USBD_GetLen+0x1e>
  {
    len++;
 800805a:	7bfb      	ldrb	r3, [r7, #15]
 800805c:	3301      	adds	r3, #1
 800805e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008060:	68bb      	ldr	r3, [r7, #8]
 8008062:	3301      	adds	r3, #1
 8008064:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008066:	68bb      	ldr	r3, [r7, #8]
 8008068:	781b      	ldrb	r3, [r3, #0]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d1f5      	bne.n	800805a <USBD_GetLen+0x12>
  }

  return len;
 800806e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008070:	4618      	mov	r0, r3
 8008072:	3714      	adds	r7, #20
 8008074:	46bd      	mov	sp, r7
 8008076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807a:	4770      	bx	lr

0800807c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b084      	sub	sp, #16
 8008080:	af00      	add	r7, sp, #0
 8008082:	60f8      	str	r0, [r7, #12]
 8008084:	60b9      	str	r1, [r7, #8]
 8008086:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	2202      	movs	r2, #2
 800808c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	687a      	ldr	r2, [r7, #4]
 8008094:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	687a      	ldr	r2, [r7, #4]
 800809a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	68ba      	ldr	r2, [r7, #8]
 80080a0:	2100      	movs	r1, #0
 80080a2:	68f8      	ldr	r0, [r7, #12]
 80080a4:	f003 fa80 	bl	800b5a8 <USBD_LL_Transmit>

  return USBD_OK;
 80080a8:	2300      	movs	r3, #0
}
 80080aa:	4618      	mov	r0, r3
 80080ac:	3710      	adds	r7, #16
 80080ae:	46bd      	mov	sp, r7
 80080b0:	bd80      	pop	{r7, pc}

080080b2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80080b2:	b580      	push	{r7, lr}
 80080b4:	b084      	sub	sp, #16
 80080b6:	af00      	add	r7, sp, #0
 80080b8:	60f8      	str	r0, [r7, #12]
 80080ba:	60b9      	str	r1, [r7, #8]
 80080bc:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	68ba      	ldr	r2, [r7, #8]
 80080c2:	2100      	movs	r1, #0
 80080c4:	68f8      	ldr	r0, [r7, #12]
 80080c6:	f003 fa6f 	bl	800b5a8 <USBD_LL_Transmit>

  return USBD_OK;
 80080ca:	2300      	movs	r3, #0
}
 80080cc:	4618      	mov	r0, r3
 80080ce:	3710      	adds	r7, #16
 80080d0:	46bd      	mov	sp, r7
 80080d2:	bd80      	pop	{r7, pc}

080080d4 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b084      	sub	sp, #16
 80080d8:	af00      	add	r7, sp, #0
 80080da:	60f8      	str	r0, [r7, #12]
 80080dc:	60b9      	str	r1, [r7, #8]
 80080de:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	68ba      	ldr	r2, [r7, #8]
 80080e4:	2100      	movs	r1, #0
 80080e6:	68f8      	ldr	r0, [r7, #12]
 80080e8:	f003 fa96 	bl	800b618 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80080ec:	2300      	movs	r3, #0
}
 80080ee:	4618      	mov	r0, r3
 80080f0:	3710      	adds	r7, #16
 80080f2:	46bd      	mov	sp, r7
 80080f4:	bd80      	pop	{r7, pc}

080080f6 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80080f6:	b580      	push	{r7, lr}
 80080f8:	b082      	sub	sp, #8
 80080fa:	af00      	add	r7, sp, #0
 80080fc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2204      	movs	r2, #4
 8008102:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008106:	2300      	movs	r3, #0
 8008108:	2200      	movs	r2, #0
 800810a:	2100      	movs	r1, #0
 800810c:	6878      	ldr	r0, [r7, #4]
 800810e:	f003 fa4b 	bl	800b5a8 <USBD_LL_Transmit>

  return USBD_OK;
 8008112:	2300      	movs	r3, #0
}
 8008114:	4618      	mov	r0, r3
 8008116:	3708      	adds	r7, #8
 8008118:	46bd      	mov	sp, r7
 800811a:	bd80      	pop	{r7, pc}

0800811c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b082      	sub	sp, #8
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2205      	movs	r2, #5
 8008128:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800812c:	2300      	movs	r3, #0
 800812e:	2200      	movs	r2, #0
 8008130:	2100      	movs	r1, #0
 8008132:	6878      	ldr	r0, [r7, #4]
 8008134:	f003 fa70 	bl	800b618 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008138:	2300      	movs	r3, #0
}
 800813a:	4618      	mov	r0, r3
 800813c:	3708      	adds	r7, #8
 800813e:	46bd      	mov	sp, r7
 8008140:	bd80      	pop	{r7, pc}
	...

08008144 <__NVIC_SetPriority>:
{
 8008144:	b480      	push	{r7}
 8008146:	b083      	sub	sp, #12
 8008148:	af00      	add	r7, sp, #0
 800814a:	4603      	mov	r3, r0
 800814c:	6039      	str	r1, [r7, #0]
 800814e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008150:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008154:	2b00      	cmp	r3, #0
 8008156:	db0a      	blt.n	800816e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008158:	683b      	ldr	r3, [r7, #0]
 800815a:	b2da      	uxtb	r2, r3
 800815c:	490c      	ldr	r1, [pc, #48]	; (8008190 <__NVIC_SetPriority+0x4c>)
 800815e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008162:	0112      	lsls	r2, r2, #4
 8008164:	b2d2      	uxtb	r2, r2
 8008166:	440b      	add	r3, r1
 8008168:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800816c:	e00a      	b.n	8008184 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	b2da      	uxtb	r2, r3
 8008172:	4908      	ldr	r1, [pc, #32]	; (8008194 <__NVIC_SetPriority+0x50>)
 8008174:	79fb      	ldrb	r3, [r7, #7]
 8008176:	f003 030f 	and.w	r3, r3, #15
 800817a:	3b04      	subs	r3, #4
 800817c:	0112      	lsls	r2, r2, #4
 800817e:	b2d2      	uxtb	r2, r2
 8008180:	440b      	add	r3, r1
 8008182:	761a      	strb	r2, [r3, #24]
}
 8008184:	bf00      	nop
 8008186:	370c      	adds	r7, #12
 8008188:	46bd      	mov	sp, r7
 800818a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818e:	4770      	bx	lr
 8008190:	e000e100 	.word	0xe000e100
 8008194:	e000ed00 	.word	0xe000ed00

08008198 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008198:	b580      	push	{r7, lr}
 800819a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800819c:	2100      	movs	r1, #0
 800819e:	f06f 0004 	mvn.w	r0, #4
 80081a2:	f7ff ffcf 	bl	8008144 <__NVIC_SetPriority>
#endif
}
 80081a6:	bf00      	nop
 80081a8:	bd80      	pop	{r7, pc}
	...

080081ac <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80081ac:	b480      	push	{r7}
 80081ae:	b083      	sub	sp, #12
 80081b0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80081b2:	f3ef 8305 	mrs	r3, IPSR
 80081b6:	603b      	str	r3, [r7, #0]
  return(result);
 80081b8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d003      	beq.n	80081c6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80081be:	f06f 0305 	mvn.w	r3, #5
 80081c2:	607b      	str	r3, [r7, #4]
 80081c4:	e00c      	b.n	80081e0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80081c6:	4b0a      	ldr	r3, [pc, #40]	; (80081f0 <osKernelInitialize+0x44>)
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d105      	bne.n	80081da <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80081ce:	4b08      	ldr	r3, [pc, #32]	; (80081f0 <osKernelInitialize+0x44>)
 80081d0:	2201      	movs	r2, #1
 80081d2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80081d4:	2300      	movs	r3, #0
 80081d6:	607b      	str	r3, [r7, #4]
 80081d8:	e002      	b.n	80081e0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80081da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80081de:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80081e0:	687b      	ldr	r3, [r7, #4]
}
 80081e2:	4618      	mov	r0, r3
 80081e4:	370c      	adds	r7, #12
 80081e6:	46bd      	mov	sp, r7
 80081e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ec:	4770      	bx	lr
 80081ee:	bf00      	nop
 80081f0:	20000300 	.word	0x20000300

080081f4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b082      	sub	sp, #8
 80081f8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80081fa:	f3ef 8305 	mrs	r3, IPSR
 80081fe:	603b      	str	r3, [r7, #0]
  return(result);
 8008200:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008202:	2b00      	cmp	r3, #0
 8008204:	d003      	beq.n	800820e <osKernelStart+0x1a>
    stat = osErrorISR;
 8008206:	f06f 0305 	mvn.w	r3, #5
 800820a:	607b      	str	r3, [r7, #4]
 800820c:	e010      	b.n	8008230 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800820e:	4b0b      	ldr	r3, [pc, #44]	; (800823c <osKernelStart+0x48>)
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	2b01      	cmp	r3, #1
 8008214:	d109      	bne.n	800822a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008216:	f7ff ffbf 	bl	8008198 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800821a:	4b08      	ldr	r3, [pc, #32]	; (800823c <osKernelStart+0x48>)
 800821c:	2202      	movs	r2, #2
 800821e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008220:	f001 f866 	bl	80092f0 <vTaskStartScheduler>
      stat = osOK;
 8008224:	2300      	movs	r3, #0
 8008226:	607b      	str	r3, [r7, #4]
 8008228:	e002      	b.n	8008230 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800822a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800822e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008230:	687b      	ldr	r3, [r7, #4]
}
 8008232:	4618      	mov	r0, r3
 8008234:	3708      	adds	r7, #8
 8008236:	46bd      	mov	sp, r7
 8008238:	bd80      	pop	{r7, pc}
 800823a:	bf00      	nop
 800823c:	20000300 	.word	0x20000300

08008240 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008240:	b580      	push	{r7, lr}
 8008242:	b08e      	sub	sp, #56	; 0x38
 8008244:	af04      	add	r7, sp, #16
 8008246:	60f8      	str	r0, [r7, #12]
 8008248:	60b9      	str	r1, [r7, #8]
 800824a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800824c:	2300      	movs	r3, #0
 800824e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008250:	f3ef 8305 	mrs	r3, IPSR
 8008254:	617b      	str	r3, [r7, #20]
  return(result);
 8008256:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008258:	2b00      	cmp	r3, #0
 800825a:	d17e      	bne.n	800835a <osThreadNew+0x11a>
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d07b      	beq.n	800835a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8008262:	2380      	movs	r3, #128	; 0x80
 8008264:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008266:	2318      	movs	r3, #24
 8008268:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800826a:	2300      	movs	r3, #0
 800826c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800826e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008272:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d045      	beq.n	8008306 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d002      	beq.n	8008288 <osThreadNew+0x48>
        name = attr->name;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	699b      	ldr	r3, [r3, #24]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d002      	beq.n	8008296 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	699b      	ldr	r3, [r3, #24]
 8008294:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008296:	69fb      	ldr	r3, [r7, #28]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d008      	beq.n	80082ae <osThreadNew+0x6e>
 800829c:	69fb      	ldr	r3, [r7, #28]
 800829e:	2b38      	cmp	r3, #56	; 0x38
 80082a0:	d805      	bhi.n	80082ae <osThreadNew+0x6e>
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	685b      	ldr	r3, [r3, #4]
 80082a6:	f003 0301 	and.w	r3, r3, #1
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d001      	beq.n	80082b2 <osThreadNew+0x72>
        return (NULL);
 80082ae:	2300      	movs	r3, #0
 80082b0:	e054      	b.n	800835c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	695b      	ldr	r3, [r3, #20]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d003      	beq.n	80082c2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	695b      	ldr	r3, [r3, #20]
 80082be:	089b      	lsrs	r3, r3, #2
 80082c0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	689b      	ldr	r3, [r3, #8]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d00e      	beq.n	80082e8 <osThreadNew+0xa8>
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	68db      	ldr	r3, [r3, #12]
 80082ce:	2b5b      	cmp	r3, #91	; 0x5b
 80082d0:	d90a      	bls.n	80082e8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d006      	beq.n	80082e8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	695b      	ldr	r3, [r3, #20]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d002      	beq.n	80082e8 <osThreadNew+0xa8>
        mem = 1;
 80082e2:	2301      	movs	r3, #1
 80082e4:	61bb      	str	r3, [r7, #24]
 80082e6:	e010      	b.n	800830a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	689b      	ldr	r3, [r3, #8]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d10c      	bne.n	800830a <osThreadNew+0xca>
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	68db      	ldr	r3, [r3, #12]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d108      	bne.n	800830a <osThreadNew+0xca>
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	691b      	ldr	r3, [r3, #16]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d104      	bne.n	800830a <osThreadNew+0xca>
          mem = 0;
 8008300:	2300      	movs	r3, #0
 8008302:	61bb      	str	r3, [r7, #24]
 8008304:	e001      	b.n	800830a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8008306:	2300      	movs	r3, #0
 8008308:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800830a:	69bb      	ldr	r3, [r7, #24]
 800830c:	2b01      	cmp	r3, #1
 800830e:	d110      	bne.n	8008332 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008314:	687a      	ldr	r2, [r7, #4]
 8008316:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008318:	9202      	str	r2, [sp, #8]
 800831a:	9301      	str	r3, [sp, #4]
 800831c:	69fb      	ldr	r3, [r7, #28]
 800831e:	9300      	str	r3, [sp, #0]
 8008320:	68bb      	ldr	r3, [r7, #8]
 8008322:	6a3a      	ldr	r2, [r7, #32]
 8008324:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008326:	68f8      	ldr	r0, [r7, #12]
 8008328:	f000 fe0c 	bl	8008f44 <xTaskCreateStatic>
 800832c:	4603      	mov	r3, r0
 800832e:	613b      	str	r3, [r7, #16]
 8008330:	e013      	b.n	800835a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8008332:	69bb      	ldr	r3, [r7, #24]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d110      	bne.n	800835a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008338:	6a3b      	ldr	r3, [r7, #32]
 800833a:	b29a      	uxth	r2, r3
 800833c:	f107 0310 	add.w	r3, r7, #16
 8008340:	9301      	str	r3, [sp, #4]
 8008342:	69fb      	ldr	r3, [r7, #28]
 8008344:	9300      	str	r3, [sp, #0]
 8008346:	68bb      	ldr	r3, [r7, #8]
 8008348:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800834a:	68f8      	ldr	r0, [r7, #12]
 800834c:	f000 fe57 	bl	8008ffe <xTaskCreate>
 8008350:	4603      	mov	r3, r0
 8008352:	2b01      	cmp	r3, #1
 8008354:	d001      	beq.n	800835a <osThreadNew+0x11a>
            hTask = NULL;
 8008356:	2300      	movs	r3, #0
 8008358:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800835a:	693b      	ldr	r3, [r7, #16]
}
 800835c:	4618      	mov	r0, r3
 800835e:	3728      	adds	r7, #40	; 0x28
 8008360:	46bd      	mov	sp, r7
 8008362:	bd80      	pop	{r7, pc}

08008364 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008364:	b580      	push	{r7, lr}
 8008366:	b084      	sub	sp, #16
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800836c:	f3ef 8305 	mrs	r3, IPSR
 8008370:	60bb      	str	r3, [r7, #8]
  return(result);
 8008372:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008374:	2b00      	cmp	r3, #0
 8008376:	d003      	beq.n	8008380 <osDelay+0x1c>
    stat = osErrorISR;
 8008378:	f06f 0305 	mvn.w	r3, #5
 800837c:	60fb      	str	r3, [r7, #12]
 800837e:	e007      	b.n	8008390 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008380:	2300      	movs	r3, #0
 8008382:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d002      	beq.n	8008390 <osDelay+0x2c>
      vTaskDelay(ticks);
 800838a:	6878      	ldr	r0, [r7, #4]
 800838c:	f000 ff7c 	bl	8009288 <vTaskDelay>
    }
  }

  return (stat);
 8008390:	68fb      	ldr	r3, [r7, #12]
}
 8008392:	4618      	mov	r0, r3
 8008394:	3710      	adds	r7, #16
 8008396:	46bd      	mov	sp, r7
 8008398:	bd80      	pop	{r7, pc}
	...

0800839c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800839c:	b480      	push	{r7}
 800839e:	b085      	sub	sp, #20
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	60f8      	str	r0, [r7, #12]
 80083a4:	60b9      	str	r1, [r7, #8]
 80083a6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	4a07      	ldr	r2, [pc, #28]	; (80083c8 <vApplicationGetIdleTaskMemory+0x2c>)
 80083ac:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80083ae:	68bb      	ldr	r3, [r7, #8]
 80083b0:	4a06      	ldr	r2, [pc, #24]	; (80083cc <vApplicationGetIdleTaskMemory+0x30>)
 80083b2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2280      	movs	r2, #128	; 0x80
 80083b8:	601a      	str	r2, [r3, #0]
}
 80083ba:	bf00      	nop
 80083bc:	3714      	adds	r7, #20
 80083be:	46bd      	mov	sp, r7
 80083c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c4:	4770      	bx	lr
 80083c6:	bf00      	nop
 80083c8:	20000304 	.word	0x20000304
 80083cc:	20000360 	.word	0x20000360

080083d0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80083d0:	b480      	push	{r7}
 80083d2:	b085      	sub	sp, #20
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	60f8      	str	r0, [r7, #12]
 80083d8:	60b9      	str	r1, [r7, #8]
 80083da:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	4a07      	ldr	r2, [pc, #28]	; (80083fc <vApplicationGetTimerTaskMemory+0x2c>)
 80083e0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80083e2:	68bb      	ldr	r3, [r7, #8]
 80083e4:	4a06      	ldr	r2, [pc, #24]	; (8008400 <vApplicationGetTimerTaskMemory+0x30>)
 80083e6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80083ee:	601a      	str	r2, [r3, #0]
}
 80083f0:	bf00      	nop
 80083f2:	3714      	adds	r7, #20
 80083f4:	46bd      	mov	sp, r7
 80083f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fa:	4770      	bx	lr
 80083fc:	20000560 	.word	0x20000560
 8008400:	200005bc 	.word	0x200005bc

08008404 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008404:	b480      	push	{r7}
 8008406:	b083      	sub	sp, #12
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	f103 0208 	add.w	r2, r3, #8
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800841c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	f103 0208 	add.w	r2, r3, #8
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	f103 0208 	add.w	r2, r3, #8
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	2200      	movs	r2, #0
 8008436:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008438:	bf00      	nop
 800843a:	370c      	adds	r7, #12
 800843c:	46bd      	mov	sp, r7
 800843e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008442:	4770      	bx	lr

08008444 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008444:	b480      	push	{r7}
 8008446:	b083      	sub	sp, #12
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2200      	movs	r2, #0
 8008450:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008452:	bf00      	nop
 8008454:	370c      	adds	r7, #12
 8008456:	46bd      	mov	sp, r7
 8008458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845c:	4770      	bx	lr

0800845e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800845e:	b480      	push	{r7}
 8008460:	b085      	sub	sp, #20
 8008462:	af00      	add	r7, sp, #0
 8008464:	6078      	str	r0, [r7, #4]
 8008466:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	685b      	ldr	r3, [r3, #4]
 800846c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800846e:	683b      	ldr	r3, [r7, #0]
 8008470:	68fa      	ldr	r2, [r7, #12]
 8008472:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	689a      	ldr	r2, [r3, #8]
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	689b      	ldr	r3, [r3, #8]
 8008480:	683a      	ldr	r2, [r7, #0]
 8008482:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	683a      	ldr	r2, [r7, #0]
 8008488:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	687a      	ldr	r2, [r7, #4]
 800848e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	1c5a      	adds	r2, r3, #1
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	601a      	str	r2, [r3, #0]
}
 800849a:	bf00      	nop
 800849c:	3714      	adds	r7, #20
 800849e:	46bd      	mov	sp, r7
 80084a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a4:	4770      	bx	lr

080084a6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80084a6:	b480      	push	{r7}
 80084a8:	b085      	sub	sp, #20
 80084aa:	af00      	add	r7, sp, #0
 80084ac:	6078      	str	r0, [r7, #4]
 80084ae:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80084b0:	683b      	ldr	r3, [r7, #0]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80084b6:	68bb      	ldr	r3, [r7, #8]
 80084b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80084bc:	d103      	bne.n	80084c6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	691b      	ldr	r3, [r3, #16]
 80084c2:	60fb      	str	r3, [r7, #12]
 80084c4:	e00c      	b.n	80084e0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	3308      	adds	r3, #8
 80084ca:	60fb      	str	r3, [r7, #12]
 80084cc:	e002      	b.n	80084d4 <vListInsert+0x2e>
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	685b      	ldr	r3, [r3, #4]
 80084d2:	60fb      	str	r3, [r7, #12]
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	685b      	ldr	r3, [r3, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	68ba      	ldr	r2, [r7, #8]
 80084dc:	429a      	cmp	r2, r3
 80084de:	d2f6      	bcs.n	80084ce <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	685a      	ldr	r2, [r3, #4]
 80084e4:	683b      	ldr	r3, [r7, #0]
 80084e6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80084e8:	683b      	ldr	r3, [r7, #0]
 80084ea:	685b      	ldr	r3, [r3, #4]
 80084ec:	683a      	ldr	r2, [r7, #0]
 80084ee:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80084f0:	683b      	ldr	r3, [r7, #0]
 80084f2:	68fa      	ldr	r2, [r7, #12]
 80084f4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	683a      	ldr	r2, [r7, #0]
 80084fa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	687a      	ldr	r2, [r7, #4]
 8008500:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	1c5a      	adds	r2, r3, #1
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	601a      	str	r2, [r3, #0]
}
 800850c:	bf00      	nop
 800850e:	3714      	adds	r7, #20
 8008510:	46bd      	mov	sp, r7
 8008512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008516:	4770      	bx	lr

08008518 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008518:	b480      	push	{r7}
 800851a:	b085      	sub	sp, #20
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	691b      	ldr	r3, [r3, #16]
 8008524:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	685b      	ldr	r3, [r3, #4]
 800852a:	687a      	ldr	r2, [r7, #4]
 800852c:	6892      	ldr	r2, [r2, #8]
 800852e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	689b      	ldr	r3, [r3, #8]
 8008534:	687a      	ldr	r2, [r7, #4]
 8008536:	6852      	ldr	r2, [r2, #4]
 8008538:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	685b      	ldr	r3, [r3, #4]
 800853e:	687a      	ldr	r2, [r7, #4]
 8008540:	429a      	cmp	r2, r3
 8008542:	d103      	bne.n	800854c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	689a      	ldr	r2, [r3, #8]
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	2200      	movs	r2, #0
 8008550:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	1e5a      	subs	r2, r3, #1
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	681b      	ldr	r3, [r3, #0]
}
 8008560:	4618      	mov	r0, r3
 8008562:	3714      	adds	r7, #20
 8008564:	46bd      	mov	sp, r7
 8008566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856a:	4770      	bx	lr

0800856c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b084      	sub	sp, #16
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
 8008574:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d10a      	bne.n	8008596 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008584:	f383 8811 	msr	BASEPRI, r3
 8008588:	f3bf 8f6f 	isb	sy
 800858c:	f3bf 8f4f 	dsb	sy
 8008590:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008592:	bf00      	nop
 8008594:	e7fe      	b.n	8008594 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008596:	f002 f84d 	bl	800a634 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	681a      	ldr	r2, [r3, #0]
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085a2:	68f9      	ldr	r1, [r7, #12]
 80085a4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80085a6:	fb01 f303 	mul.w	r3, r1, r3
 80085aa:	441a      	add	r2, r3
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	2200      	movs	r2, #0
 80085b4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	681a      	ldr	r2, [r3, #0]
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	681a      	ldr	r2, [r3, #0]
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085c6:	3b01      	subs	r3, #1
 80085c8:	68f9      	ldr	r1, [r7, #12]
 80085ca:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80085cc:	fb01 f303 	mul.w	r3, r1, r3
 80085d0:	441a      	add	r2, r3
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	22ff      	movs	r2, #255	; 0xff
 80085da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	22ff      	movs	r2, #255	; 0xff
 80085e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d114      	bne.n	8008616 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	691b      	ldr	r3, [r3, #16]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d01a      	beq.n	800862a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	3310      	adds	r3, #16
 80085f8:	4618      	mov	r0, r3
 80085fa:	f001 f903 	bl	8009804 <xTaskRemoveFromEventList>
 80085fe:	4603      	mov	r3, r0
 8008600:	2b00      	cmp	r3, #0
 8008602:	d012      	beq.n	800862a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008604:	4b0c      	ldr	r3, [pc, #48]	; (8008638 <xQueueGenericReset+0xcc>)
 8008606:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800860a:	601a      	str	r2, [r3, #0]
 800860c:	f3bf 8f4f 	dsb	sy
 8008610:	f3bf 8f6f 	isb	sy
 8008614:	e009      	b.n	800862a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	3310      	adds	r3, #16
 800861a:	4618      	mov	r0, r3
 800861c:	f7ff fef2 	bl	8008404 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	3324      	adds	r3, #36	; 0x24
 8008624:	4618      	mov	r0, r3
 8008626:	f7ff feed 	bl	8008404 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800862a:	f002 f833 	bl	800a694 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800862e:	2301      	movs	r3, #1
}
 8008630:	4618      	mov	r0, r3
 8008632:	3710      	adds	r7, #16
 8008634:	46bd      	mov	sp, r7
 8008636:	bd80      	pop	{r7, pc}
 8008638:	e000ed04 	.word	0xe000ed04

0800863c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800863c:	b580      	push	{r7, lr}
 800863e:	b08e      	sub	sp, #56	; 0x38
 8008640:	af02      	add	r7, sp, #8
 8008642:	60f8      	str	r0, [r7, #12]
 8008644:	60b9      	str	r1, [r7, #8]
 8008646:	607a      	str	r2, [r7, #4]
 8008648:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d10a      	bne.n	8008666 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008654:	f383 8811 	msr	BASEPRI, r3
 8008658:	f3bf 8f6f 	isb	sy
 800865c:	f3bf 8f4f 	dsb	sy
 8008660:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008662:	bf00      	nop
 8008664:	e7fe      	b.n	8008664 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d10a      	bne.n	8008682 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800866c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008670:	f383 8811 	msr	BASEPRI, r3
 8008674:	f3bf 8f6f 	isb	sy
 8008678:	f3bf 8f4f 	dsb	sy
 800867c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800867e:	bf00      	nop
 8008680:	e7fe      	b.n	8008680 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d002      	beq.n	800868e <xQueueGenericCreateStatic+0x52>
 8008688:	68bb      	ldr	r3, [r7, #8]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d001      	beq.n	8008692 <xQueueGenericCreateStatic+0x56>
 800868e:	2301      	movs	r3, #1
 8008690:	e000      	b.n	8008694 <xQueueGenericCreateStatic+0x58>
 8008692:	2300      	movs	r3, #0
 8008694:	2b00      	cmp	r3, #0
 8008696:	d10a      	bne.n	80086ae <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800869c:	f383 8811 	msr	BASEPRI, r3
 80086a0:	f3bf 8f6f 	isb	sy
 80086a4:	f3bf 8f4f 	dsb	sy
 80086a8:	623b      	str	r3, [r7, #32]
}
 80086aa:	bf00      	nop
 80086ac:	e7fe      	b.n	80086ac <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d102      	bne.n	80086ba <xQueueGenericCreateStatic+0x7e>
 80086b4:	68bb      	ldr	r3, [r7, #8]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d101      	bne.n	80086be <xQueueGenericCreateStatic+0x82>
 80086ba:	2301      	movs	r3, #1
 80086bc:	e000      	b.n	80086c0 <xQueueGenericCreateStatic+0x84>
 80086be:	2300      	movs	r3, #0
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d10a      	bne.n	80086da <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80086c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086c8:	f383 8811 	msr	BASEPRI, r3
 80086cc:	f3bf 8f6f 	isb	sy
 80086d0:	f3bf 8f4f 	dsb	sy
 80086d4:	61fb      	str	r3, [r7, #28]
}
 80086d6:	bf00      	nop
 80086d8:	e7fe      	b.n	80086d8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80086da:	2350      	movs	r3, #80	; 0x50
 80086dc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80086de:	697b      	ldr	r3, [r7, #20]
 80086e0:	2b50      	cmp	r3, #80	; 0x50
 80086e2:	d00a      	beq.n	80086fa <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80086e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086e8:	f383 8811 	msr	BASEPRI, r3
 80086ec:	f3bf 8f6f 	isb	sy
 80086f0:	f3bf 8f4f 	dsb	sy
 80086f4:	61bb      	str	r3, [r7, #24]
}
 80086f6:	bf00      	nop
 80086f8:	e7fe      	b.n	80086f8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80086fa:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80086fc:	683b      	ldr	r3, [r7, #0]
 80086fe:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008702:	2b00      	cmp	r3, #0
 8008704:	d00d      	beq.n	8008722 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008708:	2201      	movs	r2, #1
 800870a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800870e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008714:	9300      	str	r3, [sp, #0]
 8008716:	4613      	mov	r3, r2
 8008718:	687a      	ldr	r2, [r7, #4]
 800871a:	68b9      	ldr	r1, [r7, #8]
 800871c:	68f8      	ldr	r0, [r7, #12]
 800871e:	f000 f805 	bl	800872c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008724:	4618      	mov	r0, r3
 8008726:	3730      	adds	r7, #48	; 0x30
 8008728:	46bd      	mov	sp, r7
 800872a:	bd80      	pop	{r7, pc}

0800872c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800872c:	b580      	push	{r7, lr}
 800872e:	b084      	sub	sp, #16
 8008730:	af00      	add	r7, sp, #0
 8008732:	60f8      	str	r0, [r7, #12]
 8008734:	60b9      	str	r1, [r7, #8]
 8008736:	607a      	str	r2, [r7, #4]
 8008738:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800873a:	68bb      	ldr	r3, [r7, #8]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d103      	bne.n	8008748 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008740:	69bb      	ldr	r3, [r7, #24]
 8008742:	69ba      	ldr	r2, [r7, #24]
 8008744:	601a      	str	r2, [r3, #0]
 8008746:	e002      	b.n	800874e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008748:	69bb      	ldr	r3, [r7, #24]
 800874a:	687a      	ldr	r2, [r7, #4]
 800874c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800874e:	69bb      	ldr	r3, [r7, #24]
 8008750:	68fa      	ldr	r2, [r7, #12]
 8008752:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008754:	69bb      	ldr	r3, [r7, #24]
 8008756:	68ba      	ldr	r2, [r7, #8]
 8008758:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800875a:	2101      	movs	r1, #1
 800875c:	69b8      	ldr	r0, [r7, #24]
 800875e:	f7ff ff05 	bl	800856c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008762:	69bb      	ldr	r3, [r7, #24]
 8008764:	78fa      	ldrb	r2, [r7, #3]
 8008766:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800876a:	bf00      	nop
 800876c:	3710      	adds	r7, #16
 800876e:	46bd      	mov	sp, r7
 8008770:	bd80      	pop	{r7, pc}
	...

08008774 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008774:	b580      	push	{r7, lr}
 8008776:	b08e      	sub	sp, #56	; 0x38
 8008778:	af00      	add	r7, sp, #0
 800877a:	60f8      	str	r0, [r7, #12]
 800877c:	60b9      	str	r1, [r7, #8]
 800877e:	607a      	str	r2, [r7, #4]
 8008780:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008782:	2300      	movs	r3, #0
 8008784:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800878a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800878c:	2b00      	cmp	r3, #0
 800878e:	d10a      	bne.n	80087a6 <xQueueGenericSend+0x32>
	__asm volatile
 8008790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008794:	f383 8811 	msr	BASEPRI, r3
 8008798:	f3bf 8f6f 	isb	sy
 800879c:	f3bf 8f4f 	dsb	sy
 80087a0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80087a2:	bf00      	nop
 80087a4:	e7fe      	b.n	80087a4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80087a6:	68bb      	ldr	r3, [r7, #8]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d103      	bne.n	80087b4 <xQueueGenericSend+0x40>
 80087ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d101      	bne.n	80087b8 <xQueueGenericSend+0x44>
 80087b4:	2301      	movs	r3, #1
 80087b6:	e000      	b.n	80087ba <xQueueGenericSend+0x46>
 80087b8:	2300      	movs	r3, #0
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d10a      	bne.n	80087d4 <xQueueGenericSend+0x60>
	__asm volatile
 80087be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087c2:	f383 8811 	msr	BASEPRI, r3
 80087c6:	f3bf 8f6f 	isb	sy
 80087ca:	f3bf 8f4f 	dsb	sy
 80087ce:	627b      	str	r3, [r7, #36]	; 0x24
}
 80087d0:	bf00      	nop
 80087d2:	e7fe      	b.n	80087d2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80087d4:	683b      	ldr	r3, [r7, #0]
 80087d6:	2b02      	cmp	r3, #2
 80087d8:	d103      	bne.n	80087e2 <xQueueGenericSend+0x6e>
 80087da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087de:	2b01      	cmp	r3, #1
 80087e0:	d101      	bne.n	80087e6 <xQueueGenericSend+0x72>
 80087e2:	2301      	movs	r3, #1
 80087e4:	e000      	b.n	80087e8 <xQueueGenericSend+0x74>
 80087e6:	2300      	movs	r3, #0
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d10a      	bne.n	8008802 <xQueueGenericSend+0x8e>
	__asm volatile
 80087ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087f0:	f383 8811 	msr	BASEPRI, r3
 80087f4:	f3bf 8f6f 	isb	sy
 80087f8:	f3bf 8f4f 	dsb	sy
 80087fc:	623b      	str	r3, [r7, #32]
}
 80087fe:	bf00      	nop
 8008800:	e7fe      	b.n	8008800 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008802:	f001 f9bd 	bl	8009b80 <xTaskGetSchedulerState>
 8008806:	4603      	mov	r3, r0
 8008808:	2b00      	cmp	r3, #0
 800880a:	d102      	bne.n	8008812 <xQueueGenericSend+0x9e>
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d101      	bne.n	8008816 <xQueueGenericSend+0xa2>
 8008812:	2301      	movs	r3, #1
 8008814:	e000      	b.n	8008818 <xQueueGenericSend+0xa4>
 8008816:	2300      	movs	r3, #0
 8008818:	2b00      	cmp	r3, #0
 800881a:	d10a      	bne.n	8008832 <xQueueGenericSend+0xbe>
	__asm volatile
 800881c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008820:	f383 8811 	msr	BASEPRI, r3
 8008824:	f3bf 8f6f 	isb	sy
 8008828:	f3bf 8f4f 	dsb	sy
 800882c:	61fb      	str	r3, [r7, #28]
}
 800882e:	bf00      	nop
 8008830:	e7fe      	b.n	8008830 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008832:	f001 feff 	bl	800a634 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008838:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800883a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800883c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800883e:	429a      	cmp	r2, r3
 8008840:	d302      	bcc.n	8008848 <xQueueGenericSend+0xd4>
 8008842:	683b      	ldr	r3, [r7, #0]
 8008844:	2b02      	cmp	r3, #2
 8008846:	d129      	bne.n	800889c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008848:	683a      	ldr	r2, [r7, #0]
 800884a:	68b9      	ldr	r1, [r7, #8]
 800884c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800884e:	f000 fa0b 	bl	8008c68 <prvCopyDataToQueue>
 8008852:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008858:	2b00      	cmp	r3, #0
 800885a:	d010      	beq.n	800887e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800885c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800885e:	3324      	adds	r3, #36	; 0x24
 8008860:	4618      	mov	r0, r3
 8008862:	f000 ffcf 	bl	8009804 <xTaskRemoveFromEventList>
 8008866:	4603      	mov	r3, r0
 8008868:	2b00      	cmp	r3, #0
 800886a:	d013      	beq.n	8008894 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800886c:	4b3f      	ldr	r3, [pc, #252]	; (800896c <xQueueGenericSend+0x1f8>)
 800886e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008872:	601a      	str	r2, [r3, #0]
 8008874:	f3bf 8f4f 	dsb	sy
 8008878:	f3bf 8f6f 	isb	sy
 800887c:	e00a      	b.n	8008894 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800887e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008880:	2b00      	cmp	r3, #0
 8008882:	d007      	beq.n	8008894 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008884:	4b39      	ldr	r3, [pc, #228]	; (800896c <xQueueGenericSend+0x1f8>)
 8008886:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800888a:	601a      	str	r2, [r3, #0]
 800888c:	f3bf 8f4f 	dsb	sy
 8008890:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008894:	f001 fefe 	bl	800a694 <vPortExitCritical>
				return pdPASS;
 8008898:	2301      	movs	r3, #1
 800889a:	e063      	b.n	8008964 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d103      	bne.n	80088aa <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80088a2:	f001 fef7 	bl	800a694 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80088a6:	2300      	movs	r3, #0
 80088a8:	e05c      	b.n	8008964 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80088aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d106      	bne.n	80088be <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80088b0:	f107 0314 	add.w	r3, r7, #20
 80088b4:	4618      	mov	r0, r3
 80088b6:	f001 f809 	bl	80098cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80088ba:	2301      	movs	r3, #1
 80088bc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80088be:	f001 fee9 	bl	800a694 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80088c2:	f000 fd7b 	bl	80093bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80088c6:	f001 feb5 	bl	800a634 <vPortEnterCritical>
 80088ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80088d0:	b25b      	sxtb	r3, r3
 80088d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80088d6:	d103      	bne.n	80088e0 <xQueueGenericSend+0x16c>
 80088d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088da:	2200      	movs	r2, #0
 80088dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80088e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80088e6:	b25b      	sxtb	r3, r3
 80088e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80088ec:	d103      	bne.n	80088f6 <xQueueGenericSend+0x182>
 80088ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088f0:	2200      	movs	r2, #0
 80088f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80088f6:	f001 fecd 	bl	800a694 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80088fa:	1d3a      	adds	r2, r7, #4
 80088fc:	f107 0314 	add.w	r3, r7, #20
 8008900:	4611      	mov	r1, r2
 8008902:	4618      	mov	r0, r3
 8008904:	f000 fff8 	bl	80098f8 <xTaskCheckForTimeOut>
 8008908:	4603      	mov	r3, r0
 800890a:	2b00      	cmp	r3, #0
 800890c:	d124      	bne.n	8008958 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800890e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008910:	f000 faa2 	bl	8008e58 <prvIsQueueFull>
 8008914:	4603      	mov	r3, r0
 8008916:	2b00      	cmp	r3, #0
 8008918:	d018      	beq.n	800894c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800891a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800891c:	3310      	adds	r3, #16
 800891e:	687a      	ldr	r2, [r7, #4]
 8008920:	4611      	mov	r1, r2
 8008922:	4618      	mov	r0, r3
 8008924:	f000 ff1e 	bl	8009764 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008928:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800892a:	f000 fa2d 	bl	8008d88 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800892e:	f000 fd53 	bl	80093d8 <xTaskResumeAll>
 8008932:	4603      	mov	r3, r0
 8008934:	2b00      	cmp	r3, #0
 8008936:	f47f af7c 	bne.w	8008832 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800893a:	4b0c      	ldr	r3, [pc, #48]	; (800896c <xQueueGenericSend+0x1f8>)
 800893c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008940:	601a      	str	r2, [r3, #0]
 8008942:	f3bf 8f4f 	dsb	sy
 8008946:	f3bf 8f6f 	isb	sy
 800894a:	e772      	b.n	8008832 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800894c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800894e:	f000 fa1b 	bl	8008d88 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008952:	f000 fd41 	bl	80093d8 <xTaskResumeAll>
 8008956:	e76c      	b.n	8008832 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008958:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800895a:	f000 fa15 	bl	8008d88 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800895e:	f000 fd3b 	bl	80093d8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008962:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008964:	4618      	mov	r0, r3
 8008966:	3738      	adds	r7, #56	; 0x38
 8008968:	46bd      	mov	sp, r7
 800896a:	bd80      	pop	{r7, pc}
 800896c:	e000ed04 	.word	0xe000ed04

08008970 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008970:	b580      	push	{r7, lr}
 8008972:	b090      	sub	sp, #64	; 0x40
 8008974:	af00      	add	r7, sp, #0
 8008976:	60f8      	str	r0, [r7, #12]
 8008978:	60b9      	str	r1, [r7, #8]
 800897a:	607a      	str	r2, [r7, #4]
 800897c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8008982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008984:	2b00      	cmp	r3, #0
 8008986:	d10a      	bne.n	800899e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800898c:	f383 8811 	msr	BASEPRI, r3
 8008990:	f3bf 8f6f 	isb	sy
 8008994:	f3bf 8f4f 	dsb	sy
 8008998:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800899a:	bf00      	nop
 800899c:	e7fe      	b.n	800899c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800899e:	68bb      	ldr	r3, [r7, #8]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d103      	bne.n	80089ac <xQueueGenericSendFromISR+0x3c>
 80089a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d101      	bne.n	80089b0 <xQueueGenericSendFromISR+0x40>
 80089ac:	2301      	movs	r3, #1
 80089ae:	e000      	b.n	80089b2 <xQueueGenericSendFromISR+0x42>
 80089b0:	2300      	movs	r3, #0
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d10a      	bne.n	80089cc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80089b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089ba:	f383 8811 	msr	BASEPRI, r3
 80089be:	f3bf 8f6f 	isb	sy
 80089c2:	f3bf 8f4f 	dsb	sy
 80089c6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80089c8:	bf00      	nop
 80089ca:	e7fe      	b.n	80089ca <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80089cc:	683b      	ldr	r3, [r7, #0]
 80089ce:	2b02      	cmp	r3, #2
 80089d0:	d103      	bne.n	80089da <xQueueGenericSendFromISR+0x6a>
 80089d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089d6:	2b01      	cmp	r3, #1
 80089d8:	d101      	bne.n	80089de <xQueueGenericSendFromISR+0x6e>
 80089da:	2301      	movs	r3, #1
 80089dc:	e000      	b.n	80089e0 <xQueueGenericSendFromISR+0x70>
 80089de:	2300      	movs	r3, #0
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d10a      	bne.n	80089fa <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80089e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089e8:	f383 8811 	msr	BASEPRI, r3
 80089ec:	f3bf 8f6f 	isb	sy
 80089f0:	f3bf 8f4f 	dsb	sy
 80089f4:	623b      	str	r3, [r7, #32]
}
 80089f6:	bf00      	nop
 80089f8:	e7fe      	b.n	80089f8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80089fa:	f001 fefd 	bl	800a7f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80089fe:	f3ef 8211 	mrs	r2, BASEPRI
 8008a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a06:	f383 8811 	msr	BASEPRI, r3
 8008a0a:	f3bf 8f6f 	isb	sy
 8008a0e:	f3bf 8f4f 	dsb	sy
 8008a12:	61fa      	str	r2, [r7, #28]
 8008a14:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008a16:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008a18:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008a1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008a1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a22:	429a      	cmp	r2, r3
 8008a24:	d302      	bcc.n	8008a2c <xQueueGenericSendFromISR+0xbc>
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	2b02      	cmp	r3, #2
 8008a2a:	d12f      	bne.n	8008a8c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008a2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a2e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008a32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008a3c:	683a      	ldr	r2, [r7, #0]
 8008a3e:	68b9      	ldr	r1, [r7, #8]
 8008a40:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008a42:	f000 f911 	bl	8008c68 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008a46:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8008a4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008a4e:	d112      	bne.n	8008a76 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008a50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d016      	beq.n	8008a86 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008a58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a5a:	3324      	adds	r3, #36	; 0x24
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	f000 fed1 	bl	8009804 <xTaskRemoveFromEventList>
 8008a62:	4603      	mov	r3, r0
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d00e      	beq.n	8008a86 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d00b      	beq.n	8008a86 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	2201      	movs	r2, #1
 8008a72:	601a      	str	r2, [r3, #0]
 8008a74:	e007      	b.n	8008a86 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008a76:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008a7a:	3301      	adds	r3, #1
 8008a7c:	b2db      	uxtb	r3, r3
 8008a7e:	b25a      	sxtb	r2, r3
 8008a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008a86:	2301      	movs	r3, #1
 8008a88:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8008a8a:	e001      	b.n	8008a90 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008a90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a92:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008a94:	697b      	ldr	r3, [r7, #20]
 8008a96:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008a9a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008a9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	3740      	adds	r7, #64	; 0x40
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	bd80      	pop	{r7, pc}
	...

08008aa8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b08c      	sub	sp, #48	; 0x30
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	60f8      	str	r0, [r7, #12]
 8008ab0:	60b9      	str	r1, [r7, #8]
 8008ab2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d10a      	bne.n	8008ad8 <xQueueReceive+0x30>
	__asm volatile
 8008ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ac6:	f383 8811 	msr	BASEPRI, r3
 8008aca:	f3bf 8f6f 	isb	sy
 8008ace:	f3bf 8f4f 	dsb	sy
 8008ad2:	623b      	str	r3, [r7, #32]
}
 8008ad4:	bf00      	nop
 8008ad6:	e7fe      	b.n	8008ad6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008ad8:	68bb      	ldr	r3, [r7, #8]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d103      	bne.n	8008ae6 <xQueueReceive+0x3e>
 8008ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d101      	bne.n	8008aea <xQueueReceive+0x42>
 8008ae6:	2301      	movs	r3, #1
 8008ae8:	e000      	b.n	8008aec <xQueueReceive+0x44>
 8008aea:	2300      	movs	r3, #0
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d10a      	bne.n	8008b06 <xQueueReceive+0x5e>
	__asm volatile
 8008af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008af4:	f383 8811 	msr	BASEPRI, r3
 8008af8:	f3bf 8f6f 	isb	sy
 8008afc:	f3bf 8f4f 	dsb	sy
 8008b00:	61fb      	str	r3, [r7, #28]
}
 8008b02:	bf00      	nop
 8008b04:	e7fe      	b.n	8008b04 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008b06:	f001 f83b 	bl	8009b80 <xTaskGetSchedulerState>
 8008b0a:	4603      	mov	r3, r0
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d102      	bne.n	8008b16 <xQueueReceive+0x6e>
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d101      	bne.n	8008b1a <xQueueReceive+0x72>
 8008b16:	2301      	movs	r3, #1
 8008b18:	e000      	b.n	8008b1c <xQueueReceive+0x74>
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d10a      	bne.n	8008b36 <xQueueReceive+0x8e>
	__asm volatile
 8008b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b24:	f383 8811 	msr	BASEPRI, r3
 8008b28:	f3bf 8f6f 	isb	sy
 8008b2c:	f3bf 8f4f 	dsb	sy
 8008b30:	61bb      	str	r3, [r7, #24]
}
 8008b32:	bf00      	nop
 8008b34:	e7fe      	b.n	8008b34 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008b36:	f001 fd7d 	bl	800a634 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b3e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d01f      	beq.n	8008b86 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008b46:	68b9      	ldr	r1, [r7, #8]
 8008b48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b4a:	f000 f8f7 	bl	8008d3c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b50:	1e5a      	subs	r2, r3, #1
 8008b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b54:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b58:	691b      	ldr	r3, [r3, #16]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d00f      	beq.n	8008b7e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b60:	3310      	adds	r3, #16
 8008b62:	4618      	mov	r0, r3
 8008b64:	f000 fe4e 	bl	8009804 <xTaskRemoveFromEventList>
 8008b68:	4603      	mov	r3, r0
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d007      	beq.n	8008b7e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008b6e:	4b3d      	ldr	r3, [pc, #244]	; (8008c64 <xQueueReceive+0x1bc>)
 8008b70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b74:	601a      	str	r2, [r3, #0]
 8008b76:	f3bf 8f4f 	dsb	sy
 8008b7a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008b7e:	f001 fd89 	bl	800a694 <vPortExitCritical>
				return pdPASS;
 8008b82:	2301      	movs	r3, #1
 8008b84:	e069      	b.n	8008c5a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d103      	bne.n	8008b94 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008b8c:	f001 fd82 	bl	800a694 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008b90:	2300      	movs	r3, #0
 8008b92:	e062      	b.n	8008c5a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d106      	bne.n	8008ba8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008b9a:	f107 0310 	add.w	r3, r7, #16
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	f000 fe94 	bl	80098cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008ba4:	2301      	movs	r3, #1
 8008ba6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008ba8:	f001 fd74 	bl	800a694 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008bac:	f000 fc06 	bl	80093bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008bb0:	f001 fd40 	bl	800a634 <vPortEnterCritical>
 8008bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bb6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008bba:	b25b      	sxtb	r3, r3
 8008bbc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008bc0:	d103      	bne.n	8008bca <xQueueReceive+0x122>
 8008bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bcc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008bd0:	b25b      	sxtb	r3, r3
 8008bd2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008bd6:	d103      	bne.n	8008be0 <xQueueReceive+0x138>
 8008bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bda:	2200      	movs	r2, #0
 8008bdc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008be0:	f001 fd58 	bl	800a694 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008be4:	1d3a      	adds	r2, r7, #4
 8008be6:	f107 0310 	add.w	r3, r7, #16
 8008bea:	4611      	mov	r1, r2
 8008bec:	4618      	mov	r0, r3
 8008bee:	f000 fe83 	bl	80098f8 <xTaskCheckForTimeOut>
 8008bf2:	4603      	mov	r3, r0
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d123      	bne.n	8008c40 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008bf8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008bfa:	f000 f917 	bl	8008e2c <prvIsQueueEmpty>
 8008bfe:	4603      	mov	r3, r0
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d017      	beq.n	8008c34 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c06:	3324      	adds	r3, #36	; 0x24
 8008c08:	687a      	ldr	r2, [r7, #4]
 8008c0a:	4611      	mov	r1, r2
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	f000 fda9 	bl	8009764 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008c12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c14:	f000 f8b8 	bl	8008d88 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008c18:	f000 fbde 	bl	80093d8 <xTaskResumeAll>
 8008c1c:	4603      	mov	r3, r0
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d189      	bne.n	8008b36 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8008c22:	4b10      	ldr	r3, [pc, #64]	; (8008c64 <xQueueReceive+0x1bc>)
 8008c24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c28:	601a      	str	r2, [r3, #0]
 8008c2a:	f3bf 8f4f 	dsb	sy
 8008c2e:	f3bf 8f6f 	isb	sy
 8008c32:	e780      	b.n	8008b36 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008c34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c36:	f000 f8a7 	bl	8008d88 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008c3a:	f000 fbcd 	bl	80093d8 <xTaskResumeAll>
 8008c3e:	e77a      	b.n	8008b36 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008c40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c42:	f000 f8a1 	bl	8008d88 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008c46:	f000 fbc7 	bl	80093d8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008c4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c4c:	f000 f8ee 	bl	8008e2c <prvIsQueueEmpty>
 8008c50:	4603      	mov	r3, r0
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	f43f af6f 	beq.w	8008b36 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008c58:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	3730      	adds	r7, #48	; 0x30
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	bd80      	pop	{r7, pc}
 8008c62:	bf00      	nop
 8008c64:	e000ed04 	.word	0xe000ed04

08008c68 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	b086      	sub	sp, #24
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	60f8      	str	r0, [r7, #12]
 8008c70:	60b9      	str	r1, [r7, #8]
 8008c72:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008c74:	2300      	movs	r3, #0
 8008c76:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c7c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d10d      	bne.n	8008ca2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d14d      	bne.n	8008d2a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	689b      	ldr	r3, [r3, #8]
 8008c92:	4618      	mov	r0, r3
 8008c94:	f000 ff92 	bl	8009bbc <xTaskPriorityDisinherit>
 8008c98:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	609a      	str	r2, [r3, #8]
 8008ca0:	e043      	b.n	8008d2a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d119      	bne.n	8008cdc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	6858      	ldr	r0, [r3, #4]
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cb0:	461a      	mov	r2, r3
 8008cb2:	68b9      	ldr	r1, [r7, #8]
 8008cb4:	f002 fd80 	bl	800b7b8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	685a      	ldr	r2, [r3, #4]
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cc0:	441a      	add	r2, r3
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	685a      	ldr	r2, [r3, #4]
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	689b      	ldr	r3, [r3, #8]
 8008cce:	429a      	cmp	r2, r3
 8008cd0:	d32b      	bcc.n	8008d2a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	681a      	ldr	r2, [r3, #0]
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	605a      	str	r2, [r3, #4]
 8008cda:	e026      	b.n	8008d2a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	68d8      	ldr	r0, [r3, #12]
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ce4:	461a      	mov	r2, r3
 8008ce6:	68b9      	ldr	r1, [r7, #8]
 8008ce8:	f002 fd66 	bl	800b7b8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	68da      	ldr	r2, [r3, #12]
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cf4:	425b      	negs	r3, r3
 8008cf6:	441a      	add	r2, r3
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	68da      	ldr	r2, [r3, #12]
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	429a      	cmp	r2, r3
 8008d06:	d207      	bcs.n	8008d18 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	689a      	ldr	r2, [r3, #8]
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d10:	425b      	negs	r3, r3
 8008d12:	441a      	add	r2, r3
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	2b02      	cmp	r3, #2
 8008d1c:	d105      	bne.n	8008d2a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008d1e:	693b      	ldr	r3, [r7, #16]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d002      	beq.n	8008d2a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008d24:	693b      	ldr	r3, [r7, #16]
 8008d26:	3b01      	subs	r3, #1
 8008d28:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008d2a:	693b      	ldr	r3, [r7, #16]
 8008d2c:	1c5a      	adds	r2, r3, #1
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008d32:	697b      	ldr	r3, [r7, #20]
}
 8008d34:	4618      	mov	r0, r3
 8008d36:	3718      	adds	r7, #24
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	bd80      	pop	{r7, pc}

08008d3c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b082      	sub	sp, #8
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
 8008d44:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d018      	beq.n	8008d80 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	68da      	ldr	r2, [r3, #12]
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d56:	441a      	add	r2, r3
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	68da      	ldr	r2, [r3, #12]
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	689b      	ldr	r3, [r3, #8]
 8008d64:	429a      	cmp	r2, r3
 8008d66:	d303      	bcc.n	8008d70 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681a      	ldr	r2, [r3, #0]
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	68d9      	ldr	r1, [r3, #12]
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d78:	461a      	mov	r2, r3
 8008d7a:	6838      	ldr	r0, [r7, #0]
 8008d7c:	f002 fd1c 	bl	800b7b8 <memcpy>
	}
}
 8008d80:	bf00      	nop
 8008d82:	3708      	adds	r7, #8
 8008d84:	46bd      	mov	sp, r7
 8008d86:	bd80      	pop	{r7, pc}

08008d88 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b084      	sub	sp, #16
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008d90:	f001 fc50 	bl	800a634 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008d9a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008d9c:	e011      	b.n	8008dc2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d012      	beq.n	8008dcc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	3324      	adds	r3, #36	; 0x24
 8008daa:	4618      	mov	r0, r3
 8008dac:	f000 fd2a 	bl	8009804 <xTaskRemoveFromEventList>
 8008db0:	4603      	mov	r3, r0
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d001      	beq.n	8008dba <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008db6:	f000 fe01 	bl	80099bc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008dba:	7bfb      	ldrb	r3, [r7, #15]
 8008dbc:	3b01      	subs	r3, #1
 8008dbe:	b2db      	uxtb	r3, r3
 8008dc0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008dc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	dce9      	bgt.n	8008d9e <prvUnlockQueue+0x16>
 8008dca:	e000      	b.n	8008dce <prvUnlockQueue+0x46>
					break;
 8008dcc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	22ff      	movs	r2, #255	; 0xff
 8008dd2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008dd6:	f001 fc5d 	bl	800a694 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008dda:	f001 fc2b 	bl	800a634 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008de4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008de6:	e011      	b.n	8008e0c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	691b      	ldr	r3, [r3, #16]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d012      	beq.n	8008e16 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	3310      	adds	r3, #16
 8008df4:	4618      	mov	r0, r3
 8008df6:	f000 fd05 	bl	8009804 <xTaskRemoveFromEventList>
 8008dfa:	4603      	mov	r3, r0
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d001      	beq.n	8008e04 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008e00:	f000 fddc 	bl	80099bc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008e04:	7bbb      	ldrb	r3, [r7, #14]
 8008e06:	3b01      	subs	r3, #1
 8008e08:	b2db      	uxtb	r3, r3
 8008e0a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008e0c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	dce9      	bgt.n	8008de8 <prvUnlockQueue+0x60>
 8008e14:	e000      	b.n	8008e18 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008e16:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	22ff      	movs	r2, #255	; 0xff
 8008e1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008e20:	f001 fc38 	bl	800a694 <vPortExitCritical>
}
 8008e24:	bf00      	nop
 8008e26:	3710      	adds	r7, #16
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	bd80      	pop	{r7, pc}

08008e2c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008e2c:	b580      	push	{r7, lr}
 8008e2e:	b084      	sub	sp, #16
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008e34:	f001 fbfe 	bl	800a634 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d102      	bne.n	8008e46 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008e40:	2301      	movs	r3, #1
 8008e42:	60fb      	str	r3, [r7, #12]
 8008e44:	e001      	b.n	8008e4a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008e46:	2300      	movs	r3, #0
 8008e48:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008e4a:	f001 fc23 	bl	800a694 <vPortExitCritical>

	return xReturn;
 8008e4e:	68fb      	ldr	r3, [r7, #12]
}
 8008e50:	4618      	mov	r0, r3
 8008e52:	3710      	adds	r7, #16
 8008e54:	46bd      	mov	sp, r7
 8008e56:	bd80      	pop	{r7, pc}

08008e58 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b084      	sub	sp, #16
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008e60:	f001 fbe8 	bl	800a634 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e6c:	429a      	cmp	r2, r3
 8008e6e:	d102      	bne.n	8008e76 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008e70:	2301      	movs	r3, #1
 8008e72:	60fb      	str	r3, [r7, #12]
 8008e74:	e001      	b.n	8008e7a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008e76:	2300      	movs	r3, #0
 8008e78:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008e7a:	f001 fc0b 	bl	800a694 <vPortExitCritical>

	return xReturn;
 8008e7e:	68fb      	ldr	r3, [r7, #12]
}
 8008e80:	4618      	mov	r0, r3
 8008e82:	3710      	adds	r7, #16
 8008e84:	46bd      	mov	sp, r7
 8008e86:	bd80      	pop	{r7, pc}

08008e88 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008e88:	b480      	push	{r7}
 8008e8a:	b085      	sub	sp, #20
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]
 8008e90:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008e92:	2300      	movs	r3, #0
 8008e94:	60fb      	str	r3, [r7, #12]
 8008e96:	e014      	b.n	8008ec2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008e98:	4a0f      	ldr	r2, [pc, #60]	; (8008ed8 <vQueueAddToRegistry+0x50>)
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d10b      	bne.n	8008ebc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008ea4:	490c      	ldr	r1, [pc, #48]	; (8008ed8 <vQueueAddToRegistry+0x50>)
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	683a      	ldr	r2, [r7, #0]
 8008eaa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008eae:	4a0a      	ldr	r2, [pc, #40]	; (8008ed8 <vQueueAddToRegistry+0x50>)
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	00db      	lsls	r3, r3, #3
 8008eb4:	4413      	add	r3, r2
 8008eb6:	687a      	ldr	r2, [r7, #4]
 8008eb8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008eba:	e006      	b.n	8008eca <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	3301      	adds	r3, #1
 8008ec0:	60fb      	str	r3, [r7, #12]
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	2b07      	cmp	r3, #7
 8008ec6:	d9e7      	bls.n	8008e98 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008ec8:	bf00      	nop
 8008eca:	bf00      	nop
 8008ecc:	3714      	adds	r7, #20
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed4:	4770      	bx	lr
 8008ed6:	bf00      	nop
 8008ed8:	200009bc 	.word	0x200009bc

08008edc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008edc:	b580      	push	{r7, lr}
 8008ede:	b086      	sub	sp, #24
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	60f8      	str	r0, [r7, #12]
 8008ee4:	60b9      	str	r1, [r7, #8]
 8008ee6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008eec:	f001 fba2 	bl	800a634 <vPortEnterCritical>
 8008ef0:	697b      	ldr	r3, [r7, #20]
 8008ef2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008ef6:	b25b      	sxtb	r3, r3
 8008ef8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008efc:	d103      	bne.n	8008f06 <vQueueWaitForMessageRestricted+0x2a>
 8008efe:	697b      	ldr	r3, [r7, #20]
 8008f00:	2200      	movs	r2, #0
 8008f02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008f06:	697b      	ldr	r3, [r7, #20]
 8008f08:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008f0c:	b25b      	sxtb	r3, r3
 8008f0e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008f12:	d103      	bne.n	8008f1c <vQueueWaitForMessageRestricted+0x40>
 8008f14:	697b      	ldr	r3, [r7, #20]
 8008f16:	2200      	movs	r2, #0
 8008f18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008f1c:	f001 fbba 	bl	800a694 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008f20:	697b      	ldr	r3, [r7, #20]
 8008f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d106      	bne.n	8008f36 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008f28:	697b      	ldr	r3, [r7, #20]
 8008f2a:	3324      	adds	r3, #36	; 0x24
 8008f2c:	687a      	ldr	r2, [r7, #4]
 8008f2e:	68b9      	ldr	r1, [r7, #8]
 8008f30:	4618      	mov	r0, r3
 8008f32:	f000 fc3b 	bl	80097ac <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008f36:	6978      	ldr	r0, [r7, #20]
 8008f38:	f7ff ff26 	bl	8008d88 <prvUnlockQueue>
	}
 8008f3c:	bf00      	nop
 8008f3e:	3718      	adds	r7, #24
 8008f40:	46bd      	mov	sp, r7
 8008f42:	bd80      	pop	{r7, pc}

08008f44 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008f44:	b580      	push	{r7, lr}
 8008f46:	b08e      	sub	sp, #56	; 0x38
 8008f48:	af04      	add	r7, sp, #16
 8008f4a:	60f8      	str	r0, [r7, #12]
 8008f4c:	60b9      	str	r1, [r7, #8]
 8008f4e:	607a      	str	r2, [r7, #4]
 8008f50:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008f52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d10a      	bne.n	8008f6e <xTaskCreateStatic+0x2a>
	__asm volatile
 8008f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f5c:	f383 8811 	msr	BASEPRI, r3
 8008f60:	f3bf 8f6f 	isb	sy
 8008f64:	f3bf 8f4f 	dsb	sy
 8008f68:	623b      	str	r3, [r7, #32]
}
 8008f6a:	bf00      	nop
 8008f6c:	e7fe      	b.n	8008f6c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008f6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d10a      	bne.n	8008f8a <xTaskCreateStatic+0x46>
	__asm volatile
 8008f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f78:	f383 8811 	msr	BASEPRI, r3
 8008f7c:	f3bf 8f6f 	isb	sy
 8008f80:	f3bf 8f4f 	dsb	sy
 8008f84:	61fb      	str	r3, [r7, #28]
}
 8008f86:	bf00      	nop
 8008f88:	e7fe      	b.n	8008f88 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008f8a:	235c      	movs	r3, #92	; 0x5c
 8008f8c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008f8e:	693b      	ldr	r3, [r7, #16]
 8008f90:	2b5c      	cmp	r3, #92	; 0x5c
 8008f92:	d00a      	beq.n	8008faa <xTaskCreateStatic+0x66>
	__asm volatile
 8008f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f98:	f383 8811 	msr	BASEPRI, r3
 8008f9c:	f3bf 8f6f 	isb	sy
 8008fa0:	f3bf 8f4f 	dsb	sy
 8008fa4:	61bb      	str	r3, [r7, #24]
}
 8008fa6:	bf00      	nop
 8008fa8:	e7fe      	b.n	8008fa8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008faa:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008fac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d01e      	beq.n	8008ff0 <xTaskCreateStatic+0xac>
 8008fb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d01b      	beq.n	8008ff0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008fb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fba:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fbe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008fc0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fc4:	2202      	movs	r2, #2
 8008fc6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008fca:	2300      	movs	r3, #0
 8008fcc:	9303      	str	r3, [sp, #12]
 8008fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fd0:	9302      	str	r3, [sp, #8]
 8008fd2:	f107 0314 	add.w	r3, r7, #20
 8008fd6:	9301      	str	r3, [sp, #4]
 8008fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fda:	9300      	str	r3, [sp, #0]
 8008fdc:	683b      	ldr	r3, [r7, #0]
 8008fde:	687a      	ldr	r2, [r7, #4]
 8008fe0:	68b9      	ldr	r1, [r7, #8]
 8008fe2:	68f8      	ldr	r0, [r7, #12]
 8008fe4:	f000 f850 	bl	8009088 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008fe8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008fea:	f000 f8dd 	bl	80091a8 <prvAddNewTaskToReadyList>
 8008fee:	e001      	b.n	8008ff4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008ff4:	697b      	ldr	r3, [r7, #20]
	}
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	3728      	adds	r7, #40	; 0x28
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	bd80      	pop	{r7, pc}

08008ffe <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008ffe:	b580      	push	{r7, lr}
 8009000:	b08c      	sub	sp, #48	; 0x30
 8009002:	af04      	add	r7, sp, #16
 8009004:	60f8      	str	r0, [r7, #12]
 8009006:	60b9      	str	r1, [r7, #8]
 8009008:	603b      	str	r3, [r7, #0]
 800900a:	4613      	mov	r3, r2
 800900c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800900e:	88fb      	ldrh	r3, [r7, #6]
 8009010:	009b      	lsls	r3, r3, #2
 8009012:	4618      	mov	r0, r3
 8009014:	f001 fc30 	bl	800a878 <pvPortMalloc>
 8009018:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800901a:	697b      	ldr	r3, [r7, #20]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d00e      	beq.n	800903e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009020:	205c      	movs	r0, #92	; 0x5c
 8009022:	f001 fc29 	bl	800a878 <pvPortMalloc>
 8009026:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009028:	69fb      	ldr	r3, [r7, #28]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d003      	beq.n	8009036 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800902e:	69fb      	ldr	r3, [r7, #28]
 8009030:	697a      	ldr	r2, [r7, #20]
 8009032:	631a      	str	r2, [r3, #48]	; 0x30
 8009034:	e005      	b.n	8009042 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009036:	6978      	ldr	r0, [r7, #20]
 8009038:	f001 fcea 	bl	800aa10 <vPortFree>
 800903c:	e001      	b.n	8009042 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800903e:	2300      	movs	r3, #0
 8009040:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009042:	69fb      	ldr	r3, [r7, #28]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d017      	beq.n	8009078 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009048:	69fb      	ldr	r3, [r7, #28]
 800904a:	2200      	movs	r2, #0
 800904c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009050:	88fa      	ldrh	r2, [r7, #6]
 8009052:	2300      	movs	r3, #0
 8009054:	9303      	str	r3, [sp, #12]
 8009056:	69fb      	ldr	r3, [r7, #28]
 8009058:	9302      	str	r3, [sp, #8]
 800905a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800905c:	9301      	str	r3, [sp, #4]
 800905e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009060:	9300      	str	r3, [sp, #0]
 8009062:	683b      	ldr	r3, [r7, #0]
 8009064:	68b9      	ldr	r1, [r7, #8]
 8009066:	68f8      	ldr	r0, [r7, #12]
 8009068:	f000 f80e 	bl	8009088 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800906c:	69f8      	ldr	r0, [r7, #28]
 800906e:	f000 f89b 	bl	80091a8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009072:	2301      	movs	r3, #1
 8009074:	61bb      	str	r3, [r7, #24]
 8009076:	e002      	b.n	800907e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009078:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800907c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800907e:	69bb      	ldr	r3, [r7, #24]
	}
 8009080:	4618      	mov	r0, r3
 8009082:	3720      	adds	r7, #32
 8009084:	46bd      	mov	sp, r7
 8009086:	bd80      	pop	{r7, pc}

08009088 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009088:	b580      	push	{r7, lr}
 800908a:	b088      	sub	sp, #32
 800908c:	af00      	add	r7, sp, #0
 800908e:	60f8      	str	r0, [r7, #12]
 8009090:	60b9      	str	r1, [r7, #8]
 8009092:	607a      	str	r2, [r7, #4]
 8009094:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009098:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	009b      	lsls	r3, r3, #2
 800909e:	461a      	mov	r2, r3
 80090a0:	21a5      	movs	r1, #165	; 0xa5
 80090a2:	f002 fb5d 	bl	800b760 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80090a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80090b0:	3b01      	subs	r3, #1
 80090b2:	009b      	lsls	r3, r3, #2
 80090b4:	4413      	add	r3, r2
 80090b6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80090b8:	69bb      	ldr	r3, [r7, #24]
 80090ba:	f023 0307 	bic.w	r3, r3, #7
 80090be:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80090c0:	69bb      	ldr	r3, [r7, #24]
 80090c2:	f003 0307 	and.w	r3, r3, #7
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d00a      	beq.n	80090e0 <prvInitialiseNewTask+0x58>
	__asm volatile
 80090ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090ce:	f383 8811 	msr	BASEPRI, r3
 80090d2:	f3bf 8f6f 	isb	sy
 80090d6:	f3bf 8f4f 	dsb	sy
 80090da:	617b      	str	r3, [r7, #20]
}
 80090dc:	bf00      	nop
 80090de:	e7fe      	b.n	80090de <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80090e0:	68bb      	ldr	r3, [r7, #8]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d01f      	beq.n	8009126 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80090e6:	2300      	movs	r3, #0
 80090e8:	61fb      	str	r3, [r7, #28]
 80090ea:	e012      	b.n	8009112 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80090ec:	68ba      	ldr	r2, [r7, #8]
 80090ee:	69fb      	ldr	r3, [r7, #28]
 80090f0:	4413      	add	r3, r2
 80090f2:	7819      	ldrb	r1, [r3, #0]
 80090f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80090f6:	69fb      	ldr	r3, [r7, #28]
 80090f8:	4413      	add	r3, r2
 80090fa:	3334      	adds	r3, #52	; 0x34
 80090fc:	460a      	mov	r2, r1
 80090fe:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009100:	68ba      	ldr	r2, [r7, #8]
 8009102:	69fb      	ldr	r3, [r7, #28]
 8009104:	4413      	add	r3, r2
 8009106:	781b      	ldrb	r3, [r3, #0]
 8009108:	2b00      	cmp	r3, #0
 800910a:	d006      	beq.n	800911a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800910c:	69fb      	ldr	r3, [r7, #28]
 800910e:	3301      	adds	r3, #1
 8009110:	61fb      	str	r3, [r7, #28]
 8009112:	69fb      	ldr	r3, [r7, #28]
 8009114:	2b0f      	cmp	r3, #15
 8009116:	d9e9      	bls.n	80090ec <prvInitialiseNewTask+0x64>
 8009118:	e000      	b.n	800911c <prvInitialiseNewTask+0x94>
			{
				break;
 800911a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800911c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800911e:	2200      	movs	r2, #0
 8009120:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009124:	e003      	b.n	800912e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009128:	2200      	movs	r2, #0
 800912a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800912e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009130:	2b37      	cmp	r3, #55	; 0x37
 8009132:	d901      	bls.n	8009138 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009134:	2337      	movs	r3, #55	; 0x37
 8009136:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800913a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800913c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800913e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009140:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009142:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009146:	2200      	movs	r2, #0
 8009148:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800914a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800914c:	3304      	adds	r3, #4
 800914e:	4618      	mov	r0, r3
 8009150:	f7ff f978 	bl	8008444 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009156:	3318      	adds	r3, #24
 8009158:	4618      	mov	r0, r3
 800915a:	f7ff f973 	bl	8008444 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800915e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009160:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009162:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009166:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800916a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800916c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800916e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009170:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009172:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009176:	2200      	movs	r2, #0
 8009178:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800917a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800917c:	2200      	movs	r2, #0
 800917e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009182:	683a      	ldr	r2, [r7, #0]
 8009184:	68f9      	ldr	r1, [r7, #12]
 8009186:	69b8      	ldr	r0, [r7, #24]
 8009188:	f001 f928 	bl	800a3dc <pxPortInitialiseStack>
 800918c:	4602      	mov	r2, r0
 800918e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009190:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009194:	2b00      	cmp	r3, #0
 8009196:	d002      	beq.n	800919e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800919a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800919c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800919e:	bf00      	nop
 80091a0:	3720      	adds	r7, #32
 80091a2:	46bd      	mov	sp, r7
 80091a4:	bd80      	pop	{r7, pc}
	...

080091a8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b082      	sub	sp, #8
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80091b0:	f001 fa40 	bl	800a634 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80091b4:	4b2d      	ldr	r3, [pc, #180]	; (800926c <prvAddNewTaskToReadyList+0xc4>)
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	3301      	adds	r3, #1
 80091ba:	4a2c      	ldr	r2, [pc, #176]	; (800926c <prvAddNewTaskToReadyList+0xc4>)
 80091bc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80091be:	4b2c      	ldr	r3, [pc, #176]	; (8009270 <prvAddNewTaskToReadyList+0xc8>)
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d109      	bne.n	80091da <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80091c6:	4a2a      	ldr	r2, [pc, #168]	; (8009270 <prvAddNewTaskToReadyList+0xc8>)
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80091cc:	4b27      	ldr	r3, [pc, #156]	; (800926c <prvAddNewTaskToReadyList+0xc4>)
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	2b01      	cmp	r3, #1
 80091d2:	d110      	bne.n	80091f6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80091d4:	f000 fc16 	bl	8009a04 <prvInitialiseTaskLists>
 80091d8:	e00d      	b.n	80091f6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80091da:	4b26      	ldr	r3, [pc, #152]	; (8009274 <prvAddNewTaskToReadyList+0xcc>)
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d109      	bne.n	80091f6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80091e2:	4b23      	ldr	r3, [pc, #140]	; (8009270 <prvAddNewTaskToReadyList+0xc8>)
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091ec:	429a      	cmp	r2, r3
 80091ee:	d802      	bhi.n	80091f6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80091f0:	4a1f      	ldr	r2, [pc, #124]	; (8009270 <prvAddNewTaskToReadyList+0xc8>)
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80091f6:	4b20      	ldr	r3, [pc, #128]	; (8009278 <prvAddNewTaskToReadyList+0xd0>)
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	3301      	adds	r3, #1
 80091fc:	4a1e      	ldr	r2, [pc, #120]	; (8009278 <prvAddNewTaskToReadyList+0xd0>)
 80091fe:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009200:	4b1d      	ldr	r3, [pc, #116]	; (8009278 <prvAddNewTaskToReadyList+0xd0>)
 8009202:	681a      	ldr	r2, [r3, #0]
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800920c:	4b1b      	ldr	r3, [pc, #108]	; (800927c <prvAddNewTaskToReadyList+0xd4>)
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	429a      	cmp	r2, r3
 8009212:	d903      	bls.n	800921c <prvAddNewTaskToReadyList+0x74>
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009218:	4a18      	ldr	r2, [pc, #96]	; (800927c <prvAddNewTaskToReadyList+0xd4>)
 800921a:	6013      	str	r3, [r2, #0]
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009220:	4613      	mov	r3, r2
 8009222:	009b      	lsls	r3, r3, #2
 8009224:	4413      	add	r3, r2
 8009226:	009b      	lsls	r3, r3, #2
 8009228:	4a15      	ldr	r2, [pc, #84]	; (8009280 <prvAddNewTaskToReadyList+0xd8>)
 800922a:	441a      	add	r2, r3
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	3304      	adds	r3, #4
 8009230:	4619      	mov	r1, r3
 8009232:	4610      	mov	r0, r2
 8009234:	f7ff f913 	bl	800845e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009238:	f001 fa2c 	bl	800a694 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800923c:	4b0d      	ldr	r3, [pc, #52]	; (8009274 <prvAddNewTaskToReadyList+0xcc>)
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	2b00      	cmp	r3, #0
 8009242:	d00e      	beq.n	8009262 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009244:	4b0a      	ldr	r3, [pc, #40]	; (8009270 <prvAddNewTaskToReadyList+0xc8>)
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800924e:	429a      	cmp	r2, r3
 8009250:	d207      	bcs.n	8009262 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009252:	4b0c      	ldr	r3, [pc, #48]	; (8009284 <prvAddNewTaskToReadyList+0xdc>)
 8009254:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009258:	601a      	str	r2, [r3, #0]
 800925a:	f3bf 8f4f 	dsb	sy
 800925e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009262:	bf00      	nop
 8009264:	3708      	adds	r7, #8
 8009266:	46bd      	mov	sp, r7
 8009268:	bd80      	pop	{r7, pc}
 800926a:	bf00      	nop
 800926c:	20000ed0 	.word	0x20000ed0
 8009270:	200009fc 	.word	0x200009fc
 8009274:	20000edc 	.word	0x20000edc
 8009278:	20000eec 	.word	0x20000eec
 800927c:	20000ed8 	.word	0x20000ed8
 8009280:	20000a00 	.word	0x20000a00
 8009284:	e000ed04 	.word	0xe000ed04

08009288 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009288:	b580      	push	{r7, lr}
 800928a:	b084      	sub	sp, #16
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009290:	2300      	movs	r3, #0
 8009292:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d017      	beq.n	80092ca <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800929a:	4b13      	ldr	r3, [pc, #76]	; (80092e8 <vTaskDelay+0x60>)
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d00a      	beq.n	80092b8 <vTaskDelay+0x30>
	__asm volatile
 80092a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092a6:	f383 8811 	msr	BASEPRI, r3
 80092aa:	f3bf 8f6f 	isb	sy
 80092ae:	f3bf 8f4f 	dsb	sy
 80092b2:	60bb      	str	r3, [r7, #8]
}
 80092b4:	bf00      	nop
 80092b6:	e7fe      	b.n	80092b6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80092b8:	f000 f880 	bl	80093bc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80092bc:	2100      	movs	r1, #0
 80092be:	6878      	ldr	r0, [r7, #4]
 80092c0:	f000 fcea 	bl	8009c98 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80092c4:	f000 f888 	bl	80093d8 <xTaskResumeAll>
 80092c8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d107      	bne.n	80092e0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80092d0:	4b06      	ldr	r3, [pc, #24]	; (80092ec <vTaskDelay+0x64>)
 80092d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80092d6:	601a      	str	r2, [r3, #0]
 80092d8:	f3bf 8f4f 	dsb	sy
 80092dc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80092e0:	bf00      	nop
 80092e2:	3710      	adds	r7, #16
 80092e4:	46bd      	mov	sp, r7
 80092e6:	bd80      	pop	{r7, pc}
 80092e8:	20000ef8 	.word	0x20000ef8
 80092ec:	e000ed04 	.word	0xe000ed04

080092f0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b08a      	sub	sp, #40	; 0x28
 80092f4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80092f6:	2300      	movs	r3, #0
 80092f8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80092fa:	2300      	movs	r3, #0
 80092fc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80092fe:	463a      	mov	r2, r7
 8009300:	1d39      	adds	r1, r7, #4
 8009302:	f107 0308 	add.w	r3, r7, #8
 8009306:	4618      	mov	r0, r3
 8009308:	f7ff f848 	bl	800839c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800930c:	6839      	ldr	r1, [r7, #0]
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	68ba      	ldr	r2, [r7, #8]
 8009312:	9202      	str	r2, [sp, #8]
 8009314:	9301      	str	r3, [sp, #4]
 8009316:	2300      	movs	r3, #0
 8009318:	9300      	str	r3, [sp, #0]
 800931a:	2300      	movs	r3, #0
 800931c:	460a      	mov	r2, r1
 800931e:	4921      	ldr	r1, [pc, #132]	; (80093a4 <vTaskStartScheduler+0xb4>)
 8009320:	4821      	ldr	r0, [pc, #132]	; (80093a8 <vTaskStartScheduler+0xb8>)
 8009322:	f7ff fe0f 	bl	8008f44 <xTaskCreateStatic>
 8009326:	4603      	mov	r3, r0
 8009328:	4a20      	ldr	r2, [pc, #128]	; (80093ac <vTaskStartScheduler+0xbc>)
 800932a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800932c:	4b1f      	ldr	r3, [pc, #124]	; (80093ac <vTaskStartScheduler+0xbc>)
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	2b00      	cmp	r3, #0
 8009332:	d002      	beq.n	800933a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009334:	2301      	movs	r3, #1
 8009336:	617b      	str	r3, [r7, #20]
 8009338:	e001      	b.n	800933e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800933a:	2300      	movs	r3, #0
 800933c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800933e:	697b      	ldr	r3, [r7, #20]
 8009340:	2b01      	cmp	r3, #1
 8009342:	d102      	bne.n	800934a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009344:	f000 fcfc 	bl	8009d40 <xTimerCreateTimerTask>
 8009348:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800934a:	697b      	ldr	r3, [r7, #20]
 800934c:	2b01      	cmp	r3, #1
 800934e:	d116      	bne.n	800937e <vTaskStartScheduler+0x8e>
	__asm volatile
 8009350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009354:	f383 8811 	msr	BASEPRI, r3
 8009358:	f3bf 8f6f 	isb	sy
 800935c:	f3bf 8f4f 	dsb	sy
 8009360:	613b      	str	r3, [r7, #16]
}
 8009362:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009364:	4b12      	ldr	r3, [pc, #72]	; (80093b0 <vTaskStartScheduler+0xc0>)
 8009366:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800936a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800936c:	4b11      	ldr	r3, [pc, #68]	; (80093b4 <vTaskStartScheduler+0xc4>)
 800936e:	2201      	movs	r2, #1
 8009370:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009372:	4b11      	ldr	r3, [pc, #68]	; (80093b8 <vTaskStartScheduler+0xc8>)
 8009374:	2200      	movs	r2, #0
 8009376:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009378:	f001 f8ba 	bl	800a4f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800937c:	e00e      	b.n	800939c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800937e:	697b      	ldr	r3, [r7, #20]
 8009380:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009384:	d10a      	bne.n	800939c <vTaskStartScheduler+0xac>
	__asm volatile
 8009386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800938a:	f383 8811 	msr	BASEPRI, r3
 800938e:	f3bf 8f6f 	isb	sy
 8009392:	f3bf 8f4f 	dsb	sy
 8009396:	60fb      	str	r3, [r7, #12]
}
 8009398:	bf00      	nop
 800939a:	e7fe      	b.n	800939a <vTaskStartScheduler+0xaa>
}
 800939c:	bf00      	nop
 800939e:	3718      	adds	r7, #24
 80093a0:	46bd      	mov	sp, r7
 80093a2:	bd80      	pop	{r7, pc}
 80093a4:	0800b808 	.word	0x0800b808
 80093a8:	080099d5 	.word	0x080099d5
 80093ac:	20000ef4 	.word	0x20000ef4
 80093b0:	20000ef0 	.word	0x20000ef0
 80093b4:	20000edc 	.word	0x20000edc
 80093b8:	20000ed4 	.word	0x20000ed4

080093bc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80093bc:	b480      	push	{r7}
 80093be:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80093c0:	4b04      	ldr	r3, [pc, #16]	; (80093d4 <vTaskSuspendAll+0x18>)
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	3301      	adds	r3, #1
 80093c6:	4a03      	ldr	r2, [pc, #12]	; (80093d4 <vTaskSuspendAll+0x18>)
 80093c8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80093ca:	bf00      	nop
 80093cc:	46bd      	mov	sp, r7
 80093ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d2:	4770      	bx	lr
 80093d4:	20000ef8 	.word	0x20000ef8

080093d8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80093d8:	b580      	push	{r7, lr}
 80093da:	b084      	sub	sp, #16
 80093dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80093de:	2300      	movs	r3, #0
 80093e0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80093e2:	2300      	movs	r3, #0
 80093e4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80093e6:	4b42      	ldr	r3, [pc, #264]	; (80094f0 <xTaskResumeAll+0x118>)
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d10a      	bne.n	8009404 <xTaskResumeAll+0x2c>
	__asm volatile
 80093ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093f2:	f383 8811 	msr	BASEPRI, r3
 80093f6:	f3bf 8f6f 	isb	sy
 80093fa:	f3bf 8f4f 	dsb	sy
 80093fe:	603b      	str	r3, [r7, #0]
}
 8009400:	bf00      	nop
 8009402:	e7fe      	b.n	8009402 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009404:	f001 f916 	bl	800a634 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009408:	4b39      	ldr	r3, [pc, #228]	; (80094f0 <xTaskResumeAll+0x118>)
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	3b01      	subs	r3, #1
 800940e:	4a38      	ldr	r2, [pc, #224]	; (80094f0 <xTaskResumeAll+0x118>)
 8009410:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009412:	4b37      	ldr	r3, [pc, #220]	; (80094f0 <xTaskResumeAll+0x118>)
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	2b00      	cmp	r3, #0
 8009418:	d162      	bne.n	80094e0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800941a:	4b36      	ldr	r3, [pc, #216]	; (80094f4 <xTaskResumeAll+0x11c>)
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	2b00      	cmp	r3, #0
 8009420:	d05e      	beq.n	80094e0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009422:	e02f      	b.n	8009484 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009424:	4b34      	ldr	r3, [pc, #208]	; (80094f8 <xTaskResumeAll+0x120>)
 8009426:	68db      	ldr	r3, [r3, #12]
 8009428:	68db      	ldr	r3, [r3, #12]
 800942a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	3318      	adds	r3, #24
 8009430:	4618      	mov	r0, r3
 8009432:	f7ff f871 	bl	8008518 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	3304      	adds	r3, #4
 800943a:	4618      	mov	r0, r3
 800943c:	f7ff f86c 	bl	8008518 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009444:	4b2d      	ldr	r3, [pc, #180]	; (80094fc <xTaskResumeAll+0x124>)
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	429a      	cmp	r2, r3
 800944a:	d903      	bls.n	8009454 <xTaskResumeAll+0x7c>
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009450:	4a2a      	ldr	r2, [pc, #168]	; (80094fc <xTaskResumeAll+0x124>)
 8009452:	6013      	str	r3, [r2, #0]
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009458:	4613      	mov	r3, r2
 800945a:	009b      	lsls	r3, r3, #2
 800945c:	4413      	add	r3, r2
 800945e:	009b      	lsls	r3, r3, #2
 8009460:	4a27      	ldr	r2, [pc, #156]	; (8009500 <xTaskResumeAll+0x128>)
 8009462:	441a      	add	r2, r3
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	3304      	adds	r3, #4
 8009468:	4619      	mov	r1, r3
 800946a:	4610      	mov	r0, r2
 800946c:	f7fe fff7 	bl	800845e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009474:	4b23      	ldr	r3, [pc, #140]	; (8009504 <xTaskResumeAll+0x12c>)
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800947a:	429a      	cmp	r2, r3
 800947c:	d302      	bcc.n	8009484 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800947e:	4b22      	ldr	r3, [pc, #136]	; (8009508 <xTaskResumeAll+0x130>)
 8009480:	2201      	movs	r2, #1
 8009482:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009484:	4b1c      	ldr	r3, [pc, #112]	; (80094f8 <xTaskResumeAll+0x120>)
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	2b00      	cmp	r3, #0
 800948a:	d1cb      	bne.n	8009424 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	2b00      	cmp	r3, #0
 8009490:	d001      	beq.n	8009496 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009492:	f000 fb55 	bl	8009b40 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009496:	4b1d      	ldr	r3, [pc, #116]	; (800950c <xTaskResumeAll+0x134>)
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d010      	beq.n	80094c4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80094a2:	f000 f847 	bl	8009534 <xTaskIncrementTick>
 80094a6:	4603      	mov	r3, r0
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d002      	beq.n	80094b2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80094ac:	4b16      	ldr	r3, [pc, #88]	; (8009508 <xTaskResumeAll+0x130>)
 80094ae:	2201      	movs	r2, #1
 80094b0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	3b01      	subs	r3, #1
 80094b6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d1f1      	bne.n	80094a2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80094be:	4b13      	ldr	r3, [pc, #76]	; (800950c <xTaskResumeAll+0x134>)
 80094c0:	2200      	movs	r2, #0
 80094c2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80094c4:	4b10      	ldr	r3, [pc, #64]	; (8009508 <xTaskResumeAll+0x130>)
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d009      	beq.n	80094e0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80094cc:	2301      	movs	r3, #1
 80094ce:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80094d0:	4b0f      	ldr	r3, [pc, #60]	; (8009510 <xTaskResumeAll+0x138>)
 80094d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80094d6:	601a      	str	r2, [r3, #0]
 80094d8:	f3bf 8f4f 	dsb	sy
 80094dc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80094e0:	f001 f8d8 	bl	800a694 <vPortExitCritical>

	return xAlreadyYielded;
 80094e4:	68bb      	ldr	r3, [r7, #8]
}
 80094e6:	4618      	mov	r0, r3
 80094e8:	3710      	adds	r7, #16
 80094ea:	46bd      	mov	sp, r7
 80094ec:	bd80      	pop	{r7, pc}
 80094ee:	bf00      	nop
 80094f0:	20000ef8 	.word	0x20000ef8
 80094f4:	20000ed0 	.word	0x20000ed0
 80094f8:	20000e90 	.word	0x20000e90
 80094fc:	20000ed8 	.word	0x20000ed8
 8009500:	20000a00 	.word	0x20000a00
 8009504:	200009fc 	.word	0x200009fc
 8009508:	20000ee4 	.word	0x20000ee4
 800950c:	20000ee0 	.word	0x20000ee0
 8009510:	e000ed04 	.word	0xe000ed04

08009514 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009514:	b480      	push	{r7}
 8009516:	b083      	sub	sp, #12
 8009518:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800951a:	4b05      	ldr	r3, [pc, #20]	; (8009530 <xTaskGetTickCount+0x1c>)
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009520:	687b      	ldr	r3, [r7, #4]
}
 8009522:	4618      	mov	r0, r3
 8009524:	370c      	adds	r7, #12
 8009526:	46bd      	mov	sp, r7
 8009528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952c:	4770      	bx	lr
 800952e:	bf00      	nop
 8009530:	20000ed4 	.word	0x20000ed4

08009534 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009534:	b580      	push	{r7, lr}
 8009536:	b086      	sub	sp, #24
 8009538:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800953a:	2300      	movs	r3, #0
 800953c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800953e:	4b4f      	ldr	r3, [pc, #316]	; (800967c <xTaskIncrementTick+0x148>)
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	2b00      	cmp	r3, #0
 8009544:	f040 808f 	bne.w	8009666 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009548:	4b4d      	ldr	r3, [pc, #308]	; (8009680 <xTaskIncrementTick+0x14c>)
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	3301      	adds	r3, #1
 800954e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009550:	4a4b      	ldr	r2, [pc, #300]	; (8009680 <xTaskIncrementTick+0x14c>)
 8009552:	693b      	ldr	r3, [r7, #16]
 8009554:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009556:	693b      	ldr	r3, [r7, #16]
 8009558:	2b00      	cmp	r3, #0
 800955a:	d120      	bne.n	800959e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800955c:	4b49      	ldr	r3, [pc, #292]	; (8009684 <xTaskIncrementTick+0x150>)
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	2b00      	cmp	r3, #0
 8009564:	d00a      	beq.n	800957c <xTaskIncrementTick+0x48>
	__asm volatile
 8009566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800956a:	f383 8811 	msr	BASEPRI, r3
 800956e:	f3bf 8f6f 	isb	sy
 8009572:	f3bf 8f4f 	dsb	sy
 8009576:	603b      	str	r3, [r7, #0]
}
 8009578:	bf00      	nop
 800957a:	e7fe      	b.n	800957a <xTaskIncrementTick+0x46>
 800957c:	4b41      	ldr	r3, [pc, #260]	; (8009684 <xTaskIncrementTick+0x150>)
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	60fb      	str	r3, [r7, #12]
 8009582:	4b41      	ldr	r3, [pc, #260]	; (8009688 <xTaskIncrementTick+0x154>)
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	4a3f      	ldr	r2, [pc, #252]	; (8009684 <xTaskIncrementTick+0x150>)
 8009588:	6013      	str	r3, [r2, #0]
 800958a:	4a3f      	ldr	r2, [pc, #252]	; (8009688 <xTaskIncrementTick+0x154>)
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	6013      	str	r3, [r2, #0]
 8009590:	4b3e      	ldr	r3, [pc, #248]	; (800968c <xTaskIncrementTick+0x158>)
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	3301      	adds	r3, #1
 8009596:	4a3d      	ldr	r2, [pc, #244]	; (800968c <xTaskIncrementTick+0x158>)
 8009598:	6013      	str	r3, [r2, #0]
 800959a:	f000 fad1 	bl	8009b40 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800959e:	4b3c      	ldr	r3, [pc, #240]	; (8009690 <xTaskIncrementTick+0x15c>)
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	693a      	ldr	r2, [r7, #16]
 80095a4:	429a      	cmp	r2, r3
 80095a6:	d349      	bcc.n	800963c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80095a8:	4b36      	ldr	r3, [pc, #216]	; (8009684 <xTaskIncrementTick+0x150>)
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d104      	bne.n	80095bc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80095b2:	4b37      	ldr	r3, [pc, #220]	; (8009690 <xTaskIncrementTick+0x15c>)
 80095b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80095b8:	601a      	str	r2, [r3, #0]
					break;
 80095ba:	e03f      	b.n	800963c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80095bc:	4b31      	ldr	r3, [pc, #196]	; (8009684 <xTaskIncrementTick+0x150>)
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	68db      	ldr	r3, [r3, #12]
 80095c2:	68db      	ldr	r3, [r3, #12]
 80095c4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80095c6:	68bb      	ldr	r3, [r7, #8]
 80095c8:	685b      	ldr	r3, [r3, #4]
 80095ca:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80095cc:	693a      	ldr	r2, [r7, #16]
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	429a      	cmp	r2, r3
 80095d2:	d203      	bcs.n	80095dc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80095d4:	4a2e      	ldr	r2, [pc, #184]	; (8009690 <xTaskIncrementTick+0x15c>)
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80095da:	e02f      	b.n	800963c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80095dc:	68bb      	ldr	r3, [r7, #8]
 80095de:	3304      	adds	r3, #4
 80095e0:	4618      	mov	r0, r3
 80095e2:	f7fe ff99 	bl	8008518 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80095e6:	68bb      	ldr	r3, [r7, #8]
 80095e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d004      	beq.n	80095f8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80095ee:	68bb      	ldr	r3, [r7, #8]
 80095f0:	3318      	adds	r3, #24
 80095f2:	4618      	mov	r0, r3
 80095f4:	f7fe ff90 	bl	8008518 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80095f8:	68bb      	ldr	r3, [r7, #8]
 80095fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095fc:	4b25      	ldr	r3, [pc, #148]	; (8009694 <xTaskIncrementTick+0x160>)
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	429a      	cmp	r2, r3
 8009602:	d903      	bls.n	800960c <xTaskIncrementTick+0xd8>
 8009604:	68bb      	ldr	r3, [r7, #8]
 8009606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009608:	4a22      	ldr	r2, [pc, #136]	; (8009694 <xTaskIncrementTick+0x160>)
 800960a:	6013      	str	r3, [r2, #0]
 800960c:	68bb      	ldr	r3, [r7, #8]
 800960e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009610:	4613      	mov	r3, r2
 8009612:	009b      	lsls	r3, r3, #2
 8009614:	4413      	add	r3, r2
 8009616:	009b      	lsls	r3, r3, #2
 8009618:	4a1f      	ldr	r2, [pc, #124]	; (8009698 <xTaskIncrementTick+0x164>)
 800961a:	441a      	add	r2, r3
 800961c:	68bb      	ldr	r3, [r7, #8]
 800961e:	3304      	adds	r3, #4
 8009620:	4619      	mov	r1, r3
 8009622:	4610      	mov	r0, r2
 8009624:	f7fe ff1b 	bl	800845e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009628:	68bb      	ldr	r3, [r7, #8]
 800962a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800962c:	4b1b      	ldr	r3, [pc, #108]	; (800969c <xTaskIncrementTick+0x168>)
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009632:	429a      	cmp	r2, r3
 8009634:	d3b8      	bcc.n	80095a8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009636:	2301      	movs	r3, #1
 8009638:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800963a:	e7b5      	b.n	80095a8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800963c:	4b17      	ldr	r3, [pc, #92]	; (800969c <xTaskIncrementTick+0x168>)
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009642:	4915      	ldr	r1, [pc, #84]	; (8009698 <xTaskIncrementTick+0x164>)
 8009644:	4613      	mov	r3, r2
 8009646:	009b      	lsls	r3, r3, #2
 8009648:	4413      	add	r3, r2
 800964a:	009b      	lsls	r3, r3, #2
 800964c:	440b      	add	r3, r1
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	2b01      	cmp	r3, #1
 8009652:	d901      	bls.n	8009658 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009654:	2301      	movs	r3, #1
 8009656:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009658:	4b11      	ldr	r3, [pc, #68]	; (80096a0 <xTaskIncrementTick+0x16c>)
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	2b00      	cmp	r3, #0
 800965e:	d007      	beq.n	8009670 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009660:	2301      	movs	r3, #1
 8009662:	617b      	str	r3, [r7, #20]
 8009664:	e004      	b.n	8009670 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009666:	4b0f      	ldr	r3, [pc, #60]	; (80096a4 <xTaskIncrementTick+0x170>)
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	3301      	adds	r3, #1
 800966c:	4a0d      	ldr	r2, [pc, #52]	; (80096a4 <xTaskIncrementTick+0x170>)
 800966e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009670:	697b      	ldr	r3, [r7, #20]
}
 8009672:	4618      	mov	r0, r3
 8009674:	3718      	adds	r7, #24
 8009676:	46bd      	mov	sp, r7
 8009678:	bd80      	pop	{r7, pc}
 800967a:	bf00      	nop
 800967c:	20000ef8 	.word	0x20000ef8
 8009680:	20000ed4 	.word	0x20000ed4
 8009684:	20000e88 	.word	0x20000e88
 8009688:	20000e8c 	.word	0x20000e8c
 800968c:	20000ee8 	.word	0x20000ee8
 8009690:	20000ef0 	.word	0x20000ef0
 8009694:	20000ed8 	.word	0x20000ed8
 8009698:	20000a00 	.word	0x20000a00
 800969c:	200009fc 	.word	0x200009fc
 80096a0:	20000ee4 	.word	0x20000ee4
 80096a4:	20000ee0 	.word	0x20000ee0

080096a8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80096a8:	b480      	push	{r7}
 80096aa:	b085      	sub	sp, #20
 80096ac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80096ae:	4b28      	ldr	r3, [pc, #160]	; (8009750 <vTaskSwitchContext+0xa8>)
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d003      	beq.n	80096be <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80096b6:	4b27      	ldr	r3, [pc, #156]	; (8009754 <vTaskSwitchContext+0xac>)
 80096b8:	2201      	movs	r2, #1
 80096ba:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80096bc:	e041      	b.n	8009742 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80096be:	4b25      	ldr	r3, [pc, #148]	; (8009754 <vTaskSwitchContext+0xac>)
 80096c0:	2200      	movs	r2, #0
 80096c2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80096c4:	4b24      	ldr	r3, [pc, #144]	; (8009758 <vTaskSwitchContext+0xb0>)
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	60fb      	str	r3, [r7, #12]
 80096ca:	e010      	b.n	80096ee <vTaskSwitchContext+0x46>
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d10a      	bne.n	80096e8 <vTaskSwitchContext+0x40>
	__asm volatile
 80096d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096d6:	f383 8811 	msr	BASEPRI, r3
 80096da:	f3bf 8f6f 	isb	sy
 80096de:	f3bf 8f4f 	dsb	sy
 80096e2:	607b      	str	r3, [r7, #4]
}
 80096e4:	bf00      	nop
 80096e6:	e7fe      	b.n	80096e6 <vTaskSwitchContext+0x3e>
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	3b01      	subs	r3, #1
 80096ec:	60fb      	str	r3, [r7, #12]
 80096ee:	491b      	ldr	r1, [pc, #108]	; (800975c <vTaskSwitchContext+0xb4>)
 80096f0:	68fa      	ldr	r2, [r7, #12]
 80096f2:	4613      	mov	r3, r2
 80096f4:	009b      	lsls	r3, r3, #2
 80096f6:	4413      	add	r3, r2
 80096f8:	009b      	lsls	r3, r3, #2
 80096fa:	440b      	add	r3, r1
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d0e4      	beq.n	80096cc <vTaskSwitchContext+0x24>
 8009702:	68fa      	ldr	r2, [r7, #12]
 8009704:	4613      	mov	r3, r2
 8009706:	009b      	lsls	r3, r3, #2
 8009708:	4413      	add	r3, r2
 800970a:	009b      	lsls	r3, r3, #2
 800970c:	4a13      	ldr	r2, [pc, #76]	; (800975c <vTaskSwitchContext+0xb4>)
 800970e:	4413      	add	r3, r2
 8009710:	60bb      	str	r3, [r7, #8]
 8009712:	68bb      	ldr	r3, [r7, #8]
 8009714:	685b      	ldr	r3, [r3, #4]
 8009716:	685a      	ldr	r2, [r3, #4]
 8009718:	68bb      	ldr	r3, [r7, #8]
 800971a:	605a      	str	r2, [r3, #4]
 800971c:	68bb      	ldr	r3, [r7, #8]
 800971e:	685a      	ldr	r2, [r3, #4]
 8009720:	68bb      	ldr	r3, [r7, #8]
 8009722:	3308      	adds	r3, #8
 8009724:	429a      	cmp	r2, r3
 8009726:	d104      	bne.n	8009732 <vTaskSwitchContext+0x8a>
 8009728:	68bb      	ldr	r3, [r7, #8]
 800972a:	685b      	ldr	r3, [r3, #4]
 800972c:	685a      	ldr	r2, [r3, #4]
 800972e:	68bb      	ldr	r3, [r7, #8]
 8009730:	605a      	str	r2, [r3, #4]
 8009732:	68bb      	ldr	r3, [r7, #8]
 8009734:	685b      	ldr	r3, [r3, #4]
 8009736:	68db      	ldr	r3, [r3, #12]
 8009738:	4a09      	ldr	r2, [pc, #36]	; (8009760 <vTaskSwitchContext+0xb8>)
 800973a:	6013      	str	r3, [r2, #0]
 800973c:	4a06      	ldr	r2, [pc, #24]	; (8009758 <vTaskSwitchContext+0xb0>)
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	6013      	str	r3, [r2, #0]
}
 8009742:	bf00      	nop
 8009744:	3714      	adds	r7, #20
 8009746:	46bd      	mov	sp, r7
 8009748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974c:	4770      	bx	lr
 800974e:	bf00      	nop
 8009750:	20000ef8 	.word	0x20000ef8
 8009754:	20000ee4 	.word	0x20000ee4
 8009758:	20000ed8 	.word	0x20000ed8
 800975c:	20000a00 	.word	0x20000a00
 8009760:	200009fc 	.word	0x200009fc

08009764 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009764:	b580      	push	{r7, lr}
 8009766:	b084      	sub	sp, #16
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
 800976c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	2b00      	cmp	r3, #0
 8009772:	d10a      	bne.n	800978a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009778:	f383 8811 	msr	BASEPRI, r3
 800977c:	f3bf 8f6f 	isb	sy
 8009780:	f3bf 8f4f 	dsb	sy
 8009784:	60fb      	str	r3, [r7, #12]
}
 8009786:	bf00      	nop
 8009788:	e7fe      	b.n	8009788 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800978a:	4b07      	ldr	r3, [pc, #28]	; (80097a8 <vTaskPlaceOnEventList+0x44>)
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	3318      	adds	r3, #24
 8009790:	4619      	mov	r1, r3
 8009792:	6878      	ldr	r0, [r7, #4]
 8009794:	f7fe fe87 	bl	80084a6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009798:	2101      	movs	r1, #1
 800979a:	6838      	ldr	r0, [r7, #0]
 800979c:	f000 fa7c 	bl	8009c98 <prvAddCurrentTaskToDelayedList>
}
 80097a0:	bf00      	nop
 80097a2:	3710      	adds	r7, #16
 80097a4:	46bd      	mov	sp, r7
 80097a6:	bd80      	pop	{r7, pc}
 80097a8:	200009fc 	.word	0x200009fc

080097ac <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80097ac:	b580      	push	{r7, lr}
 80097ae:	b086      	sub	sp, #24
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	60f8      	str	r0, [r7, #12]
 80097b4:	60b9      	str	r1, [r7, #8]
 80097b6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d10a      	bne.n	80097d4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80097be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097c2:	f383 8811 	msr	BASEPRI, r3
 80097c6:	f3bf 8f6f 	isb	sy
 80097ca:	f3bf 8f4f 	dsb	sy
 80097ce:	617b      	str	r3, [r7, #20]
}
 80097d0:	bf00      	nop
 80097d2:	e7fe      	b.n	80097d2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80097d4:	4b0a      	ldr	r3, [pc, #40]	; (8009800 <vTaskPlaceOnEventListRestricted+0x54>)
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	3318      	adds	r3, #24
 80097da:	4619      	mov	r1, r3
 80097dc:	68f8      	ldr	r0, [r7, #12]
 80097de:	f7fe fe3e 	bl	800845e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d002      	beq.n	80097ee <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80097e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80097ec:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80097ee:	6879      	ldr	r1, [r7, #4]
 80097f0:	68b8      	ldr	r0, [r7, #8]
 80097f2:	f000 fa51 	bl	8009c98 <prvAddCurrentTaskToDelayedList>
	}
 80097f6:	bf00      	nop
 80097f8:	3718      	adds	r7, #24
 80097fa:	46bd      	mov	sp, r7
 80097fc:	bd80      	pop	{r7, pc}
 80097fe:	bf00      	nop
 8009800:	200009fc 	.word	0x200009fc

08009804 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009804:	b580      	push	{r7, lr}
 8009806:	b086      	sub	sp, #24
 8009808:	af00      	add	r7, sp, #0
 800980a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	68db      	ldr	r3, [r3, #12]
 8009810:	68db      	ldr	r3, [r3, #12]
 8009812:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009814:	693b      	ldr	r3, [r7, #16]
 8009816:	2b00      	cmp	r3, #0
 8009818:	d10a      	bne.n	8009830 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800981a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800981e:	f383 8811 	msr	BASEPRI, r3
 8009822:	f3bf 8f6f 	isb	sy
 8009826:	f3bf 8f4f 	dsb	sy
 800982a:	60fb      	str	r3, [r7, #12]
}
 800982c:	bf00      	nop
 800982e:	e7fe      	b.n	800982e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009830:	693b      	ldr	r3, [r7, #16]
 8009832:	3318      	adds	r3, #24
 8009834:	4618      	mov	r0, r3
 8009836:	f7fe fe6f 	bl	8008518 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800983a:	4b1e      	ldr	r3, [pc, #120]	; (80098b4 <xTaskRemoveFromEventList+0xb0>)
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	2b00      	cmp	r3, #0
 8009840:	d11d      	bne.n	800987e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009842:	693b      	ldr	r3, [r7, #16]
 8009844:	3304      	adds	r3, #4
 8009846:	4618      	mov	r0, r3
 8009848:	f7fe fe66 	bl	8008518 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800984c:	693b      	ldr	r3, [r7, #16]
 800984e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009850:	4b19      	ldr	r3, [pc, #100]	; (80098b8 <xTaskRemoveFromEventList+0xb4>)
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	429a      	cmp	r2, r3
 8009856:	d903      	bls.n	8009860 <xTaskRemoveFromEventList+0x5c>
 8009858:	693b      	ldr	r3, [r7, #16]
 800985a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800985c:	4a16      	ldr	r2, [pc, #88]	; (80098b8 <xTaskRemoveFromEventList+0xb4>)
 800985e:	6013      	str	r3, [r2, #0]
 8009860:	693b      	ldr	r3, [r7, #16]
 8009862:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009864:	4613      	mov	r3, r2
 8009866:	009b      	lsls	r3, r3, #2
 8009868:	4413      	add	r3, r2
 800986a:	009b      	lsls	r3, r3, #2
 800986c:	4a13      	ldr	r2, [pc, #76]	; (80098bc <xTaskRemoveFromEventList+0xb8>)
 800986e:	441a      	add	r2, r3
 8009870:	693b      	ldr	r3, [r7, #16]
 8009872:	3304      	adds	r3, #4
 8009874:	4619      	mov	r1, r3
 8009876:	4610      	mov	r0, r2
 8009878:	f7fe fdf1 	bl	800845e <vListInsertEnd>
 800987c:	e005      	b.n	800988a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800987e:	693b      	ldr	r3, [r7, #16]
 8009880:	3318      	adds	r3, #24
 8009882:	4619      	mov	r1, r3
 8009884:	480e      	ldr	r0, [pc, #56]	; (80098c0 <xTaskRemoveFromEventList+0xbc>)
 8009886:	f7fe fdea 	bl	800845e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800988a:	693b      	ldr	r3, [r7, #16]
 800988c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800988e:	4b0d      	ldr	r3, [pc, #52]	; (80098c4 <xTaskRemoveFromEventList+0xc0>)
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009894:	429a      	cmp	r2, r3
 8009896:	d905      	bls.n	80098a4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009898:	2301      	movs	r3, #1
 800989a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800989c:	4b0a      	ldr	r3, [pc, #40]	; (80098c8 <xTaskRemoveFromEventList+0xc4>)
 800989e:	2201      	movs	r2, #1
 80098a0:	601a      	str	r2, [r3, #0]
 80098a2:	e001      	b.n	80098a8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80098a4:	2300      	movs	r3, #0
 80098a6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80098a8:	697b      	ldr	r3, [r7, #20]
}
 80098aa:	4618      	mov	r0, r3
 80098ac:	3718      	adds	r7, #24
 80098ae:	46bd      	mov	sp, r7
 80098b0:	bd80      	pop	{r7, pc}
 80098b2:	bf00      	nop
 80098b4:	20000ef8 	.word	0x20000ef8
 80098b8:	20000ed8 	.word	0x20000ed8
 80098bc:	20000a00 	.word	0x20000a00
 80098c0:	20000e90 	.word	0x20000e90
 80098c4:	200009fc 	.word	0x200009fc
 80098c8:	20000ee4 	.word	0x20000ee4

080098cc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80098cc:	b480      	push	{r7}
 80098ce:	b083      	sub	sp, #12
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80098d4:	4b06      	ldr	r3, [pc, #24]	; (80098f0 <vTaskInternalSetTimeOutState+0x24>)
 80098d6:	681a      	ldr	r2, [r3, #0]
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80098dc:	4b05      	ldr	r3, [pc, #20]	; (80098f4 <vTaskInternalSetTimeOutState+0x28>)
 80098de:	681a      	ldr	r2, [r3, #0]
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	605a      	str	r2, [r3, #4]
}
 80098e4:	bf00      	nop
 80098e6:	370c      	adds	r7, #12
 80098e8:	46bd      	mov	sp, r7
 80098ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ee:	4770      	bx	lr
 80098f0:	20000ee8 	.word	0x20000ee8
 80098f4:	20000ed4 	.word	0x20000ed4

080098f8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80098f8:	b580      	push	{r7, lr}
 80098fa:	b088      	sub	sp, #32
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]
 8009900:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	2b00      	cmp	r3, #0
 8009906:	d10a      	bne.n	800991e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800990c:	f383 8811 	msr	BASEPRI, r3
 8009910:	f3bf 8f6f 	isb	sy
 8009914:	f3bf 8f4f 	dsb	sy
 8009918:	613b      	str	r3, [r7, #16]
}
 800991a:	bf00      	nop
 800991c:	e7fe      	b.n	800991c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800991e:	683b      	ldr	r3, [r7, #0]
 8009920:	2b00      	cmp	r3, #0
 8009922:	d10a      	bne.n	800993a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009928:	f383 8811 	msr	BASEPRI, r3
 800992c:	f3bf 8f6f 	isb	sy
 8009930:	f3bf 8f4f 	dsb	sy
 8009934:	60fb      	str	r3, [r7, #12]
}
 8009936:	bf00      	nop
 8009938:	e7fe      	b.n	8009938 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800993a:	f000 fe7b 	bl	800a634 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800993e:	4b1d      	ldr	r3, [pc, #116]	; (80099b4 <xTaskCheckForTimeOut+0xbc>)
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	685b      	ldr	r3, [r3, #4]
 8009948:	69ba      	ldr	r2, [r7, #24]
 800994a:	1ad3      	subs	r3, r2, r3
 800994c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800994e:	683b      	ldr	r3, [r7, #0]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009956:	d102      	bne.n	800995e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009958:	2300      	movs	r3, #0
 800995a:	61fb      	str	r3, [r7, #28]
 800995c:	e023      	b.n	80099a6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681a      	ldr	r2, [r3, #0]
 8009962:	4b15      	ldr	r3, [pc, #84]	; (80099b8 <xTaskCheckForTimeOut+0xc0>)
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	429a      	cmp	r2, r3
 8009968:	d007      	beq.n	800997a <xTaskCheckForTimeOut+0x82>
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	685b      	ldr	r3, [r3, #4]
 800996e:	69ba      	ldr	r2, [r7, #24]
 8009970:	429a      	cmp	r2, r3
 8009972:	d302      	bcc.n	800997a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009974:	2301      	movs	r3, #1
 8009976:	61fb      	str	r3, [r7, #28]
 8009978:	e015      	b.n	80099a6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800997a:	683b      	ldr	r3, [r7, #0]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	697a      	ldr	r2, [r7, #20]
 8009980:	429a      	cmp	r2, r3
 8009982:	d20b      	bcs.n	800999c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009984:	683b      	ldr	r3, [r7, #0]
 8009986:	681a      	ldr	r2, [r3, #0]
 8009988:	697b      	ldr	r3, [r7, #20]
 800998a:	1ad2      	subs	r2, r2, r3
 800998c:	683b      	ldr	r3, [r7, #0]
 800998e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009990:	6878      	ldr	r0, [r7, #4]
 8009992:	f7ff ff9b 	bl	80098cc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009996:	2300      	movs	r3, #0
 8009998:	61fb      	str	r3, [r7, #28]
 800999a:	e004      	b.n	80099a6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800999c:	683b      	ldr	r3, [r7, #0]
 800999e:	2200      	movs	r2, #0
 80099a0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80099a2:	2301      	movs	r3, #1
 80099a4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80099a6:	f000 fe75 	bl	800a694 <vPortExitCritical>

	return xReturn;
 80099aa:	69fb      	ldr	r3, [r7, #28]
}
 80099ac:	4618      	mov	r0, r3
 80099ae:	3720      	adds	r7, #32
 80099b0:	46bd      	mov	sp, r7
 80099b2:	bd80      	pop	{r7, pc}
 80099b4:	20000ed4 	.word	0x20000ed4
 80099b8:	20000ee8 	.word	0x20000ee8

080099bc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80099bc:	b480      	push	{r7}
 80099be:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80099c0:	4b03      	ldr	r3, [pc, #12]	; (80099d0 <vTaskMissedYield+0x14>)
 80099c2:	2201      	movs	r2, #1
 80099c4:	601a      	str	r2, [r3, #0]
}
 80099c6:	bf00      	nop
 80099c8:	46bd      	mov	sp, r7
 80099ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ce:	4770      	bx	lr
 80099d0:	20000ee4 	.word	0x20000ee4

080099d4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80099d4:	b580      	push	{r7, lr}
 80099d6:	b082      	sub	sp, #8
 80099d8:	af00      	add	r7, sp, #0
 80099da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80099dc:	f000 f852 	bl	8009a84 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80099e0:	4b06      	ldr	r3, [pc, #24]	; (80099fc <prvIdleTask+0x28>)
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	2b01      	cmp	r3, #1
 80099e6:	d9f9      	bls.n	80099dc <prvIdleTask+0x8>
			{
				taskYIELD();
 80099e8:	4b05      	ldr	r3, [pc, #20]	; (8009a00 <prvIdleTask+0x2c>)
 80099ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80099ee:	601a      	str	r2, [r3, #0]
 80099f0:	f3bf 8f4f 	dsb	sy
 80099f4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80099f8:	e7f0      	b.n	80099dc <prvIdleTask+0x8>
 80099fa:	bf00      	nop
 80099fc:	20000a00 	.word	0x20000a00
 8009a00:	e000ed04 	.word	0xe000ed04

08009a04 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009a04:	b580      	push	{r7, lr}
 8009a06:	b082      	sub	sp, #8
 8009a08:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009a0a:	2300      	movs	r3, #0
 8009a0c:	607b      	str	r3, [r7, #4]
 8009a0e:	e00c      	b.n	8009a2a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009a10:	687a      	ldr	r2, [r7, #4]
 8009a12:	4613      	mov	r3, r2
 8009a14:	009b      	lsls	r3, r3, #2
 8009a16:	4413      	add	r3, r2
 8009a18:	009b      	lsls	r3, r3, #2
 8009a1a:	4a12      	ldr	r2, [pc, #72]	; (8009a64 <prvInitialiseTaskLists+0x60>)
 8009a1c:	4413      	add	r3, r2
 8009a1e:	4618      	mov	r0, r3
 8009a20:	f7fe fcf0 	bl	8008404 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	3301      	adds	r3, #1
 8009a28:	607b      	str	r3, [r7, #4]
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	2b37      	cmp	r3, #55	; 0x37
 8009a2e:	d9ef      	bls.n	8009a10 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009a30:	480d      	ldr	r0, [pc, #52]	; (8009a68 <prvInitialiseTaskLists+0x64>)
 8009a32:	f7fe fce7 	bl	8008404 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009a36:	480d      	ldr	r0, [pc, #52]	; (8009a6c <prvInitialiseTaskLists+0x68>)
 8009a38:	f7fe fce4 	bl	8008404 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009a3c:	480c      	ldr	r0, [pc, #48]	; (8009a70 <prvInitialiseTaskLists+0x6c>)
 8009a3e:	f7fe fce1 	bl	8008404 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009a42:	480c      	ldr	r0, [pc, #48]	; (8009a74 <prvInitialiseTaskLists+0x70>)
 8009a44:	f7fe fcde 	bl	8008404 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009a48:	480b      	ldr	r0, [pc, #44]	; (8009a78 <prvInitialiseTaskLists+0x74>)
 8009a4a:	f7fe fcdb 	bl	8008404 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009a4e:	4b0b      	ldr	r3, [pc, #44]	; (8009a7c <prvInitialiseTaskLists+0x78>)
 8009a50:	4a05      	ldr	r2, [pc, #20]	; (8009a68 <prvInitialiseTaskLists+0x64>)
 8009a52:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009a54:	4b0a      	ldr	r3, [pc, #40]	; (8009a80 <prvInitialiseTaskLists+0x7c>)
 8009a56:	4a05      	ldr	r2, [pc, #20]	; (8009a6c <prvInitialiseTaskLists+0x68>)
 8009a58:	601a      	str	r2, [r3, #0]
}
 8009a5a:	bf00      	nop
 8009a5c:	3708      	adds	r7, #8
 8009a5e:	46bd      	mov	sp, r7
 8009a60:	bd80      	pop	{r7, pc}
 8009a62:	bf00      	nop
 8009a64:	20000a00 	.word	0x20000a00
 8009a68:	20000e60 	.word	0x20000e60
 8009a6c:	20000e74 	.word	0x20000e74
 8009a70:	20000e90 	.word	0x20000e90
 8009a74:	20000ea4 	.word	0x20000ea4
 8009a78:	20000ebc 	.word	0x20000ebc
 8009a7c:	20000e88 	.word	0x20000e88
 8009a80:	20000e8c 	.word	0x20000e8c

08009a84 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009a84:	b580      	push	{r7, lr}
 8009a86:	b082      	sub	sp, #8
 8009a88:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009a8a:	e019      	b.n	8009ac0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009a8c:	f000 fdd2 	bl	800a634 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a90:	4b10      	ldr	r3, [pc, #64]	; (8009ad4 <prvCheckTasksWaitingTermination+0x50>)
 8009a92:	68db      	ldr	r3, [r3, #12]
 8009a94:	68db      	ldr	r3, [r3, #12]
 8009a96:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	3304      	adds	r3, #4
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	f7fe fd3b 	bl	8008518 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009aa2:	4b0d      	ldr	r3, [pc, #52]	; (8009ad8 <prvCheckTasksWaitingTermination+0x54>)
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	3b01      	subs	r3, #1
 8009aa8:	4a0b      	ldr	r2, [pc, #44]	; (8009ad8 <prvCheckTasksWaitingTermination+0x54>)
 8009aaa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009aac:	4b0b      	ldr	r3, [pc, #44]	; (8009adc <prvCheckTasksWaitingTermination+0x58>)
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	3b01      	subs	r3, #1
 8009ab2:	4a0a      	ldr	r2, [pc, #40]	; (8009adc <prvCheckTasksWaitingTermination+0x58>)
 8009ab4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009ab6:	f000 fded 	bl	800a694 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009aba:	6878      	ldr	r0, [r7, #4]
 8009abc:	f000 f810 	bl	8009ae0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009ac0:	4b06      	ldr	r3, [pc, #24]	; (8009adc <prvCheckTasksWaitingTermination+0x58>)
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d1e1      	bne.n	8009a8c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009ac8:	bf00      	nop
 8009aca:	bf00      	nop
 8009acc:	3708      	adds	r7, #8
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	bd80      	pop	{r7, pc}
 8009ad2:	bf00      	nop
 8009ad4:	20000ea4 	.word	0x20000ea4
 8009ad8:	20000ed0 	.word	0x20000ed0
 8009adc:	20000eb8 	.word	0x20000eb8

08009ae0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	b084      	sub	sp, #16
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d108      	bne.n	8009b04 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009af6:	4618      	mov	r0, r3
 8009af8:	f000 ff8a 	bl	800aa10 <vPortFree>
				vPortFree( pxTCB );
 8009afc:	6878      	ldr	r0, [r7, #4]
 8009afe:	f000 ff87 	bl	800aa10 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009b02:	e018      	b.n	8009b36 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009b0a:	2b01      	cmp	r3, #1
 8009b0c:	d103      	bne.n	8009b16 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009b0e:	6878      	ldr	r0, [r7, #4]
 8009b10:	f000 ff7e 	bl	800aa10 <vPortFree>
	}
 8009b14:	e00f      	b.n	8009b36 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009b1c:	2b02      	cmp	r3, #2
 8009b1e:	d00a      	beq.n	8009b36 <prvDeleteTCB+0x56>
	__asm volatile
 8009b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b24:	f383 8811 	msr	BASEPRI, r3
 8009b28:	f3bf 8f6f 	isb	sy
 8009b2c:	f3bf 8f4f 	dsb	sy
 8009b30:	60fb      	str	r3, [r7, #12]
}
 8009b32:	bf00      	nop
 8009b34:	e7fe      	b.n	8009b34 <prvDeleteTCB+0x54>
	}
 8009b36:	bf00      	nop
 8009b38:	3710      	adds	r7, #16
 8009b3a:	46bd      	mov	sp, r7
 8009b3c:	bd80      	pop	{r7, pc}
	...

08009b40 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009b40:	b480      	push	{r7}
 8009b42:	b083      	sub	sp, #12
 8009b44:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009b46:	4b0c      	ldr	r3, [pc, #48]	; (8009b78 <prvResetNextTaskUnblockTime+0x38>)
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d104      	bne.n	8009b5a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009b50:	4b0a      	ldr	r3, [pc, #40]	; (8009b7c <prvResetNextTaskUnblockTime+0x3c>)
 8009b52:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009b56:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009b58:	e008      	b.n	8009b6c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b5a:	4b07      	ldr	r3, [pc, #28]	; (8009b78 <prvResetNextTaskUnblockTime+0x38>)
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	68db      	ldr	r3, [r3, #12]
 8009b60:	68db      	ldr	r3, [r3, #12]
 8009b62:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	685b      	ldr	r3, [r3, #4]
 8009b68:	4a04      	ldr	r2, [pc, #16]	; (8009b7c <prvResetNextTaskUnblockTime+0x3c>)
 8009b6a:	6013      	str	r3, [r2, #0]
}
 8009b6c:	bf00      	nop
 8009b6e:	370c      	adds	r7, #12
 8009b70:	46bd      	mov	sp, r7
 8009b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b76:	4770      	bx	lr
 8009b78:	20000e88 	.word	0x20000e88
 8009b7c:	20000ef0 	.word	0x20000ef0

08009b80 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009b80:	b480      	push	{r7}
 8009b82:	b083      	sub	sp, #12
 8009b84:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009b86:	4b0b      	ldr	r3, [pc, #44]	; (8009bb4 <xTaskGetSchedulerState+0x34>)
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d102      	bne.n	8009b94 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009b8e:	2301      	movs	r3, #1
 8009b90:	607b      	str	r3, [r7, #4]
 8009b92:	e008      	b.n	8009ba6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009b94:	4b08      	ldr	r3, [pc, #32]	; (8009bb8 <xTaskGetSchedulerState+0x38>)
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d102      	bne.n	8009ba2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009b9c:	2302      	movs	r3, #2
 8009b9e:	607b      	str	r3, [r7, #4]
 8009ba0:	e001      	b.n	8009ba6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009ba2:	2300      	movs	r3, #0
 8009ba4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009ba6:	687b      	ldr	r3, [r7, #4]
	}
 8009ba8:	4618      	mov	r0, r3
 8009baa:	370c      	adds	r7, #12
 8009bac:	46bd      	mov	sp, r7
 8009bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb2:	4770      	bx	lr
 8009bb4:	20000edc 	.word	0x20000edc
 8009bb8:	20000ef8 	.word	0x20000ef8

08009bbc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009bbc:	b580      	push	{r7, lr}
 8009bbe:	b086      	sub	sp, #24
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009bc8:	2300      	movs	r3, #0
 8009bca:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d056      	beq.n	8009c80 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009bd2:	4b2e      	ldr	r3, [pc, #184]	; (8009c8c <xTaskPriorityDisinherit+0xd0>)
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	693a      	ldr	r2, [r7, #16]
 8009bd8:	429a      	cmp	r2, r3
 8009bda:	d00a      	beq.n	8009bf2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009be0:	f383 8811 	msr	BASEPRI, r3
 8009be4:	f3bf 8f6f 	isb	sy
 8009be8:	f3bf 8f4f 	dsb	sy
 8009bec:	60fb      	str	r3, [r7, #12]
}
 8009bee:	bf00      	nop
 8009bf0:	e7fe      	b.n	8009bf0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009bf2:	693b      	ldr	r3, [r7, #16]
 8009bf4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d10a      	bne.n	8009c10 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bfe:	f383 8811 	msr	BASEPRI, r3
 8009c02:	f3bf 8f6f 	isb	sy
 8009c06:	f3bf 8f4f 	dsb	sy
 8009c0a:	60bb      	str	r3, [r7, #8]
}
 8009c0c:	bf00      	nop
 8009c0e:	e7fe      	b.n	8009c0e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009c10:	693b      	ldr	r3, [r7, #16]
 8009c12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c14:	1e5a      	subs	r2, r3, #1
 8009c16:	693b      	ldr	r3, [r7, #16]
 8009c18:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009c1a:	693b      	ldr	r3, [r7, #16]
 8009c1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c1e:	693b      	ldr	r3, [r7, #16]
 8009c20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c22:	429a      	cmp	r2, r3
 8009c24:	d02c      	beq.n	8009c80 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009c26:	693b      	ldr	r3, [r7, #16]
 8009c28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d128      	bne.n	8009c80 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009c2e:	693b      	ldr	r3, [r7, #16]
 8009c30:	3304      	adds	r3, #4
 8009c32:	4618      	mov	r0, r3
 8009c34:	f7fe fc70 	bl	8008518 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009c38:	693b      	ldr	r3, [r7, #16]
 8009c3a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009c3c:	693b      	ldr	r3, [r7, #16]
 8009c3e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009c40:	693b      	ldr	r3, [r7, #16]
 8009c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c44:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009c48:	693b      	ldr	r3, [r7, #16]
 8009c4a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009c4c:	693b      	ldr	r3, [r7, #16]
 8009c4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c50:	4b0f      	ldr	r3, [pc, #60]	; (8009c90 <xTaskPriorityDisinherit+0xd4>)
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	429a      	cmp	r2, r3
 8009c56:	d903      	bls.n	8009c60 <xTaskPriorityDisinherit+0xa4>
 8009c58:	693b      	ldr	r3, [r7, #16]
 8009c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c5c:	4a0c      	ldr	r2, [pc, #48]	; (8009c90 <xTaskPriorityDisinherit+0xd4>)
 8009c5e:	6013      	str	r3, [r2, #0]
 8009c60:	693b      	ldr	r3, [r7, #16]
 8009c62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c64:	4613      	mov	r3, r2
 8009c66:	009b      	lsls	r3, r3, #2
 8009c68:	4413      	add	r3, r2
 8009c6a:	009b      	lsls	r3, r3, #2
 8009c6c:	4a09      	ldr	r2, [pc, #36]	; (8009c94 <xTaskPriorityDisinherit+0xd8>)
 8009c6e:	441a      	add	r2, r3
 8009c70:	693b      	ldr	r3, [r7, #16]
 8009c72:	3304      	adds	r3, #4
 8009c74:	4619      	mov	r1, r3
 8009c76:	4610      	mov	r0, r2
 8009c78:	f7fe fbf1 	bl	800845e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009c7c:	2301      	movs	r3, #1
 8009c7e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009c80:	697b      	ldr	r3, [r7, #20]
	}
 8009c82:	4618      	mov	r0, r3
 8009c84:	3718      	adds	r7, #24
 8009c86:	46bd      	mov	sp, r7
 8009c88:	bd80      	pop	{r7, pc}
 8009c8a:	bf00      	nop
 8009c8c:	200009fc 	.word	0x200009fc
 8009c90:	20000ed8 	.word	0x20000ed8
 8009c94:	20000a00 	.word	0x20000a00

08009c98 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009c98:	b580      	push	{r7, lr}
 8009c9a:	b084      	sub	sp, #16
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	6078      	str	r0, [r7, #4]
 8009ca0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009ca2:	4b21      	ldr	r3, [pc, #132]	; (8009d28 <prvAddCurrentTaskToDelayedList+0x90>)
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009ca8:	4b20      	ldr	r3, [pc, #128]	; (8009d2c <prvAddCurrentTaskToDelayedList+0x94>)
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	3304      	adds	r3, #4
 8009cae:	4618      	mov	r0, r3
 8009cb0:	f7fe fc32 	bl	8008518 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009cba:	d10a      	bne.n	8009cd2 <prvAddCurrentTaskToDelayedList+0x3a>
 8009cbc:	683b      	ldr	r3, [r7, #0]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d007      	beq.n	8009cd2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009cc2:	4b1a      	ldr	r3, [pc, #104]	; (8009d2c <prvAddCurrentTaskToDelayedList+0x94>)
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	3304      	adds	r3, #4
 8009cc8:	4619      	mov	r1, r3
 8009cca:	4819      	ldr	r0, [pc, #100]	; (8009d30 <prvAddCurrentTaskToDelayedList+0x98>)
 8009ccc:	f7fe fbc7 	bl	800845e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009cd0:	e026      	b.n	8009d20 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009cd2:	68fa      	ldr	r2, [r7, #12]
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	4413      	add	r3, r2
 8009cd8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009cda:	4b14      	ldr	r3, [pc, #80]	; (8009d2c <prvAddCurrentTaskToDelayedList+0x94>)
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	68ba      	ldr	r2, [r7, #8]
 8009ce0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009ce2:	68ba      	ldr	r2, [r7, #8]
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	429a      	cmp	r2, r3
 8009ce8:	d209      	bcs.n	8009cfe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009cea:	4b12      	ldr	r3, [pc, #72]	; (8009d34 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009cec:	681a      	ldr	r2, [r3, #0]
 8009cee:	4b0f      	ldr	r3, [pc, #60]	; (8009d2c <prvAddCurrentTaskToDelayedList+0x94>)
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	3304      	adds	r3, #4
 8009cf4:	4619      	mov	r1, r3
 8009cf6:	4610      	mov	r0, r2
 8009cf8:	f7fe fbd5 	bl	80084a6 <vListInsert>
}
 8009cfc:	e010      	b.n	8009d20 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009cfe:	4b0e      	ldr	r3, [pc, #56]	; (8009d38 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009d00:	681a      	ldr	r2, [r3, #0]
 8009d02:	4b0a      	ldr	r3, [pc, #40]	; (8009d2c <prvAddCurrentTaskToDelayedList+0x94>)
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	3304      	adds	r3, #4
 8009d08:	4619      	mov	r1, r3
 8009d0a:	4610      	mov	r0, r2
 8009d0c:	f7fe fbcb 	bl	80084a6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009d10:	4b0a      	ldr	r3, [pc, #40]	; (8009d3c <prvAddCurrentTaskToDelayedList+0xa4>)
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	68ba      	ldr	r2, [r7, #8]
 8009d16:	429a      	cmp	r2, r3
 8009d18:	d202      	bcs.n	8009d20 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009d1a:	4a08      	ldr	r2, [pc, #32]	; (8009d3c <prvAddCurrentTaskToDelayedList+0xa4>)
 8009d1c:	68bb      	ldr	r3, [r7, #8]
 8009d1e:	6013      	str	r3, [r2, #0]
}
 8009d20:	bf00      	nop
 8009d22:	3710      	adds	r7, #16
 8009d24:	46bd      	mov	sp, r7
 8009d26:	bd80      	pop	{r7, pc}
 8009d28:	20000ed4 	.word	0x20000ed4
 8009d2c:	200009fc 	.word	0x200009fc
 8009d30:	20000ebc 	.word	0x20000ebc
 8009d34:	20000e8c 	.word	0x20000e8c
 8009d38:	20000e88 	.word	0x20000e88
 8009d3c:	20000ef0 	.word	0x20000ef0

08009d40 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009d40:	b580      	push	{r7, lr}
 8009d42:	b08a      	sub	sp, #40	; 0x28
 8009d44:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009d46:	2300      	movs	r3, #0
 8009d48:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009d4a:	f000 fb07 	bl	800a35c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009d4e:	4b1c      	ldr	r3, [pc, #112]	; (8009dc0 <xTimerCreateTimerTask+0x80>)
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d021      	beq.n	8009d9a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009d56:	2300      	movs	r3, #0
 8009d58:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009d5e:	1d3a      	adds	r2, r7, #4
 8009d60:	f107 0108 	add.w	r1, r7, #8
 8009d64:	f107 030c 	add.w	r3, r7, #12
 8009d68:	4618      	mov	r0, r3
 8009d6a:	f7fe fb31 	bl	80083d0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009d6e:	6879      	ldr	r1, [r7, #4]
 8009d70:	68bb      	ldr	r3, [r7, #8]
 8009d72:	68fa      	ldr	r2, [r7, #12]
 8009d74:	9202      	str	r2, [sp, #8]
 8009d76:	9301      	str	r3, [sp, #4]
 8009d78:	2302      	movs	r3, #2
 8009d7a:	9300      	str	r3, [sp, #0]
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	460a      	mov	r2, r1
 8009d80:	4910      	ldr	r1, [pc, #64]	; (8009dc4 <xTimerCreateTimerTask+0x84>)
 8009d82:	4811      	ldr	r0, [pc, #68]	; (8009dc8 <xTimerCreateTimerTask+0x88>)
 8009d84:	f7ff f8de 	bl	8008f44 <xTaskCreateStatic>
 8009d88:	4603      	mov	r3, r0
 8009d8a:	4a10      	ldr	r2, [pc, #64]	; (8009dcc <xTimerCreateTimerTask+0x8c>)
 8009d8c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009d8e:	4b0f      	ldr	r3, [pc, #60]	; (8009dcc <xTimerCreateTimerTask+0x8c>)
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d001      	beq.n	8009d9a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009d96:	2301      	movs	r3, #1
 8009d98:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009d9a:	697b      	ldr	r3, [r7, #20]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d10a      	bne.n	8009db6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009da4:	f383 8811 	msr	BASEPRI, r3
 8009da8:	f3bf 8f6f 	isb	sy
 8009dac:	f3bf 8f4f 	dsb	sy
 8009db0:	613b      	str	r3, [r7, #16]
}
 8009db2:	bf00      	nop
 8009db4:	e7fe      	b.n	8009db4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009db6:	697b      	ldr	r3, [r7, #20]
}
 8009db8:	4618      	mov	r0, r3
 8009dba:	3718      	adds	r7, #24
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	bd80      	pop	{r7, pc}
 8009dc0:	20000f2c 	.word	0x20000f2c
 8009dc4:	0800b810 	.word	0x0800b810
 8009dc8:	08009f05 	.word	0x08009f05
 8009dcc:	20000f30 	.word	0x20000f30

08009dd0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009dd0:	b580      	push	{r7, lr}
 8009dd2:	b08a      	sub	sp, #40	; 0x28
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	60f8      	str	r0, [r7, #12]
 8009dd8:	60b9      	str	r1, [r7, #8]
 8009dda:	607a      	str	r2, [r7, #4]
 8009ddc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009dde:	2300      	movs	r3, #0
 8009de0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d10a      	bne.n	8009dfe <xTimerGenericCommand+0x2e>
	__asm volatile
 8009de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dec:	f383 8811 	msr	BASEPRI, r3
 8009df0:	f3bf 8f6f 	isb	sy
 8009df4:	f3bf 8f4f 	dsb	sy
 8009df8:	623b      	str	r3, [r7, #32]
}
 8009dfa:	bf00      	nop
 8009dfc:	e7fe      	b.n	8009dfc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009dfe:	4b1a      	ldr	r3, [pc, #104]	; (8009e68 <xTimerGenericCommand+0x98>)
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d02a      	beq.n	8009e5c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009e06:	68bb      	ldr	r3, [r7, #8]
 8009e08:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009e12:	68bb      	ldr	r3, [r7, #8]
 8009e14:	2b05      	cmp	r3, #5
 8009e16:	dc18      	bgt.n	8009e4a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009e18:	f7ff feb2 	bl	8009b80 <xTaskGetSchedulerState>
 8009e1c:	4603      	mov	r3, r0
 8009e1e:	2b02      	cmp	r3, #2
 8009e20:	d109      	bne.n	8009e36 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009e22:	4b11      	ldr	r3, [pc, #68]	; (8009e68 <xTimerGenericCommand+0x98>)
 8009e24:	6818      	ldr	r0, [r3, #0]
 8009e26:	f107 0110 	add.w	r1, r7, #16
 8009e2a:	2300      	movs	r3, #0
 8009e2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e2e:	f7fe fca1 	bl	8008774 <xQueueGenericSend>
 8009e32:	6278      	str	r0, [r7, #36]	; 0x24
 8009e34:	e012      	b.n	8009e5c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009e36:	4b0c      	ldr	r3, [pc, #48]	; (8009e68 <xTimerGenericCommand+0x98>)
 8009e38:	6818      	ldr	r0, [r3, #0]
 8009e3a:	f107 0110 	add.w	r1, r7, #16
 8009e3e:	2300      	movs	r3, #0
 8009e40:	2200      	movs	r2, #0
 8009e42:	f7fe fc97 	bl	8008774 <xQueueGenericSend>
 8009e46:	6278      	str	r0, [r7, #36]	; 0x24
 8009e48:	e008      	b.n	8009e5c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009e4a:	4b07      	ldr	r3, [pc, #28]	; (8009e68 <xTimerGenericCommand+0x98>)
 8009e4c:	6818      	ldr	r0, [r3, #0]
 8009e4e:	f107 0110 	add.w	r1, r7, #16
 8009e52:	2300      	movs	r3, #0
 8009e54:	683a      	ldr	r2, [r7, #0]
 8009e56:	f7fe fd8b 	bl	8008970 <xQueueGenericSendFromISR>
 8009e5a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009e5e:	4618      	mov	r0, r3
 8009e60:	3728      	adds	r7, #40	; 0x28
 8009e62:	46bd      	mov	sp, r7
 8009e64:	bd80      	pop	{r7, pc}
 8009e66:	bf00      	nop
 8009e68:	20000f2c 	.word	0x20000f2c

08009e6c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009e6c:	b580      	push	{r7, lr}
 8009e6e:	b088      	sub	sp, #32
 8009e70:	af02      	add	r7, sp, #8
 8009e72:	6078      	str	r0, [r7, #4]
 8009e74:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e76:	4b22      	ldr	r3, [pc, #136]	; (8009f00 <prvProcessExpiredTimer+0x94>)
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	68db      	ldr	r3, [r3, #12]
 8009e7c:	68db      	ldr	r3, [r3, #12]
 8009e7e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009e80:	697b      	ldr	r3, [r7, #20]
 8009e82:	3304      	adds	r3, #4
 8009e84:	4618      	mov	r0, r3
 8009e86:	f7fe fb47 	bl	8008518 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009e8a:	697b      	ldr	r3, [r7, #20]
 8009e8c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009e90:	f003 0304 	and.w	r3, r3, #4
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d022      	beq.n	8009ede <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009e98:	697b      	ldr	r3, [r7, #20]
 8009e9a:	699a      	ldr	r2, [r3, #24]
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	18d1      	adds	r1, r2, r3
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	683a      	ldr	r2, [r7, #0]
 8009ea4:	6978      	ldr	r0, [r7, #20]
 8009ea6:	f000 f8d1 	bl	800a04c <prvInsertTimerInActiveList>
 8009eaa:	4603      	mov	r3, r0
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d01f      	beq.n	8009ef0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009eb0:	2300      	movs	r3, #0
 8009eb2:	9300      	str	r3, [sp, #0]
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	687a      	ldr	r2, [r7, #4]
 8009eb8:	2100      	movs	r1, #0
 8009eba:	6978      	ldr	r0, [r7, #20]
 8009ebc:	f7ff ff88 	bl	8009dd0 <xTimerGenericCommand>
 8009ec0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009ec2:	693b      	ldr	r3, [r7, #16]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d113      	bne.n	8009ef0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009ec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ecc:	f383 8811 	msr	BASEPRI, r3
 8009ed0:	f3bf 8f6f 	isb	sy
 8009ed4:	f3bf 8f4f 	dsb	sy
 8009ed8:	60fb      	str	r3, [r7, #12]
}
 8009eda:	bf00      	nop
 8009edc:	e7fe      	b.n	8009edc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009ede:	697b      	ldr	r3, [r7, #20]
 8009ee0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009ee4:	f023 0301 	bic.w	r3, r3, #1
 8009ee8:	b2da      	uxtb	r2, r3
 8009eea:	697b      	ldr	r3, [r7, #20]
 8009eec:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009ef0:	697b      	ldr	r3, [r7, #20]
 8009ef2:	6a1b      	ldr	r3, [r3, #32]
 8009ef4:	6978      	ldr	r0, [r7, #20]
 8009ef6:	4798      	blx	r3
}
 8009ef8:	bf00      	nop
 8009efa:	3718      	adds	r7, #24
 8009efc:	46bd      	mov	sp, r7
 8009efe:	bd80      	pop	{r7, pc}
 8009f00:	20000f24 	.word	0x20000f24

08009f04 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009f04:	b580      	push	{r7, lr}
 8009f06:	b084      	sub	sp, #16
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009f0c:	f107 0308 	add.w	r3, r7, #8
 8009f10:	4618      	mov	r0, r3
 8009f12:	f000 f857 	bl	8009fc4 <prvGetNextExpireTime>
 8009f16:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009f18:	68bb      	ldr	r3, [r7, #8]
 8009f1a:	4619      	mov	r1, r3
 8009f1c:	68f8      	ldr	r0, [r7, #12]
 8009f1e:	f000 f803 	bl	8009f28 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009f22:	f000 f8d5 	bl	800a0d0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009f26:	e7f1      	b.n	8009f0c <prvTimerTask+0x8>

08009f28 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009f28:	b580      	push	{r7, lr}
 8009f2a:	b084      	sub	sp, #16
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	6078      	str	r0, [r7, #4]
 8009f30:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009f32:	f7ff fa43 	bl	80093bc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009f36:	f107 0308 	add.w	r3, r7, #8
 8009f3a:	4618      	mov	r0, r3
 8009f3c:	f000 f866 	bl	800a00c <prvSampleTimeNow>
 8009f40:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009f42:	68bb      	ldr	r3, [r7, #8]
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d130      	bne.n	8009faa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009f48:	683b      	ldr	r3, [r7, #0]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d10a      	bne.n	8009f64 <prvProcessTimerOrBlockTask+0x3c>
 8009f4e:	687a      	ldr	r2, [r7, #4]
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	429a      	cmp	r2, r3
 8009f54:	d806      	bhi.n	8009f64 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009f56:	f7ff fa3f 	bl	80093d8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009f5a:	68f9      	ldr	r1, [r7, #12]
 8009f5c:	6878      	ldr	r0, [r7, #4]
 8009f5e:	f7ff ff85 	bl	8009e6c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009f62:	e024      	b.n	8009fae <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009f64:	683b      	ldr	r3, [r7, #0]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d008      	beq.n	8009f7c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009f6a:	4b13      	ldr	r3, [pc, #76]	; (8009fb8 <prvProcessTimerOrBlockTask+0x90>)
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d101      	bne.n	8009f78 <prvProcessTimerOrBlockTask+0x50>
 8009f74:	2301      	movs	r3, #1
 8009f76:	e000      	b.n	8009f7a <prvProcessTimerOrBlockTask+0x52>
 8009f78:	2300      	movs	r3, #0
 8009f7a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009f7c:	4b0f      	ldr	r3, [pc, #60]	; (8009fbc <prvProcessTimerOrBlockTask+0x94>)
 8009f7e:	6818      	ldr	r0, [r3, #0]
 8009f80:	687a      	ldr	r2, [r7, #4]
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	1ad3      	subs	r3, r2, r3
 8009f86:	683a      	ldr	r2, [r7, #0]
 8009f88:	4619      	mov	r1, r3
 8009f8a:	f7fe ffa7 	bl	8008edc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009f8e:	f7ff fa23 	bl	80093d8 <xTaskResumeAll>
 8009f92:	4603      	mov	r3, r0
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d10a      	bne.n	8009fae <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009f98:	4b09      	ldr	r3, [pc, #36]	; (8009fc0 <prvProcessTimerOrBlockTask+0x98>)
 8009f9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f9e:	601a      	str	r2, [r3, #0]
 8009fa0:	f3bf 8f4f 	dsb	sy
 8009fa4:	f3bf 8f6f 	isb	sy
}
 8009fa8:	e001      	b.n	8009fae <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009faa:	f7ff fa15 	bl	80093d8 <xTaskResumeAll>
}
 8009fae:	bf00      	nop
 8009fb0:	3710      	adds	r7, #16
 8009fb2:	46bd      	mov	sp, r7
 8009fb4:	bd80      	pop	{r7, pc}
 8009fb6:	bf00      	nop
 8009fb8:	20000f28 	.word	0x20000f28
 8009fbc:	20000f2c 	.word	0x20000f2c
 8009fc0:	e000ed04 	.word	0xe000ed04

08009fc4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009fc4:	b480      	push	{r7}
 8009fc6:	b085      	sub	sp, #20
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009fcc:	4b0e      	ldr	r3, [pc, #56]	; (800a008 <prvGetNextExpireTime+0x44>)
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d101      	bne.n	8009fda <prvGetNextExpireTime+0x16>
 8009fd6:	2201      	movs	r2, #1
 8009fd8:	e000      	b.n	8009fdc <prvGetNextExpireTime+0x18>
 8009fda:	2200      	movs	r2, #0
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d105      	bne.n	8009ff4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009fe8:	4b07      	ldr	r3, [pc, #28]	; (800a008 <prvGetNextExpireTime+0x44>)
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	68db      	ldr	r3, [r3, #12]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	60fb      	str	r3, [r7, #12]
 8009ff2:	e001      	b.n	8009ff8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009ff8:	68fb      	ldr	r3, [r7, #12]
}
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	3714      	adds	r7, #20
 8009ffe:	46bd      	mov	sp, r7
 800a000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a004:	4770      	bx	lr
 800a006:	bf00      	nop
 800a008:	20000f24 	.word	0x20000f24

0800a00c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a00c:	b580      	push	{r7, lr}
 800a00e:	b084      	sub	sp, #16
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a014:	f7ff fa7e 	bl	8009514 <xTaskGetTickCount>
 800a018:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a01a:	4b0b      	ldr	r3, [pc, #44]	; (800a048 <prvSampleTimeNow+0x3c>)
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	68fa      	ldr	r2, [r7, #12]
 800a020:	429a      	cmp	r2, r3
 800a022:	d205      	bcs.n	800a030 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a024:	f000 f936 	bl	800a294 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	2201      	movs	r2, #1
 800a02c:	601a      	str	r2, [r3, #0]
 800a02e:	e002      	b.n	800a036 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	2200      	movs	r2, #0
 800a034:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a036:	4a04      	ldr	r2, [pc, #16]	; (800a048 <prvSampleTimeNow+0x3c>)
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a03c:	68fb      	ldr	r3, [r7, #12]
}
 800a03e:	4618      	mov	r0, r3
 800a040:	3710      	adds	r7, #16
 800a042:	46bd      	mov	sp, r7
 800a044:	bd80      	pop	{r7, pc}
 800a046:	bf00      	nop
 800a048:	20000f34 	.word	0x20000f34

0800a04c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a04c:	b580      	push	{r7, lr}
 800a04e:	b086      	sub	sp, #24
 800a050:	af00      	add	r7, sp, #0
 800a052:	60f8      	str	r0, [r7, #12]
 800a054:	60b9      	str	r1, [r7, #8]
 800a056:	607a      	str	r2, [r7, #4]
 800a058:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a05a:	2300      	movs	r3, #0
 800a05c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	68ba      	ldr	r2, [r7, #8]
 800a062:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	68fa      	ldr	r2, [r7, #12]
 800a068:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a06a:	68ba      	ldr	r2, [r7, #8]
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	429a      	cmp	r2, r3
 800a070:	d812      	bhi.n	800a098 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a072:	687a      	ldr	r2, [r7, #4]
 800a074:	683b      	ldr	r3, [r7, #0]
 800a076:	1ad2      	subs	r2, r2, r3
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	699b      	ldr	r3, [r3, #24]
 800a07c:	429a      	cmp	r2, r3
 800a07e:	d302      	bcc.n	800a086 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a080:	2301      	movs	r3, #1
 800a082:	617b      	str	r3, [r7, #20]
 800a084:	e01b      	b.n	800a0be <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a086:	4b10      	ldr	r3, [pc, #64]	; (800a0c8 <prvInsertTimerInActiveList+0x7c>)
 800a088:	681a      	ldr	r2, [r3, #0]
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	3304      	adds	r3, #4
 800a08e:	4619      	mov	r1, r3
 800a090:	4610      	mov	r0, r2
 800a092:	f7fe fa08 	bl	80084a6 <vListInsert>
 800a096:	e012      	b.n	800a0be <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a098:	687a      	ldr	r2, [r7, #4]
 800a09a:	683b      	ldr	r3, [r7, #0]
 800a09c:	429a      	cmp	r2, r3
 800a09e:	d206      	bcs.n	800a0ae <prvInsertTimerInActiveList+0x62>
 800a0a0:	68ba      	ldr	r2, [r7, #8]
 800a0a2:	683b      	ldr	r3, [r7, #0]
 800a0a4:	429a      	cmp	r2, r3
 800a0a6:	d302      	bcc.n	800a0ae <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a0a8:	2301      	movs	r3, #1
 800a0aa:	617b      	str	r3, [r7, #20]
 800a0ac:	e007      	b.n	800a0be <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a0ae:	4b07      	ldr	r3, [pc, #28]	; (800a0cc <prvInsertTimerInActiveList+0x80>)
 800a0b0:	681a      	ldr	r2, [r3, #0]
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	3304      	adds	r3, #4
 800a0b6:	4619      	mov	r1, r3
 800a0b8:	4610      	mov	r0, r2
 800a0ba:	f7fe f9f4 	bl	80084a6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a0be:	697b      	ldr	r3, [r7, #20]
}
 800a0c0:	4618      	mov	r0, r3
 800a0c2:	3718      	adds	r7, #24
 800a0c4:	46bd      	mov	sp, r7
 800a0c6:	bd80      	pop	{r7, pc}
 800a0c8:	20000f28 	.word	0x20000f28
 800a0cc:	20000f24 	.word	0x20000f24

0800a0d0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a0d0:	b580      	push	{r7, lr}
 800a0d2:	b08e      	sub	sp, #56	; 0x38
 800a0d4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a0d6:	e0ca      	b.n	800a26e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	da18      	bge.n	800a110 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a0de:	1d3b      	adds	r3, r7, #4
 800a0e0:	3304      	adds	r3, #4
 800a0e2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a0e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d10a      	bne.n	800a100 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800a0ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0ee:	f383 8811 	msr	BASEPRI, r3
 800a0f2:	f3bf 8f6f 	isb	sy
 800a0f6:	f3bf 8f4f 	dsb	sy
 800a0fa:	61fb      	str	r3, [r7, #28]
}
 800a0fc:	bf00      	nop
 800a0fe:	e7fe      	b.n	800a0fe <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a106:	6850      	ldr	r0, [r2, #4]
 800a108:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a10a:	6892      	ldr	r2, [r2, #8]
 800a10c:	4611      	mov	r1, r2
 800a10e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	2b00      	cmp	r3, #0
 800a114:	f2c0 80ab 	blt.w	800a26e <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a11c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a11e:	695b      	ldr	r3, [r3, #20]
 800a120:	2b00      	cmp	r3, #0
 800a122:	d004      	beq.n	800a12e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a126:	3304      	adds	r3, #4
 800a128:	4618      	mov	r0, r3
 800a12a:	f7fe f9f5 	bl	8008518 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a12e:	463b      	mov	r3, r7
 800a130:	4618      	mov	r0, r3
 800a132:	f7ff ff6b 	bl	800a00c <prvSampleTimeNow>
 800a136:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	2b09      	cmp	r3, #9
 800a13c:	f200 8096 	bhi.w	800a26c <prvProcessReceivedCommands+0x19c>
 800a140:	a201      	add	r2, pc, #4	; (adr r2, 800a148 <prvProcessReceivedCommands+0x78>)
 800a142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a146:	bf00      	nop
 800a148:	0800a171 	.word	0x0800a171
 800a14c:	0800a171 	.word	0x0800a171
 800a150:	0800a171 	.word	0x0800a171
 800a154:	0800a1e5 	.word	0x0800a1e5
 800a158:	0800a1f9 	.word	0x0800a1f9
 800a15c:	0800a243 	.word	0x0800a243
 800a160:	0800a171 	.word	0x0800a171
 800a164:	0800a171 	.word	0x0800a171
 800a168:	0800a1e5 	.word	0x0800a1e5
 800a16c:	0800a1f9 	.word	0x0800a1f9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a172:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a176:	f043 0301 	orr.w	r3, r3, #1
 800a17a:	b2da      	uxtb	r2, r3
 800a17c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a17e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a182:	68ba      	ldr	r2, [r7, #8]
 800a184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a186:	699b      	ldr	r3, [r3, #24]
 800a188:	18d1      	adds	r1, r2, r3
 800a18a:	68bb      	ldr	r3, [r7, #8]
 800a18c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a18e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a190:	f7ff ff5c 	bl	800a04c <prvInsertTimerInActiveList>
 800a194:	4603      	mov	r3, r0
 800a196:	2b00      	cmp	r3, #0
 800a198:	d069      	beq.n	800a26e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a19a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a19c:	6a1b      	ldr	r3, [r3, #32]
 800a19e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a1a0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a1a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a1a8:	f003 0304 	and.w	r3, r3, #4
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d05e      	beq.n	800a26e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a1b0:	68ba      	ldr	r2, [r7, #8]
 800a1b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1b4:	699b      	ldr	r3, [r3, #24]
 800a1b6:	441a      	add	r2, r3
 800a1b8:	2300      	movs	r3, #0
 800a1ba:	9300      	str	r3, [sp, #0]
 800a1bc:	2300      	movs	r3, #0
 800a1be:	2100      	movs	r1, #0
 800a1c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a1c2:	f7ff fe05 	bl	8009dd0 <xTimerGenericCommand>
 800a1c6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a1c8:	6a3b      	ldr	r3, [r7, #32]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d14f      	bne.n	800a26e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800a1ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1d2:	f383 8811 	msr	BASEPRI, r3
 800a1d6:	f3bf 8f6f 	isb	sy
 800a1da:	f3bf 8f4f 	dsb	sy
 800a1de:	61bb      	str	r3, [r7, #24]
}
 800a1e0:	bf00      	nop
 800a1e2:	e7fe      	b.n	800a1e2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a1e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a1ea:	f023 0301 	bic.w	r3, r3, #1
 800a1ee:	b2da      	uxtb	r2, r3
 800a1f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a1f6:	e03a      	b.n	800a26e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a1f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a1fe:	f043 0301 	orr.w	r3, r3, #1
 800a202:	b2da      	uxtb	r2, r3
 800a204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a206:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a20a:	68ba      	ldr	r2, [r7, #8]
 800a20c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a20e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a212:	699b      	ldr	r3, [r3, #24]
 800a214:	2b00      	cmp	r3, #0
 800a216:	d10a      	bne.n	800a22e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800a218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a21c:	f383 8811 	msr	BASEPRI, r3
 800a220:	f3bf 8f6f 	isb	sy
 800a224:	f3bf 8f4f 	dsb	sy
 800a228:	617b      	str	r3, [r7, #20]
}
 800a22a:	bf00      	nop
 800a22c:	e7fe      	b.n	800a22c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a22e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a230:	699a      	ldr	r2, [r3, #24]
 800a232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a234:	18d1      	adds	r1, r2, r3
 800a236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a238:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a23a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a23c:	f7ff ff06 	bl	800a04c <prvInsertTimerInActiveList>
					break;
 800a240:	e015      	b.n	800a26e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a244:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a248:	f003 0302 	and.w	r3, r3, #2
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d103      	bne.n	800a258 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800a250:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a252:	f000 fbdd 	bl	800aa10 <vPortFree>
 800a256:	e00a      	b.n	800a26e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a25a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a25e:	f023 0301 	bic.w	r3, r3, #1
 800a262:	b2da      	uxtb	r2, r3
 800a264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a266:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a26a:	e000      	b.n	800a26e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800a26c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a26e:	4b08      	ldr	r3, [pc, #32]	; (800a290 <prvProcessReceivedCommands+0x1c0>)
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	1d39      	adds	r1, r7, #4
 800a274:	2200      	movs	r2, #0
 800a276:	4618      	mov	r0, r3
 800a278:	f7fe fc16 	bl	8008aa8 <xQueueReceive>
 800a27c:	4603      	mov	r3, r0
 800a27e:	2b00      	cmp	r3, #0
 800a280:	f47f af2a 	bne.w	800a0d8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800a284:	bf00      	nop
 800a286:	bf00      	nop
 800a288:	3730      	adds	r7, #48	; 0x30
 800a28a:	46bd      	mov	sp, r7
 800a28c:	bd80      	pop	{r7, pc}
 800a28e:	bf00      	nop
 800a290:	20000f2c 	.word	0x20000f2c

0800a294 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a294:	b580      	push	{r7, lr}
 800a296:	b088      	sub	sp, #32
 800a298:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a29a:	e048      	b.n	800a32e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a29c:	4b2d      	ldr	r3, [pc, #180]	; (800a354 <prvSwitchTimerLists+0xc0>)
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	68db      	ldr	r3, [r3, #12]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a2a6:	4b2b      	ldr	r3, [pc, #172]	; (800a354 <prvSwitchTimerLists+0xc0>)
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	68db      	ldr	r3, [r3, #12]
 800a2ac:	68db      	ldr	r3, [r3, #12]
 800a2ae:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	3304      	adds	r3, #4
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	f7fe f92f 	bl	8008518 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	6a1b      	ldr	r3, [r3, #32]
 800a2be:	68f8      	ldr	r0, [r7, #12]
 800a2c0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a2c8:	f003 0304 	and.w	r3, r3, #4
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d02e      	beq.n	800a32e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	699b      	ldr	r3, [r3, #24]
 800a2d4:	693a      	ldr	r2, [r7, #16]
 800a2d6:	4413      	add	r3, r2
 800a2d8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a2da:	68ba      	ldr	r2, [r7, #8]
 800a2dc:	693b      	ldr	r3, [r7, #16]
 800a2de:	429a      	cmp	r2, r3
 800a2e0:	d90e      	bls.n	800a300 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	68ba      	ldr	r2, [r7, #8]
 800a2e6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	68fa      	ldr	r2, [r7, #12]
 800a2ec:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a2ee:	4b19      	ldr	r3, [pc, #100]	; (800a354 <prvSwitchTimerLists+0xc0>)
 800a2f0:	681a      	ldr	r2, [r3, #0]
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	3304      	adds	r3, #4
 800a2f6:	4619      	mov	r1, r3
 800a2f8:	4610      	mov	r0, r2
 800a2fa:	f7fe f8d4 	bl	80084a6 <vListInsert>
 800a2fe:	e016      	b.n	800a32e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a300:	2300      	movs	r3, #0
 800a302:	9300      	str	r3, [sp, #0]
 800a304:	2300      	movs	r3, #0
 800a306:	693a      	ldr	r2, [r7, #16]
 800a308:	2100      	movs	r1, #0
 800a30a:	68f8      	ldr	r0, [r7, #12]
 800a30c:	f7ff fd60 	bl	8009dd0 <xTimerGenericCommand>
 800a310:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	2b00      	cmp	r3, #0
 800a316:	d10a      	bne.n	800a32e <prvSwitchTimerLists+0x9a>
	__asm volatile
 800a318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a31c:	f383 8811 	msr	BASEPRI, r3
 800a320:	f3bf 8f6f 	isb	sy
 800a324:	f3bf 8f4f 	dsb	sy
 800a328:	603b      	str	r3, [r7, #0]
}
 800a32a:	bf00      	nop
 800a32c:	e7fe      	b.n	800a32c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a32e:	4b09      	ldr	r3, [pc, #36]	; (800a354 <prvSwitchTimerLists+0xc0>)
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	2b00      	cmp	r3, #0
 800a336:	d1b1      	bne.n	800a29c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a338:	4b06      	ldr	r3, [pc, #24]	; (800a354 <prvSwitchTimerLists+0xc0>)
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a33e:	4b06      	ldr	r3, [pc, #24]	; (800a358 <prvSwitchTimerLists+0xc4>)
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	4a04      	ldr	r2, [pc, #16]	; (800a354 <prvSwitchTimerLists+0xc0>)
 800a344:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a346:	4a04      	ldr	r2, [pc, #16]	; (800a358 <prvSwitchTimerLists+0xc4>)
 800a348:	697b      	ldr	r3, [r7, #20]
 800a34a:	6013      	str	r3, [r2, #0]
}
 800a34c:	bf00      	nop
 800a34e:	3718      	adds	r7, #24
 800a350:	46bd      	mov	sp, r7
 800a352:	bd80      	pop	{r7, pc}
 800a354:	20000f24 	.word	0x20000f24
 800a358:	20000f28 	.word	0x20000f28

0800a35c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a35c:	b580      	push	{r7, lr}
 800a35e:	b082      	sub	sp, #8
 800a360:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a362:	f000 f967 	bl	800a634 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a366:	4b15      	ldr	r3, [pc, #84]	; (800a3bc <prvCheckForValidListAndQueue+0x60>)
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d120      	bne.n	800a3b0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a36e:	4814      	ldr	r0, [pc, #80]	; (800a3c0 <prvCheckForValidListAndQueue+0x64>)
 800a370:	f7fe f848 	bl	8008404 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a374:	4813      	ldr	r0, [pc, #76]	; (800a3c4 <prvCheckForValidListAndQueue+0x68>)
 800a376:	f7fe f845 	bl	8008404 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a37a:	4b13      	ldr	r3, [pc, #76]	; (800a3c8 <prvCheckForValidListAndQueue+0x6c>)
 800a37c:	4a10      	ldr	r2, [pc, #64]	; (800a3c0 <prvCheckForValidListAndQueue+0x64>)
 800a37e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a380:	4b12      	ldr	r3, [pc, #72]	; (800a3cc <prvCheckForValidListAndQueue+0x70>)
 800a382:	4a10      	ldr	r2, [pc, #64]	; (800a3c4 <prvCheckForValidListAndQueue+0x68>)
 800a384:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a386:	2300      	movs	r3, #0
 800a388:	9300      	str	r3, [sp, #0]
 800a38a:	4b11      	ldr	r3, [pc, #68]	; (800a3d0 <prvCheckForValidListAndQueue+0x74>)
 800a38c:	4a11      	ldr	r2, [pc, #68]	; (800a3d4 <prvCheckForValidListAndQueue+0x78>)
 800a38e:	2110      	movs	r1, #16
 800a390:	200a      	movs	r0, #10
 800a392:	f7fe f953 	bl	800863c <xQueueGenericCreateStatic>
 800a396:	4603      	mov	r3, r0
 800a398:	4a08      	ldr	r2, [pc, #32]	; (800a3bc <prvCheckForValidListAndQueue+0x60>)
 800a39a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a39c:	4b07      	ldr	r3, [pc, #28]	; (800a3bc <prvCheckForValidListAndQueue+0x60>)
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d005      	beq.n	800a3b0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a3a4:	4b05      	ldr	r3, [pc, #20]	; (800a3bc <prvCheckForValidListAndQueue+0x60>)
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	490b      	ldr	r1, [pc, #44]	; (800a3d8 <prvCheckForValidListAndQueue+0x7c>)
 800a3aa:	4618      	mov	r0, r3
 800a3ac:	f7fe fd6c 	bl	8008e88 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a3b0:	f000 f970 	bl	800a694 <vPortExitCritical>
}
 800a3b4:	bf00      	nop
 800a3b6:	46bd      	mov	sp, r7
 800a3b8:	bd80      	pop	{r7, pc}
 800a3ba:	bf00      	nop
 800a3bc:	20000f2c 	.word	0x20000f2c
 800a3c0:	20000efc 	.word	0x20000efc
 800a3c4:	20000f10 	.word	0x20000f10
 800a3c8:	20000f24 	.word	0x20000f24
 800a3cc:	20000f28 	.word	0x20000f28
 800a3d0:	20000fd8 	.word	0x20000fd8
 800a3d4:	20000f38 	.word	0x20000f38
 800a3d8:	0800b818 	.word	0x0800b818

0800a3dc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a3dc:	b480      	push	{r7}
 800a3de:	b085      	sub	sp, #20
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	60f8      	str	r0, [r7, #12]
 800a3e4:	60b9      	str	r1, [r7, #8]
 800a3e6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	3b04      	subs	r3, #4
 800a3ec:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a3f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	3b04      	subs	r3, #4
 800a3fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a3fc:	68bb      	ldr	r3, [r7, #8]
 800a3fe:	f023 0201 	bic.w	r2, r3, #1
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	3b04      	subs	r3, #4
 800a40a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a40c:	4a0c      	ldr	r2, [pc, #48]	; (800a440 <pxPortInitialiseStack+0x64>)
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	3b14      	subs	r3, #20
 800a416:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a418:	687a      	ldr	r2, [r7, #4]
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	3b04      	subs	r3, #4
 800a422:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	f06f 0202 	mvn.w	r2, #2
 800a42a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	3b20      	subs	r3, #32
 800a430:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a432:	68fb      	ldr	r3, [r7, #12]
}
 800a434:	4618      	mov	r0, r3
 800a436:	3714      	adds	r7, #20
 800a438:	46bd      	mov	sp, r7
 800a43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43e:	4770      	bx	lr
 800a440:	0800a445 	.word	0x0800a445

0800a444 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a444:	b480      	push	{r7}
 800a446:	b085      	sub	sp, #20
 800a448:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a44a:	2300      	movs	r3, #0
 800a44c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a44e:	4b12      	ldr	r3, [pc, #72]	; (800a498 <prvTaskExitError+0x54>)
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a456:	d00a      	beq.n	800a46e <prvTaskExitError+0x2a>
	__asm volatile
 800a458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a45c:	f383 8811 	msr	BASEPRI, r3
 800a460:	f3bf 8f6f 	isb	sy
 800a464:	f3bf 8f4f 	dsb	sy
 800a468:	60fb      	str	r3, [r7, #12]
}
 800a46a:	bf00      	nop
 800a46c:	e7fe      	b.n	800a46c <prvTaskExitError+0x28>
	__asm volatile
 800a46e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a472:	f383 8811 	msr	BASEPRI, r3
 800a476:	f3bf 8f6f 	isb	sy
 800a47a:	f3bf 8f4f 	dsb	sy
 800a47e:	60bb      	str	r3, [r7, #8]
}
 800a480:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a482:	bf00      	nop
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	2b00      	cmp	r3, #0
 800a488:	d0fc      	beq.n	800a484 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a48a:	bf00      	nop
 800a48c:	bf00      	nop
 800a48e:	3714      	adds	r7, #20
 800a490:	46bd      	mov	sp, r7
 800a492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a496:	4770      	bx	lr
 800a498:	200000c0 	.word	0x200000c0
 800a49c:	00000000 	.word	0x00000000

0800a4a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a4a0:	4b07      	ldr	r3, [pc, #28]	; (800a4c0 <pxCurrentTCBConst2>)
 800a4a2:	6819      	ldr	r1, [r3, #0]
 800a4a4:	6808      	ldr	r0, [r1, #0]
 800a4a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4aa:	f380 8809 	msr	PSP, r0
 800a4ae:	f3bf 8f6f 	isb	sy
 800a4b2:	f04f 0000 	mov.w	r0, #0
 800a4b6:	f380 8811 	msr	BASEPRI, r0
 800a4ba:	4770      	bx	lr
 800a4bc:	f3af 8000 	nop.w

0800a4c0 <pxCurrentTCBConst2>:
 800a4c0:	200009fc 	.word	0x200009fc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a4c4:	bf00      	nop
 800a4c6:	bf00      	nop

0800a4c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a4c8:	4808      	ldr	r0, [pc, #32]	; (800a4ec <prvPortStartFirstTask+0x24>)
 800a4ca:	6800      	ldr	r0, [r0, #0]
 800a4cc:	6800      	ldr	r0, [r0, #0]
 800a4ce:	f380 8808 	msr	MSP, r0
 800a4d2:	f04f 0000 	mov.w	r0, #0
 800a4d6:	f380 8814 	msr	CONTROL, r0
 800a4da:	b662      	cpsie	i
 800a4dc:	b661      	cpsie	f
 800a4de:	f3bf 8f4f 	dsb	sy
 800a4e2:	f3bf 8f6f 	isb	sy
 800a4e6:	df00      	svc	0
 800a4e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a4ea:	bf00      	nop
 800a4ec:	e000ed08 	.word	0xe000ed08

0800a4f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a4f0:	b580      	push	{r7, lr}
 800a4f2:	b086      	sub	sp, #24
 800a4f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a4f6:	4b46      	ldr	r3, [pc, #280]	; (800a610 <xPortStartScheduler+0x120>)
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	4a46      	ldr	r2, [pc, #280]	; (800a614 <xPortStartScheduler+0x124>)
 800a4fc:	4293      	cmp	r3, r2
 800a4fe:	d10a      	bne.n	800a516 <xPortStartScheduler+0x26>
	__asm volatile
 800a500:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a504:	f383 8811 	msr	BASEPRI, r3
 800a508:	f3bf 8f6f 	isb	sy
 800a50c:	f3bf 8f4f 	dsb	sy
 800a510:	613b      	str	r3, [r7, #16]
}
 800a512:	bf00      	nop
 800a514:	e7fe      	b.n	800a514 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a516:	4b3e      	ldr	r3, [pc, #248]	; (800a610 <xPortStartScheduler+0x120>)
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	4a3f      	ldr	r2, [pc, #252]	; (800a618 <xPortStartScheduler+0x128>)
 800a51c:	4293      	cmp	r3, r2
 800a51e:	d10a      	bne.n	800a536 <xPortStartScheduler+0x46>
	__asm volatile
 800a520:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a524:	f383 8811 	msr	BASEPRI, r3
 800a528:	f3bf 8f6f 	isb	sy
 800a52c:	f3bf 8f4f 	dsb	sy
 800a530:	60fb      	str	r3, [r7, #12]
}
 800a532:	bf00      	nop
 800a534:	e7fe      	b.n	800a534 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a536:	4b39      	ldr	r3, [pc, #228]	; (800a61c <xPortStartScheduler+0x12c>)
 800a538:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a53a:	697b      	ldr	r3, [r7, #20]
 800a53c:	781b      	ldrb	r3, [r3, #0]
 800a53e:	b2db      	uxtb	r3, r3
 800a540:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a542:	697b      	ldr	r3, [r7, #20]
 800a544:	22ff      	movs	r2, #255	; 0xff
 800a546:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a548:	697b      	ldr	r3, [r7, #20]
 800a54a:	781b      	ldrb	r3, [r3, #0]
 800a54c:	b2db      	uxtb	r3, r3
 800a54e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a550:	78fb      	ldrb	r3, [r7, #3]
 800a552:	b2db      	uxtb	r3, r3
 800a554:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a558:	b2da      	uxtb	r2, r3
 800a55a:	4b31      	ldr	r3, [pc, #196]	; (800a620 <xPortStartScheduler+0x130>)
 800a55c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a55e:	4b31      	ldr	r3, [pc, #196]	; (800a624 <xPortStartScheduler+0x134>)
 800a560:	2207      	movs	r2, #7
 800a562:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a564:	e009      	b.n	800a57a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a566:	4b2f      	ldr	r3, [pc, #188]	; (800a624 <xPortStartScheduler+0x134>)
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	3b01      	subs	r3, #1
 800a56c:	4a2d      	ldr	r2, [pc, #180]	; (800a624 <xPortStartScheduler+0x134>)
 800a56e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a570:	78fb      	ldrb	r3, [r7, #3]
 800a572:	b2db      	uxtb	r3, r3
 800a574:	005b      	lsls	r3, r3, #1
 800a576:	b2db      	uxtb	r3, r3
 800a578:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a57a:	78fb      	ldrb	r3, [r7, #3]
 800a57c:	b2db      	uxtb	r3, r3
 800a57e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a582:	2b80      	cmp	r3, #128	; 0x80
 800a584:	d0ef      	beq.n	800a566 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a586:	4b27      	ldr	r3, [pc, #156]	; (800a624 <xPortStartScheduler+0x134>)
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	f1c3 0307 	rsb	r3, r3, #7
 800a58e:	2b04      	cmp	r3, #4
 800a590:	d00a      	beq.n	800a5a8 <xPortStartScheduler+0xb8>
	__asm volatile
 800a592:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a596:	f383 8811 	msr	BASEPRI, r3
 800a59a:	f3bf 8f6f 	isb	sy
 800a59e:	f3bf 8f4f 	dsb	sy
 800a5a2:	60bb      	str	r3, [r7, #8]
}
 800a5a4:	bf00      	nop
 800a5a6:	e7fe      	b.n	800a5a6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a5a8:	4b1e      	ldr	r3, [pc, #120]	; (800a624 <xPortStartScheduler+0x134>)
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	021b      	lsls	r3, r3, #8
 800a5ae:	4a1d      	ldr	r2, [pc, #116]	; (800a624 <xPortStartScheduler+0x134>)
 800a5b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a5b2:	4b1c      	ldr	r3, [pc, #112]	; (800a624 <xPortStartScheduler+0x134>)
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a5ba:	4a1a      	ldr	r2, [pc, #104]	; (800a624 <xPortStartScheduler+0x134>)
 800a5bc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	b2da      	uxtb	r2, r3
 800a5c2:	697b      	ldr	r3, [r7, #20]
 800a5c4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a5c6:	4b18      	ldr	r3, [pc, #96]	; (800a628 <xPortStartScheduler+0x138>)
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	4a17      	ldr	r2, [pc, #92]	; (800a628 <xPortStartScheduler+0x138>)
 800a5cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a5d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a5d2:	4b15      	ldr	r3, [pc, #84]	; (800a628 <xPortStartScheduler+0x138>)
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	4a14      	ldr	r2, [pc, #80]	; (800a628 <xPortStartScheduler+0x138>)
 800a5d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a5dc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a5de:	f000 f8dd 	bl	800a79c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a5e2:	4b12      	ldr	r3, [pc, #72]	; (800a62c <xPortStartScheduler+0x13c>)
 800a5e4:	2200      	movs	r2, #0
 800a5e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a5e8:	f000 f8fc 	bl	800a7e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a5ec:	4b10      	ldr	r3, [pc, #64]	; (800a630 <xPortStartScheduler+0x140>)
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	4a0f      	ldr	r2, [pc, #60]	; (800a630 <xPortStartScheduler+0x140>)
 800a5f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a5f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a5f8:	f7ff ff66 	bl	800a4c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a5fc:	f7ff f854 	bl	80096a8 <vTaskSwitchContext>
	prvTaskExitError();
 800a600:	f7ff ff20 	bl	800a444 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a604:	2300      	movs	r3, #0
}
 800a606:	4618      	mov	r0, r3
 800a608:	3718      	adds	r7, #24
 800a60a:	46bd      	mov	sp, r7
 800a60c:	bd80      	pop	{r7, pc}
 800a60e:	bf00      	nop
 800a610:	e000ed00 	.word	0xe000ed00
 800a614:	410fc271 	.word	0x410fc271
 800a618:	410fc270 	.word	0x410fc270
 800a61c:	e000e400 	.word	0xe000e400
 800a620:	20001028 	.word	0x20001028
 800a624:	2000102c 	.word	0x2000102c
 800a628:	e000ed20 	.word	0xe000ed20
 800a62c:	200000c0 	.word	0x200000c0
 800a630:	e000ef34 	.word	0xe000ef34

0800a634 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a634:	b480      	push	{r7}
 800a636:	b083      	sub	sp, #12
 800a638:	af00      	add	r7, sp, #0
	__asm volatile
 800a63a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a63e:	f383 8811 	msr	BASEPRI, r3
 800a642:	f3bf 8f6f 	isb	sy
 800a646:	f3bf 8f4f 	dsb	sy
 800a64a:	607b      	str	r3, [r7, #4]
}
 800a64c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a64e:	4b0f      	ldr	r3, [pc, #60]	; (800a68c <vPortEnterCritical+0x58>)
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	3301      	adds	r3, #1
 800a654:	4a0d      	ldr	r2, [pc, #52]	; (800a68c <vPortEnterCritical+0x58>)
 800a656:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a658:	4b0c      	ldr	r3, [pc, #48]	; (800a68c <vPortEnterCritical+0x58>)
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	2b01      	cmp	r3, #1
 800a65e:	d10f      	bne.n	800a680 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a660:	4b0b      	ldr	r3, [pc, #44]	; (800a690 <vPortEnterCritical+0x5c>)
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	b2db      	uxtb	r3, r3
 800a666:	2b00      	cmp	r3, #0
 800a668:	d00a      	beq.n	800a680 <vPortEnterCritical+0x4c>
	__asm volatile
 800a66a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a66e:	f383 8811 	msr	BASEPRI, r3
 800a672:	f3bf 8f6f 	isb	sy
 800a676:	f3bf 8f4f 	dsb	sy
 800a67a:	603b      	str	r3, [r7, #0]
}
 800a67c:	bf00      	nop
 800a67e:	e7fe      	b.n	800a67e <vPortEnterCritical+0x4a>
	}
}
 800a680:	bf00      	nop
 800a682:	370c      	adds	r7, #12
 800a684:	46bd      	mov	sp, r7
 800a686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a68a:	4770      	bx	lr
 800a68c:	200000c0 	.word	0x200000c0
 800a690:	e000ed04 	.word	0xe000ed04

0800a694 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a694:	b480      	push	{r7}
 800a696:	b083      	sub	sp, #12
 800a698:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a69a:	4b12      	ldr	r3, [pc, #72]	; (800a6e4 <vPortExitCritical+0x50>)
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d10a      	bne.n	800a6b8 <vPortExitCritical+0x24>
	__asm volatile
 800a6a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6a6:	f383 8811 	msr	BASEPRI, r3
 800a6aa:	f3bf 8f6f 	isb	sy
 800a6ae:	f3bf 8f4f 	dsb	sy
 800a6b2:	607b      	str	r3, [r7, #4]
}
 800a6b4:	bf00      	nop
 800a6b6:	e7fe      	b.n	800a6b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a6b8:	4b0a      	ldr	r3, [pc, #40]	; (800a6e4 <vPortExitCritical+0x50>)
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	3b01      	subs	r3, #1
 800a6be:	4a09      	ldr	r2, [pc, #36]	; (800a6e4 <vPortExitCritical+0x50>)
 800a6c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a6c2:	4b08      	ldr	r3, [pc, #32]	; (800a6e4 <vPortExitCritical+0x50>)
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d105      	bne.n	800a6d6 <vPortExitCritical+0x42>
 800a6ca:	2300      	movs	r3, #0
 800a6cc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a6ce:	683b      	ldr	r3, [r7, #0]
 800a6d0:	f383 8811 	msr	BASEPRI, r3
}
 800a6d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a6d6:	bf00      	nop
 800a6d8:	370c      	adds	r7, #12
 800a6da:	46bd      	mov	sp, r7
 800a6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e0:	4770      	bx	lr
 800a6e2:	bf00      	nop
 800a6e4:	200000c0 	.word	0x200000c0
	...

0800a6f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a6f0:	f3ef 8009 	mrs	r0, PSP
 800a6f4:	f3bf 8f6f 	isb	sy
 800a6f8:	4b15      	ldr	r3, [pc, #84]	; (800a750 <pxCurrentTCBConst>)
 800a6fa:	681a      	ldr	r2, [r3, #0]
 800a6fc:	f01e 0f10 	tst.w	lr, #16
 800a700:	bf08      	it	eq
 800a702:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a706:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a70a:	6010      	str	r0, [r2, #0]
 800a70c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a710:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a714:	f380 8811 	msr	BASEPRI, r0
 800a718:	f3bf 8f4f 	dsb	sy
 800a71c:	f3bf 8f6f 	isb	sy
 800a720:	f7fe ffc2 	bl	80096a8 <vTaskSwitchContext>
 800a724:	f04f 0000 	mov.w	r0, #0
 800a728:	f380 8811 	msr	BASEPRI, r0
 800a72c:	bc09      	pop	{r0, r3}
 800a72e:	6819      	ldr	r1, [r3, #0]
 800a730:	6808      	ldr	r0, [r1, #0]
 800a732:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a736:	f01e 0f10 	tst.w	lr, #16
 800a73a:	bf08      	it	eq
 800a73c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a740:	f380 8809 	msr	PSP, r0
 800a744:	f3bf 8f6f 	isb	sy
 800a748:	4770      	bx	lr
 800a74a:	bf00      	nop
 800a74c:	f3af 8000 	nop.w

0800a750 <pxCurrentTCBConst>:
 800a750:	200009fc 	.word	0x200009fc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a754:	bf00      	nop
 800a756:	bf00      	nop

0800a758 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a758:	b580      	push	{r7, lr}
 800a75a:	b082      	sub	sp, #8
 800a75c:	af00      	add	r7, sp, #0
	__asm volatile
 800a75e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a762:	f383 8811 	msr	BASEPRI, r3
 800a766:	f3bf 8f6f 	isb	sy
 800a76a:	f3bf 8f4f 	dsb	sy
 800a76e:	607b      	str	r3, [r7, #4]
}
 800a770:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a772:	f7fe fedf 	bl	8009534 <xTaskIncrementTick>
 800a776:	4603      	mov	r3, r0
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d003      	beq.n	800a784 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a77c:	4b06      	ldr	r3, [pc, #24]	; (800a798 <xPortSysTickHandler+0x40>)
 800a77e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a782:	601a      	str	r2, [r3, #0]
 800a784:	2300      	movs	r3, #0
 800a786:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a788:	683b      	ldr	r3, [r7, #0]
 800a78a:	f383 8811 	msr	BASEPRI, r3
}
 800a78e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a790:	bf00      	nop
 800a792:	3708      	adds	r7, #8
 800a794:	46bd      	mov	sp, r7
 800a796:	bd80      	pop	{r7, pc}
 800a798:	e000ed04 	.word	0xe000ed04

0800a79c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a79c:	b480      	push	{r7}
 800a79e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a7a0:	4b0b      	ldr	r3, [pc, #44]	; (800a7d0 <vPortSetupTimerInterrupt+0x34>)
 800a7a2:	2200      	movs	r2, #0
 800a7a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a7a6:	4b0b      	ldr	r3, [pc, #44]	; (800a7d4 <vPortSetupTimerInterrupt+0x38>)
 800a7a8:	2200      	movs	r2, #0
 800a7aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a7ac:	4b0a      	ldr	r3, [pc, #40]	; (800a7d8 <vPortSetupTimerInterrupt+0x3c>)
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	4a0a      	ldr	r2, [pc, #40]	; (800a7dc <vPortSetupTimerInterrupt+0x40>)
 800a7b2:	fba2 2303 	umull	r2, r3, r2, r3
 800a7b6:	099b      	lsrs	r3, r3, #6
 800a7b8:	4a09      	ldr	r2, [pc, #36]	; (800a7e0 <vPortSetupTimerInterrupt+0x44>)
 800a7ba:	3b01      	subs	r3, #1
 800a7bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a7be:	4b04      	ldr	r3, [pc, #16]	; (800a7d0 <vPortSetupTimerInterrupt+0x34>)
 800a7c0:	2207      	movs	r2, #7
 800a7c2:	601a      	str	r2, [r3, #0]
}
 800a7c4:	bf00      	nop
 800a7c6:	46bd      	mov	sp, r7
 800a7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7cc:	4770      	bx	lr
 800a7ce:	bf00      	nop
 800a7d0:	e000e010 	.word	0xe000e010
 800a7d4:	e000e018 	.word	0xe000e018
 800a7d8:	20000000 	.word	0x20000000
 800a7dc:	10624dd3 	.word	0x10624dd3
 800a7e0:	e000e014 	.word	0xe000e014

0800a7e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a7e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a7f4 <vPortEnableVFP+0x10>
 800a7e8:	6801      	ldr	r1, [r0, #0]
 800a7ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a7ee:	6001      	str	r1, [r0, #0]
 800a7f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a7f2:	bf00      	nop
 800a7f4:	e000ed88 	.word	0xe000ed88

0800a7f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a7f8:	b480      	push	{r7}
 800a7fa:	b085      	sub	sp, #20
 800a7fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a7fe:	f3ef 8305 	mrs	r3, IPSR
 800a802:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	2b0f      	cmp	r3, #15
 800a808:	d914      	bls.n	800a834 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a80a:	4a17      	ldr	r2, [pc, #92]	; (800a868 <vPortValidateInterruptPriority+0x70>)
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	4413      	add	r3, r2
 800a810:	781b      	ldrb	r3, [r3, #0]
 800a812:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a814:	4b15      	ldr	r3, [pc, #84]	; (800a86c <vPortValidateInterruptPriority+0x74>)
 800a816:	781b      	ldrb	r3, [r3, #0]
 800a818:	7afa      	ldrb	r2, [r7, #11]
 800a81a:	429a      	cmp	r2, r3
 800a81c:	d20a      	bcs.n	800a834 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a81e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a822:	f383 8811 	msr	BASEPRI, r3
 800a826:	f3bf 8f6f 	isb	sy
 800a82a:	f3bf 8f4f 	dsb	sy
 800a82e:	607b      	str	r3, [r7, #4]
}
 800a830:	bf00      	nop
 800a832:	e7fe      	b.n	800a832 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a834:	4b0e      	ldr	r3, [pc, #56]	; (800a870 <vPortValidateInterruptPriority+0x78>)
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a83c:	4b0d      	ldr	r3, [pc, #52]	; (800a874 <vPortValidateInterruptPriority+0x7c>)
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	429a      	cmp	r2, r3
 800a842:	d90a      	bls.n	800a85a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a844:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a848:	f383 8811 	msr	BASEPRI, r3
 800a84c:	f3bf 8f6f 	isb	sy
 800a850:	f3bf 8f4f 	dsb	sy
 800a854:	603b      	str	r3, [r7, #0]
}
 800a856:	bf00      	nop
 800a858:	e7fe      	b.n	800a858 <vPortValidateInterruptPriority+0x60>
	}
 800a85a:	bf00      	nop
 800a85c:	3714      	adds	r7, #20
 800a85e:	46bd      	mov	sp, r7
 800a860:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a864:	4770      	bx	lr
 800a866:	bf00      	nop
 800a868:	e000e3f0 	.word	0xe000e3f0
 800a86c:	20001028 	.word	0x20001028
 800a870:	e000ed0c 	.word	0xe000ed0c
 800a874:	2000102c 	.word	0x2000102c

0800a878 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a878:	b580      	push	{r7, lr}
 800a87a:	b08a      	sub	sp, #40	; 0x28
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a880:	2300      	movs	r3, #0
 800a882:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a884:	f7fe fd9a 	bl	80093bc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a888:	4b5b      	ldr	r3, [pc, #364]	; (800a9f8 <pvPortMalloc+0x180>)
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d101      	bne.n	800a894 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a890:	f000 f920 	bl	800aad4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a894:	4b59      	ldr	r3, [pc, #356]	; (800a9fc <pvPortMalloc+0x184>)
 800a896:	681a      	ldr	r2, [r3, #0]
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	4013      	ands	r3, r2
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	f040 8093 	bne.w	800a9c8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d01d      	beq.n	800a8e4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a8a8:	2208      	movs	r2, #8
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	4413      	add	r3, r2
 800a8ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	f003 0307 	and.w	r3, r3, #7
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d014      	beq.n	800a8e4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	f023 0307 	bic.w	r3, r3, #7
 800a8c0:	3308      	adds	r3, #8
 800a8c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	f003 0307 	and.w	r3, r3, #7
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d00a      	beq.n	800a8e4 <pvPortMalloc+0x6c>
	__asm volatile
 800a8ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8d2:	f383 8811 	msr	BASEPRI, r3
 800a8d6:	f3bf 8f6f 	isb	sy
 800a8da:	f3bf 8f4f 	dsb	sy
 800a8de:	617b      	str	r3, [r7, #20]
}
 800a8e0:	bf00      	nop
 800a8e2:	e7fe      	b.n	800a8e2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d06e      	beq.n	800a9c8 <pvPortMalloc+0x150>
 800a8ea:	4b45      	ldr	r3, [pc, #276]	; (800aa00 <pvPortMalloc+0x188>)
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	687a      	ldr	r2, [r7, #4]
 800a8f0:	429a      	cmp	r2, r3
 800a8f2:	d869      	bhi.n	800a9c8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a8f4:	4b43      	ldr	r3, [pc, #268]	; (800aa04 <pvPortMalloc+0x18c>)
 800a8f6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a8f8:	4b42      	ldr	r3, [pc, #264]	; (800aa04 <pvPortMalloc+0x18c>)
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a8fe:	e004      	b.n	800a90a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a902:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a90a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a90c:	685b      	ldr	r3, [r3, #4]
 800a90e:	687a      	ldr	r2, [r7, #4]
 800a910:	429a      	cmp	r2, r3
 800a912:	d903      	bls.n	800a91c <pvPortMalloc+0xa4>
 800a914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d1f1      	bne.n	800a900 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a91c:	4b36      	ldr	r3, [pc, #216]	; (800a9f8 <pvPortMalloc+0x180>)
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a922:	429a      	cmp	r2, r3
 800a924:	d050      	beq.n	800a9c8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a926:	6a3b      	ldr	r3, [r7, #32]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	2208      	movs	r2, #8
 800a92c:	4413      	add	r3, r2
 800a92e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a932:	681a      	ldr	r2, [r3, #0]
 800a934:	6a3b      	ldr	r3, [r7, #32]
 800a936:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a93a:	685a      	ldr	r2, [r3, #4]
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	1ad2      	subs	r2, r2, r3
 800a940:	2308      	movs	r3, #8
 800a942:	005b      	lsls	r3, r3, #1
 800a944:	429a      	cmp	r2, r3
 800a946:	d91f      	bls.n	800a988 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a948:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	4413      	add	r3, r2
 800a94e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a950:	69bb      	ldr	r3, [r7, #24]
 800a952:	f003 0307 	and.w	r3, r3, #7
 800a956:	2b00      	cmp	r3, #0
 800a958:	d00a      	beq.n	800a970 <pvPortMalloc+0xf8>
	__asm volatile
 800a95a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a95e:	f383 8811 	msr	BASEPRI, r3
 800a962:	f3bf 8f6f 	isb	sy
 800a966:	f3bf 8f4f 	dsb	sy
 800a96a:	613b      	str	r3, [r7, #16]
}
 800a96c:	bf00      	nop
 800a96e:	e7fe      	b.n	800a96e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a972:	685a      	ldr	r2, [r3, #4]
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	1ad2      	subs	r2, r2, r3
 800a978:	69bb      	ldr	r3, [r7, #24]
 800a97a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a97c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a97e:	687a      	ldr	r2, [r7, #4]
 800a980:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a982:	69b8      	ldr	r0, [r7, #24]
 800a984:	f000 f908 	bl	800ab98 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a988:	4b1d      	ldr	r3, [pc, #116]	; (800aa00 <pvPortMalloc+0x188>)
 800a98a:	681a      	ldr	r2, [r3, #0]
 800a98c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a98e:	685b      	ldr	r3, [r3, #4]
 800a990:	1ad3      	subs	r3, r2, r3
 800a992:	4a1b      	ldr	r2, [pc, #108]	; (800aa00 <pvPortMalloc+0x188>)
 800a994:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a996:	4b1a      	ldr	r3, [pc, #104]	; (800aa00 <pvPortMalloc+0x188>)
 800a998:	681a      	ldr	r2, [r3, #0]
 800a99a:	4b1b      	ldr	r3, [pc, #108]	; (800aa08 <pvPortMalloc+0x190>)
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	429a      	cmp	r2, r3
 800a9a0:	d203      	bcs.n	800a9aa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a9a2:	4b17      	ldr	r3, [pc, #92]	; (800aa00 <pvPortMalloc+0x188>)
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	4a18      	ldr	r2, [pc, #96]	; (800aa08 <pvPortMalloc+0x190>)
 800a9a8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a9aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9ac:	685a      	ldr	r2, [r3, #4]
 800a9ae:	4b13      	ldr	r3, [pc, #76]	; (800a9fc <pvPortMalloc+0x184>)
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	431a      	orrs	r2, r3
 800a9b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9b6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a9b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9ba:	2200      	movs	r2, #0
 800a9bc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a9be:	4b13      	ldr	r3, [pc, #76]	; (800aa0c <pvPortMalloc+0x194>)
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	3301      	adds	r3, #1
 800a9c4:	4a11      	ldr	r2, [pc, #68]	; (800aa0c <pvPortMalloc+0x194>)
 800a9c6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a9c8:	f7fe fd06 	bl	80093d8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a9cc:	69fb      	ldr	r3, [r7, #28]
 800a9ce:	f003 0307 	and.w	r3, r3, #7
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d00a      	beq.n	800a9ec <pvPortMalloc+0x174>
	__asm volatile
 800a9d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9da:	f383 8811 	msr	BASEPRI, r3
 800a9de:	f3bf 8f6f 	isb	sy
 800a9e2:	f3bf 8f4f 	dsb	sy
 800a9e6:	60fb      	str	r3, [r7, #12]
}
 800a9e8:	bf00      	nop
 800a9ea:	e7fe      	b.n	800a9ea <pvPortMalloc+0x172>
	return pvReturn;
 800a9ec:	69fb      	ldr	r3, [r7, #28]
}
 800a9ee:	4618      	mov	r0, r3
 800a9f0:	3728      	adds	r7, #40	; 0x28
 800a9f2:	46bd      	mov	sp, r7
 800a9f4:	bd80      	pop	{r7, pc}
 800a9f6:	bf00      	nop
 800a9f8:	20001bf0 	.word	0x20001bf0
 800a9fc:	20001c04 	.word	0x20001c04
 800aa00:	20001bf4 	.word	0x20001bf4
 800aa04:	20001be8 	.word	0x20001be8
 800aa08:	20001bf8 	.word	0x20001bf8
 800aa0c:	20001bfc 	.word	0x20001bfc

0800aa10 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800aa10:	b580      	push	{r7, lr}
 800aa12:	b086      	sub	sp, #24
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d04d      	beq.n	800aabe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800aa22:	2308      	movs	r3, #8
 800aa24:	425b      	negs	r3, r3
 800aa26:	697a      	ldr	r2, [r7, #20]
 800aa28:	4413      	add	r3, r2
 800aa2a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800aa2c:	697b      	ldr	r3, [r7, #20]
 800aa2e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800aa30:	693b      	ldr	r3, [r7, #16]
 800aa32:	685a      	ldr	r2, [r3, #4]
 800aa34:	4b24      	ldr	r3, [pc, #144]	; (800aac8 <vPortFree+0xb8>)
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	4013      	ands	r3, r2
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d10a      	bne.n	800aa54 <vPortFree+0x44>
	__asm volatile
 800aa3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa42:	f383 8811 	msr	BASEPRI, r3
 800aa46:	f3bf 8f6f 	isb	sy
 800aa4a:	f3bf 8f4f 	dsb	sy
 800aa4e:	60fb      	str	r3, [r7, #12]
}
 800aa50:	bf00      	nop
 800aa52:	e7fe      	b.n	800aa52 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800aa54:	693b      	ldr	r3, [r7, #16]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d00a      	beq.n	800aa72 <vPortFree+0x62>
	__asm volatile
 800aa5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa60:	f383 8811 	msr	BASEPRI, r3
 800aa64:	f3bf 8f6f 	isb	sy
 800aa68:	f3bf 8f4f 	dsb	sy
 800aa6c:	60bb      	str	r3, [r7, #8]
}
 800aa6e:	bf00      	nop
 800aa70:	e7fe      	b.n	800aa70 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800aa72:	693b      	ldr	r3, [r7, #16]
 800aa74:	685a      	ldr	r2, [r3, #4]
 800aa76:	4b14      	ldr	r3, [pc, #80]	; (800aac8 <vPortFree+0xb8>)
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	4013      	ands	r3, r2
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d01e      	beq.n	800aabe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800aa80:	693b      	ldr	r3, [r7, #16]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d11a      	bne.n	800aabe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800aa88:	693b      	ldr	r3, [r7, #16]
 800aa8a:	685a      	ldr	r2, [r3, #4]
 800aa8c:	4b0e      	ldr	r3, [pc, #56]	; (800aac8 <vPortFree+0xb8>)
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	43db      	mvns	r3, r3
 800aa92:	401a      	ands	r2, r3
 800aa94:	693b      	ldr	r3, [r7, #16]
 800aa96:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800aa98:	f7fe fc90 	bl	80093bc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800aa9c:	693b      	ldr	r3, [r7, #16]
 800aa9e:	685a      	ldr	r2, [r3, #4]
 800aaa0:	4b0a      	ldr	r3, [pc, #40]	; (800aacc <vPortFree+0xbc>)
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	4413      	add	r3, r2
 800aaa6:	4a09      	ldr	r2, [pc, #36]	; (800aacc <vPortFree+0xbc>)
 800aaa8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800aaaa:	6938      	ldr	r0, [r7, #16]
 800aaac:	f000 f874 	bl	800ab98 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800aab0:	4b07      	ldr	r3, [pc, #28]	; (800aad0 <vPortFree+0xc0>)
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	3301      	adds	r3, #1
 800aab6:	4a06      	ldr	r2, [pc, #24]	; (800aad0 <vPortFree+0xc0>)
 800aab8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800aaba:	f7fe fc8d 	bl	80093d8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800aabe:	bf00      	nop
 800aac0:	3718      	adds	r7, #24
 800aac2:	46bd      	mov	sp, r7
 800aac4:	bd80      	pop	{r7, pc}
 800aac6:	bf00      	nop
 800aac8:	20001c04 	.word	0x20001c04
 800aacc:	20001bf4 	.word	0x20001bf4
 800aad0:	20001c00 	.word	0x20001c00

0800aad4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800aad4:	b480      	push	{r7}
 800aad6:	b085      	sub	sp, #20
 800aad8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800aada:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800aade:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800aae0:	4b27      	ldr	r3, [pc, #156]	; (800ab80 <prvHeapInit+0xac>)
 800aae2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	f003 0307 	and.w	r3, r3, #7
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d00c      	beq.n	800ab08 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	3307      	adds	r3, #7
 800aaf2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	f023 0307 	bic.w	r3, r3, #7
 800aafa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800aafc:	68ba      	ldr	r2, [r7, #8]
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	1ad3      	subs	r3, r2, r3
 800ab02:	4a1f      	ldr	r2, [pc, #124]	; (800ab80 <prvHeapInit+0xac>)
 800ab04:	4413      	add	r3, r2
 800ab06:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ab0c:	4a1d      	ldr	r2, [pc, #116]	; (800ab84 <prvHeapInit+0xb0>)
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ab12:	4b1c      	ldr	r3, [pc, #112]	; (800ab84 <prvHeapInit+0xb0>)
 800ab14:	2200      	movs	r2, #0
 800ab16:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	68ba      	ldr	r2, [r7, #8]
 800ab1c:	4413      	add	r3, r2
 800ab1e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ab20:	2208      	movs	r2, #8
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	1a9b      	subs	r3, r3, r2
 800ab26:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	f023 0307 	bic.w	r3, r3, #7
 800ab2e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	4a15      	ldr	r2, [pc, #84]	; (800ab88 <prvHeapInit+0xb4>)
 800ab34:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ab36:	4b14      	ldr	r3, [pc, #80]	; (800ab88 <prvHeapInit+0xb4>)
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	2200      	movs	r2, #0
 800ab3c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ab3e:	4b12      	ldr	r3, [pc, #72]	; (800ab88 <prvHeapInit+0xb4>)
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	2200      	movs	r2, #0
 800ab44:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ab4a:	683b      	ldr	r3, [r7, #0]
 800ab4c:	68fa      	ldr	r2, [r7, #12]
 800ab4e:	1ad2      	subs	r2, r2, r3
 800ab50:	683b      	ldr	r3, [r7, #0]
 800ab52:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ab54:	4b0c      	ldr	r3, [pc, #48]	; (800ab88 <prvHeapInit+0xb4>)
 800ab56:	681a      	ldr	r2, [r3, #0]
 800ab58:	683b      	ldr	r3, [r7, #0]
 800ab5a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ab5c:	683b      	ldr	r3, [r7, #0]
 800ab5e:	685b      	ldr	r3, [r3, #4]
 800ab60:	4a0a      	ldr	r2, [pc, #40]	; (800ab8c <prvHeapInit+0xb8>)
 800ab62:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ab64:	683b      	ldr	r3, [r7, #0]
 800ab66:	685b      	ldr	r3, [r3, #4]
 800ab68:	4a09      	ldr	r2, [pc, #36]	; (800ab90 <prvHeapInit+0xbc>)
 800ab6a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ab6c:	4b09      	ldr	r3, [pc, #36]	; (800ab94 <prvHeapInit+0xc0>)
 800ab6e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ab72:	601a      	str	r2, [r3, #0]
}
 800ab74:	bf00      	nop
 800ab76:	3714      	adds	r7, #20
 800ab78:	46bd      	mov	sp, r7
 800ab7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab7e:	4770      	bx	lr
 800ab80:	20001030 	.word	0x20001030
 800ab84:	20001be8 	.word	0x20001be8
 800ab88:	20001bf0 	.word	0x20001bf0
 800ab8c:	20001bf8 	.word	0x20001bf8
 800ab90:	20001bf4 	.word	0x20001bf4
 800ab94:	20001c04 	.word	0x20001c04

0800ab98 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ab98:	b480      	push	{r7}
 800ab9a:	b085      	sub	sp, #20
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800aba0:	4b28      	ldr	r3, [pc, #160]	; (800ac44 <prvInsertBlockIntoFreeList+0xac>)
 800aba2:	60fb      	str	r3, [r7, #12]
 800aba4:	e002      	b.n	800abac <prvInsertBlockIntoFreeList+0x14>
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	60fb      	str	r3, [r7, #12]
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	687a      	ldr	r2, [r7, #4]
 800abb2:	429a      	cmp	r2, r3
 800abb4:	d8f7      	bhi.n	800aba6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	685b      	ldr	r3, [r3, #4]
 800abbe:	68ba      	ldr	r2, [r7, #8]
 800abc0:	4413      	add	r3, r2
 800abc2:	687a      	ldr	r2, [r7, #4]
 800abc4:	429a      	cmp	r2, r3
 800abc6:	d108      	bne.n	800abda <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	685a      	ldr	r2, [r3, #4]
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	685b      	ldr	r3, [r3, #4]
 800abd0:	441a      	add	r2, r3
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	685b      	ldr	r3, [r3, #4]
 800abe2:	68ba      	ldr	r2, [r7, #8]
 800abe4:	441a      	add	r2, r3
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	429a      	cmp	r2, r3
 800abec:	d118      	bne.n	800ac20 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	681a      	ldr	r2, [r3, #0]
 800abf2:	4b15      	ldr	r3, [pc, #84]	; (800ac48 <prvInsertBlockIntoFreeList+0xb0>)
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	429a      	cmp	r2, r3
 800abf8:	d00d      	beq.n	800ac16 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	685a      	ldr	r2, [r3, #4]
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	685b      	ldr	r3, [r3, #4]
 800ac04:	441a      	add	r2, r3
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	681a      	ldr	r2, [r3, #0]
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	601a      	str	r2, [r3, #0]
 800ac14:	e008      	b.n	800ac28 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ac16:	4b0c      	ldr	r3, [pc, #48]	; (800ac48 <prvInsertBlockIntoFreeList+0xb0>)
 800ac18:	681a      	ldr	r2, [r3, #0]
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	601a      	str	r2, [r3, #0]
 800ac1e:	e003      	b.n	800ac28 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	681a      	ldr	r2, [r3, #0]
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ac28:	68fa      	ldr	r2, [r7, #12]
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	429a      	cmp	r2, r3
 800ac2e:	d002      	beq.n	800ac36 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	687a      	ldr	r2, [r7, #4]
 800ac34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ac36:	bf00      	nop
 800ac38:	3714      	adds	r7, #20
 800ac3a:	46bd      	mov	sp, r7
 800ac3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac40:	4770      	bx	lr
 800ac42:	bf00      	nop
 800ac44:	20001be8 	.word	0x20001be8
 800ac48:	20001bf0 	.word	0x20001bf0

0800ac4c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800ac4c:	b580      	push	{r7, lr}
 800ac4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800ac50:	2200      	movs	r2, #0
 800ac52:	490e      	ldr	r1, [pc, #56]	; (800ac8c <MX_USB_DEVICE_Init+0x40>)
 800ac54:	480e      	ldr	r0, [pc, #56]	; (800ac90 <MX_USB_DEVICE_Init+0x44>)
 800ac56:	f7fb ff6f 	bl	8006b38 <USBD_Init>
 800ac5a:	4603      	mov	r3, r0
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d001      	beq.n	800ac64 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800ac60:	f7f6 f8be 	bl	8000de0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 800ac64:	490b      	ldr	r1, [pc, #44]	; (800ac94 <MX_USB_DEVICE_Init+0x48>)
 800ac66:	480a      	ldr	r0, [pc, #40]	; (800ac90 <MX_USB_DEVICE_Init+0x44>)
 800ac68:	f7fb ff96 	bl	8006b98 <USBD_RegisterClass>
 800ac6c:	4603      	mov	r3, r0
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d001      	beq.n	800ac76 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800ac72:	f7f6 f8b5 	bl	8000de0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800ac76:	4806      	ldr	r0, [pc, #24]	; (800ac90 <MX_USB_DEVICE_Init+0x44>)
 800ac78:	f7fb ffc4 	bl	8006c04 <USBD_Start>
 800ac7c:	4603      	mov	r3, r0
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d001      	beq.n	800ac86 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 800ac82:	f7f6 f8ad 	bl	8000de0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ac86:	bf00      	nop
 800ac88:	bd80      	pop	{r7, pc}
 800ac8a:	bf00      	nop
 800ac8c:	200000c4 	.word	0x200000c4
 800ac90:	20001c08 	.word	0x20001c08
 800ac94:	2000000c 	.word	0x2000000c

0800ac98 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ac98:	b480      	push	{r7}
 800ac9a:	b083      	sub	sp, #12
 800ac9c:	af00      	add	r7, sp, #0
 800ac9e:	4603      	mov	r3, r0
 800aca0:	6039      	str	r1, [r7, #0]
 800aca2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800aca4:	683b      	ldr	r3, [r7, #0]
 800aca6:	2212      	movs	r2, #18
 800aca8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800acaa:	4b03      	ldr	r3, [pc, #12]	; (800acb8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800acac:	4618      	mov	r0, r3
 800acae:	370c      	adds	r7, #12
 800acb0:	46bd      	mov	sp, r7
 800acb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb6:	4770      	bx	lr
 800acb8:	200000e4 	.word	0x200000e4

0800acbc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800acbc:	b480      	push	{r7}
 800acbe:	b083      	sub	sp, #12
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	4603      	mov	r3, r0
 800acc4:	6039      	str	r1, [r7, #0]
 800acc6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800acc8:	683b      	ldr	r3, [r7, #0]
 800acca:	2204      	movs	r2, #4
 800accc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800acce:	4b03      	ldr	r3, [pc, #12]	; (800acdc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800acd0:	4618      	mov	r0, r3
 800acd2:	370c      	adds	r7, #12
 800acd4:	46bd      	mov	sp, r7
 800acd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acda:	4770      	bx	lr
 800acdc:	20000104 	.word	0x20000104

0800ace0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ace0:	b580      	push	{r7, lr}
 800ace2:	b082      	sub	sp, #8
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	4603      	mov	r3, r0
 800ace8:	6039      	str	r1, [r7, #0]
 800acea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800acec:	79fb      	ldrb	r3, [r7, #7]
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d105      	bne.n	800acfe <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800acf2:	683a      	ldr	r2, [r7, #0]
 800acf4:	4907      	ldr	r1, [pc, #28]	; (800ad14 <USBD_FS_ProductStrDescriptor+0x34>)
 800acf6:	4808      	ldr	r0, [pc, #32]	; (800ad18 <USBD_FS_ProductStrDescriptor+0x38>)
 800acf8:	f7fd f960 	bl	8007fbc <USBD_GetString>
 800acfc:	e004      	b.n	800ad08 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800acfe:	683a      	ldr	r2, [r7, #0]
 800ad00:	4904      	ldr	r1, [pc, #16]	; (800ad14 <USBD_FS_ProductStrDescriptor+0x34>)
 800ad02:	4805      	ldr	r0, [pc, #20]	; (800ad18 <USBD_FS_ProductStrDescriptor+0x38>)
 800ad04:	f7fd f95a 	bl	8007fbc <USBD_GetString>
  }
  return USBD_StrDesc;
 800ad08:	4b02      	ldr	r3, [pc, #8]	; (800ad14 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800ad0a:	4618      	mov	r0, r3
 800ad0c:	3708      	adds	r7, #8
 800ad0e:	46bd      	mov	sp, r7
 800ad10:	bd80      	pop	{r7, pc}
 800ad12:	bf00      	nop
 800ad14:	20001ee4 	.word	0x20001ee4
 800ad18:	0800b820 	.word	0x0800b820

0800ad1c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ad1c:	b580      	push	{r7, lr}
 800ad1e:	b082      	sub	sp, #8
 800ad20:	af00      	add	r7, sp, #0
 800ad22:	4603      	mov	r3, r0
 800ad24:	6039      	str	r1, [r7, #0]
 800ad26:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ad28:	683a      	ldr	r2, [r7, #0]
 800ad2a:	4904      	ldr	r1, [pc, #16]	; (800ad3c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800ad2c:	4804      	ldr	r0, [pc, #16]	; (800ad40 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800ad2e:	f7fd f945 	bl	8007fbc <USBD_GetString>
  return USBD_StrDesc;
 800ad32:	4b02      	ldr	r3, [pc, #8]	; (800ad3c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800ad34:	4618      	mov	r0, r3
 800ad36:	3708      	adds	r7, #8
 800ad38:	46bd      	mov	sp, r7
 800ad3a:	bd80      	pop	{r7, pc}
 800ad3c:	20001ee4 	.word	0x20001ee4
 800ad40:	0800b838 	.word	0x0800b838

0800ad44 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ad44:	b580      	push	{r7, lr}
 800ad46:	b082      	sub	sp, #8
 800ad48:	af00      	add	r7, sp, #0
 800ad4a:	4603      	mov	r3, r0
 800ad4c:	6039      	str	r1, [r7, #0]
 800ad4e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ad50:	683b      	ldr	r3, [r7, #0]
 800ad52:	221a      	movs	r2, #26
 800ad54:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ad56:	f000 f855 	bl	800ae04 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800ad5a:	4b02      	ldr	r3, [pc, #8]	; (800ad64 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800ad5c:	4618      	mov	r0, r3
 800ad5e:	3708      	adds	r7, #8
 800ad60:	46bd      	mov	sp, r7
 800ad62:	bd80      	pop	{r7, pc}
 800ad64:	20000108 	.word	0x20000108

0800ad68 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ad68:	b580      	push	{r7, lr}
 800ad6a:	b082      	sub	sp, #8
 800ad6c:	af00      	add	r7, sp, #0
 800ad6e:	4603      	mov	r3, r0
 800ad70:	6039      	str	r1, [r7, #0]
 800ad72:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ad74:	79fb      	ldrb	r3, [r7, #7]
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d105      	bne.n	800ad86 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ad7a:	683a      	ldr	r2, [r7, #0]
 800ad7c:	4907      	ldr	r1, [pc, #28]	; (800ad9c <USBD_FS_ConfigStrDescriptor+0x34>)
 800ad7e:	4808      	ldr	r0, [pc, #32]	; (800ada0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ad80:	f7fd f91c 	bl	8007fbc <USBD_GetString>
 800ad84:	e004      	b.n	800ad90 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ad86:	683a      	ldr	r2, [r7, #0]
 800ad88:	4904      	ldr	r1, [pc, #16]	; (800ad9c <USBD_FS_ConfigStrDescriptor+0x34>)
 800ad8a:	4805      	ldr	r0, [pc, #20]	; (800ada0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ad8c:	f7fd f916 	bl	8007fbc <USBD_GetString>
  }
  return USBD_StrDesc;
 800ad90:	4b02      	ldr	r3, [pc, #8]	; (800ad9c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800ad92:	4618      	mov	r0, r3
 800ad94:	3708      	adds	r7, #8
 800ad96:	46bd      	mov	sp, r7
 800ad98:	bd80      	pop	{r7, pc}
 800ad9a:	bf00      	nop
 800ad9c:	20001ee4 	.word	0x20001ee4
 800ada0:	0800b84c 	.word	0x0800b84c

0800ada4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ada4:	b580      	push	{r7, lr}
 800ada6:	b082      	sub	sp, #8
 800ada8:	af00      	add	r7, sp, #0
 800adaa:	4603      	mov	r3, r0
 800adac:	6039      	str	r1, [r7, #0]
 800adae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800adb0:	79fb      	ldrb	r3, [r7, #7]
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d105      	bne.n	800adc2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800adb6:	683a      	ldr	r2, [r7, #0]
 800adb8:	4907      	ldr	r1, [pc, #28]	; (800add8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800adba:	4808      	ldr	r0, [pc, #32]	; (800addc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800adbc:	f7fd f8fe 	bl	8007fbc <USBD_GetString>
 800adc0:	e004      	b.n	800adcc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800adc2:	683a      	ldr	r2, [r7, #0]
 800adc4:	4904      	ldr	r1, [pc, #16]	; (800add8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800adc6:	4805      	ldr	r0, [pc, #20]	; (800addc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800adc8:	f7fd f8f8 	bl	8007fbc <USBD_GetString>
  }
  return USBD_StrDesc;
 800adcc:	4b02      	ldr	r3, [pc, #8]	; (800add8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800adce:	4618      	mov	r0, r3
 800add0:	3708      	adds	r7, #8
 800add2:	46bd      	mov	sp, r7
 800add4:	bd80      	pop	{r7, pc}
 800add6:	bf00      	nop
 800add8:	20001ee4 	.word	0x20001ee4
 800addc:	0800b858 	.word	0x0800b858

0800ade0 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ade0:	b480      	push	{r7}
 800ade2:	b083      	sub	sp, #12
 800ade4:	af00      	add	r7, sp, #0
 800ade6:	4603      	mov	r3, r0
 800ade8:	6039      	str	r1, [r7, #0]
 800adea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800adec:	683b      	ldr	r3, [r7, #0]
 800adee:	220c      	movs	r2, #12
 800adf0:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800adf2:	4b03      	ldr	r3, [pc, #12]	; (800ae00 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800adf4:	4618      	mov	r0, r3
 800adf6:	370c      	adds	r7, #12
 800adf8:	46bd      	mov	sp, r7
 800adfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adfe:	4770      	bx	lr
 800ae00:	200000f8 	.word	0x200000f8

0800ae04 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ae04:	b580      	push	{r7, lr}
 800ae06:	b084      	sub	sp, #16
 800ae08:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ae0a:	4b0f      	ldr	r3, [pc, #60]	; (800ae48 <Get_SerialNum+0x44>)
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ae10:	4b0e      	ldr	r3, [pc, #56]	; (800ae4c <Get_SerialNum+0x48>)
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ae16:	4b0e      	ldr	r3, [pc, #56]	; (800ae50 <Get_SerialNum+0x4c>)
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ae1c:	68fa      	ldr	r2, [r7, #12]
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	4413      	add	r3, r2
 800ae22:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d009      	beq.n	800ae3e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ae2a:	2208      	movs	r2, #8
 800ae2c:	4909      	ldr	r1, [pc, #36]	; (800ae54 <Get_SerialNum+0x50>)
 800ae2e:	68f8      	ldr	r0, [r7, #12]
 800ae30:	f000 f814 	bl	800ae5c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ae34:	2204      	movs	r2, #4
 800ae36:	4908      	ldr	r1, [pc, #32]	; (800ae58 <Get_SerialNum+0x54>)
 800ae38:	68b8      	ldr	r0, [r7, #8]
 800ae3a:	f000 f80f 	bl	800ae5c <IntToUnicode>
  }
}
 800ae3e:	bf00      	nop
 800ae40:	3710      	adds	r7, #16
 800ae42:	46bd      	mov	sp, r7
 800ae44:	bd80      	pop	{r7, pc}
 800ae46:	bf00      	nop
 800ae48:	1fff7590 	.word	0x1fff7590
 800ae4c:	1fff7594 	.word	0x1fff7594
 800ae50:	1fff7598 	.word	0x1fff7598
 800ae54:	2000010a 	.word	0x2000010a
 800ae58:	2000011a 	.word	0x2000011a

0800ae5c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ae5c:	b480      	push	{r7}
 800ae5e:	b087      	sub	sp, #28
 800ae60:	af00      	add	r7, sp, #0
 800ae62:	60f8      	str	r0, [r7, #12]
 800ae64:	60b9      	str	r1, [r7, #8]
 800ae66:	4613      	mov	r3, r2
 800ae68:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ae6a:	2300      	movs	r3, #0
 800ae6c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ae6e:	2300      	movs	r3, #0
 800ae70:	75fb      	strb	r3, [r7, #23]
 800ae72:	e027      	b.n	800aec4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	0f1b      	lsrs	r3, r3, #28
 800ae78:	2b09      	cmp	r3, #9
 800ae7a:	d80b      	bhi.n	800ae94 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	0f1b      	lsrs	r3, r3, #28
 800ae80:	b2da      	uxtb	r2, r3
 800ae82:	7dfb      	ldrb	r3, [r7, #23]
 800ae84:	005b      	lsls	r3, r3, #1
 800ae86:	4619      	mov	r1, r3
 800ae88:	68bb      	ldr	r3, [r7, #8]
 800ae8a:	440b      	add	r3, r1
 800ae8c:	3230      	adds	r2, #48	; 0x30
 800ae8e:	b2d2      	uxtb	r2, r2
 800ae90:	701a      	strb	r2, [r3, #0]
 800ae92:	e00a      	b.n	800aeaa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	0f1b      	lsrs	r3, r3, #28
 800ae98:	b2da      	uxtb	r2, r3
 800ae9a:	7dfb      	ldrb	r3, [r7, #23]
 800ae9c:	005b      	lsls	r3, r3, #1
 800ae9e:	4619      	mov	r1, r3
 800aea0:	68bb      	ldr	r3, [r7, #8]
 800aea2:	440b      	add	r3, r1
 800aea4:	3237      	adds	r2, #55	; 0x37
 800aea6:	b2d2      	uxtb	r2, r2
 800aea8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	011b      	lsls	r3, r3, #4
 800aeae:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800aeb0:	7dfb      	ldrb	r3, [r7, #23]
 800aeb2:	005b      	lsls	r3, r3, #1
 800aeb4:	3301      	adds	r3, #1
 800aeb6:	68ba      	ldr	r2, [r7, #8]
 800aeb8:	4413      	add	r3, r2
 800aeba:	2200      	movs	r2, #0
 800aebc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800aebe:	7dfb      	ldrb	r3, [r7, #23]
 800aec0:	3301      	adds	r3, #1
 800aec2:	75fb      	strb	r3, [r7, #23]
 800aec4:	7dfa      	ldrb	r2, [r7, #23]
 800aec6:	79fb      	ldrb	r3, [r7, #7]
 800aec8:	429a      	cmp	r2, r3
 800aeca:	d3d3      	bcc.n	800ae74 <IntToUnicode+0x18>
  }
}
 800aecc:	bf00      	nop
 800aece:	bf00      	nop
 800aed0:	371c      	adds	r7, #28
 800aed2:	46bd      	mov	sp, r7
 800aed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed8:	4770      	bx	lr
	...

0800aedc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800aedc:	b580      	push	{r7, lr}
 800aede:	b0ae      	sub	sp, #184	; 0xb8
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800aee4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800aee8:	2200      	movs	r2, #0
 800aeea:	601a      	str	r2, [r3, #0]
 800aeec:	605a      	str	r2, [r3, #4]
 800aeee:	609a      	str	r2, [r3, #8]
 800aef0:	60da      	str	r2, [r3, #12]
 800aef2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800aef4:	f107 0318 	add.w	r3, r7, #24
 800aef8:	228c      	movs	r2, #140	; 0x8c
 800aefa:	2100      	movs	r1, #0
 800aefc:	4618      	mov	r0, r3
 800aefe:	f000 fc2f 	bl	800b760 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800af0a:	f040 8085 	bne.w	800b018 <HAL_PCD_MspInit+0x13c>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800af0e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800af12:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800af14:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800af18:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800af1c:	2301      	movs	r3, #1
 800af1e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800af20:	2301      	movs	r3, #1
 800af22:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800af24:	2318      	movs	r3, #24
 800af26:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 800af28:	2302      	movs	r3, #2
 800af2a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800af2c:	2302      	movs	r3, #2
 800af2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800af30:	2302      	movs	r3, #2
 800af32:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800af34:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800af38:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800af3a:	f107 0318 	add.w	r3, r7, #24
 800af3e:	4618      	mov	r0, r3
 800af40:	f7f8 fc32 	bl	80037a8 <HAL_RCCEx_PeriphCLKConfig>
 800af44:	4603      	mov	r3, r0
 800af46:	2b00      	cmp	r3, #0
 800af48:	d001      	beq.n	800af4e <HAL_PCD_MspInit+0x72>
    {
      Error_Handler();
 800af4a:	f7f5 ff49 	bl	8000de0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800af4e:	4b34      	ldr	r3, [pc, #208]	; (800b020 <HAL_PCD_MspInit+0x144>)
 800af50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af52:	4a33      	ldr	r2, [pc, #204]	; (800b020 <HAL_PCD_MspInit+0x144>)
 800af54:	f043 0301 	orr.w	r3, r3, #1
 800af58:	64d3      	str	r3, [r2, #76]	; 0x4c
 800af5a:	4b31      	ldr	r3, [pc, #196]	; (800b020 <HAL_PCD_MspInit+0x144>)
 800af5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af5e:	f003 0301 	and.w	r3, r3, #1
 800af62:	617b      	str	r3, [r7, #20]
 800af64:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800af66:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800af6a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800af6e:	2302      	movs	r3, #2
 800af70:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800af74:	2300      	movs	r3, #0
 800af76:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800af7a:	2303      	movs	r3, #3
 800af7c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800af80:	230a      	movs	r3, #10
 800af82:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800af86:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800af8a:	4619      	mov	r1, r3
 800af8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800af90:	f7f6 f9e6 	bl	8001360 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800af94:	f44f 7300 	mov.w	r3, #512	; 0x200
 800af98:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800af9c:	2300      	movs	r3, #0
 800af9e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800afa2:	2300      	movs	r3, #0
 800afa4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800afa8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800afac:	4619      	mov	r1, r3
 800afae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800afb2:	f7f6 f9d5 	bl	8001360 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800afb6:	4b1a      	ldr	r3, [pc, #104]	; (800b020 <HAL_PCD_MspInit+0x144>)
 800afb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800afba:	4a19      	ldr	r2, [pc, #100]	; (800b020 <HAL_PCD_MspInit+0x144>)
 800afbc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800afc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 800afc2:	4b17      	ldr	r3, [pc, #92]	; (800b020 <HAL_PCD_MspInit+0x144>)
 800afc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800afc6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800afca:	613b      	str	r3, [r7, #16]
 800afcc:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800afce:	4b14      	ldr	r3, [pc, #80]	; (800b020 <HAL_PCD_MspInit+0x144>)
 800afd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800afd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d114      	bne.n	800b004 <HAL_PCD_MspInit+0x128>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800afda:	4b11      	ldr	r3, [pc, #68]	; (800b020 <HAL_PCD_MspInit+0x144>)
 800afdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800afde:	4a10      	ldr	r2, [pc, #64]	; (800b020 <HAL_PCD_MspInit+0x144>)
 800afe0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800afe4:	6593      	str	r3, [r2, #88]	; 0x58
 800afe6:	4b0e      	ldr	r3, [pc, #56]	; (800b020 <HAL_PCD_MspInit+0x144>)
 800afe8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800afea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800afee:	60fb      	str	r3, [r7, #12]
 800aff0:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 800aff2:	f7f7 fd7b 	bl	8002aec <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800aff6:	4b0a      	ldr	r3, [pc, #40]	; (800b020 <HAL_PCD_MspInit+0x144>)
 800aff8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800affa:	4a09      	ldr	r2, [pc, #36]	; (800b020 <HAL_PCD_MspInit+0x144>)
 800affc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b000:	6593      	str	r3, [r2, #88]	; 0x58
 800b002:	e001      	b.n	800b008 <HAL_PCD_MspInit+0x12c>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800b004:	f7f7 fd72 	bl	8002aec <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800b008:	2200      	movs	r2, #0
 800b00a:	2105      	movs	r1, #5
 800b00c:	2043      	movs	r0, #67	; 0x43
 800b00e:	f7f6 f970 	bl	80012f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b012:	2043      	movs	r0, #67	; 0x43
 800b014:	f7f6 f989 	bl	800132a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b018:	bf00      	nop
 800b01a:	37b8      	adds	r7, #184	; 0xb8
 800b01c:	46bd      	mov	sp, r7
 800b01e:	bd80      	pop	{r7, pc}
 800b020:	40021000 	.word	0x40021000

0800b024 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b024:	b580      	push	{r7, lr}
 800b026:	b082      	sub	sp, #8
 800b028:	af00      	add	r7, sp, #0
 800b02a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800b038:	4619      	mov	r1, r3
 800b03a:	4610      	mov	r0, r2
 800b03c:	f7fb fe2f 	bl	8006c9e <USBD_LL_SetupStage>
}
 800b040:	bf00      	nop
 800b042:	3708      	adds	r7, #8
 800b044:	46bd      	mov	sp, r7
 800b046:	bd80      	pop	{r7, pc}

0800b048 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b048:	b580      	push	{r7, lr}
 800b04a:	b082      	sub	sp, #8
 800b04c:	af00      	add	r7, sp, #0
 800b04e:	6078      	str	r0, [r7, #4]
 800b050:	460b      	mov	r3, r1
 800b052:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800b05a:	78fa      	ldrb	r2, [r7, #3]
 800b05c:	6879      	ldr	r1, [r7, #4]
 800b05e:	4613      	mov	r3, r2
 800b060:	00db      	lsls	r3, r3, #3
 800b062:	4413      	add	r3, r2
 800b064:	009b      	lsls	r3, r3, #2
 800b066:	440b      	add	r3, r1
 800b068:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800b06c:	681a      	ldr	r2, [r3, #0]
 800b06e:	78fb      	ldrb	r3, [r7, #3]
 800b070:	4619      	mov	r1, r3
 800b072:	f7fb fe69 	bl	8006d48 <USBD_LL_DataOutStage>
}
 800b076:	bf00      	nop
 800b078:	3708      	adds	r7, #8
 800b07a:	46bd      	mov	sp, r7
 800b07c:	bd80      	pop	{r7, pc}

0800b07e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b07e:	b580      	push	{r7, lr}
 800b080:	b082      	sub	sp, #8
 800b082:	af00      	add	r7, sp, #0
 800b084:	6078      	str	r0, [r7, #4]
 800b086:	460b      	mov	r3, r1
 800b088:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800b090:	78fa      	ldrb	r2, [r7, #3]
 800b092:	6879      	ldr	r1, [r7, #4]
 800b094:	4613      	mov	r3, r2
 800b096:	00db      	lsls	r3, r3, #3
 800b098:	4413      	add	r3, r2
 800b09a:	009b      	lsls	r3, r3, #2
 800b09c:	440b      	add	r3, r1
 800b09e:	3348      	adds	r3, #72	; 0x48
 800b0a0:	681a      	ldr	r2, [r3, #0]
 800b0a2:	78fb      	ldrb	r3, [r7, #3]
 800b0a4:	4619      	mov	r1, r3
 800b0a6:	f7fb ff02 	bl	8006eae <USBD_LL_DataInStage>
}
 800b0aa:	bf00      	nop
 800b0ac:	3708      	adds	r7, #8
 800b0ae:	46bd      	mov	sp, r7
 800b0b0:	bd80      	pop	{r7, pc}

0800b0b2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b0b2:	b580      	push	{r7, lr}
 800b0b4:	b082      	sub	sp, #8
 800b0b6:	af00      	add	r7, sp, #0
 800b0b8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b0c0:	4618      	mov	r0, r3
 800b0c2:	f7fc f83c 	bl	800713e <USBD_LL_SOF>
}
 800b0c6:	bf00      	nop
 800b0c8:	3708      	adds	r7, #8
 800b0ca:	46bd      	mov	sp, r7
 800b0cc:	bd80      	pop	{r7, pc}

0800b0ce <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b0ce:	b580      	push	{r7, lr}
 800b0d0:	b084      	sub	sp, #16
 800b0d2:	af00      	add	r7, sp, #0
 800b0d4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b0d6:	2301      	movs	r3, #1
 800b0d8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	691b      	ldr	r3, [r3, #16]
 800b0de:	2b02      	cmp	r3, #2
 800b0e0:	d001      	beq.n	800b0e6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b0e2:	f7f5 fe7d 	bl	8000de0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b0ec:	7bfa      	ldrb	r2, [r7, #15]
 800b0ee:	4611      	mov	r1, r2
 800b0f0:	4618      	mov	r0, r3
 800b0f2:	f7fb ffe0 	bl	80070b6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b0fc:	4618      	mov	r0, r3
 800b0fe:	f7fb ff88 	bl	8007012 <USBD_LL_Reset>
}
 800b102:	bf00      	nop
 800b104:	3710      	adds	r7, #16
 800b106:	46bd      	mov	sp, r7
 800b108:	bd80      	pop	{r7, pc}
	...

0800b10c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b10c:	b580      	push	{r7, lr}
 800b10e:	b082      	sub	sp, #8
 800b110:	af00      	add	r7, sp, #0
 800b112:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	687a      	ldr	r2, [r7, #4]
 800b120:	6812      	ldr	r2, [r2, #0]
 800b122:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b126:	f043 0301 	orr.w	r3, r3, #1
 800b12a:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b132:	4618      	mov	r0, r3
 800b134:	f7fb ffcf 	bl	80070d6 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	6a1b      	ldr	r3, [r3, #32]
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d005      	beq.n	800b14c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b140:	4b04      	ldr	r3, [pc, #16]	; (800b154 <HAL_PCD_SuspendCallback+0x48>)
 800b142:	691b      	ldr	r3, [r3, #16]
 800b144:	4a03      	ldr	r2, [pc, #12]	; (800b154 <HAL_PCD_SuspendCallback+0x48>)
 800b146:	f043 0306 	orr.w	r3, r3, #6
 800b14a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b14c:	bf00      	nop
 800b14e:	3708      	adds	r7, #8
 800b150:	46bd      	mov	sp, r7
 800b152:	bd80      	pop	{r7, pc}
 800b154:	e000ed00 	.word	0xe000ed00

0800b158 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b158:	b580      	push	{r7, lr}
 800b15a:	b082      	sub	sp, #8
 800b15c:	af00      	add	r7, sp, #0
 800b15e:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	687a      	ldr	r2, [r7, #4]
 800b16c:	6812      	ldr	r2, [r2, #0]
 800b16e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b172:	f023 0301 	bic.w	r3, r3, #1
 800b176:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	6a1b      	ldr	r3, [r3, #32]
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d007      	beq.n	800b190 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b180:	4b08      	ldr	r3, [pc, #32]	; (800b1a4 <HAL_PCD_ResumeCallback+0x4c>)
 800b182:	691b      	ldr	r3, [r3, #16]
 800b184:	4a07      	ldr	r2, [pc, #28]	; (800b1a4 <HAL_PCD_ResumeCallback+0x4c>)
 800b186:	f023 0306 	bic.w	r3, r3, #6
 800b18a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800b18c:	f000 fae2 	bl	800b754 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b196:	4618      	mov	r0, r3
 800b198:	f7fb ffb9 	bl	800710e <USBD_LL_Resume>
}
 800b19c:	bf00      	nop
 800b19e:	3708      	adds	r7, #8
 800b1a0:	46bd      	mov	sp, r7
 800b1a2:	bd80      	pop	{r7, pc}
 800b1a4:	e000ed00 	.word	0xe000ed00

0800b1a8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b1a8:	b580      	push	{r7, lr}
 800b1aa:	b082      	sub	sp, #8
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	6078      	str	r0, [r7, #4]
 800b1b0:	460b      	mov	r3, r1
 800b1b2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b1ba:	78fa      	ldrb	r2, [r7, #3]
 800b1bc:	4611      	mov	r1, r2
 800b1be:	4618      	mov	r0, r3
 800b1c0:	f7fc f80f 	bl	80071e2 <USBD_LL_IsoOUTIncomplete>
}
 800b1c4:	bf00      	nop
 800b1c6:	3708      	adds	r7, #8
 800b1c8:	46bd      	mov	sp, r7
 800b1ca:	bd80      	pop	{r7, pc}

0800b1cc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b1cc:	b580      	push	{r7, lr}
 800b1ce:	b082      	sub	sp, #8
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	6078      	str	r0, [r7, #4]
 800b1d4:	460b      	mov	r3, r1
 800b1d6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b1de:	78fa      	ldrb	r2, [r7, #3]
 800b1e0:	4611      	mov	r1, r2
 800b1e2:	4618      	mov	r0, r3
 800b1e4:	f7fb ffcb 	bl	800717e <USBD_LL_IsoINIncomplete>
}
 800b1e8:	bf00      	nop
 800b1ea:	3708      	adds	r7, #8
 800b1ec:	46bd      	mov	sp, r7
 800b1ee:	bd80      	pop	{r7, pc}

0800b1f0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b1f0:	b580      	push	{r7, lr}
 800b1f2:	b082      	sub	sp, #8
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b1fe:	4618      	mov	r0, r3
 800b200:	f7fc f821 	bl	8007246 <USBD_LL_DevConnected>
}
 800b204:	bf00      	nop
 800b206:	3708      	adds	r7, #8
 800b208:	46bd      	mov	sp, r7
 800b20a:	bd80      	pop	{r7, pc}

0800b20c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b20c:	b580      	push	{r7, lr}
 800b20e:	b082      	sub	sp, #8
 800b210:	af00      	add	r7, sp, #0
 800b212:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b21a:	4618      	mov	r0, r3
 800b21c:	f7fc f81e 	bl	800725c <USBD_LL_DevDisconnected>
}
 800b220:	bf00      	nop
 800b222:	3708      	adds	r7, #8
 800b224:	46bd      	mov	sp, r7
 800b226:	bd80      	pop	{r7, pc}

0800b228 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b228:	b580      	push	{r7, lr}
 800b22a:	b082      	sub	sp, #8
 800b22c:	af00      	add	r7, sp, #0
 800b22e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	781b      	ldrb	r3, [r3, #0]
 800b234:	2b00      	cmp	r3, #0
 800b236:	d13c      	bne.n	800b2b2 <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800b238:	4a20      	ldr	r2, [pc, #128]	; (800b2bc <USBD_LL_Init+0x94>)
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	4a1e      	ldr	r2, [pc, #120]	; (800b2bc <USBD_LL_Init+0x94>)
 800b244:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b248:	4b1c      	ldr	r3, [pc, #112]	; (800b2bc <USBD_LL_Init+0x94>)
 800b24a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800b24e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800b250:	4b1a      	ldr	r3, [pc, #104]	; (800b2bc <USBD_LL_Init+0x94>)
 800b252:	2206      	movs	r2, #6
 800b254:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800b256:	4b19      	ldr	r3, [pc, #100]	; (800b2bc <USBD_LL_Init+0x94>)
 800b258:	2202      	movs	r2, #2
 800b25a:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b25c:	4b17      	ldr	r3, [pc, #92]	; (800b2bc <USBD_LL_Init+0x94>)
 800b25e:	2202      	movs	r2, #2
 800b260:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800b262:	4b16      	ldr	r3, [pc, #88]	; (800b2bc <USBD_LL_Init+0x94>)
 800b264:	2201      	movs	r2, #1
 800b266:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800b268:	4b14      	ldr	r3, [pc, #80]	; (800b2bc <USBD_LL_Init+0x94>)
 800b26a:	2200      	movs	r2, #0
 800b26c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800b26e:	4b13      	ldr	r3, [pc, #76]	; (800b2bc <USBD_LL_Init+0x94>)
 800b270:	2200      	movs	r2, #0
 800b272:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 800b274:	4b11      	ldr	r3, [pc, #68]	; (800b2bc <USBD_LL_Init+0x94>)
 800b276:	2201      	movs	r2, #1
 800b278:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800b27a:	4b10      	ldr	r3, [pc, #64]	; (800b2bc <USBD_LL_Init+0x94>)
 800b27c:	2200      	movs	r2, #0
 800b27e:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800b280:	4b0e      	ldr	r3, [pc, #56]	; (800b2bc <USBD_LL_Init+0x94>)
 800b282:	2201      	movs	r2, #1
 800b284:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800b286:	480d      	ldr	r0, [pc, #52]	; (800b2bc <USBD_LL_Init+0x94>)
 800b288:	f7f6 fa2c 	bl	80016e4 <HAL_PCD_Init>
 800b28c:	4603      	mov	r3, r0
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d001      	beq.n	800b296 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800b292:	f7f5 fda5 	bl	8000de0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800b296:	2180      	movs	r1, #128	; 0x80
 800b298:	4808      	ldr	r0, [pc, #32]	; (800b2bc <USBD_LL_Init+0x94>)
 800b29a:	f7f7 fb7e 	bl	800299a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800b29e:	2240      	movs	r2, #64	; 0x40
 800b2a0:	2100      	movs	r1, #0
 800b2a2:	4806      	ldr	r0, [pc, #24]	; (800b2bc <USBD_LL_Init+0x94>)
 800b2a4:	f7f7 fb32 	bl	800290c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800b2a8:	2280      	movs	r2, #128	; 0x80
 800b2aa:	2101      	movs	r1, #1
 800b2ac:	4803      	ldr	r0, [pc, #12]	; (800b2bc <USBD_LL_Init+0x94>)
 800b2ae:	f7f7 fb2d 	bl	800290c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800b2b2:	2300      	movs	r3, #0
}
 800b2b4:	4618      	mov	r0, r3
 800b2b6:	3708      	adds	r7, #8
 800b2b8:	46bd      	mov	sp, r7
 800b2ba:	bd80      	pop	{r7, pc}
 800b2bc:	200020e4 	.word	0x200020e4

0800b2c0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b2c0:	b580      	push	{r7, lr}
 800b2c2:	b084      	sub	sp, #16
 800b2c4:	af00      	add	r7, sp, #0
 800b2c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b2c8:	2300      	movs	r3, #0
 800b2ca:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b2cc:	2300      	movs	r3, #0
 800b2ce:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b2d6:	4618      	mov	r0, r3
 800b2d8:	f7f6 fb28 	bl	800192c <HAL_PCD_Start>
 800b2dc:	4603      	mov	r3, r0
 800b2de:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800b2e0:	7bbb      	ldrb	r3, [r7, #14]
 800b2e2:	2b03      	cmp	r3, #3
 800b2e4:	d816      	bhi.n	800b314 <USBD_LL_Start+0x54>
 800b2e6:	a201      	add	r2, pc, #4	; (adr r2, 800b2ec <USBD_LL_Start+0x2c>)
 800b2e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2ec:	0800b2fd 	.word	0x0800b2fd
 800b2f0:	0800b303 	.word	0x0800b303
 800b2f4:	0800b309 	.word	0x0800b309
 800b2f8:	0800b30f 	.word	0x0800b30f
    case HAL_OK :
      usb_status = USBD_OK;
 800b2fc:	2300      	movs	r3, #0
 800b2fe:	73fb      	strb	r3, [r7, #15]
    break;
 800b300:	e00b      	b.n	800b31a <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b302:	2303      	movs	r3, #3
 800b304:	73fb      	strb	r3, [r7, #15]
    break;
 800b306:	e008      	b.n	800b31a <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b308:	2301      	movs	r3, #1
 800b30a:	73fb      	strb	r3, [r7, #15]
    break;
 800b30c:	e005      	b.n	800b31a <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b30e:	2303      	movs	r3, #3
 800b310:	73fb      	strb	r3, [r7, #15]
    break;
 800b312:	e002      	b.n	800b31a <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800b314:	2303      	movs	r3, #3
 800b316:	73fb      	strb	r3, [r7, #15]
    break;
 800b318:	bf00      	nop
  }
  return usb_status;
 800b31a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b31c:	4618      	mov	r0, r3
 800b31e:	3710      	adds	r7, #16
 800b320:	46bd      	mov	sp, r7
 800b322:	bd80      	pop	{r7, pc}

0800b324 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b324:	b580      	push	{r7, lr}
 800b326:	b084      	sub	sp, #16
 800b328:	af00      	add	r7, sp, #0
 800b32a:	6078      	str	r0, [r7, #4]
 800b32c:	4608      	mov	r0, r1
 800b32e:	4611      	mov	r1, r2
 800b330:	461a      	mov	r2, r3
 800b332:	4603      	mov	r3, r0
 800b334:	70fb      	strb	r3, [r7, #3]
 800b336:	460b      	mov	r3, r1
 800b338:	70bb      	strb	r3, [r7, #2]
 800b33a:	4613      	mov	r3, r2
 800b33c:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b33e:	2300      	movs	r3, #0
 800b340:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b342:	2300      	movs	r3, #0
 800b344:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b34c:	78bb      	ldrb	r3, [r7, #2]
 800b34e:	883a      	ldrh	r2, [r7, #0]
 800b350:	78f9      	ldrb	r1, [r7, #3]
 800b352:	f7f6 ffd2 	bl	80022fa <HAL_PCD_EP_Open>
 800b356:	4603      	mov	r3, r0
 800b358:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800b35a:	7bbb      	ldrb	r3, [r7, #14]
 800b35c:	2b03      	cmp	r3, #3
 800b35e:	d817      	bhi.n	800b390 <USBD_LL_OpenEP+0x6c>
 800b360:	a201      	add	r2, pc, #4	; (adr r2, 800b368 <USBD_LL_OpenEP+0x44>)
 800b362:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b366:	bf00      	nop
 800b368:	0800b379 	.word	0x0800b379
 800b36c:	0800b37f 	.word	0x0800b37f
 800b370:	0800b385 	.word	0x0800b385
 800b374:	0800b38b 	.word	0x0800b38b
    case HAL_OK :
      usb_status = USBD_OK;
 800b378:	2300      	movs	r3, #0
 800b37a:	73fb      	strb	r3, [r7, #15]
    break;
 800b37c:	e00b      	b.n	800b396 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b37e:	2303      	movs	r3, #3
 800b380:	73fb      	strb	r3, [r7, #15]
    break;
 800b382:	e008      	b.n	800b396 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b384:	2301      	movs	r3, #1
 800b386:	73fb      	strb	r3, [r7, #15]
    break;
 800b388:	e005      	b.n	800b396 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b38a:	2303      	movs	r3, #3
 800b38c:	73fb      	strb	r3, [r7, #15]
    break;
 800b38e:	e002      	b.n	800b396 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800b390:	2303      	movs	r3, #3
 800b392:	73fb      	strb	r3, [r7, #15]
    break;
 800b394:	bf00      	nop
  }
  return usb_status;
 800b396:	7bfb      	ldrb	r3, [r7, #15]
}
 800b398:	4618      	mov	r0, r3
 800b39a:	3710      	adds	r7, #16
 800b39c:	46bd      	mov	sp, r7
 800b39e:	bd80      	pop	{r7, pc}

0800b3a0 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b3a0:	b580      	push	{r7, lr}
 800b3a2:	b084      	sub	sp, #16
 800b3a4:	af00      	add	r7, sp, #0
 800b3a6:	6078      	str	r0, [r7, #4]
 800b3a8:	460b      	mov	r3, r1
 800b3aa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b3ac:	2300      	movs	r3, #0
 800b3ae:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b3b0:	2300      	movs	r3, #0
 800b3b2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b3ba:	78fa      	ldrb	r2, [r7, #3]
 800b3bc:	4611      	mov	r1, r2
 800b3be:	4618      	mov	r0, r3
 800b3c0:	f7f7 f803 	bl	80023ca <HAL_PCD_EP_Close>
 800b3c4:	4603      	mov	r3, r0
 800b3c6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800b3c8:	7bbb      	ldrb	r3, [r7, #14]
 800b3ca:	2b03      	cmp	r3, #3
 800b3cc:	d816      	bhi.n	800b3fc <USBD_LL_CloseEP+0x5c>
 800b3ce:	a201      	add	r2, pc, #4	; (adr r2, 800b3d4 <USBD_LL_CloseEP+0x34>)
 800b3d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3d4:	0800b3e5 	.word	0x0800b3e5
 800b3d8:	0800b3eb 	.word	0x0800b3eb
 800b3dc:	0800b3f1 	.word	0x0800b3f1
 800b3e0:	0800b3f7 	.word	0x0800b3f7
    case HAL_OK :
      usb_status = USBD_OK;
 800b3e4:	2300      	movs	r3, #0
 800b3e6:	73fb      	strb	r3, [r7, #15]
    break;
 800b3e8:	e00b      	b.n	800b402 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b3ea:	2303      	movs	r3, #3
 800b3ec:	73fb      	strb	r3, [r7, #15]
    break;
 800b3ee:	e008      	b.n	800b402 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b3f0:	2301      	movs	r3, #1
 800b3f2:	73fb      	strb	r3, [r7, #15]
    break;
 800b3f4:	e005      	b.n	800b402 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b3f6:	2303      	movs	r3, #3
 800b3f8:	73fb      	strb	r3, [r7, #15]
    break;
 800b3fa:	e002      	b.n	800b402 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800b3fc:	2303      	movs	r3, #3
 800b3fe:	73fb      	strb	r3, [r7, #15]
    break;
 800b400:	bf00      	nop
  }
  return usb_status;
 800b402:	7bfb      	ldrb	r3, [r7, #15]
}
 800b404:	4618      	mov	r0, r3
 800b406:	3710      	adds	r7, #16
 800b408:	46bd      	mov	sp, r7
 800b40a:	bd80      	pop	{r7, pc}

0800b40c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b40c:	b580      	push	{r7, lr}
 800b40e:	b084      	sub	sp, #16
 800b410:	af00      	add	r7, sp, #0
 800b412:	6078      	str	r0, [r7, #4]
 800b414:	460b      	mov	r3, r1
 800b416:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b418:	2300      	movs	r3, #0
 800b41a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b41c:	2300      	movs	r3, #0
 800b41e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b426:	78fa      	ldrb	r2, [r7, #3]
 800b428:	4611      	mov	r1, r2
 800b42a:	4618      	mov	r0, r3
 800b42c:	f7f7 f87a 	bl	8002524 <HAL_PCD_EP_SetStall>
 800b430:	4603      	mov	r3, r0
 800b432:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800b434:	7bbb      	ldrb	r3, [r7, #14]
 800b436:	2b03      	cmp	r3, #3
 800b438:	d816      	bhi.n	800b468 <USBD_LL_StallEP+0x5c>
 800b43a:	a201      	add	r2, pc, #4	; (adr r2, 800b440 <USBD_LL_StallEP+0x34>)
 800b43c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b440:	0800b451 	.word	0x0800b451
 800b444:	0800b457 	.word	0x0800b457
 800b448:	0800b45d 	.word	0x0800b45d
 800b44c:	0800b463 	.word	0x0800b463
    case HAL_OK :
      usb_status = USBD_OK;
 800b450:	2300      	movs	r3, #0
 800b452:	73fb      	strb	r3, [r7, #15]
    break;
 800b454:	e00b      	b.n	800b46e <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b456:	2303      	movs	r3, #3
 800b458:	73fb      	strb	r3, [r7, #15]
    break;
 800b45a:	e008      	b.n	800b46e <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b45c:	2301      	movs	r3, #1
 800b45e:	73fb      	strb	r3, [r7, #15]
    break;
 800b460:	e005      	b.n	800b46e <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b462:	2303      	movs	r3, #3
 800b464:	73fb      	strb	r3, [r7, #15]
    break;
 800b466:	e002      	b.n	800b46e <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800b468:	2303      	movs	r3, #3
 800b46a:	73fb      	strb	r3, [r7, #15]
    break;
 800b46c:	bf00      	nop
  }
  return usb_status;
 800b46e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b470:	4618      	mov	r0, r3
 800b472:	3710      	adds	r7, #16
 800b474:	46bd      	mov	sp, r7
 800b476:	bd80      	pop	{r7, pc}

0800b478 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b478:	b580      	push	{r7, lr}
 800b47a:	b084      	sub	sp, #16
 800b47c:	af00      	add	r7, sp, #0
 800b47e:	6078      	str	r0, [r7, #4]
 800b480:	460b      	mov	r3, r1
 800b482:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b484:	2300      	movs	r3, #0
 800b486:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b488:	2300      	movs	r3, #0
 800b48a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b492:	78fa      	ldrb	r2, [r7, #3]
 800b494:	4611      	mov	r1, r2
 800b496:	4618      	mov	r0, r3
 800b498:	f7f7 f8a6 	bl	80025e8 <HAL_PCD_EP_ClrStall>
 800b49c:	4603      	mov	r3, r0
 800b49e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800b4a0:	7bbb      	ldrb	r3, [r7, #14]
 800b4a2:	2b03      	cmp	r3, #3
 800b4a4:	d816      	bhi.n	800b4d4 <USBD_LL_ClearStallEP+0x5c>
 800b4a6:	a201      	add	r2, pc, #4	; (adr r2, 800b4ac <USBD_LL_ClearStallEP+0x34>)
 800b4a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4ac:	0800b4bd 	.word	0x0800b4bd
 800b4b0:	0800b4c3 	.word	0x0800b4c3
 800b4b4:	0800b4c9 	.word	0x0800b4c9
 800b4b8:	0800b4cf 	.word	0x0800b4cf
    case HAL_OK :
      usb_status = USBD_OK;
 800b4bc:	2300      	movs	r3, #0
 800b4be:	73fb      	strb	r3, [r7, #15]
    break;
 800b4c0:	e00b      	b.n	800b4da <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b4c2:	2303      	movs	r3, #3
 800b4c4:	73fb      	strb	r3, [r7, #15]
    break;
 800b4c6:	e008      	b.n	800b4da <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b4c8:	2301      	movs	r3, #1
 800b4ca:	73fb      	strb	r3, [r7, #15]
    break;
 800b4cc:	e005      	b.n	800b4da <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b4ce:	2303      	movs	r3, #3
 800b4d0:	73fb      	strb	r3, [r7, #15]
    break;
 800b4d2:	e002      	b.n	800b4da <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800b4d4:	2303      	movs	r3, #3
 800b4d6:	73fb      	strb	r3, [r7, #15]
    break;
 800b4d8:	bf00      	nop
  }
  return usb_status;
 800b4da:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4dc:	4618      	mov	r0, r3
 800b4de:	3710      	adds	r7, #16
 800b4e0:	46bd      	mov	sp, r7
 800b4e2:	bd80      	pop	{r7, pc}

0800b4e4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b4e4:	b480      	push	{r7}
 800b4e6:	b085      	sub	sp, #20
 800b4e8:	af00      	add	r7, sp, #0
 800b4ea:	6078      	str	r0, [r7, #4]
 800b4ec:	460b      	mov	r3, r1
 800b4ee:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b4f6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b4f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	da0b      	bge.n	800b518 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b500:	78fb      	ldrb	r3, [r7, #3]
 800b502:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b506:	68f9      	ldr	r1, [r7, #12]
 800b508:	4613      	mov	r3, r2
 800b50a:	00db      	lsls	r3, r3, #3
 800b50c:	4413      	add	r3, r2
 800b50e:	009b      	lsls	r3, r3, #2
 800b510:	440b      	add	r3, r1
 800b512:	333e      	adds	r3, #62	; 0x3e
 800b514:	781b      	ldrb	r3, [r3, #0]
 800b516:	e00b      	b.n	800b530 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b518:	78fb      	ldrb	r3, [r7, #3]
 800b51a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b51e:	68f9      	ldr	r1, [r7, #12]
 800b520:	4613      	mov	r3, r2
 800b522:	00db      	lsls	r3, r3, #3
 800b524:	4413      	add	r3, r2
 800b526:	009b      	lsls	r3, r3, #2
 800b528:	440b      	add	r3, r1
 800b52a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800b52e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b530:	4618      	mov	r0, r3
 800b532:	3714      	adds	r7, #20
 800b534:	46bd      	mov	sp, r7
 800b536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b53a:	4770      	bx	lr

0800b53c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b53c:	b580      	push	{r7, lr}
 800b53e:	b084      	sub	sp, #16
 800b540:	af00      	add	r7, sp, #0
 800b542:	6078      	str	r0, [r7, #4]
 800b544:	460b      	mov	r3, r1
 800b546:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b548:	2300      	movs	r3, #0
 800b54a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b54c:	2300      	movs	r3, #0
 800b54e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b556:	78fa      	ldrb	r2, [r7, #3]
 800b558:	4611      	mov	r1, r2
 800b55a:	4618      	mov	r0, r3
 800b55c:	f7f6 fea8 	bl	80022b0 <HAL_PCD_SetAddress>
 800b560:	4603      	mov	r3, r0
 800b562:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800b564:	7bbb      	ldrb	r3, [r7, #14]
 800b566:	2b03      	cmp	r3, #3
 800b568:	d816      	bhi.n	800b598 <USBD_LL_SetUSBAddress+0x5c>
 800b56a:	a201      	add	r2, pc, #4	; (adr r2, 800b570 <USBD_LL_SetUSBAddress+0x34>)
 800b56c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b570:	0800b581 	.word	0x0800b581
 800b574:	0800b587 	.word	0x0800b587
 800b578:	0800b58d 	.word	0x0800b58d
 800b57c:	0800b593 	.word	0x0800b593
    case HAL_OK :
      usb_status = USBD_OK;
 800b580:	2300      	movs	r3, #0
 800b582:	73fb      	strb	r3, [r7, #15]
    break;
 800b584:	e00b      	b.n	800b59e <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b586:	2303      	movs	r3, #3
 800b588:	73fb      	strb	r3, [r7, #15]
    break;
 800b58a:	e008      	b.n	800b59e <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b58c:	2301      	movs	r3, #1
 800b58e:	73fb      	strb	r3, [r7, #15]
    break;
 800b590:	e005      	b.n	800b59e <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b592:	2303      	movs	r3, #3
 800b594:	73fb      	strb	r3, [r7, #15]
    break;
 800b596:	e002      	b.n	800b59e <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800b598:	2303      	movs	r3, #3
 800b59a:	73fb      	strb	r3, [r7, #15]
    break;
 800b59c:	bf00      	nop
  }
  return usb_status;
 800b59e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5a0:	4618      	mov	r0, r3
 800b5a2:	3710      	adds	r7, #16
 800b5a4:	46bd      	mov	sp, r7
 800b5a6:	bd80      	pop	{r7, pc}

0800b5a8 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b5a8:	b580      	push	{r7, lr}
 800b5aa:	b086      	sub	sp, #24
 800b5ac:	af00      	add	r7, sp, #0
 800b5ae:	60f8      	str	r0, [r7, #12]
 800b5b0:	607a      	str	r2, [r7, #4]
 800b5b2:	603b      	str	r3, [r7, #0]
 800b5b4:	460b      	mov	r3, r1
 800b5b6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b5b8:	2300      	movs	r3, #0
 800b5ba:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b5bc:	2300      	movs	r3, #0
 800b5be:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b5c6:	7af9      	ldrb	r1, [r7, #11]
 800b5c8:	683b      	ldr	r3, [r7, #0]
 800b5ca:	687a      	ldr	r2, [r7, #4]
 800b5cc:	f7f6 ff79 	bl	80024c2 <HAL_PCD_EP_Transmit>
 800b5d0:	4603      	mov	r3, r0
 800b5d2:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800b5d4:	7dbb      	ldrb	r3, [r7, #22]
 800b5d6:	2b03      	cmp	r3, #3
 800b5d8:	d816      	bhi.n	800b608 <USBD_LL_Transmit+0x60>
 800b5da:	a201      	add	r2, pc, #4	; (adr r2, 800b5e0 <USBD_LL_Transmit+0x38>)
 800b5dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5e0:	0800b5f1 	.word	0x0800b5f1
 800b5e4:	0800b5f7 	.word	0x0800b5f7
 800b5e8:	0800b5fd 	.word	0x0800b5fd
 800b5ec:	0800b603 	.word	0x0800b603
    case HAL_OK :
      usb_status = USBD_OK;
 800b5f0:	2300      	movs	r3, #0
 800b5f2:	75fb      	strb	r3, [r7, #23]
    break;
 800b5f4:	e00b      	b.n	800b60e <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b5f6:	2303      	movs	r3, #3
 800b5f8:	75fb      	strb	r3, [r7, #23]
    break;
 800b5fa:	e008      	b.n	800b60e <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b5fc:	2301      	movs	r3, #1
 800b5fe:	75fb      	strb	r3, [r7, #23]
    break;
 800b600:	e005      	b.n	800b60e <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b602:	2303      	movs	r3, #3
 800b604:	75fb      	strb	r3, [r7, #23]
    break;
 800b606:	e002      	b.n	800b60e <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800b608:	2303      	movs	r3, #3
 800b60a:	75fb      	strb	r3, [r7, #23]
    break;
 800b60c:	bf00      	nop
  }
  return usb_status;
 800b60e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b610:	4618      	mov	r0, r3
 800b612:	3718      	adds	r7, #24
 800b614:	46bd      	mov	sp, r7
 800b616:	bd80      	pop	{r7, pc}

0800b618 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b618:	b580      	push	{r7, lr}
 800b61a:	b086      	sub	sp, #24
 800b61c:	af00      	add	r7, sp, #0
 800b61e:	60f8      	str	r0, [r7, #12]
 800b620:	607a      	str	r2, [r7, #4]
 800b622:	603b      	str	r3, [r7, #0]
 800b624:	460b      	mov	r3, r1
 800b626:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b628:	2300      	movs	r3, #0
 800b62a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b62c:	2300      	movs	r3, #0
 800b62e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b636:	7af9      	ldrb	r1, [r7, #11]
 800b638:	683b      	ldr	r3, [r7, #0]
 800b63a:	687a      	ldr	r2, [r7, #4]
 800b63c:	f7f6 ff0f 	bl	800245e <HAL_PCD_EP_Receive>
 800b640:	4603      	mov	r3, r0
 800b642:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800b644:	7dbb      	ldrb	r3, [r7, #22]
 800b646:	2b03      	cmp	r3, #3
 800b648:	d816      	bhi.n	800b678 <USBD_LL_PrepareReceive+0x60>
 800b64a:	a201      	add	r2, pc, #4	; (adr r2, 800b650 <USBD_LL_PrepareReceive+0x38>)
 800b64c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b650:	0800b661 	.word	0x0800b661
 800b654:	0800b667 	.word	0x0800b667
 800b658:	0800b66d 	.word	0x0800b66d
 800b65c:	0800b673 	.word	0x0800b673
    case HAL_OK :
      usb_status = USBD_OK;
 800b660:	2300      	movs	r3, #0
 800b662:	75fb      	strb	r3, [r7, #23]
    break;
 800b664:	e00b      	b.n	800b67e <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b666:	2303      	movs	r3, #3
 800b668:	75fb      	strb	r3, [r7, #23]
    break;
 800b66a:	e008      	b.n	800b67e <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b66c:	2301      	movs	r3, #1
 800b66e:	75fb      	strb	r3, [r7, #23]
    break;
 800b670:	e005      	b.n	800b67e <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b672:	2303      	movs	r3, #3
 800b674:	75fb      	strb	r3, [r7, #23]
    break;
 800b676:	e002      	b.n	800b67e <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800b678:	2303      	movs	r3, #3
 800b67a:	75fb      	strb	r3, [r7, #23]
    break;
 800b67c:	bf00      	nop
  }
  return usb_status;
 800b67e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b680:	4618      	mov	r0, r3
 800b682:	3718      	adds	r7, #24
 800b684:	46bd      	mov	sp, r7
 800b686:	bd80      	pop	{r7, pc}

0800b688 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800b688:	b580      	push	{r7, lr}
 800b68a:	b082      	sub	sp, #8
 800b68c:	af00      	add	r7, sp, #0
 800b68e:	6078      	str	r0, [r7, #4]
 800b690:	460b      	mov	r3, r1
 800b692:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800b694:	78fb      	ldrb	r3, [r7, #3]
 800b696:	2b00      	cmp	r3, #0
 800b698:	d002      	beq.n	800b6a0 <HAL_PCDEx_LPM_Callback+0x18>
 800b69a:	2b01      	cmp	r3, #1
 800b69c:	d01f      	beq.n	800b6de <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800b69e:	e03b      	b.n	800b718 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	6a1b      	ldr	r3, [r3, #32]
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d007      	beq.n	800b6b8 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800b6a8:	f000 f854 	bl	800b754 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b6ac:	4b1c      	ldr	r3, [pc, #112]	; (800b720 <HAL_PCDEx_LPM_Callback+0x98>)
 800b6ae:	691b      	ldr	r3, [r3, #16]
 800b6b0:	4a1b      	ldr	r2, [pc, #108]	; (800b720 <HAL_PCDEx_LPM_Callback+0x98>)
 800b6b2:	f023 0306 	bic.w	r3, r3, #6
 800b6b6:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	687a      	ldr	r2, [r7, #4]
 800b6c4:	6812      	ldr	r2, [r2, #0]
 800b6c6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b6ca:	f023 0301 	bic.w	r3, r3, #1
 800b6ce:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b6d6:	4618      	mov	r0, r3
 800b6d8:	f7fb fd19 	bl	800710e <USBD_LL_Resume>
    break;
 800b6dc:	e01c      	b.n	800b718 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	687a      	ldr	r2, [r7, #4]
 800b6ea:	6812      	ldr	r2, [r2, #0]
 800b6ec:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b6f0:	f043 0301 	orr.w	r3, r3, #1
 800b6f4:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b6fc:	4618      	mov	r0, r3
 800b6fe:	f7fb fcea 	bl	80070d6 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	6a1b      	ldr	r3, [r3, #32]
 800b706:	2b00      	cmp	r3, #0
 800b708:	d005      	beq.n	800b716 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b70a:	4b05      	ldr	r3, [pc, #20]	; (800b720 <HAL_PCDEx_LPM_Callback+0x98>)
 800b70c:	691b      	ldr	r3, [r3, #16]
 800b70e:	4a04      	ldr	r2, [pc, #16]	; (800b720 <HAL_PCDEx_LPM_Callback+0x98>)
 800b710:	f043 0306 	orr.w	r3, r3, #6
 800b714:	6113      	str	r3, [r2, #16]
    break;
 800b716:	bf00      	nop
}
 800b718:	bf00      	nop
 800b71a:	3708      	adds	r7, #8
 800b71c:	46bd      	mov	sp, r7
 800b71e:	bd80      	pop	{r7, pc}
 800b720:	e000ed00 	.word	0xe000ed00

0800b724 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b724:	b480      	push	{r7}
 800b726:	b083      	sub	sp, #12
 800b728:	af00      	add	r7, sp, #0
 800b72a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b72c:	4b03      	ldr	r3, [pc, #12]	; (800b73c <USBD_static_malloc+0x18>)
}
 800b72e:	4618      	mov	r0, r3
 800b730:	370c      	adds	r7, #12
 800b732:	46bd      	mov	sp, r7
 800b734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b738:	4770      	bx	lr
 800b73a:	bf00      	nop
 800b73c:	200025f0 	.word	0x200025f0

0800b740 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b740:	b480      	push	{r7}
 800b742:	b083      	sub	sp, #12
 800b744:	af00      	add	r7, sp, #0
 800b746:	6078      	str	r0, [r7, #4]

}
 800b748:	bf00      	nop
 800b74a:	370c      	adds	r7, #12
 800b74c:	46bd      	mov	sp, r7
 800b74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b752:	4770      	bx	lr

0800b754 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800b754:	b580      	push	{r7, lr}
 800b756:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800b758:	f7f5 f800 	bl	800075c <SystemClock_Config>
}
 800b75c:	bf00      	nop
 800b75e:	bd80      	pop	{r7, pc}

0800b760 <memset>:
 800b760:	4402      	add	r2, r0
 800b762:	4603      	mov	r3, r0
 800b764:	4293      	cmp	r3, r2
 800b766:	d100      	bne.n	800b76a <memset+0xa>
 800b768:	4770      	bx	lr
 800b76a:	f803 1b01 	strb.w	r1, [r3], #1
 800b76e:	e7f9      	b.n	800b764 <memset+0x4>

0800b770 <__libc_init_array>:
 800b770:	b570      	push	{r4, r5, r6, lr}
 800b772:	4d0d      	ldr	r5, [pc, #52]	; (800b7a8 <__libc_init_array+0x38>)
 800b774:	4c0d      	ldr	r4, [pc, #52]	; (800b7ac <__libc_init_array+0x3c>)
 800b776:	1b64      	subs	r4, r4, r5
 800b778:	10a4      	asrs	r4, r4, #2
 800b77a:	2600      	movs	r6, #0
 800b77c:	42a6      	cmp	r6, r4
 800b77e:	d109      	bne.n	800b794 <__libc_init_array+0x24>
 800b780:	4d0b      	ldr	r5, [pc, #44]	; (800b7b0 <__libc_init_array+0x40>)
 800b782:	4c0c      	ldr	r4, [pc, #48]	; (800b7b4 <__libc_init_array+0x44>)
 800b784:	f000 f826 	bl	800b7d4 <_init>
 800b788:	1b64      	subs	r4, r4, r5
 800b78a:	10a4      	asrs	r4, r4, #2
 800b78c:	2600      	movs	r6, #0
 800b78e:	42a6      	cmp	r6, r4
 800b790:	d105      	bne.n	800b79e <__libc_init_array+0x2e>
 800b792:	bd70      	pop	{r4, r5, r6, pc}
 800b794:	f855 3b04 	ldr.w	r3, [r5], #4
 800b798:	4798      	blx	r3
 800b79a:	3601      	adds	r6, #1
 800b79c:	e7ee      	b.n	800b77c <__libc_init_array+0xc>
 800b79e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b7a2:	4798      	blx	r3
 800b7a4:	3601      	adds	r6, #1
 800b7a6:	e7f2      	b.n	800b78e <__libc_init_array+0x1e>
 800b7a8:	0800b900 	.word	0x0800b900
 800b7ac:	0800b900 	.word	0x0800b900
 800b7b0:	0800b900 	.word	0x0800b900
 800b7b4:	0800b904 	.word	0x0800b904

0800b7b8 <memcpy>:
 800b7b8:	440a      	add	r2, r1
 800b7ba:	4291      	cmp	r1, r2
 800b7bc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800b7c0:	d100      	bne.n	800b7c4 <memcpy+0xc>
 800b7c2:	4770      	bx	lr
 800b7c4:	b510      	push	{r4, lr}
 800b7c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b7ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b7ce:	4291      	cmp	r1, r2
 800b7d0:	d1f9      	bne.n	800b7c6 <memcpy+0xe>
 800b7d2:	bd10      	pop	{r4, pc}

0800b7d4 <_init>:
 800b7d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7d6:	bf00      	nop
 800b7d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b7da:	bc08      	pop	{r3}
 800b7dc:	469e      	mov	lr, r3
 800b7de:	4770      	bx	lr

0800b7e0 <_fini>:
 800b7e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7e2:	bf00      	nop
 800b7e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b7e6:	bc08      	pop	{r3}
 800b7e8:	469e      	mov	lr, r3
 800b7ea:	4770      	bx	lr
