
gamemancontroller_full.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b43c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000010c  0800b5ec  0800b5ec  0001b5ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b6f8  0800b6f8  00020130  2**0
                  CONTENTS
  4 .ARM          00000008  0800b6f8  0800b6f8  0001b6f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b700  0800b700  00020130  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b700  0800b700  0001b700  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b704  0800b704  0001b704  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000130  20000000  0800b708  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002404  20000130  0800b838  00020130  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002534  0800b838  00022534  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020130  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020160  2**0
                  CONTENTS, READONLY
 13 .debug_info   000233b3  00000000  00000000  000201a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004ef9  00000000  00000000  00043556  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001e20  00000000  00000000  00048450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001736  00000000  00000000  0004a270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002d570  00000000  00000000  0004b9a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00021e2c  00000000  00000000  00078f16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010f081  00000000  00000000  0009ad42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007f08  00000000  00000000  001a9dc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  001b1ccc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000130 	.word	0x20000130
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800b5d4 	.word	0x0800b5d4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000134 	.word	0x20000134
 80001ec:	0800b5d4 	.word	0x0800b5d4

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000200:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000204:	f000 b970 	b.w	80004e8 <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9e08      	ldr	r6, [sp, #32]
 8000226:	460d      	mov	r5, r1
 8000228:	4604      	mov	r4, r0
 800022a:	460f      	mov	r7, r1
 800022c:	2b00      	cmp	r3, #0
 800022e:	d14a      	bne.n	80002c6 <__udivmoddi4+0xa6>
 8000230:	428a      	cmp	r2, r1
 8000232:	4694      	mov	ip, r2
 8000234:	d965      	bls.n	8000302 <__udivmoddi4+0xe2>
 8000236:	fab2 f382 	clz	r3, r2
 800023a:	b143      	cbz	r3, 800024e <__udivmoddi4+0x2e>
 800023c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000240:	f1c3 0220 	rsb	r2, r3, #32
 8000244:	409f      	lsls	r7, r3
 8000246:	fa20 f202 	lsr.w	r2, r0, r2
 800024a:	4317      	orrs	r7, r2
 800024c:	409c      	lsls	r4, r3
 800024e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000252:	fa1f f58c 	uxth.w	r5, ip
 8000256:	fbb7 f1fe 	udiv	r1, r7, lr
 800025a:	0c22      	lsrs	r2, r4, #16
 800025c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000260:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000264:	fb01 f005 	mul.w	r0, r1, r5
 8000268:	4290      	cmp	r0, r2
 800026a:	d90a      	bls.n	8000282 <__udivmoddi4+0x62>
 800026c:	eb1c 0202 	adds.w	r2, ip, r2
 8000270:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000274:	f080 811c 	bcs.w	80004b0 <__udivmoddi4+0x290>
 8000278:	4290      	cmp	r0, r2
 800027a:	f240 8119 	bls.w	80004b0 <__udivmoddi4+0x290>
 800027e:	3902      	subs	r1, #2
 8000280:	4462      	add	r2, ip
 8000282:	1a12      	subs	r2, r2, r0
 8000284:	b2a4      	uxth	r4, r4
 8000286:	fbb2 f0fe 	udiv	r0, r2, lr
 800028a:	fb0e 2210 	mls	r2, lr, r0, r2
 800028e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000292:	fb00 f505 	mul.w	r5, r0, r5
 8000296:	42a5      	cmp	r5, r4
 8000298:	d90a      	bls.n	80002b0 <__udivmoddi4+0x90>
 800029a:	eb1c 0404 	adds.w	r4, ip, r4
 800029e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002a2:	f080 8107 	bcs.w	80004b4 <__udivmoddi4+0x294>
 80002a6:	42a5      	cmp	r5, r4
 80002a8:	f240 8104 	bls.w	80004b4 <__udivmoddi4+0x294>
 80002ac:	4464      	add	r4, ip
 80002ae:	3802      	subs	r0, #2
 80002b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002b4:	1b64      	subs	r4, r4, r5
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11e      	cbz	r6, 80002c2 <__udivmoddi4+0xa2>
 80002ba:	40dc      	lsrs	r4, r3
 80002bc:	2300      	movs	r3, #0
 80002be:	e9c6 4300 	strd	r4, r3, [r6]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d908      	bls.n	80002dc <__udivmoddi4+0xbc>
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	f000 80ed 	beq.w	80004aa <__udivmoddi4+0x28a>
 80002d0:	2100      	movs	r1, #0
 80002d2:	e9c6 0500 	strd	r0, r5, [r6]
 80002d6:	4608      	mov	r0, r1
 80002d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002dc:	fab3 f183 	clz	r1, r3
 80002e0:	2900      	cmp	r1, #0
 80002e2:	d149      	bne.n	8000378 <__udivmoddi4+0x158>
 80002e4:	42ab      	cmp	r3, r5
 80002e6:	d302      	bcc.n	80002ee <__udivmoddi4+0xce>
 80002e8:	4282      	cmp	r2, r0
 80002ea:	f200 80f8 	bhi.w	80004de <__udivmoddi4+0x2be>
 80002ee:	1a84      	subs	r4, r0, r2
 80002f0:	eb65 0203 	sbc.w	r2, r5, r3
 80002f4:	2001      	movs	r0, #1
 80002f6:	4617      	mov	r7, r2
 80002f8:	2e00      	cmp	r6, #0
 80002fa:	d0e2      	beq.n	80002c2 <__udivmoddi4+0xa2>
 80002fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000300:	e7df      	b.n	80002c2 <__udivmoddi4+0xa2>
 8000302:	b902      	cbnz	r2, 8000306 <__udivmoddi4+0xe6>
 8000304:	deff      	udf	#255	; 0xff
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	2b00      	cmp	r3, #0
 800030c:	f040 8090 	bne.w	8000430 <__udivmoddi4+0x210>
 8000310:	1a8a      	subs	r2, r1, r2
 8000312:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000316:	fa1f fe8c 	uxth.w	lr, ip
 800031a:	2101      	movs	r1, #1
 800031c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000320:	fb07 2015 	mls	r0, r7, r5, r2
 8000324:	0c22      	lsrs	r2, r4, #16
 8000326:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800032a:	fb0e f005 	mul.w	r0, lr, r5
 800032e:	4290      	cmp	r0, r2
 8000330:	d908      	bls.n	8000344 <__udivmoddi4+0x124>
 8000332:	eb1c 0202 	adds.w	r2, ip, r2
 8000336:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x122>
 800033c:	4290      	cmp	r0, r2
 800033e:	f200 80cb 	bhi.w	80004d8 <__udivmoddi4+0x2b8>
 8000342:	4645      	mov	r5, r8
 8000344:	1a12      	subs	r2, r2, r0
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb2 f0f7 	udiv	r0, r2, r7
 800034c:	fb07 2210 	mls	r2, r7, r0, r2
 8000350:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000354:	fb0e fe00 	mul.w	lr, lr, r0
 8000358:	45a6      	cmp	lr, r4
 800035a:	d908      	bls.n	800036e <__udivmoddi4+0x14e>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000364:	d202      	bcs.n	800036c <__udivmoddi4+0x14c>
 8000366:	45a6      	cmp	lr, r4
 8000368:	f200 80bb 	bhi.w	80004e2 <__udivmoddi4+0x2c2>
 800036c:	4610      	mov	r0, r2
 800036e:	eba4 040e 	sub.w	r4, r4, lr
 8000372:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000376:	e79f      	b.n	80002b8 <__udivmoddi4+0x98>
 8000378:	f1c1 0720 	rsb	r7, r1, #32
 800037c:	408b      	lsls	r3, r1
 800037e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000382:	ea4c 0c03 	orr.w	ip, ip, r3
 8000386:	fa05 f401 	lsl.w	r4, r5, r1
 800038a:	fa20 f307 	lsr.w	r3, r0, r7
 800038e:	40fd      	lsrs	r5, r7
 8000390:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000394:	4323      	orrs	r3, r4
 8000396:	fbb5 f8f9 	udiv	r8, r5, r9
 800039a:	fa1f fe8c 	uxth.w	lr, ip
 800039e:	fb09 5518 	mls	r5, r9, r8, r5
 80003a2:	0c1c      	lsrs	r4, r3, #16
 80003a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003a8:	fb08 f50e 	mul.w	r5, r8, lr
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	fa02 f201 	lsl.w	r2, r2, r1
 80003b2:	fa00 f001 	lsl.w	r0, r0, r1
 80003b6:	d90b      	bls.n	80003d0 <__udivmoddi4+0x1b0>
 80003b8:	eb1c 0404 	adds.w	r4, ip, r4
 80003bc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003c0:	f080 8088 	bcs.w	80004d4 <__udivmoddi4+0x2b4>
 80003c4:	42a5      	cmp	r5, r4
 80003c6:	f240 8085 	bls.w	80004d4 <__udivmoddi4+0x2b4>
 80003ca:	f1a8 0802 	sub.w	r8, r8, #2
 80003ce:	4464      	add	r4, ip
 80003d0:	1b64      	subs	r4, r4, r5
 80003d2:	b29d      	uxth	r5, r3
 80003d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003d8:	fb09 4413 	mls	r4, r9, r3, r4
 80003dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003e4:	45a6      	cmp	lr, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x1da>
 80003e8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ec:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003f0:	d26c      	bcs.n	80004cc <__udivmoddi4+0x2ac>
 80003f2:	45a6      	cmp	lr, r4
 80003f4:	d96a      	bls.n	80004cc <__udivmoddi4+0x2ac>
 80003f6:	3b02      	subs	r3, #2
 80003f8:	4464      	add	r4, ip
 80003fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000402:	eba4 040e 	sub.w	r4, r4, lr
 8000406:	42ac      	cmp	r4, r5
 8000408:	46c8      	mov	r8, r9
 800040a:	46ae      	mov	lr, r5
 800040c:	d356      	bcc.n	80004bc <__udivmoddi4+0x29c>
 800040e:	d053      	beq.n	80004b8 <__udivmoddi4+0x298>
 8000410:	b156      	cbz	r6, 8000428 <__udivmoddi4+0x208>
 8000412:	ebb0 0208 	subs.w	r2, r0, r8
 8000416:	eb64 040e 	sbc.w	r4, r4, lr
 800041a:	fa04 f707 	lsl.w	r7, r4, r7
 800041e:	40ca      	lsrs	r2, r1
 8000420:	40cc      	lsrs	r4, r1
 8000422:	4317      	orrs	r7, r2
 8000424:	e9c6 7400 	strd	r7, r4, [r6]
 8000428:	4618      	mov	r0, r3
 800042a:	2100      	movs	r1, #0
 800042c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000430:	f1c3 0120 	rsb	r1, r3, #32
 8000434:	fa02 fc03 	lsl.w	ip, r2, r3
 8000438:	fa20 f201 	lsr.w	r2, r0, r1
 800043c:	fa25 f101 	lsr.w	r1, r5, r1
 8000440:	409d      	lsls	r5, r3
 8000442:	432a      	orrs	r2, r5
 8000444:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000450:	fb07 1510 	mls	r5, r7, r0, r1
 8000454:	0c11      	lsrs	r1, r2, #16
 8000456:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800045a:	fb00 f50e 	mul.w	r5, r0, lr
 800045e:	428d      	cmp	r5, r1
 8000460:	fa04 f403 	lsl.w	r4, r4, r3
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x258>
 8000466:	eb1c 0101 	adds.w	r1, ip, r1
 800046a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800046e:	d22f      	bcs.n	80004d0 <__udivmoddi4+0x2b0>
 8000470:	428d      	cmp	r5, r1
 8000472:	d92d      	bls.n	80004d0 <__udivmoddi4+0x2b0>
 8000474:	3802      	subs	r0, #2
 8000476:	4461      	add	r1, ip
 8000478:	1b49      	subs	r1, r1, r5
 800047a:	b292      	uxth	r2, r2
 800047c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000480:	fb07 1115 	mls	r1, r7, r5, r1
 8000484:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000488:	fb05 f10e 	mul.w	r1, r5, lr
 800048c:	4291      	cmp	r1, r2
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x282>
 8000490:	eb1c 0202 	adds.w	r2, ip, r2
 8000494:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000498:	d216      	bcs.n	80004c8 <__udivmoddi4+0x2a8>
 800049a:	4291      	cmp	r1, r2
 800049c:	d914      	bls.n	80004c8 <__udivmoddi4+0x2a8>
 800049e:	3d02      	subs	r5, #2
 80004a0:	4462      	add	r2, ip
 80004a2:	1a52      	subs	r2, r2, r1
 80004a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004a8:	e738      	b.n	800031c <__udivmoddi4+0xfc>
 80004aa:	4631      	mov	r1, r6
 80004ac:	4630      	mov	r0, r6
 80004ae:	e708      	b.n	80002c2 <__udivmoddi4+0xa2>
 80004b0:	4639      	mov	r1, r7
 80004b2:	e6e6      	b.n	8000282 <__udivmoddi4+0x62>
 80004b4:	4610      	mov	r0, r2
 80004b6:	e6fb      	b.n	80002b0 <__udivmoddi4+0x90>
 80004b8:	4548      	cmp	r0, r9
 80004ba:	d2a9      	bcs.n	8000410 <__udivmoddi4+0x1f0>
 80004bc:	ebb9 0802 	subs.w	r8, r9, r2
 80004c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004c4:	3b01      	subs	r3, #1
 80004c6:	e7a3      	b.n	8000410 <__udivmoddi4+0x1f0>
 80004c8:	4645      	mov	r5, r8
 80004ca:	e7ea      	b.n	80004a2 <__udivmoddi4+0x282>
 80004cc:	462b      	mov	r3, r5
 80004ce:	e794      	b.n	80003fa <__udivmoddi4+0x1da>
 80004d0:	4640      	mov	r0, r8
 80004d2:	e7d1      	b.n	8000478 <__udivmoddi4+0x258>
 80004d4:	46d0      	mov	r8, sl
 80004d6:	e77b      	b.n	80003d0 <__udivmoddi4+0x1b0>
 80004d8:	3d02      	subs	r5, #2
 80004da:	4462      	add	r2, ip
 80004dc:	e732      	b.n	8000344 <__udivmoddi4+0x124>
 80004de:	4608      	mov	r0, r1
 80004e0:	e70a      	b.n	80002f8 <__udivmoddi4+0xd8>
 80004e2:	4464      	add	r4, ip
 80004e4:	3802      	subs	r0, #2
 80004e6:	e742      	b.n	800036e <__udivmoddi4+0x14e>

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <getKey>:

	return -1; // stub or error lol
}

int getKey(capkey_t *key,TIM_HandleTypeDef *htim)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b086      	sub	sp, #24
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
 80004f4:	6039      	str	r1, [r7, #0]
	const uint32_t timeOut = 4000;
 80004f6:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 80004fa:	613b      	str	r3, [r7, #16]
	// start, stop, and delta time
	uint32_t startTime = 0;
 80004fc:	2300      	movs	r3, #0
 80004fe:	60fb      	str	r3, [r7, #12]
	uint32_t stopTime = 0;
 8000500:	2300      	movs	r3, #0
 8000502:	60bb      	str	r3, [r7, #8]
	uint32_t deltaTime = 0;
 8000504:	2300      	movs	r3, #0
 8000506:	617b      	str	r3, [r7, #20]

	// set the driver pin to high and do the thing
	startTime = __HAL_TIM_GET_COUNTER(htim);
 8000508:	683b      	ldr	r3, [r7, #0]
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800050e:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin(driverpin_GPIO_Port,driverpin_Pin,1);
 8000510:	2201      	movs	r2, #1
 8000512:	2108      	movs	r1, #8
 8000514:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000518:	f001 f836 	bl	8001588 <HAL_GPIO_WritePin>

	// after we set the pin to high, or we get a time out, which ever comes first
	while(HAL_GPIO_ReadPin(key->gpioport,key->gpiopin) == 0)
 800051c:	e009      	b.n	8000532 <getKey+0x46>
	{
		deltaTime = __HAL_TIM_GET_COUNTER(htim) - startTime;
 800051e:	683b      	ldr	r3, [r7, #0]
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000524:	68fb      	ldr	r3, [r7, #12]
 8000526:	1ad3      	subs	r3, r2, r3
 8000528:	617b      	str	r3, [r7, #20]
		if(deltaTime > timeOut)
 800052a:	697a      	ldr	r2, [r7, #20]
 800052c:	693b      	ldr	r3, [r7, #16]
 800052e:	429a      	cmp	r2, r3
 8000530:	d80b      	bhi.n	800054a <getKey+0x5e>
	while(HAL_GPIO_ReadPin(key->gpioport,key->gpiopin) == 0)
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	685a      	ldr	r2, [r3, #4]
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	891b      	ldrh	r3, [r3, #8]
 800053a:	4619      	mov	r1, r3
 800053c:	4610      	mov	r0, r2
 800053e:	f001 f80b 	bl	8001558 <HAL_GPIO_ReadPin>
 8000542:	4603      	mov	r3, r0
 8000544:	2b00      	cmp	r3, #0
 8000546:	d0ea      	beq.n	800051e <getKey+0x32>
 8000548:	e000      	b.n	800054c <getKey+0x60>
		{
			break;
 800054a:	bf00      	nop
		}
	}

	// return the data
	HAL_GPIO_WritePin(driverpin_GPIO_Port,driverpin_Pin,0);
 800054c:	2200      	movs	r2, #0
 800054e:	2108      	movs	r1, #8
 8000550:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000554:	f001 f818 	bl	8001588 <HAL_GPIO_WritePin>
	return deltaTime;
 8000558:	697b      	ldr	r3, [r7, #20]
//		}
//	}

//	HAL_GPIO_WritePin(key->gpioport,key->gpiopin,0);
	return deltaTime;
}
 800055a:	4618      	mov	r0, r3
 800055c:	3718      	adds	r7, #24
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}
	...

08000564 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000568:	f000 fcb9 	bl	8000ede <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800056c:	f000 f828 	bl	80005c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000570:	f000 f906 	bl	8000780 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000574:	f000 f888 	bl	8000688 <MX_LPUART1_UART_Init>
  MX_TIM2_Init();
 8000578:	f000 f8b4 	bl	80006e4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800057c:	f007 fd16 	bl	8007fac <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000580:	4a09      	ldr	r2, [pc, #36]	; (80005a8 <main+0x44>)
 8000582:	2100      	movs	r1, #0
 8000584:	4809      	ldr	r0, [pc, #36]	; (80005ac <main+0x48>)
 8000586:	f007 fd5b 	bl	8008040 <osThreadNew>
 800058a:	4603      	mov	r3, r0
 800058c:	4a08      	ldr	r2, [pc, #32]	; (80005b0 <main+0x4c>)
 800058e:	6013      	str	r3, [r2, #0]
  checkkeysTaskHandle = osThreadNew(checkkeys, NULL,&checkkeysTaskHandle_attributes);
 8000590:	4a08      	ldr	r2, [pc, #32]	; (80005b4 <main+0x50>)
 8000592:	2100      	movs	r1, #0
 8000594:	4808      	ldr	r0, [pc, #32]	; (80005b8 <main+0x54>)
 8000596:	f007 fd53 	bl	8008040 <osThreadNew>
 800059a:	4603      	mov	r3, r0
 800059c:	4a07      	ldr	r2, [pc, #28]	; (80005bc <main+0x58>)
 800059e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005a0:	f007 fd28 	bl	8007ff4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005a4:	e7fe      	b.n	80005a4 <main+0x40>
 80005a6:	bf00      	nop
 80005a8:	0800b668 	.word	0x0800b668
 80005ac:	08000ca1 	.word	0x08000ca1
 80005b0:	20000220 	.word	0x20000220
 80005b4:	0800b68c 	.word	0x0800b68c
 80005b8:	08000971 	.word	0x08000971
 80005bc:	20000224 	.word	0x20000224

080005c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b096      	sub	sp, #88	; 0x58
 80005c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005c6:	f107 0314 	add.w	r3, r7, #20
 80005ca:	2244      	movs	r2, #68	; 0x44
 80005cc:	2100      	movs	r1, #0
 80005ce:	4618      	mov	r0, r3
 80005d0:	f00a ffc6 	bl	800b560 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d4:	463b      	mov	r3, r7
 80005d6:	2200      	movs	r2, #0
 80005d8:	601a      	str	r2, [r3, #0]
 80005da:	605a      	str	r2, [r3, #4]
 80005dc:	609a      	str	r2, [r3, #8]
 80005de:	60da      	str	r2, [r3, #12]
 80005e0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005e2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005e6:	f002 f995 	bl	8002914 <HAL_PWREx_ControlVoltageScaling>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005f0:	f000 fb60 	bl	8000cb4 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80005f4:	f002 f970 	bl	80028d8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80005f8:	4b22      	ldr	r3, [pc, #136]	; (8000684 <SystemClock_Config+0xc4>)
 80005fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80005fe:	4a21      	ldr	r2, [pc, #132]	; (8000684 <SystemClock_Config+0xc4>)
 8000600:	f023 0318 	bic.w	r3, r3, #24
 8000604:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000608:	2314      	movs	r3, #20
 800060a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800060c:	2301      	movs	r3, #1
 800060e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000610:	2301      	movs	r3, #1
 8000612:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000614:	2300      	movs	r3, #0
 8000616:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000618:	2360      	movs	r3, #96	; 0x60
 800061a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800061c:	2302      	movs	r3, #2
 800061e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000620:	2301      	movs	r3, #1
 8000622:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000624:	2301      	movs	r3, #1
 8000626:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 71;
 8000628:	2347      	movs	r3, #71	; 0x47
 800062a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800062c:	2302      	movs	r3, #2
 800062e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000630:	2302      	movs	r3, #2
 8000632:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV6;
 8000634:	2306      	movs	r3, #6
 8000636:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000638:	f107 0314 	add.w	r3, r7, #20
 800063c:	4618      	mov	r0, r3
 800063e:	f002 f9df 	bl	8002a00 <HAL_RCC_OscConfig>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000648:	f000 fb34 	bl	8000cb4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800064c:	230f      	movs	r3, #15
 800064e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000650:	2303      	movs	r3, #3
 8000652:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000654:	2300      	movs	r3, #0
 8000656:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000658:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800065c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800065e:	2300      	movs	r3, #0
 8000660:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000662:	463b      	mov	r3, r7
 8000664:	2102      	movs	r1, #2
 8000666:	4618      	mov	r0, r3
 8000668:	f002 fde4 	bl	8003234 <HAL_RCC_ClockConfig>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000672:	f000 fb1f 	bl	8000cb4 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000676:	f003 fafd 	bl	8003c74 <HAL_RCCEx_EnableMSIPLLMode>
}
 800067a:	bf00      	nop
 800067c:	3758      	adds	r7, #88	; 0x58
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	40021000 	.word	0x40021000

08000688 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800068c:	4b12      	ldr	r3, [pc, #72]	; (80006d8 <MX_LPUART1_UART_Init+0x50>)
 800068e:	4a13      	ldr	r2, [pc, #76]	; (80006dc <MX_LPUART1_UART_Init+0x54>)
 8000690:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8000692:	4b11      	ldr	r3, [pc, #68]	; (80006d8 <MX_LPUART1_UART_Init+0x50>)
 8000694:	4a12      	ldr	r2, [pc, #72]	; (80006e0 <MX_LPUART1_UART_Init+0x58>)
 8000696:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 8000698:	4b0f      	ldr	r3, [pc, #60]	; (80006d8 <MX_LPUART1_UART_Init+0x50>)
 800069a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800069e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80006a0:	4b0d      	ldr	r3, [pc, #52]	; (80006d8 <MX_LPUART1_UART_Init+0x50>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80006a6:	4b0c      	ldr	r3, [pc, #48]	; (80006d8 <MX_LPUART1_UART_Init+0x50>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80006ac:	4b0a      	ldr	r3, [pc, #40]	; (80006d8 <MX_LPUART1_UART_Init+0x50>)
 80006ae:	220c      	movs	r2, #12
 80006b0:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006b2:	4b09      	ldr	r3, [pc, #36]	; (80006d8 <MX_LPUART1_UART_Init+0x50>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006b8:	4b07      	ldr	r3, [pc, #28]	; (80006d8 <MX_LPUART1_UART_Init+0x50>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006be:	4b06      	ldr	r3, [pc, #24]	; (80006d8 <MX_LPUART1_UART_Init+0x50>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80006c4:	4804      	ldr	r0, [pc, #16]	; (80006d8 <MX_LPUART1_UART_Init+0x50>)
 80006c6:	f003 ff8f 	bl	80045e8 <HAL_UART_Init>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 80006d0:	f000 faf0 	bl	8000cb4 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80006d4:	bf00      	nop
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	2000014c 	.word	0x2000014c
 80006dc:	40008000 	.word	0x40008000
 80006e0:	00033324 	.word	0x00033324

080006e4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b088      	sub	sp, #32
 80006e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006ea:	f107 0310 	add.w	r3, r7, #16
 80006ee:	2200      	movs	r2, #0
 80006f0:	601a      	str	r2, [r3, #0]
 80006f2:	605a      	str	r2, [r3, #4]
 80006f4:	609a      	str	r2, [r3, #8]
 80006f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006f8:	1d3b      	adds	r3, r7, #4
 80006fa:	2200      	movs	r2, #0
 80006fc:	601a      	str	r2, [r3, #0]
 80006fe:	605a      	str	r2, [r3, #4]
 8000700:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000702:	4b1e      	ldr	r3, [pc, #120]	; (800077c <MX_TIM2_Init+0x98>)
 8000704:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000708:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800070a:	4b1c      	ldr	r3, [pc, #112]	; (800077c <MX_TIM2_Init+0x98>)
 800070c:	2200      	movs	r2, #0
 800070e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000710:	4b1a      	ldr	r3, [pc, #104]	; (800077c <MX_TIM2_Init+0x98>)
 8000712:	2200      	movs	r2, #0
 8000714:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000716:	4b19      	ldr	r3, [pc, #100]	; (800077c <MX_TIM2_Init+0x98>)
 8000718:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800071c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800071e:	4b17      	ldr	r3, [pc, #92]	; (800077c <MX_TIM2_Init+0x98>)
 8000720:	2200      	movs	r2, #0
 8000722:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000724:	4b15      	ldr	r3, [pc, #84]	; (800077c <MX_TIM2_Init+0x98>)
 8000726:	2200      	movs	r2, #0
 8000728:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800072a:	4814      	ldr	r0, [pc, #80]	; (800077c <MX_TIM2_Init+0x98>)
 800072c:	f003 fc80 	bl	8004030 <HAL_TIM_Base_Init>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000736:	f000 fabd 	bl	8000cb4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800073a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800073e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000740:	f107 0310 	add.w	r3, r7, #16
 8000744:	4619      	mov	r1, r3
 8000746:	480d      	ldr	r0, [pc, #52]	; (800077c <MX_TIM2_Init+0x98>)
 8000748:	f003 fcc9 	bl	80040de <HAL_TIM_ConfigClockSource>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000752:	f000 faaf 	bl	8000cb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000756:	2300      	movs	r3, #0
 8000758:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800075a:	2300      	movs	r3, #0
 800075c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800075e:	1d3b      	adds	r3, r7, #4
 8000760:	4619      	mov	r1, r3
 8000762:	4806      	ldr	r0, [pc, #24]	; (800077c <MX_TIM2_Init+0x98>)
 8000764:	f003 feb8 	bl	80044d8 <HAL_TIMEx_MasterConfigSynchronization>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800076e:	f000 faa1 	bl	8000cb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000772:	bf00      	nop
 8000774:	3720      	adds	r7, #32
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	200001d4 	.word	0x200001d4

08000780 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b08c      	sub	sp, #48	; 0x30
 8000784:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000786:	f107 031c 	add.w	r3, r7, #28
 800078a:	2200      	movs	r2, #0
 800078c:	601a      	str	r2, [r3, #0]
 800078e:	605a      	str	r2, [r3, #4]
 8000790:	609a      	str	r2, [r3, #8]
 8000792:	60da      	str	r2, [r3, #12]
 8000794:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000796:	4b70      	ldr	r3, [pc, #448]	; (8000958 <MX_GPIO_Init+0x1d8>)
 8000798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800079a:	4a6f      	ldr	r2, [pc, #444]	; (8000958 <MX_GPIO_Init+0x1d8>)
 800079c:	f043 0304 	orr.w	r3, r3, #4
 80007a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007a2:	4b6d      	ldr	r3, [pc, #436]	; (8000958 <MX_GPIO_Init+0x1d8>)
 80007a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007a6:	f003 0304 	and.w	r3, r3, #4
 80007aa:	61bb      	str	r3, [r7, #24]
 80007ac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007ae:	4b6a      	ldr	r3, [pc, #424]	; (8000958 <MX_GPIO_Init+0x1d8>)
 80007b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007b2:	4a69      	ldr	r2, [pc, #420]	; (8000958 <MX_GPIO_Init+0x1d8>)
 80007b4:	f043 0320 	orr.w	r3, r3, #32
 80007b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007ba:	4b67      	ldr	r3, [pc, #412]	; (8000958 <MX_GPIO_Init+0x1d8>)
 80007bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007be:	f003 0320 	and.w	r3, r3, #32
 80007c2:	617b      	str	r3, [r7, #20]
 80007c4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007c6:	4b64      	ldr	r3, [pc, #400]	; (8000958 <MX_GPIO_Init+0x1d8>)
 80007c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ca:	4a63      	ldr	r2, [pc, #396]	; (8000958 <MX_GPIO_Init+0x1d8>)
 80007cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007d2:	4b61      	ldr	r3, [pc, #388]	; (8000958 <MX_GPIO_Init+0x1d8>)
 80007d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007da:	613b      	str	r3, [r7, #16]
 80007dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007de:	4b5e      	ldr	r3, [pc, #376]	; (8000958 <MX_GPIO_Init+0x1d8>)
 80007e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007e2:	4a5d      	ldr	r2, [pc, #372]	; (8000958 <MX_GPIO_Init+0x1d8>)
 80007e4:	f043 0301 	orr.w	r3, r3, #1
 80007e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007ea:	4b5b      	ldr	r3, [pc, #364]	; (8000958 <MX_GPIO_Init+0x1d8>)
 80007ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ee:	f003 0301 	and.w	r3, r3, #1
 80007f2:	60fb      	str	r3, [r7, #12]
 80007f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007f6:	4b58      	ldr	r3, [pc, #352]	; (8000958 <MX_GPIO_Init+0x1d8>)
 80007f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007fa:	4a57      	ldr	r2, [pc, #348]	; (8000958 <MX_GPIO_Init+0x1d8>)
 80007fc:	f043 0302 	orr.w	r3, r3, #2
 8000800:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000802:	4b55      	ldr	r3, [pc, #340]	; (8000958 <MX_GPIO_Init+0x1d8>)
 8000804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000806:	f003 0302 	and.w	r3, r3, #2
 800080a:	60bb      	str	r3, [r7, #8]
 800080c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800080e:	4b52      	ldr	r3, [pc, #328]	; (8000958 <MX_GPIO_Init+0x1d8>)
 8000810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000812:	4a51      	ldr	r2, [pc, #324]	; (8000958 <MX_GPIO_Init+0x1d8>)
 8000814:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000818:	64d3      	str	r3, [r2, #76]	; 0x4c
 800081a:	4b4f      	ldr	r3, [pc, #316]	; (8000958 <MX_GPIO_Init+0x1d8>)
 800081c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800081e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000822:	607b      	str	r3, [r7, #4]
 8000824:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8000826:	f002 f8db 	bl	80029e0 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800082a:	4b4b      	ldr	r3, [pc, #300]	; (8000958 <MX_GPIO_Init+0x1d8>)
 800082c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800082e:	4a4a      	ldr	r2, [pc, #296]	; (8000958 <MX_GPIO_Init+0x1d8>)
 8000830:	f043 0308 	orr.w	r3, r3, #8
 8000834:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000836:	4b48      	ldr	r3, [pc, #288]	; (8000958 <MX_GPIO_Init+0x1d8>)
 8000838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800083a:	f003 0308 	and.w	r3, r3, #8
 800083e:	603b      	str	r3, [r7, #0]
 8000840:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(driverpin_GPIO_Port, driverpin_Pin, GPIO_PIN_RESET);
 8000842:	2200      	movs	r2, #0
 8000844:	2108      	movs	r1, #8
 8000846:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800084a:	f000 fe9d 	bl	8001588 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800084e:	2200      	movs	r2, #0
 8000850:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000854:	4841      	ldr	r0, [pc, #260]	; (800095c <MX_GPIO_Init+0x1dc>)
 8000856:	f000 fe97 	bl	8001588 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800085a:	2200      	movs	r2, #0
 800085c:	2140      	movs	r1, #64	; 0x40
 800085e:	4840      	ldr	r0, [pc, #256]	; (8000960 <MX_GPIO_Init+0x1e0>)
 8000860:	f000 fe92 	bl	8001588 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000864:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000868:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800086a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800086e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000870:	2300      	movs	r3, #0
 8000872:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000874:	f107 031c 	add.w	r3, r7, #28
 8000878:	4619      	mov	r1, r3
 800087a:	483a      	ldr	r0, [pc, #232]	; (8000964 <MX_GPIO_Init+0x1e4>)
 800087c:	f000 fcda 	bl	8001234 <HAL_GPIO_Init>

  /*Configure GPIO pins : btnLEFT_Pin btnDOWN_Pin */
  GPIO_InitStruct.Pin = btnLEFT_Pin|btnDOWN_Pin;
 8000880:	2306      	movs	r3, #6
 8000882:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000884:	2300      	movs	r3, #0
 8000886:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000888:	2300      	movs	r3, #0
 800088a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800088c:	f107 031c 	add.w	r3, r7, #28
 8000890:	4619      	mov	r1, r3
 8000892:	4835      	ldr	r0, [pc, #212]	; (8000968 <MX_GPIO_Init+0x1e8>)
 8000894:	f000 fcce 	bl	8001234 <HAL_GPIO_Init>

  /*Configure GPIO pins : btnA_Pin btnX_Pin btnB_Pin btnY_Pin
                           btnSTART_Pin */
  GPIO_InitStruct.Pin = btnA_Pin|btnX_Pin|btnB_Pin|btnY_Pin
 8000898:	233b      	movs	r3, #59	; 0x3b
 800089a:	61fb      	str	r3, [r7, #28]
                          |btnSTART_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800089c:	2300      	movs	r3, #0
 800089e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a0:	2300      	movs	r3, #0
 80008a2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008a4:	f107 031c 	add.w	r3, r7, #28
 80008a8:	4619      	mov	r1, r3
 80008aa:	482e      	ldr	r0, [pc, #184]	; (8000964 <MX_GPIO_Init+0x1e4>)
 80008ac:	f000 fcc2 	bl	8001234 <HAL_GPIO_Init>

  /*Configure GPIO pin : driverpin_Pin */
  GPIO_InitStruct.Pin = driverpin_Pin;
 80008b0:	2308      	movs	r3, #8
 80008b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b4:	2301      	movs	r3, #1
 80008b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b8:	2300      	movs	r3, #0
 80008ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008bc:	2300      	movs	r3, #0
 80008be:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(driverpin_GPIO_Port, &GPIO_InitStruct);
 80008c0:	f107 031c 	add.w	r3, r7, #28
 80008c4:	4619      	mov	r1, r3
 80008c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008ca:	f000 fcb3 	bl	8001234 <HAL_GPIO_Init>

  /*Configure GPIO pins : btnSELECT_Pin btnUP_Pin */
  GPIO_InitStruct.Pin = btnSELECT_Pin|btnUP_Pin;
 80008ce:	2344      	movs	r3, #68	; 0x44
 80008d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008d2:	2300      	movs	r3, #0
 80008d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d6:	2300      	movs	r3, #0
 80008d8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008da:	f107 031c 	add.w	r3, r7, #28
 80008de:	4619      	mov	r1, r3
 80008e0:	481e      	ldr	r0, [pc, #120]	; (800095c <MX_GPIO_Init+0x1dc>)
 80008e2:	f000 fca7 	bl	8001234 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 80008e6:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 80008ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ec:	2301      	movs	r3, #1
 80008ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f0:	2300      	movs	r3, #0
 80008f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f4:	2300      	movs	r3, #0
 80008f6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008f8:	f107 031c 	add.w	r3, r7, #28
 80008fc:	4619      	mov	r1, r3
 80008fe:	4817      	ldr	r0, [pc, #92]	; (800095c <MX_GPIO_Init+0x1dc>)
 8000900:	f000 fc98 	bl	8001234 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000904:	2320      	movs	r3, #32
 8000906:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000908:	2300      	movs	r3, #0
 800090a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090c:	2300      	movs	r3, #0
 800090e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000910:	f107 031c 	add.w	r3, r7, #28
 8000914:	4619      	mov	r1, r3
 8000916:	4812      	ldr	r0, [pc, #72]	; (8000960 <MX_GPIO_Init+0x1e0>)
 8000918:	f000 fc8c 	bl	8001234 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800091c:	2340      	movs	r3, #64	; 0x40
 800091e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000920:	2301      	movs	r3, #1
 8000922:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000924:	2300      	movs	r3, #0
 8000926:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000928:	2300      	movs	r3, #0
 800092a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800092c:	f107 031c 	add.w	r3, r7, #28
 8000930:	4619      	mov	r1, r3
 8000932:	480b      	ldr	r0, [pc, #44]	; (8000960 <MX_GPIO_Init+0x1e0>)
 8000934:	f000 fc7e 	bl	8001234 <HAL_GPIO_Init>

  /*Configure GPIO pins : HOTKEY_Pin btnRIGHT_Pin */
  GPIO_InitStruct.Pin = HOTKEY_Pin|btnRIGHT_Pin;
 8000938:	23c0      	movs	r3, #192	; 0xc0
 800093a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800093c:	2300      	movs	r3, #0
 800093e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000940:	2300      	movs	r3, #0
 8000942:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000944:	f107 031c 	add.w	r3, r7, #28
 8000948:	4619      	mov	r1, r3
 800094a:	4808      	ldr	r0, [pc, #32]	; (800096c <MX_GPIO_Init+0x1ec>)
 800094c:	f000 fc72 	bl	8001234 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000950:	bf00      	nop
 8000952:	3730      	adds	r7, #48	; 0x30
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	40021000 	.word	0x40021000
 800095c:	48000400 	.word	0x48000400
 8000960:	48001800 	.word	0x48001800
 8000964:	48000800 	.word	0x48000800
 8000968:	48001400 	.word	0x48001400
 800096c:	48000c00 	.word	0x48000c00

08000970 <checkkeys>:

/* USER CODE BEGIN 4 */
void checkkeys(void *argument)
{
 8000970:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000974:	b0c0      	sub	sp, #256	; 0x100
 8000976:	af00      	add	r7, sp, #0
 8000978:	60f8      	str	r0, [r7, #12]
	// setup the list of keys
	const uint8_t keycount = 11; // 4 buttons + 4 directional + start + select + hotkey
 800097a:	230b      	movs	r3, #11
 800097c:	f887 30fe 	strb.w	r3, [r7, #254]	; 0xfe

	// A button
	capkey_t buttonA;
	buttonA.pinIndex = 0;
 8000980:	2300      	movs	r3, #0
 8000982:	f887 30de 	strb.w	r3, [r7, #222]	; 0xde
	//buttonA.pinName = "btnA";
	buttonA.gpioport = btnA_GPIO_Port;
 8000986:	4bc1      	ldr	r3, [pc, #772]	; (8000c8c <checkkeys+0x31c>)
 8000988:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
	buttonA.gpiopin = btnA_Pin;
 800098c:	2301      	movs	r3, #1
 800098e:	f8a7 30e4 	strh.w	r3, [r7, #228]	; 0xe4
	buttonA.triggerTime = 3000;
 8000992:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000996:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
	buttonA.keyCode = 0x04;
 800099a:	2304      	movs	r3, #4
 800099c:	f887 30ec 	strb.w	r3, [r7, #236]	; 0xec

	// B button
	capkey_t buttonB;
	buttonB.pinIndex = 1;
 80009a0:	2301      	movs	r3, #1
 80009a2:	f887 30ca 	strb.w	r3, [r7, #202]	; 0xca
	buttonB.gpioport = btnB_GPIO_Port;
 80009a6:	4bb9      	ldr	r3, [pc, #740]	; (8000c8c <checkkeys+0x31c>)
 80009a8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	buttonB.gpiopin = btnB_Pin;
 80009ac:	2308      	movs	r3, #8
 80009ae:	f8a7 30d0 	strh.w	r3, [r7, #208]	; 0xd0
	buttonB.triggerTime = 3000;
 80009b2:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80009b6:	f8a7 30d2 	strh.w	r3, [r7, #210]	; 0xd2
	buttonB.keyCode = 0x05;
 80009ba:	2305      	movs	r3, #5
 80009bc:	f887 30d8 	strb.w	r3, [r7, #216]	; 0xd8

	// X button
	capkey_t buttonX;
	buttonX.pinIndex = 2;
 80009c0:	2302      	movs	r3, #2
 80009c2:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
	buttonX.gpioport = btnX_GPIO_Port;
 80009c6:	4bb1      	ldr	r3, [pc, #708]	; (8000c8c <checkkeys+0x31c>)
 80009c8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	buttonX.gpiopin = btnX_Pin;
 80009cc:	2302      	movs	r3, #2
 80009ce:	f8a7 30bc 	strh.w	r3, [r7, #188]	; 0xbc
	buttonX.triggerTime = 3000;
 80009d2:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80009d6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
	buttonX.keyCode = 0x1B;
 80009da:	231b      	movs	r3, #27
 80009dc:	f887 30c4 	strb.w	r3, [r7, #196]	; 0xc4

	// Y button
	capkey_t buttonY;
	buttonY.pinIndex = 3;
 80009e0:	2303      	movs	r3, #3
 80009e2:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
	buttonY.gpioport = btnY_GPIO_Port;
 80009e6:	4ba9      	ldr	r3, [pc, #676]	; (8000c8c <checkkeys+0x31c>)
 80009e8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	buttonY.gpiopin = btnY_Pin;
 80009ec:	2310      	movs	r3, #16
 80009ee:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
	buttonY.triggerTime = 3000;
 80009f2:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80009f6:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
	buttonY.keyCode = 0x1C;
 80009fa:	231c      	movs	r3, #28
 80009fc:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0

	// up button
	capkey_t buttonUp;
	buttonUp.pinIndex = 4;
 8000a00:	2304      	movs	r3, #4
 8000a02:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
	buttonUp.gpioport = btnUP_GPIO_Port;
 8000a06:	4ba2      	ldr	r3, [pc, #648]	; (8000c90 <checkkeys+0x320>)
 8000a08:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	buttonUp.gpiopin = btnUP_Pin;
 8000a0c:	2340      	movs	r3, #64	; 0x40
 8000a0e:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
	buttonUp.triggerTime = 3000;
 8000a12:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000a16:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
	buttonUp.keyCode = 0x52;
 8000a1a:	2352      	movs	r3, #82	; 0x52
 8000a1c:	f887 309c 	strb.w	r3, [r7, #156]	; 0x9c

	// down button
	capkey_t buttonDown;
	buttonDown.pinIndex = 5;
 8000a20:	2305      	movs	r3, #5
 8000a22:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
	buttonDown.gpioport = btnDOWN_GPIO_Port;
 8000a26:	4b9b      	ldr	r3, [pc, #620]	; (8000c94 <checkkeys+0x324>)
 8000a28:	67fb      	str	r3, [r7, #124]	; 0x7c
	buttonDown.gpiopin = btnDOWN_Pin;
 8000a2a:	2304      	movs	r3, #4
 8000a2c:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
	buttonDown.triggerTime = 3000;
 8000a30:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000a34:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
	buttonDown.keyCode = 0x51;
 8000a38:	2351      	movs	r3, #81	; 0x51
 8000a3a:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88

	// left button
	capkey_t buttonLeft;
	buttonLeft.pinIndex = 6;
 8000a3e:	2306      	movs	r3, #6
 8000a40:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	buttonLeft.gpioport = btnLEFT_GPIO_Port;
 8000a44:	4b93      	ldr	r3, [pc, #588]	; (8000c94 <checkkeys+0x324>)
 8000a46:	66bb      	str	r3, [r7, #104]	; 0x68
	buttonLeft.gpiopin = btnLEFT_Pin;
 8000a48:	2302      	movs	r3, #2
 8000a4a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
	buttonLeft.triggerTime = 3000;
 8000a4e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000a52:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
	buttonLeft.keyCode = 0x50;
 8000a56:	2350      	movs	r3, #80	; 0x50
 8000a58:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74

	// right button
	capkey_t buttonRight;
	buttonRight.pinIndex = 7;
 8000a5c:	2307      	movs	r3, #7
 8000a5e:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
	buttonRight.gpioport = btnRIGHT_GPIO_Port;
 8000a62:	4b8d      	ldr	r3, [pc, #564]	; (8000c98 <checkkeys+0x328>)
 8000a64:	657b      	str	r3, [r7, #84]	; 0x54
	buttonRight.gpiopin = btnRIGHT_Pin;
 8000a66:	2380      	movs	r3, #128	; 0x80
 8000a68:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
	buttonRight.triggerTime = 3000;
 8000a6c:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000a70:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	buttonRight.keyCode = 0x4F;
 8000a74:	234f      	movs	r3, #79	; 0x4f
 8000a76:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60

	// select button
	capkey_t buttonSelect;
	buttonSelect.pinIndex = 8;
 8000a7a:	2308      	movs	r3, #8
 8000a7c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	buttonSelect.gpioport = btnSELECT_GPIO_Port;
 8000a80:	4b83      	ldr	r3, [pc, #524]	; (8000c90 <checkkeys+0x320>)
 8000a82:	643b      	str	r3, [r7, #64]	; 0x40
	buttonSelect.gpiopin = btnSELECT_Pin;
 8000a84:	2304      	movs	r3, #4
 8000a86:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
	buttonSelect.triggerTime = 3000;
 8000a8a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000a8e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	buttonSelect.keyCode = 0x18; // scan key code for u
 8000a92:	2318      	movs	r3, #24
 8000a94:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c

	// start button
	capkey_t buttonStart;
	buttonStart.pinIndex = 9;
 8000a98:	2309      	movs	r3, #9
 8000a9a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	buttonStart.gpioport = btnSTART_GPIO_Port;
 8000a9e:	4b7b      	ldr	r3, [pc, #492]	; (8000c8c <checkkeys+0x31c>)
 8000aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
	buttonStart.gpiopin = btnSTART_Pin;
 8000aa2:	2320      	movs	r3, #32
 8000aa4:	863b      	strh	r3, [r7, #48]	; 0x30
	buttonStart.triggerTime = 3000;
 8000aa6:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000aaa:	867b      	strh	r3, [r7, #50]	; 0x32
	buttonStart.keyCode = 0x19; // scan key code for v
 8000aac:	2319      	movs	r3, #25
 8000aae:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38

	// HOTKEY
	capkey_t buttonHotkey;
	buttonHotkey.pinIndex = 10;
 8000ab2:	230a      	movs	r3, #10
 8000ab4:	75bb      	strb	r3, [r7, #22]
	buttonHotkey.gpioport = HOTKEY_GPIO_Port;
 8000ab6:	4b78      	ldr	r3, [pc, #480]	; (8000c98 <checkkeys+0x328>)
 8000ab8:	61bb      	str	r3, [r7, #24]
	buttonHotkey.gpiopin = HOTKEY_Pin;
 8000aba:	2340      	movs	r3, #64	; 0x40
 8000abc:	83bb      	strh	r3, [r7, #28]
	buttonHotkey.triggerTime = 3000;
 8000abe:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000ac2:	83fb      	strh	r3, [r7, #30]
	buttonHotkey.keyCode = 0x0B; // scan key code for h
 8000ac4:	230b      	movs	r3, #11
 8000ac6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

	capkey_t buttons[keycount];
 8000aca:	f897 30fe 	ldrb.w	r3, [r7, #254]	; 0xfe
 8000ace:	3b01      	subs	r3, #1
 8000ad0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8000ad4:	f897 30fe 	ldrb.w	r3, [r7, #254]	; 0xfe
 8000ad8:	2200      	movs	r2, #0
 8000ada:	603b      	str	r3, [r7, #0]
 8000adc:	607a      	str	r2, [r7, #4]
 8000ade:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000ae2:	f04f 0000 	mov.w	r0, #0
 8000ae6:	f04f 0100 	mov.w	r1, #0
 8000aea:	0099      	lsls	r1, r3, #2
 8000aec:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8000af0:	0090      	lsls	r0, r2, #2
 8000af2:	4602      	mov	r2, r0
 8000af4:	460b      	mov	r3, r1
 8000af6:	6839      	ldr	r1, [r7, #0]
 8000af8:	eb12 0801 	adds.w	r8, r2, r1
 8000afc:	6879      	ldr	r1, [r7, #4]
 8000afe:	eb43 0901 	adc.w	r9, r3, r1
 8000b02:	f04f 0200 	mov.w	r2, #0
 8000b06:	f04f 0300 	mov.w	r3, #0
 8000b0a:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8000b0e:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8000b12:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8000b16:	f897 30fe 	ldrb.w	r3, [r7, #254]	; 0xfe
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	469a      	mov	sl, r3
 8000b1e:	4693      	mov	fp, r2
 8000b20:	4652      	mov	r2, sl
 8000b22:	465b      	mov	r3, fp
 8000b24:	f04f 0000 	mov.w	r0, #0
 8000b28:	f04f 0100 	mov.w	r1, #0
 8000b2c:	0099      	lsls	r1, r3, #2
 8000b2e:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8000b32:	0090      	lsls	r0, r2, #2
 8000b34:	4602      	mov	r2, r0
 8000b36:	460b      	mov	r3, r1
 8000b38:	eb12 040a 	adds.w	r4, r2, sl
 8000b3c:	eb43 050b 	adc.w	r5, r3, fp
 8000b40:	f04f 0200 	mov.w	r2, #0
 8000b44:	f04f 0300 	mov.w	r3, #0
 8000b48:	016b      	lsls	r3, r5, #5
 8000b4a:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8000b4e:	0162      	lsls	r2, r4, #5
 8000b50:	f897 20fe 	ldrb.w	r2, [r7, #254]	; 0xfe
 8000b54:	4613      	mov	r3, r2
 8000b56:	009b      	lsls	r3, r3, #2
 8000b58:	4413      	add	r3, r2
 8000b5a:	009b      	lsls	r3, r3, #2
 8000b5c:	3307      	adds	r3, #7
 8000b5e:	08db      	lsrs	r3, r3, #3
 8000b60:	00db      	lsls	r3, r3, #3
 8000b62:	ebad 0d03 	sub.w	sp, sp, r3
 8000b66:	466b      	mov	r3, sp
 8000b68:	3303      	adds	r3, #3
 8000b6a:	089b      	lsrs	r3, r3, #2
 8000b6c:	009b      	lsls	r3, r3, #2
 8000b6e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
	buttons[0] = buttonA;
 8000b72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000b76:	461d      	mov	r5, r3
 8000b78:	f107 04dc 	add.w	r4, r7, #220	; 0xdc
 8000b7c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b7e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b80:	6823      	ldr	r3, [r4, #0]
 8000b82:	602b      	str	r3, [r5, #0]
	buttons[1] = buttonB;
 8000b84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000b88:	f103 0414 	add.w	r4, r3, #20
 8000b8c:	f107 05c8 	add.w	r5, r7, #200	; 0xc8
 8000b90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b94:	682b      	ldr	r3, [r5, #0]
 8000b96:	6023      	str	r3, [r4, #0]
	buttons[2] = buttonX;
 8000b98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000b9c:	f103 0428 	add.w	r4, r3, #40	; 0x28
 8000ba0:	f107 05b4 	add.w	r5, r7, #180	; 0xb4
 8000ba4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ba6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ba8:	682b      	ldr	r3, [r5, #0]
 8000baa:	6023      	str	r3, [r4, #0]
	buttons[3] = buttonY;
 8000bac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000bb0:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 8000bb4:	f107 05a0 	add.w	r5, r7, #160	; 0xa0
 8000bb8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bbc:	682b      	ldr	r3, [r5, #0]
 8000bbe:	6023      	str	r3, [r4, #0]
	buttons[4] = buttonUp;
 8000bc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000bc4:	f103 0450 	add.w	r4, r3, #80	; 0x50
 8000bc8:	f107 058c 	add.w	r5, r7, #140	; 0x8c
 8000bcc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bd0:	682b      	ldr	r3, [r5, #0]
 8000bd2:	6023      	str	r3, [r4, #0]
	buttons[5] = buttonDown;
 8000bd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000bd8:	f103 0464 	add.w	r4, r3, #100	; 0x64
 8000bdc:	f107 0578 	add.w	r5, r7, #120	; 0x78
 8000be0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000be2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000be4:	682b      	ldr	r3, [r5, #0]
 8000be6:	6023      	str	r3, [r4, #0]
	buttons[6] = buttonLeft;
 8000be8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000bec:	f103 0478 	add.w	r4, r3, #120	; 0x78
 8000bf0:	f107 0564 	add.w	r5, r7, #100	; 0x64
 8000bf4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bf6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bf8:	682b      	ldr	r3, [r5, #0]
 8000bfa:	6023      	str	r3, [r4, #0]
	buttons[7] = buttonRight;
 8000bfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000c00:	f103 048c 	add.w	r4, r3, #140	; 0x8c
 8000c04:	f107 0550 	add.w	r5, r7, #80	; 0x50
 8000c08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c0c:	682b      	ldr	r3, [r5, #0]
 8000c0e:	6023      	str	r3, [r4, #0]
	buttons[8] = buttonSelect;
 8000c10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000c14:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 8000c18:	f107 053c 	add.w	r5, r7, #60	; 0x3c
 8000c1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c20:	682b      	ldr	r3, [r5, #0]
 8000c22:	6023      	str	r3, [r4, #0]
	buttons[9] = buttonStart;
 8000c24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000c28:	f103 04b4 	add.w	r4, r3, #180	; 0xb4
 8000c2c:	f107 0528 	add.w	r5, r7, #40	; 0x28
 8000c30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c34:	682b      	ldr	r3, [r5, #0]
 8000c36:	6023      	str	r3, [r4, #0]
	buttons[10] = buttonHotkey;
 8000c38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000c3c:	f103 04c8 	add.w	r4, r3, #200	; 0xc8
 8000c40:	f107 0514 	add.w	r5, r7, #20
 8000c44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c48:	682b      	ldr	r3, [r5, #0]
 8000c4a:	6023      	str	r3, [r4, #0]

	// main loop
	for(;;)
	{
		// iterate through all the keys and see if we got a hit
		for(uint8_t i=0;i<keycount;i++)
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	f887 30ff 	strb.w	r3, [r7, #255]	; 0xff
 8000c52:	e014      	b.n	8000c7e <checkkeys+0x30e>
		{
			uint32_t keyTime = getKey(&buttons[i],&htim2);
 8000c54:	f897 20ff 	ldrb.w	r2, [r7, #255]	; 0xff
 8000c58:	4613      	mov	r3, r2
 8000c5a:	009b      	lsls	r3, r3, #2
 8000c5c:	4413      	add	r3, r2
 8000c5e:	009b      	lsls	r3, r3, #2
 8000c60:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8000c64:	4413      	add	r3, r2
 8000c66:	490d      	ldr	r1, [pc, #52]	; (8000c9c <checkkeys+0x32c>)
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f7ff fc3f 	bl	80004ec <getKey>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
		for(uint8_t i=0;i<keycount;i++)
 8000c74:	f897 30ff 	ldrb.w	r3, [r7, #255]	; 0xff
 8000c78:	3301      	adds	r3, #1
 8000c7a:	f887 30ff 	strb.w	r3, [r7, #255]	; 0xff
 8000c7e:	f897 20ff 	ldrb.w	r2, [r7, #255]	; 0xff
 8000c82:	f897 30fe 	ldrb.w	r3, [r7, #254]	; 0xfe
 8000c86:	429a      	cmp	r2, r3
 8000c88:	d3e4      	bcc.n	8000c54 <checkkeys+0x2e4>
 8000c8a:	e7df      	b.n	8000c4c <checkkeys+0x2dc>
 8000c8c:	48000800 	.word	0x48000800
 8000c90:	48000400 	.word	0x48000400
 8000c94:	48001400 	.word	0x48001400
 8000c98:	48000c00 	.word	0x48000c00
 8000c9c:	200001d4 	.word	0x200001d4

08000ca0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000ca8:	f009 fed0 	bl	800aa4c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000cac:	2001      	movs	r0, #1
 8000cae:	f007 fa59 	bl	8008164 <osDelay>
 8000cb2:	e7fb      	b.n	8000cac <StartDefaultTask+0xc>

08000cb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cb8:	b672      	cpsid	i
}
 8000cba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cbc:	e7fe      	b.n	8000cbc <Error_Handler+0x8>
	...

08000cc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cc6:	4b11      	ldr	r3, [pc, #68]	; (8000d0c <HAL_MspInit+0x4c>)
 8000cc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cca:	4a10      	ldr	r2, [pc, #64]	; (8000d0c <HAL_MspInit+0x4c>)
 8000ccc:	f043 0301 	orr.w	r3, r3, #1
 8000cd0:	6613      	str	r3, [r2, #96]	; 0x60
 8000cd2:	4b0e      	ldr	r3, [pc, #56]	; (8000d0c <HAL_MspInit+0x4c>)
 8000cd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cd6:	f003 0301 	and.w	r3, r3, #1
 8000cda:	607b      	str	r3, [r7, #4]
 8000cdc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cde:	4b0b      	ldr	r3, [pc, #44]	; (8000d0c <HAL_MspInit+0x4c>)
 8000ce0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ce2:	4a0a      	ldr	r2, [pc, #40]	; (8000d0c <HAL_MspInit+0x4c>)
 8000ce4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ce8:	6593      	str	r3, [r2, #88]	; 0x58
 8000cea:	4b08      	ldr	r3, [pc, #32]	; (8000d0c <HAL_MspInit+0x4c>)
 8000cec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	603b      	str	r3, [r7, #0]
 8000cf4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	210f      	movs	r1, #15
 8000cfa:	f06f 0001 	mvn.w	r0, #1
 8000cfe:	f000 fa62 	bl	80011c6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d02:	bf00      	nop
 8000d04:	3708      	adds	r7, #8
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	40021000 	.word	0x40021000

08000d10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b0ac      	sub	sp, #176	; 0xb0
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d18:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	601a      	str	r2, [r3, #0]
 8000d20:	605a      	str	r2, [r3, #4]
 8000d22:	609a      	str	r2, [r3, #8]
 8000d24:	60da      	str	r2, [r3, #12]
 8000d26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d28:	f107 0310 	add.w	r3, r7, #16
 8000d2c:	228c      	movs	r2, #140	; 0x8c
 8000d2e:	2100      	movs	r1, #0
 8000d30:	4618      	mov	r0, r3
 8000d32:	f00a fc15 	bl	800b560 <memset>
  if(huart->Instance==LPUART1)
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	4a22      	ldr	r2, [pc, #136]	; (8000dc4 <HAL_UART_MspInit+0xb4>)
 8000d3c:	4293      	cmp	r3, r2
 8000d3e:	d13d      	bne.n	8000dbc <HAL_UART_MspInit+0xac>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000d40:	2320      	movs	r3, #32
 8000d42:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000d44:	2300      	movs	r3, #0
 8000d46:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d48:	f107 0310 	add.w	r3, r7, #16
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f002 fc95 	bl	800367c <HAL_RCCEx_PeriphCLKConfig>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000d58:	f7ff ffac 	bl	8000cb4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000d5c:	4b1a      	ldr	r3, [pc, #104]	; (8000dc8 <HAL_UART_MspInit+0xb8>)
 8000d5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000d60:	4a19      	ldr	r2, [pc, #100]	; (8000dc8 <HAL_UART_MspInit+0xb8>)
 8000d62:	f043 0301 	orr.w	r3, r3, #1
 8000d66:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000d68:	4b17      	ldr	r3, [pc, #92]	; (8000dc8 <HAL_UART_MspInit+0xb8>)
 8000d6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000d6c:	f003 0301 	and.w	r3, r3, #1
 8000d70:	60fb      	str	r3, [r7, #12]
 8000d72:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d74:	4b14      	ldr	r3, [pc, #80]	; (8000dc8 <HAL_UART_MspInit+0xb8>)
 8000d76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d78:	4a13      	ldr	r2, [pc, #76]	; (8000dc8 <HAL_UART_MspInit+0xb8>)
 8000d7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d7e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d80:	4b11      	ldr	r3, [pc, #68]	; (8000dc8 <HAL_UART_MspInit+0xb8>)
 8000d82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d88:	60bb      	str	r3, [r7, #8]
 8000d8a:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8000d8c:	f001 fe28 	bl	80029e0 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000d90:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000d94:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d98:	2302      	movs	r3, #2
 8000d9a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000da4:	2303      	movs	r3, #3
 8000da6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000daa:	2308      	movs	r3, #8
 8000dac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000db0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000db4:	4619      	mov	r1, r3
 8000db6:	4805      	ldr	r0, [pc, #20]	; (8000dcc <HAL_UART_MspInit+0xbc>)
 8000db8:	f000 fa3c 	bl	8001234 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000dbc:	bf00      	nop
 8000dbe:	37b0      	adds	r7, #176	; 0xb0
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	40008000 	.word	0x40008000
 8000dc8:	40021000 	.word	0x40021000
 8000dcc:	48001800 	.word	0x48001800

08000dd0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b085      	sub	sp, #20
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000de0:	d10b      	bne.n	8000dfa <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000de2:	4b09      	ldr	r3, [pc, #36]	; (8000e08 <HAL_TIM_Base_MspInit+0x38>)
 8000de4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000de6:	4a08      	ldr	r2, [pc, #32]	; (8000e08 <HAL_TIM_Base_MspInit+0x38>)
 8000de8:	f043 0301 	orr.w	r3, r3, #1
 8000dec:	6593      	str	r3, [r2, #88]	; 0x58
 8000dee:	4b06      	ldr	r3, [pc, #24]	; (8000e08 <HAL_TIM_Base_MspInit+0x38>)
 8000df0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000df2:	f003 0301 	and.w	r3, r3, #1
 8000df6:	60fb      	str	r3, [r7, #12]
 8000df8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000dfa:	bf00      	nop
 8000dfc:	3714      	adds	r7, #20
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	40021000 	.word	0x40021000

08000e0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e10:	e7fe      	b.n	8000e10 <NMI_Handler+0x4>

08000e12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e12:	b480      	push	{r7}
 8000e14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e16:	e7fe      	b.n	8000e16 <HardFault_Handler+0x4>

08000e18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e1c:	e7fe      	b.n	8000e1c <MemManage_Handler+0x4>

08000e1e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e1e:	b480      	push	{r7}
 8000e20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e22:	e7fe      	b.n	8000e22 <BusFault_Handler+0x4>

08000e24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e28:	e7fe      	b.n	8000e28 <UsageFault_Handler+0x4>

08000e2a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e2a:	b480      	push	{r7}
 8000e2c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e2e:	bf00      	nop
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr

08000e38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e3c:	f000 f8a4 	bl	8000f88 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000e40:	f008 fd9e 	bl	8009980 <xTaskGetSchedulerState>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b01      	cmp	r3, #1
 8000e48:	d001      	beq.n	8000e4e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000e4a:	f009 fb85 	bl	800a558 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e4e:	bf00      	nop
 8000e50:	bd80      	pop	{r7, pc}
	...

08000e54 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000e58:	4802      	ldr	r0, [pc, #8]	; (8000e64 <OTG_FS_IRQHandler+0x10>)
 8000e5a:	f000 fd00 	bl	800185e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000e5e:	bf00      	nop
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	20002014 	.word	0x20002014

08000e68 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000e6c:	4b06      	ldr	r3, [pc, #24]	; (8000e88 <SystemInit+0x20>)
 8000e6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e72:	4a05      	ldr	r2, [pc, #20]	; (8000e88 <SystemInit+0x20>)
 8000e74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000e7c:	bf00      	nop
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop
 8000e88:	e000ed00 	.word	0xe000ed00

08000e8c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000e8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ec4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e90:	f7ff ffea 	bl	8000e68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e94:	480c      	ldr	r0, [pc, #48]	; (8000ec8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e96:	490d      	ldr	r1, [pc, #52]	; (8000ecc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e98:	4a0d      	ldr	r2, [pc, #52]	; (8000ed0 <LoopForever+0xe>)
  movs r3, #0
 8000e9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e9c:	e002      	b.n	8000ea4 <LoopCopyDataInit>

08000e9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ea0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ea2:	3304      	adds	r3, #4

08000ea4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ea4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ea6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ea8:	d3f9      	bcc.n	8000e9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eaa:	4a0a      	ldr	r2, [pc, #40]	; (8000ed4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000eac:	4c0a      	ldr	r4, [pc, #40]	; (8000ed8 <LoopForever+0x16>)
  movs r3, #0
 8000eae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000eb0:	e001      	b.n	8000eb6 <LoopFillZerobss>

08000eb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000eb4:	3204      	adds	r2, #4

08000eb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000eb8:	d3fb      	bcc.n	8000eb2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000eba:	f00a fb59 	bl	800b570 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ebe:	f7ff fb51 	bl	8000564 <main>

08000ec2 <LoopForever>:

LoopForever:
    b LoopForever
 8000ec2:	e7fe      	b.n	8000ec2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ec4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000ec8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ecc:	20000130 	.word	0x20000130
  ldr r2, =_sidata
 8000ed0:	0800b708 	.word	0x0800b708
  ldr r2, =_sbss
 8000ed4:	20000130 	.word	0x20000130
  ldr r4, =_ebss
 8000ed8:	20002534 	.word	0x20002534

08000edc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000edc:	e7fe      	b.n	8000edc <ADC1_2_IRQHandler>

08000ede <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ede:	b580      	push	{r7, lr}
 8000ee0:	b082      	sub	sp, #8
 8000ee2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ee8:	2003      	movs	r0, #3
 8000eea:	f000 f961 	bl	80011b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000eee:	200f      	movs	r0, #15
 8000ef0:	f000 f80e 	bl	8000f10 <HAL_InitTick>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d002      	beq.n	8000f00 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000efa:	2301      	movs	r3, #1
 8000efc:	71fb      	strb	r3, [r7, #7]
 8000efe:	e001      	b.n	8000f04 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f00:	f7ff fede 	bl	8000cc0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f04:	79fb      	ldrb	r3, [r7, #7]
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	3708      	adds	r7, #8
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
	...

08000f10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b084      	sub	sp, #16
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000f1c:	4b17      	ldr	r3, [pc, #92]	; (8000f7c <HAL_InitTick+0x6c>)
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d023      	beq.n	8000f6c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000f24:	4b16      	ldr	r3, [pc, #88]	; (8000f80 <HAL_InitTick+0x70>)
 8000f26:	681a      	ldr	r2, [r3, #0]
 8000f28:	4b14      	ldr	r3, [pc, #80]	; (8000f7c <HAL_InitTick+0x6c>)
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f32:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f36:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f000 f96d 	bl	800121a <HAL_SYSTICK_Config>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d10f      	bne.n	8000f66 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	2b0f      	cmp	r3, #15
 8000f4a:	d809      	bhi.n	8000f60 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	6879      	ldr	r1, [r7, #4]
 8000f50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f54:	f000 f937 	bl	80011c6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f58:	4a0a      	ldr	r2, [pc, #40]	; (8000f84 <HAL_InitTick+0x74>)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	6013      	str	r3, [r2, #0]
 8000f5e:	e007      	b.n	8000f70 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000f60:	2301      	movs	r3, #1
 8000f62:	73fb      	strb	r3, [r7, #15]
 8000f64:	e004      	b.n	8000f70 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f66:	2301      	movs	r3, #1
 8000f68:	73fb      	strb	r3, [r7, #15]
 8000f6a:	e001      	b.n	8000f70 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f70:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	3710      	adds	r7, #16
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	20000008 	.word	0x20000008
 8000f80:	20000000 	.word	0x20000000
 8000f84:	20000004 	.word	0x20000004

08000f88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f8c:	4b06      	ldr	r3, [pc, #24]	; (8000fa8 <HAL_IncTick+0x20>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	461a      	mov	r2, r3
 8000f92:	4b06      	ldr	r3, [pc, #24]	; (8000fac <HAL_IncTick+0x24>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4413      	add	r3, r2
 8000f98:	4a04      	ldr	r2, [pc, #16]	; (8000fac <HAL_IncTick+0x24>)
 8000f9a:	6013      	str	r3, [r2, #0]
}
 8000f9c:	bf00      	nop
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	20000008 	.word	0x20000008
 8000fac:	20000228 	.word	0x20000228

08000fb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  return uwTick;
 8000fb4:	4b03      	ldr	r3, [pc, #12]	; (8000fc4 <HAL_GetTick+0x14>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	20000228 	.word	0x20000228

08000fc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b084      	sub	sp, #16
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fd0:	f7ff ffee 	bl	8000fb0 <HAL_GetTick>
 8000fd4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000fe0:	d005      	beq.n	8000fee <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000fe2:	4b0a      	ldr	r3, [pc, #40]	; (800100c <HAL_Delay+0x44>)
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	461a      	mov	r2, r3
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	4413      	add	r3, r2
 8000fec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fee:	bf00      	nop
 8000ff0:	f7ff ffde 	bl	8000fb0 <HAL_GetTick>
 8000ff4:	4602      	mov	r2, r0
 8000ff6:	68bb      	ldr	r3, [r7, #8]
 8000ff8:	1ad3      	subs	r3, r2, r3
 8000ffa:	68fa      	ldr	r2, [r7, #12]
 8000ffc:	429a      	cmp	r2, r3
 8000ffe:	d8f7      	bhi.n	8000ff0 <HAL_Delay+0x28>
  {
  }
}
 8001000:	bf00      	nop
 8001002:	bf00      	nop
 8001004:	3710      	adds	r7, #16
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	20000008 	.word	0x20000008

08001010 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001010:	b480      	push	{r7}
 8001012:	b085      	sub	sp, #20
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	f003 0307 	and.w	r3, r3, #7
 800101e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001020:	4b0c      	ldr	r3, [pc, #48]	; (8001054 <__NVIC_SetPriorityGrouping+0x44>)
 8001022:	68db      	ldr	r3, [r3, #12]
 8001024:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001026:	68ba      	ldr	r2, [r7, #8]
 8001028:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800102c:	4013      	ands	r3, r2
 800102e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001038:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800103c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001040:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001042:	4a04      	ldr	r2, [pc, #16]	; (8001054 <__NVIC_SetPriorityGrouping+0x44>)
 8001044:	68bb      	ldr	r3, [r7, #8]
 8001046:	60d3      	str	r3, [r2, #12]
}
 8001048:	bf00      	nop
 800104a:	3714      	adds	r7, #20
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr
 8001054:	e000ed00 	.word	0xe000ed00

08001058 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800105c:	4b04      	ldr	r3, [pc, #16]	; (8001070 <__NVIC_GetPriorityGrouping+0x18>)
 800105e:	68db      	ldr	r3, [r3, #12]
 8001060:	0a1b      	lsrs	r3, r3, #8
 8001062:	f003 0307 	and.w	r3, r3, #7
}
 8001066:	4618      	mov	r0, r3
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr
 8001070:	e000ed00 	.word	0xe000ed00

08001074 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	4603      	mov	r3, r0
 800107c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800107e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001082:	2b00      	cmp	r3, #0
 8001084:	db0b      	blt.n	800109e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001086:	79fb      	ldrb	r3, [r7, #7]
 8001088:	f003 021f 	and.w	r2, r3, #31
 800108c:	4907      	ldr	r1, [pc, #28]	; (80010ac <__NVIC_EnableIRQ+0x38>)
 800108e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001092:	095b      	lsrs	r3, r3, #5
 8001094:	2001      	movs	r0, #1
 8001096:	fa00 f202 	lsl.w	r2, r0, r2
 800109a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800109e:	bf00      	nop
 80010a0:	370c      	adds	r7, #12
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	e000e100 	.word	0xe000e100

080010b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	4603      	mov	r3, r0
 80010b8:	6039      	str	r1, [r7, #0]
 80010ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	db0a      	blt.n	80010da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	b2da      	uxtb	r2, r3
 80010c8:	490c      	ldr	r1, [pc, #48]	; (80010fc <__NVIC_SetPriority+0x4c>)
 80010ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ce:	0112      	lsls	r2, r2, #4
 80010d0:	b2d2      	uxtb	r2, r2
 80010d2:	440b      	add	r3, r1
 80010d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010d8:	e00a      	b.n	80010f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	b2da      	uxtb	r2, r3
 80010de:	4908      	ldr	r1, [pc, #32]	; (8001100 <__NVIC_SetPriority+0x50>)
 80010e0:	79fb      	ldrb	r3, [r7, #7]
 80010e2:	f003 030f 	and.w	r3, r3, #15
 80010e6:	3b04      	subs	r3, #4
 80010e8:	0112      	lsls	r2, r2, #4
 80010ea:	b2d2      	uxtb	r2, r2
 80010ec:	440b      	add	r3, r1
 80010ee:	761a      	strb	r2, [r3, #24]
}
 80010f0:	bf00      	nop
 80010f2:	370c      	adds	r7, #12
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr
 80010fc:	e000e100 	.word	0xe000e100
 8001100:	e000ed00 	.word	0xe000ed00

08001104 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001104:	b480      	push	{r7}
 8001106:	b089      	sub	sp, #36	; 0x24
 8001108:	af00      	add	r7, sp, #0
 800110a:	60f8      	str	r0, [r7, #12]
 800110c:	60b9      	str	r1, [r7, #8]
 800110e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	f003 0307 	and.w	r3, r3, #7
 8001116:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001118:	69fb      	ldr	r3, [r7, #28]
 800111a:	f1c3 0307 	rsb	r3, r3, #7
 800111e:	2b04      	cmp	r3, #4
 8001120:	bf28      	it	cs
 8001122:	2304      	movcs	r3, #4
 8001124:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	3304      	adds	r3, #4
 800112a:	2b06      	cmp	r3, #6
 800112c:	d902      	bls.n	8001134 <NVIC_EncodePriority+0x30>
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	3b03      	subs	r3, #3
 8001132:	e000      	b.n	8001136 <NVIC_EncodePriority+0x32>
 8001134:	2300      	movs	r3, #0
 8001136:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001138:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800113c:	69bb      	ldr	r3, [r7, #24]
 800113e:	fa02 f303 	lsl.w	r3, r2, r3
 8001142:	43da      	mvns	r2, r3
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	401a      	ands	r2, r3
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800114c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	fa01 f303 	lsl.w	r3, r1, r3
 8001156:	43d9      	mvns	r1, r3
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800115c:	4313      	orrs	r3, r2
         );
}
 800115e:	4618      	mov	r0, r3
 8001160:	3724      	adds	r7, #36	; 0x24
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
	...

0800116c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	3b01      	subs	r3, #1
 8001178:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800117c:	d301      	bcc.n	8001182 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800117e:	2301      	movs	r3, #1
 8001180:	e00f      	b.n	80011a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001182:	4a0a      	ldr	r2, [pc, #40]	; (80011ac <SysTick_Config+0x40>)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	3b01      	subs	r3, #1
 8001188:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800118a:	210f      	movs	r1, #15
 800118c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001190:	f7ff ff8e 	bl	80010b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001194:	4b05      	ldr	r3, [pc, #20]	; (80011ac <SysTick_Config+0x40>)
 8001196:	2200      	movs	r2, #0
 8001198:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800119a:	4b04      	ldr	r3, [pc, #16]	; (80011ac <SysTick_Config+0x40>)
 800119c:	2207      	movs	r2, #7
 800119e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011a0:	2300      	movs	r3, #0
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	3708      	adds	r7, #8
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	e000e010 	.word	0xe000e010

080011b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011b8:	6878      	ldr	r0, [r7, #4]
 80011ba:	f7ff ff29 	bl	8001010 <__NVIC_SetPriorityGrouping>
}
 80011be:	bf00      	nop
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}

080011c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011c6:	b580      	push	{r7, lr}
 80011c8:	b086      	sub	sp, #24
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	4603      	mov	r3, r0
 80011ce:	60b9      	str	r1, [r7, #8]
 80011d0:	607a      	str	r2, [r7, #4]
 80011d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80011d4:	2300      	movs	r3, #0
 80011d6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80011d8:	f7ff ff3e 	bl	8001058 <__NVIC_GetPriorityGrouping>
 80011dc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011de:	687a      	ldr	r2, [r7, #4]
 80011e0:	68b9      	ldr	r1, [r7, #8]
 80011e2:	6978      	ldr	r0, [r7, #20]
 80011e4:	f7ff ff8e 	bl	8001104 <NVIC_EncodePriority>
 80011e8:	4602      	mov	r2, r0
 80011ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011ee:	4611      	mov	r1, r2
 80011f0:	4618      	mov	r0, r3
 80011f2:	f7ff ff5d 	bl	80010b0 <__NVIC_SetPriority>
}
 80011f6:	bf00      	nop
 80011f8:	3718      	adds	r7, #24
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}

080011fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011fe:	b580      	push	{r7, lr}
 8001200:	b082      	sub	sp, #8
 8001202:	af00      	add	r7, sp, #0
 8001204:	4603      	mov	r3, r0
 8001206:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001208:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800120c:	4618      	mov	r0, r3
 800120e:	f7ff ff31 	bl	8001074 <__NVIC_EnableIRQ>
}
 8001212:	bf00      	nop
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}

0800121a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800121a:	b580      	push	{r7, lr}
 800121c:	b082      	sub	sp, #8
 800121e:	af00      	add	r7, sp, #0
 8001220:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	f7ff ffa2 	bl	800116c <SysTick_Config>
 8001228:	4603      	mov	r3, r0
}
 800122a:	4618      	mov	r0, r3
 800122c:	3708      	adds	r7, #8
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
	...

08001234 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001234:	b480      	push	{r7}
 8001236:	b087      	sub	sp, #28
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
 800123c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800123e:	2300      	movs	r3, #0
 8001240:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001242:	e166      	b.n	8001512 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	681a      	ldr	r2, [r3, #0]
 8001248:	2101      	movs	r1, #1
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	fa01 f303 	lsl.w	r3, r1, r3
 8001250:	4013      	ands	r3, r2
 8001252:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	2b00      	cmp	r3, #0
 8001258:	f000 8158 	beq.w	800150c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	f003 0303 	and.w	r3, r3, #3
 8001264:	2b01      	cmp	r3, #1
 8001266:	d005      	beq.n	8001274 <HAL_GPIO_Init+0x40>
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f003 0303 	and.w	r3, r3, #3
 8001270:	2b02      	cmp	r3, #2
 8001272:	d130      	bne.n	80012d6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	689b      	ldr	r3, [r3, #8]
 8001278:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	005b      	lsls	r3, r3, #1
 800127e:	2203      	movs	r2, #3
 8001280:	fa02 f303 	lsl.w	r3, r2, r3
 8001284:	43db      	mvns	r3, r3
 8001286:	693a      	ldr	r2, [r7, #16]
 8001288:	4013      	ands	r3, r2
 800128a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	68da      	ldr	r2, [r3, #12]
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	005b      	lsls	r3, r3, #1
 8001294:	fa02 f303 	lsl.w	r3, r2, r3
 8001298:	693a      	ldr	r2, [r7, #16]
 800129a:	4313      	orrs	r3, r2
 800129c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	693a      	ldr	r2, [r7, #16]
 80012a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80012aa:	2201      	movs	r2, #1
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	fa02 f303 	lsl.w	r3, r2, r3
 80012b2:	43db      	mvns	r3, r3
 80012b4:	693a      	ldr	r2, [r7, #16]
 80012b6:	4013      	ands	r3, r2
 80012b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	091b      	lsrs	r3, r3, #4
 80012c0:	f003 0201 	and.w	r2, r3, #1
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ca:	693a      	ldr	r2, [r7, #16]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	693a      	ldr	r2, [r7, #16]
 80012d4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	f003 0303 	and.w	r3, r3, #3
 80012de:	2b03      	cmp	r3, #3
 80012e0:	d017      	beq.n	8001312 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	68db      	ldr	r3, [r3, #12]
 80012e6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	005b      	lsls	r3, r3, #1
 80012ec:	2203      	movs	r2, #3
 80012ee:	fa02 f303 	lsl.w	r3, r2, r3
 80012f2:	43db      	mvns	r3, r3
 80012f4:	693a      	ldr	r2, [r7, #16]
 80012f6:	4013      	ands	r3, r2
 80012f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	689a      	ldr	r2, [r3, #8]
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	005b      	lsls	r3, r3, #1
 8001302:	fa02 f303 	lsl.w	r3, r2, r3
 8001306:	693a      	ldr	r2, [r7, #16]
 8001308:	4313      	orrs	r3, r2
 800130a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	693a      	ldr	r2, [r7, #16]
 8001310:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	f003 0303 	and.w	r3, r3, #3
 800131a:	2b02      	cmp	r3, #2
 800131c:	d123      	bne.n	8001366 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	08da      	lsrs	r2, r3, #3
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	3208      	adds	r2, #8
 8001326:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800132a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	f003 0307 	and.w	r3, r3, #7
 8001332:	009b      	lsls	r3, r3, #2
 8001334:	220f      	movs	r2, #15
 8001336:	fa02 f303 	lsl.w	r3, r2, r3
 800133a:	43db      	mvns	r3, r3
 800133c:	693a      	ldr	r2, [r7, #16]
 800133e:	4013      	ands	r3, r2
 8001340:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	691a      	ldr	r2, [r3, #16]
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	f003 0307 	and.w	r3, r3, #7
 800134c:	009b      	lsls	r3, r3, #2
 800134e:	fa02 f303 	lsl.w	r3, r2, r3
 8001352:	693a      	ldr	r2, [r7, #16]
 8001354:	4313      	orrs	r3, r2
 8001356:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	08da      	lsrs	r2, r3, #3
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	3208      	adds	r2, #8
 8001360:	6939      	ldr	r1, [r7, #16]
 8001362:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	005b      	lsls	r3, r3, #1
 8001370:	2203      	movs	r2, #3
 8001372:	fa02 f303 	lsl.w	r3, r2, r3
 8001376:	43db      	mvns	r3, r3
 8001378:	693a      	ldr	r2, [r7, #16]
 800137a:	4013      	ands	r3, r2
 800137c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	f003 0203 	and.w	r2, r3, #3
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	005b      	lsls	r3, r3, #1
 800138a:	fa02 f303 	lsl.w	r3, r2, r3
 800138e:	693a      	ldr	r2, [r7, #16]
 8001390:	4313      	orrs	r3, r2
 8001392:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	693a      	ldr	r2, [r7, #16]
 8001398:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	f000 80b2 	beq.w	800150c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013a8:	4b61      	ldr	r3, [pc, #388]	; (8001530 <HAL_GPIO_Init+0x2fc>)
 80013aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013ac:	4a60      	ldr	r2, [pc, #384]	; (8001530 <HAL_GPIO_Init+0x2fc>)
 80013ae:	f043 0301 	orr.w	r3, r3, #1
 80013b2:	6613      	str	r3, [r2, #96]	; 0x60
 80013b4:	4b5e      	ldr	r3, [pc, #376]	; (8001530 <HAL_GPIO_Init+0x2fc>)
 80013b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013b8:	f003 0301 	and.w	r3, r3, #1
 80013bc:	60bb      	str	r3, [r7, #8]
 80013be:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80013c0:	4a5c      	ldr	r2, [pc, #368]	; (8001534 <HAL_GPIO_Init+0x300>)
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	089b      	lsrs	r3, r3, #2
 80013c6:	3302      	adds	r3, #2
 80013c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	f003 0303 	and.w	r3, r3, #3
 80013d4:	009b      	lsls	r3, r3, #2
 80013d6:	220f      	movs	r2, #15
 80013d8:	fa02 f303 	lsl.w	r3, r2, r3
 80013dc:	43db      	mvns	r3, r3
 80013de:	693a      	ldr	r2, [r7, #16]
 80013e0:	4013      	ands	r3, r2
 80013e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80013ea:	d02b      	beq.n	8001444 <HAL_GPIO_Init+0x210>
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	4a52      	ldr	r2, [pc, #328]	; (8001538 <HAL_GPIO_Init+0x304>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d025      	beq.n	8001440 <HAL_GPIO_Init+0x20c>
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	4a51      	ldr	r2, [pc, #324]	; (800153c <HAL_GPIO_Init+0x308>)
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d01f      	beq.n	800143c <HAL_GPIO_Init+0x208>
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	4a50      	ldr	r2, [pc, #320]	; (8001540 <HAL_GPIO_Init+0x30c>)
 8001400:	4293      	cmp	r3, r2
 8001402:	d019      	beq.n	8001438 <HAL_GPIO_Init+0x204>
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	4a4f      	ldr	r2, [pc, #316]	; (8001544 <HAL_GPIO_Init+0x310>)
 8001408:	4293      	cmp	r3, r2
 800140a:	d013      	beq.n	8001434 <HAL_GPIO_Init+0x200>
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	4a4e      	ldr	r2, [pc, #312]	; (8001548 <HAL_GPIO_Init+0x314>)
 8001410:	4293      	cmp	r3, r2
 8001412:	d00d      	beq.n	8001430 <HAL_GPIO_Init+0x1fc>
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	4a4d      	ldr	r2, [pc, #308]	; (800154c <HAL_GPIO_Init+0x318>)
 8001418:	4293      	cmp	r3, r2
 800141a:	d007      	beq.n	800142c <HAL_GPIO_Init+0x1f8>
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	4a4c      	ldr	r2, [pc, #304]	; (8001550 <HAL_GPIO_Init+0x31c>)
 8001420:	4293      	cmp	r3, r2
 8001422:	d101      	bne.n	8001428 <HAL_GPIO_Init+0x1f4>
 8001424:	2307      	movs	r3, #7
 8001426:	e00e      	b.n	8001446 <HAL_GPIO_Init+0x212>
 8001428:	2308      	movs	r3, #8
 800142a:	e00c      	b.n	8001446 <HAL_GPIO_Init+0x212>
 800142c:	2306      	movs	r3, #6
 800142e:	e00a      	b.n	8001446 <HAL_GPIO_Init+0x212>
 8001430:	2305      	movs	r3, #5
 8001432:	e008      	b.n	8001446 <HAL_GPIO_Init+0x212>
 8001434:	2304      	movs	r3, #4
 8001436:	e006      	b.n	8001446 <HAL_GPIO_Init+0x212>
 8001438:	2303      	movs	r3, #3
 800143a:	e004      	b.n	8001446 <HAL_GPIO_Init+0x212>
 800143c:	2302      	movs	r3, #2
 800143e:	e002      	b.n	8001446 <HAL_GPIO_Init+0x212>
 8001440:	2301      	movs	r3, #1
 8001442:	e000      	b.n	8001446 <HAL_GPIO_Init+0x212>
 8001444:	2300      	movs	r3, #0
 8001446:	697a      	ldr	r2, [r7, #20]
 8001448:	f002 0203 	and.w	r2, r2, #3
 800144c:	0092      	lsls	r2, r2, #2
 800144e:	4093      	lsls	r3, r2
 8001450:	693a      	ldr	r2, [r7, #16]
 8001452:	4313      	orrs	r3, r2
 8001454:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001456:	4937      	ldr	r1, [pc, #220]	; (8001534 <HAL_GPIO_Init+0x300>)
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	089b      	lsrs	r3, r3, #2
 800145c:	3302      	adds	r3, #2
 800145e:	693a      	ldr	r2, [r7, #16]
 8001460:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001464:	4b3b      	ldr	r3, [pc, #236]	; (8001554 <HAL_GPIO_Init+0x320>)
 8001466:	689b      	ldr	r3, [r3, #8]
 8001468:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	43db      	mvns	r3, r3
 800146e:	693a      	ldr	r2, [r7, #16]
 8001470:	4013      	ands	r3, r2
 8001472:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800147c:	2b00      	cmp	r3, #0
 800147e:	d003      	beq.n	8001488 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001480:	693a      	ldr	r2, [r7, #16]
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	4313      	orrs	r3, r2
 8001486:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001488:	4a32      	ldr	r2, [pc, #200]	; (8001554 <HAL_GPIO_Init+0x320>)
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800148e:	4b31      	ldr	r3, [pc, #196]	; (8001554 <HAL_GPIO_Init+0x320>)
 8001490:	68db      	ldr	r3, [r3, #12]
 8001492:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	43db      	mvns	r3, r3
 8001498:	693a      	ldr	r2, [r7, #16]
 800149a:	4013      	ands	r3, r2
 800149c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d003      	beq.n	80014b2 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80014aa:	693a      	ldr	r2, [r7, #16]
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	4313      	orrs	r3, r2
 80014b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80014b2:	4a28      	ldr	r2, [pc, #160]	; (8001554 <HAL_GPIO_Init+0x320>)
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80014b8:	4b26      	ldr	r3, [pc, #152]	; (8001554 <HAL_GPIO_Init+0x320>)
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	43db      	mvns	r3, r3
 80014c2:	693a      	ldr	r2, [r7, #16]
 80014c4:	4013      	ands	r3, r2
 80014c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d003      	beq.n	80014dc <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80014d4:	693a      	ldr	r2, [r7, #16]
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	4313      	orrs	r3, r2
 80014da:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80014dc:	4a1d      	ldr	r2, [pc, #116]	; (8001554 <HAL_GPIO_Init+0x320>)
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80014e2:	4b1c      	ldr	r3, [pc, #112]	; (8001554 <HAL_GPIO_Init+0x320>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	43db      	mvns	r3, r3
 80014ec:	693a      	ldr	r2, [r7, #16]
 80014ee:	4013      	ands	r3, r2
 80014f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d003      	beq.n	8001506 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80014fe:	693a      	ldr	r2, [r7, #16]
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	4313      	orrs	r3, r2
 8001504:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001506:	4a13      	ldr	r2, [pc, #76]	; (8001554 <HAL_GPIO_Init+0x320>)
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	3301      	adds	r3, #1
 8001510:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	fa22 f303 	lsr.w	r3, r2, r3
 800151c:	2b00      	cmp	r3, #0
 800151e:	f47f ae91 	bne.w	8001244 <HAL_GPIO_Init+0x10>
  }
}
 8001522:	bf00      	nop
 8001524:	bf00      	nop
 8001526:	371c      	adds	r7, #28
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr
 8001530:	40021000 	.word	0x40021000
 8001534:	40010000 	.word	0x40010000
 8001538:	48000400 	.word	0x48000400
 800153c:	48000800 	.word	0x48000800
 8001540:	48000c00 	.word	0x48000c00
 8001544:	48001000 	.word	0x48001000
 8001548:	48001400 	.word	0x48001400
 800154c:	48001800 	.word	0x48001800
 8001550:	48001c00 	.word	0x48001c00
 8001554:	40010400 	.word	0x40010400

08001558 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001558:	b480      	push	{r7}
 800155a:	b085      	sub	sp, #20
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
 8001560:	460b      	mov	r3, r1
 8001562:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	691a      	ldr	r2, [r3, #16]
 8001568:	887b      	ldrh	r3, [r7, #2]
 800156a:	4013      	ands	r3, r2
 800156c:	2b00      	cmp	r3, #0
 800156e:	d002      	beq.n	8001576 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001570:	2301      	movs	r3, #1
 8001572:	73fb      	strb	r3, [r7, #15]
 8001574:	e001      	b.n	800157a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001576:	2300      	movs	r3, #0
 8001578:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800157a:	7bfb      	ldrb	r3, [r7, #15]
}
 800157c:	4618      	mov	r0, r3
 800157e:	3714      	adds	r7, #20
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr

08001588 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
 8001590:	460b      	mov	r3, r1
 8001592:	807b      	strh	r3, [r7, #2]
 8001594:	4613      	mov	r3, r2
 8001596:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001598:	787b      	ldrb	r3, [r7, #1]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d003      	beq.n	80015a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800159e:	887a      	ldrh	r2, [r7, #2]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80015a4:	e002      	b.n	80015ac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80015a6:	887a      	ldrh	r2, [r7, #2]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80015ac:	bf00      	nop
 80015ae:	370c      	adds	r7, #12
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr

080015b8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80015b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015ba:	b08f      	sub	sp, #60	; 0x3c
 80015bc:	af0a      	add	r7, sp, #40	; 0x28
 80015be:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d101      	bne.n	80015ca <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	e116      	b.n	80017f8 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80015d6:	b2db      	uxtb	r3, r3
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d106      	bne.n	80015ea <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2200      	movs	r2, #0
 80015e0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80015e4:	6878      	ldr	r0, [r7, #4]
 80015e6:	f009 fb79 	bl	800acdc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2203      	movs	r2, #3
 80015ee:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80015f2:	68bb      	ldr	r3, [r7, #8]
 80015f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d102      	bne.n	8001604 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2200      	movs	r2, #0
 8001602:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4618      	mov	r0, r3
 800160a:	f003 fde2 	bl	80051d2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	603b      	str	r3, [r7, #0]
 8001614:	687e      	ldr	r6, [r7, #4]
 8001616:	466d      	mov	r5, sp
 8001618:	f106 0410 	add.w	r4, r6, #16
 800161c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800161e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001620:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001622:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001624:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001628:	e885 0003 	stmia.w	r5, {r0, r1}
 800162c:	1d33      	adds	r3, r6, #4
 800162e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001630:	6838      	ldr	r0, [r7, #0]
 8001632:	f003 fcf4 	bl	800501e <USB_CoreInit>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d005      	beq.n	8001648 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2202      	movs	r2, #2
 8001640:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001644:	2301      	movs	r3, #1
 8001646:	e0d7      	b.n	80017f8 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	2100      	movs	r1, #0
 800164e:	4618      	mov	r0, r3
 8001650:	f003 fdd0 	bl	80051f4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001654:	2300      	movs	r3, #0
 8001656:	73fb      	strb	r3, [r7, #15]
 8001658:	e04a      	b.n	80016f0 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800165a:	7bfa      	ldrb	r2, [r7, #15]
 800165c:	6879      	ldr	r1, [r7, #4]
 800165e:	4613      	mov	r3, r2
 8001660:	00db      	lsls	r3, r3, #3
 8001662:	4413      	add	r3, r2
 8001664:	009b      	lsls	r3, r3, #2
 8001666:	440b      	add	r3, r1
 8001668:	333d      	adds	r3, #61	; 0x3d
 800166a:	2201      	movs	r2, #1
 800166c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800166e:	7bfa      	ldrb	r2, [r7, #15]
 8001670:	6879      	ldr	r1, [r7, #4]
 8001672:	4613      	mov	r3, r2
 8001674:	00db      	lsls	r3, r3, #3
 8001676:	4413      	add	r3, r2
 8001678:	009b      	lsls	r3, r3, #2
 800167a:	440b      	add	r3, r1
 800167c:	333c      	adds	r3, #60	; 0x3c
 800167e:	7bfa      	ldrb	r2, [r7, #15]
 8001680:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001682:	7bfa      	ldrb	r2, [r7, #15]
 8001684:	7bfb      	ldrb	r3, [r7, #15]
 8001686:	b298      	uxth	r0, r3
 8001688:	6879      	ldr	r1, [r7, #4]
 800168a:	4613      	mov	r3, r2
 800168c:	00db      	lsls	r3, r3, #3
 800168e:	4413      	add	r3, r2
 8001690:	009b      	lsls	r3, r3, #2
 8001692:	440b      	add	r3, r1
 8001694:	3356      	adds	r3, #86	; 0x56
 8001696:	4602      	mov	r2, r0
 8001698:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800169a:	7bfa      	ldrb	r2, [r7, #15]
 800169c:	6879      	ldr	r1, [r7, #4]
 800169e:	4613      	mov	r3, r2
 80016a0:	00db      	lsls	r3, r3, #3
 80016a2:	4413      	add	r3, r2
 80016a4:	009b      	lsls	r3, r3, #2
 80016a6:	440b      	add	r3, r1
 80016a8:	3340      	adds	r3, #64	; 0x40
 80016aa:	2200      	movs	r2, #0
 80016ac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80016ae:	7bfa      	ldrb	r2, [r7, #15]
 80016b0:	6879      	ldr	r1, [r7, #4]
 80016b2:	4613      	mov	r3, r2
 80016b4:	00db      	lsls	r3, r3, #3
 80016b6:	4413      	add	r3, r2
 80016b8:	009b      	lsls	r3, r3, #2
 80016ba:	440b      	add	r3, r1
 80016bc:	3344      	adds	r3, #68	; 0x44
 80016be:	2200      	movs	r2, #0
 80016c0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80016c2:	7bfa      	ldrb	r2, [r7, #15]
 80016c4:	6879      	ldr	r1, [r7, #4]
 80016c6:	4613      	mov	r3, r2
 80016c8:	00db      	lsls	r3, r3, #3
 80016ca:	4413      	add	r3, r2
 80016cc:	009b      	lsls	r3, r3, #2
 80016ce:	440b      	add	r3, r1
 80016d0:	3348      	adds	r3, #72	; 0x48
 80016d2:	2200      	movs	r2, #0
 80016d4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80016d6:	7bfa      	ldrb	r2, [r7, #15]
 80016d8:	6879      	ldr	r1, [r7, #4]
 80016da:	4613      	mov	r3, r2
 80016dc:	00db      	lsls	r3, r3, #3
 80016de:	4413      	add	r3, r2
 80016e0:	009b      	lsls	r3, r3, #2
 80016e2:	440b      	add	r3, r1
 80016e4:	334c      	adds	r3, #76	; 0x4c
 80016e6:	2200      	movs	r2, #0
 80016e8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016ea:	7bfb      	ldrb	r3, [r7, #15]
 80016ec:	3301      	adds	r3, #1
 80016ee:	73fb      	strb	r3, [r7, #15]
 80016f0:	7bfa      	ldrb	r2, [r7, #15]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	429a      	cmp	r2, r3
 80016f8:	d3af      	bcc.n	800165a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016fa:	2300      	movs	r3, #0
 80016fc:	73fb      	strb	r3, [r7, #15]
 80016fe:	e044      	b.n	800178a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001700:	7bfa      	ldrb	r2, [r7, #15]
 8001702:	6879      	ldr	r1, [r7, #4]
 8001704:	4613      	mov	r3, r2
 8001706:	00db      	lsls	r3, r3, #3
 8001708:	4413      	add	r3, r2
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	440b      	add	r3, r1
 800170e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001712:	2200      	movs	r2, #0
 8001714:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001716:	7bfa      	ldrb	r2, [r7, #15]
 8001718:	6879      	ldr	r1, [r7, #4]
 800171a:	4613      	mov	r3, r2
 800171c:	00db      	lsls	r3, r3, #3
 800171e:	4413      	add	r3, r2
 8001720:	009b      	lsls	r3, r3, #2
 8001722:	440b      	add	r3, r1
 8001724:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001728:	7bfa      	ldrb	r2, [r7, #15]
 800172a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800172c:	7bfa      	ldrb	r2, [r7, #15]
 800172e:	6879      	ldr	r1, [r7, #4]
 8001730:	4613      	mov	r3, r2
 8001732:	00db      	lsls	r3, r3, #3
 8001734:	4413      	add	r3, r2
 8001736:	009b      	lsls	r3, r3, #2
 8001738:	440b      	add	r3, r1
 800173a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800173e:	2200      	movs	r2, #0
 8001740:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001742:	7bfa      	ldrb	r2, [r7, #15]
 8001744:	6879      	ldr	r1, [r7, #4]
 8001746:	4613      	mov	r3, r2
 8001748:	00db      	lsls	r3, r3, #3
 800174a:	4413      	add	r3, r2
 800174c:	009b      	lsls	r3, r3, #2
 800174e:	440b      	add	r3, r1
 8001750:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8001754:	2200      	movs	r2, #0
 8001756:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001758:	7bfa      	ldrb	r2, [r7, #15]
 800175a:	6879      	ldr	r1, [r7, #4]
 800175c:	4613      	mov	r3, r2
 800175e:	00db      	lsls	r3, r3, #3
 8001760:	4413      	add	r3, r2
 8001762:	009b      	lsls	r3, r3, #2
 8001764:	440b      	add	r3, r1
 8001766:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800176a:	2200      	movs	r2, #0
 800176c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800176e:	7bfa      	ldrb	r2, [r7, #15]
 8001770:	6879      	ldr	r1, [r7, #4]
 8001772:	4613      	mov	r3, r2
 8001774:	00db      	lsls	r3, r3, #3
 8001776:	4413      	add	r3, r2
 8001778:	009b      	lsls	r3, r3, #2
 800177a:	440b      	add	r3, r1
 800177c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001780:	2200      	movs	r2, #0
 8001782:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001784:	7bfb      	ldrb	r3, [r7, #15]
 8001786:	3301      	adds	r3, #1
 8001788:	73fb      	strb	r3, [r7, #15]
 800178a:	7bfa      	ldrb	r2, [r7, #15]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	429a      	cmp	r2, r3
 8001792:	d3b5      	bcc.n	8001700 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	603b      	str	r3, [r7, #0]
 800179a:	687e      	ldr	r6, [r7, #4]
 800179c:	466d      	mov	r5, sp
 800179e:	f106 0410 	add.w	r4, r6, #16
 80017a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017aa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80017ae:	e885 0003 	stmia.w	r5, {r0, r1}
 80017b2:	1d33      	adds	r3, r6, #4
 80017b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017b6:	6838      	ldr	r0, [r7, #0]
 80017b8:	f003 fd68 	bl	800528c <USB_DevInit>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d005      	beq.n	80017ce <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2202      	movs	r2, #2
 80017c6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e014      	b.n	80017f8 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2200      	movs	r2, #0
 80017d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2201      	movs	r2, #1
 80017da:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	d102      	bne.n	80017ec <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80017e6:	6878      	ldr	r0, [r7, #4]
 80017e8:	f001 f852 	bl	8002890 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4618      	mov	r0, r3
 80017f2:	f004 fd16 	bl	8006222 <USB_DevDisconnect>

  return HAL_OK;
 80017f6:	2300      	movs	r3, #0
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	3714      	adds	r7, #20
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001800 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b084      	sub	sp, #16
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001814:	2b01      	cmp	r3, #1
 8001816:	d101      	bne.n	800181c <HAL_PCD_Start+0x1c>
 8001818:	2302      	movs	r3, #2
 800181a:	e01c      	b.n	8001856 <HAL_PCD_Start+0x56>
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2201      	movs	r2, #1
 8001820:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001828:	2b01      	cmp	r3, #1
 800182a:	d105      	bne.n	8001838 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001830:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4618      	mov	r0, r3
 800183e:	f003 fcb7 	bl	80051b0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4618      	mov	r0, r3
 8001848:	f004 fcca 	bl	80061e0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2200      	movs	r2, #0
 8001850:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001854:	2300      	movs	r3, #0
}
 8001856:	4618      	mov	r0, r3
 8001858:	3710      	adds	r7, #16
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}

0800185e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800185e:	b590      	push	{r4, r7, lr}
 8001860:	b08d      	sub	sp, #52	; 0x34
 8001862:	af00      	add	r7, sp, #0
 8001864:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800186c:	6a3b      	ldr	r3, [r7, #32]
 800186e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4618      	mov	r0, r3
 8001876:	f004 fd88 	bl	800638a <USB_GetMode>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	f040 847e 	bne.w	800217e <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4618      	mov	r0, r3
 8001888:	f004 fcec 	bl	8006264 <USB_ReadInterrupts>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	f000 8474 	beq.w	800217c <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001894:	69fb      	ldr	r3, [r7, #28]
 8001896:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	0a1b      	lsrs	r3, r3, #8
 800189e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4618      	mov	r0, r3
 80018ae:	f004 fcd9 	bl	8006264 <USB_ReadInterrupts>
 80018b2:	4603      	mov	r3, r0
 80018b4:	f003 0302 	and.w	r3, r3, #2
 80018b8:	2b02      	cmp	r3, #2
 80018ba:	d107      	bne.n	80018cc <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	695a      	ldr	r2, [r3, #20]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f002 0202 	and.w	r2, r2, #2
 80018ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4618      	mov	r0, r3
 80018d2:	f004 fcc7 	bl	8006264 <USB_ReadInterrupts>
 80018d6:	4603      	mov	r3, r0
 80018d8:	f003 0310 	and.w	r3, r3, #16
 80018dc:	2b10      	cmp	r3, #16
 80018de:	d161      	bne.n	80019a4 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	699a      	ldr	r2, [r3, #24]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f022 0210 	bic.w	r2, r2, #16
 80018ee:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80018f0:	6a3b      	ldr	r3, [r7, #32]
 80018f2:	6a1b      	ldr	r3, [r3, #32]
 80018f4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80018f6:	69bb      	ldr	r3, [r7, #24]
 80018f8:	f003 020f 	and.w	r2, r3, #15
 80018fc:	4613      	mov	r3, r2
 80018fe:	00db      	lsls	r3, r3, #3
 8001900:	4413      	add	r3, r2
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001908:	687a      	ldr	r2, [r7, #4]
 800190a:	4413      	add	r3, r2
 800190c:	3304      	adds	r3, #4
 800190e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001910:	69bb      	ldr	r3, [r7, #24]
 8001912:	0c5b      	lsrs	r3, r3, #17
 8001914:	f003 030f 	and.w	r3, r3, #15
 8001918:	2b02      	cmp	r3, #2
 800191a:	d124      	bne.n	8001966 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800191c:	69ba      	ldr	r2, [r7, #24]
 800191e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001922:	4013      	ands	r3, r2
 8001924:	2b00      	cmp	r3, #0
 8001926:	d035      	beq.n	8001994 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800192c:	69bb      	ldr	r3, [r7, #24]
 800192e:	091b      	lsrs	r3, r3, #4
 8001930:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001932:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001936:	b29b      	uxth	r3, r3
 8001938:	461a      	mov	r2, r3
 800193a:	6a38      	ldr	r0, [r7, #32]
 800193c:	f004 fafe 	bl	8005f3c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	68da      	ldr	r2, [r3, #12]
 8001944:	69bb      	ldr	r3, [r7, #24]
 8001946:	091b      	lsrs	r3, r3, #4
 8001948:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800194c:	441a      	add	r2, r3
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	695a      	ldr	r2, [r3, #20]
 8001956:	69bb      	ldr	r3, [r7, #24]
 8001958:	091b      	lsrs	r3, r3, #4
 800195a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800195e:	441a      	add	r2, r3
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	615a      	str	r2, [r3, #20]
 8001964:	e016      	b.n	8001994 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001966:	69bb      	ldr	r3, [r7, #24]
 8001968:	0c5b      	lsrs	r3, r3, #17
 800196a:	f003 030f 	and.w	r3, r3, #15
 800196e:	2b06      	cmp	r3, #6
 8001970:	d110      	bne.n	8001994 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001978:	2208      	movs	r2, #8
 800197a:	4619      	mov	r1, r3
 800197c:	6a38      	ldr	r0, [r7, #32]
 800197e:	f004 fadd 	bl	8005f3c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	695a      	ldr	r2, [r3, #20]
 8001986:	69bb      	ldr	r3, [r7, #24]
 8001988:	091b      	lsrs	r3, r3, #4
 800198a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800198e:	441a      	add	r2, r3
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	699a      	ldr	r2, [r3, #24]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f042 0210 	orr.w	r2, r2, #16
 80019a2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4618      	mov	r0, r3
 80019aa:	f004 fc5b 	bl	8006264 <USB_ReadInterrupts>
 80019ae:	4603      	mov	r3, r0
 80019b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80019b4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80019b8:	f040 80a7 	bne.w	8001b0a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80019bc:	2300      	movs	r3, #0
 80019be:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4618      	mov	r0, r3
 80019c6:	f004 fc60 	bl	800628a <USB_ReadDevAllOutEpInterrupt>
 80019ca:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80019cc:	e099      	b.n	8001b02 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80019ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019d0:	f003 0301 	and.w	r3, r3, #1
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	f000 808e 	beq.w	8001af6 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019e0:	b2d2      	uxtb	r2, r2
 80019e2:	4611      	mov	r1, r2
 80019e4:	4618      	mov	r0, r3
 80019e6:	f004 fc84 	bl	80062f2 <USB_ReadDevOutEPInterrupt>
 80019ea:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	f003 0301 	and.w	r3, r3, #1
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d00c      	beq.n	8001a10 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80019f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f8:	015a      	lsls	r2, r3, #5
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	4413      	add	r3, r2
 80019fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a02:	461a      	mov	r2, r3
 8001a04:	2301      	movs	r3, #1
 8001a06:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001a08:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001a0a:	6878      	ldr	r0, [r7, #4]
 8001a0c:	f000 fe66 	bl	80026dc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	f003 0308 	and.w	r3, r3, #8
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d00c      	beq.n	8001a34 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1c:	015a      	lsls	r2, r3, #5
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	4413      	add	r3, r2
 8001a22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a26:	461a      	mov	r2, r3
 8001a28:	2308      	movs	r3, #8
 8001a2a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001a2c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001a2e:	6878      	ldr	r0, [r7, #4]
 8001a30:	f000 fea2 	bl	8002778 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	f003 0310 	and.w	r3, r3, #16
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d008      	beq.n	8001a50 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a40:	015a      	lsls	r2, r3, #5
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	4413      	add	r3, r2
 8001a46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a4a:	461a      	mov	r2, r3
 8001a4c:	2310      	movs	r3, #16
 8001a4e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	f003 0302 	and.w	r3, r3, #2
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d030      	beq.n	8001abc <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001a5a:	6a3b      	ldr	r3, [r7, #32]
 8001a5c:	695b      	ldr	r3, [r3, #20]
 8001a5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a62:	2b80      	cmp	r3, #128	; 0x80
 8001a64:	d109      	bne.n	8001a7a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	69fa      	ldr	r2, [r7, #28]
 8001a70:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a74:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a78:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001a7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a7c:	4613      	mov	r3, r2
 8001a7e:	00db      	lsls	r3, r3, #3
 8001a80:	4413      	add	r3, r2
 8001a82:	009b      	lsls	r3, r3, #2
 8001a84:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001a88:	687a      	ldr	r2, [r7, #4]
 8001a8a:	4413      	add	r3, r2
 8001a8c:	3304      	adds	r3, #4
 8001a8e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	78db      	ldrb	r3, [r3, #3]
 8001a94:	2b01      	cmp	r3, #1
 8001a96:	d108      	bne.n	8001aaa <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	f009 fa7f 	bl	800afa8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aac:	015a      	lsls	r2, r3, #5
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	4413      	add	r3, r2
 8001ab2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ab6:	461a      	mov	r2, r3
 8001ab8:	2302      	movs	r3, #2
 8001aba:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	f003 0320 	and.w	r3, r3, #32
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d008      	beq.n	8001ad8 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac8:	015a      	lsls	r2, r3, #5
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	4413      	add	r3, r2
 8001ace:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	2320      	movs	r3, #32
 8001ad6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d009      	beq.n	8001af6 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae4:	015a      	lsls	r2, r3, #5
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	4413      	add	r3, r2
 8001aea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001aee:	461a      	mov	r2, r3
 8001af0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001af4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af8:	3301      	adds	r3, #1
 8001afa:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001afe:	085b      	lsrs	r3, r3, #1
 8001b00:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	f47f af62 	bne.w	80019ce <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f004 fba8 	bl	8006264 <USB_ReadInterrupts>
 8001b14:	4603      	mov	r3, r0
 8001b16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b1a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001b1e:	f040 80a4 	bne.w	8001c6a <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4618      	mov	r0, r3
 8001b28:	f004 fbc9 	bl	80062be <USB_ReadDevAllInEpInterrupt>
 8001b2c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001b32:	e096      	b.n	8001c62 <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b36:	f003 0301 	and.w	r3, r3, #1
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	f000 808b 	beq.w	8001c56 <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b46:	b2d2      	uxtb	r2, r2
 8001b48:	4611      	mov	r1, r2
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f004 fbef 	bl	800632e <USB_ReadDevInEPInterrupt>
 8001b50:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	f003 0301 	and.w	r3, r3, #1
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d020      	beq.n	8001b9e <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b5e:	f003 030f 	and.w	r3, r3, #15
 8001b62:	2201      	movs	r2, #1
 8001b64:	fa02 f303 	lsl.w	r3, r2, r3
 8001b68:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	43db      	mvns	r3, r3
 8001b76:	69f9      	ldr	r1, [r7, #28]
 8001b78:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b82:	015a      	lsls	r2, r3, #5
 8001b84:	69fb      	ldr	r3, [r7, #28]
 8001b86:	4413      	add	r3, r2
 8001b88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001b8c:	461a      	mov	r2, r3
 8001b8e:	2301      	movs	r3, #1
 8001b90:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	4619      	mov	r1, r3
 8001b98:	6878      	ldr	r0, [r7, #4]
 8001b9a:	f009 f970 	bl	800ae7e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	f003 0308 	and.w	r3, r3, #8
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d008      	beq.n	8001bba <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001baa:	015a      	lsls	r2, r3, #5
 8001bac:	69fb      	ldr	r3, [r7, #28]
 8001bae:	4413      	add	r3, r2
 8001bb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001bb4:	461a      	mov	r2, r3
 8001bb6:	2308      	movs	r3, #8
 8001bb8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	f003 0310 	and.w	r3, r3, #16
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d008      	beq.n	8001bd6 <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc6:	015a      	lsls	r2, r3, #5
 8001bc8:	69fb      	ldr	r3, [r7, #28]
 8001bca:	4413      	add	r3, r2
 8001bcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001bd0:	461a      	mov	r2, r3
 8001bd2:	2310      	movs	r3, #16
 8001bd4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d008      	beq.n	8001bf2 <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be2:	015a      	lsls	r2, r3, #5
 8001be4:	69fb      	ldr	r3, [r7, #28]
 8001be6:	4413      	add	r3, r2
 8001be8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001bec:	461a      	mov	r2, r3
 8001bee:	2340      	movs	r3, #64	; 0x40
 8001bf0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	f003 0302 	and.w	r3, r3, #2
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d023      	beq.n	8001c44 <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001bfc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001bfe:	6a38      	ldr	r0, [r7, #32]
 8001c00:	f003 fc86 	bl	8005510 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001c04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c06:	4613      	mov	r3, r2
 8001c08:	00db      	lsls	r3, r3, #3
 8001c0a:	4413      	add	r3, r2
 8001c0c:	009b      	lsls	r3, r3, #2
 8001c0e:	3338      	adds	r3, #56	; 0x38
 8001c10:	687a      	ldr	r2, [r7, #4]
 8001c12:	4413      	add	r3, r2
 8001c14:	3304      	adds	r3, #4
 8001c16:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	78db      	ldrb	r3, [r3, #3]
 8001c1c:	2b01      	cmp	r3, #1
 8001c1e:	d108      	bne.n	8001c32 <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	2200      	movs	r2, #0
 8001c24:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	6878      	ldr	r0, [r7, #4]
 8001c2e:	f009 f9cd 	bl	800afcc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c34:	015a      	lsls	r2, r3, #5
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	4413      	add	r3, r2
 8001c3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001c3e:	461a      	mov	r2, r3
 8001c40:	2302      	movs	r3, #2
 8001c42:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d003      	beq.n	8001c56 <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001c4e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	f000 fcba 	bl	80025ca <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c58:	3301      	adds	r3, #1
 8001c5a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c5e:	085b      	lsrs	r3, r3, #1
 8001c60:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	f47f af65 	bne.w	8001b34 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f004 faf8 	bl	8006264 <USB_ReadInterrupts>
 8001c74:	4603      	mov	r3, r0
 8001c76:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001c7a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001c7e:	d122      	bne.n	8001cc6 <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001c80:	69fb      	ldr	r3, [r7, #28]
 8001c82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	69fa      	ldr	r2, [r7, #28]
 8001c8a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c8e:	f023 0301 	bic.w	r3, r3, #1
 8001c92:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001c9a:	2b01      	cmp	r3, #1
 8001c9c:	d108      	bne.n	8001cb0 <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001ca6:	2100      	movs	r1, #0
 8001ca8:	6878      	ldr	r0, [r7, #4]
 8001caa:	f009 fbed 	bl	800b488 <HAL_PCDEx_LPM_Callback>
 8001cae:	e002      	b.n	8001cb6 <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001cb0:	6878      	ldr	r0, [r7, #4]
 8001cb2:	f009 f951 	bl	800af58 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	695a      	ldr	r2, [r3, #20]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001cc4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f004 faca 	bl	8006264 <USB_ReadInterrupts>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001cd6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001cda:	d112      	bne.n	8001d02 <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001cdc:	69fb      	ldr	r3, [r7, #28]
 8001cde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	f003 0301 	and.w	r3, r3, #1
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	d102      	bne.n	8001cf2 <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001cec:	6878      	ldr	r0, [r7, #4]
 8001cee:	f009 f90d 	bl	800af0c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	695a      	ldr	r2, [r3, #20]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001d00:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4618      	mov	r0, r3
 8001d08:	f004 faac 	bl	8006264 <USB_ReadInterrupts>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001d12:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001d16:	d121      	bne.n	8001d5c <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	695a      	ldr	r2, [r3, #20]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8001d26:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d111      	bne.n	8001d56 <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2201      	movs	r2, #1
 8001d36:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d40:	089b      	lsrs	r3, r3, #2
 8001d42:	f003 020f 	and.w	r2, r3, #15
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001d4c:	2101      	movs	r1, #1
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	f009 fb9a 	bl	800b488 <HAL_PCDEx_LPM_Callback>
 8001d54:	e002      	b.n	8001d5c <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f009 f8d8 	bl	800af0c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4618      	mov	r0, r3
 8001d62:	f004 fa7f 	bl	8006264 <USB_ReadInterrupts>
 8001d66:	4603      	mov	r3, r0
 8001d68:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d70:	f040 80b5 	bne.w	8001ede <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001d74:	69fb      	ldr	r3, [r7, #28]
 8001d76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	69fa      	ldr	r2, [r7, #28]
 8001d7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001d82:	f023 0301 	bic.w	r3, r3, #1
 8001d86:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	2110      	movs	r1, #16
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f003 fbbe 	bl	8005510 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d94:	2300      	movs	r3, #0
 8001d96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d98:	e046      	b.n	8001e28 <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d9c:	015a      	lsls	r2, r3, #5
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	4413      	add	r3, r2
 8001da2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001da6:	461a      	mov	r2, r3
 8001da8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001dac:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001db0:	015a      	lsls	r2, r3, #5
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	4413      	add	r3, r2
 8001db6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001dbe:	0151      	lsls	r1, r2, #5
 8001dc0:	69fa      	ldr	r2, [r7, #28]
 8001dc2:	440a      	add	r2, r1
 8001dc4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001dc8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001dcc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001dce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dd0:	015a      	lsls	r2, r3, #5
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	4413      	add	r3, r2
 8001dd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001dda:	461a      	mov	r2, r3
 8001ddc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001de0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001de4:	015a      	lsls	r2, r3, #5
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	4413      	add	r3, r2
 8001dea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001df2:	0151      	lsls	r1, r2, #5
 8001df4:	69fa      	ldr	r2, [r7, #28]
 8001df6:	440a      	add	r2, r1
 8001df8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001dfc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001e00:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e04:	015a      	lsls	r2, r3, #5
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	4413      	add	r3, r2
 8001e0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e12:	0151      	lsls	r1, r2, #5
 8001e14:	69fa      	ldr	r2, [r7, #28]
 8001e16:	440a      	add	r2, r1
 8001e18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001e1c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001e20:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e24:	3301      	adds	r3, #1
 8001e26:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e2e:	429a      	cmp	r2, r3
 8001e30:	d3b3      	bcc.n	8001d9a <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e38:	69db      	ldr	r3, [r3, #28]
 8001e3a:	69fa      	ldr	r2, [r7, #28]
 8001e3c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e40:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001e44:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d016      	beq.n	8001e7c <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e58:	69fa      	ldr	r2, [r7, #28]
 8001e5a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e5e:	f043 030b 	orr.w	r3, r3, #11
 8001e62:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e6e:	69fa      	ldr	r2, [r7, #28]
 8001e70:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e74:	f043 030b 	orr.w	r3, r3, #11
 8001e78:	6453      	str	r3, [r2, #68]	; 0x44
 8001e7a:	e015      	b.n	8001ea8 <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001e7c:	69fb      	ldr	r3, [r7, #28]
 8001e7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e82:	695b      	ldr	r3, [r3, #20]
 8001e84:	69fa      	ldr	r2, [r7, #28]
 8001e86:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e8a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001e8e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001e92:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001e94:	69fb      	ldr	r3, [r7, #28]
 8001e96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e9a:	691b      	ldr	r3, [r3, #16]
 8001e9c:	69fa      	ldr	r2, [r7, #28]
 8001e9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ea2:	f043 030b 	orr.w	r3, r3, #11
 8001ea6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001ea8:	69fb      	ldr	r3, [r7, #28]
 8001eaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	69fa      	ldr	r2, [r7, #28]
 8001eb2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001eb6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001eba:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	4610      	mov	r0, r2
 8001eca:	f004 fa8f 	bl	80063ec <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	695a      	ldr	r2, [r3, #20]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001edc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f004 f9be 	bl	8006264 <USB_ReadInterrupts>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001eee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ef2:	d124      	bne.n	8001f3e <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f004 fa54 	bl	80063a6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4618      	mov	r0, r3
 8001f04:	f003 fb81 	bl	800560a <USB_GetDevSpeed>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681c      	ldr	r4, [r3, #0]
 8001f14:	f001 fb1a 	bl	800354c <HAL_RCC_GetHCLKFreq>
 8001f18:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001f1e:	b2db      	uxtb	r3, r3
 8001f20:	461a      	mov	r2, r3
 8001f22:	4620      	mov	r0, r4
 8001f24:	f003 f8a8 	bl	8005078 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001f28:	6878      	ldr	r0, [r7, #4]
 8001f2a:	f008 ffd0 	bl	800aece <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	695a      	ldr	r2, [r3, #20]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001f3c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4618      	mov	r0, r3
 8001f44:	f004 f98e 	bl	8006264 <USB_ReadInterrupts>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	f003 0308 	and.w	r3, r3, #8
 8001f4e:	2b08      	cmp	r3, #8
 8001f50:	d10a      	bne.n	8001f68 <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	f008 ffad 	bl	800aeb2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	695a      	ldr	r2, [r3, #20]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f002 0208 	and.w	r2, r2, #8
 8001f66:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f004 f979 	bl	8006264 <USB_ReadInterrupts>
 8001f72:	4603      	mov	r3, r0
 8001f74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f78:	2b80      	cmp	r3, #128	; 0x80
 8001f7a:	d122      	bne.n	8001fc2 <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001f7c:	6a3b      	ldr	r3, [r7, #32]
 8001f7e:	699b      	ldr	r3, [r3, #24]
 8001f80:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001f84:	6a3b      	ldr	r3, [r7, #32]
 8001f86:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001f88:	2301      	movs	r3, #1
 8001f8a:	627b      	str	r3, [r7, #36]	; 0x24
 8001f8c:	e014      	b.n	8001fb8 <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001f8e:	6879      	ldr	r1, [r7, #4]
 8001f90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f92:	4613      	mov	r3, r2
 8001f94:	00db      	lsls	r3, r3, #3
 8001f96:	4413      	add	r3, r2
 8001f98:	009b      	lsls	r3, r3, #2
 8001f9a:	440b      	add	r3, r1
 8001f9c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001fa0:	781b      	ldrb	r3, [r3, #0]
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d105      	bne.n	8001fb2 <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	4619      	mov	r1, r3
 8001fac:	6878      	ldr	r0, [r7, #4]
 8001fae:	f000 fadb 	bl	8002568 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb4:	3301      	adds	r3, #1
 8001fb6:	627b      	str	r3, [r7, #36]	; 0x24
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fbe:	429a      	cmp	r2, r3
 8001fc0:	d3e5      	bcc.n	8001f8e <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f004 f94c 	bl	8006264 <USB_ReadInterrupts>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fd2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001fd6:	d13b      	bne.n	8002050 <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001fd8:	2301      	movs	r3, #1
 8001fda:	627b      	str	r3, [r7, #36]	; 0x24
 8001fdc:	e02b      	b.n	8002036 <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe0:	015a      	lsls	r2, r3, #5
 8001fe2:	69fb      	ldr	r3, [r7, #28]
 8001fe4:	4413      	add	r3, r2
 8001fe6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001fee:	6879      	ldr	r1, [r7, #4]
 8001ff0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ff2:	4613      	mov	r3, r2
 8001ff4:	00db      	lsls	r3, r3, #3
 8001ff6:	4413      	add	r3, r2
 8001ff8:	009b      	lsls	r3, r3, #2
 8001ffa:	440b      	add	r3, r1
 8001ffc:	3340      	adds	r3, #64	; 0x40
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	2b01      	cmp	r3, #1
 8002002:	d115      	bne.n	8002030 <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002004:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002006:	2b00      	cmp	r3, #0
 8002008:	da12      	bge.n	8002030 <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800200a:	6879      	ldr	r1, [r7, #4]
 800200c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800200e:	4613      	mov	r3, r2
 8002010:	00db      	lsls	r3, r3, #3
 8002012:	4413      	add	r3, r2
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	440b      	add	r3, r1
 8002018:	333f      	adds	r3, #63	; 0x3f
 800201a:	2201      	movs	r2, #1
 800201c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800201e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002020:	b2db      	uxtb	r3, r3
 8002022:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002026:	b2db      	uxtb	r3, r3
 8002028:	4619      	mov	r1, r3
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f000 fa9c 	bl	8002568 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002032:	3301      	adds	r3, #1
 8002034:	627b      	str	r3, [r7, #36]	; 0x24
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800203c:	429a      	cmp	r2, r3
 800203e:	d3ce      	bcc.n	8001fde <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	695a      	ldr	r2, [r3, #20]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800204e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4618      	mov	r0, r3
 8002056:	f004 f905 	bl	8006264 <USB_ReadInterrupts>
 800205a:	4603      	mov	r3, r0
 800205c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002060:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002064:	d155      	bne.n	8002112 <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002066:	2301      	movs	r3, #1
 8002068:	627b      	str	r3, [r7, #36]	; 0x24
 800206a:	e045      	b.n	80020f8 <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800206c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206e:	015a      	lsls	r2, r3, #5
 8002070:	69fb      	ldr	r3, [r7, #28]
 8002072:	4413      	add	r3, r2
 8002074:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800207c:	6879      	ldr	r1, [r7, #4]
 800207e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002080:	4613      	mov	r3, r2
 8002082:	00db      	lsls	r3, r3, #3
 8002084:	4413      	add	r3, r2
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	440b      	add	r3, r1
 800208a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	2b01      	cmp	r3, #1
 8002092:	d12e      	bne.n	80020f2 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002094:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002096:	2b00      	cmp	r3, #0
 8002098:	da2b      	bge.n	80020f2 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800209a:	69bb      	ldr	r3, [r7, #24]
 800209c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80020a6:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80020aa:	429a      	cmp	r2, r3
 80020ac:	d121      	bne.n	80020f2 <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80020ae:	6879      	ldr	r1, [r7, #4]
 80020b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020b2:	4613      	mov	r3, r2
 80020b4:	00db      	lsls	r3, r3, #3
 80020b6:	4413      	add	r3, r2
 80020b8:	009b      	lsls	r3, r3, #2
 80020ba:	440b      	add	r3, r1
 80020bc:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80020c0:	2201      	movs	r2, #1
 80020c2:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80020c4:	6a3b      	ldr	r3, [r7, #32]
 80020c6:	699b      	ldr	r3, [r3, #24]
 80020c8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80020cc:	6a3b      	ldr	r3, [r7, #32]
 80020ce:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80020d0:	6a3b      	ldr	r3, [r7, #32]
 80020d2:	695b      	ldr	r3, [r3, #20]
 80020d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d10a      	bne.n	80020f2 <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80020dc:	69fb      	ldr	r3, [r7, #28]
 80020de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	69fa      	ldr	r2, [r7, #28]
 80020e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80020ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020ee:	6053      	str	r3, [r2, #4]
            break;
 80020f0:	e007      	b.n	8002102 <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80020f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f4:	3301      	adds	r3, #1
 80020f6:	627b      	str	r3, [r7, #36]	; 0x24
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020fe:	429a      	cmp	r2, r3
 8002100:	d3b4      	bcc.n	800206c <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	695a      	ldr	r2, [r3, #20]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002110:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4618      	mov	r0, r3
 8002118:	f004 f8a4 	bl	8006264 <USB_ReadInterrupts>
 800211c:	4603      	mov	r3, r0
 800211e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002122:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002126:	d10a      	bne.n	800213e <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	f008 ff61 	bl	800aff0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	695a      	ldr	r2, [r3, #20]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800213c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4618      	mov	r0, r3
 8002144:	f004 f88e 	bl	8006264 <USB_ReadInterrupts>
 8002148:	4603      	mov	r3, r0
 800214a:	f003 0304 	and.w	r3, r3, #4
 800214e:	2b04      	cmp	r3, #4
 8002150:	d115      	bne.n	800217e <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800215a:	69bb      	ldr	r3, [r7, #24]
 800215c:	f003 0304 	and.w	r3, r3, #4
 8002160:	2b00      	cmp	r3, #0
 8002162:	d002      	beq.n	800216a <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	f008 ff51 	bl	800b00c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	6859      	ldr	r1, [r3, #4]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	69ba      	ldr	r2, [r7, #24]
 8002176:	430a      	orrs	r2, r1
 8002178:	605a      	str	r2, [r3, #4]
 800217a:	e000      	b.n	800217e <HAL_PCD_IRQHandler+0x920>
      return;
 800217c:	bf00      	nop
    }
  }
}
 800217e:	3734      	adds	r7, #52	; 0x34
 8002180:	46bd      	mov	sp, r7
 8002182:	bd90      	pop	{r4, r7, pc}

08002184 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
 800218c:	460b      	mov	r3, r1
 800218e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002196:	2b01      	cmp	r3, #1
 8002198:	d101      	bne.n	800219e <HAL_PCD_SetAddress+0x1a>
 800219a:	2302      	movs	r3, #2
 800219c:	e013      	b.n	80021c6 <HAL_PCD_SetAddress+0x42>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2201      	movs	r2, #1
 80021a2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	78fa      	ldrb	r2, [r7, #3]
 80021aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	78fa      	ldrb	r2, [r7, #3]
 80021b4:	4611      	mov	r1, r2
 80021b6:	4618      	mov	r0, r3
 80021b8:	f003 ffec 	bl	8006194 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2200      	movs	r2, #0
 80021c0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80021c4:	2300      	movs	r3, #0
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3708      	adds	r7, #8
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}

080021ce <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80021ce:	b580      	push	{r7, lr}
 80021d0:	b084      	sub	sp, #16
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	6078      	str	r0, [r7, #4]
 80021d6:	4608      	mov	r0, r1
 80021d8:	4611      	mov	r1, r2
 80021da:	461a      	mov	r2, r3
 80021dc:	4603      	mov	r3, r0
 80021de:	70fb      	strb	r3, [r7, #3]
 80021e0:	460b      	mov	r3, r1
 80021e2:	803b      	strh	r3, [r7, #0]
 80021e4:	4613      	mov	r3, r2
 80021e6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80021e8:	2300      	movs	r3, #0
 80021ea:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80021ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	da0f      	bge.n	8002214 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021f4:	78fb      	ldrb	r3, [r7, #3]
 80021f6:	f003 020f 	and.w	r2, r3, #15
 80021fa:	4613      	mov	r3, r2
 80021fc:	00db      	lsls	r3, r3, #3
 80021fe:	4413      	add	r3, r2
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	3338      	adds	r3, #56	; 0x38
 8002204:	687a      	ldr	r2, [r7, #4]
 8002206:	4413      	add	r3, r2
 8002208:	3304      	adds	r3, #4
 800220a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2201      	movs	r2, #1
 8002210:	705a      	strb	r2, [r3, #1]
 8002212:	e00f      	b.n	8002234 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002214:	78fb      	ldrb	r3, [r7, #3]
 8002216:	f003 020f 	and.w	r2, r3, #15
 800221a:	4613      	mov	r3, r2
 800221c:	00db      	lsls	r3, r3, #3
 800221e:	4413      	add	r3, r2
 8002220:	009b      	lsls	r3, r3, #2
 8002222:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002226:	687a      	ldr	r2, [r7, #4]
 8002228:	4413      	add	r3, r2
 800222a:	3304      	adds	r3, #4
 800222c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	2200      	movs	r2, #0
 8002232:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002234:	78fb      	ldrb	r3, [r7, #3]
 8002236:	f003 030f 	and.w	r3, r3, #15
 800223a:	b2da      	uxtb	r2, r3
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002240:	883a      	ldrh	r2, [r7, #0]
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	78ba      	ldrb	r2, [r7, #2]
 800224a:	711a      	strb	r2, [r3, #4]

#if defined (USB_OTG_FS)
  if (ep->is_in != 0U)
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	785b      	ldrb	r3, [r3, #1]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d004      	beq.n	800225e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	781b      	ldrb	r3, [r3, #0]
 8002258:	b29a      	uxth	r2, r3
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	835a      	strh	r2, [r3, #26]
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800225e:	78bb      	ldrb	r3, [r7, #2]
 8002260:	2b02      	cmp	r3, #2
 8002262:	d102      	bne.n	800226a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	2200      	movs	r2, #0
 8002268:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002270:	2b01      	cmp	r3, #1
 8002272:	d101      	bne.n	8002278 <HAL_PCD_EP_Open+0xaa>
 8002274:	2302      	movs	r3, #2
 8002276:	e00e      	b.n	8002296 <HAL_PCD_EP_Open+0xc8>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2201      	movs	r2, #1
 800227c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	68f9      	ldr	r1, [r7, #12]
 8002286:	4618      	mov	r0, r3
 8002288:	f003 f9de 	bl	8005648 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2200      	movs	r2, #0
 8002290:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002294:	7afb      	ldrb	r3, [r7, #11]
}
 8002296:	4618      	mov	r0, r3
 8002298:	3710      	adds	r7, #16
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}

0800229e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800229e:	b580      	push	{r7, lr}
 80022a0:	b084      	sub	sp, #16
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	6078      	str	r0, [r7, #4]
 80022a6:	460b      	mov	r3, r1
 80022a8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80022aa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	da0f      	bge.n	80022d2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022b2:	78fb      	ldrb	r3, [r7, #3]
 80022b4:	f003 020f 	and.w	r2, r3, #15
 80022b8:	4613      	mov	r3, r2
 80022ba:	00db      	lsls	r3, r3, #3
 80022bc:	4413      	add	r3, r2
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	3338      	adds	r3, #56	; 0x38
 80022c2:	687a      	ldr	r2, [r7, #4]
 80022c4:	4413      	add	r3, r2
 80022c6:	3304      	adds	r3, #4
 80022c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	2201      	movs	r2, #1
 80022ce:	705a      	strb	r2, [r3, #1]
 80022d0:	e00f      	b.n	80022f2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80022d2:	78fb      	ldrb	r3, [r7, #3]
 80022d4:	f003 020f 	and.w	r2, r3, #15
 80022d8:	4613      	mov	r3, r2
 80022da:	00db      	lsls	r3, r3, #3
 80022dc:	4413      	add	r3, r2
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80022e4:	687a      	ldr	r2, [r7, #4]
 80022e6:	4413      	add	r3, r2
 80022e8:	3304      	adds	r3, #4
 80022ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	2200      	movs	r2, #0
 80022f0:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80022f2:	78fb      	ldrb	r3, [r7, #3]
 80022f4:	f003 030f 	and.w	r3, r3, #15
 80022f8:	b2da      	uxtb	r2, r3
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002304:	2b01      	cmp	r3, #1
 8002306:	d101      	bne.n	800230c <HAL_PCD_EP_Close+0x6e>
 8002308:	2302      	movs	r3, #2
 800230a:	e00e      	b.n	800232a <HAL_PCD_EP_Close+0x8c>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2201      	movs	r2, #1
 8002310:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	68f9      	ldr	r1, [r7, #12]
 800231a:	4618      	mov	r0, r3
 800231c:	f003 fa1c 	bl	8005758 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2200      	movs	r2, #0
 8002324:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002328:	2300      	movs	r3, #0
}
 800232a:	4618      	mov	r0, r3
 800232c:	3710      	adds	r7, #16
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}

08002332 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002332:	b580      	push	{r7, lr}
 8002334:	b086      	sub	sp, #24
 8002336:	af00      	add	r7, sp, #0
 8002338:	60f8      	str	r0, [r7, #12]
 800233a:	607a      	str	r2, [r7, #4]
 800233c:	603b      	str	r3, [r7, #0]
 800233e:	460b      	mov	r3, r1
 8002340:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002342:	7afb      	ldrb	r3, [r7, #11]
 8002344:	f003 020f 	and.w	r2, r3, #15
 8002348:	4613      	mov	r3, r2
 800234a:	00db      	lsls	r3, r3, #3
 800234c:	4413      	add	r3, r2
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002354:	68fa      	ldr	r2, [r7, #12]
 8002356:	4413      	add	r3, r2
 8002358:	3304      	adds	r3, #4
 800235a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	687a      	ldr	r2, [r7, #4]
 8002360:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	683a      	ldr	r2, [r7, #0]
 8002366:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	2200      	movs	r2, #0
 800236c:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	2200      	movs	r2, #0
 8002372:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002374:	7afb      	ldrb	r3, [r7, #11]
 8002376:	f003 030f 	and.w	r3, r3, #15
 800237a:	b2da      	uxtb	r2, r3
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	6979      	ldr	r1, [r7, #20]
 8002386:	4618      	mov	r0, r3
 8002388:	f003 fac2 	bl	8005910 <USB_EPStartXfer>

  return HAL_OK;
 800238c:	2300      	movs	r3, #0
}
 800238e:	4618      	mov	r0, r3
 8002390:	3718      	adds	r7, #24
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}

08002396 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002396:	b580      	push	{r7, lr}
 8002398:	b086      	sub	sp, #24
 800239a:	af00      	add	r7, sp, #0
 800239c:	60f8      	str	r0, [r7, #12]
 800239e:	607a      	str	r2, [r7, #4]
 80023a0:	603b      	str	r3, [r7, #0]
 80023a2:	460b      	mov	r3, r1
 80023a4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80023a6:	7afb      	ldrb	r3, [r7, #11]
 80023a8:	f003 020f 	and.w	r2, r3, #15
 80023ac:	4613      	mov	r3, r2
 80023ae:	00db      	lsls	r3, r3, #3
 80023b0:	4413      	add	r3, r2
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	3338      	adds	r3, #56	; 0x38
 80023b6:	68fa      	ldr	r2, [r7, #12]
 80023b8:	4413      	add	r3, r2
 80023ba:	3304      	adds	r3, #4
 80023bc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	687a      	ldr	r2, [r7, #4]
 80023c2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	683a      	ldr	r2, [r7, #0]
 80023c8:	611a      	str	r2, [r3, #16]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	2200      	movs	r2, #0
 80023ce:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	2201      	movs	r2, #1
 80023d4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80023d6:	7afb      	ldrb	r3, [r7, #11]
 80023d8:	f003 030f 	and.w	r3, r3, #15
 80023dc:	b2da      	uxtb	r2, r3
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	6979      	ldr	r1, [r7, #20]
 80023e8:	4618      	mov	r0, r3
 80023ea:	f003 fa91 	bl	8005910 <USB_EPStartXfer>

  return HAL_OK;
 80023ee:	2300      	movs	r3, #0
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	3718      	adds	r7, #24
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}

080023f8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b084      	sub	sp, #16
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
 8002400:	460b      	mov	r3, r1
 8002402:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002404:	78fb      	ldrb	r3, [r7, #3]
 8002406:	f003 020f 	and.w	r2, r3, #15
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	429a      	cmp	r2, r3
 8002410:	d901      	bls.n	8002416 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e04e      	b.n	80024b4 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002416:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800241a:	2b00      	cmp	r3, #0
 800241c:	da0f      	bge.n	800243e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800241e:	78fb      	ldrb	r3, [r7, #3]
 8002420:	f003 020f 	and.w	r2, r3, #15
 8002424:	4613      	mov	r3, r2
 8002426:	00db      	lsls	r3, r3, #3
 8002428:	4413      	add	r3, r2
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	3338      	adds	r3, #56	; 0x38
 800242e:	687a      	ldr	r2, [r7, #4]
 8002430:	4413      	add	r3, r2
 8002432:	3304      	adds	r3, #4
 8002434:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	2201      	movs	r2, #1
 800243a:	705a      	strb	r2, [r3, #1]
 800243c:	e00d      	b.n	800245a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800243e:	78fa      	ldrb	r2, [r7, #3]
 8002440:	4613      	mov	r3, r2
 8002442:	00db      	lsls	r3, r3, #3
 8002444:	4413      	add	r3, r2
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800244c:	687a      	ldr	r2, [r7, #4]
 800244e:	4413      	add	r3, r2
 8002450:	3304      	adds	r3, #4
 8002452:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	2200      	movs	r2, #0
 8002458:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	2201      	movs	r2, #1
 800245e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002460:	78fb      	ldrb	r3, [r7, #3]
 8002462:	f003 030f 	and.w	r3, r3, #15
 8002466:	b2da      	uxtb	r2, r3
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002472:	2b01      	cmp	r3, #1
 8002474:	d101      	bne.n	800247a <HAL_PCD_EP_SetStall+0x82>
 8002476:	2302      	movs	r3, #2
 8002478:	e01c      	b.n	80024b4 <HAL_PCD_EP_SetStall+0xbc>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2201      	movs	r2, #1
 800247e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	68f9      	ldr	r1, [r7, #12]
 8002488:	4618      	mov	r0, r3
 800248a:	f003 fdaf 	bl	8005fec <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800248e:	78fb      	ldrb	r3, [r7, #3]
 8002490:	f003 030f 	and.w	r3, r3, #15
 8002494:	2b00      	cmp	r3, #0
 8002496:	d108      	bne.n	80024aa <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80024a2:	4619      	mov	r1, r3
 80024a4:	4610      	mov	r0, r2
 80024a6:	f003 ffa1 	bl	80063ec <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2200      	movs	r2, #0
 80024ae:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80024b2:	2300      	movs	r3, #0
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	3710      	adds	r7, #16
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}

080024bc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b084      	sub	sp, #16
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
 80024c4:	460b      	mov	r3, r1
 80024c6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80024c8:	78fb      	ldrb	r3, [r7, #3]
 80024ca:	f003 020f 	and.w	r2, r3, #15
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	429a      	cmp	r2, r3
 80024d4:	d901      	bls.n	80024da <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e042      	b.n	8002560 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80024da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	da0f      	bge.n	8002502 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80024e2:	78fb      	ldrb	r3, [r7, #3]
 80024e4:	f003 020f 	and.w	r2, r3, #15
 80024e8:	4613      	mov	r3, r2
 80024ea:	00db      	lsls	r3, r3, #3
 80024ec:	4413      	add	r3, r2
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	3338      	adds	r3, #56	; 0x38
 80024f2:	687a      	ldr	r2, [r7, #4]
 80024f4:	4413      	add	r3, r2
 80024f6:	3304      	adds	r3, #4
 80024f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2201      	movs	r2, #1
 80024fe:	705a      	strb	r2, [r3, #1]
 8002500:	e00f      	b.n	8002522 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002502:	78fb      	ldrb	r3, [r7, #3]
 8002504:	f003 020f 	and.w	r2, r3, #15
 8002508:	4613      	mov	r3, r2
 800250a:	00db      	lsls	r3, r3, #3
 800250c:	4413      	add	r3, r2
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002514:	687a      	ldr	r2, [r7, #4]
 8002516:	4413      	add	r3, r2
 8002518:	3304      	adds	r3, #4
 800251a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	2200      	movs	r2, #0
 8002520:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	2200      	movs	r2, #0
 8002526:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002528:	78fb      	ldrb	r3, [r7, #3]
 800252a:	f003 030f 	and.w	r3, r3, #15
 800252e:	b2da      	uxtb	r2, r3
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800253a:	2b01      	cmp	r3, #1
 800253c:	d101      	bne.n	8002542 <HAL_PCD_EP_ClrStall+0x86>
 800253e:	2302      	movs	r3, #2
 8002540:	e00e      	b.n	8002560 <HAL_PCD_EP_ClrStall+0xa4>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2201      	movs	r2, #1
 8002546:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	68f9      	ldr	r1, [r7, #12]
 8002550:	4618      	mov	r0, r3
 8002552:	f003 fdb9 	bl	80060c8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2200      	movs	r2, #0
 800255a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800255e:	2300      	movs	r3, #0
}
 8002560:	4618      	mov	r0, r3
 8002562:	3710      	adds	r7, #16
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}

08002568 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b084      	sub	sp, #16
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	460b      	mov	r3, r1
 8002572:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002574:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002578:	2b00      	cmp	r3, #0
 800257a:	da0c      	bge.n	8002596 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800257c:	78fb      	ldrb	r3, [r7, #3]
 800257e:	f003 020f 	and.w	r2, r3, #15
 8002582:	4613      	mov	r3, r2
 8002584:	00db      	lsls	r3, r3, #3
 8002586:	4413      	add	r3, r2
 8002588:	009b      	lsls	r3, r3, #2
 800258a:	3338      	adds	r3, #56	; 0x38
 800258c:	687a      	ldr	r2, [r7, #4]
 800258e:	4413      	add	r3, r2
 8002590:	3304      	adds	r3, #4
 8002592:	60fb      	str	r3, [r7, #12]
 8002594:	e00c      	b.n	80025b0 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002596:	78fb      	ldrb	r3, [r7, #3]
 8002598:	f003 020f 	and.w	r2, r3, #15
 800259c:	4613      	mov	r3, r2
 800259e:	00db      	lsls	r3, r3, #3
 80025a0:	4413      	add	r3, r2
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80025a8:	687a      	ldr	r2, [r7, #4]
 80025aa:	4413      	add	r3, r2
 80025ac:	3304      	adds	r3, #4
 80025ae:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	68f9      	ldr	r1, [r7, #12]
 80025b6:	4618      	mov	r0, r3
 80025b8:	f003 fbdc 	bl	8005d74 <USB_EPStopXfer>
 80025bc:	4603      	mov	r3, r0
 80025be:	72fb      	strb	r3, [r7, #11]

  return ret;
 80025c0:	7afb      	ldrb	r3, [r7, #11]
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3710      	adds	r7, #16
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}

080025ca <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80025ca:	b580      	push	{r7, lr}
 80025cc:	b088      	sub	sp, #32
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	6078      	str	r0, [r7, #4]
 80025d2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80025de:	683a      	ldr	r2, [r7, #0]
 80025e0:	4613      	mov	r3, r2
 80025e2:	00db      	lsls	r3, r3, #3
 80025e4:	4413      	add	r3, r2
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	3338      	adds	r3, #56	; 0x38
 80025ea:	687a      	ldr	r2, [r7, #4]
 80025ec:	4413      	add	r3, r2
 80025ee:	3304      	adds	r3, #4
 80025f0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	695a      	ldr	r2, [r3, #20]
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	691b      	ldr	r3, [r3, #16]
 80025fa:	429a      	cmp	r2, r3
 80025fc:	d901      	bls.n	8002602 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e067      	b.n	80026d2 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	691a      	ldr	r2, [r3, #16]
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	695b      	ldr	r3, [r3, #20]
 800260a:	1ad3      	subs	r3, r2, r3
 800260c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	69fa      	ldr	r2, [r7, #28]
 8002614:	429a      	cmp	r2, r3
 8002616:	d902      	bls.n	800261e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	3303      	adds	r3, #3
 8002622:	089b      	lsrs	r3, r3, #2
 8002624:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002626:	e026      	b.n	8002676 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	691a      	ldr	r2, [r3, #16]
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	695b      	ldr	r3, [r3, #20]
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	69fa      	ldr	r2, [r7, #28]
 800263a:	429a      	cmp	r2, r3
 800263c:	d902      	bls.n	8002644 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002644:	69fb      	ldr	r3, [r7, #28]
 8002646:	3303      	adds	r3, #3
 8002648:	089b      	lsrs	r3, r3, #2
 800264a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	68d9      	ldr	r1, [r3, #12]
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	b2da      	uxtb	r2, r3
 8002654:	69fb      	ldr	r3, [r7, #28]
 8002656:	b29b      	uxth	r3, r3
 8002658:	6978      	ldr	r0, [r7, #20]
 800265a:	f003 fc35 	bl	8005ec8 <USB_WritePacket>

    ep->xfer_buff  += len;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	68da      	ldr	r2, [r3, #12]
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	441a      	add	r2, r3
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	695a      	ldr	r2, [r3, #20]
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	441a      	add	r2, r3
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	015a      	lsls	r2, r3, #5
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	4413      	add	r3, r2
 800267e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002682:	699b      	ldr	r3, [r3, #24]
 8002684:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002686:	69ba      	ldr	r2, [r7, #24]
 8002688:	429a      	cmp	r2, r3
 800268a:	d809      	bhi.n	80026a0 <PCD_WriteEmptyTxFifo+0xd6>
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	695a      	ldr	r2, [r3, #20]
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002694:	429a      	cmp	r2, r3
 8002696:	d203      	bcs.n	80026a0 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	691b      	ldr	r3, [r3, #16]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d1c3      	bne.n	8002628 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	691a      	ldr	r2, [r3, #16]
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	695b      	ldr	r3, [r3, #20]
 80026a8:	429a      	cmp	r2, r3
 80026aa:	d811      	bhi.n	80026d0 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	f003 030f 	and.w	r3, r3, #15
 80026b2:	2201      	movs	r2, #1
 80026b4:	fa02 f303 	lsl.w	r3, r2, r3
 80026b8:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	43db      	mvns	r3, r3
 80026c6:	6939      	ldr	r1, [r7, #16]
 80026c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80026cc:	4013      	ands	r3, r2
 80026ce:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80026d0:	2300      	movs	r3, #0
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3720      	adds	r7, #32
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
	...

080026dc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b086      	sub	sp, #24
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
 80026e4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	333c      	adds	r3, #60	; 0x3c
 80026f4:	3304      	adds	r3, #4
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	015a      	lsls	r2, r3, #5
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	4413      	add	r3, r2
 8002702:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	4a19      	ldr	r2, [pc, #100]	; (8002774 <PCD_EP_OutXfrComplete_int+0x98>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d124      	bne.n	800275c <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002718:	2b00      	cmp	r3, #0
 800271a:	d00a      	beq.n	8002732 <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	015a      	lsls	r2, r3, #5
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	4413      	add	r3, r2
 8002724:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002728:	461a      	mov	r2, r3
 800272a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800272e:	6093      	str	r3, [r2, #8]
 8002730:	e01a      	b.n	8002768 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	f003 0320 	and.w	r3, r3, #32
 8002738:	2b00      	cmp	r3, #0
 800273a:	d008      	beq.n	800274e <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	015a      	lsls	r2, r3, #5
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	4413      	add	r3, r2
 8002744:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002748:	461a      	mov	r2, r3
 800274a:	2320      	movs	r3, #32
 800274c:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	b2db      	uxtb	r3, r3
 8002752:	4619      	mov	r1, r3
 8002754:	6878      	ldr	r0, [r7, #4]
 8002756:	f008 fb77 	bl	800ae48 <HAL_PCD_DataOutStageCallback>
 800275a:	e005      	b.n	8002768 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	b2db      	uxtb	r3, r3
 8002760:	4619      	mov	r1, r3
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f008 fb70 	bl	800ae48 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8002768:	2300      	movs	r3, #0
}
 800276a:	4618      	mov	r0, r3
 800276c:	3718      	adds	r7, #24
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	4f54310a 	.word	0x4f54310a

08002778 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b086      	sub	sp, #24
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
 8002780:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	333c      	adds	r3, #60	; 0x3c
 8002790:	3304      	adds	r3, #4
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	015a      	lsls	r2, r3, #5
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	4413      	add	r3, r2
 800279e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	4a0c      	ldr	r2, [pc, #48]	; (80027dc <PCD_EP_OutSetupPacket_int+0x64>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d90e      	bls.n	80027cc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d009      	beq.n	80027cc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	015a      	lsls	r2, r3, #5
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	4413      	add	r3, r2
 80027c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027c4:	461a      	mov	r2, r3
 80027c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80027ca:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80027cc:	6878      	ldr	r0, [r7, #4]
 80027ce:	f008 fb29 	bl	800ae24 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 80027d2:	2300      	movs	r3, #0
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	3718      	adds	r7, #24
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	4f54300a 	.word	0x4f54300a

080027e0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b085      	sub	sp, #20
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	460b      	mov	r3, r1
 80027ea:	70fb      	strb	r3, [r7, #3]
 80027ec:	4613      	mov	r3, r2
 80027ee:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80027f8:	78fb      	ldrb	r3, [r7, #3]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d107      	bne.n	800280e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80027fe:	883b      	ldrh	r3, [r7, #0]
 8002800:	0419      	lsls	r1, r3, #16
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	68ba      	ldr	r2, [r7, #8]
 8002808:	430a      	orrs	r2, r1
 800280a:	629a      	str	r2, [r3, #40]	; 0x28
 800280c:	e028      	b.n	8002860 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002814:	0c1b      	lsrs	r3, r3, #16
 8002816:	68ba      	ldr	r2, [r7, #8]
 8002818:	4413      	add	r3, r2
 800281a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800281c:	2300      	movs	r3, #0
 800281e:	73fb      	strb	r3, [r7, #15]
 8002820:	e00d      	b.n	800283e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	7bfb      	ldrb	r3, [r7, #15]
 8002828:	3340      	adds	r3, #64	; 0x40
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	4413      	add	r3, r2
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	0c1b      	lsrs	r3, r3, #16
 8002832:	68ba      	ldr	r2, [r7, #8]
 8002834:	4413      	add	r3, r2
 8002836:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002838:	7bfb      	ldrb	r3, [r7, #15]
 800283a:	3301      	adds	r3, #1
 800283c:	73fb      	strb	r3, [r7, #15]
 800283e:	7bfa      	ldrb	r2, [r7, #15]
 8002840:	78fb      	ldrb	r3, [r7, #3]
 8002842:	3b01      	subs	r3, #1
 8002844:	429a      	cmp	r2, r3
 8002846:	d3ec      	bcc.n	8002822 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002848:	883b      	ldrh	r3, [r7, #0]
 800284a:	0418      	lsls	r0, r3, #16
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6819      	ldr	r1, [r3, #0]
 8002850:	78fb      	ldrb	r3, [r7, #3]
 8002852:	3b01      	subs	r3, #1
 8002854:	68ba      	ldr	r2, [r7, #8]
 8002856:	4302      	orrs	r2, r0
 8002858:	3340      	adds	r3, #64	; 0x40
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	440b      	add	r3, r1
 800285e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002860:	2300      	movs	r3, #0
}
 8002862:	4618      	mov	r0, r3
 8002864:	3714      	adds	r7, #20
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr

0800286e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800286e:	b480      	push	{r7}
 8002870:	b083      	sub	sp, #12
 8002872:	af00      	add	r7, sp, #0
 8002874:	6078      	str	r0, [r7, #4]
 8002876:	460b      	mov	r3, r1
 8002878:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	887a      	ldrh	r2, [r7, #2]
 8002880:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002882:	2300      	movs	r3, #0
}
 8002884:	4618      	mov	r0, r3
 8002886:	370c      	adds	r7, #12
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr

08002890 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002890:	b480      	push	{r7}
 8002892:	b085      	sub	sp, #20
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2201      	movs	r2, #1
 80028a2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2200      	movs	r2, #0
 80028aa:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	699b      	ldr	r3, [r3, #24]
 80028b2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028c2:	f043 0303 	orr.w	r3, r3, #3
 80028c6:	68fa      	ldr	r2, [r7, #12]
 80028c8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80028ca:	2300      	movs	r3, #0
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	3714      	adds	r7, #20
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr

080028d8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80028d8:	b480      	push	{r7}
 80028da:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80028dc:	4b05      	ldr	r3, [pc, #20]	; (80028f4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a04      	ldr	r2, [pc, #16]	; (80028f4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80028e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028e6:	6013      	str	r3, [r2, #0]
}
 80028e8:	bf00      	nop
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr
 80028f2:	bf00      	nop
 80028f4:	40007000 	.word	0x40007000

080028f8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80028f8:	b480      	push	{r7}
 80028fa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80028fc:	4b04      	ldr	r3, [pc, #16]	; (8002910 <HAL_PWREx_GetVoltageRange+0x18>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002904:	4618      	mov	r0, r3
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr
 800290e:	bf00      	nop
 8002910:	40007000 	.word	0x40007000

08002914 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002914:	b480      	push	{r7}
 8002916:	b085      	sub	sp, #20
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002922:	d130      	bne.n	8002986 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002924:	4b23      	ldr	r3, [pc, #140]	; (80029b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800292c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002930:	d038      	beq.n	80029a4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002932:	4b20      	ldr	r3, [pc, #128]	; (80029b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800293a:	4a1e      	ldr	r2, [pc, #120]	; (80029b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800293c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002940:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002942:	4b1d      	ldr	r3, [pc, #116]	; (80029b8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	2232      	movs	r2, #50	; 0x32
 8002948:	fb02 f303 	mul.w	r3, r2, r3
 800294c:	4a1b      	ldr	r2, [pc, #108]	; (80029bc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800294e:	fba2 2303 	umull	r2, r3, r2, r3
 8002952:	0c9b      	lsrs	r3, r3, #18
 8002954:	3301      	adds	r3, #1
 8002956:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002958:	e002      	b.n	8002960 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	3b01      	subs	r3, #1
 800295e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002960:	4b14      	ldr	r3, [pc, #80]	; (80029b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002962:	695b      	ldr	r3, [r3, #20]
 8002964:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002968:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800296c:	d102      	bne.n	8002974 <HAL_PWREx_ControlVoltageScaling+0x60>
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d1f2      	bne.n	800295a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002974:	4b0f      	ldr	r3, [pc, #60]	; (80029b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002976:	695b      	ldr	r3, [r3, #20]
 8002978:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800297c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002980:	d110      	bne.n	80029a4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002982:	2303      	movs	r3, #3
 8002984:	e00f      	b.n	80029a6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002986:	4b0b      	ldr	r3, [pc, #44]	; (80029b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800298e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002992:	d007      	beq.n	80029a4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002994:	4b07      	ldr	r3, [pc, #28]	; (80029b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800299c:	4a05      	ldr	r2, [pc, #20]	; (80029b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800299e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80029a2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80029a4:	2300      	movs	r3, #0
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	3714      	adds	r7, #20
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr
 80029b2:	bf00      	nop
 80029b4:	40007000 	.word	0x40007000
 80029b8:	20000000 	.word	0x20000000
 80029bc:	431bde83 	.word	0x431bde83

080029c0 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80029c0:	b480      	push	{r7}
 80029c2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80029c4:	4b05      	ldr	r3, [pc, #20]	; (80029dc <HAL_PWREx_EnableVddUSB+0x1c>)
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	4a04      	ldr	r2, [pc, #16]	; (80029dc <HAL_PWREx_EnableVddUSB+0x1c>)
 80029ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80029ce:	6053      	str	r3, [r2, #4]
}
 80029d0:	bf00      	nop
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr
 80029da:	bf00      	nop
 80029dc:	40007000 	.word	0x40007000

080029e0 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80029e0:	b480      	push	{r7}
 80029e2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80029e4:	4b05      	ldr	r3, [pc, #20]	; (80029fc <HAL_PWREx_EnableVddIO2+0x1c>)
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	4a04      	ldr	r2, [pc, #16]	; (80029fc <HAL_PWREx_EnableVddIO2+0x1c>)
 80029ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80029ee:	6053      	str	r3, [r2, #4]
}
 80029f0:	bf00      	nop
 80029f2:	46bd      	mov	sp, r7
 80029f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f8:	4770      	bx	lr
 80029fa:	bf00      	nop
 80029fc:	40007000 	.word	0x40007000

08002a00 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b088      	sub	sp, #32
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d102      	bne.n	8002a14 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	f000 bc08 	b.w	8003224 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a14:	4b96      	ldr	r3, [pc, #600]	; (8002c70 <HAL_RCC_OscConfig+0x270>)
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	f003 030c 	and.w	r3, r3, #12
 8002a1c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a1e:	4b94      	ldr	r3, [pc, #592]	; (8002c70 <HAL_RCC_OscConfig+0x270>)
 8002a20:	68db      	ldr	r3, [r3, #12]
 8002a22:	f003 0303 	and.w	r3, r3, #3
 8002a26:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 0310 	and.w	r3, r3, #16
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	f000 80e4 	beq.w	8002bfe <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002a36:	69bb      	ldr	r3, [r7, #24]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d007      	beq.n	8002a4c <HAL_RCC_OscConfig+0x4c>
 8002a3c:	69bb      	ldr	r3, [r7, #24]
 8002a3e:	2b0c      	cmp	r3, #12
 8002a40:	f040 808b 	bne.w	8002b5a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	f040 8087 	bne.w	8002b5a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002a4c:	4b88      	ldr	r3, [pc, #544]	; (8002c70 <HAL_RCC_OscConfig+0x270>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f003 0302 	and.w	r3, r3, #2
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d005      	beq.n	8002a64 <HAL_RCC_OscConfig+0x64>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	699b      	ldr	r3, [r3, #24]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d101      	bne.n	8002a64 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	e3df      	b.n	8003224 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6a1a      	ldr	r2, [r3, #32]
 8002a68:	4b81      	ldr	r3, [pc, #516]	; (8002c70 <HAL_RCC_OscConfig+0x270>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f003 0308 	and.w	r3, r3, #8
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d004      	beq.n	8002a7e <HAL_RCC_OscConfig+0x7e>
 8002a74:	4b7e      	ldr	r3, [pc, #504]	; (8002c70 <HAL_RCC_OscConfig+0x270>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a7c:	e005      	b.n	8002a8a <HAL_RCC_OscConfig+0x8a>
 8002a7e:	4b7c      	ldr	r3, [pc, #496]	; (8002c70 <HAL_RCC_OscConfig+0x270>)
 8002a80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a84:	091b      	lsrs	r3, r3, #4
 8002a86:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d223      	bcs.n	8002ad6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6a1b      	ldr	r3, [r3, #32]
 8002a92:	4618      	mov	r0, r3
 8002a94:	f000 fd92 	bl	80035bc <RCC_SetFlashLatencyFromMSIRange>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d001      	beq.n	8002aa2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e3c0      	b.n	8003224 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002aa2:	4b73      	ldr	r3, [pc, #460]	; (8002c70 <HAL_RCC_OscConfig+0x270>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a72      	ldr	r2, [pc, #456]	; (8002c70 <HAL_RCC_OscConfig+0x270>)
 8002aa8:	f043 0308 	orr.w	r3, r3, #8
 8002aac:	6013      	str	r3, [r2, #0]
 8002aae:	4b70      	ldr	r3, [pc, #448]	; (8002c70 <HAL_RCC_OscConfig+0x270>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6a1b      	ldr	r3, [r3, #32]
 8002aba:	496d      	ldr	r1, [pc, #436]	; (8002c70 <HAL_RCC_OscConfig+0x270>)
 8002abc:	4313      	orrs	r3, r2
 8002abe:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ac0:	4b6b      	ldr	r3, [pc, #428]	; (8002c70 <HAL_RCC_OscConfig+0x270>)
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	69db      	ldr	r3, [r3, #28]
 8002acc:	021b      	lsls	r3, r3, #8
 8002ace:	4968      	ldr	r1, [pc, #416]	; (8002c70 <HAL_RCC_OscConfig+0x270>)
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	604b      	str	r3, [r1, #4]
 8002ad4:	e025      	b.n	8002b22 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ad6:	4b66      	ldr	r3, [pc, #408]	; (8002c70 <HAL_RCC_OscConfig+0x270>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a65      	ldr	r2, [pc, #404]	; (8002c70 <HAL_RCC_OscConfig+0x270>)
 8002adc:	f043 0308 	orr.w	r3, r3, #8
 8002ae0:	6013      	str	r3, [r2, #0]
 8002ae2:	4b63      	ldr	r3, [pc, #396]	; (8002c70 <HAL_RCC_OscConfig+0x270>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6a1b      	ldr	r3, [r3, #32]
 8002aee:	4960      	ldr	r1, [pc, #384]	; (8002c70 <HAL_RCC_OscConfig+0x270>)
 8002af0:	4313      	orrs	r3, r2
 8002af2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002af4:	4b5e      	ldr	r3, [pc, #376]	; (8002c70 <HAL_RCC_OscConfig+0x270>)
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	69db      	ldr	r3, [r3, #28]
 8002b00:	021b      	lsls	r3, r3, #8
 8002b02:	495b      	ldr	r1, [pc, #364]	; (8002c70 <HAL_RCC_OscConfig+0x270>)
 8002b04:	4313      	orrs	r3, r2
 8002b06:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b08:	69bb      	ldr	r3, [r7, #24]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d109      	bne.n	8002b22 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6a1b      	ldr	r3, [r3, #32]
 8002b12:	4618      	mov	r0, r3
 8002b14:	f000 fd52 	bl	80035bc <RCC_SetFlashLatencyFromMSIRange>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d001      	beq.n	8002b22 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e380      	b.n	8003224 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002b22:	f000 fc87 	bl	8003434 <HAL_RCC_GetSysClockFreq>
 8002b26:	4602      	mov	r2, r0
 8002b28:	4b51      	ldr	r3, [pc, #324]	; (8002c70 <HAL_RCC_OscConfig+0x270>)
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	091b      	lsrs	r3, r3, #4
 8002b2e:	f003 030f 	and.w	r3, r3, #15
 8002b32:	4950      	ldr	r1, [pc, #320]	; (8002c74 <HAL_RCC_OscConfig+0x274>)
 8002b34:	5ccb      	ldrb	r3, [r1, r3]
 8002b36:	f003 031f 	and.w	r3, r3, #31
 8002b3a:	fa22 f303 	lsr.w	r3, r2, r3
 8002b3e:	4a4e      	ldr	r2, [pc, #312]	; (8002c78 <HAL_RCC_OscConfig+0x278>)
 8002b40:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002b42:	4b4e      	ldr	r3, [pc, #312]	; (8002c7c <HAL_RCC_OscConfig+0x27c>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4618      	mov	r0, r3
 8002b48:	f7fe f9e2 	bl	8000f10 <HAL_InitTick>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002b50:	7bfb      	ldrb	r3, [r7, #15]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d052      	beq.n	8002bfc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002b56:	7bfb      	ldrb	r3, [r7, #15]
 8002b58:	e364      	b.n	8003224 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	699b      	ldr	r3, [r3, #24]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d032      	beq.n	8002bc8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002b62:	4b43      	ldr	r3, [pc, #268]	; (8002c70 <HAL_RCC_OscConfig+0x270>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a42      	ldr	r2, [pc, #264]	; (8002c70 <HAL_RCC_OscConfig+0x270>)
 8002b68:	f043 0301 	orr.w	r3, r3, #1
 8002b6c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002b6e:	f7fe fa1f 	bl	8000fb0 <HAL_GetTick>
 8002b72:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b74:	e008      	b.n	8002b88 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b76:	f7fe fa1b 	bl	8000fb0 <HAL_GetTick>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	1ad3      	subs	r3, r2, r3
 8002b80:	2b02      	cmp	r3, #2
 8002b82:	d901      	bls.n	8002b88 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002b84:	2303      	movs	r3, #3
 8002b86:	e34d      	b.n	8003224 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b88:	4b39      	ldr	r3, [pc, #228]	; (8002c70 <HAL_RCC_OscConfig+0x270>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 0302 	and.w	r3, r3, #2
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d0f0      	beq.n	8002b76 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b94:	4b36      	ldr	r3, [pc, #216]	; (8002c70 <HAL_RCC_OscConfig+0x270>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a35      	ldr	r2, [pc, #212]	; (8002c70 <HAL_RCC_OscConfig+0x270>)
 8002b9a:	f043 0308 	orr.w	r3, r3, #8
 8002b9e:	6013      	str	r3, [r2, #0]
 8002ba0:	4b33      	ldr	r3, [pc, #204]	; (8002c70 <HAL_RCC_OscConfig+0x270>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6a1b      	ldr	r3, [r3, #32]
 8002bac:	4930      	ldr	r1, [pc, #192]	; (8002c70 <HAL_RCC_OscConfig+0x270>)
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002bb2:	4b2f      	ldr	r3, [pc, #188]	; (8002c70 <HAL_RCC_OscConfig+0x270>)
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	69db      	ldr	r3, [r3, #28]
 8002bbe:	021b      	lsls	r3, r3, #8
 8002bc0:	492b      	ldr	r1, [pc, #172]	; (8002c70 <HAL_RCC_OscConfig+0x270>)
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	604b      	str	r3, [r1, #4]
 8002bc6:	e01a      	b.n	8002bfe <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002bc8:	4b29      	ldr	r3, [pc, #164]	; (8002c70 <HAL_RCC_OscConfig+0x270>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a28      	ldr	r2, [pc, #160]	; (8002c70 <HAL_RCC_OscConfig+0x270>)
 8002bce:	f023 0301 	bic.w	r3, r3, #1
 8002bd2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002bd4:	f7fe f9ec 	bl	8000fb0 <HAL_GetTick>
 8002bd8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002bda:	e008      	b.n	8002bee <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002bdc:	f7fe f9e8 	bl	8000fb0 <HAL_GetTick>
 8002be0:	4602      	mov	r2, r0
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	1ad3      	subs	r3, r2, r3
 8002be6:	2b02      	cmp	r3, #2
 8002be8:	d901      	bls.n	8002bee <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002bea:	2303      	movs	r3, #3
 8002bec:	e31a      	b.n	8003224 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002bee:	4b20      	ldr	r3, [pc, #128]	; (8002c70 <HAL_RCC_OscConfig+0x270>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 0302 	and.w	r3, r3, #2
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d1f0      	bne.n	8002bdc <HAL_RCC_OscConfig+0x1dc>
 8002bfa:	e000      	b.n	8002bfe <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002bfc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 0301 	and.w	r3, r3, #1
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d073      	beq.n	8002cf2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002c0a:	69bb      	ldr	r3, [r7, #24]
 8002c0c:	2b08      	cmp	r3, #8
 8002c0e:	d005      	beq.n	8002c1c <HAL_RCC_OscConfig+0x21c>
 8002c10:	69bb      	ldr	r3, [r7, #24]
 8002c12:	2b0c      	cmp	r3, #12
 8002c14:	d10e      	bne.n	8002c34 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	2b03      	cmp	r3, #3
 8002c1a:	d10b      	bne.n	8002c34 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c1c:	4b14      	ldr	r3, [pc, #80]	; (8002c70 <HAL_RCC_OscConfig+0x270>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d063      	beq.n	8002cf0 <HAL_RCC_OscConfig+0x2f0>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d15f      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	e2f7      	b.n	8003224 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c3c:	d106      	bne.n	8002c4c <HAL_RCC_OscConfig+0x24c>
 8002c3e:	4b0c      	ldr	r3, [pc, #48]	; (8002c70 <HAL_RCC_OscConfig+0x270>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a0b      	ldr	r2, [pc, #44]	; (8002c70 <HAL_RCC_OscConfig+0x270>)
 8002c44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c48:	6013      	str	r3, [r2, #0]
 8002c4a:	e025      	b.n	8002c98 <HAL_RCC_OscConfig+0x298>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c54:	d114      	bne.n	8002c80 <HAL_RCC_OscConfig+0x280>
 8002c56:	4b06      	ldr	r3, [pc, #24]	; (8002c70 <HAL_RCC_OscConfig+0x270>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a05      	ldr	r2, [pc, #20]	; (8002c70 <HAL_RCC_OscConfig+0x270>)
 8002c5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c60:	6013      	str	r3, [r2, #0]
 8002c62:	4b03      	ldr	r3, [pc, #12]	; (8002c70 <HAL_RCC_OscConfig+0x270>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a02      	ldr	r2, [pc, #8]	; (8002c70 <HAL_RCC_OscConfig+0x270>)
 8002c68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c6c:	6013      	str	r3, [r2, #0]
 8002c6e:	e013      	b.n	8002c98 <HAL_RCC_OscConfig+0x298>
 8002c70:	40021000 	.word	0x40021000
 8002c74:	0800b6b0 	.word	0x0800b6b0
 8002c78:	20000000 	.word	0x20000000
 8002c7c:	20000004 	.word	0x20000004
 8002c80:	4ba0      	ldr	r3, [pc, #640]	; (8002f04 <HAL_RCC_OscConfig+0x504>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a9f      	ldr	r2, [pc, #636]	; (8002f04 <HAL_RCC_OscConfig+0x504>)
 8002c86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c8a:	6013      	str	r3, [r2, #0]
 8002c8c:	4b9d      	ldr	r3, [pc, #628]	; (8002f04 <HAL_RCC_OscConfig+0x504>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a9c      	ldr	r2, [pc, #624]	; (8002f04 <HAL_RCC_OscConfig+0x504>)
 8002c92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d013      	beq.n	8002cc8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ca0:	f7fe f986 	bl	8000fb0 <HAL_GetTick>
 8002ca4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ca6:	e008      	b.n	8002cba <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ca8:	f7fe f982 	bl	8000fb0 <HAL_GetTick>
 8002cac:	4602      	mov	r2, r0
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	2b64      	cmp	r3, #100	; 0x64
 8002cb4:	d901      	bls.n	8002cba <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	e2b4      	b.n	8003224 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002cba:	4b92      	ldr	r3, [pc, #584]	; (8002f04 <HAL_RCC_OscConfig+0x504>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d0f0      	beq.n	8002ca8 <HAL_RCC_OscConfig+0x2a8>
 8002cc6:	e014      	b.n	8002cf2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cc8:	f7fe f972 	bl	8000fb0 <HAL_GetTick>
 8002ccc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002cce:	e008      	b.n	8002ce2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cd0:	f7fe f96e 	bl	8000fb0 <HAL_GetTick>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	2b64      	cmp	r3, #100	; 0x64
 8002cdc:	d901      	bls.n	8002ce2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	e2a0      	b.n	8003224 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002ce2:	4b88      	ldr	r3, [pc, #544]	; (8002f04 <HAL_RCC_OscConfig+0x504>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d1f0      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x2d0>
 8002cee:	e000      	b.n	8002cf2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cf0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f003 0302 	and.w	r3, r3, #2
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d060      	beq.n	8002dc0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002cfe:	69bb      	ldr	r3, [r7, #24]
 8002d00:	2b04      	cmp	r3, #4
 8002d02:	d005      	beq.n	8002d10 <HAL_RCC_OscConfig+0x310>
 8002d04:	69bb      	ldr	r3, [r7, #24]
 8002d06:	2b0c      	cmp	r3, #12
 8002d08:	d119      	bne.n	8002d3e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	2b02      	cmp	r3, #2
 8002d0e:	d116      	bne.n	8002d3e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d10:	4b7c      	ldr	r3, [pc, #496]	; (8002f04 <HAL_RCC_OscConfig+0x504>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d005      	beq.n	8002d28 <HAL_RCC_OscConfig+0x328>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d101      	bne.n	8002d28 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	e27d      	b.n	8003224 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d28:	4b76      	ldr	r3, [pc, #472]	; (8002f04 <HAL_RCC_OscConfig+0x504>)
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	691b      	ldr	r3, [r3, #16]
 8002d34:	061b      	lsls	r3, r3, #24
 8002d36:	4973      	ldr	r1, [pc, #460]	; (8002f04 <HAL_RCC_OscConfig+0x504>)
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d3c:	e040      	b.n	8002dc0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	68db      	ldr	r3, [r3, #12]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d023      	beq.n	8002d8e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d46:	4b6f      	ldr	r3, [pc, #444]	; (8002f04 <HAL_RCC_OscConfig+0x504>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a6e      	ldr	r2, [pc, #440]	; (8002f04 <HAL_RCC_OscConfig+0x504>)
 8002d4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d52:	f7fe f92d 	bl	8000fb0 <HAL_GetTick>
 8002d56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d58:	e008      	b.n	8002d6c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d5a:	f7fe f929 	bl	8000fb0 <HAL_GetTick>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	1ad3      	subs	r3, r2, r3
 8002d64:	2b02      	cmp	r3, #2
 8002d66:	d901      	bls.n	8002d6c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002d68:	2303      	movs	r3, #3
 8002d6a:	e25b      	b.n	8003224 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d6c:	4b65      	ldr	r3, [pc, #404]	; (8002f04 <HAL_RCC_OscConfig+0x504>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d0f0      	beq.n	8002d5a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d78:	4b62      	ldr	r3, [pc, #392]	; (8002f04 <HAL_RCC_OscConfig+0x504>)
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	691b      	ldr	r3, [r3, #16]
 8002d84:	061b      	lsls	r3, r3, #24
 8002d86:	495f      	ldr	r1, [pc, #380]	; (8002f04 <HAL_RCC_OscConfig+0x504>)
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	604b      	str	r3, [r1, #4]
 8002d8c:	e018      	b.n	8002dc0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d8e:	4b5d      	ldr	r3, [pc, #372]	; (8002f04 <HAL_RCC_OscConfig+0x504>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a5c      	ldr	r2, [pc, #368]	; (8002f04 <HAL_RCC_OscConfig+0x504>)
 8002d94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d9a:	f7fe f909 	bl	8000fb0 <HAL_GetTick>
 8002d9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002da0:	e008      	b.n	8002db4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002da2:	f7fe f905 	bl	8000fb0 <HAL_GetTick>
 8002da6:	4602      	mov	r2, r0
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	1ad3      	subs	r3, r2, r3
 8002dac:	2b02      	cmp	r3, #2
 8002dae:	d901      	bls.n	8002db4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002db0:	2303      	movs	r3, #3
 8002db2:	e237      	b.n	8003224 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002db4:	4b53      	ldr	r3, [pc, #332]	; (8002f04 <HAL_RCC_OscConfig+0x504>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d1f0      	bne.n	8002da2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 0308 	and.w	r3, r3, #8
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d03c      	beq.n	8002e46 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	695b      	ldr	r3, [r3, #20]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d01c      	beq.n	8002e0e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dd4:	4b4b      	ldr	r3, [pc, #300]	; (8002f04 <HAL_RCC_OscConfig+0x504>)
 8002dd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dda:	4a4a      	ldr	r2, [pc, #296]	; (8002f04 <HAL_RCC_OscConfig+0x504>)
 8002ddc:	f043 0301 	orr.w	r3, r3, #1
 8002de0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002de4:	f7fe f8e4 	bl	8000fb0 <HAL_GetTick>
 8002de8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002dea:	e008      	b.n	8002dfe <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dec:	f7fe f8e0 	bl	8000fb0 <HAL_GetTick>
 8002df0:	4602      	mov	r2, r0
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	2b02      	cmp	r3, #2
 8002df8:	d901      	bls.n	8002dfe <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	e212      	b.n	8003224 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002dfe:	4b41      	ldr	r3, [pc, #260]	; (8002f04 <HAL_RCC_OscConfig+0x504>)
 8002e00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e04:	f003 0302 	and.w	r3, r3, #2
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d0ef      	beq.n	8002dec <HAL_RCC_OscConfig+0x3ec>
 8002e0c:	e01b      	b.n	8002e46 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e0e:	4b3d      	ldr	r3, [pc, #244]	; (8002f04 <HAL_RCC_OscConfig+0x504>)
 8002e10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e14:	4a3b      	ldr	r2, [pc, #236]	; (8002f04 <HAL_RCC_OscConfig+0x504>)
 8002e16:	f023 0301 	bic.w	r3, r3, #1
 8002e1a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e1e:	f7fe f8c7 	bl	8000fb0 <HAL_GetTick>
 8002e22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e24:	e008      	b.n	8002e38 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e26:	f7fe f8c3 	bl	8000fb0 <HAL_GetTick>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	1ad3      	subs	r3, r2, r3
 8002e30:	2b02      	cmp	r3, #2
 8002e32:	d901      	bls.n	8002e38 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002e34:	2303      	movs	r3, #3
 8002e36:	e1f5      	b.n	8003224 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e38:	4b32      	ldr	r3, [pc, #200]	; (8002f04 <HAL_RCC_OscConfig+0x504>)
 8002e3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e3e:	f003 0302 	and.w	r3, r3, #2
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d1ef      	bne.n	8002e26 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 0304 	and.w	r3, r3, #4
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	f000 80a6 	beq.w	8002fa0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e54:	2300      	movs	r3, #0
 8002e56:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002e58:	4b2a      	ldr	r3, [pc, #168]	; (8002f04 <HAL_RCC_OscConfig+0x504>)
 8002e5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d10d      	bne.n	8002e80 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e64:	4b27      	ldr	r3, [pc, #156]	; (8002f04 <HAL_RCC_OscConfig+0x504>)
 8002e66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e68:	4a26      	ldr	r2, [pc, #152]	; (8002f04 <HAL_RCC_OscConfig+0x504>)
 8002e6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e6e:	6593      	str	r3, [r2, #88]	; 0x58
 8002e70:	4b24      	ldr	r3, [pc, #144]	; (8002f04 <HAL_RCC_OscConfig+0x504>)
 8002e72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e78:	60bb      	str	r3, [r7, #8]
 8002e7a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e80:	4b21      	ldr	r3, [pc, #132]	; (8002f08 <HAL_RCC_OscConfig+0x508>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d118      	bne.n	8002ebe <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e8c:	4b1e      	ldr	r3, [pc, #120]	; (8002f08 <HAL_RCC_OscConfig+0x508>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a1d      	ldr	r2, [pc, #116]	; (8002f08 <HAL_RCC_OscConfig+0x508>)
 8002e92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e96:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e98:	f7fe f88a 	bl	8000fb0 <HAL_GetTick>
 8002e9c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e9e:	e008      	b.n	8002eb2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ea0:	f7fe f886 	bl	8000fb0 <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	2b02      	cmp	r3, #2
 8002eac:	d901      	bls.n	8002eb2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	e1b8      	b.n	8003224 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002eb2:	4b15      	ldr	r3, [pc, #84]	; (8002f08 <HAL_RCC_OscConfig+0x508>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d0f0      	beq.n	8002ea0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d108      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x4d8>
 8002ec6:	4b0f      	ldr	r3, [pc, #60]	; (8002f04 <HAL_RCC_OscConfig+0x504>)
 8002ec8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ecc:	4a0d      	ldr	r2, [pc, #52]	; (8002f04 <HAL_RCC_OscConfig+0x504>)
 8002ece:	f043 0301 	orr.w	r3, r3, #1
 8002ed2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ed6:	e029      	b.n	8002f2c <HAL_RCC_OscConfig+0x52c>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	2b05      	cmp	r3, #5
 8002ede:	d115      	bne.n	8002f0c <HAL_RCC_OscConfig+0x50c>
 8002ee0:	4b08      	ldr	r3, [pc, #32]	; (8002f04 <HAL_RCC_OscConfig+0x504>)
 8002ee2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ee6:	4a07      	ldr	r2, [pc, #28]	; (8002f04 <HAL_RCC_OscConfig+0x504>)
 8002ee8:	f043 0304 	orr.w	r3, r3, #4
 8002eec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ef0:	4b04      	ldr	r3, [pc, #16]	; (8002f04 <HAL_RCC_OscConfig+0x504>)
 8002ef2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ef6:	4a03      	ldr	r2, [pc, #12]	; (8002f04 <HAL_RCC_OscConfig+0x504>)
 8002ef8:	f043 0301 	orr.w	r3, r3, #1
 8002efc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f00:	e014      	b.n	8002f2c <HAL_RCC_OscConfig+0x52c>
 8002f02:	bf00      	nop
 8002f04:	40021000 	.word	0x40021000
 8002f08:	40007000 	.word	0x40007000
 8002f0c:	4b9d      	ldr	r3, [pc, #628]	; (8003184 <HAL_RCC_OscConfig+0x784>)
 8002f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f12:	4a9c      	ldr	r2, [pc, #624]	; (8003184 <HAL_RCC_OscConfig+0x784>)
 8002f14:	f023 0301 	bic.w	r3, r3, #1
 8002f18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f1c:	4b99      	ldr	r3, [pc, #612]	; (8003184 <HAL_RCC_OscConfig+0x784>)
 8002f1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f22:	4a98      	ldr	r2, [pc, #608]	; (8003184 <HAL_RCC_OscConfig+0x784>)
 8002f24:	f023 0304 	bic.w	r3, r3, #4
 8002f28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d016      	beq.n	8002f62 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f34:	f7fe f83c 	bl	8000fb0 <HAL_GetTick>
 8002f38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f3a:	e00a      	b.n	8002f52 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f3c:	f7fe f838 	bl	8000fb0 <HAL_GetTick>
 8002f40:	4602      	mov	r2, r0
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	1ad3      	subs	r3, r2, r3
 8002f46:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d901      	bls.n	8002f52 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002f4e:	2303      	movs	r3, #3
 8002f50:	e168      	b.n	8003224 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f52:	4b8c      	ldr	r3, [pc, #560]	; (8003184 <HAL_RCC_OscConfig+0x784>)
 8002f54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f58:	f003 0302 	and.w	r3, r3, #2
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d0ed      	beq.n	8002f3c <HAL_RCC_OscConfig+0x53c>
 8002f60:	e015      	b.n	8002f8e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f62:	f7fe f825 	bl	8000fb0 <HAL_GetTick>
 8002f66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f68:	e00a      	b.n	8002f80 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f6a:	f7fe f821 	bl	8000fb0 <HAL_GetTick>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	1ad3      	subs	r3, r2, r3
 8002f74:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d901      	bls.n	8002f80 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002f7c:	2303      	movs	r3, #3
 8002f7e:	e151      	b.n	8003224 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f80:	4b80      	ldr	r3, [pc, #512]	; (8003184 <HAL_RCC_OscConfig+0x784>)
 8002f82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f86:	f003 0302 	and.w	r3, r3, #2
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d1ed      	bne.n	8002f6a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f8e:	7ffb      	ldrb	r3, [r7, #31]
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d105      	bne.n	8002fa0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f94:	4b7b      	ldr	r3, [pc, #492]	; (8003184 <HAL_RCC_OscConfig+0x784>)
 8002f96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f98:	4a7a      	ldr	r2, [pc, #488]	; (8003184 <HAL_RCC_OscConfig+0x784>)
 8002f9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f9e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 0320 	and.w	r3, r3, #32
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d03c      	beq.n	8003026 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d01c      	beq.n	8002fee <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002fb4:	4b73      	ldr	r3, [pc, #460]	; (8003184 <HAL_RCC_OscConfig+0x784>)
 8002fb6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002fba:	4a72      	ldr	r2, [pc, #456]	; (8003184 <HAL_RCC_OscConfig+0x784>)
 8002fbc:	f043 0301 	orr.w	r3, r3, #1
 8002fc0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fc4:	f7fd fff4 	bl	8000fb0 <HAL_GetTick>
 8002fc8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002fca:	e008      	b.n	8002fde <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002fcc:	f7fd fff0 	bl	8000fb0 <HAL_GetTick>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	1ad3      	subs	r3, r2, r3
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	d901      	bls.n	8002fde <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	e122      	b.n	8003224 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002fde:	4b69      	ldr	r3, [pc, #420]	; (8003184 <HAL_RCC_OscConfig+0x784>)
 8002fe0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002fe4:	f003 0302 	and.w	r3, r3, #2
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d0ef      	beq.n	8002fcc <HAL_RCC_OscConfig+0x5cc>
 8002fec:	e01b      	b.n	8003026 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002fee:	4b65      	ldr	r3, [pc, #404]	; (8003184 <HAL_RCC_OscConfig+0x784>)
 8002ff0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002ff4:	4a63      	ldr	r2, [pc, #396]	; (8003184 <HAL_RCC_OscConfig+0x784>)
 8002ff6:	f023 0301 	bic.w	r3, r3, #1
 8002ffa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ffe:	f7fd ffd7 	bl	8000fb0 <HAL_GetTick>
 8003002:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003004:	e008      	b.n	8003018 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003006:	f7fd ffd3 	bl	8000fb0 <HAL_GetTick>
 800300a:	4602      	mov	r2, r0
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	1ad3      	subs	r3, r2, r3
 8003010:	2b02      	cmp	r3, #2
 8003012:	d901      	bls.n	8003018 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003014:	2303      	movs	r3, #3
 8003016:	e105      	b.n	8003224 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003018:	4b5a      	ldr	r3, [pc, #360]	; (8003184 <HAL_RCC_OscConfig+0x784>)
 800301a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800301e:	f003 0302 	and.w	r3, r3, #2
 8003022:	2b00      	cmp	r3, #0
 8003024:	d1ef      	bne.n	8003006 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800302a:	2b00      	cmp	r3, #0
 800302c:	f000 80f9 	beq.w	8003222 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003034:	2b02      	cmp	r3, #2
 8003036:	f040 80cf 	bne.w	80031d8 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800303a:	4b52      	ldr	r3, [pc, #328]	; (8003184 <HAL_RCC_OscConfig+0x784>)
 800303c:	68db      	ldr	r3, [r3, #12]
 800303e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	f003 0203 	and.w	r2, r3, #3
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800304a:	429a      	cmp	r2, r3
 800304c:	d12c      	bne.n	80030a8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003058:	3b01      	subs	r3, #1
 800305a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800305c:	429a      	cmp	r2, r3
 800305e:	d123      	bne.n	80030a8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800306a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800306c:	429a      	cmp	r2, r3
 800306e:	d11b      	bne.n	80030a8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800307a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800307c:	429a      	cmp	r2, r3
 800307e:	d113      	bne.n	80030a8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800308a:	085b      	lsrs	r3, r3, #1
 800308c:	3b01      	subs	r3, #1
 800308e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003090:	429a      	cmp	r2, r3
 8003092:	d109      	bne.n	80030a8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309e:	085b      	lsrs	r3, r3, #1
 80030a0:	3b01      	subs	r3, #1
 80030a2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d071      	beq.n	800318c <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80030a8:	69bb      	ldr	r3, [r7, #24]
 80030aa:	2b0c      	cmp	r3, #12
 80030ac:	d068      	beq.n	8003180 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80030ae:	4b35      	ldr	r3, [pc, #212]	; (8003184 <HAL_RCC_OscConfig+0x784>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d105      	bne.n	80030c6 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80030ba:	4b32      	ldr	r3, [pc, #200]	; (8003184 <HAL_RCC_OscConfig+0x784>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d001      	beq.n	80030ca <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e0ac      	b.n	8003224 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80030ca:	4b2e      	ldr	r3, [pc, #184]	; (8003184 <HAL_RCC_OscConfig+0x784>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a2d      	ldr	r2, [pc, #180]	; (8003184 <HAL_RCC_OscConfig+0x784>)
 80030d0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030d4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80030d6:	f7fd ff6b 	bl	8000fb0 <HAL_GetTick>
 80030da:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030dc:	e008      	b.n	80030f0 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030de:	f7fd ff67 	bl	8000fb0 <HAL_GetTick>
 80030e2:	4602      	mov	r2, r0
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	1ad3      	subs	r3, r2, r3
 80030e8:	2b02      	cmp	r3, #2
 80030ea:	d901      	bls.n	80030f0 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80030ec:	2303      	movs	r3, #3
 80030ee:	e099      	b.n	8003224 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030f0:	4b24      	ldr	r3, [pc, #144]	; (8003184 <HAL_RCC_OscConfig+0x784>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d1f0      	bne.n	80030de <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030fc:	4b21      	ldr	r3, [pc, #132]	; (8003184 <HAL_RCC_OscConfig+0x784>)
 80030fe:	68da      	ldr	r2, [r3, #12]
 8003100:	4b21      	ldr	r3, [pc, #132]	; (8003188 <HAL_RCC_OscConfig+0x788>)
 8003102:	4013      	ands	r3, r2
 8003104:	687a      	ldr	r2, [r7, #4]
 8003106:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003108:	687a      	ldr	r2, [r7, #4]
 800310a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800310c:	3a01      	subs	r2, #1
 800310e:	0112      	lsls	r2, r2, #4
 8003110:	4311      	orrs	r1, r2
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003116:	0212      	lsls	r2, r2, #8
 8003118:	4311      	orrs	r1, r2
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800311e:	0852      	lsrs	r2, r2, #1
 8003120:	3a01      	subs	r2, #1
 8003122:	0552      	lsls	r2, r2, #21
 8003124:	4311      	orrs	r1, r2
 8003126:	687a      	ldr	r2, [r7, #4]
 8003128:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800312a:	0852      	lsrs	r2, r2, #1
 800312c:	3a01      	subs	r2, #1
 800312e:	0652      	lsls	r2, r2, #25
 8003130:	4311      	orrs	r1, r2
 8003132:	687a      	ldr	r2, [r7, #4]
 8003134:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003136:	06d2      	lsls	r2, r2, #27
 8003138:	430a      	orrs	r2, r1
 800313a:	4912      	ldr	r1, [pc, #72]	; (8003184 <HAL_RCC_OscConfig+0x784>)
 800313c:	4313      	orrs	r3, r2
 800313e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003140:	4b10      	ldr	r3, [pc, #64]	; (8003184 <HAL_RCC_OscConfig+0x784>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a0f      	ldr	r2, [pc, #60]	; (8003184 <HAL_RCC_OscConfig+0x784>)
 8003146:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800314a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800314c:	4b0d      	ldr	r3, [pc, #52]	; (8003184 <HAL_RCC_OscConfig+0x784>)
 800314e:	68db      	ldr	r3, [r3, #12]
 8003150:	4a0c      	ldr	r2, [pc, #48]	; (8003184 <HAL_RCC_OscConfig+0x784>)
 8003152:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003156:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003158:	f7fd ff2a 	bl	8000fb0 <HAL_GetTick>
 800315c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800315e:	e008      	b.n	8003172 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003160:	f7fd ff26 	bl	8000fb0 <HAL_GetTick>
 8003164:	4602      	mov	r2, r0
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	1ad3      	subs	r3, r2, r3
 800316a:	2b02      	cmp	r3, #2
 800316c:	d901      	bls.n	8003172 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800316e:	2303      	movs	r3, #3
 8003170:	e058      	b.n	8003224 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003172:	4b04      	ldr	r3, [pc, #16]	; (8003184 <HAL_RCC_OscConfig+0x784>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d0f0      	beq.n	8003160 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800317e:	e050      	b.n	8003222 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	e04f      	b.n	8003224 <HAL_RCC_OscConfig+0x824>
 8003184:	40021000 	.word	0x40021000
 8003188:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800318c:	4b27      	ldr	r3, [pc, #156]	; (800322c <HAL_RCC_OscConfig+0x82c>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003194:	2b00      	cmp	r3, #0
 8003196:	d144      	bne.n	8003222 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003198:	4b24      	ldr	r3, [pc, #144]	; (800322c <HAL_RCC_OscConfig+0x82c>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a23      	ldr	r2, [pc, #140]	; (800322c <HAL_RCC_OscConfig+0x82c>)
 800319e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031a2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80031a4:	4b21      	ldr	r3, [pc, #132]	; (800322c <HAL_RCC_OscConfig+0x82c>)
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	4a20      	ldr	r2, [pc, #128]	; (800322c <HAL_RCC_OscConfig+0x82c>)
 80031aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031ae:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80031b0:	f7fd fefe 	bl	8000fb0 <HAL_GetTick>
 80031b4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031b6:	e008      	b.n	80031ca <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031b8:	f7fd fefa 	bl	8000fb0 <HAL_GetTick>
 80031bc:	4602      	mov	r2, r0
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	2b02      	cmp	r3, #2
 80031c4:	d901      	bls.n	80031ca <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80031c6:	2303      	movs	r3, #3
 80031c8:	e02c      	b.n	8003224 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031ca:	4b18      	ldr	r3, [pc, #96]	; (800322c <HAL_RCC_OscConfig+0x82c>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d0f0      	beq.n	80031b8 <HAL_RCC_OscConfig+0x7b8>
 80031d6:	e024      	b.n	8003222 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80031d8:	69bb      	ldr	r3, [r7, #24]
 80031da:	2b0c      	cmp	r3, #12
 80031dc:	d01f      	beq.n	800321e <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031de:	4b13      	ldr	r3, [pc, #76]	; (800322c <HAL_RCC_OscConfig+0x82c>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a12      	ldr	r2, [pc, #72]	; (800322c <HAL_RCC_OscConfig+0x82c>)
 80031e4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031ea:	f7fd fee1 	bl	8000fb0 <HAL_GetTick>
 80031ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031f0:	e008      	b.n	8003204 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031f2:	f7fd fedd 	bl	8000fb0 <HAL_GetTick>
 80031f6:	4602      	mov	r2, r0
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	1ad3      	subs	r3, r2, r3
 80031fc:	2b02      	cmp	r3, #2
 80031fe:	d901      	bls.n	8003204 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8003200:	2303      	movs	r3, #3
 8003202:	e00f      	b.n	8003224 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003204:	4b09      	ldr	r3, [pc, #36]	; (800322c <HAL_RCC_OscConfig+0x82c>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800320c:	2b00      	cmp	r3, #0
 800320e:	d1f0      	bne.n	80031f2 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003210:	4b06      	ldr	r3, [pc, #24]	; (800322c <HAL_RCC_OscConfig+0x82c>)
 8003212:	68da      	ldr	r2, [r3, #12]
 8003214:	4905      	ldr	r1, [pc, #20]	; (800322c <HAL_RCC_OscConfig+0x82c>)
 8003216:	4b06      	ldr	r3, [pc, #24]	; (8003230 <HAL_RCC_OscConfig+0x830>)
 8003218:	4013      	ands	r3, r2
 800321a:	60cb      	str	r3, [r1, #12]
 800321c:	e001      	b.n	8003222 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	e000      	b.n	8003224 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8003222:	2300      	movs	r3, #0
}
 8003224:	4618      	mov	r0, r3
 8003226:	3720      	adds	r7, #32
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}
 800322c:	40021000 	.word	0x40021000
 8003230:	feeefffc 	.word	0xfeeefffc

08003234 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b084      	sub	sp, #16
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
 800323c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d101      	bne.n	8003248 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	e0e7      	b.n	8003418 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003248:	4b75      	ldr	r3, [pc, #468]	; (8003420 <HAL_RCC_ClockConfig+0x1ec>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 0307 	and.w	r3, r3, #7
 8003250:	683a      	ldr	r2, [r7, #0]
 8003252:	429a      	cmp	r2, r3
 8003254:	d910      	bls.n	8003278 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003256:	4b72      	ldr	r3, [pc, #456]	; (8003420 <HAL_RCC_ClockConfig+0x1ec>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f023 0207 	bic.w	r2, r3, #7
 800325e:	4970      	ldr	r1, [pc, #448]	; (8003420 <HAL_RCC_ClockConfig+0x1ec>)
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	4313      	orrs	r3, r2
 8003264:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003266:	4b6e      	ldr	r3, [pc, #440]	; (8003420 <HAL_RCC_ClockConfig+0x1ec>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 0307 	and.w	r3, r3, #7
 800326e:	683a      	ldr	r2, [r7, #0]
 8003270:	429a      	cmp	r2, r3
 8003272:	d001      	beq.n	8003278 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	e0cf      	b.n	8003418 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f003 0302 	and.w	r3, r3, #2
 8003280:	2b00      	cmp	r3, #0
 8003282:	d010      	beq.n	80032a6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	689a      	ldr	r2, [r3, #8]
 8003288:	4b66      	ldr	r3, [pc, #408]	; (8003424 <HAL_RCC_ClockConfig+0x1f0>)
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003290:	429a      	cmp	r2, r3
 8003292:	d908      	bls.n	80032a6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003294:	4b63      	ldr	r3, [pc, #396]	; (8003424 <HAL_RCC_ClockConfig+0x1f0>)
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	4960      	ldr	r1, [pc, #384]	; (8003424 <HAL_RCC_ClockConfig+0x1f0>)
 80032a2:	4313      	orrs	r3, r2
 80032a4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f003 0301 	and.w	r3, r3, #1
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d04c      	beq.n	800334c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	2b03      	cmp	r3, #3
 80032b8:	d107      	bne.n	80032ca <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032ba:	4b5a      	ldr	r3, [pc, #360]	; (8003424 <HAL_RCC_ClockConfig+0x1f0>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d121      	bne.n	800330a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e0a6      	b.n	8003418 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	2b02      	cmp	r3, #2
 80032d0:	d107      	bne.n	80032e2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032d2:	4b54      	ldr	r3, [pc, #336]	; (8003424 <HAL_RCC_ClockConfig+0x1f0>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d115      	bne.n	800330a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e09a      	b.n	8003418 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d107      	bne.n	80032fa <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80032ea:	4b4e      	ldr	r3, [pc, #312]	; (8003424 <HAL_RCC_ClockConfig+0x1f0>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0302 	and.w	r3, r3, #2
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d109      	bne.n	800330a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e08e      	b.n	8003418 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032fa:	4b4a      	ldr	r3, [pc, #296]	; (8003424 <HAL_RCC_ClockConfig+0x1f0>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003302:	2b00      	cmp	r3, #0
 8003304:	d101      	bne.n	800330a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e086      	b.n	8003418 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800330a:	4b46      	ldr	r3, [pc, #280]	; (8003424 <HAL_RCC_ClockConfig+0x1f0>)
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	f023 0203 	bic.w	r2, r3, #3
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	4943      	ldr	r1, [pc, #268]	; (8003424 <HAL_RCC_ClockConfig+0x1f0>)
 8003318:	4313      	orrs	r3, r2
 800331a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800331c:	f7fd fe48 	bl	8000fb0 <HAL_GetTick>
 8003320:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003322:	e00a      	b.n	800333a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003324:	f7fd fe44 	bl	8000fb0 <HAL_GetTick>
 8003328:	4602      	mov	r2, r0
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	1ad3      	subs	r3, r2, r3
 800332e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003332:	4293      	cmp	r3, r2
 8003334:	d901      	bls.n	800333a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003336:	2303      	movs	r3, #3
 8003338:	e06e      	b.n	8003418 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800333a:	4b3a      	ldr	r3, [pc, #232]	; (8003424 <HAL_RCC_ClockConfig+0x1f0>)
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	f003 020c 	and.w	r2, r3, #12
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	429a      	cmp	r2, r3
 800334a:	d1eb      	bne.n	8003324 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f003 0302 	and.w	r3, r3, #2
 8003354:	2b00      	cmp	r3, #0
 8003356:	d010      	beq.n	800337a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	689a      	ldr	r2, [r3, #8]
 800335c:	4b31      	ldr	r3, [pc, #196]	; (8003424 <HAL_RCC_ClockConfig+0x1f0>)
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003364:	429a      	cmp	r2, r3
 8003366:	d208      	bcs.n	800337a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003368:	4b2e      	ldr	r3, [pc, #184]	; (8003424 <HAL_RCC_ClockConfig+0x1f0>)
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	492b      	ldr	r1, [pc, #172]	; (8003424 <HAL_RCC_ClockConfig+0x1f0>)
 8003376:	4313      	orrs	r3, r2
 8003378:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800337a:	4b29      	ldr	r3, [pc, #164]	; (8003420 <HAL_RCC_ClockConfig+0x1ec>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 0307 	and.w	r3, r3, #7
 8003382:	683a      	ldr	r2, [r7, #0]
 8003384:	429a      	cmp	r2, r3
 8003386:	d210      	bcs.n	80033aa <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003388:	4b25      	ldr	r3, [pc, #148]	; (8003420 <HAL_RCC_ClockConfig+0x1ec>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f023 0207 	bic.w	r2, r3, #7
 8003390:	4923      	ldr	r1, [pc, #140]	; (8003420 <HAL_RCC_ClockConfig+0x1ec>)
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	4313      	orrs	r3, r2
 8003396:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003398:	4b21      	ldr	r3, [pc, #132]	; (8003420 <HAL_RCC_ClockConfig+0x1ec>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 0307 	and.w	r3, r3, #7
 80033a0:	683a      	ldr	r2, [r7, #0]
 80033a2:	429a      	cmp	r2, r3
 80033a4:	d001      	beq.n	80033aa <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e036      	b.n	8003418 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 0304 	and.w	r3, r3, #4
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d008      	beq.n	80033c8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033b6:	4b1b      	ldr	r3, [pc, #108]	; (8003424 <HAL_RCC_ClockConfig+0x1f0>)
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	68db      	ldr	r3, [r3, #12]
 80033c2:	4918      	ldr	r1, [pc, #96]	; (8003424 <HAL_RCC_ClockConfig+0x1f0>)
 80033c4:	4313      	orrs	r3, r2
 80033c6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 0308 	and.w	r3, r3, #8
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d009      	beq.n	80033e8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033d4:	4b13      	ldr	r3, [pc, #76]	; (8003424 <HAL_RCC_ClockConfig+0x1f0>)
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	691b      	ldr	r3, [r3, #16]
 80033e0:	00db      	lsls	r3, r3, #3
 80033e2:	4910      	ldr	r1, [pc, #64]	; (8003424 <HAL_RCC_ClockConfig+0x1f0>)
 80033e4:	4313      	orrs	r3, r2
 80033e6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80033e8:	f000 f824 	bl	8003434 <HAL_RCC_GetSysClockFreq>
 80033ec:	4602      	mov	r2, r0
 80033ee:	4b0d      	ldr	r3, [pc, #52]	; (8003424 <HAL_RCC_ClockConfig+0x1f0>)
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	091b      	lsrs	r3, r3, #4
 80033f4:	f003 030f 	and.w	r3, r3, #15
 80033f8:	490b      	ldr	r1, [pc, #44]	; (8003428 <HAL_RCC_ClockConfig+0x1f4>)
 80033fa:	5ccb      	ldrb	r3, [r1, r3]
 80033fc:	f003 031f 	and.w	r3, r3, #31
 8003400:	fa22 f303 	lsr.w	r3, r2, r3
 8003404:	4a09      	ldr	r2, [pc, #36]	; (800342c <HAL_RCC_ClockConfig+0x1f8>)
 8003406:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003408:	4b09      	ldr	r3, [pc, #36]	; (8003430 <HAL_RCC_ClockConfig+0x1fc>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4618      	mov	r0, r3
 800340e:	f7fd fd7f 	bl	8000f10 <HAL_InitTick>
 8003412:	4603      	mov	r3, r0
 8003414:	72fb      	strb	r3, [r7, #11]

  return status;
 8003416:	7afb      	ldrb	r3, [r7, #11]
}
 8003418:	4618      	mov	r0, r3
 800341a:	3710      	adds	r7, #16
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}
 8003420:	40022000 	.word	0x40022000
 8003424:	40021000 	.word	0x40021000
 8003428:	0800b6b0 	.word	0x0800b6b0
 800342c:	20000000 	.word	0x20000000
 8003430:	20000004 	.word	0x20000004

08003434 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003434:	b480      	push	{r7}
 8003436:	b089      	sub	sp, #36	; 0x24
 8003438:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800343a:	2300      	movs	r3, #0
 800343c:	61fb      	str	r3, [r7, #28]
 800343e:	2300      	movs	r3, #0
 8003440:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003442:	4b3e      	ldr	r3, [pc, #248]	; (800353c <HAL_RCC_GetSysClockFreq+0x108>)
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	f003 030c 	and.w	r3, r3, #12
 800344a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800344c:	4b3b      	ldr	r3, [pc, #236]	; (800353c <HAL_RCC_GetSysClockFreq+0x108>)
 800344e:	68db      	ldr	r3, [r3, #12]
 8003450:	f003 0303 	and.w	r3, r3, #3
 8003454:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d005      	beq.n	8003468 <HAL_RCC_GetSysClockFreq+0x34>
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	2b0c      	cmp	r3, #12
 8003460:	d121      	bne.n	80034a6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2b01      	cmp	r3, #1
 8003466:	d11e      	bne.n	80034a6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003468:	4b34      	ldr	r3, [pc, #208]	; (800353c <HAL_RCC_GetSysClockFreq+0x108>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 0308 	and.w	r3, r3, #8
 8003470:	2b00      	cmp	r3, #0
 8003472:	d107      	bne.n	8003484 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003474:	4b31      	ldr	r3, [pc, #196]	; (800353c <HAL_RCC_GetSysClockFreq+0x108>)
 8003476:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800347a:	0a1b      	lsrs	r3, r3, #8
 800347c:	f003 030f 	and.w	r3, r3, #15
 8003480:	61fb      	str	r3, [r7, #28]
 8003482:	e005      	b.n	8003490 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003484:	4b2d      	ldr	r3, [pc, #180]	; (800353c <HAL_RCC_GetSysClockFreq+0x108>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	091b      	lsrs	r3, r3, #4
 800348a:	f003 030f 	and.w	r3, r3, #15
 800348e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003490:	4a2b      	ldr	r2, [pc, #172]	; (8003540 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003492:	69fb      	ldr	r3, [r7, #28]
 8003494:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003498:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d10d      	bne.n	80034bc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80034a0:	69fb      	ldr	r3, [r7, #28]
 80034a2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80034a4:	e00a      	b.n	80034bc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	2b04      	cmp	r3, #4
 80034aa:	d102      	bne.n	80034b2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80034ac:	4b25      	ldr	r3, [pc, #148]	; (8003544 <HAL_RCC_GetSysClockFreq+0x110>)
 80034ae:	61bb      	str	r3, [r7, #24]
 80034b0:	e004      	b.n	80034bc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	2b08      	cmp	r3, #8
 80034b6:	d101      	bne.n	80034bc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80034b8:	4b23      	ldr	r3, [pc, #140]	; (8003548 <HAL_RCC_GetSysClockFreq+0x114>)
 80034ba:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	2b0c      	cmp	r3, #12
 80034c0:	d134      	bne.n	800352c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80034c2:	4b1e      	ldr	r3, [pc, #120]	; (800353c <HAL_RCC_GetSysClockFreq+0x108>)
 80034c4:	68db      	ldr	r3, [r3, #12]
 80034c6:	f003 0303 	and.w	r3, r3, #3
 80034ca:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	2b02      	cmp	r3, #2
 80034d0:	d003      	beq.n	80034da <HAL_RCC_GetSysClockFreq+0xa6>
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	2b03      	cmp	r3, #3
 80034d6:	d003      	beq.n	80034e0 <HAL_RCC_GetSysClockFreq+0xac>
 80034d8:	e005      	b.n	80034e6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80034da:	4b1a      	ldr	r3, [pc, #104]	; (8003544 <HAL_RCC_GetSysClockFreq+0x110>)
 80034dc:	617b      	str	r3, [r7, #20]
      break;
 80034de:	e005      	b.n	80034ec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80034e0:	4b19      	ldr	r3, [pc, #100]	; (8003548 <HAL_RCC_GetSysClockFreq+0x114>)
 80034e2:	617b      	str	r3, [r7, #20]
      break;
 80034e4:	e002      	b.n	80034ec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80034e6:	69fb      	ldr	r3, [r7, #28]
 80034e8:	617b      	str	r3, [r7, #20]
      break;
 80034ea:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80034ec:	4b13      	ldr	r3, [pc, #76]	; (800353c <HAL_RCC_GetSysClockFreq+0x108>)
 80034ee:	68db      	ldr	r3, [r3, #12]
 80034f0:	091b      	lsrs	r3, r3, #4
 80034f2:	f003 0307 	and.w	r3, r3, #7
 80034f6:	3301      	adds	r3, #1
 80034f8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80034fa:	4b10      	ldr	r3, [pc, #64]	; (800353c <HAL_RCC_GetSysClockFreq+0x108>)
 80034fc:	68db      	ldr	r3, [r3, #12]
 80034fe:	0a1b      	lsrs	r3, r3, #8
 8003500:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003504:	697a      	ldr	r2, [r7, #20]
 8003506:	fb03 f202 	mul.w	r2, r3, r2
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003510:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003512:	4b0a      	ldr	r3, [pc, #40]	; (800353c <HAL_RCC_GetSysClockFreq+0x108>)
 8003514:	68db      	ldr	r3, [r3, #12]
 8003516:	0e5b      	lsrs	r3, r3, #25
 8003518:	f003 0303 	and.w	r3, r3, #3
 800351c:	3301      	adds	r3, #1
 800351e:	005b      	lsls	r3, r3, #1
 8003520:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003522:	697a      	ldr	r2, [r7, #20]
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	fbb2 f3f3 	udiv	r3, r2, r3
 800352a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800352c:	69bb      	ldr	r3, [r7, #24]
}
 800352e:	4618      	mov	r0, r3
 8003530:	3724      	adds	r7, #36	; 0x24
 8003532:	46bd      	mov	sp, r7
 8003534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003538:	4770      	bx	lr
 800353a:	bf00      	nop
 800353c:	40021000 	.word	0x40021000
 8003540:	0800b6c8 	.word	0x0800b6c8
 8003544:	00f42400 	.word	0x00f42400
 8003548:	007a1200 	.word	0x007a1200

0800354c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800354c:	b480      	push	{r7}
 800354e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003550:	4b03      	ldr	r3, [pc, #12]	; (8003560 <HAL_RCC_GetHCLKFreq+0x14>)
 8003552:	681b      	ldr	r3, [r3, #0]
}
 8003554:	4618      	mov	r0, r3
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr
 800355e:	bf00      	nop
 8003560:	20000000 	.word	0x20000000

08003564 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003568:	f7ff fff0 	bl	800354c <HAL_RCC_GetHCLKFreq>
 800356c:	4602      	mov	r2, r0
 800356e:	4b06      	ldr	r3, [pc, #24]	; (8003588 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	0a1b      	lsrs	r3, r3, #8
 8003574:	f003 0307 	and.w	r3, r3, #7
 8003578:	4904      	ldr	r1, [pc, #16]	; (800358c <HAL_RCC_GetPCLK1Freq+0x28>)
 800357a:	5ccb      	ldrb	r3, [r1, r3]
 800357c:	f003 031f 	and.w	r3, r3, #31
 8003580:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003584:	4618      	mov	r0, r3
 8003586:	bd80      	pop	{r7, pc}
 8003588:	40021000 	.word	0x40021000
 800358c:	0800b6c0 	.word	0x0800b6c0

08003590 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003594:	f7ff ffda 	bl	800354c <HAL_RCC_GetHCLKFreq>
 8003598:	4602      	mov	r2, r0
 800359a:	4b06      	ldr	r3, [pc, #24]	; (80035b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	0adb      	lsrs	r3, r3, #11
 80035a0:	f003 0307 	and.w	r3, r3, #7
 80035a4:	4904      	ldr	r1, [pc, #16]	; (80035b8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80035a6:	5ccb      	ldrb	r3, [r1, r3]
 80035a8:	f003 031f 	and.w	r3, r3, #31
 80035ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	bd80      	pop	{r7, pc}
 80035b4:	40021000 	.word	0x40021000
 80035b8:	0800b6c0 	.word	0x0800b6c0

080035bc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b086      	sub	sp, #24
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80035c4:	2300      	movs	r3, #0
 80035c6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80035c8:	4b2a      	ldr	r3, [pc, #168]	; (8003674 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d003      	beq.n	80035dc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80035d4:	f7ff f990 	bl	80028f8 <HAL_PWREx_GetVoltageRange>
 80035d8:	6178      	str	r0, [r7, #20]
 80035da:	e014      	b.n	8003606 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80035dc:	4b25      	ldr	r3, [pc, #148]	; (8003674 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035e0:	4a24      	ldr	r2, [pc, #144]	; (8003674 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035e6:	6593      	str	r3, [r2, #88]	; 0x58
 80035e8:	4b22      	ldr	r3, [pc, #136]	; (8003674 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035f0:	60fb      	str	r3, [r7, #12]
 80035f2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80035f4:	f7ff f980 	bl	80028f8 <HAL_PWREx_GetVoltageRange>
 80035f8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80035fa:	4b1e      	ldr	r3, [pc, #120]	; (8003674 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035fe:	4a1d      	ldr	r2, [pc, #116]	; (8003674 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003600:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003604:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800360c:	d10b      	bne.n	8003626 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2b80      	cmp	r3, #128	; 0x80
 8003612:	d919      	bls.n	8003648 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2ba0      	cmp	r3, #160	; 0xa0
 8003618:	d902      	bls.n	8003620 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800361a:	2302      	movs	r3, #2
 800361c:	613b      	str	r3, [r7, #16]
 800361e:	e013      	b.n	8003648 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003620:	2301      	movs	r3, #1
 8003622:	613b      	str	r3, [r7, #16]
 8003624:	e010      	b.n	8003648 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2b80      	cmp	r3, #128	; 0x80
 800362a:	d902      	bls.n	8003632 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800362c:	2303      	movs	r3, #3
 800362e:	613b      	str	r3, [r7, #16]
 8003630:	e00a      	b.n	8003648 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2b80      	cmp	r3, #128	; 0x80
 8003636:	d102      	bne.n	800363e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003638:	2302      	movs	r3, #2
 800363a:	613b      	str	r3, [r7, #16]
 800363c:	e004      	b.n	8003648 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2b70      	cmp	r3, #112	; 0x70
 8003642:	d101      	bne.n	8003648 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003644:	2301      	movs	r3, #1
 8003646:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003648:	4b0b      	ldr	r3, [pc, #44]	; (8003678 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f023 0207 	bic.w	r2, r3, #7
 8003650:	4909      	ldr	r1, [pc, #36]	; (8003678 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	4313      	orrs	r3, r2
 8003656:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003658:	4b07      	ldr	r3, [pc, #28]	; (8003678 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 0307 	and.w	r3, r3, #7
 8003660:	693a      	ldr	r2, [r7, #16]
 8003662:	429a      	cmp	r2, r3
 8003664:	d001      	beq.n	800366a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	e000      	b.n	800366c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800366a:	2300      	movs	r3, #0
}
 800366c:	4618      	mov	r0, r3
 800366e:	3718      	adds	r7, #24
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}
 8003674:	40021000 	.word	0x40021000
 8003678:	40022000 	.word	0x40022000

0800367c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b086      	sub	sp, #24
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003684:	2300      	movs	r3, #0
 8003686:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003688:	2300      	movs	r3, #0
 800368a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003694:	2b00      	cmp	r3, #0
 8003696:	d041      	beq.n	800371c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800369c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80036a0:	d02a      	beq.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80036a2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80036a6:	d824      	bhi.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80036a8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80036ac:	d008      	beq.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80036ae:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80036b2:	d81e      	bhi.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d00a      	beq.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x52>
 80036b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036bc:	d010      	beq.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80036be:	e018      	b.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80036c0:	4b86      	ldr	r3, [pc, #536]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	4a85      	ldr	r2, [pc, #532]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036ca:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80036cc:	e015      	b.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	3304      	adds	r3, #4
 80036d2:	2100      	movs	r1, #0
 80036d4:	4618      	mov	r0, r3
 80036d6:	f000 fadd 	bl	8003c94 <RCCEx_PLLSAI1_Config>
 80036da:	4603      	mov	r3, r0
 80036dc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80036de:	e00c      	b.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	3320      	adds	r3, #32
 80036e4:	2100      	movs	r1, #0
 80036e6:	4618      	mov	r0, r3
 80036e8:	f000 fbc6 	bl	8003e78 <RCCEx_PLLSAI2_Config>
 80036ec:	4603      	mov	r3, r0
 80036ee:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80036f0:	e003      	b.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	74fb      	strb	r3, [r7, #19]
      break;
 80036f6:	e000      	b.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80036f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036fa:	7cfb      	ldrb	r3, [r7, #19]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d10b      	bne.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003700:	4b76      	ldr	r3, [pc, #472]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003702:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003706:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800370e:	4973      	ldr	r1, [pc, #460]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003710:	4313      	orrs	r3, r2
 8003712:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003716:	e001      	b.n	800371c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003718:	7cfb      	ldrb	r3, [r7, #19]
 800371a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003724:	2b00      	cmp	r3, #0
 8003726:	d041      	beq.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800372c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003730:	d02a      	beq.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003732:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003736:	d824      	bhi.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003738:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800373c:	d008      	beq.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800373e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003742:	d81e      	bhi.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003744:	2b00      	cmp	r3, #0
 8003746:	d00a      	beq.n	800375e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003748:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800374c:	d010      	beq.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800374e:	e018      	b.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003750:	4b62      	ldr	r3, [pc, #392]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003752:	68db      	ldr	r3, [r3, #12]
 8003754:	4a61      	ldr	r2, [pc, #388]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003756:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800375a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800375c:	e015      	b.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	3304      	adds	r3, #4
 8003762:	2100      	movs	r1, #0
 8003764:	4618      	mov	r0, r3
 8003766:	f000 fa95 	bl	8003c94 <RCCEx_PLLSAI1_Config>
 800376a:	4603      	mov	r3, r0
 800376c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800376e:	e00c      	b.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	3320      	adds	r3, #32
 8003774:	2100      	movs	r1, #0
 8003776:	4618      	mov	r0, r3
 8003778:	f000 fb7e 	bl	8003e78 <RCCEx_PLLSAI2_Config>
 800377c:	4603      	mov	r3, r0
 800377e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003780:	e003      	b.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	74fb      	strb	r3, [r7, #19]
      break;
 8003786:	e000      	b.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003788:	bf00      	nop
    }

    if(ret == HAL_OK)
 800378a:	7cfb      	ldrb	r3, [r7, #19]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d10b      	bne.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003790:	4b52      	ldr	r3, [pc, #328]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003792:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003796:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800379e:	494f      	ldr	r1, [pc, #316]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037a0:	4313      	orrs	r3, r2
 80037a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80037a6:	e001      	b.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037a8:	7cfb      	ldrb	r3, [r7, #19]
 80037aa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	f000 80a0 	beq.w	80038fa <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037ba:	2300      	movs	r3, #0
 80037bc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80037be:	4b47      	ldr	r3, [pc, #284]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d101      	bne.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x152>
 80037ca:	2301      	movs	r3, #1
 80037cc:	e000      	b.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80037ce:	2300      	movs	r3, #0
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d00d      	beq.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037d4:	4b41      	ldr	r3, [pc, #260]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037d8:	4a40      	ldr	r2, [pc, #256]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037de:	6593      	str	r3, [r2, #88]	; 0x58
 80037e0:	4b3e      	ldr	r3, [pc, #248]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037e8:	60bb      	str	r3, [r7, #8]
 80037ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037ec:	2301      	movs	r3, #1
 80037ee:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80037f0:	4b3b      	ldr	r3, [pc, #236]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a3a      	ldr	r2, [pc, #232]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80037f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037fa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80037fc:	f7fd fbd8 	bl	8000fb0 <HAL_GetTick>
 8003800:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003802:	e009      	b.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003804:	f7fd fbd4 	bl	8000fb0 <HAL_GetTick>
 8003808:	4602      	mov	r2, r0
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	1ad3      	subs	r3, r2, r3
 800380e:	2b02      	cmp	r3, #2
 8003810:	d902      	bls.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003812:	2303      	movs	r3, #3
 8003814:	74fb      	strb	r3, [r7, #19]
        break;
 8003816:	e005      	b.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003818:	4b31      	ldr	r3, [pc, #196]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003820:	2b00      	cmp	r3, #0
 8003822:	d0ef      	beq.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003824:	7cfb      	ldrb	r3, [r7, #19]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d15c      	bne.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800382a:	4b2c      	ldr	r3, [pc, #176]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800382c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003830:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003834:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d01f      	beq.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x200>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003842:	697a      	ldr	r2, [r7, #20]
 8003844:	429a      	cmp	r2, r3
 8003846:	d019      	beq.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003848:	4b24      	ldr	r3, [pc, #144]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800384a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800384e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003852:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003854:	4b21      	ldr	r3, [pc, #132]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003856:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800385a:	4a20      	ldr	r2, [pc, #128]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800385c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003860:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003864:	4b1d      	ldr	r3, [pc, #116]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003866:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800386a:	4a1c      	ldr	r2, [pc, #112]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800386c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003870:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003874:	4a19      	ldr	r2, [pc, #100]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	f003 0301 	and.w	r3, r3, #1
 8003882:	2b00      	cmp	r3, #0
 8003884:	d016      	beq.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003886:	f7fd fb93 	bl	8000fb0 <HAL_GetTick>
 800388a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800388c:	e00b      	b.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800388e:	f7fd fb8f 	bl	8000fb0 <HAL_GetTick>
 8003892:	4602      	mov	r2, r0
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	1ad3      	subs	r3, r2, r3
 8003898:	f241 3288 	movw	r2, #5000	; 0x1388
 800389c:	4293      	cmp	r3, r2
 800389e:	d902      	bls.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80038a0:	2303      	movs	r3, #3
 80038a2:	74fb      	strb	r3, [r7, #19]
            break;
 80038a4:	e006      	b.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038a6:	4b0d      	ldr	r3, [pc, #52]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038ac:	f003 0302 	and.w	r3, r3, #2
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d0ec      	beq.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80038b4:	7cfb      	ldrb	r3, [r7, #19]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d10c      	bne.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80038ba:	4b08      	ldr	r3, [pc, #32]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038ca:	4904      	ldr	r1, [pc, #16]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038cc:	4313      	orrs	r3, r2
 80038ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80038d2:	e009      	b.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80038d4:	7cfb      	ldrb	r3, [r7, #19]
 80038d6:	74bb      	strb	r3, [r7, #18]
 80038d8:	e006      	b.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80038da:	bf00      	nop
 80038dc:	40021000 	.word	0x40021000
 80038e0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038e4:	7cfb      	ldrb	r3, [r7, #19]
 80038e6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80038e8:	7c7b      	ldrb	r3, [r7, #17]
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d105      	bne.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038ee:	4ba6      	ldr	r3, [pc, #664]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80038f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038f2:	4aa5      	ldr	r2, [pc, #660]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80038f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038f8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f003 0301 	and.w	r3, r3, #1
 8003902:	2b00      	cmp	r3, #0
 8003904:	d00a      	beq.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003906:	4ba0      	ldr	r3, [pc, #640]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003908:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800390c:	f023 0203 	bic.w	r2, r3, #3
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003914:	499c      	ldr	r1, [pc, #624]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003916:	4313      	orrs	r3, r2
 8003918:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 0302 	and.w	r3, r3, #2
 8003924:	2b00      	cmp	r3, #0
 8003926:	d00a      	beq.n	800393e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003928:	4b97      	ldr	r3, [pc, #604]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800392a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800392e:	f023 020c 	bic.w	r2, r3, #12
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003936:	4994      	ldr	r1, [pc, #592]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003938:	4313      	orrs	r3, r2
 800393a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 0304 	and.w	r3, r3, #4
 8003946:	2b00      	cmp	r3, #0
 8003948:	d00a      	beq.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800394a:	4b8f      	ldr	r3, [pc, #572]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800394c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003950:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003958:	498b      	ldr	r1, [pc, #556]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800395a:	4313      	orrs	r3, r2
 800395c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f003 0308 	and.w	r3, r3, #8
 8003968:	2b00      	cmp	r3, #0
 800396a:	d00a      	beq.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800396c:	4b86      	ldr	r3, [pc, #536]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800396e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003972:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800397a:	4983      	ldr	r1, [pc, #524]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800397c:	4313      	orrs	r3, r2
 800397e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 0310 	and.w	r3, r3, #16
 800398a:	2b00      	cmp	r3, #0
 800398c:	d00a      	beq.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800398e:	4b7e      	ldr	r3, [pc, #504]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003990:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003994:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800399c:	497a      	ldr	r1, [pc, #488]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800399e:	4313      	orrs	r3, r2
 80039a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 0320 	and.w	r3, r3, #32
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d00a      	beq.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80039b0:	4b75      	ldr	r3, [pc, #468]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80039b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039b6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039be:	4972      	ldr	r1, [pc, #456]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80039c0:	4313      	orrs	r3, r2
 80039c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d00a      	beq.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80039d2:	4b6d      	ldr	r3, [pc, #436]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80039d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039d8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039e0:	4969      	ldr	r1, [pc, #420]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80039e2:	4313      	orrs	r3, r2
 80039e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d00a      	beq.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80039f4:	4b64      	ldr	r3, [pc, #400]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80039f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039fa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a02:	4961      	ldr	r1, [pc, #388]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003a04:	4313      	orrs	r3, r2
 8003a06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d00a      	beq.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a16:	4b5c      	ldr	r3, [pc, #368]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003a18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a1c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a24:	4958      	ldr	r1, [pc, #352]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003a26:	4313      	orrs	r3, r2
 8003a28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d00a      	beq.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003a38:	4b53      	ldr	r3, [pc, #332]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a3e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a46:	4950      	ldr	r1, [pc, #320]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d00a      	beq.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003a5a:	4b4b      	ldr	r3, [pc, #300]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003a5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a60:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a68:	4947      	ldr	r1, [pc, #284]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d00a      	beq.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003a7c:	4b42      	ldr	r3, [pc, #264]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003a7e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003a82:	f023 0203 	bic.w	r2, r3, #3
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a8a:	493f      	ldr	r1, [pc, #252]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d028      	beq.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003a9e:	4b3a      	ldr	r3, [pc, #232]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003aa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aa4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aac:	4936      	ldr	r1, [pc, #216]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ab8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003abc:	d106      	bne.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003abe:	4b32      	ldr	r3, [pc, #200]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003ac0:	68db      	ldr	r3, [r3, #12]
 8003ac2:	4a31      	ldr	r2, [pc, #196]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003ac4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ac8:	60d3      	str	r3, [r2, #12]
 8003aca:	e011      	b.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ad0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003ad4:	d10c      	bne.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	3304      	adds	r3, #4
 8003ada:	2101      	movs	r1, #1
 8003adc:	4618      	mov	r0, r3
 8003ade:	f000 f8d9 	bl	8003c94 <RCCEx_PLLSAI1_Config>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003ae6:	7cfb      	ldrb	r3, [r7, #19]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d001      	beq.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 8003aec:	7cfb      	ldrb	r3, [r7, #19]
 8003aee:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d028      	beq.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003afc:	4b22      	ldr	r3, [pc, #136]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003afe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b02:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b0a:	491f      	ldr	r1, [pc, #124]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b16:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b1a:	d106      	bne.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b1c:	4b1a      	ldr	r3, [pc, #104]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003b1e:	68db      	ldr	r3, [r3, #12]
 8003b20:	4a19      	ldr	r2, [pc, #100]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003b22:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b26:	60d3      	str	r3, [r2, #12]
 8003b28:	e011      	b.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b2e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003b32:	d10c      	bne.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	3304      	adds	r3, #4
 8003b38:	2101      	movs	r1, #1
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f000 f8aa 	bl	8003c94 <RCCEx_PLLSAI1_Config>
 8003b40:	4603      	mov	r3, r0
 8003b42:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b44:	7cfb      	ldrb	r3, [r7, #19]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d001      	beq.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 8003b4a:	7cfb      	ldrb	r3, [r7, #19]
 8003b4c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d02a      	beq.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003b5a:	4b0b      	ldr	r3, [pc, #44]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003b5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b60:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b68:	4907      	ldr	r1, [pc, #28]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b74:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b78:	d108      	bne.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b7a:	4b03      	ldr	r3, [pc, #12]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003b7c:	68db      	ldr	r3, [r3, #12]
 8003b7e:	4a02      	ldr	r2, [pc, #8]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003b80:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b84:	60d3      	str	r3, [r2, #12]
 8003b86:	e013      	b.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x534>
 8003b88:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b90:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003b94:	d10c      	bne.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	3304      	adds	r3, #4
 8003b9a:	2101      	movs	r1, #1
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f000 f879 	bl	8003c94 <RCCEx_PLLSAI1_Config>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ba6:	7cfb      	ldrb	r3, [r7, #19]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d001      	beq.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8003bac:	7cfb      	ldrb	r3, [r7, #19]
 8003bae:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d02f      	beq.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003bbc:	4b2c      	ldr	r3, [pc, #176]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bc2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003bca:	4929      	ldr	r1, [pc, #164]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003bd6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003bda:	d10d      	bne.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	3304      	adds	r3, #4
 8003be0:	2102      	movs	r1, #2
 8003be2:	4618      	mov	r0, r3
 8003be4:	f000 f856 	bl	8003c94 <RCCEx_PLLSAI1_Config>
 8003be8:	4603      	mov	r3, r0
 8003bea:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003bec:	7cfb      	ldrb	r3, [r7, #19]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d014      	beq.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8003bf2:	7cfb      	ldrb	r3, [r7, #19]
 8003bf4:	74bb      	strb	r3, [r7, #18]
 8003bf6:	e011      	b.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003bfc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c00:	d10c      	bne.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	3320      	adds	r3, #32
 8003c06:	2102      	movs	r1, #2
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f000 f935 	bl	8003e78 <RCCEx_PLLSAI2_Config>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c12:	7cfb      	ldrb	r3, [r7, #19]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d001      	beq.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8003c18:	7cfb      	ldrb	r3, [r7, #19]
 8003c1a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d00b      	beq.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003c28:	4b11      	ldr	r3, [pc, #68]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c2e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c38:	490d      	ldr	r1, [pc, #52]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d00b      	beq.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003c4c:	4b08      	ldr	r3, [pc, #32]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003c4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c52:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c5c:	4904      	ldr	r1, [pc, #16]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003c64:	7cbb      	ldrb	r3, [r7, #18]
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	3718      	adds	r7, #24
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}
 8003c6e:	bf00      	nop
 8003c70:	40021000 	.word	0x40021000

08003c74 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003c74:	b480      	push	{r7}
 8003c76:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003c78:	4b05      	ldr	r3, [pc, #20]	; (8003c90 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a04      	ldr	r2, [pc, #16]	; (8003c90 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003c7e:	f043 0304 	orr.w	r3, r3, #4
 8003c82:	6013      	str	r3, [r2, #0]
}
 8003c84:	bf00      	nop
 8003c86:	46bd      	mov	sp, r7
 8003c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8c:	4770      	bx	lr
 8003c8e:	bf00      	nop
 8003c90:	40021000 	.word	0x40021000

08003c94 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b084      	sub	sp, #16
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003ca2:	4b74      	ldr	r3, [pc, #464]	; (8003e74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ca4:	68db      	ldr	r3, [r3, #12]
 8003ca6:	f003 0303 	and.w	r3, r3, #3
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d018      	beq.n	8003ce0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003cae:	4b71      	ldr	r3, [pc, #452]	; (8003e74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003cb0:	68db      	ldr	r3, [r3, #12]
 8003cb2:	f003 0203 	and.w	r2, r3, #3
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	429a      	cmp	r2, r3
 8003cbc:	d10d      	bne.n	8003cda <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
       ||
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d009      	beq.n	8003cda <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003cc6:	4b6b      	ldr	r3, [pc, #428]	; (8003e74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003cc8:	68db      	ldr	r3, [r3, #12]
 8003cca:	091b      	lsrs	r3, r3, #4
 8003ccc:	f003 0307 	and.w	r3, r3, #7
 8003cd0:	1c5a      	adds	r2, r3, #1
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	685b      	ldr	r3, [r3, #4]
       ||
 8003cd6:	429a      	cmp	r2, r3
 8003cd8:	d047      	beq.n	8003d6a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	73fb      	strb	r3, [r7, #15]
 8003cde:	e044      	b.n	8003d6a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	2b03      	cmp	r3, #3
 8003ce6:	d018      	beq.n	8003d1a <RCCEx_PLLSAI1_Config+0x86>
 8003ce8:	2b03      	cmp	r3, #3
 8003cea:	d825      	bhi.n	8003d38 <RCCEx_PLLSAI1_Config+0xa4>
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d002      	beq.n	8003cf6 <RCCEx_PLLSAI1_Config+0x62>
 8003cf0:	2b02      	cmp	r3, #2
 8003cf2:	d009      	beq.n	8003d08 <RCCEx_PLLSAI1_Config+0x74>
 8003cf4:	e020      	b.n	8003d38 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003cf6:	4b5f      	ldr	r3, [pc, #380]	; (8003e74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f003 0302 	and.w	r3, r3, #2
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d11d      	bne.n	8003d3e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d06:	e01a      	b.n	8003d3e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003d08:	4b5a      	ldr	r3, [pc, #360]	; (8003e74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d116      	bne.n	8003d42 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003d14:	2301      	movs	r3, #1
 8003d16:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d18:	e013      	b.n	8003d42 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003d1a:	4b56      	ldr	r3, [pc, #344]	; (8003e74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d10f      	bne.n	8003d46 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003d26:	4b53      	ldr	r3, [pc, #332]	; (8003e74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d109      	bne.n	8003d46 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003d36:	e006      	b.n	8003d46 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	73fb      	strb	r3, [r7, #15]
      break;
 8003d3c:	e004      	b.n	8003d48 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003d3e:	bf00      	nop
 8003d40:	e002      	b.n	8003d48 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003d42:	bf00      	nop
 8003d44:	e000      	b.n	8003d48 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003d46:	bf00      	nop
    }

    if(status == HAL_OK)
 8003d48:	7bfb      	ldrb	r3, [r7, #15]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d10d      	bne.n	8003d6a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003d4e:	4b49      	ldr	r3, [pc, #292]	; (8003e74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d50:	68db      	ldr	r3, [r3, #12]
 8003d52:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6819      	ldr	r1, [r3, #0]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	3b01      	subs	r3, #1
 8003d60:	011b      	lsls	r3, r3, #4
 8003d62:	430b      	orrs	r3, r1
 8003d64:	4943      	ldr	r1, [pc, #268]	; (8003e74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d66:	4313      	orrs	r3, r2
 8003d68:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003d6a:	7bfb      	ldrb	r3, [r7, #15]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d17c      	bne.n	8003e6a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003d70:	4b40      	ldr	r3, [pc, #256]	; (8003e74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a3f      	ldr	r2, [pc, #252]	; (8003e74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d76:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003d7a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d7c:	f7fd f918 	bl	8000fb0 <HAL_GetTick>
 8003d80:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003d82:	e009      	b.n	8003d98 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003d84:	f7fd f914 	bl	8000fb0 <HAL_GetTick>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	1ad3      	subs	r3, r2, r3
 8003d8e:	2b02      	cmp	r3, #2
 8003d90:	d902      	bls.n	8003d98 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003d92:	2303      	movs	r3, #3
 8003d94:	73fb      	strb	r3, [r7, #15]
        break;
 8003d96:	e005      	b.n	8003da4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003d98:	4b36      	ldr	r3, [pc, #216]	; (8003e74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d1ef      	bne.n	8003d84 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003da4:	7bfb      	ldrb	r3, [r7, #15]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d15f      	bne.n	8003e6a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d110      	bne.n	8003dd2 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003db0:	4b30      	ldr	r3, [pc, #192]	; (8003e74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003db2:	691b      	ldr	r3, [r3, #16]
 8003db4:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003db8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003dbc:	687a      	ldr	r2, [r7, #4]
 8003dbe:	6892      	ldr	r2, [r2, #8]
 8003dc0:	0211      	lsls	r1, r2, #8
 8003dc2:	687a      	ldr	r2, [r7, #4]
 8003dc4:	68d2      	ldr	r2, [r2, #12]
 8003dc6:	06d2      	lsls	r2, r2, #27
 8003dc8:	430a      	orrs	r2, r1
 8003dca:	492a      	ldr	r1, [pc, #168]	; (8003e74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	610b      	str	r3, [r1, #16]
 8003dd0:	e027      	b.n	8003e22 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d112      	bne.n	8003dfe <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003dd8:	4b26      	ldr	r3, [pc, #152]	; (8003e74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003dda:	691b      	ldr	r3, [r3, #16]
 8003ddc:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003de0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003de4:	687a      	ldr	r2, [r7, #4]
 8003de6:	6892      	ldr	r2, [r2, #8]
 8003de8:	0211      	lsls	r1, r2, #8
 8003dea:	687a      	ldr	r2, [r7, #4]
 8003dec:	6912      	ldr	r2, [r2, #16]
 8003dee:	0852      	lsrs	r2, r2, #1
 8003df0:	3a01      	subs	r2, #1
 8003df2:	0552      	lsls	r2, r2, #21
 8003df4:	430a      	orrs	r2, r1
 8003df6:	491f      	ldr	r1, [pc, #124]	; (8003e74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	610b      	str	r3, [r1, #16]
 8003dfc:	e011      	b.n	8003e22 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003dfe:	4b1d      	ldr	r3, [pc, #116]	; (8003e74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e00:	691b      	ldr	r3, [r3, #16]
 8003e02:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003e06:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003e0a:	687a      	ldr	r2, [r7, #4]
 8003e0c:	6892      	ldr	r2, [r2, #8]
 8003e0e:	0211      	lsls	r1, r2, #8
 8003e10:	687a      	ldr	r2, [r7, #4]
 8003e12:	6952      	ldr	r2, [r2, #20]
 8003e14:	0852      	lsrs	r2, r2, #1
 8003e16:	3a01      	subs	r2, #1
 8003e18:	0652      	lsls	r2, r2, #25
 8003e1a:	430a      	orrs	r2, r1
 8003e1c:	4915      	ldr	r1, [pc, #84]	; (8003e74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003e22:	4b14      	ldr	r3, [pc, #80]	; (8003e74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a13      	ldr	r2, [pc, #76]	; (8003e74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e28:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003e2c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e2e:	f7fd f8bf 	bl	8000fb0 <HAL_GetTick>
 8003e32:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003e34:	e009      	b.n	8003e4a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003e36:	f7fd f8bb 	bl	8000fb0 <HAL_GetTick>
 8003e3a:	4602      	mov	r2, r0
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	1ad3      	subs	r3, r2, r3
 8003e40:	2b02      	cmp	r3, #2
 8003e42:	d902      	bls.n	8003e4a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003e44:	2303      	movs	r3, #3
 8003e46:	73fb      	strb	r3, [r7, #15]
          break;
 8003e48:	e005      	b.n	8003e56 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003e4a:	4b0a      	ldr	r3, [pc, #40]	; (8003e74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d0ef      	beq.n	8003e36 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003e56:	7bfb      	ldrb	r3, [r7, #15]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d106      	bne.n	8003e6a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003e5c:	4b05      	ldr	r3, [pc, #20]	; (8003e74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e5e:	691a      	ldr	r2, [r3, #16]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	699b      	ldr	r3, [r3, #24]
 8003e64:	4903      	ldr	r1, [pc, #12]	; (8003e74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e66:	4313      	orrs	r3, r2
 8003e68:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003e6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3710      	adds	r7, #16
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}
 8003e74:	40021000 	.word	0x40021000

08003e78 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b084      	sub	sp, #16
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
 8003e80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003e82:	2300      	movs	r3, #0
 8003e84:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003e86:	4b69      	ldr	r3, [pc, #420]	; (800402c <RCCEx_PLLSAI2_Config+0x1b4>)
 8003e88:	68db      	ldr	r3, [r3, #12]
 8003e8a:	f003 0303 	and.w	r3, r3, #3
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d018      	beq.n	8003ec4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003e92:	4b66      	ldr	r3, [pc, #408]	; (800402c <RCCEx_PLLSAI2_Config+0x1b4>)
 8003e94:	68db      	ldr	r3, [r3, #12]
 8003e96:	f003 0203 	and.w	r2, r3, #3
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	429a      	cmp	r2, r3
 8003ea0:	d10d      	bne.n	8003ebe <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
       ||
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d009      	beq.n	8003ebe <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003eaa:	4b60      	ldr	r3, [pc, #384]	; (800402c <RCCEx_PLLSAI2_Config+0x1b4>)
 8003eac:	68db      	ldr	r3, [r3, #12]
 8003eae:	091b      	lsrs	r3, r3, #4
 8003eb0:	f003 0307 	and.w	r3, r3, #7
 8003eb4:	1c5a      	adds	r2, r3, #1
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	685b      	ldr	r3, [r3, #4]
       ||
 8003eba:	429a      	cmp	r2, r3
 8003ebc:	d047      	beq.n	8003f4e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	73fb      	strb	r3, [r7, #15]
 8003ec2:	e044      	b.n	8003f4e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	2b03      	cmp	r3, #3
 8003eca:	d018      	beq.n	8003efe <RCCEx_PLLSAI2_Config+0x86>
 8003ecc:	2b03      	cmp	r3, #3
 8003ece:	d825      	bhi.n	8003f1c <RCCEx_PLLSAI2_Config+0xa4>
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d002      	beq.n	8003eda <RCCEx_PLLSAI2_Config+0x62>
 8003ed4:	2b02      	cmp	r3, #2
 8003ed6:	d009      	beq.n	8003eec <RCCEx_PLLSAI2_Config+0x74>
 8003ed8:	e020      	b.n	8003f1c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003eda:	4b54      	ldr	r3, [pc, #336]	; (800402c <RCCEx_PLLSAI2_Config+0x1b4>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 0302 	and.w	r3, r3, #2
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d11d      	bne.n	8003f22 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003eea:	e01a      	b.n	8003f22 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003eec:	4b4f      	ldr	r3, [pc, #316]	; (800402c <RCCEx_PLLSAI2_Config+0x1b4>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d116      	bne.n	8003f26 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003efc:	e013      	b.n	8003f26 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003efe:	4b4b      	ldr	r3, [pc, #300]	; (800402c <RCCEx_PLLSAI2_Config+0x1b4>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d10f      	bne.n	8003f2a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003f0a:	4b48      	ldr	r3, [pc, #288]	; (800402c <RCCEx_PLLSAI2_Config+0x1b4>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d109      	bne.n	8003f2a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003f1a:	e006      	b.n	8003f2a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	73fb      	strb	r3, [r7, #15]
      break;
 8003f20:	e004      	b.n	8003f2c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003f22:	bf00      	nop
 8003f24:	e002      	b.n	8003f2c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003f26:	bf00      	nop
 8003f28:	e000      	b.n	8003f2c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003f2a:	bf00      	nop
    }

    if(status == HAL_OK)
 8003f2c:	7bfb      	ldrb	r3, [r7, #15]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d10d      	bne.n	8003f4e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003f32:	4b3e      	ldr	r3, [pc, #248]	; (800402c <RCCEx_PLLSAI2_Config+0x1b4>)
 8003f34:	68db      	ldr	r3, [r3, #12]
 8003f36:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6819      	ldr	r1, [r3, #0]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	3b01      	subs	r3, #1
 8003f44:	011b      	lsls	r3, r3, #4
 8003f46:	430b      	orrs	r3, r1
 8003f48:	4938      	ldr	r1, [pc, #224]	; (800402c <RCCEx_PLLSAI2_Config+0x1b4>)
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003f4e:	7bfb      	ldrb	r3, [r7, #15]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d166      	bne.n	8004022 <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003f54:	4b35      	ldr	r3, [pc, #212]	; (800402c <RCCEx_PLLSAI2_Config+0x1b4>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a34      	ldr	r2, [pc, #208]	; (800402c <RCCEx_PLLSAI2_Config+0x1b4>)
 8003f5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f5e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f60:	f7fd f826 	bl	8000fb0 <HAL_GetTick>
 8003f64:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003f66:	e009      	b.n	8003f7c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003f68:	f7fd f822 	bl	8000fb0 <HAL_GetTick>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	1ad3      	subs	r3, r2, r3
 8003f72:	2b02      	cmp	r3, #2
 8003f74:	d902      	bls.n	8003f7c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003f76:	2303      	movs	r3, #3
 8003f78:	73fb      	strb	r3, [r7, #15]
        break;
 8003f7a:	e005      	b.n	8003f88 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003f7c:	4b2b      	ldr	r3, [pc, #172]	; (800402c <RCCEx_PLLSAI2_Config+0x1b4>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d1ef      	bne.n	8003f68 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003f88:	7bfb      	ldrb	r3, [r7, #15]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d149      	bne.n	8004022 <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d110      	bne.n	8003fb6 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003f94:	4b25      	ldr	r3, [pc, #148]	; (800402c <RCCEx_PLLSAI2_Config+0x1b4>)
 8003f96:	695b      	ldr	r3, [r3, #20]
 8003f98:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003f9c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003fa0:	687a      	ldr	r2, [r7, #4]
 8003fa2:	6892      	ldr	r2, [r2, #8]
 8003fa4:	0211      	lsls	r1, r2, #8
 8003fa6:	687a      	ldr	r2, [r7, #4]
 8003fa8:	68d2      	ldr	r2, [r2, #12]
 8003faa:	06d2      	lsls	r2, r2, #27
 8003fac:	430a      	orrs	r2, r1
 8003fae:	491f      	ldr	r1, [pc, #124]	; (800402c <RCCEx_PLLSAI2_Config+0x1b4>)
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	614b      	str	r3, [r1, #20]
 8003fb4:	e011      	b.n	8003fda <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003fb6:	4b1d      	ldr	r3, [pc, #116]	; (800402c <RCCEx_PLLSAI2_Config+0x1b4>)
 8003fb8:	695b      	ldr	r3, [r3, #20]
 8003fba:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003fbe:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003fc2:	687a      	ldr	r2, [r7, #4]
 8003fc4:	6892      	ldr	r2, [r2, #8]
 8003fc6:	0211      	lsls	r1, r2, #8
 8003fc8:	687a      	ldr	r2, [r7, #4]
 8003fca:	6912      	ldr	r2, [r2, #16]
 8003fcc:	0852      	lsrs	r2, r2, #1
 8003fce:	3a01      	subs	r2, #1
 8003fd0:	0652      	lsls	r2, r2, #25
 8003fd2:	430a      	orrs	r2, r1
 8003fd4:	4915      	ldr	r1, [pc, #84]	; (800402c <RCCEx_PLLSAI2_Config+0x1b4>)
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003fda:	4b14      	ldr	r3, [pc, #80]	; (800402c <RCCEx_PLLSAI2_Config+0x1b4>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a13      	ldr	r2, [pc, #76]	; (800402c <RCCEx_PLLSAI2_Config+0x1b4>)
 8003fe0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fe4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fe6:	f7fc ffe3 	bl	8000fb0 <HAL_GetTick>
 8003fea:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003fec:	e009      	b.n	8004002 <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003fee:	f7fc ffdf 	bl	8000fb0 <HAL_GetTick>
 8003ff2:	4602      	mov	r2, r0
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	1ad3      	subs	r3, r2, r3
 8003ff8:	2b02      	cmp	r3, #2
 8003ffa:	d902      	bls.n	8004002 <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8003ffc:	2303      	movs	r3, #3
 8003ffe:	73fb      	strb	r3, [r7, #15]
          break;
 8004000:	e005      	b.n	800400e <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004002:	4b0a      	ldr	r3, [pc, #40]	; (800402c <RCCEx_PLLSAI2_Config+0x1b4>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800400a:	2b00      	cmp	r3, #0
 800400c:	d0ef      	beq.n	8003fee <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 800400e:	7bfb      	ldrb	r3, [r7, #15]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d106      	bne.n	8004022 <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004014:	4b05      	ldr	r3, [pc, #20]	; (800402c <RCCEx_PLLSAI2_Config+0x1b4>)
 8004016:	695a      	ldr	r2, [r3, #20]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	695b      	ldr	r3, [r3, #20]
 800401c:	4903      	ldr	r1, [pc, #12]	; (800402c <RCCEx_PLLSAI2_Config+0x1b4>)
 800401e:	4313      	orrs	r3, r2
 8004020:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004022:	7bfb      	ldrb	r3, [r7, #15]
}
 8004024:	4618      	mov	r0, r3
 8004026:	3710      	adds	r7, #16
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}
 800402c:	40021000 	.word	0x40021000

08004030 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b082      	sub	sp, #8
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d101      	bne.n	8004042 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	e049      	b.n	80040d6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004048:	b2db      	uxtb	r3, r3
 800404a:	2b00      	cmp	r3, #0
 800404c:	d106      	bne.n	800405c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2200      	movs	r2, #0
 8004052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	f7fc feba 	bl	8000dd0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2202      	movs	r2, #2
 8004060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	3304      	adds	r3, #4
 800406c:	4619      	mov	r1, r3
 800406e:	4610      	mov	r0, r2
 8004070:	f000 f8fe 	bl	8004270 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2201      	movs	r2, #1
 8004078:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2201      	movs	r2, #1
 8004080:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2201      	movs	r2, #1
 8004088:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2201      	movs	r2, #1
 8004090:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2201      	movs	r2, #1
 8004098:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2201      	movs	r2, #1
 80040a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2201      	movs	r2, #1
 80040a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2201      	movs	r2, #1
 80040b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2201      	movs	r2, #1
 80040b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2201      	movs	r2, #1
 80040c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2201      	movs	r2, #1
 80040c8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2201      	movs	r2, #1
 80040d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040d4:	2300      	movs	r3, #0
}
 80040d6:	4618      	mov	r0, r3
 80040d8:	3708      	adds	r7, #8
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}

080040de <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80040de:	b580      	push	{r7, lr}
 80040e0:	b084      	sub	sp, #16
 80040e2:	af00      	add	r7, sp, #0
 80040e4:	6078      	str	r0, [r7, #4]
 80040e6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80040e8:	2300      	movs	r3, #0
 80040ea:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040f2:	2b01      	cmp	r3, #1
 80040f4:	d101      	bne.n	80040fa <HAL_TIM_ConfigClockSource+0x1c>
 80040f6:	2302      	movs	r3, #2
 80040f8:	e0b6      	b.n	8004268 <HAL_TIM_ConfigClockSource+0x18a>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2201      	movs	r2, #1
 80040fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2202      	movs	r2, #2
 8004106:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004118:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800411c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004124:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	68ba      	ldr	r2, [r7, #8]
 800412c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004136:	d03e      	beq.n	80041b6 <HAL_TIM_ConfigClockSource+0xd8>
 8004138:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800413c:	f200 8087 	bhi.w	800424e <HAL_TIM_ConfigClockSource+0x170>
 8004140:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004144:	f000 8086 	beq.w	8004254 <HAL_TIM_ConfigClockSource+0x176>
 8004148:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800414c:	d87f      	bhi.n	800424e <HAL_TIM_ConfigClockSource+0x170>
 800414e:	2b70      	cmp	r3, #112	; 0x70
 8004150:	d01a      	beq.n	8004188 <HAL_TIM_ConfigClockSource+0xaa>
 8004152:	2b70      	cmp	r3, #112	; 0x70
 8004154:	d87b      	bhi.n	800424e <HAL_TIM_ConfigClockSource+0x170>
 8004156:	2b60      	cmp	r3, #96	; 0x60
 8004158:	d050      	beq.n	80041fc <HAL_TIM_ConfigClockSource+0x11e>
 800415a:	2b60      	cmp	r3, #96	; 0x60
 800415c:	d877      	bhi.n	800424e <HAL_TIM_ConfigClockSource+0x170>
 800415e:	2b50      	cmp	r3, #80	; 0x50
 8004160:	d03c      	beq.n	80041dc <HAL_TIM_ConfigClockSource+0xfe>
 8004162:	2b50      	cmp	r3, #80	; 0x50
 8004164:	d873      	bhi.n	800424e <HAL_TIM_ConfigClockSource+0x170>
 8004166:	2b40      	cmp	r3, #64	; 0x40
 8004168:	d058      	beq.n	800421c <HAL_TIM_ConfigClockSource+0x13e>
 800416a:	2b40      	cmp	r3, #64	; 0x40
 800416c:	d86f      	bhi.n	800424e <HAL_TIM_ConfigClockSource+0x170>
 800416e:	2b30      	cmp	r3, #48	; 0x30
 8004170:	d064      	beq.n	800423c <HAL_TIM_ConfigClockSource+0x15e>
 8004172:	2b30      	cmp	r3, #48	; 0x30
 8004174:	d86b      	bhi.n	800424e <HAL_TIM_ConfigClockSource+0x170>
 8004176:	2b20      	cmp	r3, #32
 8004178:	d060      	beq.n	800423c <HAL_TIM_ConfigClockSource+0x15e>
 800417a:	2b20      	cmp	r3, #32
 800417c:	d867      	bhi.n	800424e <HAL_TIM_ConfigClockSource+0x170>
 800417e:	2b00      	cmp	r3, #0
 8004180:	d05c      	beq.n	800423c <HAL_TIM_ConfigClockSource+0x15e>
 8004182:	2b10      	cmp	r3, #16
 8004184:	d05a      	beq.n	800423c <HAL_TIM_ConfigClockSource+0x15e>
 8004186:	e062      	b.n	800424e <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004198:	f000 f97e 	bl	8004498 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80041aa:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	68ba      	ldr	r2, [r7, #8]
 80041b2:	609a      	str	r2, [r3, #8]
      break;
 80041b4:	e04f      	b.n	8004256 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80041c6:	f000 f967 	bl	8004498 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	689a      	ldr	r2, [r3, #8]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80041d8:	609a      	str	r2, [r3, #8]
      break;
 80041da:	e03c      	b.n	8004256 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80041e8:	461a      	mov	r2, r3
 80041ea:	f000 f8db 	bl	80043a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	2150      	movs	r1, #80	; 0x50
 80041f4:	4618      	mov	r0, r3
 80041f6:	f000 f934 	bl	8004462 <TIM_ITRx_SetConfig>
      break;
 80041fa:	e02c      	b.n	8004256 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004208:	461a      	mov	r2, r3
 800420a:	f000 f8fa 	bl	8004402 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	2160      	movs	r1, #96	; 0x60
 8004214:	4618      	mov	r0, r3
 8004216:	f000 f924 	bl	8004462 <TIM_ITRx_SetConfig>
      break;
 800421a:	e01c      	b.n	8004256 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004228:	461a      	mov	r2, r3
 800422a:	f000 f8bb 	bl	80043a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	2140      	movs	r1, #64	; 0x40
 8004234:	4618      	mov	r0, r3
 8004236:	f000 f914 	bl	8004462 <TIM_ITRx_SetConfig>
      break;
 800423a:	e00c      	b.n	8004256 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4619      	mov	r1, r3
 8004246:	4610      	mov	r0, r2
 8004248:	f000 f90b 	bl	8004462 <TIM_ITRx_SetConfig>
      break;
 800424c:	e003      	b.n	8004256 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	73fb      	strb	r3, [r7, #15]
      break;
 8004252:	e000      	b.n	8004256 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004254:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2201      	movs	r2, #1
 800425a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2200      	movs	r2, #0
 8004262:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004266:	7bfb      	ldrb	r3, [r7, #15]
}
 8004268:	4618      	mov	r0, r3
 800426a:	3710      	adds	r7, #16
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}

08004270 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004270:	b480      	push	{r7}
 8004272:	b085      	sub	sp, #20
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
 8004278:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	4a40      	ldr	r2, [pc, #256]	; (8004384 <TIM_Base_SetConfig+0x114>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d013      	beq.n	80042b0 <TIM_Base_SetConfig+0x40>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800428e:	d00f      	beq.n	80042b0 <TIM_Base_SetConfig+0x40>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	4a3d      	ldr	r2, [pc, #244]	; (8004388 <TIM_Base_SetConfig+0x118>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d00b      	beq.n	80042b0 <TIM_Base_SetConfig+0x40>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	4a3c      	ldr	r2, [pc, #240]	; (800438c <TIM_Base_SetConfig+0x11c>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d007      	beq.n	80042b0 <TIM_Base_SetConfig+0x40>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	4a3b      	ldr	r2, [pc, #236]	; (8004390 <TIM_Base_SetConfig+0x120>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d003      	beq.n	80042b0 <TIM_Base_SetConfig+0x40>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	4a3a      	ldr	r2, [pc, #232]	; (8004394 <TIM_Base_SetConfig+0x124>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d108      	bne.n	80042c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	68fa      	ldr	r2, [r7, #12]
 80042be:	4313      	orrs	r3, r2
 80042c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	4a2f      	ldr	r2, [pc, #188]	; (8004384 <TIM_Base_SetConfig+0x114>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d01f      	beq.n	800430a <TIM_Base_SetConfig+0x9a>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042d0:	d01b      	beq.n	800430a <TIM_Base_SetConfig+0x9a>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	4a2c      	ldr	r2, [pc, #176]	; (8004388 <TIM_Base_SetConfig+0x118>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d017      	beq.n	800430a <TIM_Base_SetConfig+0x9a>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	4a2b      	ldr	r2, [pc, #172]	; (800438c <TIM_Base_SetConfig+0x11c>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d013      	beq.n	800430a <TIM_Base_SetConfig+0x9a>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	4a2a      	ldr	r2, [pc, #168]	; (8004390 <TIM_Base_SetConfig+0x120>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d00f      	beq.n	800430a <TIM_Base_SetConfig+0x9a>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	4a29      	ldr	r2, [pc, #164]	; (8004394 <TIM_Base_SetConfig+0x124>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d00b      	beq.n	800430a <TIM_Base_SetConfig+0x9a>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	4a28      	ldr	r2, [pc, #160]	; (8004398 <TIM_Base_SetConfig+0x128>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d007      	beq.n	800430a <TIM_Base_SetConfig+0x9a>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	4a27      	ldr	r2, [pc, #156]	; (800439c <TIM_Base_SetConfig+0x12c>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d003      	beq.n	800430a <TIM_Base_SetConfig+0x9a>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	4a26      	ldr	r2, [pc, #152]	; (80043a0 <TIM_Base_SetConfig+0x130>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d108      	bne.n	800431c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004310:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	68db      	ldr	r3, [r3, #12]
 8004316:	68fa      	ldr	r2, [r7, #12]
 8004318:	4313      	orrs	r3, r2
 800431a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	695b      	ldr	r3, [r3, #20]
 8004326:	4313      	orrs	r3, r2
 8004328:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	68fa      	ldr	r2, [r7, #12]
 800432e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	689a      	ldr	r2, [r3, #8]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	4a10      	ldr	r2, [pc, #64]	; (8004384 <TIM_Base_SetConfig+0x114>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d00f      	beq.n	8004368 <TIM_Base_SetConfig+0xf8>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	4a12      	ldr	r2, [pc, #72]	; (8004394 <TIM_Base_SetConfig+0x124>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d00b      	beq.n	8004368 <TIM_Base_SetConfig+0xf8>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	4a11      	ldr	r2, [pc, #68]	; (8004398 <TIM_Base_SetConfig+0x128>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d007      	beq.n	8004368 <TIM_Base_SetConfig+0xf8>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	4a10      	ldr	r2, [pc, #64]	; (800439c <TIM_Base_SetConfig+0x12c>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d003      	beq.n	8004368 <TIM_Base_SetConfig+0xf8>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	4a0f      	ldr	r2, [pc, #60]	; (80043a0 <TIM_Base_SetConfig+0x130>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d103      	bne.n	8004370 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	691a      	ldr	r2, [r3, #16]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2201      	movs	r2, #1
 8004374:	615a      	str	r2, [r3, #20]
}
 8004376:	bf00      	nop
 8004378:	3714      	adds	r7, #20
 800437a:	46bd      	mov	sp, r7
 800437c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004380:	4770      	bx	lr
 8004382:	bf00      	nop
 8004384:	40012c00 	.word	0x40012c00
 8004388:	40000400 	.word	0x40000400
 800438c:	40000800 	.word	0x40000800
 8004390:	40000c00 	.word	0x40000c00
 8004394:	40013400 	.word	0x40013400
 8004398:	40014000 	.word	0x40014000
 800439c:	40014400 	.word	0x40014400
 80043a0:	40014800 	.word	0x40014800

080043a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b087      	sub	sp, #28
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	60f8      	str	r0, [r7, #12]
 80043ac:	60b9      	str	r1, [r7, #8]
 80043ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	6a1b      	ldr	r3, [r3, #32]
 80043b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	6a1b      	ldr	r3, [r3, #32]
 80043ba:	f023 0201 	bic.w	r2, r3, #1
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	699b      	ldr	r3, [r3, #24]
 80043c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80043ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	011b      	lsls	r3, r3, #4
 80043d4:	693a      	ldr	r2, [r7, #16]
 80043d6:	4313      	orrs	r3, r2
 80043d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	f023 030a 	bic.w	r3, r3, #10
 80043e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80043e2:	697a      	ldr	r2, [r7, #20]
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	4313      	orrs	r3, r2
 80043e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	693a      	ldr	r2, [r7, #16]
 80043ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	697a      	ldr	r2, [r7, #20]
 80043f4:	621a      	str	r2, [r3, #32]
}
 80043f6:	bf00      	nop
 80043f8:	371c      	adds	r7, #28
 80043fa:	46bd      	mov	sp, r7
 80043fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004400:	4770      	bx	lr

08004402 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004402:	b480      	push	{r7}
 8004404:	b087      	sub	sp, #28
 8004406:	af00      	add	r7, sp, #0
 8004408:	60f8      	str	r0, [r7, #12]
 800440a:	60b9      	str	r1, [r7, #8]
 800440c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	6a1b      	ldr	r3, [r3, #32]
 8004412:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	6a1b      	ldr	r3, [r3, #32]
 8004418:	f023 0210 	bic.w	r2, r3, #16
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	699b      	ldr	r3, [r3, #24]
 8004424:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800442c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	031b      	lsls	r3, r3, #12
 8004432:	693a      	ldr	r2, [r7, #16]
 8004434:	4313      	orrs	r3, r2
 8004436:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800443e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	011b      	lsls	r3, r3, #4
 8004444:	697a      	ldr	r2, [r7, #20]
 8004446:	4313      	orrs	r3, r2
 8004448:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	693a      	ldr	r2, [r7, #16]
 800444e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	697a      	ldr	r2, [r7, #20]
 8004454:	621a      	str	r2, [r3, #32]
}
 8004456:	bf00      	nop
 8004458:	371c      	adds	r7, #28
 800445a:	46bd      	mov	sp, r7
 800445c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004460:	4770      	bx	lr

08004462 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004462:	b480      	push	{r7}
 8004464:	b085      	sub	sp, #20
 8004466:	af00      	add	r7, sp, #0
 8004468:	6078      	str	r0, [r7, #4]
 800446a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	689b      	ldr	r3, [r3, #8]
 8004470:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004478:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800447a:	683a      	ldr	r2, [r7, #0]
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	4313      	orrs	r3, r2
 8004480:	f043 0307 	orr.w	r3, r3, #7
 8004484:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	68fa      	ldr	r2, [r7, #12]
 800448a:	609a      	str	r2, [r3, #8]
}
 800448c:	bf00      	nop
 800448e:	3714      	adds	r7, #20
 8004490:	46bd      	mov	sp, r7
 8004492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004496:	4770      	bx	lr

08004498 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004498:	b480      	push	{r7}
 800449a:	b087      	sub	sp, #28
 800449c:	af00      	add	r7, sp, #0
 800449e:	60f8      	str	r0, [r7, #12]
 80044a0:	60b9      	str	r1, [r7, #8]
 80044a2:	607a      	str	r2, [r7, #4]
 80044a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80044b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	021a      	lsls	r2, r3, #8
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	431a      	orrs	r2, r3
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	4313      	orrs	r3, r2
 80044c0:	697a      	ldr	r2, [r7, #20]
 80044c2:	4313      	orrs	r3, r2
 80044c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	697a      	ldr	r2, [r7, #20]
 80044ca:	609a      	str	r2, [r3, #8]
}
 80044cc:	bf00      	nop
 80044ce:	371c      	adds	r7, #28
 80044d0:	46bd      	mov	sp, r7
 80044d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d6:	4770      	bx	lr

080044d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80044d8:	b480      	push	{r7}
 80044da:	b085      	sub	sp, #20
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
 80044e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d101      	bne.n	80044f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80044ec:	2302      	movs	r3, #2
 80044ee:	e068      	b.n	80045c2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2201      	movs	r2, #1
 80044f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2202      	movs	r2, #2
 80044fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a2e      	ldr	r2, [pc, #184]	; (80045d0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d004      	beq.n	8004524 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a2d      	ldr	r2, [pc, #180]	; (80045d4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d108      	bne.n	8004536 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800452a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	68fa      	ldr	r2, [r7, #12]
 8004532:	4313      	orrs	r3, r2
 8004534:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800453c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	68fa      	ldr	r2, [r7, #12]
 8004544:	4313      	orrs	r3, r2
 8004546:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	68fa      	ldr	r2, [r7, #12]
 800454e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a1e      	ldr	r2, [pc, #120]	; (80045d0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d01d      	beq.n	8004596 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004562:	d018      	beq.n	8004596 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a1b      	ldr	r2, [pc, #108]	; (80045d8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d013      	beq.n	8004596 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a1a      	ldr	r2, [pc, #104]	; (80045dc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d00e      	beq.n	8004596 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a18      	ldr	r2, [pc, #96]	; (80045e0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d009      	beq.n	8004596 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a13      	ldr	r2, [pc, #76]	; (80045d4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d004      	beq.n	8004596 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a14      	ldr	r2, [pc, #80]	; (80045e4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d10c      	bne.n	80045b0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800459c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	68ba      	ldr	r2, [r7, #8]
 80045a4:	4313      	orrs	r3, r2
 80045a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	68ba      	ldr	r2, [r7, #8]
 80045ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2201      	movs	r2, #1
 80045b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2200      	movs	r2, #0
 80045bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80045c0:	2300      	movs	r3, #0
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	3714      	adds	r7, #20
 80045c6:	46bd      	mov	sp, r7
 80045c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045cc:	4770      	bx	lr
 80045ce:	bf00      	nop
 80045d0:	40012c00 	.word	0x40012c00
 80045d4:	40013400 	.word	0x40013400
 80045d8:	40000400 	.word	0x40000400
 80045dc:	40000800 	.word	0x40000800
 80045e0:	40000c00 	.word	0x40000c00
 80045e4:	40014000 	.word	0x40014000

080045e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b082      	sub	sp, #8
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d101      	bne.n	80045fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	e040      	b.n	800467c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d106      	bne.n	8004610 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2200      	movs	r2, #0
 8004606:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	f7fc fb80 	bl	8000d10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2224      	movs	r2, #36	; 0x24
 8004614:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	681a      	ldr	r2, [r3, #0]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f022 0201 	bic.w	r2, r2, #1
 8004624:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800462a:	2b00      	cmp	r3, #0
 800462c:	d002      	beq.n	8004634 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f000 fae0 	bl	8004bf4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004634:	6878      	ldr	r0, [r7, #4]
 8004636:	f000 f825 	bl	8004684 <UART_SetConfig>
 800463a:	4603      	mov	r3, r0
 800463c:	2b01      	cmp	r3, #1
 800463e:	d101      	bne.n	8004644 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004640:	2301      	movs	r3, #1
 8004642:	e01b      	b.n	800467c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	685a      	ldr	r2, [r3, #4]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004652:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	689a      	ldr	r2, [r3, #8]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004662:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	681a      	ldr	r2, [r3, #0]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f042 0201 	orr.w	r2, r2, #1
 8004672:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004674:	6878      	ldr	r0, [r7, #4]
 8004676:	f000 fb5f 	bl	8004d38 <UART_CheckIdleState>
 800467a:	4603      	mov	r3, r0
}
 800467c:	4618      	mov	r0, r3
 800467e:	3708      	adds	r7, #8
 8004680:	46bd      	mov	sp, r7
 8004682:	bd80      	pop	{r7, pc}

08004684 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004684:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004688:	b08a      	sub	sp, #40	; 0x28
 800468a:	af00      	add	r7, sp, #0
 800468c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800468e:	2300      	movs	r3, #0
 8004690:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	689a      	ldr	r2, [r3, #8]
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	691b      	ldr	r3, [r3, #16]
 800469c:	431a      	orrs	r2, r3
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	695b      	ldr	r3, [r3, #20]
 80046a2:	431a      	orrs	r2, r3
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	69db      	ldr	r3, [r3, #28]
 80046a8:	4313      	orrs	r3, r2
 80046aa:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	681a      	ldr	r2, [r3, #0]
 80046b2:	4ba4      	ldr	r3, [pc, #656]	; (8004944 <UART_SetConfig+0x2c0>)
 80046b4:	4013      	ands	r3, r2
 80046b6:	68fa      	ldr	r2, [r7, #12]
 80046b8:	6812      	ldr	r2, [r2, #0]
 80046ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80046bc:	430b      	orrs	r3, r1
 80046be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	68da      	ldr	r2, [r3, #12]
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	430a      	orrs	r2, r1
 80046d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	699b      	ldr	r3, [r3, #24]
 80046da:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a99      	ldr	r2, [pc, #612]	; (8004948 <UART_SetConfig+0x2c4>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d004      	beq.n	80046f0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	6a1b      	ldr	r3, [r3, #32]
 80046ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046ec:	4313      	orrs	r3, r2
 80046ee:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004700:	430a      	orrs	r2, r1
 8004702:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a90      	ldr	r2, [pc, #576]	; (800494c <UART_SetConfig+0x2c8>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d126      	bne.n	800475c <UART_SetConfig+0xd8>
 800470e:	4b90      	ldr	r3, [pc, #576]	; (8004950 <UART_SetConfig+0x2cc>)
 8004710:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004714:	f003 0303 	and.w	r3, r3, #3
 8004718:	2b03      	cmp	r3, #3
 800471a:	d81b      	bhi.n	8004754 <UART_SetConfig+0xd0>
 800471c:	a201      	add	r2, pc, #4	; (adr r2, 8004724 <UART_SetConfig+0xa0>)
 800471e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004722:	bf00      	nop
 8004724:	08004735 	.word	0x08004735
 8004728:	08004745 	.word	0x08004745
 800472c:	0800473d 	.word	0x0800473d
 8004730:	0800474d 	.word	0x0800474d
 8004734:	2301      	movs	r3, #1
 8004736:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800473a:	e116      	b.n	800496a <UART_SetConfig+0x2e6>
 800473c:	2302      	movs	r3, #2
 800473e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004742:	e112      	b.n	800496a <UART_SetConfig+0x2e6>
 8004744:	2304      	movs	r3, #4
 8004746:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800474a:	e10e      	b.n	800496a <UART_SetConfig+0x2e6>
 800474c:	2308      	movs	r3, #8
 800474e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004752:	e10a      	b.n	800496a <UART_SetConfig+0x2e6>
 8004754:	2310      	movs	r3, #16
 8004756:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800475a:	e106      	b.n	800496a <UART_SetConfig+0x2e6>
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a7c      	ldr	r2, [pc, #496]	; (8004954 <UART_SetConfig+0x2d0>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d138      	bne.n	80047d8 <UART_SetConfig+0x154>
 8004766:	4b7a      	ldr	r3, [pc, #488]	; (8004950 <UART_SetConfig+0x2cc>)
 8004768:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800476c:	f003 030c 	and.w	r3, r3, #12
 8004770:	2b0c      	cmp	r3, #12
 8004772:	d82d      	bhi.n	80047d0 <UART_SetConfig+0x14c>
 8004774:	a201      	add	r2, pc, #4	; (adr r2, 800477c <UART_SetConfig+0xf8>)
 8004776:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800477a:	bf00      	nop
 800477c:	080047b1 	.word	0x080047b1
 8004780:	080047d1 	.word	0x080047d1
 8004784:	080047d1 	.word	0x080047d1
 8004788:	080047d1 	.word	0x080047d1
 800478c:	080047c1 	.word	0x080047c1
 8004790:	080047d1 	.word	0x080047d1
 8004794:	080047d1 	.word	0x080047d1
 8004798:	080047d1 	.word	0x080047d1
 800479c:	080047b9 	.word	0x080047b9
 80047a0:	080047d1 	.word	0x080047d1
 80047a4:	080047d1 	.word	0x080047d1
 80047a8:	080047d1 	.word	0x080047d1
 80047ac:	080047c9 	.word	0x080047c9
 80047b0:	2300      	movs	r3, #0
 80047b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047b6:	e0d8      	b.n	800496a <UART_SetConfig+0x2e6>
 80047b8:	2302      	movs	r3, #2
 80047ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047be:	e0d4      	b.n	800496a <UART_SetConfig+0x2e6>
 80047c0:	2304      	movs	r3, #4
 80047c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047c6:	e0d0      	b.n	800496a <UART_SetConfig+0x2e6>
 80047c8:	2308      	movs	r3, #8
 80047ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047ce:	e0cc      	b.n	800496a <UART_SetConfig+0x2e6>
 80047d0:	2310      	movs	r3, #16
 80047d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047d6:	e0c8      	b.n	800496a <UART_SetConfig+0x2e6>
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a5e      	ldr	r2, [pc, #376]	; (8004958 <UART_SetConfig+0x2d4>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d125      	bne.n	800482e <UART_SetConfig+0x1aa>
 80047e2:	4b5b      	ldr	r3, [pc, #364]	; (8004950 <UART_SetConfig+0x2cc>)
 80047e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047e8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80047ec:	2b30      	cmp	r3, #48	; 0x30
 80047ee:	d016      	beq.n	800481e <UART_SetConfig+0x19a>
 80047f0:	2b30      	cmp	r3, #48	; 0x30
 80047f2:	d818      	bhi.n	8004826 <UART_SetConfig+0x1a2>
 80047f4:	2b20      	cmp	r3, #32
 80047f6:	d00a      	beq.n	800480e <UART_SetConfig+0x18a>
 80047f8:	2b20      	cmp	r3, #32
 80047fa:	d814      	bhi.n	8004826 <UART_SetConfig+0x1a2>
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d002      	beq.n	8004806 <UART_SetConfig+0x182>
 8004800:	2b10      	cmp	r3, #16
 8004802:	d008      	beq.n	8004816 <UART_SetConfig+0x192>
 8004804:	e00f      	b.n	8004826 <UART_SetConfig+0x1a2>
 8004806:	2300      	movs	r3, #0
 8004808:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800480c:	e0ad      	b.n	800496a <UART_SetConfig+0x2e6>
 800480e:	2302      	movs	r3, #2
 8004810:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004814:	e0a9      	b.n	800496a <UART_SetConfig+0x2e6>
 8004816:	2304      	movs	r3, #4
 8004818:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800481c:	e0a5      	b.n	800496a <UART_SetConfig+0x2e6>
 800481e:	2308      	movs	r3, #8
 8004820:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004824:	e0a1      	b.n	800496a <UART_SetConfig+0x2e6>
 8004826:	2310      	movs	r3, #16
 8004828:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800482c:	e09d      	b.n	800496a <UART_SetConfig+0x2e6>
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a4a      	ldr	r2, [pc, #296]	; (800495c <UART_SetConfig+0x2d8>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d125      	bne.n	8004884 <UART_SetConfig+0x200>
 8004838:	4b45      	ldr	r3, [pc, #276]	; (8004950 <UART_SetConfig+0x2cc>)
 800483a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800483e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004842:	2bc0      	cmp	r3, #192	; 0xc0
 8004844:	d016      	beq.n	8004874 <UART_SetConfig+0x1f0>
 8004846:	2bc0      	cmp	r3, #192	; 0xc0
 8004848:	d818      	bhi.n	800487c <UART_SetConfig+0x1f8>
 800484a:	2b80      	cmp	r3, #128	; 0x80
 800484c:	d00a      	beq.n	8004864 <UART_SetConfig+0x1e0>
 800484e:	2b80      	cmp	r3, #128	; 0x80
 8004850:	d814      	bhi.n	800487c <UART_SetConfig+0x1f8>
 8004852:	2b00      	cmp	r3, #0
 8004854:	d002      	beq.n	800485c <UART_SetConfig+0x1d8>
 8004856:	2b40      	cmp	r3, #64	; 0x40
 8004858:	d008      	beq.n	800486c <UART_SetConfig+0x1e8>
 800485a:	e00f      	b.n	800487c <UART_SetConfig+0x1f8>
 800485c:	2300      	movs	r3, #0
 800485e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004862:	e082      	b.n	800496a <UART_SetConfig+0x2e6>
 8004864:	2302      	movs	r3, #2
 8004866:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800486a:	e07e      	b.n	800496a <UART_SetConfig+0x2e6>
 800486c:	2304      	movs	r3, #4
 800486e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004872:	e07a      	b.n	800496a <UART_SetConfig+0x2e6>
 8004874:	2308      	movs	r3, #8
 8004876:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800487a:	e076      	b.n	800496a <UART_SetConfig+0x2e6>
 800487c:	2310      	movs	r3, #16
 800487e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004882:	e072      	b.n	800496a <UART_SetConfig+0x2e6>
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a35      	ldr	r2, [pc, #212]	; (8004960 <UART_SetConfig+0x2dc>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d12a      	bne.n	80048e4 <UART_SetConfig+0x260>
 800488e:	4b30      	ldr	r3, [pc, #192]	; (8004950 <UART_SetConfig+0x2cc>)
 8004890:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004894:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004898:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800489c:	d01a      	beq.n	80048d4 <UART_SetConfig+0x250>
 800489e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80048a2:	d81b      	bhi.n	80048dc <UART_SetConfig+0x258>
 80048a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048a8:	d00c      	beq.n	80048c4 <UART_SetConfig+0x240>
 80048aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048ae:	d815      	bhi.n	80048dc <UART_SetConfig+0x258>
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d003      	beq.n	80048bc <UART_SetConfig+0x238>
 80048b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048b8:	d008      	beq.n	80048cc <UART_SetConfig+0x248>
 80048ba:	e00f      	b.n	80048dc <UART_SetConfig+0x258>
 80048bc:	2300      	movs	r3, #0
 80048be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048c2:	e052      	b.n	800496a <UART_SetConfig+0x2e6>
 80048c4:	2302      	movs	r3, #2
 80048c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048ca:	e04e      	b.n	800496a <UART_SetConfig+0x2e6>
 80048cc:	2304      	movs	r3, #4
 80048ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048d2:	e04a      	b.n	800496a <UART_SetConfig+0x2e6>
 80048d4:	2308      	movs	r3, #8
 80048d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048da:	e046      	b.n	800496a <UART_SetConfig+0x2e6>
 80048dc:	2310      	movs	r3, #16
 80048de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048e2:	e042      	b.n	800496a <UART_SetConfig+0x2e6>
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a17      	ldr	r2, [pc, #92]	; (8004948 <UART_SetConfig+0x2c4>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d13a      	bne.n	8004964 <UART_SetConfig+0x2e0>
 80048ee:	4b18      	ldr	r3, [pc, #96]	; (8004950 <UART_SetConfig+0x2cc>)
 80048f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048f4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80048f8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80048fc:	d01a      	beq.n	8004934 <UART_SetConfig+0x2b0>
 80048fe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004902:	d81b      	bhi.n	800493c <UART_SetConfig+0x2b8>
 8004904:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004908:	d00c      	beq.n	8004924 <UART_SetConfig+0x2a0>
 800490a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800490e:	d815      	bhi.n	800493c <UART_SetConfig+0x2b8>
 8004910:	2b00      	cmp	r3, #0
 8004912:	d003      	beq.n	800491c <UART_SetConfig+0x298>
 8004914:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004918:	d008      	beq.n	800492c <UART_SetConfig+0x2a8>
 800491a:	e00f      	b.n	800493c <UART_SetConfig+0x2b8>
 800491c:	2300      	movs	r3, #0
 800491e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004922:	e022      	b.n	800496a <UART_SetConfig+0x2e6>
 8004924:	2302      	movs	r3, #2
 8004926:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800492a:	e01e      	b.n	800496a <UART_SetConfig+0x2e6>
 800492c:	2304      	movs	r3, #4
 800492e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004932:	e01a      	b.n	800496a <UART_SetConfig+0x2e6>
 8004934:	2308      	movs	r3, #8
 8004936:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800493a:	e016      	b.n	800496a <UART_SetConfig+0x2e6>
 800493c:	2310      	movs	r3, #16
 800493e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004942:	e012      	b.n	800496a <UART_SetConfig+0x2e6>
 8004944:	efff69f3 	.word	0xefff69f3
 8004948:	40008000 	.word	0x40008000
 800494c:	40013800 	.word	0x40013800
 8004950:	40021000 	.word	0x40021000
 8004954:	40004400 	.word	0x40004400
 8004958:	40004800 	.word	0x40004800
 800495c:	40004c00 	.word	0x40004c00
 8004960:	40005000 	.word	0x40005000
 8004964:	2310      	movs	r3, #16
 8004966:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a9f      	ldr	r2, [pc, #636]	; (8004bec <UART_SetConfig+0x568>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d17a      	bne.n	8004a6a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004974:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004978:	2b08      	cmp	r3, #8
 800497a:	d824      	bhi.n	80049c6 <UART_SetConfig+0x342>
 800497c:	a201      	add	r2, pc, #4	; (adr r2, 8004984 <UART_SetConfig+0x300>)
 800497e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004982:	bf00      	nop
 8004984:	080049a9 	.word	0x080049a9
 8004988:	080049c7 	.word	0x080049c7
 800498c:	080049b1 	.word	0x080049b1
 8004990:	080049c7 	.word	0x080049c7
 8004994:	080049b7 	.word	0x080049b7
 8004998:	080049c7 	.word	0x080049c7
 800499c:	080049c7 	.word	0x080049c7
 80049a0:	080049c7 	.word	0x080049c7
 80049a4:	080049bf 	.word	0x080049bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049a8:	f7fe fddc 	bl	8003564 <HAL_RCC_GetPCLK1Freq>
 80049ac:	61f8      	str	r0, [r7, #28]
        break;
 80049ae:	e010      	b.n	80049d2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049b0:	4b8f      	ldr	r3, [pc, #572]	; (8004bf0 <UART_SetConfig+0x56c>)
 80049b2:	61fb      	str	r3, [r7, #28]
        break;
 80049b4:	e00d      	b.n	80049d2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049b6:	f7fe fd3d 	bl	8003434 <HAL_RCC_GetSysClockFreq>
 80049ba:	61f8      	str	r0, [r7, #28]
        break;
 80049bc:	e009      	b.n	80049d2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049c2:	61fb      	str	r3, [r7, #28]
        break;
 80049c4:	e005      	b.n	80049d2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80049c6:	2300      	movs	r3, #0
 80049c8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80049d0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80049d2:	69fb      	ldr	r3, [r7, #28]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	f000 80fb 	beq.w	8004bd0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	685a      	ldr	r2, [r3, #4]
 80049de:	4613      	mov	r3, r2
 80049e0:	005b      	lsls	r3, r3, #1
 80049e2:	4413      	add	r3, r2
 80049e4:	69fa      	ldr	r2, [r7, #28]
 80049e6:	429a      	cmp	r2, r3
 80049e8:	d305      	bcc.n	80049f6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80049f0:	69fa      	ldr	r2, [r7, #28]
 80049f2:	429a      	cmp	r2, r3
 80049f4:	d903      	bls.n	80049fe <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80049f6:	2301      	movs	r3, #1
 80049f8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80049fc:	e0e8      	b.n	8004bd0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80049fe:	69fb      	ldr	r3, [r7, #28]
 8004a00:	2200      	movs	r2, #0
 8004a02:	461c      	mov	r4, r3
 8004a04:	4615      	mov	r5, r2
 8004a06:	f04f 0200 	mov.w	r2, #0
 8004a0a:	f04f 0300 	mov.w	r3, #0
 8004a0e:	022b      	lsls	r3, r5, #8
 8004a10:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004a14:	0222      	lsls	r2, r4, #8
 8004a16:	68f9      	ldr	r1, [r7, #12]
 8004a18:	6849      	ldr	r1, [r1, #4]
 8004a1a:	0849      	lsrs	r1, r1, #1
 8004a1c:	2000      	movs	r0, #0
 8004a1e:	4688      	mov	r8, r1
 8004a20:	4681      	mov	r9, r0
 8004a22:	eb12 0a08 	adds.w	sl, r2, r8
 8004a26:	eb43 0b09 	adc.w	fp, r3, r9
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	603b      	str	r3, [r7, #0]
 8004a32:	607a      	str	r2, [r7, #4]
 8004a34:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a38:	4650      	mov	r0, sl
 8004a3a:	4659      	mov	r1, fp
 8004a3c:	f7fb fbd8 	bl	80001f0 <__aeabi_uldivmod>
 8004a40:	4602      	mov	r2, r0
 8004a42:	460b      	mov	r3, r1
 8004a44:	4613      	mov	r3, r2
 8004a46:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004a48:	69bb      	ldr	r3, [r7, #24]
 8004a4a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a4e:	d308      	bcc.n	8004a62 <UART_SetConfig+0x3de>
 8004a50:	69bb      	ldr	r3, [r7, #24]
 8004a52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a56:	d204      	bcs.n	8004a62 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	69ba      	ldr	r2, [r7, #24]
 8004a5e:	60da      	str	r2, [r3, #12]
 8004a60:	e0b6      	b.n	8004bd0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004a68:	e0b2      	b.n	8004bd0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	69db      	ldr	r3, [r3, #28]
 8004a6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a72:	d15e      	bne.n	8004b32 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004a74:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004a78:	2b08      	cmp	r3, #8
 8004a7a:	d828      	bhi.n	8004ace <UART_SetConfig+0x44a>
 8004a7c:	a201      	add	r2, pc, #4	; (adr r2, 8004a84 <UART_SetConfig+0x400>)
 8004a7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a82:	bf00      	nop
 8004a84:	08004aa9 	.word	0x08004aa9
 8004a88:	08004ab1 	.word	0x08004ab1
 8004a8c:	08004ab9 	.word	0x08004ab9
 8004a90:	08004acf 	.word	0x08004acf
 8004a94:	08004abf 	.word	0x08004abf
 8004a98:	08004acf 	.word	0x08004acf
 8004a9c:	08004acf 	.word	0x08004acf
 8004aa0:	08004acf 	.word	0x08004acf
 8004aa4:	08004ac7 	.word	0x08004ac7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004aa8:	f7fe fd5c 	bl	8003564 <HAL_RCC_GetPCLK1Freq>
 8004aac:	61f8      	str	r0, [r7, #28]
        break;
 8004aae:	e014      	b.n	8004ada <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ab0:	f7fe fd6e 	bl	8003590 <HAL_RCC_GetPCLK2Freq>
 8004ab4:	61f8      	str	r0, [r7, #28]
        break;
 8004ab6:	e010      	b.n	8004ada <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ab8:	4b4d      	ldr	r3, [pc, #308]	; (8004bf0 <UART_SetConfig+0x56c>)
 8004aba:	61fb      	str	r3, [r7, #28]
        break;
 8004abc:	e00d      	b.n	8004ada <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004abe:	f7fe fcb9 	bl	8003434 <HAL_RCC_GetSysClockFreq>
 8004ac2:	61f8      	str	r0, [r7, #28]
        break;
 8004ac4:	e009      	b.n	8004ada <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ac6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004aca:	61fb      	str	r3, [r7, #28]
        break;
 8004acc:	e005      	b.n	8004ada <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004ace:	2300      	movs	r3, #0
 8004ad0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004ad8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004ada:	69fb      	ldr	r3, [r7, #28]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d077      	beq.n	8004bd0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004ae0:	69fb      	ldr	r3, [r7, #28]
 8004ae2:	005a      	lsls	r2, r3, #1
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	085b      	lsrs	r3, r3, #1
 8004aea:	441a      	add	r2, r3
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004af4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004af6:	69bb      	ldr	r3, [r7, #24]
 8004af8:	2b0f      	cmp	r3, #15
 8004afa:	d916      	bls.n	8004b2a <UART_SetConfig+0x4a6>
 8004afc:	69bb      	ldr	r3, [r7, #24]
 8004afe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b02:	d212      	bcs.n	8004b2a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004b04:	69bb      	ldr	r3, [r7, #24]
 8004b06:	b29b      	uxth	r3, r3
 8004b08:	f023 030f 	bic.w	r3, r3, #15
 8004b0c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004b0e:	69bb      	ldr	r3, [r7, #24]
 8004b10:	085b      	lsrs	r3, r3, #1
 8004b12:	b29b      	uxth	r3, r3
 8004b14:	f003 0307 	and.w	r3, r3, #7
 8004b18:	b29a      	uxth	r2, r3
 8004b1a:	8afb      	ldrh	r3, [r7, #22]
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	8afa      	ldrh	r2, [r7, #22]
 8004b26:	60da      	str	r2, [r3, #12]
 8004b28:	e052      	b.n	8004bd0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004b30:	e04e      	b.n	8004bd0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004b32:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004b36:	2b08      	cmp	r3, #8
 8004b38:	d827      	bhi.n	8004b8a <UART_SetConfig+0x506>
 8004b3a:	a201      	add	r2, pc, #4	; (adr r2, 8004b40 <UART_SetConfig+0x4bc>)
 8004b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b40:	08004b65 	.word	0x08004b65
 8004b44:	08004b6d 	.word	0x08004b6d
 8004b48:	08004b75 	.word	0x08004b75
 8004b4c:	08004b8b 	.word	0x08004b8b
 8004b50:	08004b7b 	.word	0x08004b7b
 8004b54:	08004b8b 	.word	0x08004b8b
 8004b58:	08004b8b 	.word	0x08004b8b
 8004b5c:	08004b8b 	.word	0x08004b8b
 8004b60:	08004b83 	.word	0x08004b83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b64:	f7fe fcfe 	bl	8003564 <HAL_RCC_GetPCLK1Freq>
 8004b68:	61f8      	str	r0, [r7, #28]
        break;
 8004b6a:	e014      	b.n	8004b96 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b6c:	f7fe fd10 	bl	8003590 <HAL_RCC_GetPCLK2Freq>
 8004b70:	61f8      	str	r0, [r7, #28]
        break;
 8004b72:	e010      	b.n	8004b96 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b74:	4b1e      	ldr	r3, [pc, #120]	; (8004bf0 <UART_SetConfig+0x56c>)
 8004b76:	61fb      	str	r3, [r7, #28]
        break;
 8004b78:	e00d      	b.n	8004b96 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b7a:	f7fe fc5b 	bl	8003434 <HAL_RCC_GetSysClockFreq>
 8004b7e:	61f8      	str	r0, [r7, #28]
        break;
 8004b80:	e009      	b.n	8004b96 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b86:	61fb      	str	r3, [r7, #28]
        break;
 8004b88:	e005      	b.n	8004b96 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004b94:	bf00      	nop
    }

    if (pclk != 0U)
 8004b96:	69fb      	ldr	r3, [r7, #28]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d019      	beq.n	8004bd0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	085a      	lsrs	r2, r3, #1
 8004ba2:	69fb      	ldr	r3, [r7, #28]
 8004ba4:	441a      	add	r2, r3
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bae:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004bb0:	69bb      	ldr	r3, [r7, #24]
 8004bb2:	2b0f      	cmp	r3, #15
 8004bb4:	d909      	bls.n	8004bca <UART_SetConfig+0x546>
 8004bb6:	69bb      	ldr	r3, [r7, #24]
 8004bb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bbc:	d205      	bcs.n	8004bca <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004bbe:	69bb      	ldr	r3, [r7, #24]
 8004bc0:	b29a      	uxth	r2, r3
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	60da      	str	r2, [r3, #12]
 8004bc8:	e002      	b.n	8004bd0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004bdc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	3728      	adds	r7, #40	; 0x28
 8004be4:	46bd      	mov	sp, r7
 8004be6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004bea:	bf00      	nop
 8004bec:	40008000 	.word	0x40008000
 8004bf0:	00f42400 	.word	0x00f42400

08004bf4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b083      	sub	sp, #12
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c00:	f003 0308 	and.w	r3, r3, #8
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d00a      	beq.n	8004c1e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	430a      	orrs	r2, r1
 8004c1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c22:	f003 0301 	and.w	r3, r3, #1
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d00a      	beq.n	8004c40 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	430a      	orrs	r2, r1
 8004c3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c44:	f003 0302 	and.w	r3, r3, #2
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d00a      	beq.n	8004c62 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	430a      	orrs	r2, r1
 8004c60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c66:	f003 0304 	and.w	r3, r3, #4
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d00a      	beq.n	8004c84 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	430a      	orrs	r2, r1
 8004c82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c88:	f003 0310 	and.w	r3, r3, #16
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d00a      	beq.n	8004ca6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	430a      	orrs	r2, r1
 8004ca4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004caa:	f003 0320 	and.w	r3, r3, #32
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d00a      	beq.n	8004cc8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	689b      	ldr	r3, [r3, #8]
 8004cb8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	430a      	orrs	r2, r1
 8004cc6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ccc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d01a      	beq.n	8004d0a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	430a      	orrs	r2, r1
 8004ce8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004cf2:	d10a      	bne.n	8004d0a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	430a      	orrs	r2, r1
 8004d08:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d00a      	beq.n	8004d2c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	430a      	orrs	r2, r1
 8004d2a:	605a      	str	r2, [r3, #4]
  }
}
 8004d2c:	bf00      	nop
 8004d2e:	370c      	adds	r7, #12
 8004d30:	46bd      	mov	sp, r7
 8004d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d36:	4770      	bx	lr

08004d38 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b098      	sub	sp, #96	; 0x60
 8004d3c:	af02      	add	r7, sp, #8
 8004d3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2200      	movs	r2, #0
 8004d44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004d48:	f7fc f932 	bl	8000fb0 <HAL_GetTick>
 8004d4c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f003 0308 	and.w	r3, r3, #8
 8004d58:	2b08      	cmp	r3, #8
 8004d5a:	d12e      	bne.n	8004dba <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d5c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004d60:	9300      	str	r3, [sp, #0]
 8004d62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d64:	2200      	movs	r2, #0
 8004d66:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	f000 f88c 	bl	8004e88 <UART_WaitOnFlagUntilTimeout>
 8004d70:	4603      	mov	r3, r0
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d021      	beq.n	8004dba <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d7e:	e853 3f00 	ldrex	r3, [r3]
 8004d82:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004d84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d8a:	653b      	str	r3, [r7, #80]	; 0x50
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	461a      	mov	r2, r3
 8004d92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d94:	647b      	str	r3, [r7, #68]	; 0x44
 8004d96:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d98:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004d9a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004d9c:	e841 2300 	strex	r3, r2, [r1]
 8004da0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004da2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d1e6      	bne.n	8004d76 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2220      	movs	r2, #32
 8004dac:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2200      	movs	r2, #0
 8004db2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004db6:	2303      	movs	r3, #3
 8004db8:	e062      	b.n	8004e80 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f003 0304 	and.w	r3, r3, #4
 8004dc4:	2b04      	cmp	r3, #4
 8004dc6:	d149      	bne.n	8004e5c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004dc8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004dcc:	9300      	str	r3, [sp, #0]
 8004dce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004dd6:	6878      	ldr	r0, [r7, #4]
 8004dd8:	f000 f856 	bl	8004e88 <UART_WaitOnFlagUntilTimeout>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d03c      	beq.n	8004e5c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dea:	e853 3f00 	ldrex	r3, [r3]
 8004dee:	623b      	str	r3, [r7, #32]
   return(result);
 8004df0:	6a3b      	ldr	r3, [r7, #32]
 8004df2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004df6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	461a      	mov	r2, r3
 8004dfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e00:	633b      	str	r3, [r7, #48]	; 0x30
 8004e02:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e04:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004e06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e08:	e841 2300 	strex	r3, r2, [r1]
 8004e0c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d1e6      	bne.n	8004de2 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	3308      	adds	r3, #8
 8004e1a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e1c:	693b      	ldr	r3, [r7, #16]
 8004e1e:	e853 3f00 	ldrex	r3, [r3]
 8004e22:	60fb      	str	r3, [r7, #12]
   return(result);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	f023 0301 	bic.w	r3, r3, #1
 8004e2a:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	3308      	adds	r3, #8
 8004e32:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e34:	61fa      	str	r2, [r7, #28]
 8004e36:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e38:	69b9      	ldr	r1, [r7, #24]
 8004e3a:	69fa      	ldr	r2, [r7, #28]
 8004e3c:	e841 2300 	strex	r3, r2, [r1]
 8004e40:	617b      	str	r3, [r7, #20]
   return(result);
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d1e5      	bne.n	8004e14 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2220      	movs	r2, #32
 8004e4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2200      	movs	r2, #0
 8004e54:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e58:	2303      	movs	r3, #3
 8004e5a:	e011      	b.n	8004e80 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2220      	movs	r2, #32
 8004e60:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2220      	movs	r2, #32
 8004e66:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2200      	movs	r2, #0
 8004e74:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004e7e:	2300      	movs	r3, #0
}
 8004e80:	4618      	mov	r0, r3
 8004e82:	3758      	adds	r7, #88	; 0x58
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bd80      	pop	{r7, pc}

08004e88 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b084      	sub	sp, #16
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	60f8      	str	r0, [r7, #12]
 8004e90:	60b9      	str	r1, [r7, #8]
 8004e92:	603b      	str	r3, [r7, #0]
 8004e94:	4613      	mov	r3, r2
 8004e96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e98:	e049      	b.n	8004f2e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e9a:	69bb      	ldr	r3, [r7, #24]
 8004e9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ea0:	d045      	beq.n	8004f2e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ea2:	f7fc f885 	bl	8000fb0 <HAL_GetTick>
 8004ea6:	4602      	mov	r2, r0
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	1ad3      	subs	r3, r2, r3
 8004eac:	69ba      	ldr	r2, [r7, #24]
 8004eae:	429a      	cmp	r2, r3
 8004eb0:	d302      	bcc.n	8004eb8 <UART_WaitOnFlagUntilTimeout+0x30>
 8004eb2:	69bb      	ldr	r3, [r7, #24]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d101      	bne.n	8004ebc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004eb8:	2303      	movs	r3, #3
 8004eba:	e048      	b.n	8004f4e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f003 0304 	and.w	r3, r3, #4
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d031      	beq.n	8004f2e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	69db      	ldr	r3, [r3, #28]
 8004ed0:	f003 0308 	and.w	r3, r3, #8
 8004ed4:	2b08      	cmp	r3, #8
 8004ed6:	d110      	bne.n	8004efa <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	2208      	movs	r2, #8
 8004ede:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004ee0:	68f8      	ldr	r0, [r7, #12]
 8004ee2:	f000 f838 	bl	8004f56 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	2208      	movs	r2, #8
 8004eea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	e029      	b.n	8004f4e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	69db      	ldr	r3, [r3, #28]
 8004f00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f08:	d111      	bne.n	8004f2e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004f12:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004f14:	68f8      	ldr	r0, [r7, #12]
 8004f16:	f000 f81e 	bl	8004f56 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2220      	movs	r2, #32
 8004f1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	2200      	movs	r2, #0
 8004f26:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004f2a:	2303      	movs	r3, #3
 8004f2c:	e00f      	b.n	8004f4e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	69da      	ldr	r2, [r3, #28]
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	4013      	ands	r3, r2
 8004f38:	68ba      	ldr	r2, [r7, #8]
 8004f3a:	429a      	cmp	r2, r3
 8004f3c:	bf0c      	ite	eq
 8004f3e:	2301      	moveq	r3, #1
 8004f40:	2300      	movne	r3, #0
 8004f42:	b2db      	uxtb	r3, r3
 8004f44:	461a      	mov	r2, r3
 8004f46:	79fb      	ldrb	r3, [r7, #7]
 8004f48:	429a      	cmp	r2, r3
 8004f4a:	d0a6      	beq.n	8004e9a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f4c:	2300      	movs	r3, #0
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	3710      	adds	r7, #16
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd80      	pop	{r7, pc}

08004f56 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f56:	b480      	push	{r7}
 8004f58:	b095      	sub	sp, #84	; 0x54
 8004f5a:	af00      	add	r7, sp, #0
 8004f5c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f66:	e853 3f00 	ldrex	r3, [r3]
 8004f6a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f6e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004f72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	461a      	mov	r2, r3
 8004f7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f7c:	643b      	str	r3, [r7, #64]	; 0x40
 8004f7e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f80:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004f82:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004f84:	e841 2300 	strex	r3, r2, [r1]
 8004f88:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004f8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d1e6      	bne.n	8004f5e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	3308      	adds	r3, #8
 8004f96:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f98:	6a3b      	ldr	r3, [r7, #32]
 8004f9a:	e853 3f00 	ldrex	r3, [r3]
 8004f9e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004fa0:	69fb      	ldr	r3, [r7, #28]
 8004fa2:	f023 0301 	bic.w	r3, r3, #1
 8004fa6:	64bb      	str	r3, [r7, #72]	; 0x48
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	3308      	adds	r3, #8
 8004fae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004fb0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004fb2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fb4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004fb6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004fb8:	e841 2300 	strex	r3, r2, [r1]
 8004fbc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d1e5      	bne.n	8004f90 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fc8:	2b01      	cmp	r3, #1
 8004fca:	d118      	bne.n	8004ffe <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	e853 3f00 	ldrex	r3, [r3]
 8004fd8:	60bb      	str	r3, [r7, #8]
   return(result);
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	f023 0310 	bic.w	r3, r3, #16
 8004fe0:	647b      	str	r3, [r7, #68]	; 0x44
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	461a      	mov	r2, r3
 8004fe8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004fea:	61bb      	str	r3, [r7, #24]
 8004fec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fee:	6979      	ldr	r1, [r7, #20]
 8004ff0:	69ba      	ldr	r2, [r7, #24]
 8004ff2:	e841 2300 	strex	r3, r2, [r1]
 8004ff6:	613b      	str	r3, [r7, #16]
   return(result);
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d1e6      	bne.n	8004fcc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2220      	movs	r2, #32
 8005002:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2200      	movs	r2, #0
 800500a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2200      	movs	r2, #0
 8005010:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005012:	bf00      	nop
 8005014:	3754      	adds	r7, #84	; 0x54
 8005016:	46bd      	mov	sp, r7
 8005018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501c:	4770      	bx	lr

0800501e <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800501e:	b084      	sub	sp, #16
 8005020:	b580      	push	{r7, lr}
 8005022:	b084      	sub	sp, #16
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
 8005028:	f107 001c 	add.w	r0, r7, #28
 800502c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	68db      	ldr	r3, [r3, #12]
 8005034:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800503c:	6878      	ldr	r0, [r7, #4]
 800503e:	f001 fa1d 	bl	800647c <USB_CoreReset>
 8005042:	4603      	mov	r3, r0
 8005044:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8005046:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005048:	2b00      	cmp	r3, #0
 800504a:	d106      	bne.n	800505a <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005050:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	639a      	str	r2, [r3, #56]	; 0x38
 8005058:	e005      	b.n	8005066 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800505e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8005066:	7bfb      	ldrb	r3, [r7, #15]
}
 8005068:	4618      	mov	r0, r3
 800506a:	3710      	adds	r7, #16
 800506c:	46bd      	mov	sp, r7
 800506e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005072:	b004      	add	sp, #16
 8005074:	4770      	bx	lr
	...

08005078 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005078:	b480      	push	{r7}
 800507a:	b087      	sub	sp, #28
 800507c:	af00      	add	r7, sp, #0
 800507e:	60f8      	str	r0, [r7, #12]
 8005080:	60b9      	str	r1, [r7, #8]
 8005082:	4613      	mov	r3, r2
 8005084:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005086:	79fb      	ldrb	r3, [r7, #7]
 8005088:	2b02      	cmp	r3, #2
 800508a:	d165      	bne.n	8005158 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	4a3e      	ldr	r2, [pc, #248]	; (8005188 <USB_SetTurnaroundTime+0x110>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d906      	bls.n	80050a2 <USB_SetTurnaroundTime+0x2a>
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	4a3d      	ldr	r2, [pc, #244]	; (800518c <USB_SetTurnaroundTime+0x114>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d202      	bcs.n	80050a2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800509c:	230f      	movs	r3, #15
 800509e:	617b      	str	r3, [r7, #20]
 80050a0:	e05c      	b.n	800515c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	4a39      	ldr	r2, [pc, #228]	; (800518c <USB_SetTurnaroundTime+0x114>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d306      	bcc.n	80050b8 <USB_SetTurnaroundTime+0x40>
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	4a38      	ldr	r2, [pc, #224]	; (8005190 <USB_SetTurnaroundTime+0x118>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d202      	bcs.n	80050b8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80050b2:	230e      	movs	r3, #14
 80050b4:	617b      	str	r3, [r7, #20]
 80050b6:	e051      	b.n	800515c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	4a35      	ldr	r2, [pc, #212]	; (8005190 <USB_SetTurnaroundTime+0x118>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d306      	bcc.n	80050ce <USB_SetTurnaroundTime+0x56>
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	4a34      	ldr	r2, [pc, #208]	; (8005194 <USB_SetTurnaroundTime+0x11c>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d202      	bcs.n	80050ce <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80050c8:	230d      	movs	r3, #13
 80050ca:	617b      	str	r3, [r7, #20]
 80050cc:	e046      	b.n	800515c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	4a30      	ldr	r2, [pc, #192]	; (8005194 <USB_SetTurnaroundTime+0x11c>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d306      	bcc.n	80050e4 <USB_SetTurnaroundTime+0x6c>
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	4a2f      	ldr	r2, [pc, #188]	; (8005198 <USB_SetTurnaroundTime+0x120>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d802      	bhi.n	80050e4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80050de:	230c      	movs	r3, #12
 80050e0:	617b      	str	r3, [r7, #20]
 80050e2:	e03b      	b.n	800515c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	4a2c      	ldr	r2, [pc, #176]	; (8005198 <USB_SetTurnaroundTime+0x120>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d906      	bls.n	80050fa <USB_SetTurnaroundTime+0x82>
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	4a2b      	ldr	r2, [pc, #172]	; (800519c <USB_SetTurnaroundTime+0x124>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d802      	bhi.n	80050fa <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80050f4:	230b      	movs	r3, #11
 80050f6:	617b      	str	r3, [r7, #20]
 80050f8:	e030      	b.n	800515c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	4a27      	ldr	r2, [pc, #156]	; (800519c <USB_SetTurnaroundTime+0x124>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d906      	bls.n	8005110 <USB_SetTurnaroundTime+0x98>
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	4a26      	ldr	r2, [pc, #152]	; (80051a0 <USB_SetTurnaroundTime+0x128>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d802      	bhi.n	8005110 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800510a:	230a      	movs	r3, #10
 800510c:	617b      	str	r3, [r7, #20]
 800510e:	e025      	b.n	800515c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	4a23      	ldr	r2, [pc, #140]	; (80051a0 <USB_SetTurnaroundTime+0x128>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d906      	bls.n	8005126 <USB_SetTurnaroundTime+0xae>
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	4a22      	ldr	r2, [pc, #136]	; (80051a4 <USB_SetTurnaroundTime+0x12c>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d202      	bcs.n	8005126 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005120:	2309      	movs	r3, #9
 8005122:	617b      	str	r3, [r7, #20]
 8005124:	e01a      	b.n	800515c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	4a1e      	ldr	r2, [pc, #120]	; (80051a4 <USB_SetTurnaroundTime+0x12c>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d306      	bcc.n	800513c <USB_SetTurnaroundTime+0xc4>
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	4a1d      	ldr	r2, [pc, #116]	; (80051a8 <USB_SetTurnaroundTime+0x130>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d802      	bhi.n	800513c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005136:	2308      	movs	r3, #8
 8005138:	617b      	str	r3, [r7, #20]
 800513a:	e00f      	b.n	800515c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	4a1a      	ldr	r2, [pc, #104]	; (80051a8 <USB_SetTurnaroundTime+0x130>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d906      	bls.n	8005152 <USB_SetTurnaroundTime+0xda>
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	4a19      	ldr	r2, [pc, #100]	; (80051ac <USB_SetTurnaroundTime+0x134>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d202      	bcs.n	8005152 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800514c:	2307      	movs	r3, #7
 800514e:	617b      	str	r3, [r7, #20]
 8005150:	e004      	b.n	800515c <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005152:	2306      	movs	r3, #6
 8005154:	617b      	str	r3, [r7, #20]
 8005156:	e001      	b.n	800515c <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005158:	2309      	movs	r3, #9
 800515a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	68db      	ldr	r3, [r3, #12]
 8005160:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	68da      	ldr	r2, [r3, #12]
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	029b      	lsls	r3, r3, #10
 8005170:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005174:	431a      	orrs	r2, r3
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800517a:	2300      	movs	r3, #0
}
 800517c:	4618      	mov	r0, r3
 800517e:	371c      	adds	r7, #28
 8005180:	46bd      	mov	sp, r7
 8005182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005186:	4770      	bx	lr
 8005188:	00d8acbf 	.word	0x00d8acbf
 800518c:	00e4e1c0 	.word	0x00e4e1c0
 8005190:	00f42400 	.word	0x00f42400
 8005194:	01067380 	.word	0x01067380
 8005198:	011a499f 	.word	0x011a499f
 800519c:	01312cff 	.word	0x01312cff
 80051a0:	014ca43f 	.word	0x014ca43f
 80051a4:	016e3600 	.word	0x016e3600
 80051a8:	01a6ab1f 	.word	0x01a6ab1f
 80051ac:	01e84800 	.word	0x01e84800

080051b0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80051b0:	b480      	push	{r7}
 80051b2:	b083      	sub	sp, #12
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	689b      	ldr	r3, [r3, #8]
 80051bc:	f043 0201 	orr.w	r2, r3, #1
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80051c4:	2300      	movs	r3, #0
}
 80051c6:	4618      	mov	r0, r3
 80051c8:	370c      	adds	r7, #12
 80051ca:	46bd      	mov	sp, r7
 80051cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d0:	4770      	bx	lr

080051d2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80051d2:	b480      	push	{r7}
 80051d4:	b083      	sub	sp, #12
 80051d6:	af00      	add	r7, sp, #0
 80051d8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	689b      	ldr	r3, [r3, #8]
 80051de:	f023 0201 	bic.w	r2, r3, #1
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80051e6:	2300      	movs	r3, #0
}
 80051e8:	4618      	mov	r0, r3
 80051ea:	370c      	adds	r7, #12
 80051ec:	46bd      	mov	sp, r7
 80051ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f2:	4770      	bx	lr

080051f4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b084      	sub	sp, #16
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
 80051fc:	460b      	mov	r3, r1
 80051fe:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005200:	2300      	movs	r3, #0
 8005202:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	68db      	ldr	r3, [r3, #12]
 8005208:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005210:	78fb      	ldrb	r3, [r7, #3]
 8005212:	2b01      	cmp	r3, #1
 8005214:	d115      	bne.n	8005242 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	68db      	ldr	r3, [r3, #12]
 800521a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005222:	2001      	movs	r0, #1
 8005224:	f7fb fed0 	bl	8000fc8 <HAL_Delay>
      ms++;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	3301      	adds	r3, #1
 800522c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800522e:	6878      	ldr	r0, [r7, #4]
 8005230:	f001 f8ab 	bl	800638a <USB_GetMode>
 8005234:	4603      	mov	r3, r0
 8005236:	2b01      	cmp	r3, #1
 8005238:	d01e      	beq.n	8005278 <USB_SetCurrentMode+0x84>
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	2b31      	cmp	r3, #49	; 0x31
 800523e:	d9f0      	bls.n	8005222 <USB_SetCurrentMode+0x2e>
 8005240:	e01a      	b.n	8005278 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005242:	78fb      	ldrb	r3, [r7, #3]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d115      	bne.n	8005274 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	68db      	ldr	r3, [r3, #12]
 800524c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005254:	2001      	movs	r0, #1
 8005256:	f7fb feb7 	bl	8000fc8 <HAL_Delay>
      ms++;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	3301      	adds	r3, #1
 800525e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005260:	6878      	ldr	r0, [r7, #4]
 8005262:	f001 f892 	bl	800638a <USB_GetMode>
 8005266:	4603      	mov	r3, r0
 8005268:	2b00      	cmp	r3, #0
 800526a:	d005      	beq.n	8005278 <USB_SetCurrentMode+0x84>
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	2b31      	cmp	r3, #49	; 0x31
 8005270:	d9f0      	bls.n	8005254 <USB_SetCurrentMode+0x60>
 8005272:	e001      	b.n	8005278 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005274:	2301      	movs	r3, #1
 8005276:	e005      	b.n	8005284 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	2b32      	cmp	r3, #50	; 0x32
 800527c:	d101      	bne.n	8005282 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800527e:	2301      	movs	r3, #1
 8005280:	e000      	b.n	8005284 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005282:	2300      	movs	r3, #0
}
 8005284:	4618      	mov	r0, r3
 8005286:	3710      	adds	r7, #16
 8005288:	46bd      	mov	sp, r7
 800528a:	bd80      	pop	{r7, pc}

0800528c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800528c:	b084      	sub	sp, #16
 800528e:	b580      	push	{r7, lr}
 8005290:	b086      	sub	sp, #24
 8005292:	af00      	add	r7, sp, #0
 8005294:	6078      	str	r0, [r7, #4]
 8005296:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800529a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800529e:	2300      	movs	r3, #0
 80052a0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80052a6:	2300      	movs	r3, #0
 80052a8:	613b      	str	r3, [r7, #16]
 80052aa:	e009      	b.n	80052c0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80052ac:	687a      	ldr	r2, [r7, #4]
 80052ae:	693b      	ldr	r3, [r7, #16]
 80052b0:	3340      	adds	r3, #64	; 0x40
 80052b2:	009b      	lsls	r3, r3, #2
 80052b4:	4413      	add	r3, r2
 80052b6:	2200      	movs	r2, #0
 80052b8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80052ba:	693b      	ldr	r3, [r7, #16]
 80052bc:	3301      	adds	r3, #1
 80052be:	613b      	str	r3, [r7, #16]
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	2b0e      	cmp	r3, #14
 80052c4:	d9f2      	bls.n	80052ac <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80052c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d11c      	bne.n	8005306 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	68fa      	ldr	r2, [r7, #12]
 80052d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80052da:	f043 0302 	orr.w	r3, r3, #2
 80052de:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052e4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	601a      	str	r2, [r3, #0]
 8005304:	e005      	b.n	8005312 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800530a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005318:	461a      	mov	r2, r3
 800531a:	2300      	movs	r3, #0
 800531c:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800531e:	2103      	movs	r1, #3
 8005320:	6878      	ldr	r0, [r7, #4]
 8005322:	f000 f959 	bl	80055d8 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005326:	2110      	movs	r1, #16
 8005328:	6878      	ldr	r0, [r7, #4]
 800532a:	f000 f8f1 	bl	8005510 <USB_FlushTxFifo>
 800532e:	4603      	mov	r3, r0
 8005330:	2b00      	cmp	r3, #0
 8005332:	d001      	beq.n	8005338 <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 8005334:	2301      	movs	r3, #1
 8005336:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005338:	6878      	ldr	r0, [r7, #4]
 800533a:	f000 f91d 	bl	8005578 <USB_FlushRxFifo>
 800533e:	4603      	mov	r3, r0
 8005340:	2b00      	cmp	r3, #0
 8005342:	d001      	beq.n	8005348 <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 8005344:	2301      	movs	r3, #1
 8005346:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800534e:	461a      	mov	r2, r3
 8005350:	2300      	movs	r3, #0
 8005352:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800535a:	461a      	mov	r2, r3
 800535c:	2300      	movs	r3, #0
 800535e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005366:	461a      	mov	r2, r3
 8005368:	2300      	movs	r3, #0
 800536a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800536c:	2300      	movs	r3, #0
 800536e:	613b      	str	r3, [r7, #16]
 8005370:	e043      	b.n	80053fa <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	015a      	lsls	r2, r3, #5
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	4413      	add	r3, r2
 800537a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005384:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005388:	d118      	bne.n	80053bc <USB_DevInit+0x130>
    {
      if (i == 0U)
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d10a      	bne.n	80053a6 <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005390:	693b      	ldr	r3, [r7, #16]
 8005392:	015a      	lsls	r2, r3, #5
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	4413      	add	r3, r2
 8005398:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800539c:	461a      	mov	r2, r3
 800539e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80053a2:	6013      	str	r3, [r2, #0]
 80053a4:	e013      	b.n	80053ce <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80053a6:	693b      	ldr	r3, [r7, #16]
 80053a8:	015a      	lsls	r2, r3, #5
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	4413      	add	r3, r2
 80053ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053b2:	461a      	mov	r2, r3
 80053b4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80053b8:	6013      	str	r3, [r2, #0]
 80053ba:	e008      	b.n	80053ce <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	015a      	lsls	r2, r3, #5
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	4413      	add	r3, r2
 80053c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053c8:	461a      	mov	r2, r3
 80053ca:	2300      	movs	r3, #0
 80053cc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	015a      	lsls	r2, r3, #5
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	4413      	add	r3, r2
 80053d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053da:	461a      	mov	r2, r3
 80053dc:	2300      	movs	r3, #0
 80053de:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80053e0:	693b      	ldr	r3, [r7, #16]
 80053e2:	015a      	lsls	r2, r3, #5
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	4413      	add	r3, r2
 80053e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053ec:	461a      	mov	r2, r3
 80053ee:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80053f2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80053f4:	693b      	ldr	r3, [r7, #16]
 80053f6:	3301      	adds	r3, #1
 80053f8:	613b      	str	r3, [r7, #16]
 80053fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053fc:	693a      	ldr	r2, [r7, #16]
 80053fe:	429a      	cmp	r2, r3
 8005400:	d3b7      	bcc.n	8005372 <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005402:	2300      	movs	r3, #0
 8005404:	613b      	str	r3, [r7, #16]
 8005406:	e043      	b.n	8005490 <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005408:	693b      	ldr	r3, [r7, #16]
 800540a:	015a      	lsls	r2, r3, #5
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	4413      	add	r3, r2
 8005410:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800541a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800541e:	d118      	bne.n	8005452 <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 8005420:	693b      	ldr	r3, [r7, #16]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d10a      	bne.n	800543c <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005426:	693b      	ldr	r3, [r7, #16]
 8005428:	015a      	lsls	r2, r3, #5
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	4413      	add	r3, r2
 800542e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005432:	461a      	mov	r2, r3
 8005434:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005438:	6013      	str	r3, [r2, #0]
 800543a:	e013      	b.n	8005464 <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800543c:	693b      	ldr	r3, [r7, #16]
 800543e:	015a      	lsls	r2, r3, #5
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	4413      	add	r3, r2
 8005444:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005448:	461a      	mov	r2, r3
 800544a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800544e:	6013      	str	r3, [r2, #0]
 8005450:	e008      	b.n	8005464 <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	015a      	lsls	r2, r3, #5
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	4413      	add	r3, r2
 800545a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800545e:	461a      	mov	r2, r3
 8005460:	2300      	movs	r3, #0
 8005462:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005464:	693b      	ldr	r3, [r7, #16]
 8005466:	015a      	lsls	r2, r3, #5
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	4413      	add	r3, r2
 800546c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005470:	461a      	mov	r2, r3
 8005472:	2300      	movs	r3, #0
 8005474:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005476:	693b      	ldr	r3, [r7, #16]
 8005478:	015a      	lsls	r2, r3, #5
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	4413      	add	r3, r2
 800547e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005482:	461a      	mov	r2, r3
 8005484:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005488:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800548a:	693b      	ldr	r3, [r7, #16]
 800548c:	3301      	adds	r3, #1
 800548e:	613b      	str	r3, [r7, #16]
 8005490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005492:	693a      	ldr	r2, [r7, #16]
 8005494:	429a      	cmp	r2, r3
 8005496:	d3b7      	bcc.n	8005408 <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800549e:	691b      	ldr	r3, [r3, #16]
 80054a0:	68fa      	ldr	r2, [r7, #12]
 80054a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80054a6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80054aa:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2200      	movs	r2, #0
 80054b0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80054b8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	699b      	ldr	r3, [r3, #24]
 80054be:	f043 0210 	orr.w	r2, r3, #16
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	699a      	ldr	r2, [r3, #24]
 80054ca:	4b10      	ldr	r3, [pc, #64]	; (800550c <USB_DevInit+0x280>)
 80054cc:	4313      	orrs	r3, r2
 80054ce:	687a      	ldr	r2, [r7, #4]
 80054d0:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80054d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d005      	beq.n	80054e4 <USB_DevInit+0x258>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	699b      	ldr	r3, [r3, #24]
 80054dc:	f043 0208 	orr.w	r2, r3, #8
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80054e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054e6:	2b01      	cmp	r3, #1
 80054e8:	d107      	bne.n	80054fa <USB_DevInit+0x26e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	699b      	ldr	r3, [r3, #24]
 80054ee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80054f2:	f043 0304 	orr.w	r3, r3, #4
 80054f6:	687a      	ldr	r2, [r7, #4]
 80054f8:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80054fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80054fc:	4618      	mov	r0, r3
 80054fe:	3718      	adds	r7, #24
 8005500:	46bd      	mov	sp, r7
 8005502:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005506:	b004      	add	sp, #16
 8005508:	4770      	bx	lr
 800550a:	bf00      	nop
 800550c:	803c3800 	.word	0x803c3800

08005510 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005510:	b480      	push	{r7}
 8005512:	b085      	sub	sp, #20
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
 8005518:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800551a:	2300      	movs	r3, #0
 800551c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	3301      	adds	r3, #1
 8005522:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	4a13      	ldr	r2, [pc, #76]	; (8005574 <USB_FlushTxFifo+0x64>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d901      	bls.n	8005530 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800552c:	2303      	movs	r3, #3
 800552e:	e01b      	b.n	8005568 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	691b      	ldr	r3, [r3, #16]
 8005534:	2b00      	cmp	r3, #0
 8005536:	daf2      	bge.n	800551e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005538:	2300      	movs	r3, #0
 800553a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	019b      	lsls	r3, r3, #6
 8005540:	f043 0220 	orr.w	r2, r3, #32
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	3301      	adds	r3, #1
 800554c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	4a08      	ldr	r2, [pc, #32]	; (8005574 <USB_FlushTxFifo+0x64>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d901      	bls.n	800555a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005556:	2303      	movs	r3, #3
 8005558:	e006      	b.n	8005568 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	691b      	ldr	r3, [r3, #16]
 800555e:	f003 0320 	and.w	r3, r3, #32
 8005562:	2b20      	cmp	r3, #32
 8005564:	d0f0      	beq.n	8005548 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005566:	2300      	movs	r3, #0
}
 8005568:	4618      	mov	r0, r3
 800556a:	3714      	adds	r7, #20
 800556c:	46bd      	mov	sp, r7
 800556e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005572:	4770      	bx	lr
 8005574:	00030d40 	.word	0x00030d40

08005578 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005578:	b480      	push	{r7}
 800557a:	b085      	sub	sp, #20
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005580:	2300      	movs	r3, #0
 8005582:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	3301      	adds	r3, #1
 8005588:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	4a11      	ldr	r2, [pc, #68]	; (80055d4 <USB_FlushRxFifo+0x5c>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d901      	bls.n	8005596 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005592:	2303      	movs	r3, #3
 8005594:	e018      	b.n	80055c8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	691b      	ldr	r3, [r3, #16]
 800559a:	2b00      	cmp	r3, #0
 800559c:	daf2      	bge.n	8005584 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800559e:	2300      	movs	r3, #0
 80055a0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2210      	movs	r2, #16
 80055a6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	3301      	adds	r3, #1
 80055ac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	4a08      	ldr	r2, [pc, #32]	; (80055d4 <USB_FlushRxFifo+0x5c>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d901      	bls.n	80055ba <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80055b6:	2303      	movs	r3, #3
 80055b8:	e006      	b.n	80055c8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	691b      	ldr	r3, [r3, #16]
 80055be:	f003 0310 	and.w	r3, r3, #16
 80055c2:	2b10      	cmp	r3, #16
 80055c4:	d0f0      	beq.n	80055a8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80055c6:	2300      	movs	r3, #0
}
 80055c8:	4618      	mov	r0, r3
 80055ca:	3714      	adds	r7, #20
 80055cc:	46bd      	mov	sp, r7
 80055ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d2:	4770      	bx	lr
 80055d4:	00030d40 	.word	0x00030d40

080055d8 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80055d8:	b480      	push	{r7}
 80055da:	b085      	sub	sp, #20
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
 80055e0:	460b      	mov	r3, r1
 80055e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055ee:	681a      	ldr	r2, [r3, #0]
 80055f0:	78fb      	ldrb	r3, [r7, #3]
 80055f2:	68f9      	ldr	r1, [r7, #12]
 80055f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80055f8:	4313      	orrs	r3, r2
 80055fa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80055fc:	2300      	movs	r3, #0
}
 80055fe:	4618      	mov	r0, r3
 8005600:	3714      	adds	r7, #20
 8005602:	46bd      	mov	sp, r7
 8005604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005608:	4770      	bx	lr

0800560a <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800560a:	b480      	push	{r7}
 800560c:	b087      	sub	sp, #28
 800560e:	af00      	add	r7, sp, #0
 8005610:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005616:	693b      	ldr	r3, [r7, #16]
 8005618:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800561c:	689b      	ldr	r3, [r3, #8]
 800561e:	f003 0306 	and.w	r3, r3, #6
 8005622:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2b02      	cmp	r3, #2
 8005628:	d002      	beq.n	8005630 <USB_GetDevSpeed+0x26>
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	2b06      	cmp	r3, #6
 800562e:	d102      	bne.n	8005636 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005630:	2302      	movs	r3, #2
 8005632:	75fb      	strb	r3, [r7, #23]
 8005634:	e001      	b.n	800563a <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 8005636:	230f      	movs	r3, #15
 8005638:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800563a:	7dfb      	ldrb	r3, [r7, #23]
}
 800563c:	4618      	mov	r0, r3
 800563e:	371c      	adds	r7, #28
 8005640:	46bd      	mov	sp, r7
 8005642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005646:	4770      	bx	lr

08005648 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005648:	b480      	push	{r7}
 800564a:	b085      	sub	sp, #20
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
 8005650:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	781b      	ldrb	r3, [r3, #0]
 800565a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	785b      	ldrb	r3, [r3, #1]
 8005660:	2b01      	cmp	r3, #1
 8005662:	d13a      	bne.n	80056da <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800566a:	69da      	ldr	r2, [r3, #28]
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	781b      	ldrb	r3, [r3, #0]
 8005670:	f003 030f 	and.w	r3, r3, #15
 8005674:	2101      	movs	r1, #1
 8005676:	fa01 f303 	lsl.w	r3, r1, r3
 800567a:	b29b      	uxth	r3, r3
 800567c:	68f9      	ldr	r1, [r7, #12]
 800567e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005682:	4313      	orrs	r3, r2
 8005684:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	015a      	lsls	r2, r3, #5
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	4413      	add	r3, r2
 800568e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005698:	2b00      	cmp	r3, #0
 800569a:	d155      	bne.n	8005748 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	015a      	lsls	r2, r3, #5
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	4413      	add	r3, r2
 80056a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056a8:	681a      	ldr	r2, [r3, #0]
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	689b      	ldr	r3, [r3, #8]
 80056ae:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	791b      	ldrb	r3, [r3, #4]
 80056b6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80056b8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	059b      	lsls	r3, r3, #22
 80056be:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80056c0:	4313      	orrs	r3, r2
 80056c2:	68ba      	ldr	r2, [r7, #8]
 80056c4:	0151      	lsls	r1, r2, #5
 80056c6:	68fa      	ldr	r2, [r7, #12]
 80056c8:	440a      	add	r2, r1
 80056ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056d6:	6013      	str	r3, [r2, #0]
 80056d8:	e036      	b.n	8005748 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056e0:	69da      	ldr	r2, [r3, #28]
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	781b      	ldrb	r3, [r3, #0]
 80056e6:	f003 030f 	and.w	r3, r3, #15
 80056ea:	2101      	movs	r1, #1
 80056ec:	fa01 f303 	lsl.w	r3, r1, r3
 80056f0:	041b      	lsls	r3, r3, #16
 80056f2:	68f9      	ldr	r1, [r7, #12]
 80056f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80056f8:	4313      	orrs	r3, r2
 80056fa:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	015a      	lsls	r2, r3, #5
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	4413      	add	r3, r2
 8005704:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800570e:	2b00      	cmp	r3, #0
 8005710:	d11a      	bne.n	8005748 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	015a      	lsls	r2, r3, #5
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	4413      	add	r3, r2
 800571a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800571e:	681a      	ldr	r2, [r3, #0]
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	689b      	ldr	r3, [r3, #8]
 8005724:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	791b      	ldrb	r3, [r3, #4]
 800572c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800572e:	430b      	orrs	r3, r1
 8005730:	4313      	orrs	r3, r2
 8005732:	68ba      	ldr	r2, [r7, #8]
 8005734:	0151      	lsls	r1, r2, #5
 8005736:	68fa      	ldr	r2, [r7, #12]
 8005738:	440a      	add	r2, r1
 800573a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800573e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005742:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005746:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005748:	2300      	movs	r3, #0
}
 800574a:	4618      	mov	r0, r3
 800574c:	3714      	adds	r7, #20
 800574e:	46bd      	mov	sp, r7
 8005750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005754:	4770      	bx	lr
	...

08005758 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005758:	b480      	push	{r7}
 800575a:	b085      	sub	sp, #20
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
 8005760:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	781b      	ldrb	r3, [r3, #0]
 800576a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	785b      	ldrb	r3, [r3, #1]
 8005770:	2b01      	cmp	r3, #1
 8005772:	d161      	bne.n	8005838 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	015a      	lsls	r2, r3, #5
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	4413      	add	r3, r2
 800577c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005786:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800578a:	d11f      	bne.n	80057cc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	015a      	lsls	r2, r3, #5
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	4413      	add	r3, r2
 8005794:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	68ba      	ldr	r2, [r7, #8]
 800579c:	0151      	lsls	r1, r2, #5
 800579e:	68fa      	ldr	r2, [r7, #12]
 80057a0:	440a      	add	r2, r1
 80057a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057a6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80057aa:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	015a      	lsls	r2, r3, #5
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	4413      	add	r3, r2
 80057b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	68ba      	ldr	r2, [r7, #8]
 80057bc:	0151      	lsls	r1, r2, #5
 80057be:	68fa      	ldr	r2, [r7, #12]
 80057c0:	440a      	add	r2, r1
 80057c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057c6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80057ca:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	781b      	ldrb	r3, [r3, #0]
 80057d8:	f003 030f 	and.w	r3, r3, #15
 80057dc:	2101      	movs	r1, #1
 80057de:	fa01 f303 	lsl.w	r3, r1, r3
 80057e2:	b29b      	uxth	r3, r3
 80057e4:	43db      	mvns	r3, r3
 80057e6:	68f9      	ldr	r1, [r7, #12]
 80057e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80057ec:	4013      	ands	r3, r2
 80057ee:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057f6:	69da      	ldr	r2, [r3, #28]
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	781b      	ldrb	r3, [r3, #0]
 80057fc:	f003 030f 	and.w	r3, r3, #15
 8005800:	2101      	movs	r1, #1
 8005802:	fa01 f303 	lsl.w	r3, r1, r3
 8005806:	b29b      	uxth	r3, r3
 8005808:	43db      	mvns	r3, r3
 800580a:	68f9      	ldr	r1, [r7, #12]
 800580c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005810:	4013      	ands	r3, r2
 8005812:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	015a      	lsls	r2, r3, #5
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	4413      	add	r3, r2
 800581c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005820:	681a      	ldr	r2, [r3, #0]
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	0159      	lsls	r1, r3, #5
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	440b      	add	r3, r1
 800582a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800582e:	4619      	mov	r1, r3
 8005830:	4b35      	ldr	r3, [pc, #212]	; (8005908 <USB_DeactivateEndpoint+0x1b0>)
 8005832:	4013      	ands	r3, r2
 8005834:	600b      	str	r3, [r1, #0]
 8005836:	e060      	b.n	80058fa <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	015a      	lsls	r2, r3, #5
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	4413      	add	r3, r2
 8005840:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800584a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800584e:	d11f      	bne.n	8005890 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	015a      	lsls	r2, r3, #5
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	4413      	add	r3, r2
 8005858:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	68ba      	ldr	r2, [r7, #8]
 8005860:	0151      	lsls	r1, r2, #5
 8005862:	68fa      	ldr	r2, [r7, #12]
 8005864:	440a      	add	r2, r1
 8005866:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800586a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800586e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	015a      	lsls	r2, r3, #5
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	4413      	add	r3, r2
 8005878:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	68ba      	ldr	r2, [r7, #8]
 8005880:	0151      	lsls	r1, r2, #5
 8005882:	68fa      	ldr	r2, [r7, #12]
 8005884:	440a      	add	r2, r1
 8005886:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800588a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800588e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005896:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	781b      	ldrb	r3, [r3, #0]
 800589c:	f003 030f 	and.w	r3, r3, #15
 80058a0:	2101      	movs	r1, #1
 80058a2:	fa01 f303 	lsl.w	r3, r1, r3
 80058a6:	041b      	lsls	r3, r3, #16
 80058a8:	43db      	mvns	r3, r3
 80058aa:	68f9      	ldr	r1, [r7, #12]
 80058ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80058b0:	4013      	ands	r3, r2
 80058b2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058ba:	69da      	ldr	r2, [r3, #28]
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	781b      	ldrb	r3, [r3, #0]
 80058c0:	f003 030f 	and.w	r3, r3, #15
 80058c4:	2101      	movs	r1, #1
 80058c6:	fa01 f303 	lsl.w	r3, r1, r3
 80058ca:	041b      	lsls	r3, r3, #16
 80058cc:	43db      	mvns	r3, r3
 80058ce:	68f9      	ldr	r1, [r7, #12]
 80058d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80058d4:	4013      	ands	r3, r2
 80058d6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	015a      	lsls	r2, r3, #5
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	4413      	add	r3, r2
 80058e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058e4:	681a      	ldr	r2, [r3, #0]
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	0159      	lsls	r1, r3, #5
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	440b      	add	r3, r1
 80058ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058f2:	4619      	mov	r1, r3
 80058f4:	4b05      	ldr	r3, [pc, #20]	; (800590c <USB_DeactivateEndpoint+0x1b4>)
 80058f6:	4013      	ands	r3, r2
 80058f8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80058fa:	2300      	movs	r3, #0
}
 80058fc:	4618      	mov	r0, r3
 80058fe:	3714      	adds	r7, #20
 8005900:	46bd      	mov	sp, r7
 8005902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005906:	4770      	bx	lr
 8005908:	ec337800 	.word	0xec337800
 800590c:	eff37800 	.word	0xeff37800

08005910 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b086      	sub	sp, #24
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
 8005918:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	781b      	ldrb	r3, [r3, #0]
 8005922:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	785b      	ldrb	r3, [r3, #1]
 8005928:	2b01      	cmp	r3, #1
 800592a:	f040 8128 	bne.w	8005b7e <USB_EPStartXfer+0x26e>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	691b      	ldr	r3, [r3, #16]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d132      	bne.n	800599c <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005936:	693b      	ldr	r3, [r7, #16]
 8005938:	015a      	lsls	r2, r3, #5
 800593a:	697b      	ldr	r3, [r7, #20]
 800593c:	4413      	add	r3, r2
 800593e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005942:	691b      	ldr	r3, [r3, #16]
 8005944:	693a      	ldr	r2, [r7, #16]
 8005946:	0151      	lsls	r1, r2, #5
 8005948:	697a      	ldr	r2, [r7, #20]
 800594a:	440a      	add	r2, r1
 800594c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005950:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005954:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005958:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	015a      	lsls	r2, r3, #5
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	4413      	add	r3, r2
 8005962:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005966:	691b      	ldr	r3, [r3, #16]
 8005968:	693a      	ldr	r2, [r7, #16]
 800596a:	0151      	lsls	r1, r2, #5
 800596c:	697a      	ldr	r2, [r7, #20]
 800596e:	440a      	add	r2, r1
 8005970:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005974:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005978:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800597a:	693b      	ldr	r3, [r7, #16]
 800597c:	015a      	lsls	r2, r3, #5
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	4413      	add	r3, r2
 8005982:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005986:	691b      	ldr	r3, [r3, #16]
 8005988:	693a      	ldr	r2, [r7, #16]
 800598a:	0151      	lsls	r1, r2, #5
 800598c:	697a      	ldr	r2, [r7, #20]
 800598e:	440a      	add	r2, r1
 8005990:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005994:	0cdb      	lsrs	r3, r3, #19
 8005996:	04db      	lsls	r3, r3, #19
 8005998:	6113      	str	r3, [r2, #16]
 800599a:	e092      	b.n	8005ac2 <USB_EPStartXfer+0x1b2>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800599c:	693b      	ldr	r3, [r7, #16]
 800599e:	015a      	lsls	r2, r3, #5
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	4413      	add	r3, r2
 80059a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059a8:	691b      	ldr	r3, [r3, #16]
 80059aa:	693a      	ldr	r2, [r7, #16]
 80059ac:	0151      	lsls	r1, r2, #5
 80059ae:	697a      	ldr	r2, [r7, #20]
 80059b0:	440a      	add	r2, r1
 80059b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059b6:	0cdb      	lsrs	r3, r3, #19
 80059b8:	04db      	lsls	r3, r3, #19
 80059ba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80059bc:	693b      	ldr	r3, [r7, #16]
 80059be:	015a      	lsls	r2, r3, #5
 80059c0:	697b      	ldr	r3, [r7, #20]
 80059c2:	4413      	add	r3, r2
 80059c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059c8:	691b      	ldr	r3, [r3, #16]
 80059ca:	693a      	ldr	r2, [r7, #16]
 80059cc:	0151      	lsls	r1, r2, #5
 80059ce:	697a      	ldr	r2, [r7, #20]
 80059d0:	440a      	add	r2, r1
 80059d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059d6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80059da:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80059de:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d11a      	bne.n	8005a1c <USB_EPStartXfer+0x10c>
      {
        if (ep->xfer_len > ep->maxpacket)
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	691a      	ldr	r2, [r3, #16]
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	689b      	ldr	r3, [r3, #8]
 80059ee:	429a      	cmp	r2, r3
 80059f0:	d903      	bls.n	80059fa <USB_EPStartXfer+0xea>
        {
          ep->xfer_len = ep->maxpacket;
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	689a      	ldr	r2, [r3, #8]
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80059fa:	693b      	ldr	r3, [r7, #16]
 80059fc:	015a      	lsls	r2, r3, #5
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	4413      	add	r3, r2
 8005a02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a06:	691b      	ldr	r3, [r3, #16]
 8005a08:	693a      	ldr	r2, [r7, #16]
 8005a0a:	0151      	lsls	r1, r2, #5
 8005a0c:	697a      	ldr	r2, [r7, #20]
 8005a0e:	440a      	add	r2, r1
 8005a10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a14:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005a18:	6113      	str	r3, [r2, #16]
 8005a1a:	e01b      	b.n	8005a54 <USB_EPStartXfer+0x144>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	015a      	lsls	r2, r3, #5
 8005a20:	697b      	ldr	r3, [r7, #20]
 8005a22:	4413      	add	r3, r2
 8005a24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a28:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	6919      	ldr	r1, [r3, #16]
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	689b      	ldr	r3, [r3, #8]
 8005a32:	440b      	add	r3, r1
 8005a34:	1e59      	subs	r1, r3, #1
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	689b      	ldr	r3, [r3, #8]
 8005a3a:	fbb1 f3f3 	udiv	r3, r1, r3
 8005a3e:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005a40:	4b8d      	ldr	r3, [pc, #564]	; (8005c78 <USB_EPStartXfer+0x368>)
 8005a42:	400b      	ands	r3, r1
 8005a44:	6939      	ldr	r1, [r7, #16]
 8005a46:	0148      	lsls	r0, r1, #5
 8005a48:	6979      	ldr	r1, [r7, #20]
 8005a4a:	4401      	add	r1, r0
 8005a4c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005a50:	4313      	orrs	r3, r2
 8005a52:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	015a      	lsls	r2, r3, #5
 8005a58:	697b      	ldr	r3, [r7, #20]
 8005a5a:	4413      	add	r3, r2
 8005a5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a60:	691a      	ldr	r2, [r3, #16]
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	691b      	ldr	r3, [r3, #16]
 8005a66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a6a:	6939      	ldr	r1, [r7, #16]
 8005a6c:	0148      	lsls	r0, r1, #5
 8005a6e:	6979      	ldr	r1, [r7, #20]
 8005a70:	4401      	add	r1, r0
 8005a72:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005a76:	4313      	orrs	r3, r2
 8005a78:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	791b      	ldrb	r3, [r3, #4]
 8005a7e:	2b01      	cmp	r3, #1
 8005a80:	d11f      	bne.n	8005ac2 <USB_EPStartXfer+0x1b2>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005a82:	693b      	ldr	r3, [r7, #16]
 8005a84:	015a      	lsls	r2, r3, #5
 8005a86:	697b      	ldr	r3, [r7, #20]
 8005a88:	4413      	add	r3, r2
 8005a8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a8e:	691b      	ldr	r3, [r3, #16]
 8005a90:	693a      	ldr	r2, [r7, #16]
 8005a92:	0151      	lsls	r1, r2, #5
 8005a94:	697a      	ldr	r2, [r7, #20]
 8005a96:	440a      	add	r2, r1
 8005a98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a9c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005aa0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005aa2:	693b      	ldr	r3, [r7, #16]
 8005aa4:	015a      	lsls	r2, r3, #5
 8005aa6:	697b      	ldr	r3, [r7, #20]
 8005aa8:	4413      	add	r3, r2
 8005aaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005aae:	691b      	ldr	r3, [r3, #16]
 8005ab0:	693a      	ldr	r2, [r7, #16]
 8005ab2:	0151      	lsls	r1, r2, #5
 8005ab4:	697a      	ldr	r2, [r7, #20]
 8005ab6:	440a      	add	r2, r1
 8005ab8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005abc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005ac0:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	015a      	lsls	r2, r3, #5
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	4413      	add	r3, r2
 8005aca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	693a      	ldr	r2, [r7, #16]
 8005ad2:	0151      	lsls	r1, r2, #5
 8005ad4:	697a      	ldr	r2, [r7, #20]
 8005ad6:	440a      	add	r2, r1
 8005ad8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005adc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005ae0:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	791b      	ldrb	r3, [r3, #4]
 8005ae6:	2b01      	cmp	r3, #1
 8005ae8:	d015      	beq.n	8005b16 <USB_EPStartXfer+0x206>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	691b      	ldr	r3, [r3, #16]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	f000 8139 	beq.w	8005d66 <USB_EPStartXfer+0x456>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005af4:	697b      	ldr	r3, [r7, #20]
 8005af6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005afa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	781b      	ldrb	r3, [r3, #0]
 8005b00:	f003 030f 	and.w	r3, r3, #15
 8005b04:	2101      	movs	r1, #1
 8005b06:	fa01 f303 	lsl.w	r3, r1, r3
 8005b0a:	6979      	ldr	r1, [r7, #20]
 8005b0c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b10:	4313      	orrs	r3, r2
 8005b12:	634b      	str	r3, [r1, #52]	; 0x34
 8005b14:	e127      	b.n	8005d66 <USB_EPStartXfer+0x456>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b1c:	689b      	ldr	r3, [r3, #8]
 8005b1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d110      	bne.n	8005b48 <USB_EPStartXfer+0x238>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005b26:	693b      	ldr	r3, [r7, #16]
 8005b28:	015a      	lsls	r2, r3, #5
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	4413      	add	r3, r2
 8005b2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	693a      	ldr	r2, [r7, #16]
 8005b36:	0151      	lsls	r1, r2, #5
 8005b38:	697a      	ldr	r2, [r7, #20]
 8005b3a:	440a      	add	r2, r1
 8005b3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b40:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005b44:	6013      	str	r3, [r2, #0]
 8005b46:	e00f      	b.n	8005b68 <USB_EPStartXfer+0x258>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005b48:	693b      	ldr	r3, [r7, #16]
 8005b4a:	015a      	lsls	r2, r3, #5
 8005b4c:	697b      	ldr	r3, [r7, #20]
 8005b4e:	4413      	add	r3, r2
 8005b50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	693a      	ldr	r2, [r7, #16]
 8005b58:	0151      	lsls	r1, r2, #5
 8005b5a:	697a      	ldr	r2, [r7, #20]
 8005b5c:	440a      	add	r2, r1
 8005b5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b66:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	68d9      	ldr	r1, [r3, #12]
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	781a      	ldrb	r2, [r3, #0]
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	691b      	ldr	r3, [r3, #16]
 8005b74:	b29b      	uxth	r3, r3
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f000 f9a6 	bl	8005ec8 <USB_WritePacket>
 8005b7c:	e0f3      	b.n	8005d66 <USB_EPStartXfer+0x456>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005b7e:	693b      	ldr	r3, [r7, #16]
 8005b80:	015a      	lsls	r2, r3, #5
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	4413      	add	r3, r2
 8005b86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b8a:	691b      	ldr	r3, [r3, #16]
 8005b8c:	693a      	ldr	r2, [r7, #16]
 8005b8e:	0151      	lsls	r1, r2, #5
 8005b90:	697a      	ldr	r2, [r7, #20]
 8005b92:	440a      	add	r2, r1
 8005b94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b98:	0cdb      	lsrs	r3, r3, #19
 8005b9a:	04db      	lsls	r3, r3, #19
 8005b9c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	015a      	lsls	r2, r3, #5
 8005ba2:	697b      	ldr	r3, [r7, #20]
 8005ba4:	4413      	add	r3, r2
 8005ba6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005baa:	691b      	ldr	r3, [r3, #16]
 8005bac:	693a      	ldr	r2, [r7, #16]
 8005bae:	0151      	lsls	r1, r2, #5
 8005bb0:	697a      	ldr	r2, [r7, #20]
 8005bb2:	440a      	add	r2, r1
 8005bb4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bb8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005bbc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005bc0:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8005bc2:	693b      	ldr	r3, [r7, #16]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d12f      	bne.n	8005c28 <USB_EPStartXfer+0x318>
    {
      if (ep->xfer_len > 0U)
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	691b      	ldr	r3, [r3, #16]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d003      	beq.n	8005bd8 <USB_EPStartXfer+0x2c8>
      {
        ep->xfer_len = ep->maxpacket;
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	689a      	ldr	r2, [r3, #8]
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	689a      	ldr	r2, [r3, #8]
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005be0:	693b      	ldr	r3, [r7, #16]
 8005be2:	015a      	lsls	r2, r3, #5
 8005be4:	697b      	ldr	r3, [r7, #20]
 8005be6:	4413      	add	r3, r2
 8005be8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bec:	691a      	ldr	r2, [r3, #16]
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	6a1b      	ldr	r3, [r3, #32]
 8005bf2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005bf6:	6939      	ldr	r1, [r7, #16]
 8005bf8:	0148      	lsls	r0, r1, #5
 8005bfa:	6979      	ldr	r1, [r7, #20]
 8005bfc:	4401      	add	r1, r0
 8005bfe:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005c02:	4313      	orrs	r3, r2
 8005c04:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	015a      	lsls	r2, r3, #5
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	4413      	add	r3, r2
 8005c0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c12:	691b      	ldr	r3, [r3, #16]
 8005c14:	693a      	ldr	r2, [r7, #16]
 8005c16:	0151      	lsls	r1, r2, #5
 8005c18:	697a      	ldr	r2, [r7, #20]
 8005c1a:	440a      	add	r2, r1
 8005c1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c20:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005c24:	6113      	str	r3, [r2, #16]
 8005c26:	e061      	b.n	8005cec <USB_EPStartXfer+0x3dc>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	691b      	ldr	r3, [r3, #16]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d125      	bne.n	8005c7c <USB_EPStartXfer+0x36c>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005c30:	693b      	ldr	r3, [r7, #16]
 8005c32:	015a      	lsls	r2, r3, #5
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	4413      	add	r3, r2
 8005c38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c3c:	691a      	ldr	r2, [r3, #16]
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	689b      	ldr	r3, [r3, #8]
 8005c42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c46:	6939      	ldr	r1, [r7, #16]
 8005c48:	0148      	lsls	r0, r1, #5
 8005c4a:	6979      	ldr	r1, [r7, #20]
 8005c4c:	4401      	add	r1, r0
 8005c4e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005c52:	4313      	orrs	r3, r2
 8005c54:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005c56:	693b      	ldr	r3, [r7, #16]
 8005c58:	015a      	lsls	r2, r3, #5
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	4413      	add	r3, r2
 8005c5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c62:	691b      	ldr	r3, [r3, #16]
 8005c64:	693a      	ldr	r2, [r7, #16]
 8005c66:	0151      	lsls	r1, r2, #5
 8005c68:	697a      	ldr	r2, [r7, #20]
 8005c6a:	440a      	add	r2, r1
 8005c6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c70:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005c74:	6113      	str	r3, [r2, #16]
 8005c76:	e039      	b.n	8005cec <USB_EPStartXfer+0x3dc>
 8005c78:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	691a      	ldr	r2, [r3, #16]
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	689b      	ldr	r3, [r3, #8]
 8005c84:	4413      	add	r3, r2
 8005c86:	1e5a      	subs	r2, r3, #1
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	689b      	ldr	r3, [r3, #8]
 8005c8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c90:	81fb      	strh	r3, [r7, #14]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	689b      	ldr	r3, [r3, #8]
 8005c96:	89fa      	ldrh	r2, [r7, #14]
 8005c98:	fb03 f202 	mul.w	r2, r3, r2
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	015a      	lsls	r2, r3, #5
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	4413      	add	r3, r2
 8005ca8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cac:	691a      	ldr	r2, [r3, #16]
 8005cae:	89fb      	ldrh	r3, [r7, #14]
 8005cb0:	04d9      	lsls	r1, r3, #19
 8005cb2:	4b2f      	ldr	r3, [pc, #188]	; (8005d70 <USB_EPStartXfer+0x460>)
 8005cb4:	400b      	ands	r3, r1
 8005cb6:	6939      	ldr	r1, [r7, #16]
 8005cb8:	0148      	lsls	r0, r1, #5
 8005cba:	6979      	ldr	r1, [r7, #20]
 8005cbc:	4401      	add	r1, r0
 8005cbe:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005cc2:	4313      	orrs	r3, r2
 8005cc4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	015a      	lsls	r2, r3, #5
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	4413      	add	r3, r2
 8005cce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cd2:	691a      	ldr	r2, [r3, #16]
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	6a1b      	ldr	r3, [r3, #32]
 8005cd8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005cdc:	6939      	ldr	r1, [r7, #16]
 8005cde:	0148      	lsls	r0, r1, #5
 8005ce0:	6979      	ldr	r1, [r7, #20]
 8005ce2:	4401      	add	r1, r0
 8005ce4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	610b      	str	r3, [r1, #16]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	791b      	ldrb	r3, [r3, #4]
 8005cf0:	2b01      	cmp	r3, #1
 8005cf2:	d128      	bne.n	8005d46 <USB_EPStartXfer+0x436>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cfa:	689b      	ldr	r3, [r3, #8]
 8005cfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d110      	bne.n	8005d26 <USB_EPStartXfer+0x416>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005d04:	693b      	ldr	r3, [r7, #16]
 8005d06:	015a      	lsls	r2, r3, #5
 8005d08:	697b      	ldr	r3, [r7, #20]
 8005d0a:	4413      	add	r3, r2
 8005d0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	693a      	ldr	r2, [r7, #16]
 8005d14:	0151      	lsls	r1, r2, #5
 8005d16:	697a      	ldr	r2, [r7, #20]
 8005d18:	440a      	add	r2, r1
 8005d1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d1e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005d22:	6013      	str	r3, [r2, #0]
 8005d24:	e00f      	b.n	8005d46 <USB_EPStartXfer+0x436>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005d26:	693b      	ldr	r3, [r7, #16]
 8005d28:	015a      	lsls	r2, r3, #5
 8005d2a:	697b      	ldr	r3, [r7, #20]
 8005d2c:	4413      	add	r3, r2
 8005d2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	693a      	ldr	r2, [r7, #16]
 8005d36:	0151      	lsls	r1, r2, #5
 8005d38:	697a      	ldr	r2, [r7, #20]
 8005d3a:	440a      	add	r2, r1
 8005d3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d44:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005d46:	693b      	ldr	r3, [r7, #16]
 8005d48:	015a      	lsls	r2, r3, #5
 8005d4a:	697b      	ldr	r3, [r7, #20]
 8005d4c:	4413      	add	r3, r2
 8005d4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	693a      	ldr	r2, [r7, #16]
 8005d56:	0151      	lsls	r1, r2, #5
 8005d58:	697a      	ldr	r2, [r7, #20]
 8005d5a:	440a      	add	r2, r1
 8005d5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d60:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005d64:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005d66:	2300      	movs	r3, #0
}
 8005d68:	4618      	mov	r0, r3
 8005d6a:	3718      	adds	r7, #24
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	bd80      	pop	{r7, pc}
 8005d70:	1ff80000 	.word	0x1ff80000

08005d74 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005d74:	b480      	push	{r7}
 8005d76:	b087      	sub	sp, #28
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
 8005d7c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005d7e:	2300      	movs	r3, #0
 8005d80:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005d82:	2300      	movs	r3, #0
 8005d84:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	785b      	ldrb	r3, [r3, #1]
 8005d8e:	2b01      	cmp	r3, #1
 8005d90:	d14a      	bne.n	8005e28 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	781b      	ldrb	r3, [r3, #0]
 8005d96:	015a      	lsls	r2, r3, #5
 8005d98:	693b      	ldr	r3, [r7, #16]
 8005d9a:	4413      	add	r3, r2
 8005d9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005da6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005daa:	f040 8086 	bne.w	8005eba <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	781b      	ldrb	r3, [r3, #0]
 8005db2:	015a      	lsls	r2, r3, #5
 8005db4:	693b      	ldr	r3, [r7, #16]
 8005db6:	4413      	add	r3, r2
 8005db8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	683a      	ldr	r2, [r7, #0]
 8005dc0:	7812      	ldrb	r2, [r2, #0]
 8005dc2:	0151      	lsls	r1, r2, #5
 8005dc4:	693a      	ldr	r2, [r7, #16]
 8005dc6:	440a      	add	r2, r1
 8005dc8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005dcc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005dd0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	781b      	ldrb	r3, [r3, #0]
 8005dd6:	015a      	lsls	r2, r3, #5
 8005dd8:	693b      	ldr	r3, [r7, #16]
 8005dda:	4413      	add	r3, r2
 8005ddc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	683a      	ldr	r2, [r7, #0]
 8005de4:	7812      	ldrb	r2, [r2, #0]
 8005de6:	0151      	lsls	r1, r2, #5
 8005de8:	693a      	ldr	r2, [r7, #16]
 8005dea:	440a      	add	r2, r1
 8005dec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005df0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005df4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	3301      	adds	r3, #1
 8005dfa:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	f242 7210 	movw	r2, #10000	; 0x2710
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d902      	bls.n	8005e0c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005e06:	2301      	movs	r3, #1
 8005e08:	75fb      	strb	r3, [r7, #23]
          break;
 8005e0a:	e056      	b.n	8005eba <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	781b      	ldrb	r3, [r3, #0]
 8005e10:	015a      	lsls	r2, r3, #5
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	4413      	add	r3, r2
 8005e16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e20:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e24:	d0e7      	beq.n	8005df6 <USB_EPStopXfer+0x82>
 8005e26:	e048      	b.n	8005eba <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	781b      	ldrb	r3, [r3, #0]
 8005e2c:	015a      	lsls	r2, r3, #5
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	4413      	add	r3, r2
 8005e32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e3c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e40:	d13b      	bne.n	8005eba <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	781b      	ldrb	r3, [r3, #0]
 8005e46:	015a      	lsls	r2, r3, #5
 8005e48:	693b      	ldr	r3, [r7, #16]
 8005e4a:	4413      	add	r3, r2
 8005e4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	683a      	ldr	r2, [r7, #0]
 8005e54:	7812      	ldrb	r2, [r2, #0]
 8005e56:	0151      	lsls	r1, r2, #5
 8005e58:	693a      	ldr	r2, [r7, #16]
 8005e5a:	440a      	add	r2, r1
 8005e5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e60:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005e64:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	781b      	ldrb	r3, [r3, #0]
 8005e6a:	015a      	lsls	r2, r3, #5
 8005e6c:	693b      	ldr	r3, [r7, #16]
 8005e6e:	4413      	add	r3, r2
 8005e70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	683a      	ldr	r2, [r7, #0]
 8005e78:	7812      	ldrb	r2, [r2, #0]
 8005e7a:	0151      	lsls	r1, r2, #5
 8005e7c:	693a      	ldr	r2, [r7, #16]
 8005e7e:	440a      	add	r2, r1
 8005e80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e84:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005e88:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	3301      	adds	r3, #1
 8005e8e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	f242 7210 	movw	r2, #10000	; 0x2710
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d902      	bls.n	8005ea0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	75fb      	strb	r3, [r7, #23]
          break;
 8005e9e:	e00c      	b.n	8005eba <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	781b      	ldrb	r3, [r3, #0]
 8005ea4:	015a      	lsls	r2, r3, #5
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	4413      	add	r3, r2
 8005eaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005eb4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005eb8:	d0e7      	beq.n	8005e8a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005eba:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	371c      	adds	r7, #28
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec6:	4770      	bx	lr

08005ec8 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b089      	sub	sp, #36	; 0x24
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	60f8      	str	r0, [r7, #12]
 8005ed0:	60b9      	str	r1, [r7, #8]
 8005ed2:	4611      	mov	r1, r2
 8005ed4:	461a      	mov	r2, r3
 8005ed6:	460b      	mov	r3, r1
 8005ed8:	71fb      	strb	r3, [r7, #7]
 8005eda:	4613      	mov	r3, r2
 8005edc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8005ee6:	88bb      	ldrh	r3, [r7, #4]
 8005ee8:	3303      	adds	r3, #3
 8005eea:	089b      	lsrs	r3, r3, #2
 8005eec:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8005eee:	2300      	movs	r3, #0
 8005ef0:	61bb      	str	r3, [r7, #24]
 8005ef2:	e018      	b.n	8005f26 <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005ef4:	79fb      	ldrb	r3, [r7, #7]
 8005ef6:	031a      	lsls	r2, r3, #12
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	4413      	add	r3, r2
 8005efc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f00:	461a      	mov	r2, r3
 8005f02:	69fb      	ldr	r3, [r7, #28]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	6013      	str	r3, [r2, #0]
    pSrc++;
 8005f08:	69fb      	ldr	r3, [r7, #28]
 8005f0a:	3301      	adds	r3, #1
 8005f0c:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8005f0e:	69fb      	ldr	r3, [r7, #28]
 8005f10:	3301      	adds	r3, #1
 8005f12:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8005f14:	69fb      	ldr	r3, [r7, #28]
 8005f16:	3301      	adds	r3, #1
 8005f18:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8005f1a:	69fb      	ldr	r3, [r7, #28]
 8005f1c:	3301      	adds	r3, #1
 8005f1e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005f20:	69bb      	ldr	r3, [r7, #24]
 8005f22:	3301      	adds	r3, #1
 8005f24:	61bb      	str	r3, [r7, #24]
 8005f26:	69ba      	ldr	r2, [r7, #24]
 8005f28:	693b      	ldr	r3, [r7, #16]
 8005f2a:	429a      	cmp	r2, r3
 8005f2c:	d3e2      	bcc.n	8005ef4 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8005f2e:	2300      	movs	r3, #0
}
 8005f30:	4618      	mov	r0, r3
 8005f32:	3724      	adds	r7, #36	; 0x24
 8005f34:	46bd      	mov	sp, r7
 8005f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3a:	4770      	bx	lr

08005f3c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b08b      	sub	sp, #44	; 0x2c
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	60f8      	str	r0, [r7, #12]
 8005f44:	60b9      	str	r1, [r7, #8]
 8005f46:	4613      	mov	r3, r2
 8005f48:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005f52:	88fb      	ldrh	r3, [r7, #6]
 8005f54:	089b      	lsrs	r3, r3, #2
 8005f56:	b29b      	uxth	r3, r3
 8005f58:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005f5a:	88fb      	ldrh	r3, [r7, #6]
 8005f5c:	f003 0303 	and.w	r3, r3, #3
 8005f60:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005f62:	2300      	movs	r3, #0
 8005f64:	623b      	str	r3, [r7, #32]
 8005f66:	e014      	b.n	8005f92 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005f68:	69bb      	ldr	r3, [r7, #24]
 8005f6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f6e:	681a      	ldr	r2, [r3, #0]
 8005f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f72:	601a      	str	r2, [r3, #0]
    pDest++;
 8005f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f76:	3301      	adds	r3, #1
 8005f78:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f7c:	3301      	adds	r3, #1
 8005f7e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f82:	3301      	adds	r3, #1
 8005f84:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f88:	3301      	adds	r3, #1
 8005f8a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005f8c:	6a3b      	ldr	r3, [r7, #32]
 8005f8e:	3301      	adds	r3, #1
 8005f90:	623b      	str	r3, [r7, #32]
 8005f92:	6a3a      	ldr	r2, [r7, #32]
 8005f94:	697b      	ldr	r3, [r7, #20]
 8005f96:	429a      	cmp	r2, r3
 8005f98:	d3e6      	bcc.n	8005f68 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005f9a:	8bfb      	ldrh	r3, [r7, #30]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d01e      	beq.n	8005fde <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005fa4:	69bb      	ldr	r3, [r7, #24]
 8005fa6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005faa:	461a      	mov	r2, r3
 8005fac:	f107 0310 	add.w	r3, r7, #16
 8005fb0:	6812      	ldr	r2, [r2, #0]
 8005fb2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005fb4:	693a      	ldr	r2, [r7, #16]
 8005fb6:	6a3b      	ldr	r3, [r7, #32]
 8005fb8:	b2db      	uxtb	r3, r3
 8005fba:	00db      	lsls	r3, r3, #3
 8005fbc:	fa22 f303 	lsr.w	r3, r2, r3
 8005fc0:	b2da      	uxtb	r2, r3
 8005fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc4:	701a      	strb	r2, [r3, #0]
      i++;
 8005fc6:	6a3b      	ldr	r3, [r7, #32]
 8005fc8:	3301      	adds	r3, #1
 8005fca:	623b      	str	r3, [r7, #32]
      pDest++;
 8005fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fce:	3301      	adds	r3, #1
 8005fd0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005fd2:	8bfb      	ldrh	r3, [r7, #30]
 8005fd4:	3b01      	subs	r3, #1
 8005fd6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005fd8:	8bfb      	ldrh	r3, [r7, #30]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d1ea      	bne.n	8005fb4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	372c      	adds	r7, #44	; 0x2c
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fea:	4770      	bx	lr

08005fec <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005fec:	b480      	push	{r7}
 8005fee:	b085      	sub	sp, #20
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
 8005ff4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	781b      	ldrb	r3, [r3, #0]
 8005ffe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	785b      	ldrb	r3, [r3, #1]
 8006004:	2b01      	cmp	r3, #1
 8006006:	d12c      	bne.n	8006062 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	015a      	lsls	r2, r3, #5
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	4413      	add	r3, r2
 8006010:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	2b00      	cmp	r3, #0
 8006018:	db12      	blt.n	8006040 <USB_EPSetStall+0x54>
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d00f      	beq.n	8006040 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	015a      	lsls	r2, r3, #5
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	4413      	add	r3, r2
 8006028:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	68ba      	ldr	r2, [r7, #8]
 8006030:	0151      	lsls	r1, r2, #5
 8006032:	68fa      	ldr	r2, [r7, #12]
 8006034:	440a      	add	r2, r1
 8006036:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800603a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800603e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	015a      	lsls	r2, r3, #5
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	4413      	add	r3, r2
 8006048:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	68ba      	ldr	r2, [r7, #8]
 8006050:	0151      	lsls	r1, r2, #5
 8006052:	68fa      	ldr	r2, [r7, #12]
 8006054:	440a      	add	r2, r1
 8006056:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800605a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800605e:	6013      	str	r3, [r2, #0]
 8006060:	e02b      	b.n	80060ba <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	015a      	lsls	r2, r3, #5
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	4413      	add	r3, r2
 800606a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	2b00      	cmp	r3, #0
 8006072:	db12      	blt.n	800609a <USB_EPSetStall+0xae>
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d00f      	beq.n	800609a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	015a      	lsls	r2, r3, #5
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	4413      	add	r3, r2
 8006082:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	68ba      	ldr	r2, [r7, #8]
 800608a:	0151      	lsls	r1, r2, #5
 800608c:	68fa      	ldr	r2, [r7, #12]
 800608e:	440a      	add	r2, r1
 8006090:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006094:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006098:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	015a      	lsls	r2, r3, #5
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	4413      	add	r3, r2
 80060a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	68ba      	ldr	r2, [r7, #8]
 80060aa:	0151      	lsls	r1, r2, #5
 80060ac:	68fa      	ldr	r2, [r7, #12]
 80060ae:	440a      	add	r2, r1
 80060b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060b4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80060b8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80060ba:	2300      	movs	r3, #0
}
 80060bc:	4618      	mov	r0, r3
 80060be:	3714      	adds	r7, #20
 80060c0:	46bd      	mov	sp, r7
 80060c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c6:	4770      	bx	lr

080060c8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80060c8:	b480      	push	{r7}
 80060ca:	b085      	sub	sp, #20
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
 80060d0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	781b      	ldrb	r3, [r3, #0]
 80060da:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	785b      	ldrb	r3, [r3, #1]
 80060e0:	2b01      	cmp	r3, #1
 80060e2:	d128      	bne.n	8006136 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	015a      	lsls	r2, r3, #5
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	4413      	add	r3, r2
 80060ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	68ba      	ldr	r2, [r7, #8]
 80060f4:	0151      	lsls	r1, r2, #5
 80060f6:	68fa      	ldr	r2, [r7, #12]
 80060f8:	440a      	add	r2, r1
 80060fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060fe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006102:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	791b      	ldrb	r3, [r3, #4]
 8006108:	2b03      	cmp	r3, #3
 800610a:	d003      	beq.n	8006114 <USB_EPClearStall+0x4c>
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	791b      	ldrb	r3, [r3, #4]
 8006110:	2b02      	cmp	r3, #2
 8006112:	d138      	bne.n	8006186 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	015a      	lsls	r2, r3, #5
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	4413      	add	r3, r2
 800611c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	68ba      	ldr	r2, [r7, #8]
 8006124:	0151      	lsls	r1, r2, #5
 8006126:	68fa      	ldr	r2, [r7, #12]
 8006128:	440a      	add	r2, r1
 800612a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800612e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006132:	6013      	str	r3, [r2, #0]
 8006134:	e027      	b.n	8006186 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	015a      	lsls	r2, r3, #5
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	4413      	add	r3, r2
 800613e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	68ba      	ldr	r2, [r7, #8]
 8006146:	0151      	lsls	r1, r2, #5
 8006148:	68fa      	ldr	r2, [r7, #12]
 800614a:	440a      	add	r2, r1
 800614c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006150:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006154:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	791b      	ldrb	r3, [r3, #4]
 800615a:	2b03      	cmp	r3, #3
 800615c:	d003      	beq.n	8006166 <USB_EPClearStall+0x9e>
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	791b      	ldrb	r3, [r3, #4]
 8006162:	2b02      	cmp	r3, #2
 8006164:	d10f      	bne.n	8006186 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	015a      	lsls	r2, r3, #5
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	4413      	add	r3, r2
 800616e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	68ba      	ldr	r2, [r7, #8]
 8006176:	0151      	lsls	r1, r2, #5
 8006178:	68fa      	ldr	r2, [r7, #12]
 800617a:	440a      	add	r2, r1
 800617c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006180:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006184:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006186:	2300      	movs	r3, #0
}
 8006188:	4618      	mov	r0, r3
 800618a:	3714      	adds	r7, #20
 800618c:	46bd      	mov	sp, r7
 800618e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006192:	4770      	bx	lr

08006194 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006194:	b480      	push	{r7}
 8006196:	b085      	sub	sp, #20
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
 800619c:	460b      	mov	r3, r1
 800619e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	68fa      	ldr	r2, [r7, #12]
 80061ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80061b2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80061b6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061be:	681a      	ldr	r2, [r3, #0]
 80061c0:	78fb      	ldrb	r3, [r7, #3]
 80061c2:	011b      	lsls	r3, r3, #4
 80061c4:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80061c8:	68f9      	ldr	r1, [r7, #12]
 80061ca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80061ce:	4313      	orrs	r3, r2
 80061d0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80061d2:	2300      	movs	r3, #0
}
 80061d4:	4618      	mov	r0, r3
 80061d6:	3714      	adds	r7, #20
 80061d8:	46bd      	mov	sp, r7
 80061da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061de:	4770      	bx	lr

080061e0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80061e0:	b480      	push	{r7}
 80061e2:	b085      	sub	sp, #20
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	68fa      	ldr	r2, [r7, #12]
 80061f6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80061fa:	f023 0303 	bic.w	r3, r3, #3
 80061fe:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006206:	685b      	ldr	r3, [r3, #4]
 8006208:	68fa      	ldr	r2, [r7, #12]
 800620a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800620e:	f023 0302 	bic.w	r3, r3, #2
 8006212:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006214:	2300      	movs	r3, #0
}
 8006216:	4618      	mov	r0, r3
 8006218:	3714      	adds	r7, #20
 800621a:	46bd      	mov	sp, r7
 800621c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006220:	4770      	bx	lr

08006222 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006222:	b480      	push	{r7}
 8006224:	b085      	sub	sp, #20
 8006226:	af00      	add	r7, sp, #0
 8006228:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	68fa      	ldr	r2, [r7, #12]
 8006238:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800623c:	f023 0303 	bic.w	r3, r3, #3
 8006240:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006248:	685b      	ldr	r3, [r3, #4]
 800624a:	68fa      	ldr	r2, [r7, #12]
 800624c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006250:	f043 0302 	orr.w	r3, r3, #2
 8006254:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006256:	2300      	movs	r3, #0
}
 8006258:	4618      	mov	r0, r3
 800625a:	3714      	adds	r7, #20
 800625c:	46bd      	mov	sp, r7
 800625e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006262:	4770      	bx	lr

08006264 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006264:	b480      	push	{r7}
 8006266:	b085      	sub	sp, #20
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	695b      	ldr	r3, [r3, #20]
 8006270:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	699b      	ldr	r3, [r3, #24]
 8006276:	68fa      	ldr	r2, [r7, #12]
 8006278:	4013      	ands	r3, r2
 800627a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800627c:	68fb      	ldr	r3, [r7, #12]
}
 800627e:	4618      	mov	r0, r3
 8006280:	3714      	adds	r7, #20
 8006282:	46bd      	mov	sp, r7
 8006284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006288:	4770      	bx	lr

0800628a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800628a:	b480      	push	{r7}
 800628c:	b085      	sub	sp, #20
 800628e:	af00      	add	r7, sp, #0
 8006290:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800629c:	699b      	ldr	r3, [r3, #24]
 800629e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062a6:	69db      	ldr	r3, [r3, #28]
 80062a8:	68ba      	ldr	r2, [r7, #8]
 80062aa:	4013      	ands	r3, r2
 80062ac:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	0c1b      	lsrs	r3, r3, #16
}
 80062b2:	4618      	mov	r0, r3
 80062b4:	3714      	adds	r7, #20
 80062b6:	46bd      	mov	sp, r7
 80062b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062bc:	4770      	bx	lr

080062be <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80062be:	b480      	push	{r7}
 80062c0:	b085      	sub	sp, #20
 80062c2:	af00      	add	r7, sp, #0
 80062c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062d0:	699b      	ldr	r3, [r3, #24]
 80062d2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062da:	69db      	ldr	r3, [r3, #28]
 80062dc:	68ba      	ldr	r2, [r7, #8]
 80062de:	4013      	ands	r3, r2
 80062e0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80062e2:	68bb      	ldr	r3, [r7, #8]
 80062e4:	b29b      	uxth	r3, r3
}
 80062e6:	4618      	mov	r0, r3
 80062e8:	3714      	adds	r7, #20
 80062ea:	46bd      	mov	sp, r7
 80062ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f0:	4770      	bx	lr

080062f2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80062f2:	b480      	push	{r7}
 80062f4:	b085      	sub	sp, #20
 80062f6:	af00      	add	r7, sp, #0
 80062f8:	6078      	str	r0, [r7, #4]
 80062fa:	460b      	mov	r3, r1
 80062fc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006302:	78fb      	ldrb	r3, [r7, #3]
 8006304:	015a      	lsls	r2, r3, #5
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	4413      	add	r3, r2
 800630a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800630e:	689b      	ldr	r3, [r3, #8]
 8006310:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006318:	695b      	ldr	r3, [r3, #20]
 800631a:	68ba      	ldr	r2, [r7, #8]
 800631c:	4013      	ands	r3, r2
 800631e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006320:	68bb      	ldr	r3, [r7, #8]
}
 8006322:	4618      	mov	r0, r3
 8006324:	3714      	adds	r7, #20
 8006326:	46bd      	mov	sp, r7
 8006328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632c:	4770      	bx	lr

0800632e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800632e:	b480      	push	{r7}
 8006330:	b087      	sub	sp, #28
 8006332:	af00      	add	r7, sp, #0
 8006334:	6078      	str	r0, [r7, #4]
 8006336:	460b      	mov	r3, r1
 8006338:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800633e:	697b      	ldr	r3, [r7, #20]
 8006340:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006344:	691b      	ldr	r3, [r3, #16]
 8006346:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006348:	697b      	ldr	r3, [r7, #20]
 800634a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800634e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006350:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006352:	78fb      	ldrb	r3, [r7, #3]
 8006354:	f003 030f 	and.w	r3, r3, #15
 8006358:	68fa      	ldr	r2, [r7, #12]
 800635a:	fa22 f303 	lsr.w	r3, r2, r3
 800635e:	01db      	lsls	r3, r3, #7
 8006360:	b2db      	uxtb	r3, r3
 8006362:	693a      	ldr	r2, [r7, #16]
 8006364:	4313      	orrs	r3, r2
 8006366:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006368:	78fb      	ldrb	r3, [r7, #3]
 800636a:	015a      	lsls	r2, r3, #5
 800636c:	697b      	ldr	r3, [r7, #20]
 800636e:	4413      	add	r3, r2
 8006370:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006374:	689b      	ldr	r3, [r3, #8]
 8006376:	693a      	ldr	r2, [r7, #16]
 8006378:	4013      	ands	r3, r2
 800637a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800637c:	68bb      	ldr	r3, [r7, #8]
}
 800637e:	4618      	mov	r0, r3
 8006380:	371c      	adds	r7, #28
 8006382:	46bd      	mov	sp, r7
 8006384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006388:	4770      	bx	lr

0800638a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800638a:	b480      	push	{r7}
 800638c:	b083      	sub	sp, #12
 800638e:	af00      	add	r7, sp, #0
 8006390:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	695b      	ldr	r3, [r3, #20]
 8006396:	f003 0301 	and.w	r3, r3, #1
}
 800639a:	4618      	mov	r0, r3
 800639c:	370c      	adds	r7, #12
 800639e:	46bd      	mov	sp, r7
 80063a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a4:	4770      	bx	lr

080063a6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80063a6:	b480      	push	{r7}
 80063a8:	b085      	sub	sp, #20
 80063aa:	af00      	add	r7, sp, #0
 80063ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	68fa      	ldr	r2, [r7, #12]
 80063bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063c0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80063c4:	f023 0307 	bic.w	r3, r3, #7
 80063c8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063d0:	685b      	ldr	r3, [r3, #4]
 80063d2:	68fa      	ldr	r2, [r7, #12]
 80063d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80063d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80063dc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80063de:	2300      	movs	r3, #0
}
 80063e0:	4618      	mov	r0, r3
 80063e2:	3714      	adds	r7, #20
 80063e4:	46bd      	mov	sp, r7
 80063e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ea:	4770      	bx	lr

080063ec <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 80063ec:	b480      	push	{r7}
 80063ee:	b085      	sub	sp, #20
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
 80063f4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	333c      	adds	r3, #60	; 0x3c
 80063fe:	3304      	adds	r3, #4
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	4a1c      	ldr	r2, [pc, #112]	; (8006478 <USB_EP0_OutStart+0x8c>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d90a      	bls.n	8006422 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006418:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800641c:	d101      	bne.n	8006422 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 800641e:	2300      	movs	r3, #0
 8006420:	e024      	b.n	800646c <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006428:	461a      	mov	r2, r3
 800642a:	2300      	movs	r3, #0
 800642c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006434:	691b      	ldr	r3, [r3, #16]
 8006436:	68fa      	ldr	r2, [r7, #12]
 8006438:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800643c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006440:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006448:	691b      	ldr	r3, [r3, #16]
 800644a:	68fa      	ldr	r2, [r7, #12]
 800644c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006450:	f043 0318 	orr.w	r3, r3, #24
 8006454:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800645c:	691b      	ldr	r3, [r3, #16]
 800645e:	68fa      	ldr	r2, [r7, #12]
 8006460:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006464:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006468:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 800646a:	2300      	movs	r3, #0
}
 800646c:	4618      	mov	r0, r3
 800646e:	3714      	adds	r7, #20
 8006470:	46bd      	mov	sp, r7
 8006472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006476:	4770      	bx	lr
 8006478:	4f54300a 	.word	0x4f54300a

0800647c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800647c:	b480      	push	{r7}
 800647e:	b085      	sub	sp, #20
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006484:	2300      	movs	r3, #0
 8006486:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	3301      	adds	r3, #1
 800648c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	4a13      	ldr	r2, [pc, #76]	; (80064e0 <USB_CoreReset+0x64>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d901      	bls.n	800649a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006496:	2303      	movs	r3, #3
 8006498:	e01b      	b.n	80064d2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	691b      	ldr	r3, [r3, #16]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	daf2      	bge.n	8006488 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80064a2:	2300      	movs	r3, #0
 80064a4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	691b      	ldr	r3, [r3, #16]
 80064aa:	f043 0201 	orr.w	r2, r3, #1
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	3301      	adds	r3, #1
 80064b6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	4a09      	ldr	r2, [pc, #36]	; (80064e0 <USB_CoreReset+0x64>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d901      	bls.n	80064c4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80064c0:	2303      	movs	r3, #3
 80064c2:	e006      	b.n	80064d2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	691b      	ldr	r3, [r3, #16]
 80064c8:	f003 0301 	and.w	r3, r3, #1
 80064cc:	2b01      	cmp	r3, #1
 80064ce:	d0f0      	beq.n	80064b2 <USB_CoreReset+0x36>

  return HAL_OK;
 80064d0:	2300      	movs	r3, #0
}
 80064d2:	4618      	mov	r0, r3
 80064d4:	3714      	adds	r7, #20
 80064d6:	46bd      	mov	sp, r7
 80064d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064dc:	4770      	bx	lr
 80064de:	bf00      	nop
 80064e0:	00030d40 	.word	0x00030d40

080064e4 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b084      	sub	sp, #16
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
 80064ec:	460b      	mov	r3, r1
 80064ee:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 80064f0:	2010      	movs	r0, #16
 80064f2:	f005 f817 	bl	800b524 <USBD_static_malloc>
 80064f6:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d109      	bne.n	8006512 <USBD_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	32b0      	adds	r2, #176	; 0xb0
 8006508:	2100      	movs	r1, #0
 800650a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800650e:	2302      	movs	r3, #2
 8006510:	e048      	b.n	80065a4 <USBD_HID_Init+0xc0>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	32b0      	adds	r2, #176	; 0xb0
 800651c:	68f9      	ldr	r1, [r7, #12]
 800651e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	32b0      	adds	r2, #176	; 0xb0
 800652c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	7c1b      	ldrb	r3, [r3, #16]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d10d      	bne.n	800655a <USBD_HID_Init+0x76>
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 800653e:	4b1b      	ldr	r3, [pc, #108]	; (80065ac <USBD_HID_Init+0xc8>)
 8006540:	781b      	ldrb	r3, [r3, #0]
 8006542:	f003 020f 	and.w	r2, r3, #15
 8006546:	6879      	ldr	r1, [r7, #4]
 8006548:	4613      	mov	r3, r2
 800654a:	009b      	lsls	r3, r3, #2
 800654c:	4413      	add	r3, r2
 800654e:	009b      	lsls	r3, r3, #2
 8006550:	440b      	add	r3, r1
 8006552:	3326      	adds	r3, #38	; 0x26
 8006554:	2207      	movs	r2, #7
 8006556:	801a      	strh	r2, [r3, #0]
 8006558:	e00c      	b.n	8006574 <USBD_HID_Init+0x90>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 800655a:	4b14      	ldr	r3, [pc, #80]	; (80065ac <USBD_HID_Init+0xc8>)
 800655c:	781b      	ldrb	r3, [r3, #0]
 800655e:	f003 020f 	and.w	r2, r3, #15
 8006562:	6879      	ldr	r1, [r7, #4]
 8006564:	4613      	mov	r3, r2
 8006566:	009b      	lsls	r3, r3, #2
 8006568:	4413      	add	r3, r2
 800656a:	009b      	lsls	r3, r3, #2
 800656c:	440b      	add	r3, r1
 800656e:	3326      	adds	r3, #38	; 0x26
 8006570:	220a      	movs	r2, #10
 8006572:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8006574:	4b0d      	ldr	r3, [pc, #52]	; (80065ac <USBD_HID_Init+0xc8>)
 8006576:	7819      	ldrb	r1, [r3, #0]
 8006578:	2304      	movs	r3, #4
 800657a:	2203      	movs	r2, #3
 800657c:	6878      	ldr	r0, [r7, #4]
 800657e:	f004 fdd1 	bl	800b124 <USBD_LL_OpenEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 8006582:	4b0a      	ldr	r3, [pc, #40]	; (80065ac <USBD_HID_Init+0xc8>)
 8006584:	781b      	ldrb	r3, [r3, #0]
 8006586:	f003 020f 	and.w	r2, r3, #15
 800658a:	6879      	ldr	r1, [r7, #4]
 800658c:	4613      	mov	r3, r2
 800658e:	009b      	lsls	r3, r3, #2
 8006590:	4413      	add	r3, r2
 8006592:	009b      	lsls	r3, r3, #2
 8006594:	440b      	add	r3, r1
 8006596:	3324      	adds	r3, #36	; 0x24
 8006598:	2201      	movs	r2, #1
 800659a:	801a      	strh	r2, [r3, #0]

  hhid->state = USBD_HID_IDLE;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	2200      	movs	r2, #0
 80065a0:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 80065a2:	2300      	movs	r3, #0
}
 80065a4:	4618      	mov	r0, r3
 80065a6:	3710      	adds	r7, #16
 80065a8:	46bd      	mov	sp, r7
 80065aa:	bd80      	pop	{r7, pc}
 80065ac:	200000ca 	.word	0x200000ca

080065b0 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b082      	sub	sp, #8
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
 80065b8:	460b      	mov	r3, r1
 80065ba:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 80065bc:	4b1f      	ldr	r3, [pc, #124]	; (800663c <USBD_HID_DeInit+0x8c>)
 80065be:	781b      	ldrb	r3, [r3, #0]
 80065c0:	4619      	mov	r1, r3
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f004 fdec 	bl	800b1a0 <USBD_LL_CloseEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 80065c8:	4b1c      	ldr	r3, [pc, #112]	; (800663c <USBD_HID_DeInit+0x8c>)
 80065ca:	781b      	ldrb	r3, [r3, #0]
 80065cc:	f003 020f 	and.w	r2, r3, #15
 80065d0:	6879      	ldr	r1, [r7, #4]
 80065d2:	4613      	mov	r3, r2
 80065d4:	009b      	lsls	r3, r3, #2
 80065d6:	4413      	add	r3, r2
 80065d8:	009b      	lsls	r3, r3, #2
 80065da:	440b      	add	r3, r1
 80065dc:	3324      	adds	r3, #36	; 0x24
 80065de:	2200      	movs	r2, #0
 80065e0:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 80065e2:	4b16      	ldr	r3, [pc, #88]	; (800663c <USBD_HID_DeInit+0x8c>)
 80065e4:	781b      	ldrb	r3, [r3, #0]
 80065e6:	f003 020f 	and.w	r2, r3, #15
 80065ea:	6879      	ldr	r1, [r7, #4]
 80065ec:	4613      	mov	r3, r2
 80065ee:	009b      	lsls	r3, r3, #2
 80065f0:	4413      	add	r3, r2
 80065f2:	009b      	lsls	r3, r3, #2
 80065f4:	440b      	add	r3, r1
 80065f6:	3326      	adds	r3, #38	; 0x26
 80065f8:	2200      	movs	r2, #0
 80065fa:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	32b0      	adds	r2, #176	; 0xb0
 8006606:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d011      	beq.n	8006632 <USBD_HID_DeInit+0x82>
  {
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	32b0      	adds	r2, #176	; 0xb0
 8006618:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800661c:	4618      	mov	r0, r3
 800661e:	f004 ff8f 	bl	800b540 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	32b0      	adds	r2, #176	; 0xb0
 800662c:	2100      	movs	r1, #0
 800662e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)USBD_OK;
 8006632:	2300      	movs	r3, #0
}
 8006634:	4618      	mov	r0, r3
 8006636:	3708      	adds	r7, #8
 8006638:	46bd      	mov	sp, r7
 800663a:	bd80      	pop	{r7, pc}
 800663c:	200000ca 	.word	0x200000ca

08006640 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b086      	sub	sp, #24
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
 8006648:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	32b0      	adds	r2, #176	; 0xb0
 8006654:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006658:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800665a:	2300      	movs	r3, #0
 800665c:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 800665e:	2300      	movs	r3, #0
 8006660:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d101      	bne.n	800666c <USBD_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8006668:	2303      	movs	r3, #3
 800666a:	e0e8      	b.n	800683e <USBD_HID_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	781b      	ldrb	r3, [r3, #0]
 8006670:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006674:	2b00      	cmp	r3, #0
 8006676:	d046      	beq.n	8006706 <USBD_HID_Setup+0xc6>
 8006678:	2b20      	cmp	r3, #32
 800667a:	f040 80d8 	bne.w	800682e <USBD_HID_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	785b      	ldrb	r3, [r3, #1]
 8006682:	3b02      	subs	r3, #2
 8006684:	2b09      	cmp	r3, #9
 8006686:	d836      	bhi.n	80066f6 <USBD_HID_Setup+0xb6>
 8006688:	a201      	add	r2, pc, #4	; (adr r2, 8006690 <USBD_HID_Setup+0x50>)
 800668a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800668e:	bf00      	nop
 8006690:	080066e7 	.word	0x080066e7
 8006694:	080066c7 	.word	0x080066c7
 8006698:	080066f7 	.word	0x080066f7
 800669c:	080066f7 	.word	0x080066f7
 80066a0:	080066f7 	.word	0x080066f7
 80066a4:	080066f7 	.word	0x080066f7
 80066a8:	080066f7 	.word	0x080066f7
 80066ac:	080066f7 	.word	0x080066f7
 80066b0:	080066d5 	.word	0x080066d5
 80066b4:	080066b9 	.word	0x080066b9
      {
        case USBD_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	885b      	ldrh	r3, [r3, #2]
 80066bc:	b2db      	uxtb	r3, r3
 80066be:	461a      	mov	r2, r3
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	601a      	str	r2, [r3, #0]
          break;
 80066c4:	e01e      	b.n	8006704 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	2201      	movs	r2, #1
 80066ca:	4619      	mov	r1, r3
 80066cc:	6878      	ldr	r0, [r7, #4]
 80066ce:	f001 fbd5 	bl	8007e7c <USBD_CtlSendData>
          break;
 80066d2:	e017      	b.n	8006704 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	885b      	ldrh	r3, [r3, #2]
 80066d8:	0a1b      	lsrs	r3, r3, #8
 80066da:	b29b      	uxth	r3, r3
 80066dc:	b2db      	uxtb	r3, r3
 80066de:	461a      	mov	r2, r3
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	605a      	str	r2, [r3, #4]
          break;
 80066e4:	e00e      	b.n	8006704 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	3304      	adds	r3, #4
 80066ea:	2201      	movs	r2, #1
 80066ec:	4619      	mov	r1, r3
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	f001 fbc4 	bl	8007e7c <USBD_CtlSendData>
          break;
 80066f4:	e006      	b.n	8006704 <USBD_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80066f6:	6839      	ldr	r1, [r7, #0]
 80066f8:	6878      	ldr	r0, [r7, #4]
 80066fa:	f001 fb4e 	bl	8007d9a <USBD_CtlError>
          ret = USBD_FAIL;
 80066fe:	2303      	movs	r3, #3
 8006700:	75fb      	strb	r3, [r7, #23]
          break;
 8006702:	bf00      	nop
      }
      break;
 8006704:	e09a      	b.n	800683c <USBD_HID_Setup+0x1fc>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	785b      	ldrb	r3, [r3, #1]
 800670a:	2b0b      	cmp	r3, #11
 800670c:	f200 8086 	bhi.w	800681c <USBD_HID_Setup+0x1dc>
 8006710:	a201      	add	r2, pc, #4	; (adr r2, 8006718 <USBD_HID_Setup+0xd8>)
 8006712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006716:	bf00      	nop
 8006718:	08006749 	.word	0x08006749
 800671c:	0800682b 	.word	0x0800682b
 8006720:	0800681d 	.word	0x0800681d
 8006724:	0800681d 	.word	0x0800681d
 8006728:	0800681d 	.word	0x0800681d
 800672c:	0800681d 	.word	0x0800681d
 8006730:	08006773 	.word	0x08006773
 8006734:	0800681d 	.word	0x0800681d
 8006738:	0800681d 	.word	0x0800681d
 800673c:	0800681d 	.word	0x0800681d
 8006740:	080067cb 	.word	0x080067cb
 8006744:	080067f5 	.word	0x080067f5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800674e:	b2db      	uxtb	r3, r3
 8006750:	2b03      	cmp	r3, #3
 8006752:	d107      	bne.n	8006764 <USBD_HID_Setup+0x124>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006754:	f107 030a 	add.w	r3, r7, #10
 8006758:	2202      	movs	r2, #2
 800675a:	4619      	mov	r1, r3
 800675c:	6878      	ldr	r0, [r7, #4]
 800675e:	f001 fb8d 	bl	8007e7c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006762:	e063      	b.n	800682c <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8006764:	6839      	ldr	r1, [r7, #0]
 8006766:	6878      	ldr	r0, [r7, #4]
 8006768:	f001 fb17 	bl	8007d9a <USBD_CtlError>
            ret = USBD_FAIL;
 800676c:	2303      	movs	r3, #3
 800676e:	75fb      	strb	r3, [r7, #23]
          break;
 8006770:	e05c      	b.n	800682c <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	885b      	ldrh	r3, [r3, #2]
 8006776:	0a1b      	lsrs	r3, r3, #8
 8006778:	b29b      	uxth	r3, r3
 800677a:	2b22      	cmp	r3, #34	; 0x22
 800677c:	d108      	bne.n	8006790 <USBD_HID_Setup+0x150>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	88db      	ldrh	r3, [r3, #6]
 8006782:	2b4a      	cmp	r3, #74	; 0x4a
 8006784:	bf28      	it	cs
 8006786:	234a      	movcs	r3, #74	; 0x4a
 8006788:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 800678a:	4b2f      	ldr	r3, [pc, #188]	; (8006848 <USBD_HID_Setup+0x208>)
 800678c:	613b      	str	r3, [r7, #16]
 800678e:	e015      	b.n	80067bc <USBD_HID_Setup+0x17c>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	885b      	ldrh	r3, [r3, #2]
 8006794:	0a1b      	lsrs	r3, r3, #8
 8006796:	b29b      	uxth	r3, r3
 8006798:	2b21      	cmp	r3, #33	; 0x21
 800679a:	d108      	bne.n	80067ae <USBD_HID_Setup+0x16e>
          {
            pbuf = USBD_HID_Desc;
 800679c:	4b2b      	ldr	r3, [pc, #172]	; (800684c <USBD_HID_Setup+0x20c>)
 800679e:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	88db      	ldrh	r3, [r3, #6]
 80067a4:	2b09      	cmp	r3, #9
 80067a6:	bf28      	it	cs
 80067a8:	2309      	movcs	r3, #9
 80067aa:	82bb      	strh	r3, [r7, #20]
 80067ac:	e006      	b.n	80067bc <USBD_HID_Setup+0x17c>
          }
          else
          {
            USBD_CtlError(pdev, req);
 80067ae:	6839      	ldr	r1, [r7, #0]
 80067b0:	6878      	ldr	r0, [r7, #4]
 80067b2:	f001 faf2 	bl	8007d9a <USBD_CtlError>
            ret = USBD_FAIL;
 80067b6:	2303      	movs	r3, #3
 80067b8:	75fb      	strb	r3, [r7, #23]
            break;
 80067ba:	e037      	b.n	800682c <USBD_HID_Setup+0x1ec>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 80067bc:	8abb      	ldrh	r3, [r7, #20]
 80067be:	461a      	mov	r2, r3
 80067c0:	6939      	ldr	r1, [r7, #16]
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	f001 fb5a 	bl	8007e7c <USBD_CtlSendData>
          break;
 80067c8:	e030      	b.n	800682c <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067d0:	b2db      	uxtb	r3, r3
 80067d2:	2b03      	cmp	r3, #3
 80067d4:	d107      	bne.n	80067e6 <USBD_HID_Setup+0x1a6>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	3308      	adds	r3, #8
 80067da:	2201      	movs	r2, #1
 80067dc:	4619      	mov	r1, r3
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	f001 fb4c 	bl	8007e7c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80067e4:	e022      	b.n	800682c <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 80067e6:	6839      	ldr	r1, [r7, #0]
 80067e8:	6878      	ldr	r0, [r7, #4]
 80067ea:	f001 fad6 	bl	8007d9a <USBD_CtlError>
            ret = USBD_FAIL;
 80067ee:	2303      	movs	r3, #3
 80067f0:	75fb      	strb	r3, [r7, #23]
          break;
 80067f2:	e01b      	b.n	800682c <USBD_HID_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067fa:	b2db      	uxtb	r3, r3
 80067fc:	2b03      	cmp	r3, #3
 80067fe:	d106      	bne.n	800680e <USBD_HID_Setup+0x1ce>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	885b      	ldrh	r3, [r3, #2]
 8006804:	b2db      	uxtb	r3, r3
 8006806:	461a      	mov	r2, r3
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800680c:	e00e      	b.n	800682c <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 800680e:	6839      	ldr	r1, [r7, #0]
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	f001 fac2 	bl	8007d9a <USBD_CtlError>
            ret = USBD_FAIL;
 8006816:	2303      	movs	r3, #3
 8006818:	75fb      	strb	r3, [r7, #23]
          break;
 800681a:	e007      	b.n	800682c <USBD_HID_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800681c:	6839      	ldr	r1, [r7, #0]
 800681e:	6878      	ldr	r0, [r7, #4]
 8006820:	f001 fabb 	bl	8007d9a <USBD_CtlError>
          ret = USBD_FAIL;
 8006824:	2303      	movs	r3, #3
 8006826:	75fb      	strb	r3, [r7, #23]
          break;
 8006828:	e000      	b.n	800682c <USBD_HID_Setup+0x1ec>
          break;
 800682a:	bf00      	nop
      }
      break;
 800682c:	e006      	b.n	800683c <USBD_HID_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 800682e:	6839      	ldr	r1, [r7, #0]
 8006830:	6878      	ldr	r0, [r7, #4]
 8006832:	f001 fab2 	bl	8007d9a <USBD_CtlError>
      ret = USBD_FAIL;
 8006836:	2303      	movs	r3, #3
 8006838:	75fb      	strb	r3, [r7, #23]
      break;
 800683a:	bf00      	nop
  }

  return (uint8_t)ret;
 800683c:	7dfb      	ldrb	r3, [r7, #23]
}
 800683e:	4618      	mov	r0, r3
 8006840:	3718      	adds	r7, #24
 8006842:	46bd      	mov	sp, r7
 8006844:	bd80      	pop	{r7, pc}
 8006846:	bf00      	nop
 8006848:	20000080 	.word	0x20000080
 800684c:	20000068 	.word	0x20000068

08006850 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b084      	sub	sp, #16
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8006858:	2181      	movs	r1, #129	; 0x81
 800685a:	4809      	ldr	r0, [pc, #36]	; (8006880 <USBD_HID_GetFSCfgDesc+0x30>)
 800685c:	f000 fc3b 	bl	80070d6 <USBD_GetEpDesc>
 8006860:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d002      	beq.n	800686e <USBD_HID_GetFSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	220a      	movs	r2, #10
 800686c:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2222      	movs	r2, #34	; 0x22
 8006872:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8006874:	4b02      	ldr	r3, [pc, #8]	; (8006880 <USBD_HID_GetFSCfgDesc+0x30>)
}
 8006876:	4618      	mov	r0, r3
 8006878:	3710      	adds	r7, #16
 800687a:	46bd      	mov	sp, r7
 800687c:	bd80      	pop	{r7, pc}
 800687e:	bf00      	nop
 8006880:	20000044 	.word	0x20000044

08006884 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b084      	sub	sp, #16
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 800688c:	2181      	movs	r1, #129	; 0x81
 800688e:	4809      	ldr	r0, [pc, #36]	; (80068b4 <USBD_HID_GetHSCfgDesc+0x30>)
 8006890:	f000 fc21 	bl	80070d6 <USBD_GetEpDesc>
 8006894:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d002      	beq.n	80068a2 <USBD_HID_GetHSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_HS_BINTERVAL;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	2207      	movs	r2, #7
 80068a0:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2222      	movs	r2, #34	; 0x22
 80068a6:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 80068a8:	4b02      	ldr	r3, [pc, #8]	; (80068b4 <USBD_HID_GetHSCfgDesc+0x30>)
}
 80068aa:	4618      	mov	r0, r3
 80068ac:	3710      	adds	r7, #16
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bd80      	pop	{r7, pc}
 80068b2:	bf00      	nop
 80068b4:	20000044 	.word	0x20000044

080068b8 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b084      	sub	sp, #16
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 80068c0:	2181      	movs	r1, #129	; 0x81
 80068c2:	4809      	ldr	r0, [pc, #36]	; (80068e8 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
 80068c4:	f000 fc07 	bl	80070d6 <USBD_GetEpDesc>
 80068c8:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d002      	beq.n	80068d6 <USBD_HID_GetOtherSpeedCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	220a      	movs	r2, #10
 80068d4:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2222      	movs	r2, #34	; 0x22
 80068da:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 80068dc:	4b02      	ldr	r3, [pc, #8]	; (80068e8 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
}
 80068de:	4618      	mov	r0, r3
 80068e0:	3710      	adds	r7, #16
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bd80      	pop	{r7, pc}
 80068e6:	bf00      	nop
 80068e8:	20000044 	.word	0x20000044

080068ec <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80068ec:	b480      	push	{r7}
 80068ee:	b083      	sub	sp, #12
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
 80068f4:	460b      	mov	r3, r1
 80068f6:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = USBD_HID_IDLE;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	32b0      	adds	r2, #176	; 0xb0
 8006902:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006906:	2200      	movs	r2, #0
 8006908:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 800690a:	2300      	movs	r3, #0
}
 800690c:	4618      	mov	r0, r3
 800690e:	370c      	adds	r7, #12
 8006910:	46bd      	mov	sp, r7
 8006912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006916:	4770      	bx	lr

08006918 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8006918:	b480      	push	{r7}
 800691a:	b083      	sub	sp, #12
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	220a      	movs	r2, #10
 8006924:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 8006926:	4b03      	ldr	r3, [pc, #12]	; (8006934 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8006928:	4618      	mov	r0, r3
 800692a:	370c      	adds	r7, #12
 800692c:	46bd      	mov	sp, r7
 800692e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006932:	4770      	bx	lr
 8006934:	20000074 	.word	0x20000074

08006938 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b086      	sub	sp, #24
 800693c:	af00      	add	r7, sp, #0
 800693e:	60f8      	str	r0, [r7, #12]
 8006940:	60b9      	str	r1, [r7, #8]
 8006942:	4613      	mov	r3, r2
 8006944:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d101      	bne.n	8006950 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800694c:	2303      	movs	r3, #3
 800694e:	e01f      	b.n	8006990 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	2200      	movs	r2, #0
 8006954:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	2200      	movs	r2, #0
 800695c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	2200      	movs	r2, #0
 8006964:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006968:	68bb      	ldr	r3, [r7, #8]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d003      	beq.n	8006976 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	68ba      	ldr	r2, [r7, #8]
 8006972:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	2201      	movs	r2, #1
 800697a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	79fa      	ldrb	r2, [r7, #7]
 8006982:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006984:	68f8      	ldr	r0, [r7, #12]
 8006986:	f004 fb4f 	bl	800b028 <USBD_LL_Init>
 800698a:	4603      	mov	r3, r0
 800698c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800698e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006990:	4618      	mov	r0, r3
 8006992:	3718      	adds	r7, #24
 8006994:	46bd      	mov	sp, r7
 8006996:	bd80      	pop	{r7, pc}

08006998 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b084      	sub	sp, #16
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
 80069a0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80069a2:	2300      	movs	r3, #0
 80069a4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d101      	bne.n	80069b0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80069ac:	2303      	movs	r3, #3
 80069ae:	e025      	b.n	80069fc <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	683a      	ldr	r2, [r7, #0]
 80069b4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	32ae      	adds	r2, #174	; 0xae
 80069c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d00f      	beq.n	80069ec <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	32ae      	adds	r2, #174	; 0xae
 80069d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069dc:	f107 020e 	add.w	r2, r7, #14
 80069e0:	4610      	mov	r0, r2
 80069e2:	4798      	blx	r3
 80069e4:	4602      	mov	r2, r0
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80069f2:	1c5a      	adds	r2, r3, #1
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80069fa:	2300      	movs	r3, #0
}
 80069fc:	4618      	mov	r0, r3
 80069fe:	3710      	adds	r7, #16
 8006a00:	46bd      	mov	sp, r7
 8006a02:	bd80      	pop	{r7, pc}

08006a04 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b082      	sub	sp, #8
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006a0c:	6878      	ldr	r0, [r7, #4]
 8006a0e:	f004 fb57 	bl	800b0c0 <USBD_LL_Start>
 8006a12:	4603      	mov	r3, r0
}
 8006a14:	4618      	mov	r0, r3
 8006a16:	3708      	adds	r7, #8
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bd80      	pop	{r7, pc}

08006a1c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	b083      	sub	sp, #12
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006a24:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006a26:	4618      	mov	r0, r3
 8006a28:	370c      	adds	r7, #12
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a30:	4770      	bx	lr

08006a32 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006a32:	b580      	push	{r7, lr}
 8006a34:	b084      	sub	sp, #16
 8006a36:	af00      	add	r7, sp, #0
 8006a38:	6078      	str	r0, [r7, #4]
 8006a3a:	460b      	mov	r3, r1
 8006a3c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006a3e:	2300      	movs	r3, #0
 8006a40:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d009      	beq.n	8006a60 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	78fa      	ldrb	r2, [r7, #3]
 8006a56:	4611      	mov	r1, r2
 8006a58:	6878      	ldr	r0, [r7, #4]
 8006a5a:	4798      	blx	r3
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006a60:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a62:	4618      	mov	r0, r3
 8006a64:	3710      	adds	r7, #16
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bd80      	pop	{r7, pc}

08006a6a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006a6a:	b580      	push	{r7, lr}
 8006a6c:	b084      	sub	sp, #16
 8006a6e:	af00      	add	r7, sp, #0
 8006a70:	6078      	str	r0, [r7, #4]
 8006a72:	460b      	mov	r3, r1
 8006a74:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006a76:	2300      	movs	r3, #0
 8006a78:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a80:	685b      	ldr	r3, [r3, #4]
 8006a82:	78fa      	ldrb	r2, [r7, #3]
 8006a84:	4611      	mov	r1, r2
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	4798      	blx	r3
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d001      	beq.n	8006a94 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006a90:	2303      	movs	r3, #3
 8006a92:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006a94:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a96:	4618      	mov	r0, r3
 8006a98:	3710      	adds	r7, #16
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	bd80      	pop	{r7, pc}

08006a9e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006a9e:	b580      	push	{r7, lr}
 8006aa0:	b084      	sub	sp, #16
 8006aa2:	af00      	add	r7, sp, #0
 8006aa4:	6078      	str	r0, [r7, #4]
 8006aa6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006aae:	6839      	ldr	r1, [r7, #0]
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	f001 f938 	bl	8007d26 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2201      	movs	r2, #1
 8006aba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006ac4:	461a      	mov	r2, r3
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006ad2:	f003 031f 	and.w	r3, r3, #31
 8006ad6:	2b02      	cmp	r3, #2
 8006ad8:	d01a      	beq.n	8006b10 <USBD_LL_SetupStage+0x72>
 8006ada:	2b02      	cmp	r3, #2
 8006adc:	d822      	bhi.n	8006b24 <USBD_LL_SetupStage+0x86>
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d002      	beq.n	8006ae8 <USBD_LL_SetupStage+0x4a>
 8006ae2:	2b01      	cmp	r3, #1
 8006ae4:	d00a      	beq.n	8006afc <USBD_LL_SetupStage+0x5e>
 8006ae6:	e01d      	b.n	8006b24 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006aee:	4619      	mov	r1, r3
 8006af0:	6878      	ldr	r0, [r7, #4]
 8006af2:	f000 fb65 	bl	80071c0 <USBD_StdDevReq>
 8006af6:	4603      	mov	r3, r0
 8006af8:	73fb      	strb	r3, [r7, #15]
      break;
 8006afa:	e020      	b.n	8006b3e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006b02:	4619      	mov	r1, r3
 8006b04:	6878      	ldr	r0, [r7, #4]
 8006b06:	f000 fbcd 	bl	80072a4 <USBD_StdItfReq>
 8006b0a:	4603      	mov	r3, r0
 8006b0c:	73fb      	strb	r3, [r7, #15]
      break;
 8006b0e:	e016      	b.n	8006b3e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006b16:	4619      	mov	r1, r3
 8006b18:	6878      	ldr	r0, [r7, #4]
 8006b1a:	f000 fc2f 	bl	800737c <USBD_StdEPReq>
 8006b1e:	4603      	mov	r3, r0
 8006b20:	73fb      	strb	r3, [r7, #15]
      break;
 8006b22:	e00c      	b.n	8006b3e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006b2a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006b2e:	b2db      	uxtb	r3, r3
 8006b30:	4619      	mov	r1, r3
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	f004 fb6a 	bl	800b20c <USBD_LL_StallEP>
 8006b38:	4603      	mov	r3, r0
 8006b3a:	73fb      	strb	r3, [r7, #15]
      break;
 8006b3c:	bf00      	nop
  }

  return ret;
 8006b3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b40:	4618      	mov	r0, r3
 8006b42:	3710      	adds	r7, #16
 8006b44:	46bd      	mov	sp, r7
 8006b46:	bd80      	pop	{r7, pc}

08006b48 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b086      	sub	sp, #24
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	60f8      	str	r0, [r7, #12]
 8006b50:	460b      	mov	r3, r1
 8006b52:	607a      	str	r2, [r7, #4]
 8006b54:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006b56:	2300      	movs	r3, #0
 8006b58:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006b5a:	7afb      	ldrb	r3, [r7, #11]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d16e      	bne.n	8006c3e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006b66:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006b6e:	2b03      	cmp	r3, #3
 8006b70:	f040 8098 	bne.w	8006ca4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006b74:	693b      	ldr	r3, [r7, #16]
 8006b76:	689a      	ldr	r2, [r3, #8]
 8006b78:	693b      	ldr	r3, [r7, #16]
 8006b7a:	68db      	ldr	r3, [r3, #12]
 8006b7c:	429a      	cmp	r2, r3
 8006b7e:	d913      	bls.n	8006ba8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006b80:	693b      	ldr	r3, [r7, #16]
 8006b82:	689a      	ldr	r2, [r3, #8]
 8006b84:	693b      	ldr	r3, [r7, #16]
 8006b86:	68db      	ldr	r3, [r3, #12]
 8006b88:	1ad2      	subs	r2, r2, r3
 8006b8a:	693b      	ldr	r3, [r7, #16]
 8006b8c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006b8e:	693b      	ldr	r3, [r7, #16]
 8006b90:	68da      	ldr	r2, [r3, #12]
 8006b92:	693b      	ldr	r3, [r7, #16]
 8006b94:	689b      	ldr	r3, [r3, #8]
 8006b96:	4293      	cmp	r3, r2
 8006b98:	bf28      	it	cs
 8006b9a:	4613      	movcs	r3, r2
 8006b9c:	461a      	mov	r2, r3
 8006b9e:	6879      	ldr	r1, [r7, #4]
 8006ba0:	68f8      	ldr	r0, [r7, #12]
 8006ba2:	f001 f997 	bl	8007ed4 <USBD_CtlContinueRx>
 8006ba6:	e07d      	b.n	8006ca4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006bae:	f003 031f 	and.w	r3, r3, #31
 8006bb2:	2b02      	cmp	r3, #2
 8006bb4:	d014      	beq.n	8006be0 <USBD_LL_DataOutStage+0x98>
 8006bb6:	2b02      	cmp	r3, #2
 8006bb8:	d81d      	bhi.n	8006bf6 <USBD_LL_DataOutStage+0xae>
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d002      	beq.n	8006bc4 <USBD_LL_DataOutStage+0x7c>
 8006bbe:	2b01      	cmp	r3, #1
 8006bc0:	d003      	beq.n	8006bca <USBD_LL_DataOutStage+0x82>
 8006bc2:	e018      	b.n	8006bf6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	75bb      	strb	r3, [r7, #22]
            break;
 8006bc8:	e018      	b.n	8006bfc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006bd0:	b2db      	uxtb	r3, r3
 8006bd2:	4619      	mov	r1, r3
 8006bd4:	68f8      	ldr	r0, [r7, #12]
 8006bd6:	f000 fa64 	bl	80070a2 <USBD_CoreFindIF>
 8006bda:	4603      	mov	r3, r0
 8006bdc:	75bb      	strb	r3, [r7, #22]
            break;
 8006bde:	e00d      	b.n	8006bfc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006be6:	b2db      	uxtb	r3, r3
 8006be8:	4619      	mov	r1, r3
 8006bea:	68f8      	ldr	r0, [r7, #12]
 8006bec:	f000 fa66 	bl	80070bc <USBD_CoreFindEP>
 8006bf0:	4603      	mov	r3, r0
 8006bf2:	75bb      	strb	r3, [r7, #22]
            break;
 8006bf4:	e002      	b.n	8006bfc <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	75bb      	strb	r3, [r7, #22]
            break;
 8006bfa:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006bfc:	7dbb      	ldrb	r3, [r7, #22]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d119      	bne.n	8006c36 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c08:	b2db      	uxtb	r3, r3
 8006c0a:	2b03      	cmp	r3, #3
 8006c0c:	d113      	bne.n	8006c36 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006c0e:	7dba      	ldrb	r2, [r7, #22]
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	32ae      	adds	r2, #174	; 0xae
 8006c14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c18:	691b      	ldr	r3, [r3, #16]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d00b      	beq.n	8006c36 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006c1e:	7dba      	ldrb	r2, [r7, #22]
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006c26:	7dba      	ldrb	r2, [r7, #22]
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	32ae      	adds	r2, #174	; 0xae
 8006c2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c30:	691b      	ldr	r3, [r3, #16]
 8006c32:	68f8      	ldr	r0, [r7, #12]
 8006c34:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006c36:	68f8      	ldr	r0, [r7, #12]
 8006c38:	f001 f95d 	bl	8007ef6 <USBD_CtlSendStatus>
 8006c3c:	e032      	b.n	8006ca4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006c3e:	7afb      	ldrb	r3, [r7, #11]
 8006c40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c44:	b2db      	uxtb	r3, r3
 8006c46:	4619      	mov	r1, r3
 8006c48:	68f8      	ldr	r0, [r7, #12]
 8006c4a:	f000 fa37 	bl	80070bc <USBD_CoreFindEP>
 8006c4e:	4603      	mov	r3, r0
 8006c50:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006c52:	7dbb      	ldrb	r3, [r7, #22]
 8006c54:	2bff      	cmp	r3, #255	; 0xff
 8006c56:	d025      	beq.n	8006ca4 <USBD_LL_DataOutStage+0x15c>
 8006c58:	7dbb      	ldrb	r3, [r7, #22]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d122      	bne.n	8006ca4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c64:	b2db      	uxtb	r3, r3
 8006c66:	2b03      	cmp	r3, #3
 8006c68:	d117      	bne.n	8006c9a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006c6a:	7dba      	ldrb	r2, [r7, #22]
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	32ae      	adds	r2, #174	; 0xae
 8006c70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c74:	699b      	ldr	r3, [r3, #24]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d00f      	beq.n	8006c9a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006c7a:	7dba      	ldrb	r2, [r7, #22]
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006c82:	7dba      	ldrb	r2, [r7, #22]
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	32ae      	adds	r2, #174	; 0xae
 8006c88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c8c:	699b      	ldr	r3, [r3, #24]
 8006c8e:	7afa      	ldrb	r2, [r7, #11]
 8006c90:	4611      	mov	r1, r2
 8006c92:	68f8      	ldr	r0, [r7, #12]
 8006c94:	4798      	blx	r3
 8006c96:	4603      	mov	r3, r0
 8006c98:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006c9a:	7dfb      	ldrb	r3, [r7, #23]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d001      	beq.n	8006ca4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006ca0:	7dfb      	ldrb	r3, [r7, #23]
 8006ca2:	e000      	b.n	8006ca6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006ca4:	2300      	movs	r3, #0
}
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	3718      	adds	r7, #24
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bd80      	pop	{r7, pc}

08006cae <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006cae:	b580      	push	{r7, lr}
 8006cb0:	b086      	sub	sp, #24
 8006cb2:	af00      	add	r7, sp, #0
 8006cb4:	60f8      	str	r0, [r7, #12]
 8006cb6:	460b      	mov	r3, r1
 8006cb8:	607a      	str	r2, [r7, #4]
 8006cba:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006cbc:	7afb      	ldrb	r3, [r7, #11]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d16f      	bne.n	8006da2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	3314      	adds	r3, #20
 8006cc6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006cce:	2b02      	cmp	r3, #2
 8006cd0:	d15a      	bne.n	8006d88 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006cd2:	693b      	ldr	r3, [r7, #16]
 8006cd4:	689a      	ldr	r2, [r3, #8]
 8006cd6:	693b      	ldr	r3, [r7, #16]
 8006cd8:	68db      	ldr	r3, [r3, #12]
 8006cda:	429a      	cmp	r2, r3
 8006cdc:	d914      	bls.n	8006d08 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006cde:	693b      	ldr	r3, [r7, #16]
 8006ce0:	689a      	ldr	r2, [r3, #8]
 8006ce2:	693b      	ldr	r3, [r7, #16]
 8006ce4:	68db      	ldr	r3, [r3, #12]
 8006ce6:	1ad2      	subs	r2, r2, r3
 8006ce8:	693b      	ldr	r3, [r7, #16]
 8006cea:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006cec:	693b      	ldr	r3, [r7, #16]
 8006cee:	689b      	ldr	r3, [r3, #8]
 8006cf0:	461a      	mov	r2, r3
 8006cf2:	6879      	ldr	r1, [r7, #4]
 8006cf4:	68f8      	ldr	r0, [r7, #12]
 8006cf6:	f001 f8dc 	bl	8007eb2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	2100      	movs	r1, #0
 8006d00:	68f8      	ldr	r0, [r7, #12]
 8006d02:	f004 fb89 	bl	800b418 <USBD_LL_PrepareReceive>
 8006d06:	e03f      	b.n	8006d88 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006d08:	693b      	ldr	r3, [r7, #16]
 8006d0a:	68da      	ldr	r2, [r3, #12]
 8006d0c:	693b      	ldr	r3, [r7, #16]
 8006d0e:	689b      	ldr	r3, [r3, #8]
 8006d10:	429a      	cmp	r2, r3
 8006d12:	d11c      	bne.n	8006d4e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006d14:	693b      	ldr	r3, [r7, #16]
 8006d16:	685a      	ldr	r2, [r3, #4]
 8006d18:	693b      	ldr	r3, [r7, #16]
 8006d1a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006d1c:	429a      	cmp	r2, r3
 8006d1e:	d316      	bcc.n	8006d4e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006d20:	693b      	ldr	r3, [r7, #16]
 8006d22:	685a      	ldr	r2, [r3, #4]
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006d2a:	429a      	cmp	r2, r3
 8006d2c:	d20f      	bcs.n	8006d4e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006d2e:	2200      	movs	r2, #0
 8006d30:	2100      	movs	r1, #0
 8006d32:	68f8      	ldr	r0, [r7, #12]
 8006d34:	f001 f8bd 	bl	8007eb2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006d40:	2300      	movs	r3, #0
 8006d42:	2200      	movs	r2, #0
 8006d44:	2100      	movs	r1, #0
 8006d46:	68f8      	ldr	r0, [r7, #12]
 8006d48:	f004 fb66 	bl	800b418 <USBD_LL_PrepareReceive>
 8006d4c:	e01c      	b.n	8006d88 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d54:	b2db      	uxtb	r3, r3
 8006d56:	2b03      	cmp	r3, #3
 8006d58:	d10f      	bne.n	8006d7a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d60:	68db      	ldr	r3, [r3, #12]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d009      	beq.n	8006d7a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	2200      	movs	r2, #0
 8006d6a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d74:	68db      	ldr	r3, [r3, #12]
 8006d76:	68f8      	ldr	r0, [r7, #12]
 8006d78:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006d7a:	2180      	movs	r1, #128	; 0x80
 8006d7c:	68f8      	ldr	r0, [r7, #12]
 8006d7e:	f004 fa45 	bl	800b20c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006d82:	68f8      	ldr	r0, [r7, #12]
 8006d84:	f001 f8ca 	bl	8007f1c <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d03a      	beq.n	8006e08 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006d92:	68f8      	ldr	r0, [r7, #12]
 8006d94:	f7ff fe42 	bl	8006a1c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006da0:	e032      	b.n	8006e08 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006da2:	7afb      	ldrb	r3, [r7, #11]
 8006da4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006da8:	b2db      	uxtb	r3, r3
 8006daa:	4619      	mov	r1, r3
 8006dac:	68f8      	ldr	r0, [r7, #12]
 8006dae:	f000 f985 	bl	80070bc <USBD_CoreFindEP>
 8006db2:	4603      	mov	r3, r0
 8006db4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006db6:	7dfb      	ldrb	r3, [r7, #23]
 8006db8:	2bff      	cmp	r3, #255	; 0xff
 8006dba:	d025      	beq.n	8006e08 <USBD_LL_DataInStage+0x15a>
 8006dbc:	7dfb      	ldrb	r3, [r7, #23]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d122      	bne.n	8006e08 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006dc8:	b2db      	uxtb	r3, r3
 8006dca:	2b03      	cmp	r3, #3
 8006dcc:	d11c      	bne.n	8006e08 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006dce:	7dfa      	ldrb	r2, [r7, #23]
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	32ae      	adds	r2, #174	; 0xae
 8006dd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006dd8:	695b      	ldr	r3, [r3, #20]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d014      	beq.n	8006e08 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006dde:	7dfa      	ldrb	r2, [r7, #23]
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006de6:	7dfa      	ldrb	r2, [r7, #23]
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	32ae      	adds	r2, #174	; 0xae
 8006dec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006df0:	695b      	ldr	r3, [r3, #20]
 8006df2:	7afa      	ldrb	r2, [r7, #11]
 8006df4:	4611      	mov	r1, r2
 8006df6:	68f8      	ldr	r0, [r7, #12]
 8006df8:	4798      	blx	r3
 8006dfa:	4603      	mov	r3, r0
 8006dfc:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006dfe:	7dbb      	ldrb	r3, [r7, #22]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d001      	beq.n	8006e08 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006e04:	7dbb      	ldrb	r3, [r7, #22]
 8006e06:	e000      	b.n	8006e0a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006e08:	2300      	movs	r3, #0
}
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	3718      	adds	r7, #24
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bd80      	pop	{r7, pc}

08006e12 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006e12:	b580      	push	{r7, lr}
 8006e14:	b084      	sub	sp, #16
 8006e16:	af00      	add	r7, sp, #0
 8006e18:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2201      	movs	r2, #1
 8006e22:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2200      	movs	r2, #0
 8006e2a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2200      	movs	r2, #0
 8006e32:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2200      	movs	r2, #0
 8006e38:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2200      	movs	r2, #0
 8006e40:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d014      	beq.n	8006e78 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e54:	685b      	ldr	r3, [r3, #4]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d00e      	beq.n	8006e78 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e60:	685b      	ldr	r3, [r3, #4]
 8006e62:	687a      	ldr	r2, [r7, #4]
 8006e64:	6852      	ldr	r2, [r2, #4]
 8006e66:	b2d2      	uxtb	r2, r2
 8006e68:	4611      	mov	r1, r2
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	4798      	blx	r3
 8006e6e:	4603      	mov	r3, r0
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d001      	beq.n	8006e78 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006e74:	2303      	movs	r3, #3
 8006e76:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006e78:	2340      	movs	r3, #64	; 0x40
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	2100      	movs	r1, #0
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	f004 f950 	bl	800b124 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2201      	movs	r2, #1
 8006e88:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2240      	movs	r2, #64	; 0x40
 8006e90:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006e94:	2340      	movs	r3, #64	; 0x40
 8006e96:	2200      	movs	r2, #0
 8006e98:	2180      	movs	r1, #128	; 0x80
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f004 f942 	bl	800b124 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2201      	movs	r2, #1
 8006ea4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2240      	movs	r2, #64	; 0x40
 8006eaa:	621a      	str	r2, [r3, #32]

  return ret;
 8006eac:	7bfb      	ldrb	r3, [r7, #15]
}
 8006eae:	4618      	mov	r0, r3
 8006eb0:	3710      	adds	r7, #16
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	bd80      	pop	{r7, pc}

08006eb6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006eb6:	b480      	push	{r7}
 8006eb8:	b083      	sub	sp, #12
 8006eba:	af00      	add	r7, sp, #0
 8006ebc:	6078      	str	r0, [r7, #4]
 8006ebe:	460b      	mov	r3, r1
 8006ec0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	78fa      	ldrb	r2, [r7, #3]
 8006ec6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006ec8:	2300      	movs	r3, #0
}
 8006eca:	4618      	mov	r0, r3
 8006ecc:	370c      	adds	r7, #12
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed4:	4770      	bx	lr

08006ed6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006ed6:	b480      	push	{r7}
 8006ed8:	b083      	sub	sp, #12
 8006eda:	af00      	add	r7, sp, #0
 8006edc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ee4:	b2db      	uxtb	r3, r3
 8006ee6:	2b04      	cmp	r3, #4
 8006ee8:	d006      	beq.n	8006ef8 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ef0:	b2da      	uxtb	r2, r3
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2204      	movs	r2, #4
 8006efc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006f00:	2300      	movs	r3, #0
}
 8006f02:	4618      	mov	r0, r3
 8006f04:	370c      	adds	r7, #12
 8006f06:	46bd      	mov	sp, r7
 8006f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0c:	4770      	bx	lr

08006f0e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006f0e:	b480      	push	{r7}
 8006f10:	b083      	sub	sp, #12
 8006f12:	af00      	add	r7, sp, #0
 8006f14:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f1c:	b2db      	uxtb	r3, r3
 8006f1e:	2b04      	cmp	r3, #4
 8006f20:	d106      	bne.n	8006f30 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006f28:	b2da      	uxtb	r2, r3
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006f30:	2300      	movs	r3, #0
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	370c      	adds	r7, #12
 8006f36:	46bd      	mov	sp, r7
 8006f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3c:	4770      	bx	lr

08006f3e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006f3e:	b580      	push	{r7, lr}
 8006f40:	b082      	sub	sp, #8
 8006f42:	af00      	add	r7, sp, #0
 8006f44:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f4c:	b2db      	uxtb	r3, r3
 8006f4e:	2b03      	cmp	r3, #3
 8006f50:	d110      	bne.n	8006f74 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d00b      	beq.n	8006f74 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f62:	69db      	ldr	r3, [r3, #28]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d005      	beq.n	8006f74 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f6e:	69db      	ldr	r3, [r3, #28]
 8006f70:	6878      	ldr	r0, [r7, #4]
 8006f72:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006f74:	2300      	movs	r3, #0
}
 8006f76:	4618      	mov	r0, r3
 8006f78:	3708      	adds	r7, #8
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bd80      	pop	{r7, pc}

08006f7e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006f7e:	b580      	push	{r7, lr}
 8006f80:	b082      	sub	sp, #8
 8006f82:	af00      	add	r7, sp, #0
 8006f84:	6078      	str	r0, [r7, #4]
 8006f86:	460b      	mov	r3, r1
 8006f88:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	32ae      	adds	r2, #174	; 0xae
 8006f94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d101      	bne.n	8006fa0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006f9c:	2303      	movs	r3, #3
 8006f9e:	e01c      	b.n	8006fda <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fa6:	b2db      	uxtb	r3, r3
 8006fa8:	2b03      	cmp	r3, #3
 8006faa:	d115      	bne.n	8006fd8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	32ae      	adds	r2, #174	; 0xae
 8006fb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fba:	6a1b      	ldr	r3, [r3, #32]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d00b      	beq.n	8006fd8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	32ae      	adds	r2, #174	; 0xae
 8006fca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fce:	6a1b      	ldr	r3, [r3, #32]
 8006fd0:	78fa      	ldrb	r2, [r7, #3]
 8006fd2:	4611      	mov	r1, r2
 8006fd4:	6878      	ldr	r0, [r7, #4]
 8006fd6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006fd8:	2300      	movs	r3, #0
}
 8006fda:	4618      	mov	r0, r3
 8006fdc:	3708      	adds	r7, #8
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bd80      	pop	{r7, pc}

08006fe2 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006fe2:	b580      	push	{r7, lr}
 8006fe4:	b082      	sub	sp, #8
 8006fe6:	af00      	add	r7, sp, #0
 8006fe8:	6078      	str	r0, [r7, #4]
 8006fea:	460b      	mov	r3, r1
 8006fec:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	32ae      	adds	r2, #174	; 0xae
 8006ff8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d101      	bne.n	8007004 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007000:	2303      	movs	r3, #3
 8007002:	e01c      	b.n	800703e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800700a:	b2db      	uxtb	r3, r3
 800700c:	2b03      	cmp	r3, #3
 800700e:	d115      	bne.n	800703c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	32ae      	adds	r2, #174	; 0xae
 800701a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800701e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007020:	2b00      	cmp	r3, #0
 8007022:	d00b      	beq.n	800703c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	32ae      	adds	r2, #174	; 0xae
 800702e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007034:	78fa      	ldrb	r2, [r7, #3]
 8007036:	4611      	mov	r1, r2
 8007038:	6878      	ldr	r0, [r7, #4]
 800703a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800703c:	2300      	movs	r3, #0
}
 800703e:	4618      	mov	r0, r3
 8007040:	3708      	adds	r7, #8
 8007042:	46bd      	mov	sp, r7
 8007044:	bd80      	pop	{r7, pc}

08007046 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007046:	b480      	push	{r7}
 8007048:	b083      	sub	sp, #12
 800704a:	af00      	add	r7, sp, #0
 800704c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800704e:	2300      	movs	r3, #0
}
 8007050:	4618      	mov	r0, r3
 8007052:	370c      	adds	r7, #12
 8007054:	46bd      	mov	sp, r7
 8007056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705a:	4770      	bx	lr

0800705c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b084      	sub	sp, #16
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007064:	2300      	movs	r3, #0
 8007066:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2201      	movs	r2, #1
 800706c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007076:	2b00      	cmp	r3, #0
 8007078:	d00e      	beq.n	8007098 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007080:	685b      	ldr	r3, [r3, #4]
 8007082:	687a      	ldr	r2, [r7, #4]
 8007084:	6852      	ldr	r2, [r2, #4]
 8007086:	b2d2      	uxtb	r2, r2
 8007088:	4611      	mov	r1, r2
 800708a:	6878      	ldr	r0, [r7, #4]
 800708c:	4798      	blx	r3
 800708e:	4603      	mov	r3, r0
 8007090:	2b00      	cmp	r3, #0
 8007092:	d001      	beq.n	8007098 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007094:	2303      	movs	r3, #3
 8007096:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007098:	7bfb      	ldrb	r3, [r7, #15]
}
 800709a:	4618      	mov	r0, r3
 800709c:	3710      	adds	r7, #16
 800709e:	46bd      	mov	sp, r7
 80070a0:	bd80      	pop	{r7, pc}

080070a2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80070a2:	b480      	push	{r7}
 80070a4:	b083      	sub	sp, #12
 80070a6:	af00      	add	r7, sp, #0
 80070a8:	6078      	str	r0, [r7, #4]
 80070aa:	460b      	mov	r3, r1
 80070ac:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80070ae:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80070b0:	4618      	mov	r0, r3
 80070b2:	370c      	adds	r7, #12
 80070b4:	46bd      	mov	sp, r7
 80070b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ba:	4770      	bx	lr

080070bc <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80070bc:	b480      	push	{r7}
 80070be:	b083      	sub	sp, #12
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
 80070c4:	460b      	mov	r3, r1
 80070c6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80070c8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80070ca:	4618      	mov	r0, r3
 80070cc:	370c      	adds	r7, #12
 80070ce:	46bd      	mov	sp, r7
 80070d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d4:	4770      	bx	lr

080070d6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80070d6:	b580      	push	{r7, lr}
 80070d8:	b086      	sub	sp, #24
 80070da:	af00      	add	r7, sp, #0
 80070dc:	6078      	str	r0, [r7, #4]
 80070de:	460b      	mov	r3, r1
 80070e0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80070ea:	2300      	movs	r3, #0
 80070ec:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	885b      	ldrh	r3, [r3, #2]
 80070f2:	b29a      	uxth	r2, r3
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	781b      	ldrb	r3, [r3, #0]
 80070f8:	b29b      	uxth	r3, r3
 80070fa:	429a      	cmp	r2, r3
 80070fc:	d920      	bls.n	8007140 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	781b      	ldrb	r3, [r3, #0]
 8007102:	b29b      	uxth	r3, r3
 8007104:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007106:	e013      	b.n	8007130 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007108:	f107 030a 	add.w	r3, r7, #10
 800710c:	4619      	mov	r1, r3
 800710e:	6978      	ldr	r0, [r7, #20]
 8007110:	f000 f81b 	bl	800714a <USBD_GetNextDesc>
 8007114:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007116:	697b      	ldr	r3, [r7, #20]
 8007118:	785b      	ldrb	r3, [r3, #1]
 800711a:	2b05      	cmp	r3, #5
 800711c:	d108      	bne.n	8007130 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800711e:	697b      	ldr	r3, [r7, #20]
 8007120:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007122:	693b      	ldr	r3, [r7, #16]
 8007124:	789b      	ldrb	r3, [r3, #2]
 8007126:	78fa      	ldrb	r2, [r7, #3]
 8007128:	429a      	cmp	r2, r3
 800712a:	d008      	beq.n	800713e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800712c:	2300      	movs	r3, #0
 800712e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	885b      	ldrh	r3, [r3, #2]
 8007134:	b29a      	uxth	r2, r3
 8007136:	897b      	ldrh	r3, [r7, #10]
 8007138:	429a      	cmp	r2, r3
 800713a:	d8e5      	bhi.n	8007108 <USBD_GetEpDesc+0x32>
 800713c:	e000      	b.n	8007140 <USBD_GetEpDesc+0x6a>
          break;
 800713e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007140:	693b      	ldr	r3, [r7, #16]
}
 8007142:	4618      	mov	r0, r3
 8007144:	3718      	adds	r7, #24
 8007146:	46bd      	mov	sp, r7
 8007148:	bd80      	pop	{r7, pc}

0800714a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800714a:	b480      	push	{r7}
 800714c:	b085      	sub	sp, #20
 800714e:	af00      	add	r7, sp, #0
 8007150:	6078      	str	r0, [r7, #4]
 8007152:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	881a      	ldrh	r2, [r3, #0]
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	781b      	ldrb	r3, [r3, #0]
 8007160:	b29b      	uxth	r3, r3
 8007162:	4413      	add	r3, r2
 8007164:	b29a      	uxth	r2, r3
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	781b      	ldrb	r3, [r3, #0]
 800716e:	461a      	mov	r2, r3
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	4413      	add	r3, r2
 8007174:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007176:	68fb      	ldr	r3, [r7, #12]
}
 8007178:	4618      	mov	r0, r3
 800717a:	3714      	adds	r7, #20
 800717c:	46bd      	mov	sp, r7
 800717e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007182:	4770      	bx	lr

08007184 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007184:	b480      	push	{r7}
 8007186:	b087      	sub	sp, #28
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007190:	697b      	ldr	r3, [r7, #20]
 8007192:	781b      	ldrb	r3, [r3, #0]
 8007194:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007196:	697b      	ldr	r3, [r7, #20]
 8007198:	3301      	adds	r3, #1
 800719a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800719c:	697b      	ldr	r3, [r7, #20]
 800719e:	781b      	ldrb	r3, [r3, #0]
 80071a0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80071a2:	8a3b      	ldrh	r3, [r7, #16]
 80071a4:	021b      	lsls	r3, r3, #8
 80071a6:	b21a      	sxth	r2, r3
 80071a8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80071ac:	4313      	orrs	r3, r2
 80071ae:	b21b      	sxth	r3, r3
 80071b0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80071b2:	89fb      	ldrh	r3, [r7, #14]
}
 80071b4:	4618      	mov	r0, r3
 80071b6:	371c      	adds	r7, #28
 80071b8:	46bd      	mov	sp, r7
 80071ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071be:	4770      	bx	lr

080071c0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b084      	sub	sp, #16
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
 80071c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80071ca:	2300      	movs	r3, #0
 80071cc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	781b      	ldrb	r3, [r3, #0]
 80071d2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80071d6:	2b40      	cmp	r3, #64	; 0x40
 80071d8:	d005      	beq.n	80071e6 <USBD_StdDevReq+0x26>
 80071da:	2b40      	cmp	r3, #64	; 0x40
 80071dc:	d857      	bhi.n	800728e <USBD_StdDevReq+0xce>
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d00f      	beq.n	8007202 <USBD_StdDevReq+0x42>
 80071e2:	2b20      	cmp	r3, #32
 80071e4:	d153      	bne.n	800728e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	32ae      	adds	r2, #174	; 0xae
 80071f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071f4:	689b      	ldr	r3, [r3, #8]
 80071f6:	6839      	ldr	r1, [r7, #0]
 80071f8:	6878      	ldr	r0, [r7, #4]
 80071fa:	4798      	blx	r3
 80071fc:	4603      	mov	r3, r0
 80071fe:	73fb      	strb	r3, [r7, #15]
      break;
 8007200:	e04a      	b.n	8007298 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	785b      	ldrb	r3, [r3, #1]
 8007206:	2b09      	cmp	r3, #9
 8007208:	d83b      	bhi.n	8007282 <USBD_StdDevReq+0xc2>
 800720a:	a201      	add	r2, pc, #4	; (adr r2, 8007210 <USBD_StdDevReq+0x50>)
 800720c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007210:	08007265 	.word	0x08007265
 8007214:	08007279 	.word	0x08007279
 8007218:	08007283 	.word	0x08007283
 800721c:	0800726f 	.word	0x0800726f
 8007220:	08007283 	.word	0x08007283
 8007224:	08007243 	.word	0x08007243
 8007228:	08007239 	.word	0x08007239
 800722c:	08007283 	.word	0x08007283
 8007230:	0800725b 	.word	0x0800725b
 8007234:	0800724d 	.word	0x0800724d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007238:	6839      	ldr	r1, [r7, #0]
 800723a:	6878      	ldr	r0, [r7, #4]
 800723c:	f000 fa3c 	bl	80076b8 <USBD_GetDescriptor>
          break;
 8007240:	e024      	b.n	800728c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007242:	6839      	ldr	r1, [r7, #0]
 8007244:	6878      	ldr	r0, [r7, #4]
 8007246:	f000 fbcb 	bl	80079e0 <USBD_SetAddress>
          break;
 800724a:	e01f      	b.n	800728c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800724c:	6839      	ldr	r1, [r7, #0]
 800724e:	6878      	ldr	r0, [r7, #4]
 8007250:	f000 fc0a 	bl	8007a68 <USBD_SetConfig>
 8007254:	4603      	mov	r3, r0
 8007256:	73fb      	strb	r3, [r7, #15]
          break;
 8007258:	e018      	b.n	800728c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800725a:	6839      	ldr	r1, [r7, #0]
 800725c:	6878      	ldr	r0, [r7, #4]
 800725e:	f000 fcad 	bl	8007bbc <USBD_GetConfig>
          break;
 8007262:	e013      	b.n	800728c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007264:	6839      	ldr	r1, [r7, #0]
 8007266:	6878      	ldr	r0, [r7, #4]
 8007268:	f000 fcde 	bl	8007c28 <USBD_GetStatus>
          break;
 800726c:	e00e      	b.n	800728c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800726e:	6839      	ldr	r1, [r7, #0]
 8007270:	6878      	ldr	r0, [r7, #4]
 8007272:	f000 fd0d 	bl	8007c90 <USBD_SetFeature>
          break;
 8007276:	e009      	b.n	800728c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007278:	6839      	ldr	r1, [r7, #0]
 800727a:	6878      	ldr	r0, [r7, #4]
 800727c:	f000 fd31 	bl	8007ce2 <USBD_ClrFeature>
          break;
 8007280:	e004      	b.n	800728c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007282:	6839      	ldr	r1, [r7, #0]
 8007284:	6878      	ldr	r0, [r7, #4]
 8007286:	f000 fd88 	bl	8007d9a <USBD_CtlError>
          break;
 800728a:	bf00      	nop
      }
      break;
 800728c:	e004      	b.n	8007298 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800728e:	6839      	ldr	r1, [r7, #0]
 8007290:	6878      	ldr	r0, [r7, #4]
 8007292:	f000 fd82 	bl	8007d9a <USBD_CtlError>
      break;
 8007296:	bf00      	nop
  }

  return ret;
 8007298:	7bfb      	ldrb	r3, [r7, #15]
}
 800729a:	4618      	mov	r0, r3
 800729c:	3710      	adds	r7, #16
 800729e:	46bd      	mov	sp, r7
 80072a0:	bd80      	pop	{r7, pc}
 80072a2:	bf00      	nop

080072a4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b084      	sub	sp, #16
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
 80072ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80072ae:	2300      	movs	r3, #0
 80072b0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	781b      	ldrb	r3, [r3, #0]
 80072b6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80072ba:	2b40      	cmp	r3, #64	; 0x40
 80072bc:	d005      	beq.n	80072ca <USBD_StdItfReq+0x26>
 80072be:	2b40      	cmp	r3, #64	; 0x40
 80072c0:	d852      	bhi.n	8007368 <USBD_StdItfReq+0xc4>
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d001      	beq.n	80072ca <USBD_StdItfReq+0x26>
 80072c6:	2b20      	cmp	r3, #32
 80072c8:	d14e      	bne.n	8007368 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072d0:	b2db      	uxtb	r3, r3
 80072d2:	3b01      	subs	r3, #1
 80072d4:	2b02      	cmp	r3, #2
 80072d6:	d840      	bhi.n	800735a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	889b      	ldrh	r3, [r3, #4]
 80072dc:	b2db      	uxtb	r3, r3
 80072de:	2b01      	cmp	r3, #1
 80072e0:	d836      	bhi.n	8007350 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	889b      	ldrh	r3, [r3, #4]
 80072e6:	b2db      	uxtb	r3, r3
 80072e8:	4619      	mov	r1, r3
 80072ea:	6878      	ldr	r0, [r7, #4]
 80072ec:	f7ff fed9 	bl	80070a2 <USBD_CoreFindIF>
 80072f0:	4603      	mov	r3, r0
 80072f2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80072f4:	7bbb      	ldrb	r3, [r7, #14]
 80072f6:	2bff      	cmp	r3, #255	; 0xff
 80072f8:	d01d      	beq.n	8007336 <USBD_StdItfReq+0x92>
 80072fa:	7bbb      	ldrb	r3, [r7, #14]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d11a      	bne.n	8007336 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007300:	7bba      	ldrb	r2, [r7, #14]
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	32ae      	adds	r2, #174	; 0xae
 8007306:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800730a:	689b      	ldr	r3, [r3, #8]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d00f      	beq.n	8007330 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007310:	7bba      	ldrb	r2, [r7, #14]
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007318:	7bba      	ldrb	r2, [r7, #14]
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	32ae      	adds	r2, #174	; 0xae
 800731e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007322:	689b      	ldr	r3, [r3, #8]
 8007324:	6839      	ldr	r1, [r7, #0]
 8007326:	6878      	ldr	r0, [r7, #4]
 8007328:	4798      	blx	r3
 800732a:	4603      	mov	r3, r0
 800732c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800732e:	e004      	b.n	800733a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007330:	2303      	movs	r3, #3
 8007332:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007334:	e001      	b.n	800733a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007336:	2303      	movs	r3, #3
 8007338:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	88db      	ldrh	r3, [r3, #6]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d110      	bne.n	8007364 <USBD_StdItfReq+0xc0>
 8007342:	7bfb      	ldrb	r3, [r7, #15]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d10d      	bne.n	8007364 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	f000 fdd4 	bl	8007ef6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800734e:	e009      	b.n	8007364 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007350:	6839      	ldr	r1, [r7, #0]
 8007352:	6878      	ldr	r0, [r7, #4]
 8007354:	f000 fd21 	bl	8007d9a <USBD_CtlError>
          break;
 8007358:	e004      	b.n	8007364 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800735a:	6839      	ldr	r1, [r7, #0]
 800735c:	6878      	ldr	r0, [r7, #4]
 800735e:	f000 fd1c 	bl	8007d9a <USBD_CtlError>
          break;
 8007362:	e000      	b.n	8007366 <USBD_StdItfReq+0xc2>
          break;
 8007364:	bf00      	nop
      }
      break;
 8007366:	e004      	b.n	8007372 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007368:	6839      	ldr	r1, [r7, #0]
 800736a:	6878      	ldr	r0, [r7, #4]
 800736c:	f000 fd15 	bl	8007d9a <USBD_CtlError>
      break;
 8007370:	bf00      	nop
  }

  return ret;
 8007372:	7bfb      	ldrb	r3, [r7, #15]
}
 8007374:	4618      	mov	r0, r3
 8007376:	3710      	adds	r7, #16
 8007378:	46bd      	mov	sp, r7
 800737a:	bd80      	pop	{r7, pc}

0800737c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b084      	sub	sp, #16
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
 8007384:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007386:	2300      	movs	r3, #0
 8007388:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	889b      	ldrh	r3, [r3, #4]
 800738e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	781b      	ldrb	r3, [r3, #0]
 8007394:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007398:	2b40      	cmp	r3, #64	; 0x40
 800739a:	d007      	beq.n	80073ac <USBD_StdEPReq+0x30>
 800739c:	2b40      	cmp	r3, #64	; 0x40
 800739e:	f200 817f 	bhi.w	80076a0 <USBD_StdEPReq+0x324>
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d02a      	beq.n	80073fc <USBD_StdEPReq+0x80>
 80073a6:	2b20      	cmp	r3, #32
 80073a8:	f040 817a 	bne.w	80076a0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80073ac:	7bbb      	ldrb	r3, [r7, #14]
 80073ae:	4619      	mov	r1, r3
 80073b0:	6878      	ldr	r0, [r7, #4]
 80073b2:	f7ff fe83 	bl	80070bc <USBD_CoreFindEP>
 80073b6:	4603      	mov	r3, r0
 80073b8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80073ba:	7b7b      	ldrb	r3, [r7, #13]
 80073bc:	2bff      	cmp	r3, #255	; 0xff
 80073be:	f000 8174 	beq.w	80076aa <USBD_StdEPReq+0x32e>
 80073c2:	7b7b      	ldrb	r3, [r7, #13]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	f040 8170 	bne.w	80076aa <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80073ca:	7b7a      	ldrb	r2, [r7, #13]
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80073d2:	7b7a      	ldrb	r2, [r7, #13]
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	32ae      	adds	r2, #174	; 0xae
 80073d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073dc:	689b      	ldr	r3, [r3, #8]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	f000 8163 	beq.w	80076aa <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80073e4:	7b7a      	ldrb	r2, [r7, #13]
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	32ae      	adds	r2, #174	; 0xae
 80073ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073ee:	689b      	ldr	r3, [r3, #8]
 80073f0:	6839      	ldr	r1, [r7, #0]
 80073f2:	6878      	ldr	r0, [r7, #4]
 80073f4:	4798      	blx	r3
 80073f6:	4603      	mov	r3, r0
 80073f8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80073fa:	e156      	b.n	80076aa <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	785b      	ldrb	r3, [r3, #1]
 8007400:	2b03      	cmp	r3, #3
 8007402:	d008      	beq.n	8007416 <USBD_StdEPReq+0x9a>
 8007404:	2b03      	cmp	r3, #3
 8007406:	f300 8145 	bgt.w	8007694 <USBD_StdEPReq+0x318>
 800740a:	2b00      	cmp	r3, #0
 800740c:	f000 809b 	beq.w	8007546 <USBD_StdEPReq+0x1ca>
 8007410:	2b01      	cmp	r3, #1
 8007412:	d03c      	beq.n	800748e <USBD_StdEPReq+0x112>
 8007414:	e13e      	b.n	8007694 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800741c:	b2db      	uxtb	r3, r3
 800741e:	2b02      	cmp	r3, #2
 8007420:	d002      	beq.n	8007428 <USBD_StdEPReq+0xac>
 8007422:	2b03      	cmp	r3, #3
 8007424:	d016      	beq.n	8007454 <USBD_StdEPReq+0xd8>
 8007426:	e02c      	b.n	8007482 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007428:	7bbb      	ldrb	r3, [r7, #14]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d00d      	beq.n	800744a <USBD_StdEPReq+0xce>
 800742e:	7bbb      	ldrb	r3, [r7, #14]
 8007430:	2b80      	cmp	r3, #128	; 0x80
 8007432:	d00a      	beq.n	800744a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007434:	7bbb      	ldrb	r3, [r7, #14]
 8007436:	4619      	mov	r1, r3
 8007438:	6878      	ldr	r0, [r7, #4]
 800743a:	f003 fee7 	bl	800b20c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800743e:	2180      	movs	r1, #128	; 0x80
 8007440:	6878      	ldr	r0, [r7, #4]
 8007442:	f003 fee3 	bl	800b20c <USBD_LL_StallEP>
 8007446:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007448:	e020      	b.n	800748c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800744a:	6839      	ldr	r1, [r7, #0]
 800744c:	6878      	ldr	r0, [r7, #4]
 800744e:	f000 fca4 	bl	8007d9a <USBD_CtlError>
              break;
 8007452:	e01b      	b.n	800748c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	885b      	ldrh	r3, [r3, #2]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d10e      	bne.n	800747a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800745c:	7bbb      	ldrb	r3, [r7, #14]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d00b      	beq.n	800747a <USBD_StdEPReq+0xfe>
 8007462:	7bbb      	ldrb	r3, [r7, #14]
 8007464:	2b80      	cmp	r3, #128	; 0x80
 8007466:	d008      	beq.n	800747a <USBD_StdEPReq+0xfe>
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	88db      	ldrh	r3, [r3, #6]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d104      	bne.n	800747a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007470:	7bbb      	ldrb	r3, [r7, #14]
 8007472:	4619      	mov	r1, r3
 8007474:	6878      	ldr	r0, [r7, #4]
 8007476:	f003 fec9 	bl	800b20c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800747a:	6878      	ldr	r0, [r7, #4]
 800747c:	f000 fd3b 	bl	8007ef6 <USBD_CtlSendStatus>

              break;
 8007480:	e004      	b.n	800748c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007482:	6839      	ldr	r1, [r7, #0]
 8007484:	6878      	ldr	r0, [r7, #4]
 8007486:	f000 fc88 	bl	8007d9a <USBD_CtlError>
              break;
 800748a:	bf00      	nop
          }
          break;
 800748c:	e107      	b.n	800769e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007494:	b2db      	uxtb	r3, r3
 8007496:	2b02      	cmp	r3, #2
 8007498:	d002      	beq.n	80074a0 <USBD_StdEPReq+0x124>
 800749a:	2b03      	cmp	r3, #3
 800749c:	d016      	beq.n	80074cc <USBD_StdEPReq+0x150>
 800749e:	e04b      	b.n	8007538 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80074a0:	7bbb      	ldrb	r3, [r7, #14]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d00d      	beq.n	80074c2 <USBD_StdEPReq+0x146>
 80074a6:	7bbb      	ldrb	r3, [r7, #14]
 80074a8:	2b80      	cmp	r3, #128	; 0x80
 80074aa:	d00a      	beq.n	80074c2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80074ac:	7bbb      	ldrb	r3, [r7, #14]
 80074ae:	4619      	mov	r1, r3
 80074b0:	6878      	ldr	r0, [r7, #4]
 80074b2:	f003 feab 	bl	800b20c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80074b6:	2180      	movs	r1, #128	; 0x80
 80074b8:	6878      	ldr	r0, [r7, #4]
 80074ba:	f003 fea7 	bl	800b20c <USBD_LL_StallEP>
 80074be:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80074c0:	e040      	b.n	8007544 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80074c2:	6839      	ldr	r1, [r7, #0]
 80074c4:	6878      	ldr	r0, [r7, #4]
 80074c6:	f000 fc68 	bl	8007d9a <USBD_CtlError>
              break;
 80074ca:	e03b      	b.n	8007544 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	885b      	ldrh	r3, [r3, #2]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d136      	bne.n	8007542 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80074d4:	7bbb      	ldrb	r3, [r7, #14]
 80074d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d004      	beq.n	80074e8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80074de:	7bbb      	ldrb	r3, [r7, #14]
 80074e0:	4619      	mov	r1, r3
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f003 fec8 	bl	800b278 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80074e8:	6878      	ldr	r0, [r7, #4]
 80074ea:	f000 fd04 	bl	8007ef6 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80074ee:	7bbb      	ldrb	r3, [r7, #14]
 80074f0:	4619      	mov	r1, r3
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	f7ff fde2 	bl	80070bc <USBD_CoreFindEP>
 80074f8:	4603      	mov	r3, r0
 80074fa:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80074fc:	7b7b      	ldrb	r3, [r7, #13]
 80074fe:	2bff      	cmp	r3, #255	; 0xff
 8007500:	d01f      	beq.n	8007542 <USBD_StdEPReq+0x1c6>
 8007502:	7b7b      	ldrb	r3, [r7, #13]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d11c      	bne.n	8007542 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007508:	7b7a      	ldrb	r2, [r7, #13]
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007510:	7b7a      	ldrb	r2, [r7, #13]
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	32ae      	adds	r2, #174	; 0xae
 8007516:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800751a:	689b      	ldr	r3, [r3, #8]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d010      	beq.n	8007542 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007520:	7b7a      	ldrb	r2, [r7, #13]
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	32ae      	adds	r2, #174	; 0xae
 8007526:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800752a:	689b      	ldr	r3, [r3, #8]
 800752c:	6839      	ldr	r1, [r7, #0]
 800752e:	6878      	ldr	r0, [r7, #4]
 8007530:	4798      	blx	r3
 8007532:	4603      	mov	r3, r0
 8007534:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007536:	e004      	b.n	8007542 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007538:	6839      	ldr	r1, [r7, #0]
 800753a:	6878      	ldr	r0, [r7, #4]
 800753c:	f000 fc2d 	bl	8007d9a <USBD_CtlError>
              break;
 8007540:	e000      	b.n	8007544 <USBD_StdEPReq+0x1c8>
              break;
 8007542:	bf00      	nop
          }
          break;
 8007544:	e0ab      	b.n	800769e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800754c:	b2db      	uxtb	r3, r3
 800754e:	2b02      	cmp	r3, #2
 8007550:	d002      	beq.n	8007558 <USBD_StdEPReq+0x1dc>
 8007552:	2b03      	cmp	r3, #3
 8007554:	d032      	beq.n	80075bc <USBD_StdEPReq+0x240>
 8007556:	e097      	b.n	8007688 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007558:	7bbb      	ldrb	r3, [r7, #14]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d007      	beq.n	800756e <USBD_StdEPReq+0x1f2>
 800755e:	7bbb      	ldrb	r3, [r7, #14]
 8007560:	2b80      	cmp	r3, #128	; 0x80
 8007562:	d004      	beq.n	800756e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007564:	6839      	ldr	r1, [r7, #0]
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	f000 fc17 	bl	8007d9a <USBD_CtlError>
                break;
 800756c:	e091      	b.n	8007692 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800756e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007572:	2b00      	cmp	r3, #0
 8007574:	da0b      	bge.n	800758e <USBD_StdEPReq+0x212>
 8007576:	7bbb      	ldrb	r3, [r7, #14]
 8007578:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800757c:	4613      	mov	r3, r2
 800757e:	009b      	lsls	r3, r3, #2
 8007580:	4413      	add	r3, r2
 8007582:	009b      	lsls	r3, r3, #2
 8007584:	3310      	adds	r3, #16
 8007586:	687a      	ldr	r2, [r7, #4]
 8007588:	4413      	add	r3, r2
 800758a:	3304      	adds	r3, #4
 800758c:	e00b      	b.n	80075a6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800758e:	7bbb      	ldrb	r3, [r7, #14]
 8007590:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007594:	4613      	mov	r3, r2
 8007596:	009b      	lsls	r3, r3, #2
 8007598:	4413      	add	r3, r2
 800759a:	009b      	lsls	r3, r3, #2
 800759c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80075a0:	687a      	ldr	r2, [r7, #4]
 80075a2:	4413      	add	r3, r2
 80075a4:	3304      	adds	r3, #4
 80075a6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80075a8:	68bb      	ldr	r3, [r7, #8]
 80075aa:	2200      	movs	r2, #0
 80075ac:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80075ae:	68bb      	ldr	r3, [r7, #8]
 80075b0:	2202      	movs	r2, #2
 80075b2:	4619      	mov	r1, r3
 80075b4:	6878      	ldr	r0, [r7, #4]
 80075b6:	f000 fc61 	bl	8007e7c <USBD_CtlSendData>
              break;
 80075ba:	e06a      	b.n	8007692 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80075bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	da11      	bge.n	80075e8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80075c4:	7bbb      	ldrb	r3, [r7, #14]
 80075c6:	f003 020f 	and.w	r2, r3, #15
 80075ca:	6879      	ldr	r1, [r7, #4]
 80075cc:	4613      	mov	r3, r2
 80075ce:	009b      	lsls	r3, r3, #2
 80075d0:	4413      	add	r3, r2
 80075d2:	009b      	lsls	r3, r3, #2
 80075d4:	440b      	add	r3, r1
 80075d6:	3324      	adds	r3, #36	; 0x24
 80075d8:	881b      	ldrh	r3, [r3, #0]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d117      	bne.n	800760e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80075de:	6839      	ldr	r1, [r7, #0]
 80075e0:	6878      	ldr	r0, [r7, #4]
 80075e2:	f000 fbda 	bl	8007d9a <USBD_CtlError>
                  break;
 80075e6:	e054      	b.n	8007692 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80075e8:	7bbb      	ldrb	r3, [r7, #14]
 80075ea:	f003 020f 	and.w	r2, r3, #15
 80075ee:	6879      	ldr	r1, [r7, #4]
 80075f0:	4613      	mov	r3, r2
 80075f2:	009b      	lsls	r3, r3, #2
 80075f4:	4413      	add	r3, r2
 80075f6:	009b      	lsls	r3, r3, #2
 80075f8:	440b      	add	r3, r1
 80075fa:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80075fe:	881b      	ldrh	r3, [r3, #0]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d104      	bne.n	800760e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007604:	6839      	ldr	r1, [r7, #0]
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f000 fbc7 	bl	8007d9a <USBD_CtlError>
                  break;
 800760c:	e041      	b.n	8007692 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800760e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007612:	2b00      	cmp	r3, #0
 8007614:	da0b      	bge.n	800762e <USBD_StdEPReq+0x2b2>
 8007616:	7bbb      	ldrb	r3, [r7, #14]
 8007618:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800761c:	4613      	mov	r3, r2
 800761e:	009b      	lsls	r3, r3, #2
 8007620:	4413      	add	r3, r2
 8007622:	009b      	lsls	r3, r3, #2
 8007624:	3310      	adds	r3, #16
 8007626:	687a      	ldr	r2, [r7, #4]
 8007628:	4413      	add	r3, r2
 800762a:	3304      	adds	r3, #4
 800762c:	e00b      	b.n	8007646 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800762e:	7bbb      	ldrb	r3, [r7, #14]
 8007630:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007634:	4613      	mov	r3, r2
 8007636:	009b      	lsls	r3, r3, #2
 8007638:	4413      	add	r3, r2
 800763a:	009b      	lsls	r3, r3, #2
 800763c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007640:	687a      	ldr	r2, [r7, #4]
 8007642:	4413      	add	r3, r2
 8007644:	3304      	adds	r3, #4
 8007646:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007648:	7bbb      	ldrb	r3, [r7, #14]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d002      	beq.n	8007654 <USBD_StdEPReq+0x2d8>
 800764e:	7bbb      	ldrb	r3, [r7, #14]
 8007650:	2b80      	cmp	r3, #128	; 0x80
 8007652:	d103      	bne.n	800765c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007654:	68bb      	ldr	r3, [r7, #8]
 8007656:	2200      	movs	r2, #0
 8007658:	601a      	str	r2, [r3, #0]
 800765a:	e00e      	b.n	800767a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800765c:	7bbb      	ldrb	r3, [r7, #14]
 800765e:	4619      	mov	r1, r3
 8007660:	6878      	ldr	r0, [r7, #4]
 8007662:	f003 fe3f 	bl	800b2e4 <USBD_LL_IsStallEP>
 8007666:	4603      	mov	r3, r0
 8007668:	2b00      	cmp	r3, #0
 800766a:	d003      	beq.n	8007674 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800766c:	68bb      	ldr	r3, [r7, #8]
 800766e:	2201      	movs	r2, #1
 8007670:	601a      	str	r2, [r3, #0]
 8007672:	e002      	b.n	800767a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007674:	68bb      	ldr	r3, [r7, #8]
 8007676:	2200      	movs	r2, #0
 8007678:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800767a:	68bb      	ldr	r3, [r7, #8]
 800767c:	2202      	movs	r2, #2
 800767e:	4619      	mov	r1, r3
 8007680:	6878      	ldr	r0, [r7, #4]
 8007682:	f000 fbfb 	bl	8007e7c <USBD_CtlSendData>
              break;
 8007686:	e004      	b.n	8007692 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007688:	6839      	ldr	r1, [r7, #0]
 800768a:	6878      	ldr	r0, [r7, #4]
 800768c:	f000 fb85 	bl	8007d9a <USBD_CtlError>
              break;
 8007690:	bf00      	nop
          }
          break;
 8007692:	e004      	b.n	800769e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007694:	6839      	ldr	r1, [r7, #0]
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	f000 fb7f 	bl	8007d9a <USBD_CtlError>
          break;
 800769c:	bf00      	nop
      }
      break;
 800769e:	e005      	b.n	80076ac <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80076a0:	6839      	ldr	r1, [r7, #0]
 80076a2:	6878      	ldr	r0, [r7, #4]
 80076a4:	f000 fb79 	bl	8007d9a <USBD_CtlError>
      break;
 80076a8:	e000      	b.n	80076ac <USBD_StdEPReq+0x330>
      break;
 80076aa:	bf00      	nop
  }

  return ret;
 80076ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80076ae:	4618      	mov	r0, r3
 80076b0:	3710      	adds	r7, #16
 80076b2:	46bd      	mov	sp, r7
 80076b4:	bd80      	pop	{r7, pc}
	...

080076b8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b084      	sub	sp, #16
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
 80076c0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80076c2:	2300      	movs	r3, #0
 80076c4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80076c6:	2300      	movs	r3, #0
 80076c8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80076ca:	2300      	movs	r3, #0
 80076cc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	885b      	ldrh	r3, [r3, #2]
 80076d2:	0a1b      	lsrs	r3, r3, #8
 80076d4:	b29b      	uxth	r3, r3
 80076d6:	3b01      	subs	r3, #1
 80076d8:	2b0e      	cmp	r3, #14
 80076da:	f200 8152 	bhi.w	8007982 <USBD_GetDescriptor+0x2ca>
 80076de:	a201      	add	r2, pc, #4	; (adr r2, 80076e4 <USBD_GetDescriptor+0x2c>)
 80076e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076e4:	08007755 	.word	0x08007755
 80076e8:	0800776d 	.word	0x0800776d
 80076ec:	080077ad 	.word	0x080077ad
 80076f0:	08007983 	.word	0x08007983
 80076f4:	08007983 	.word	0x08007983
 80076f8:	08007923 	.word	0x08007923
 80076fc:	0800794f 	.word	0x0800794f
 8007700:	08007983 	.word	0x08007983
 8007704:	08007983 	.word	0x08007983
 8007708:	08007983 	.word	0x08007983
 800770c:	08007983 	.word	0x08007983
 8007710:	08007983 	.word	0x08007983
 8007714:	08007983 	.word	0x08007983
 8007718:	08007983 	.word	0x08007983
 800771c:	08007721 	.word	0x08007721
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007726:	69db      	ldr	r3, [r3, #28]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d00b      	beq.n	8007744 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007732:	69db      	ldr	r3, [r3, #28]
 8007734:	687a      	ldr	r2, [r7, #4]
 8007736:	7c12      	ldrb	r2, [r2, #16]
 8007738:	f107 0108 	add.w	r1, r7, #8
 800773c:	4610      	mov	r0, r2
 800773e:	4798      	blx	r3
 8007740:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007742:	e126      	b.n	8007992 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007744:	6839      	ldr	r1, [r7, #0]
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	f000 fb27 	bl	8007d9a <USBD_CtlError>
        err++;
 800774c:	7afb      	ldrb	r3, [r7, #11]
 800774e:	3301      	adds	r3, #1
 8007750:	72fb      	strb	r3, [r7, #11]
      break;
 8007752:	e11e      	b.n	8007992 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	687a      	ldr	r2, [r7, #4]
 800775e:	7c12      	ldrb	r2, [r2, #16]
 8007760:	f107 0108 	add.w	r1, r7, #8
 8007764:	4610      	mov	r0, r2
 8007766:	4798      	blx	r3
 8007768:	60f8      	str	r0, [r7, #12]
      break;
 800776a:	e112      	b.n	8007992 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	7c1b      	ldrb	r3, [r3, #16]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d10d      	bne.n	8007790 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800777a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800777c:	f107 0208 	add.w	r2, r7, #8
 8007780:	4610      	mov	r0, r2
 8007782:	4798      	blx	r3
 8007784:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	3301      	adds	r3, #1
 800778a:	2202      	movs	r2, #2
 800778c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800778e:	e100      	b.n	8007992 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007798:	f107 0208 	add.w	r2, r7, #8
 800779c:	4610      	mov	r0, r2
 800779e:	4798      	blx	r3
 80077a0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	3301      	adds	r3, #1
 80077a6:	2202      	movs	r2, #2
 80077a8:	701a      	strb	r2, [r3, #0]
      break;
 80077aa:	e0f2      	b.n	8007992 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	885b      	ldrh	r3, [r3, #2]
 80077b0:	b2db      	uxtb	r3, r3
 80077b2:	2b05      	cmp	r3, #5
 80077b4:	f200 80ac 	bhi.w	8007910 <USBD_GetDescriptor+0x258>
 80077b8:	a201      	add	r2, pc, #4	; (adr r2, 80077c0 <USBD_GetDescriptor+0x108>)
 80077ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077be:	bf00      	nop
 80077c0:	080077d9 	.word	0x080077d9
 80077c4:	0800780d 	.word	0x0800780d
 80077c8:	08007841 	.word	0x08007841
 80077cc:	08007875 	.word	0x08007875
 80077d0:	080078a9 	.word	0x080078a9
 80077d4:	080078dd 	.word	0x080078dd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077de:	685b      	ldr	r3, [r3, #4]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d00b      	beq.n	80077fc <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077ea:	685b      	ldr	r3, [r3, #4]
 80077ec:	687a      	ldr	r2, [r7, #4]
 80077ee:	7c12      	ldrb	r2, [r2, #16]
 80077f0:	f107 0108 	add.w	r1, r7, #8
 80077f4:	4610      	mov	r0, r2
 80077f6:	4798      	blx	r3
 80077f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80077fa:	e091      	b.n	8007920 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80077fc:	6839      	ldr	r1, [r7, #0]
 80077fe:	6878      	ldr	r0, [r7, #4]
 8007800:	f000 facb 	bl	8007d9a <USBD_CtlError>
            err++;
 8007804:	7afb      	ldrb	r3, [r7, #11]
 8007806:	3301      	adds	r3, #1
 8007808:	72fb      	strb	r3, [r7, #11]
          break;
 800780a:	e089      	b.n	8007920 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007812:	689b      	ldr	r3, [r3, #8]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d00b      	beq.n	8007830 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800781e:	689b      	ldr	r3, [r3, #8]
 8007820:	687a      	ldr	r2, [r7, #4]
 8007822:	7c12      	ldrb	r2, [r2, #16]
 8007824:	f107 0108 	add.w	r1, r7, #8
 8007828:	4610      	mov	r0, r2
 800782a:	4798      	blx	r3
 800782c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800782e:	e077      	b.n	8007920 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007830:	6839      	ldr	r1, [r7, #0]
 8007832:	6878      	ldr	r0, [r7, #4]
 8007834:	f000 fab1 	bl	8007d9a <USBD_CtlError>
            err++;
 8007838:	7afb      	ldrb	r3, [r7, #11]
 800783a:	3301      	adds	r3, #1
 800783c:	72fb      	strb	r3, [r7, #11]
          break;
 800783e:	e06f      	b.n	8007920 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007846:	68db      	ldr	r3, [r3, #12]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d00b      	beq.n	8007864 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007852:	68db      	ldr	r3, [r3, #12]
 8007854:	687a      	ldr	r2, [r7, #4]
 8007856:	7c12      	ldrb	r2, [r2, #16]
 8007858:	f107 0108 	add.w	r1, r7, #8
 800785c:	4610      	mov	r0, r2
 800785e:	4798      	blx	r3
 8007860:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007862:	e05d      	b.n	8007920 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007864:	6839      	ldr	r1, [r7, #0]
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f000 fa97 	bl	8007d9a <USBD_CtlError>
            err++;
 800786c:	7afb      	ldrb	r3, [r7, #11]
 800786e:	3301      	adds	r3, #1
 8007870:	72fb      	strb	r3, [r7, #11]
          break;
 8007872:	e055      	b.n	8007920 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800787a:	691b      	ldr	r3, [r3, #16]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d00b      	beq.n	8007898 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007886:	691b      	ldr	r3, [r3, #16]
 8007888:	687a      	ldr	r2, [r7, #4]
 800788a:	7c12      	ldrb	r2, [r2, #16]
 800788c:	f107 0108 	add.w	r1, r7, #8
 8007890:	4610      	mov	r0, r2
 8007892:	4798      	blx	r3
 8007894:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007896:	e043      	b.n	8007920 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007898:	6839      	ldr	r1, [r7, #0]
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	f000 fa7d 	bl	8007d9a <USBD_CtlError>
            err++;
 80078a0:	7afb      	ldrb	r3, [r7, #11]
 80078a2:	3301      	adds	r3, #1
 80078a4:	72fb      	strb	r3, [r7, #11]
          break;
 80078a6:	e03b      	b.n	8007920 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078ae:	695b      	ldr	r3, [r3, #20]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d00b      	beq.n	80078cc <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078ba:	695b      	ldr	r3, [r3, #20]
 80078bc:	687a      	ldr	r2, [r7, #4]
 80078be:	7c12      	ldrb	r2, [r2, #16]
 80078c0:	f107 0108 	add.w	r1, r7, #8
 80078c4:	4610      	mov	r0, r2
 80078c6:	4798      	blx	r3
 80078c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80078ca:	e029      	b.n	8007920 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80078cc:	6839      	ldr	r1, [r7, #0]
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	f000 fa63 	bl	8007d9a <USBD_CtlError>
            err++;
 80078d4:	7afb      	ldrb	r3, [r7, #11]
 80078d6:	3301      	adds	r3, #1
 80078d8:	72fb      	strb	r3, [r7, #11]
          break;
 80078da:	e021      	b.n	8007920 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078e2:	699b      	ldr	r3, [r3, #24]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d00b      	beq.n	8007900 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078ee:	699b      	ldr	r3, [r3, #24]
 80078f0:	687a      	ldr	r2, [r7, #4]
 80078f2:	7c12      	ldrb	r2, [r2, #16]
 80078f4:	f107 0108 	add.w	r1, r7, #8
 80078f8:	4610      	mov	r0, r2
 80078fa:	4798      	blx	r3
 80078fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80078fe:	e00f      	b.n	8007920 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007900:	6839      	ldr	r1, [r7, #0]
 8007902:	6878      	ldr	r0, [r7, #4]
 8007904:	f000 fa49 	bl	8007d9a <USBD_CtlError>
            err++;
 8007908:	7afb      	ldrb	r3, [r7, #11]
 800790a:	3301      	adds	r3, #1
 800790c:	72fb      	strb	r3, [r7, #11]
          break;
 800790e:	e007      	b.n	8007920 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007910:	6839      	ldr	r1, [r7, #0]
 8007912:	6878      	ldr	r0, [r7, #4]
 8007914:	f000 fa41 	bl	8007d9a <USBD_CtlError>
          err++;
 8007918:	7afb      	ldrb	r3, [r7, #11]
 800791a:	3301      	adds	r3, #1
 800791c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800791e:	bf00      	nop
      }
      break;
 8007920:	e037      	b.n	8007992 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	7c1b      	ldrb	r3, [r3, #16]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d109      	bne.n	800793e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007930:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007932:	f107 0208 	add.w	r2, r7, #8
 8007936:	4610      	mov	r0, r2
 8007938:	4798      	blx	r3
 800793a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800793c:	e029      	b.n	8007992 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800793e:	6839      	ldr	r1, [r7, #0]
 8007940:	6878      	ldr	r0, [r7, #4]
 8007942:	f000 fa2a 	bl	8007d9a <USBD_CtlError>
        err++;
 8007946:	7afb      	ldrb	r3, [r7, #11]
 8007948:	3301      	adds	r3, #1
 800794a:	72fb      	strb	r3, [r7, #11]
      break;
 800794c:	e021      	b.n	8007992 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	7c1b      	ldrb	r3, [r3, #16]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d10d      	bne.n	8007972 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800795c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800795e:	f107 0208 	add.w	r2, r7, #8
 8007962:	4610      	mov	r0, r2
 8007964:	4798      	blx	r3
 8007966:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	3301      	adds	r3, #1
 800796c:	2207      	movs	r2, #7
 800796e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007970:	e00f      	b.n	8007992 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007972:	6839      	ldr	r1, [r7, #0]
 8007974:	6878      	ldr	r0, [r7, #4]
 8007976:	f000 fa10 	bl	8007d9a <USBD_CtlError>
        err++;
 800797a:	7afb      	ldrb	r3, [r7, #11]
 800797c:	3301      	adds	r3, #1
 800797e:	72fb      	strb	r3, [r7, #11]
      break;
 8007980:	e007      	b.n	8007992 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8007982:	6839      	ldr	r1, [r7, #0]
 8007984:	6878      	ldr	r0, [r7, #4]
 8007986:	f000 fa08 	bl	8007d9a <USBD_CtlError>
      err++;
 800798a:	7afb      	ldrb	r3, [r7, #11]
 800798c:	3301      	adds	r3, #1
 800798e:	72fb      	strb	r3, [r7, #11]
      break;
 8007990:	bf00      	nop
  }

  if (err != 0U)
 8007992:	7afb      	ldrb	r3, [r7, #11]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d11e      	bne.n	80079d6 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	88db      	ldrh	r3, [r3, #6]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d016      	beq.n	80079ce <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80079a0:	893b      	ldrh	r3, [r7, #8]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d00e      	beq.n	80079c4 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	88da      	ldrh	r2, [r3, #6]
 80079aa:	893b      	ldrh	r3, [r7, #8]
 80079ac:	4293      	cmp	r3, r2
 80079ae:	bf28      	it	cs
 80079b0:	4613      	movcs	r3, r2
 80079b2:	b29b      	uxth	r3, r3
 80079b4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80079b6:	893b      	ldrh	r3, [r7, #8]
 80079b8:	461a      	mov	r2, r3
 80079ba:	68f9      	ldr	r1, [r7, #12]
 80079bc:	6878      	ldr	r0, [r7, #4]
 80079be:	f000 fa5d 	bl	8007e7c <USBD_CtlSendData>
 80079c2:	e009      	b.n	80079d8 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80079c4:	6839      	ldr	r1, [r7, #0]
 80079c6:	6878      	ldr	r0, [r7, #4]
 80079c8:	f000 f9e7 	bl	8007d9a <USBD_CtlError>
 80079cc:	e004      	b.n	80079d8 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80079ce:	6878      	ldr	r0, [r7, #4]
 80079d0:	f000 fa91 	bl	8007ef6 <USBD_CtlSendStatus>
 80079d4:	e000      	b.n	80079d8 <USBD_GetDescriptor+0x320>
    return;
 80079d6:	bf00      	nop
  }
}
 80079d8:	3710      	adds	r7, #16
 80079da:	46bd      	mov	sp, r7
 80079dc:	bd80      	pop	{r7, pc}
 80079de:	bf00      	nop

080079e0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b084      	sub	sp, #16
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
 80079e8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	889b      	ldrh	r3, [r3, #4]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d131      	bne.n	8007a56 <USBD_SetAddress+0x76>
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	88db      	ldrh	r3, [r3, #6]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d12d      	bne.n	8007a56 <USBD_SetAddress+0x76>
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	885b      	ldrh	r3, [r3, #2]
 80079fe:	2b7f      	cmp	r3, #127	; 0x7f
 8007a00:	d829      	bhi.n	8007a56 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	885b      	ldrh	r3, [r3, #2]
 8007a06:	b2db      	uxtb	r3, r3
 8007a08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a0c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a14:	b2db      	uxtb	r3, r3
 8007a16:	2b03      	cmp	r3, #3
 8007a18:	d104      	bne.n	8007a24 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007a1a:	6839      	ldr	r1, [r7, #0]
 8007a1c:	6878      	ldr	r0, [r7, #4]
 8007a1e:	f000 f9bc 	bl	8007d9a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a22:	e01d      	b.n	8007a60 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	7bfa      	ldrb	r2, [r7, #15]
 8007a28:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007a2c:	7bfb      	ldrb	r3, [r7, #15]
 8007a2e:	4619      	mov	r1, r3
 8007a30:	6878      	ldr	r0, [r7, #4]
 8007a32:	f003 fc83 	bl	800b33c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007a36:	6878      	ldr	r0, [r7, #4]
 8007a38:	f000 fa5d 	bl	8007ef6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007a3c:	7bfb      	ldrb	r3, [r7, #15]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d004      	beq.n	8007a4c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2202      	movs	r2, #2
 8007a46:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a4a:	e009      	b.n	8007a60 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2201      	movs	r2, #1
 8007a50:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a54:	e004      	b.n	8007a60 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007a56:	6839      	ldr	r1, [r7, #0]
 8007a58:	6878      	ldr	r0, [r7, #4]
 8007a5a:	f000 f99e 	bl	8007d9a <USBD_CtlError>
  }
}
 8007a5e:	bf00      	nop
 8007a60:	bf00      	nop
 8007a62:	3710      	adds	r7, #16
 8007a64:	46bd      	mov	sp, r7
 8007a66:	bd80      	pop	{r7, pc}

08007a68 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b084      	sub	sp, #16
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
 8007a70:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007a72:	2300      	movs	r3, #0
 8007a74:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	885b      	ldrh	r3, [r3, #2]
 8007a7a:	b2da      	uxtb	r2, r3
 8007a7c:	4b4e      	ldr	r3, [pc, #312]	; (8007bb8 <USBD_SetConfig+0x150>)
 8007a7e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007a80:	4b4d      	ldr	r3, [pc, #308]	; (8007bb8 <USBD_SetConfig+0x150>)
 8007a82:	781b      	ldrb	r3, [r3, #0]
 8007a84:	2b01      	cmp	r3, #1
 8007a86:	d905      	bls.n	8007a94 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007a88:	6839      	ldr	r1, [r7, #0]
 8007a8a:	6878      	ldr	r0, [r7, #4]
 8007a8c:	f000 f985 	bl	8007d9a <USBD_CtlError>
    return USBD_FAIL;
 8007a90:	2303      	movs	r3, #3
 8007a92:	e08c      	b.n	8007bae <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a9a:	b2db      	uxtb	r3, r3
 8007a9c:	2b02      	cmp	r3, #2
 8007a9e:	d002      	beq.n	8007aa6 <USBD_SetConfig+0x3e>
 8007aa0:	2b03      	cmp	r3, #3
 8007aa2:	d029      	beq.n	8007af8 <USBD_SetConfig+0x90>
 8007aa4:	e075      	b.n	8007b92 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007aa6:	4b44      	ldr	r3, [pc, #272]	; (8007bb8 <USBD_SetConfig+0x150>)
 8007aa8:	781b      	ldrb	r3, [r3, #0]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d020      	beq.n	8007af0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007aae:	4b42      	ldr	r3, [pc, #264]	; (8007bb8 <USBD_SetConfig+0x150>)
 8007ab0:	781b      	ldrb	r3, [r3, #0]
 8007ab2:	461a      	mov	r2, r3
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007ab8:	4b3f      	ldr	r3, [pc, #252]	; (8007bb8 <USBD_SetConfig+0x150>)
 8007aba:	781b      	ldrb	r3, [r3, #0]
 8007abc:	4619      	mov	r1, r3
 8007abe:	6878      	ldr	r0, [r7, #4]
 8007ac0:	f7fe ffb7 	bl	8006a32 <USBD_SetClassConfig>
 8007ac4:	4603      	mov	r3, r0
 8007ac6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007ac8:	7bfb      	ldrb	r3, [r7, #15]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d008      	beq.n	8007ae0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007ace:	6839      	ldr	r1, [r7, #0]
 8007ad0:	6878      	ldr	r0, [r7, #4]
 8007ad2:	f000 f962 	bl	8007d9a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2202      	movs	r2, #2
 8007ada:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007ade:	e065      	b.n	8007bac <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007ae0:	6878      	ldr	r0, [r7, #4]
 8007ae2:	f000 fa08 	bl	8007ef6 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2203      	movs	r2, #3
 8007aea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007aee:	e05d      	b.n	8007bac <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007af0:	6878      	ldr	r0, [r7, #4]
 8007af2:	f000 fa00 	bl	8007ef6 <USBD_CtlSendStatus>
      break;
 8007af6:	e059      	b.n	8007bac <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007af8:	4b2f      	ldr	r3, [pc, #188]	; (8007bb8 <USBD_SetConfig+0x150>)
 8007afa:	781b      	ldrb	r3, [r3, #0]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d112      	bne.n	8007b26 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2202      	movs	r2, #2
 8007b04:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007b08:	4b2b      	ldr	r3, [pc, #172]	; (8007bb8 <USBD_SetConfig+0x150>)
 8007b0a:	781b      	ldrb	r3, [r3, #0]
 8007b0c:	461a      	mov	r2, r3
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007b12:	4b29      	ldr	r3, [pc, #164]	; (8007bb8 <USBD_SetConfig+0x150>)
 8007b14:	781b      	ldrb	r3, [r3, #0]
 8007b16:	4619      	mov	r1, r3
 8007b18:	6878      	ldr	r0, [r7, #4]
 8007b1a:	f7fe ffa6 	bl	8006a6a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007b1e:	6878      	ldr	r0, [r7, #4]
 8007b20:	f000 f9e9 	bl	8007ef6 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007b24:	e042      	b.n	8007bac <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007b26:	4b24      	ldr	r3, [pc, #144]	; (8007bb8 <USBD_SetConfig+0x150>)
 8007b28:	781b      	ldrb	r3, [r3, #0]
 8007b2a:	461a      	mov	r2, r3
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	685b      	ldr	r3, [r3, #4]
 8007b30:	429a      	cmp	r2, r3
 8007b32:	d02a      	beq.n	8007b8a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	685b      	ldr	r3, [r3, #4]
 8007b38:	b2db      	uxtb	r3, r3
 8007b3a:	4619      	mov	r1, r3
 8007b3c:	6878      	ldr	r0, [r7, #4]
 8007b3e:	f7fe ff94 	bl	8006a6a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007b42:	4b1d      	ldr	r3, [pc, #116]	; (8007bb8 <USBD_SetConfig+0x150>)
 8007b44:	781b      	ldrb	r3, [r3, #0]
 8007b46:	461a      	mov	r2, r3
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007b4c:	4b1a      	ldr	r3, [pc, #104]	; (8007bb8 <USBD_SetConfig+0x150>)
 8007b4e:	781b      	ldrb	r3, [r3, #0]
 8007b50:	4619      	mov	r1, r3
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	f7fe ff6d 	bl	8006a32 <USBD_SetClassConfig>
 8007b58:	4603      	mov	r3, r0
 8007b5a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007b5c:	7bfb      	ldrb	r3, [r7, #15]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d00f      	beq.n	8007b82 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007b62:	6839      	ldr	r1, [r7, #0]
 8007b64:	6878      	ldr	r0, [r7, #4]
 8007b66:	f000 f918 	bl	8007d9a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	685b      	ldr	r3, [r3, #4]
 8007b6e:	b2db      	uxtb	r3, r3
 8007b70:	4619      	mov	r1, r3
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	f7fe ff79 	bl	8006a6a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2202      	movs	r2, #2
 8007b7c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007b80:	e014      	b.n	8007bac <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	f000 f9b7 	bl	8007ef6 <USBD_CtlSendStatus>
      break;
 8007b88:	e010      	b.n	8007bac <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007b8a:	6878      	ldr	r0, [r7, #4]
 8007b8c:	f000 f9b3 	bl	8007ef6 <USBD_CtlSendStatus>
      break;
 8007b90:	e00c      	b.n	8007bac <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007b92:	6839      	ldr	r1, [r7, #0]
 8007b94:	6878      	ldr	r0, [r7, #4]
 8007b96:	f000 f900 	bl	8007d9a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007b9a:	4b07      	ldr	r3, [pc, #28]	; (8007bb8 <USBD_SetConfig+0x150>)
 8007b9c:	781b      	ldrb	r3, [r3, #0]
 8007b9e:	4619      	mov	r1, r3
 8007ba0:	6878      	ldr	r0, [r7, #4]
 8007ba2:	f7fe ff62 	bl	8006a6a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007ba6:	2303      	movs	r3, #3
 8007ba8:	73fb      	strb	r3, [r7, #15]
      break;
 8007baa:	bf00      	nop
  }

  return ret;
 8007bac:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bae:	4618      	mov	r0, r3
 8007bb0:	3710      	adds	r7, #16
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	bd80      	pop	{r7, pc}
 8007bb6:	bf00      	nop
 8007bb8:	2000022c 	.word	0x2000022c

08007bbc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b082      	sub	sp, #8
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
 8007bc4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	88db      	ldrh	r3, [r3, #6]
 8007bca:	2b01      	cmp	r3, #1
 8007bcc:	d004      	beq.n	8007bd8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007bce:	6839      	ldr	r1, [r7, #0]
 8007bd0:	6878      	ldr	r0, [r7, #4]
 8007bd2:	f000 f8e2 	bl	8007d9a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007bd6:	e023      	b.n	8007c20 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bde:	b2db      	uxtb	r3, r3
 8007be0:	2b02      	cmp	r3, #2
 8007be2:	dc02      	bgt.n	8007bea <USBD_GetConfig+0x2e>
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	dc03      	bgt.n	8007bf0 <USBD_GetConfig+0x34>
 8007be8:	e015      	b.n	8007c16 <USBD_GetConfig+0x5a>
 8007bea:	2b03      	cmp	r3, #3
 8007bec:	d00b      	beq.n	8007c06 <USBD_GetConfig+0x4a>
 8007bee:	e012      	b.n	8007c16 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	3308      	adds	r3, #8
 8007bfa:	2201      	movs	r2, #1
 8007bfc:	4619      	mov	r1, r3
 8007bfe:	6878      	ldr	r0, [r7, #4]
 8007c00:	f000 f93c 	bl	8007e7c <USBD_CtlSendData>
        break;
 8007c04:	e00c      	b.n	8007c20 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	3304      	adds	r3, #4
 8007c0a:	2201      	movs	r2, #1
 8007c0c:	4619      	mov	r1, r3
 8007c0e:	6878      	ldr	r0, [r7, #4]
 8007c10:	f000 f934 	bl	8007e7c <USBD_CtlSendData>
        break;
 8007c14:	e004      	b.n	8007c20 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007c16:	6839      	ldr	r1, [r7, #0]
 8007c18:	6878      	ldr	r0, [r7, #4]
 8007c1a:	f000 f8be 	bl	8007d9a <USBD_CtlError>
        break;
 8007c1e:	bf00      	nop
}
 8007c20:	bf00      	nop
 8007c22:	3708      	adds	r7, #8
 8007c24:	46bd      	mov	sp, r7
 8007c26:	bd80      	pop	{r7, pc}

08007c28 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b082      	sub	sp, #8
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
 8007c30:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c38:	b2db      	uxtb	r3, r3
 8007c3a:	3b01      	subs	r3, #1
 8007c3c:	2b02      	cmp	r3, #2
 8007c3e:	d81e      	bhi.n	8007c7e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	88db      	ldrh	r3, [r3, #6]
 8007c44:	2b02      	cmp	r3, #2
 8007c46:	d004      	beq.n	8007c52 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007c48:	6839      	ldr	r1, [r7, #0]
 8007c4a:	6878      	ldr	r0, [r7, #4]
 8007c4c:	f000 f8a5 	bl	8007d9a <USBD_CtlError>
        break;
 8007c50:	e01a      	b.n	8007c88 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2201      	movs	r2, #1
 8007c56:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d005      	beq.n	8007c6e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	68db      	ldr	r3, [r3, #12]
 8007c66:	f043 0202 	orr.w	r2, r3, #2
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	330c      	adds	r3, #12
 8007c72:	2202      	movs	r2, #2
 8007c74:	4619      	mov	r1, r3
 8007c76:	6878      	ldr	r0, [r7, #4]
 8007c78:	f000 f900 	bl	8007e7c <USBD_CtlSendData>
      break;
 8007c7c:	e004      	b.n	8007c88 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007c7e:	6839      	ldr	r1, [r7, #0]
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	f000 f88a 	bl	8007d9a <USBD_CtlError>
      break;
 8007c86:	bf00      	nop
  }
}
 8007c88:	bf00      	nop
 8007c8a:	3708      	adds	r7, #8
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bd80      	pop	{r7, pc}

08007c90 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b082      	sub	sp, #8
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
 8007c98:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	885b      	ldrh	r3, [r3, #2]
 8007c9e:	2b01      	cmp	r3, #1
 8007ca0:	d107      	bne.n	8007cb2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	2201      	movs	r2, #1
 8007ca6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	f000 f923 	bl	8007ef6 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007cb0:	e013      	b.n	8007cda <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	885b      	ldrh	r3, [r3, #2]
 8007cb6:	2b02      	cmp	r3, #2
 8007cb8:	d10b      	bne.n	8007cd2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	889b      	ldrh	r3, [r3, #4]
 8007cbe:	0a1b      	lsrs	r3, r3, #8
 8007cc0:	b29b      	uxth	r3, r3
 8007cc2:	b2da      	uxtb	r2, r3
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	f000 f913 	bl	8007ef6 <USBD_CtlSendStatus>
}
 8007cd0:	e003      	b.n	8007cda <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007cd2:	6839      	ldr	r1, [r7, #0]
 8007cd4:	6878      	ldr	r0, [r7, #4]
 8007cd6:	f000 f860 	bl	8007d9a <USBD_CtlError>
}
 8007cda:	bf00      	nop
 8007cdc:	3708      	adds	r7, #8
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	bd80      	pop	{r7, pc}

08007ce2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ce2:	b580      	push	{r7, lr}
 8007ce4:	b082      	sub	sp, #8
 8007ce6:	af00      	add	r7, sp, #0
 8007ce8:	6078      	str	r0, [r7, #4]
 8007cea:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cf2:	b2db      	uxtb	r3, r3
 8007cf4:	3b01      	subs	r3, #1
 8007cf6:	2b02      	cmp	r3, #2
 8007cf8:	d80b      	bhi.n	8007d12 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	885b      	ldrh	r3, [r3, #2]
 8007cfe:	2b01      	cmp	r3, #1
 8007d00:	d10c      	bne.n	8007d1c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2200      	movs	r2, #0
 8007d06:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007d0a:	6878      	ldr	r0, [r7, #4]
 8007d0c:	f000 f8f3 	bl	8007ef6 <USBD_CtlSendStatus>
      }
      break;
 8007d10:	e004      	b.n	8007d1c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007d12:	6839      	ldr	r1, [r7, #0]
 8007d14:	6878      	ldr	r0, [r7, #4]
 8007d16:	f000 f840 	bl	8007d9a <USBD_CtlError>
      break;
 8007d1a:	e000      	b.n	8007d1e <USBD_ClrFeature+0x3c>
      break;
 8007d1c:	bf00      	nop
  }
}
 8007d1e:	bf00      	nop
 8007d20:	3708      	adds	r7, #8
 8007d22:	46bd      	mov	sp, r7
 8007d24:	bd80      	pop	{r7, pc}

08007d26 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007d26:	b580      	push	{r7, lr}
 8007d28:	b084      	sub	sp, #16
 8007d2a:	af00      	add	r7, sp, #0
 8007d2c:	6078      	str	r0, [r7, #4]
 8007d2e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	781a      	ldrb	r2, [r3, #0]
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	3301      	adds	r3, #1
 8007d40:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	781a      	ldrb	r2, [r3, #0]
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	3301      	adds	r3, #1
 8007d4e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007d50:	68f8      	ldr	r0, [r7, #12]
 8007d52:	f7ff fa17 	bl	8007184 <SWAPBYTE>
 8007d56:	4603      	mov	r3, r0
 8007d58:	461a      	mov	r2, r3
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	3301      	adds	r3, #1
 8007d62:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	3301      	adds	r3, #1
 8007d68:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007d6a:	68f8      	ldr	r0, [r7, #12]
 8007d6c:	f7ff fa0a 	bl	8007184 <SWAPBYTE>
 8007d70:	4603      	mov	r3, r0
 8007d72:	461a      	mov	r2, r3
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	3301      	adds	r3, #1
 8007d7c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	3301      	adds	r3, #1
 8007d82:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007d84:	68f8      	ldr	r0, [r7, #12]
 8007d86:	f7ff f9fd 	bl	8007184 <SWAPBYTE>
 8007d8a:	4603      	mov	r3, r0
 8007d8c:	461a      	mov	r2, r3
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	80da      	strh	r2, [r3, #6]
}
 8007d92:	bf00      	nop
 8007d94:	3710      	adds	r7, #16
 8007d96:	46bd      	mov	sp, r7
 8007d98:	bd80      	pop	{r7, pc}

08007d9a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d9a:	b580      	push	{r7, lr}
 8007d9c:	b082      	sub	sp, #8
 8007d9e:	af00      	add	r7, sp, #0
 8007da0:	6078      	str	r0, [r7, #4]
 8007da2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007da4:	2180      	movs	r1, #128	; 0x80
 8007da6:	6878      	ldr	r0, [r7, #4]
 8007da8:	f003 fa30 	bl	800b20c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007dac:	2100      	movs	r1, #0
 8007dae:	6878      	ldr	r0, [r7, #4]
 8007db0:	f003 fa2c 	bl	800b20c <USBD_LL_StallEP>
}
 8007db4:	bf00      	nop
 8007db6:	3708      	adds	r7, #8
 8007db8:	46bd      	mov	sp, r7
 8007dba:	bd80      	pop	{r7, pc}

08007dbc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b086      	sub	sp, #24
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	60f8      	str	r0, [r7, #12]
 8007dc4:	60b9      	str	r1, [r7, #8]
 8007dc6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007dc8:	2300      	movs	r3, #0
 8007dca:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d036      	beq.n	8007e40 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007dd6:	6938      	ldr	r0, [r7, #16]
 8007dd8:	f000 f836 	bl	8007e48 <USBD_GetLen>
 8007ddc:	4603      	mov	r3, r0
 8007dde:	3301      	adds	r3, #1
 8007de0:	b29b      	uxth	r3, r3
 8007de2:	005b      	lsls	r3, r3, #1
 8007de4:	b29a      	uxth	r2, r3
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007dea:	7dfb      	ldrb	r3, [r7, #23]
 8007dec:	68ba      	ldr	r2, [r7, #8]
 8007dee:	4413      	add	r3, r2
 8007df0:	687a      	ldr	r2, [r7, #4]
 8007df2:	7812      	ldrb	r2, [r2, #0]
 8007df4:	701a      	strb	r2, [r3, #0]
  idx++;
 8007df6:	7dfb      	ldrb	r3, [r7, #23]
 8007df8:	3301      	adds	r3, #1
 8007dfa:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007dfc:	7dfb      	ldrb	r3, [r7, #23]
 8007dfe:	68ba      	ldr	r2, [r7, #8]
 8007e00:	4413      	add	r3, r2
 8007e02:	2203      	movs	r2, #3
 8007e04:	701a      	strb	r2, [r3, #0]
  idx++;
 8007e06:	7dfb      	ldrb	r3, [r7, #23]
 8007e08:	3301      	adds	r3, #1
 8007e0a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007e0c:	e013      	b.n	8007e36 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007e0e:	7dfb      	ldrb	r3, [r7, #23]
 8007e10:	68ba      	ldr	r2, [r7, #8]
 8007e12:	4413      	add	r3, r2
 8007e14:	693a      	ldr	r2, [r7, #16]
 8007e16:	7812      	ldrb	r2, [r2, #0]
 8007e18:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007e1a:	693b      	ldr	r3, [r7, #16]
 8007e1c:	3301      	adds	r3, #1
 8007e1e:	613b      	str	r3, [r7, #16]
    idx++;
 8007e20:	7dfb      	ldrb	r3, [r7, #23]
 8007e22:	3301      	adds	r3, #1
 8007e24:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007e26:	7dfb      	ldrb	r3, [r7, #23]
 8007e28:	68ba      	ldr	r2, [r7, #8]
 8007e2a:	4413      	add	r3, r2
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	701a      	strb	r2, [r3, #0]
    idx++;
 8007e30:	7dfb      	ldrb	r3, [r7, #23]
 8007e32:	3301      	adds	r3, #1
 8007e34:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007e36:	693b      	ldr	r3, [r7, #16]
 8007e38:	781b      	ldrb	r3, [r3, #0]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d1e7      	bne.n	8007e0e <USBD_GetString+0x52>
 8007e3e:	e000      	b.n	8007e42 <USBD_GetString+0x86>
    return;
 8007e40:	bf00      	nop
  }
}
 8007e42:	3718      	adds	r7, #24
 8007e44:	46bd      	mov	sp, r7
 8007e46:	bd80      	pop	{r7, pc}

08007e48 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007e48:	b480      	push	{r7}
 8007e4a:	b085      	sub	sp, #20
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007e50:	2300      	movs	r3, #0
 8007e52:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007e58:	e005      	b.n	8007e66 <USBD_GetLen+0x1e>
  {
    len++;
 8007e5a:	7bfb      	ldrb	r3, [r7, #15]
 8007e5c:	3301      	adds	r3, #1
 8007e5e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007e60:	68bb      	ldr	r3, [r7, #8]
 8007e62:	3301      	adds	r3, #1
 8007e64:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007e66:	68bb      	ldr	r3, [r7, #8]
 8007e68:	781b      	ldrb	r3, [r3, #0]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d1f5      	bne.n	8007e5a <USBD_GetLen+0x12>
  }

  return len;
 8007e6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e70:	4618      	mov	r0, r3
 8007e72:	3714      	adds	r7, #20
 8007e74:	46bd      	mov	sp, r7
 8007e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7a:	4770      	bx	lr

08007e7c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b084      	sub	sp, #16
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	60f8      	str	r0, [r7, #12]
 8007e84:	60b9      	str	r1, [r7, #8]
 8007e86:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	2202      	movs	r2, #2
 8007e8c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	687a      	ldr	r2, [r7, #4]
 8007e94:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	687a      	ldr	r2, [r7, #4]
 8007e9a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	68ba      	ldr	r2, [r7, #8]
 8007ea0:	2100      	movs	r1, #0
 8007ea2:	68f8      	ldr	r0, [r7, #12]
 8007ea4:	f003 fa80 	bl	800b3a8 <USBD_LL_Transmit>

  return USBD_OK;
 8007ea8:	2300      	movs	r3, #0
}
 8007eaa:	4618      	mov	r0, r3
 8007eac:	3710      	adds	r7, #16
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	bd80      	pop	{r7, pc}

08007eb2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007eb2:	b580      	push	{r7, lr}
 8007eb4:	b084      	sub	sp, #16
 8007eb6:	af00      	add	r7, sp, #0
 8007eb8:	60f8      	str	r0, [r7, #12]
 8007eba:	60b9      	str	r1, [r7, #8]
 8007ebc:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	68ba      	ldr	r2, [r7, #8]
 8007ec2:	2100      	movs	r1, #0
 8007ec4:	68f8      	ldr	r0, [r7, #12]
 8007ec6:	f003 fa6f 	bl	800b3a8 <USBD_LL_Transmit>

  return USBD_OK;
 8007eca:	2300      	movs	r3, #0
}
 8007ecc:	4618      	mov	r0, r3
 8007ece:	3710      	adds	r7, #16
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	bd80      	pop	{r7, pc}

08007ed4 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b084      	sub	sp, #16
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	60f8      	str	r0, [r7, #12]
 8007edc:	60b9      	str	r1, [r7, #8]
 8007ede:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	68ba      	ldr	r2, [r7, #8]
 8007ee4:	2100      	movs	r1, #0
 8007ee6:	68f8      	ldr	r0, [r7, #12]
 8007ee8:	f003 fa96 	bl	800b418 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007eec:	2300      	movs	r3, #0
}
 8007eee:	4618      	mov	r0, r3
 8007ef0:	3710      	adds	r7, #16
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	bd80      	pop	{r7, pc}

08007ef6 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007ef6:	b580      	push	{r7, lr}
 8007ef8:	b082      	sub	sp, #8
 8007efa:	af00      	add	r7, sp, #0
 8007efc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	2204      	movs	r2, #4
 8007f02:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007f06:	2300      	movs	r3, #0
 8007f08:	2200      	movs	r2, #0
 8007f0a:	2100      	movs	r1, #0
 8007f0c:	6878      	ldr	r0, [r7, #4]
 8007f0e:	f003 fa4b 	bl	800b3a8 <USBD_LL_Transmit>

  return USBD_OK;
 8007f12:	2300      	movs	r3, #0
}
 8007f14:	4618      	mov	r0, r3
 8007f16:	3708      	adds	r7, #8
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	bd80      	pop	{r7, pc}

08007f1c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b082      	sub	sp, #8
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2205      	movs	r2, #5
 8007f28:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	2200      	movs	r2, #0
 8007f30:	2100      	movs	r1, #0
 8007f32:	6878      	ldr	r0, [r7, #4]
 8007f34:	f003 fa70 	bl	800b418 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007f38:	2300      	movs	r3, #0
}
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	3708      	adds	r7, #8
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	bd80      	pop	{r7, pc}
	...

08007f44 <__NVIC_SetPriority>:
{
 8007f44:	b480      	push	{r7}
 8007f46:	b083      	sub	sp, #12
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	4603      	mov	r3, r0
 8007f4c:	6039      	str	r1, [r7, #0]
 8007f4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007f50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	db0a      	blt.n	8007f6e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	b2da      	uxtb	r2, r3
 8007f5c:	490c      	ldr	r1, [pc, #48]	; (8007f90 <__NVIC_SetPriority+0x4c>)
 8007f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007f62:	0112      	lsls	r2, r2, #4
 8007f64:	b2d2      	uxtb	r2, r2
 8007f66:	440b      	add	r3, r1
 8007f68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007f6c:	e00a      	b.n	8007f84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	b2da      	uxtb	r2, r3
 8007f72:	4908      	ldr	r1, [pc, #32]	; (8007f94 <__NVIC_SetPriority+0x50>)
 8007f74:	79fb      	ldrb	r3, [r7, #7]
 8007f76:	f003 030f 	and.w	r3, r3, #15
 8007f7a:	3b04      	subs	r3, #4
 8007f7c:	0112      	lsls	r2, r2, #4
 8007f7e:	b2d2      	uxtb	r2, r2
 8007f80:	440b      	add	r3, r1
 8007f82:	761a      	strb	r2, [r3, #24]
}
 8007f84:	bf00      	nop
 8007f86:	370c      	adds	r7, #12
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8e:	4770      	bx	lr
 8007f90:	e000e100 	.word	0xe000e100
 8007f94:	e000ed00 	.word	0xe000ed00

08007f98 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007f9c:	2100      	movs	r1, #0
 8007f9e:	f06f 0004 	mvn.w	r0, #4
 8007fa2:	f7ff ffcf 	bl	8007f44 <__NVIC_SetPriority>
#endif
}
 8007fa6:	bf00      	nop
 8007fa8:	bd80      	pop	{r7, pc}
	...

08007fac <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007fac:	b480      	push	{r7}
 8007fae:	b083      	sub	sp, #12
 8007fb0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007fb2:	f3ef 8305 	mrs	r3, IPSR
 8007fb6:	603b      	str	r3, [r7, #0]
  return(result);
 8007fb8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d003      	beq.n	8007fc6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007fbe:	f06f 0305 	mvn.w	r3, #5
 8007fc2:	607b      	str	r3, [r7, #4]
 8007fc4:	e00c      	b.n	8007fe0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007fc6:	4b0a      	ldr	r3, [pc, #40]	; (8007ff0 <osKernelInitialize+0x44>)
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d105      	bne.n	8007fda <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007fce:	4b08      	ldr	r3, [pc, #32]	; (8007ff0 <osKernelInitialize+0x44>)
 8007fd0:	2201      	movs	r2, #1
 8007fd2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	607b      	str	r3, [r7, #4]
 8007fd8:	e002      	b.n	8007fe0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007fda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007fde:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007fe0:	687b      	ldr	r3, [r7, #4]
}
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	370c      	adds	r7, #12
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fec:	4770      	bx	lr
 8007fee:	bf00      	nop
 8007ff0:	20000230 	.word	0x20000230

08007ff4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b082      	sub	sp, #8
 8007ff8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007ffa:	f3ef 8305 	mrs	r3, IPSR
 8007ffe:	603b      	str	r3, [r7, #0]
  return(result);
 8008000:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008002:	2b00      	cmp	r3, #0
 8008004:	d003      	beq.n	800800e <osKernelStart+0x1a>
    stat = osErrorISR;
 8008006:	f06f 0305 	mvn.w	r3, #5
 800800a:	607b      	str	r3, [r7, #4]
 800800c:	e010      	b.n	8008030 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800800e:	4b0b      	ldr	r3, [pc, #44]	; (800803c <osKernelStart+0x48>)
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	2b01      	cmp	r3, #1
 8008014:	d109      	bne.n	800802a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008016:	f7ff ffbf 	bl	8007f98 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800801a:	4b08      	ldr	r3, [pc, #32]	; (800803c <osKernelStart+0x48>)
 800801c:	2202      	movs	r2, #2
 800801e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008020:	f001 f866 	bl	80090f0 <vTaskStartScheduler>
      stat = osOK;
 8008024:	2300      	movs	r3, #0
 8008026:	607b      	str	r3, [r7, #4]
 8008028:	e002      	b.n	8008030 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800802a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800802e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008030:	687b      	ldr	r3, [r7, #4]
}
 8008032:	4618      	mov	r0, r3
 8008034:	3708      	adds	r7, #8
 8008036:	46bd      	mov	sp, r7
 8008038:	bd80      	pop	{r7, pc}
 800803a:	bf00      	nop
 800803c:	20000230 	.word	0x20000230

08008040 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008040:	b580      	push	{r7, lr}
 8008042:	b08e      	sub	sp, #56	; 0x38
 8008044:	af04      	add	r7, sp, #16
 8008046:	60f8      	str	r0, [r7, #12]
 8008048:	60b9      	str	r1, [r7, #8]
 800804a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800804c:	2300      	movs	r3, #0
 800804e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008050:	f3ef 8305 	mrs	r3, IPSR
 8008054:	617b      	str	r3, [r7, #20]
  return(result);
 8008056:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008058:	2b00      	cmp	r3, #0
 800805a:	d17e      	bne.n	800815a <osThreadNew+0x11a>
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d07b      	beq.n	800815a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8008062:	2380      	movs	r3, #128	; 0x80
 8008064:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008066:	2318      	movs	r3, #24
 8008068:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800806a:	2300      	movs	r3, #0
 800806c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800806e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008072:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d045      	beq.n	8008106 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d002      	beq.n	8008088 <osThreadNew+0x48>
        name = attr->name;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	699b      	ldr	r3, [r3, #24]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d002      	beq.n	8008096 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	699b      	ldr	r3, [r3, #24]
 8008094:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008096:	69fb      	ldr	r3, [r7, #28]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d008      	beq.n	80080ae <osThreadNew+0x6e>
 800809c:	69fb      	ldr	r3, [r7, #28]
 800809e:	2b38      	cmp	r3, #56	; 0x38
 80080a0:	d805      	bhi.n	80080ae <osThreadNew+0x6e>
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	685b      	ldr	r3, [r3, #4]
 80080a6:	f003 0301 	and.w	r3, r3, #1
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d001      	beq.n	80080b2 <osThreadNew+0x72>
        return (NULL);
 80080ae:	2300      	movs	r3, #0
 80080b0:	e054      	b.n	800815c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	695b      	ldr	r3, [r3, #20]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d003      	beq.n	80080c2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	695b      	ldr	r3, [r3, #20]
 80080be:	089b      	lsrs	r3, r3, #2
 80080c0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	689b      	ldr	r3, [r3, #8]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d00e      	beq.n	80080e8 <osThreadNew+0xa8>
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	68db      	ldr	r3, [r3, #12]
 80080ce:	2b5b      	cmp	r3, #91	; 0x5b
 80080d0:	d90a      	bls.n	80080e8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d006      	beq.n	80080e8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	695b      	ldr	r3, [r3, #20]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d002      	beq.n	80080e8 <osThreadNew+0xa8>
        mem = 1;
 80080e2:	2301      	movs	r3, #1
 80080e4:	61bb      	str	r3, [r7, #24]
 80080e6:	e010      	b.n	800810a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	689b      	ldr	r3, [r3, #8]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d10c      	bne.n	800810a <osThreadNew+0xca>
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	68db      	ldr	r3, [r3, #12]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d108      	bne.n	800810a <osThreadNew+0xca>
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	691b      	ldr	r3, [r3, #16]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d104      	bne.n	800810a <osThreadNew+0xca>
          mem = 0;
 8008100:	2300      	movs	r3, #0
 8008102:	61bb      	str	r3, [r7, #24]
 8008104:	e001      	b.n	800810a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8008106:	2300      	movs	r3, #0
 8008108:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800810a:	69bb      	ldr	r3, [r7, #24]
 800810c:	2b01      	cmp	r3, #1
 800810e:	d110      	bne.n	8008132 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008114:	687a      	ldr	r2, [r7, #4]
 8008116:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008118:	9202      	str	r2, [sp, #8]
 800811a:	9301      	str	r3, [sp, #4]
 800811c:	69fb      	ldr	r3, [r7, #28]
 800811e:	9300      	str	r3, [sp, #0]
 8008120:	68bb      	ldr	r3, [r7, #8]
 8008122:	6a3a      	ldr	r2, [r7, #32]
 8008124:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008126:	68f8      	ldr	r0, [r7, #12]
 8008128:	f000 fe0c 	bl	8008d44 <xTaskCreateStatic>
 800812c:	4603      	mov	r3, r0
 800812e:	613b      	str	r3, [r7, #16]
 8008130:	e013      	b.n	800815a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8008132:	69bb      	ldr	r3, [r7, #24]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d110      	bne.n	800815a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008138:	6a3b      	ldr	r3, [r7, #32]
 800813a:	b29a      	uxth	r2, r3
 800813c:	f107 0310 	add.w	r3, r7, #16
 8008140:	9301      	str	r3, [sp, #4]
 8008142:	69fb      	ldr	r3, [r7, #28]
 8008144:	9300      	str	r3, [sp, #0]
 8008146:	68bb      	ldr	r3, [r7, #8]
 8008148:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800814a:	68f8      	ldr	r0, [r7, #12]
 800814c:	f000 fe57 	bl	8008dfe <xTaskCreate>
 8008150:	4603      	mov	r3, r0
 8008152:	2b01      	cmp	r3, #1
 8008154:	d001      	beq.n	800815a <osThreadNew+0x11a>
            hTask = NULL;
 8008156:	2300      	movs	r3, #0
 8008158:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800815a:	693b      	ldr	r3, [r7, #16]
}
 800815c:	4618      	mov	r0, r3
 800815e:	3728      	adds	r7, #40	; 0x28
 8008160:	46bd      	mov	sp, r7
 8008162:	bd80      	pop	{r7, pc}

08008164 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008164:	b580      	push	{r7, lr}
 8008166:	b084      	sub	sp, #16
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800816c:	f3ef 8305 	mrs	r3, IPSR
 8008170:	60bb      	str	r3, [r7, #8]
  return(result);
 8008172:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008174:	2b00      	cmp	r3, #0
 8008176:	d003      	beq.n	8008180 <osDelay+0x1c>
    stat = osErrorISR;
 8008178:	f06f 0305 	mvn.w	r3, #5
 800817c:	60fb      	str	r3, [r7, #12]
 800817e:	e007      	b.n	8008190 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008180:	2300      	movs	r3, #0
 8008182:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d002      	beq.n	8008190 <osDelay+0x2c>
      vTaskDelay(ticks);
 800818a:	6878      	ldr	r0, [r7, #4]
 800818c:	f000 ff7c 	bl	8009088 <vTaskDelay>
    }
  }

  return (stat);
 8008190:	68fb      	ldr	r3, [r7, #12]
}
 8008192:	4618      	mov	r0, r3
 8008194:	3710      	adds	r7, #16
 8008196:	46bd      	mov	sp, r7
 8008198:	bd80      	pop	{r7, pc}
	...

0800819c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800819c:	b480      	push	{r7}
 800819e:	b085      	sub	sp, #20
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	60f8      	str	r0, [r7, #12]
 80081a4:	60b9      	str	r1, [r7, #8]
 80081a6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	4a07      	ldr	r2, [pc, #28]	; (80081c8 <vApplicationGetIdleTaskMemory+0x2c>)
 80081ac:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80081ae:	68bb      	ldr	r3, [r7, #8]
 80081b0:	4a06      	ldr	r2, [pc, #24]	; (80081cc <vApplicationGetIdleTaskMemory+0x30>)
 80081b2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2280      	movs	r2, #128	; 0x80
 80081b8:	601a      	str	r2, [r3, #0]
}
 80081ba:	bf00      	nop
 80081bc:	3714      	adds	r7, #20
 80081be:	46bd      	mov	sp, r7
 80081c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c4:	4770      	bx	lr
 80081c6:	bf00      	nop
 80081c8:	20000234 	.word	0x20000234
 80081cc:	20000290 	.word	0x20000290

080081d0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80081d0:	b480      	push	{r7}
 80081d2:	b085      	sub	sp, #20
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	60f8      	str	r0, [r7, #12]
 80081d8:	60b9      	str	r1, [r7, #8]
 80081da:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	4a07      	ldr	r2, [pc, #28]	; (80081fc <vApplicationGetTimerTaskMemory+0x2c>)
 80081e0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80081e2:	68bb      	ldr	r3, [r7, #8]
 80081e4:	4a06      	ldr	r2, [pc, #24]	; (8008200 <vApplicationGetTimerTaskMemory+0x30>)
 80081e6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80081ee:	601a      	str	r2, [r3, #0]
}
 80081f0:	bf00      	nop
 80081f2:	3714      	adds	r7, #20
 80081f4:	46bd      	mov	sp, r7
 80081f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fa:	4770      	bx	lr
 80081fc:	20000490 	.word	0x20000490
 8008200:	200004ec 	.word	0x200004ec

08008204 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008204:	b480      	push	{r7}
 8008206:	b083      	sub	sp, #12
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	f103 0208 	add.w	r2, r3, #8
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800821c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	f103 0208 	add.w	r2, r3, #8
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	f103 0208 	add.w	r2, r3, #8
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	2200      	movs	r2, #0
 8008236:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008238:	bf00      	nop
 800823a:	370c      	adds	r7, #12
 800823c:	46bd      	mov	sp, r7
 800823e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008242:	4770      	bx	lr

08008244 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008244:	b480      	push	{r7}
 8008246:	b083      	sub	sp, #12
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2200      	movs	r2, #0
 8008250:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008252:	bf00      	nop
 8008254:	370c      	adds	r7, #12
 8008256:	46bd      	mov	sp, r7
 8008258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825c:	4770      	bx	lr

0800825e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800825e:	b480      	push	{r7}
 8008260:	b085      	sub	sp, #20
 8008262:	af00      	add	r7, sp, #0
 8008264:	6078      	str	r0, [r7, #4]
 8008266:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	685b      	ldr	r3, [r3, #4]
 800826c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	68fa      	ldr	r2, [r7, #12]
 8008272:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	689a      	ldr	r2, [r3, #8]
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	689b      	ldr	r3, [r3, #8]
 8008280:	683a      	ldr	r2, [r7, #0]
 8008282:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	683a      	ldr	r2, [r7, #0]
 8008288:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	687a      	ldr	r2, [r7, #4]
 800828e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	1c5a      	adds	r2, r3, #1
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	601a      	str	r2, [r3, #0]
}
 800829a:	bf00      	nop
 800829c:	3714      	adds	r7, #20
 800829e:	46bd      	mov	sp, r7
 80082a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a4:	4770      	bx	lr

080082a6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80082a6:	b480      	push	{r7}
 80082a8:	b085      	sub	sp, #20
 80082aa:	af00      	add	r7, sp, #0
 80082ac:	6078      	str	r0, [r7, #4]
 80082ae:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80082b6:	68bb      	ldr	r3, [r7, #8]
 80082b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80082bc:	d103      	bne.n	80082c6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	691b      	ldr	r3, [r3, #16]
 80082c2:	60fb      	str	r3, [r7, #12]
 80082c4:	e00c      	b.n	80082e0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	3308      	adds	r3, #8
 80082ca:	60fb      	str	r3, [r7, #12]
 80082cc:	e002      	b.n	80082d4 <vListInsert+0x2e>
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	685b      	ldr	r3, [r3, #4]
 80082d2:	60fb      	str	r3, [r7, #12]
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	685b      	ldr	r3, [r3, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	68ba      	ldr	r2, [r7, #8]
 80082dc:	429a      	cmp	r2, r3
 80082de:	d2f6      	bcs.n	80082ce <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	685a      	ldr	r2, [r3, #4]
 80082e4:	683b      	ldr	r3, [r7, #0]
 80082e6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	685b      	ldr	r3, [r3, #4]
 80082ec:	683a      	ldr	r2, [r7, #0]
 80082ee:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80082f0:	683b      	ldr	r3, [r7, #0]
 80082f2:	68fa      	ldr	r2, [r7, #12]
 80082f4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	683a      	ldr	r2, [r7, #0]
 80082fa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80082fc:	683b      	ldr	r3, [r7, #0]
 80082fe:	687a      	ldr	r2, [r7, #4]
 8008300:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	1c5a      	adds	r2, r3, #1
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	601a      	str	r2, [r3, #0]
}
 800830c:	bf00      	nop
 800830e:	3714      	adds	r7, #20
 8008310:	46bd      	mov	sp, r7
 8008312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008316:	4770      	bx	lr

08008318 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008318:	b480      	push	{r7}
 800831a:	b085      	sub	sp, #20
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	691b      	ldr	r3, [r3, #16]
 8008324:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	685b      	ldr	r3, [r3, #4]
 800832a:	687a      	ldr	r2, [r7, #4]
 800832c:	6892      	ldr	r2, [r2, #8]
 800832e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	689b      	ldr	r3, [r3, #8]
 8008334:	687a      	ldr	r2, [r7, #4]
 8008336:	6852      	ldr	r2, [r2, #4]
 8008338:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	685b      	ldr	r3, [r3, #4]
 800833e:	687a      	ldr	r2, [r7, #4]
 8008340:	429a      	cmp	r2, r3
 8008342:	d103      	bne.n	800834c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	689a      	ldr	r2, [r3, #8]
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2200      	movs	r2, #0
 8008350:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	1e5a      	subs	r2, r3, #1
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	681b      	ldr	r3, [r3, #0]
}
 8008360:	4618      	mov	r0, r3
 8008362:	3714      	adds	r7, #20
 8008364:	46bd      	mov	sp, r7
 8008366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836a:	4770      	bx	lr

0800836c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b084      	sub	sp, #16
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
 8008374:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d10a      	bne.n	8008396 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008384:	f383 8811 	msr	BASEPRI, r3
 8008388:	f3bf 8f6f 	isb	sy
 800838c:	f3bf 8f4f 	dsb	sy
 8008390:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008392:	bf00      	nop
 8008394:	e7fe      	b.n	8008394 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008396:	f002 f84d 	bl	800a434 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	681a      	ldr	r2, [r3, #0]
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083a2:	68f9      	ldr	r1, [r7, #12]
 80083a4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80083a6:	fb01 f303 	mul.w	r3, r1, r3
 80083aa:	441a      	add	r2, r3
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	2200      	movs	r2, #0
 80083b4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	681a      	ldr	r2, [r3, #0]
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	681a      	ldr	r2, [r3, #0]
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083c6:	3b01      	subs	r3, #1
 80083c8:	68f9      	ldr	r1, [r7, #12]
 80083ca:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80083cc:	fb01 f303 	mul.w	r3, r1, r3
 80083d0:	441a      	add	r2, r3
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	22ff      	movs	r2, #255	; 0xff
 80083da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	22ff      	movs	r2, #255	; 0xff
 80083e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d114      	bne.n	8008416 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	691b      	ldr	r3, [r3, #16]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d01a      	beq.n	800842a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	3310      	adds	r3, #16
 80083f8:	4618      	mov	r0, r3
 80083fa:	f001 f903 	bl	8009604 <xTaskRemoveFromEventList>
 80083fe:	4603      	mov	r3, r0
 8008400:	2b00      	cmp	r3, #0
 8008402:	d012      	beq.n	800842a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008404:	4b0c      	ldr	r3, [pc, #48]	; (8008438 <xQueueGenericReset+0xcc>)
 8008406:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800840a:	601a      	str	r2, [r3, #0]
 800840c:	f3bf 8f4f 	dsb	sy
 8008410:	f3bf 8f6f 	isb	sy
 8008414:	e009      	b.n	800842a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	3310      	adds	r3, #16
 800841a:	4618      	mov	r0, r3
 800841c:	f7ff fef2 	bl	8008204 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	3324      	adds	r3, #36	; 0x24
 8008424:	4618      	mov	r0, r3
 8008426:	f7ff feed 	bl	8008204 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800842a:	f002 f833 	bl	800a494 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800842e:	2301      	movs	r3, #1
}
 8008430:	4618      	mov	r0, r3
 8008432:	3710      	adds	r7, #16
 8008434:	46bd      	mov	sp, r7
 8008436:	bd80      	pop	{r7, pc}
 8008438:	e000ed04 	.word	0xe000ed04

0800843c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800843c:	b580      	push	{r7, lr}
 800843e:	b08e      	sub	sp, #56	; 0x38
 8008440:	af02      	add	r7, sp, #8
 8008442:	60f8      	str	r0, [r7, #12]
 8008444:	60b9      	str	r1, [r7, #8]
 8008446:	607a      	str	r2, [r7, #4]
 8008448:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	2b00      	cmp	r3, #0
 800844e:	d10a      	bne.n	8008466 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008454:	f383 8811 	msr	BASEPRI, r3
 8008458:	f3bf 8f6f 	isb	sy
 800845c:	f3bf 8f4f 	dsb	sy
 8008460:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008462:	bf00      	nop
 8008464:	e7fe      	b.n	8008464 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d10a      	bne.n	8008482 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800846c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008470:	f383 8811 	msr	BASEPRI, r3
 8008474:	f3bf 8f6f 	isb	sy
 8008478:	f3bf 8f4f 	dsb	sy
 800847c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800847e:	bf00      	nop
 8008480:	e7fe      	b.n	8008480 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d002      	beq.n	800848e <xQueueGenericCreateStatic+0x52>
 8008488:	68bb      	ldr	r3, [r7, #8]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d001      	beq.n	8008492 <xQueueGenericCreateStatic+0x56>
 800848e:	2301      	movs	r3, #1
 8008490:	e000      	b.n	8008494 <xQueueGenericCreateStatic+0x58>
 8008492:	2300      	movs	r3, #0
 8008494:	2b00      	cmp	r3, #0
 8008496:	d10a      	bne.n	80084ae <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800849c:	f383 8811 	msr	BASEPRI, r3
 80084a0:	f3bf 8f6f 	isb	sy
 80084a4:	f3bf 8f4f 	dsb	sy
 80084a8:	623b      	str	r3, [r7, #32]
}
 80084aa:	bf00      	nop
 80084ac:	e7fe      	b.n	80084ac <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d102      	bne.n	80084ba <xQueueGenericCreateStatic+0x7e>
 80084b4:	68bb      	ldr	r3, [r7, #8]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d101      	bne.n	80084be <xQueueGenericCreateStatic+0x82>
 80084ba:	2301      	movs	r3, #1
 80084bc:	e000      	b.n	80084c0 <xQueueGenericCreateStatic+0x84>
 80084be:	2300      	movs	r3, #0
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d10a      	bne.n	80084da <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80084c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084c8:	f383 8811 	msr	BASEPRI, r3
 80084cc:	f3bf 8f6f 	isb	sy
 80084d0:	f3bf 8f4f 	dsb	sy
 80084d4:	61fb      	str	r3, [r7, #28]
}
 80084d6:	bf00      	nop
 80084d8:	e7fe      	b.n	80084d8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80084da:	2350      	movs	r3, #80	; 0x50
 80084dc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80084de:	697b      	ldr	r3, [r7, #20]
 80084e0:	2b50      	cmp	r3, #80	; 0x50
 80084e2:	d00a      	beq.n	80084fa <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80084e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084e8:	f383 8811 	msr	BASEPRI, r3
 80084ec:	f3bf 8f6f 	isb	sy
 80084f0:	f3bf 8f4f 	dsb	sy
 80084f4:	61bb      	str	r3, [r7, #24]
}
 80084f6:	bf00      	nop
 80084f8:	e7fe      	b.n	80084f8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80084fa:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008502:	2b00      	cmp	r3, #0
 8008504:	d00d      	beq.n	8008522 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008508:	2201      	movs	r2, #1
 800850a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800850e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008514:	9300      	str	r3, [sp, #0]
 8008516:	4613      	mov	r3, r2
 8008518:	687a      	ldr	r2, [r7, #4]
 800851a:	68b9      	ldr	r1, [r7, #8]
 800851c:	68f8      	ldr	r0, [r7, #12]
 800851e:	f000 f805 	bl	800852c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008524:	4618      	mov	r0, r3
 8008526:	3730      	adds	r7, #48	; 0x30
 8008528:	46bd      	mov	sp, r7
 800852a:	bd80      	pop	{r7, pc}

0800852c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800852c:	b580      	push	{r7, lr}
 800852e:	b084      	sub	sp, #16
 8008530:	af00      	add	r7, sp, #0
 8008532:	60f8      	str	r0, [r7, #12]
 8008534:	60b9      	str	r1, [r7, #8]
 8008536:	607a      	str	r2, [r7, #4]
 8008538:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800853a:	68bb      	ldr	r3, [r7, #8]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d103      	bne.n	8008548 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008540:	69bb      	ldr	r3, [r7, #24]
 8008542:	69ba      	ldr	r2, [r7, #24]
 8008544:	601a      	str	r2, [r3, #0]
 8008546:	e002      	b.n	800854e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008548:	69bb      	ldr	r3, [r7, #24]
 800854a:	687a      	ldr	r2, [r7, #4]
 800854c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800854e:	69bb      	ldr	r3, [r7, #24]
 8008550:	68fa      	ldr	r2, [r7, #12]
 8008552:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008554:	69bb      	ldr	r3, [r7, #24]
 8008556:	68ba      	ldr	r2, [r7, #8]
 8008558:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800855a:	2101      	movs	r1, #1
 800855c:	69b8      	ldr	r0, [r7, #24]
 800855e:	f7ff ff05 	bl	800836c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008562:	69bb      	ldr	r3, [r7, #24]
 8008564:	78fa      	ldrb	r2, [r7, #3]
 8008566:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800856a:	bf00      	nop
 800856c:	3710      	adds	r7, #16
 800856e:	46bd      	mov	sp, r7
 8008570:	bd80      	pop	{r7, pc}
	...

08008574 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008574:	b580      	push	{r7, lr}
 8008576:	b08e      	sub	sp, #56	; 0x38
 8008578:	af00      	add	r7, sp, #0
 800857a:	60f8      	str	r0, [r7, #12]
 800857c:	60b9      	str	r1, [r7, #8]
 800857e:	607a      	str	r2, [r7, #4]
 8008580:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008582:	2300      	movs	r3, #0
 8008584:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800858a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800858c:	2b00      	cmp	r3, #0
 800858e:	d10a      	bne.n	80085a6 <xQueueGenericSend+0x32>
	__asm volatile
 8008590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008594:	f383 8811 	msr	BASEPRI, r3
 8008598:	f3bf 8f6f 	isb	sy
 800859c:	f3bf 8f4f 	dsb	sy
 80085a0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80085a2:	bf00      	nop
 80085a4:	e7fe      	b.n	80085a4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80085a6:	68bb      	ldr	r3, [r7, #8]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d103      	bne.n	80085b4 <xQueueGenericSend+0x40>
 80085ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d101      	bne.n	80085b8 <xQueueGenericSend+0x44>
 80085b4:	2301      	movs	r3, #1
 80085b6:	e000      	b.n	80085ba <xQueueGenericSend+0x46>
 80085b8:	2300      	movs	r3, #0
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d10a      	bne.n	80085d4 <xQueueGenericSend+0x60>
	__asm volatile
 80085be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085c2:	f383 8811 	msr	BASEPRI, r3
 80085c6:	f3bf 8f6f 	isb	sy
 80085ca:	f3bf 8f4f 	dsb	sy
 80085ce:	627b      	str	r3, [r7, #36]	; 0x24
}
 80085d0:	bf00      	nop
 80085d2:	e7fe      	b.n	80085d2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	2b02      	cmp	r3, #2
 80085d8:	d103      	bne.n	80085e2 <xQueueGenericSend+0x6e>
 80085da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085de:	2b01      	cmp	r3, #1
 80085e0:	d101      	bne.n	80085e6 <xQueueGenericSend+0x72>
 80085e2:	2301      	movs	r3, #1
 80085e4:	e000      	b.n	80085e8 <xQueueGenericSend+0x74>
 80085e6:	2300      	movs	r3, #0
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d10a      	bne.n	8008602 <xQueueGenericSend+0x8e>
	__asm volatile
 80085ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085f0:	f383 8811 	msr	BASEPRI, r3
 80085f4:	f3bf 8f6f 	isb	sy
 80085f8:	f3bf 8f4f 	dsb	sy
 80085fc:	623b      	str	r3, [r7, #32]
}
 80085fe:	bf00      	nop
 8008600:	e7fe      	b.n	8008600 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008602:	f001 f9bd 	bl	8009980 <xTaskGetSchedulerState>
 8008606:	4603      	mov	r3, r0
 8008608:	2b00      	cmp	r3, #0
 800860a:	d102      	bne.n	8008612 <xQueueGenericSend+0x9e>
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d101      	bne.n	8008616 <xQueueGenericSend+0xa2>
 8008612:	2301      	movs	r3, #1
 8008614:	e000      	b.n	8008618 <xQueueGenericSend+0xa4>
 8008616:	2300      	movs	r3, #0
 8008618:	2b00      	cmp	r3, #0
 800861a:	d10a      	bne.n	8008632 <xQueueGenericSend+0xbe>
	__asm volatile
 800861c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008620:	f383 8811 	msr	BASEPRI, r3
 8008624:	f3bf 8f6f 	isb	sy
 8008628:	f3bf 8f4f 	dsb	sy
 800862c:	61fb      	str	r3, [r7, #28]
}
 800862e:	bf00      	nop
 8008630:	e7fe      	b.n	8008630 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008632:	f001 feff 	bl	800a434 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008638:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800863a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800863c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800863e:	429a      	cmp	r2, r3
 8008640:	d302      	bcc.n	8008648 <xQueueGenericSend+0xd4>
 8008642:	683b      	ldr	r3, [r7, #0]
 8008644:	2b02      	cmp	r3, #2
 8008646:	d129      	bne.n	800869c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008648:	683a      	ldr	r2, [r7, #0]
 800864a:	68b9      	ldr	r1, [r7, #8]
 800864c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800864e:	f000 fa0b 	bl	8008a68 <prvCopyDataToQueue>
 8008652:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008658:	2b00      	cmp	r3, #0
 800865a:	d010      	beq.n	800867e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800865c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800865e:	3324      	adds	r3, #36	; 0x24
 8008660:	4618      	mov	r0, r3
 8008662:	f000 ffcf 	bl	8009604 <xTaskRemoveFromEventList>
 8008666:	4603      	mov	r3, r0
 8008668:	2b00      	cmp	r3, #0
 800866a:	d013      	beq.n	8008694 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800866c:	4b3f      	ldr	r3, [pc, #252]	; (800876c <xQueueGenericSend+0x1f8>)
 800866e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008672:	601a      	str	r2, [r3, #0]
 8008674:	f3bf 8f4f 	dsb	sy
 8008678:	f3bf 8f6f 	isb	sy
 800867c:	e00a      	b.n	8008694 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800867e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008680:	2b00      	cmp	r3, #0
 8008682:	d007      	beq.n	8008694 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008684:	4b39      	ldr	r3, [pc, #228]	; (800876c <xQueueGenericSend+0x1f8>)
 8008686:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800868a:	601a      	str	r2, [r3, #0]
 800868c:	f3bf 8f4f 	dsb	sy
 8008690:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008694:	f001 fefe 	bl	800a494 <vPortExitCritical>
				return pdPASS;
 8008698:	2301      	movs	r3, #1
 800869a:	e063      	b.n	8008764 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d103      	bne.n	80086aa <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80086a2:	f001 fef7 	bl	800a494 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80086a6:	2300      	movs	r3, #0
 80086a8:	e05c      	b.n	8008764 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80086aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d106      	bne.n	80086be <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80086b0:	f107 0314 	add.w	r3, r7, #20
 80086b4:	4618      	mov	r0, r3
 80086b6:	f001 f809 	bl	80096cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80086ba:	2301      	movs	r3, #1
 80086bc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80086be:	f001 fee9 	bl	800a494 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80086c2:	f000 fd7b 	bl	80091bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80086c6:	f001 feb5 	bl	800a434 <vPortEnterCritical>
 80086ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80086d0:	b25b      	sxtb	r3, r3
 80086d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80086d6:	d103      	bne.n	80086e0 <xQueueGenericSend+0x16c>
 80086d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086da:	2200      	movs	r2, #0
 80086dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80086e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80086e6:	b25b      	sxtb	r3, r3
 80086e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80086ec:	d103      	bne.n	80086f6 <xQueueGenericSend+0x182>
 80086ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086f0:	2200      	movs	r2, #0
 80086f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80086f6:	f001 fecd 	bl	800a494 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80086fa:	1d3a      	adds	r2, r7, #4
 80086fc:	f107 0314 	add.w	r3, r7, #20
 8008700:	4611      	mov	r1, r2
 8008702:	4618      	mov	r0, r3
 8008704:	f000 fff8 	bl	80096f8 <xTaskCheckForTimeOut>
 8008708:	4603      	mov	r3, r0
 800870a:	2b00      	cmp	r3, #0
 800870c:	d124      	bne.n	8008758 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800870e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008710:	f000 faa2 	bl	8008c58 <prvIsQueueFull>
 8008714:	4603      	mov	r3, r0
 8008716:	2b00      	cmp	r3, #0
 8008718:	d018      	beq.n	800874c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800871a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800871c:	3310      	adds	r3, #16
 800871e:	687a      	ldr	r2, [r7, #4]
 8008720:	4611      	mov	r1, r2
 8008722:	4618      	mov	r0, r3
 8008724:	f000 ff1e 	bl	8009564 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008728:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800872a:	f000 fa2d 	bl	8008b88 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800872e:	f000 fd53 	bl	80091d8 <xTaskResumeAll>
 8008732:	4603      	mov	r3, r0
 8008734:	2b00      	cmp	r3, #0
 8008736:	f47f af7c 	bne.w	8008632 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800873a:	4b0c      	ldr	r3, [pc, #48]	; (800876c <xQueueGenericSend+0x1f8>)
 800873c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008740:	601a      	str	r2, [r3, #0]
 8008742:	f3bf 8f4f 	dsb	sy
 8008746:	f3bf 8f6f 	isb	sy
 800874a:	e772      	b.n	8008632 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800874c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800874e:	f000 fa1b 	bl	8008b88 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008752:	f000 fd41 	bl	80091d8 <xTaskResumeAll>
 8008756:	e76c      	b.n	8008632 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008758:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800875a:	f000 fa15 	bl	8008b88 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800875e:	f000 fd3b 	bl	80091d8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008762:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008764:	4618      	mov	r0, r3
 8008766:	3738      	adds	r7, #56	; 0x38
 8008768:	46bd      	mov	sp, r7
 800876a:	bd80      	pop	{r7, pc}
 800876c:	e000ed04 	.word	0xe000ed04

08008770 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008770:	b580      	push	{r7, lr}
 8008772:	b090      	sub	sp, #64	; 0x40
 8008774:	af00      	add	r7, sp, #0
 8008776:	60f8      	str	r0, [r7, #12]
 8008778:	60b9      	str	r1, [r7, #8]
 800877a:	607a      	str	r2, [r7, #4]
 800877c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8008782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008784:	2b00      	cmp	r3, #0
 8008786:	d10a      	bne.n	800879e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800878c:	f383 8811 	msr	BASEPRI, r3
 8008790:	f3bf 8f6f 	isb	sy
 8008794:	f3bf 8f4f 	dsb	sy
 8008798:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800879a:	bf00      	nop
 800879c:	e7fe      	b.n	800879c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800879e:	68bb      	ldr	r3, [r7, #8]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d103      	bne.n	80087ac <xQueueGenericSendFromISR+0x3c>
 80087a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d101      	bne.n	80087b0 <xQueueGenericSendFromISR+0x40>
 80087ac:	2301      	movs	r3, #1
 80087ae:	e000      	b.n	80087b2 <xQueueGenericSendFromISR+0x42>
 80087b0:	2300      	movs	r3, #0
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d10a      	bne.n	80087cc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80087b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087ba:	f383 8811 	msr	BASEPRI, r3
 80087be:	f3bf 8f6f 	isb	sy
 80087c2:	f3bf 8f4f 	dsb	sy
 80087c6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80087c8:	bf00      	nop
 80087ca:	e7fe      	b.n	80087ca <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80087cc:	683b      	ldr	r3, [r7, #0]
 80087ce:	2b02      	cmp	r3, #2
 80087d0:	d103      	bne.n	80087da <xQueueGenericSendFromISR+0x6a>
 80087d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087d6:	2b01      	cmp	r3, #1
 80087d8:	d101      	bne.n	80087de <xQueueGenericSendFromISR+0x6e>
 80087da:	2301      	movs	r3, #1
 80087dc:	e000      	b.n	80087e0 <xQueueGenericSendFromISR+0x70>
 80087de:	2300      	movs	r3, #0
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d10a      	bne.n	80087fa <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80087e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087e8:	f383 8811 	msr	BASEPRI, r3
 80087ec:	f3bf 8f6f 	isb	sy
 80087f0:	f3bf 8f4f 	dsb	sy
 80087f4:	623b      	str	r3, [r7, #32]
}
 80087f6:	bf00      	nop
 80087f8:	e7fe      	b.n	80087f8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80087fa:	f001 fefd 	bl	800a5f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80087fe:	f3ef 8211 	mrs	r2, BASEPRI
 8008802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008806:	f383 8811 	msr	BASEPRI, r3
 800880a:	f3bf 8f6f 	isb	sy
 800880e:	f3bf 8f4f 	dsb	sy
 8008812:	61fa      	str	r2, [r7, #28]
 8008814:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008816:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008818:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800881a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800881c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800881e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008820:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008822:	429a      	cmp	r2, r3
 8008824:	d302      	bcc.n	800882c <xQueueGenericSendFromISR+0xbc>
 8008826:	683b      	ldr	r3, [r7, #0]
 8008828:	2b02      	cmp	r3, #2
 800882a:	d12f      	bne.n	800888c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800882c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800882e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008832:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800883a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800883c:	683a      	ldr	r2, [r7, #0]
 800883e:	68b9      	ldr	r1, [r7, #8]
 8008840:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008842:	f000 f911 	bl	8008a68 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008846:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800884a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800884e:	d112      	bne.n	8008876 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008854:	2b00      	cmp	r3, #0
 8008856:	d016      	beq.n	8008886 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800885a:	3324      	adds	r3, #36	; 0x24
 800885c:	4618      	mov	r0, r3
 800885e:	f000 fed1 	bl	8009604 <xTaskRemoveFromEventList>
 8008862:	4603      	mov	r3, r0
 8008864:	2b00      	cmp	r3, #0
 8008866:	d00e      	beq.n	8008886 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d00b      	beq.n	8008886 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	2201      	movs	r2, #1
 8008872:	601a      	str	r2, [r3, #0]
 8008874:	e007      	b.n	8008886 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008876:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800887a:	3301      	adds	r3, #1
 800887c:	b2db      	uxtb	r3, r3
 800887e:	b25a      	sxtb	r2, r3
 8008880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008882:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008886:	2301      	movs	r3, #1
 8008888:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800888a:	e001      	b.n	8008890 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800888c:	2300      	movs	r3, #0
 800888e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008890:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008892:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008894:	697b      	ldr	r3, [r7, #20]
 8008896:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800889a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800889c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800889e:	4618      	mov	r0, r3
 80088a0:	3740      	adds	r7, #64	; 0x40
 80088a2:	46bd      	mov	sp, r7
 80088a4:	bd80      	pop	{r7, pc}
	...

080088a8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b08c      	sub	sp, #48	; 0x30
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	60f8      	str	r0, [r7, #12]
 80088b0:	60b9      	str	r1, [r7, #8]
 80088b2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80088b4:	2300      	movs	r3, #0
 80088b6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80088bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d10a      	bne.n	80088d8 <xQueueReceive+0x30>
	__asm volatile
 80088c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088c6:	f383 8811 	msr	BASEPRI, r3
 80088ca:	f3bf 8f6f 	isb	sy
 80088ce:	f3bf 8f4f 	dsb	sy
 80088d2:	623b      	str	r3, [r7, #32]
}
 80088d4:	bf00      	nop
 80088d6:	e7fe      	b.n	80088d6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80088d8:	68bb      	ldr	r3, [r7, #8]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d103      	bne.n	80088e6 <xQueueReceive+0x3e>
 80088de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d101      	bne.n	80088ea <xQueueReceive+0x42>
 80088e6:	2301      	movs	r3, #1
 80088e8:	e000      	b.n	80088ec <xQueueReceive+0x44>
 80088ea:	2300      	movs	r3, #0
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d10a      	bne.n	8008906 <xQueueReceive+0x5e>
	__asm volatile
 80088f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088f4:	f383 8811 	msr	BASEPRI, r3
 80088f8:	f3bf 8f6f 	isb	sy
 80088fc:	f3bf 8f4f 	dsb	sy
 8008900:	61fb      	str	r3, [r7, #28]
}
 8008902:	bf00      	nop
 8008904:	e7fe      	b.n	8008904 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008906:	f001 f83b 	bl	8009980 <xTaskGetSchedulerState>
 800890a:	4603      	mov	r3, r0
 800890c:	2b00      	cmp	r3, #0
 800890e:	d102      	bne.n	8008916 <xQueueReceive+0x6e>
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d101      	bne.n	800891a <xQueueReceive+0x72>
 8008916:	2301      	movs	r3, #1
 8008918:	e000      	b.n	800891c <xQueueReceive+0x74>
 800891a:	2300      	movs	r3, #0
 800891c:	2b00      	cmp	r3, #0
 800891e:	d10a      	bne.n	8008936 <xQueueReceive+0x8e>
	__asm volatile
 8008920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008924:	f383 8811 	msr	BASEPRI, r3
 8008928:	f3bf 8f6f 	isb	sy
 800892c:	f3bf 8f4f 	dsb	sy
 8008930:	61bb      	str	r3, [r7, #24]
}
 8008932:	bf00      	nop
 8008934:	e7fe      	b.n	8008934 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008936:	f001 fd7d 	bl	800a434 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800893a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800893c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800893e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008942:	2b00      	cmp	r3, #0
 8008944:	d01f      	beq.n	8008986 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008946:	68b9      	ldr	r1, [r7, #8]
 8008948:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800894a:	f000 f8f7 	bl	8008b3c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800894e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008950:	1e5a      	subs	r2, r3, #1
 8008952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008954:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008958:	691b      	ldr	r3, [r3, #16]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d00f      	beq.n	800897e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800895e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008960:	3310      	adds	r3, #16
 8008962:	4618      	mov	r0, r3
 8008964:	f000 fe4e 	bl	8009604 <xTaskRemoveFromEventList>
 8008968:	4603      	mov	r3, r0
 800896a:	2b00      	cmp	r3, #0
 800896c:	d007      	beq.n	800897e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800896e:	4b3d      	ldr	r3, [pc, #244]	; (8008a64 <xQueueReceive+0x1bc>)
 8008970:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008974:	601a      	str	r2, [r3, #0]
 8008976:	f3bf 8f4f 	dsb	sy
 800897a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800897e:	f001 fd89 	bl	800a494 <vPortExitCritical>
				return pdPASS;
 8008982:	2301      	movs	r3, #1
 8008984:	e069      	b.n	8008a5a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d103      	bne.n	8008994 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800898c:	f001 fd82 	bl	800a494 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008990:	2300      	movs	r3, #0
 8008992:	e062      	b.n	8008a5a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008996:	2b00      	cmp	r3, #0
 8008998:	d106      	bne.n	80089a8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800899a:	f107 0310 	add.w	r3, r7, #16
 800899e:	4618      	mov	r0, r3
 80089a0:	f000 fe94 	bl	80096cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80089a4:	2301      	movs	r3, #1
 80089a6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80089a8:	f001 fd74 	bl	800a494 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80089ac:	f000 fc06 	bl	80091bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80089b0:	f001 fd40 	bl	800a434 <vPortEnterCritical>
 80089b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089b6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80089ba:	b25b      	sxtb	r3, r3
 80089bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80089c0:	d103      	bne.n	80089ca <xQueueReceive+0x122>
 80089c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089c4:	2200      	movs	r2, #0
 80089c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80089ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80089d0:	b25b      	sxtb	r3, r3
 80089d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80089d6:	d103      	bne.n	80089e0 <xQueueReceive+0x138>
 80089d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089da:	2200      	movs	r2, #0
 80089dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80089e0:	f001 fd58 	bl	800a494 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80089e4:	1d3a      	adds	r2, r7, #4
 80089e6:	f107 0310 	add.w	r3, r7, #16
 80089ea:	4611      	mov	r1, r2
 80089ec:	4618      	mov	r0, r3
 80089ee:	f000 fe83 	bl	80096f8 <xTaskCheckForTimeOut>
 80089f2:	4603      	mov	r3, r0
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d123      	bne.n	8008a40 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80089f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80089fa:	f000 f917 	bl	8008c2c <prvIsQueueEmpty>
 80089fe:	4603      	mov	r3, r0
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d017      	beq.n	8008a34 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a06:	3324      	adds	r3, #36	; 0x24
 8008a08:	687a      	ldr	r2, [r7, #4]
 8008a0a:	4611      	mov	r1, r2
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	f000 fda9 	bl	8009564 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008a12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a14:	f000 f8b8 	bl	8008b88 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008a18:	f000 fbde 	bl	80091d8 <xTaskResumeAll>
 8008a1c:	4603      	mov	r3, r0
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d189      	bne.n	8008936 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8008a22:	4b10      	ldr	r3, [pc, #64]	; (8008a64 <xQueueReceive+0x1bc>)
 8008a24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a28:	601a      	str	r2, [r3, #0]
 8008a2a:	f3bf 8f4f 	dsb	sy
 8008a2e:	f3bf 8f6f 	isb	sy
 8008a32:	e780      	b.n	8008936 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008a34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a36:	f000 f8a7 	bl	8008b88 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008a3a:	f000 fbcd 	bl	80091d8 <xTaskResumeAll>
 8008a3e:	e77a      	b.n	8008936 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008a40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a42:	f000 f8a1 	bl	8008b88 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008a46:	f000 fbc7 	bl	80091d8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008a4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a4c:	f000 f8ee 	bl	8008c2c <prvIsQueueEmpty>
 8008a50:	4603      	mov	r3, r0
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	f43f af6f 	beq.w	8008936 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008a58:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	3730      	adds	r7, #48	; 0x30
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	bd80      	pop	{r7, pc}
 8008a62:	bf00      	nop
 8008a64:	e000ed04 	.word	0xe000ed04

08008a68 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b086      	sub	sp, #24
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	60f8      	str	r0, [r7, #12]
 8008a70:	60b9      	str	r1, [r7, #8]
 8008a72:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008a74:	2300      	movs	r3, #0
 8008a76:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a7c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d10d      	bne.n	8008aa2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d14d      	bne.n	8008b2a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	689b      	ldr	r3, [r3, #8]
 8008a92:	4618      	mov	r0, r3
 8008a94:	f000 ff92 	bl	80099bc <xTaskPriorityDisinherit>
 8008a98:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	609a      	str	r2, [r3, #8]
 8008aa0:	e043      	b.n	8008b2a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d119      	bne.n	8008adc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	6858      	ldr	r0, [r3, #4]
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ab0:	461a      	mov	r2, r3
 8008ab2:	68b9      	ldr	r1, [r7, #8]
 8008ab4:	f002 fd80 	bl	800b5b8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	685a      	ldr	r2, [r3, #4]
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ac0:	441a      	add	r2, r3
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	685a      	ldr	r2, [r3, #4]
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	689b      	ldr	r3, [r3, #8]
 8008ace:	429a      	cmp	r2, r3
 8008ad0:	d32b      	bcc.n	8008b2a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	681a      	ldr	r2, [r3, #0]
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	605a      	str	r2, [r3, #4]
 8008ada:	e026      	b.n	8008b2a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	68d8      	ldr	r0, [r3, #12]
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ae4:	461a      	mov	r2, r3
 8008ae6:	68b9      	ldr	r1, [r7, #8]
 8008ae8:	f002 fd66 	bl	800b5b8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	68da      	ldr	r2, [r3, #12]
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008af4:	425b      	negs	r3, r3
 8008af6:	441a      	add	r2, r3
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	68da      	ldr	r2, [r3, #12]
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	429a      	cmp	r2, r3
 8008b06:	d207      	bcs.n	8008b18 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	689a      	ldr	r2, [r3, #8]
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b10:	425b      	negs	r3, r3
 8008b12:	441a      	add	r2, r3
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	2b02      	cmp	r3, #2
 8008b1c:	d105      	bne.n	8008b2a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008b1e:	693b      	ldr	r3, [r7, #16]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d002      	beq.n	8008b2a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008b24:	693b      	ldr	r3, [r7, #16]
 8008b26:	3b01      	subs	r3, #1
 8008b28:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008b2a:	693b      	ldr	r3, [r7, #16]
 8008b2c:	1c5a      	adds	r2, r3, #1
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008b32:	697b      	ldr	r3, [r7, #20]
}
 8008b34:	4618      	mov	r0, r3
 8008b36:	3718      	adds	r7, #24
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	bd80      	pop	{r7, pc}

08008b3c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	b082      	sub	sp, #8
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
 8008b44:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d018      	beq.n	8008b80 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	68da      	ldr	r2, [r3, #12]
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b56:	441a      	add	r2, r3
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	68da      	ldr	r2, [r3, #12]
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	689b      	ldr	r3, [r3, #8]
 8008b64:	429a      	cmp	r2, r3
 8008b66:	d303      	bcc.n	8008b70 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681a      	ldr	r2, [r3, #0]
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	68d9      	ldr	r1, [r3, #12]
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b78:	461a      	mov	r2, r3
 8008b7a:	6838      	ldr	r0, [r7, #0]
 8008b7c:	f002 fd1c 	bl	800b5b8 <memcpy>
	}
}
 8008b80:	bf00      	nop
 8008b82:	3708      	adds	r7, #8
 8008b84:	46bd      	mov	sp, r7
 8008b86:	bd80      	pop	{r7, pc}

08008b88 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b084      	sub	sp, #16
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008b90:	f001 fc50 	bl	800a434 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008b9a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008b9c:	e011      	b.n	8008bc2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d012      	beq.n	8008bcc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	3324      	adds	r3, #36	; 0x24
 8008baa:	4618      	mov	r0, r3
 8008bac:	f000 fd2a 	bl	8009604 <xTaskRemoveFromEventList>
 8008bb0:	4603      	mov	r3, r0
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d001      	beq.n	8008bba <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008bb6:	f000 fe01 	bl	80097bc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008bba:	7bfb      	ldrb	r3, [r7, #15]
 8008bbc:	3b01      	subs	r3, #1
 8008bbe:	b2db      	uxtb	r3, r3
 8008bc0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008bc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	dce9      	bgt.n	8008b9e <prvUnlockQueue+0x16>
 8008bca:	e000      	b.n	8008bce <prvUnlockQueue+0x46>
					break;
 8008bcc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	22ff      	movs	r2, #255	; 0xff
 8008bd2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008bd6:	f001 fc5d 	bl	800a494 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008bda:	f001 fc2b 	bl	800a434 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008be4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008be6:	e011      	b.n	8008c0c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	691b      	ldr	r3, [r3, #16]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d012      	beq.n	8008c16 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	3310      	adds	r3, #16
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	f000 fd05 	bl	8009604 <xTaskRemoveFromEventList>
 8008bfa:	4603      	mov	r3, r0
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d001      	beq.n	8008c04 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008c00:	f000 fddc 	bl	80097bc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008c04:	7bbb      	ldrb	r3, [r7, #14]
 8008c06:	3b01      	subs	r3, #1
 8008c08:	b2db      	uxtb	r3, r3
 8008c0a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008c0c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	dce9      	bgt.n	8008be8 <prvUnlockQueue+0x60>
 8008c14:	e000      	b.n	8008c18 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008c16:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	22ff      	movs	r2, #255	; 0xff
 8008c1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008c20:	f001 fc38 	bl	800a494 <vPortExitCritical>
}
 8008c24:	bf00      	nop
 8008c26:	3710      	adds	r7, #16
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	bd80      	pop	{r7, pc}

08008c2c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	b084      	sub	sp, #16
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008c34:	f001 fbfe 	bl	800a434 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d102      	bne.n	8008c46 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008c40:	2301      	movs	r3, #1
 8008c42:	60fb      	str	r3, [r7, #12]
 8008c44:	e001      	b.n	8008c4a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008c46:	2300      	movs	r3, #0
 8008c48:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008c4a:	f001 fc23 	bl	800a494 <vPortExitCritical>

	return xReturn;
 8008c4e:	68fb      	ldr	r3, [r7, #12]
}
 8008c50:	4618      	mov	r0, r3
 8008c52:	3710      	adds	r7, #16
 8008c54:	46bd      	mov	sp, r7
 8008c56:	bd80      	pop	{r7, pc}

08008c58 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b084      	sub	sp, #16
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008c60:	f001 fbe8 	bl	800a434 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c6c:	429a      	cmp	r2, r3
 8008c6e:	d102      	bne.n	8008c76 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008c70:	2301      	movs	r3, #1
 8008c72:	60fb      	str	r3, [r7, #12]
 8008c74:	e001      	b.n	8008c7a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008c76:	2300      	movs	r3, #0
 8008c78:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008c7a:	f001 fc0b 	bl	800a494 <vPortExitCritical>

	return xReturn;
 8008c7e:	68fb      	ldr	r3, [r7, #12]
}
 8008c80:	4618      	mov	r0, r3
 8008c82:	3710      	adds	r7, #16
 8008c84:	46bd      	mov	sp, r7
 8008c86:	bd80      	pop	{r7, pc}

08008c88 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008c88:	b480      	push	{r7}
 8008c8a:	b085      	sub	sp, #20
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
 8008c90:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008c92:	2300      	movs	r3, #0
 8008c94:	60fb      	str	r3, [r7, #12]
 8008c96:	e014      	b.n	8008cc2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008c98:	4a0f      	ldr	r2, [pc, #60]	; (8008cd8 <vQueueAddToRegistry+0x50>)
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d10b      	bne.n	8008cbc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008ca4:	490c      	ldr	r1, [pc, #48]	; (8008cd8 <vQueueAddToRegistry+0x50>)
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	683a      	ldr	r2, [r7, #0]
 8008caa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008cae:	4a0a      	ldr	r2, [pc, #40]	; (8008cd8 <vQueueAddToRegistry+0x50>)
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	00db      	lsls	r3, r3, #3
 8008cb4:	4413      	add	r3, r2
 8008cb6:	687a      	ldr	r2, [r7, #4]
 8008cb8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008cba:	e006      	b.n	8008cca <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	3301      	adds	r3, #1
 8008cc0:	60fb      	str	r3, [r7, #12]
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	2b07      	cmp	r3, #7
 8008cc6:	d9e7      	bls.n	8008c98 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008cc8:	bf00      	nop
 8008cca:	bf00      	nop
 8008ccc:	3714      	adds	r7, #20
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd4:	4770      	bx	lr
 8008cd6:	bf00      	nop
 8008cd8:	200008ec 	.word	0x200008ec

08008cdc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	b086      	sub	sp, #24
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	60f8      	str	r0, [r7, #12]
 8008ce4:	60b9      	str	r1, [r7, #8]
 8008ce6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008cec:	f001 fba2 	bl	800a434 <vPortEnterCritical>
 8008cf0:	697b      	ldr	r3, [r7, #20]
 8008cf2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008cf6:	b25b      	sxtb	r3, r3
 8008cf8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008cfc:	d103      	bne.n	8008d06 <vQueueWaitForMessageRestricted+0x2a>
 8008cfe:	697b      	ldr	r3, [r7, #20]
 8008d00:	2200      	movs	r2, #0
 8008d02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008d06:	697b      	ldr	r3, [r7, #20]
 8008d08:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008d0c:	b25b      	sxtb	r3, r3
 8008d0e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008d12:	d103      	bne.n	8008d1c <vQueueWaitForMessageRestricted+0x40>
 8008d14:	697b      	ldr	r3, [r7, #20]
 8008d16:	2200      	movs	r2, #0
 8008d18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008d1c:	f001 fbba 	bl	800a494 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008d20:	697b      	ldr	r3, [r7, #20]
 8008d22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d106      	bne.n	8008d36 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008d28:	697b      	ldr	r3, [r7, #20]
 8008d2a:	3324      	adds	r3, #36	; 0x24
 8008d2c:	687a      	ldr	r2, [r7, #4]
 8008d2e:	68b9      	ldr	r1, [r7, #8]
 8008d30:	4618      	mov	r0, r3
 8008d32:	f000 fc3b 	bl	80095ac <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008d36:	6978      	ldr	r0, [r7, #20]
 8008d38:	f7ff ff26 	bl	8008b88 <prvUnlockQueue>
	}
 8008d3c:	bf00      	nop
 8008d3e:	3718      	adds	r7, #24
 8008d40:	46bd      	mov	sp, r7
 8008d42:	bd80      	pop	{r7, pc}

08008d44 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008d44:	b580      	push	{r7, lr}
 8008d46:	b08e      	sub	sp, #56	; 0x38
 8008d48:	af04      	add	r7, sp, #16
 8008d4a:	60f8      	str	r0, [r7, #12]
 8008d4c:	60b9      	str	r1, [r7, #8]
 8008d4e:	607a      	str	r2, [r7, #4]
 8008d50:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008d52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d10a      	bne.n	8008d6e <xTaskCreateStatic+0x2a>
	__asm volatile
 8008d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d5c:	f383 8811 	msr	BASEPRI, r3
 8008d60:	f3bf 8f6f 	isb	sy
 8008d64:	f3bf 8f4f 	dsb	sy
 8008d68:	623b      	str	r3, [r7, #32]
}
 8008d6a:	bf00      	nop
 8008d6c:	e7fe      	b.n	8008d6c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d10a      	bne.n	8008d8a <xTaskCreateStatic+0x46>
	__asm volatile
 8008d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d78:	f383 8811 	msr	BASEPRI, r3
 8008d7c:	f3bf 8f6f 	isb	sy
 8008d80:	f3bf 8f4f 	dsb	sy
 8008d84:	61fb      	str	r3, [r7, #28]
}
 8008d86:	bf00      	nop
 8008d88:	e7fe      	b.n	8008d88 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008d8a:	235c      	movs	r3, #92	; 0x5c
 8008d8c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008d8e:	693b      	ldr	r3, [r7, #16]
 8008d90:	2b5c      	cmp	r3, #92	; 0x5c
 8008d92:	d00a      	beq.n	8008daa <xTaskCreateStatic+0x66>
	__asm volatile
 8008d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d98:	f383 8811 	msr	BASEPRI, r3
 8008d9c:	f3bf 8f6f 	isb	sy
 8008da0:	f3bf 8f4f 	dsb	sy
 8008da4:	61bb      	str	r3, [r7, #24]
}
 8008da6:	bf00      	nop
 8008da8:	e7fe      	b.n	8008da8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008daa:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d01e      	beq.n	8008df0 <xTaskCreateStatic+0xac>
 8008db2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d01b      	beq.n	8008df0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dba:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dbe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008dc0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dc4:	2202      	movs	r2, #2
 8008dc6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008dca:	2300      	movs	r3, #0
 8008dcc:	9303      	str	r3, [sp, #12]
 8008dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dd0:	9302      	str	r3, [sp, #8]
 8008dd2:	f107 0314 	add.w	r3, r7, #20
 8008dd6:	9301      	str	r3, [sp, #4]
 8008dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dda:	9300      	str	r3, [sp, #0]
 8008ddc:	683b      	ldr	r3, [r7, #0]
 8008dde:	687a      	ldr	r2, [r7, #4]
 8008de0:	68b9      	ldr	r1, [r7, #8]
 8008de2:	68f8      	ldr	r0, [r7, #12]
 8008de4:	f000 f850 	bl	8008e88 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008de8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008dea:	f000 f8dd 	bl	8008fa8 <prvAddNewTaskToReadyList>
 8008dee:	e001      	b.n	8008df4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008df0:	2300      	movs	r3, #0
 8008df2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008df4:	697b      	ldr	r3, [r7, #20]
	}
 8008df6:	4618      	mov	r0, r3
 8008df8:	3728      	adds	r7, #40	; 0x28
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	bd80      	pop	{r7, pc}

08008dfe <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008dfe:	b580      	push	{r7, lr}
 8008e00:	b08c      	sub	sp, #48	; 0x30
 8008e02:	af04      	add	r7, sp, #16
 8008e04:	60f8      	str	r0, [r7, #12]
 8008e06:	60b9      	str	r1, [r7, #8]
 8008e08:	603b      	str	r3, [r7, #0]
 8008e0a:	4613      	mov	r3, r2
 8008e0c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008e0e:	88fb      	ldrh	r3, [r7, #6]
 8008e10:	009b      	lsls	r3, r3, #2
 8008e12:	4618      	mov	r0, r3
 8008e14:	f001 fc30 	bl	800a678 <pvPortMalloc>
 8008e18:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008e1a:	697b      	ldr	r3, [r7, #20]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d00e      	beq.n	8008e3e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008e20:	205c      	movs	r0, #92	; 0x5c
 8008e22:	f001 fc29 	bl	800a678 <pvPortMalloc>
 8008e26:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008e28:	69fb      	ldr	r3, [r7, #28]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d003      	beq.n	8008e36 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008e2e:	69fb      	ldr	r3, [r7, #28]
 8008e30:	697a      	ldr	r2, [r7, #20]
 8008e32:	631a      	str	r2, [r3, #48]	; 0x30
 8008e34:	e005      	b.n	8008e42 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008e36:	6978      	ldr	r0, [r7, #20]
 8008e38:	f001 fcea 	bl	800a810 <vPortFree>
 8008e3c:	e001      	b.n	8008e42 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008e3e:	2300      	movs	r3, #0
 8008e40:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008e42:	69fb      	ldr	r3, [r7, #28]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d017      	beq.n	8008e78 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008e48:	69fb      	ldr	r3, [r7, #28]
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008e50:	88fa      	ldrh	r2, [r7, #6]
 8008e52:	2300      	movs	r3, #0
 8008e54:	9303      	str	r3, [sp, #12]
 8008e56:	69fb      	ldr	r3, [r7, #28]
 8008e58:	9302      	str	r3, [sp, #8]
 8008e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e5c:	9301      	str	r3, [sp, #4]
 8008e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e60:	9300      	str	r3, [sp, #0]
 8008e62:	683b      	ldr	r3, [r7, #0]
 8008e64:	68b9      	ldr	r1, [r7, #8]
 8008e66:	68f8      	ldr	r0, [r7, #12]
 8008e68:	f000 f80e 	bl	8008e88 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008e6c:	69f8      	ldr	r0, [r7, #28]
 8008e6e:	f000 f89b 	bl	8008fa8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008e72:	2301      	movs	r3, #1
 8008e74:	61bb      	str	r3, [r7, #24]
 8008e76:	e002      	b.n	8008e7e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008e78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008e7c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008e7e:	69bb      	ldr	r3, [r7, #24]
	}
 8008e80:	4618      	mov	r0, r3
 8008e82:	3720      	adds	r7, #32
 8008e84:	46bd      	mov	sp, r7
 8008e86:	bd80      	pop	{r7, pc}

08008e88 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	b088      	sub	sp, #32
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	60f8      	str	r0, [r7, #12]
 8008e90:	60b9      	str	r1, [r7, #8]
 8008e92:	607a      	str	r2, [r7, #4]
 8008e94:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e98:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	009b      	lsls	r3, r3, #2
 8008e9e:	461a      	mov	r2, r3
 8008ea0:	21a5      	movs	r1, #165	; 0xa5
 8008ea2:	f002 fb5d 	bl	800b560 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ea8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008eb0:	3b01      	subs	r3, #1
 8008eb2:	009b      	lsls	r3, r3, #2
 8008eb4:	4413      	add	r3, r2
 8008eb6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008eb8:	69bb      	ldr	r3, [r7, #24]
 8008eba:	f023 0307 	bic.w	r3, r3, #7
 8008ebe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008ec0:	69bb      	ldr	r3, [r7, #24]
 8008ec2:	f003 0307 	and.w	r3, r3, #7
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d00a      	beq.n	8008ee0 <prvInitialiseNewTask+0x58>
	__asm volatile
 8008eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ece:	f383 8811 	msr	BASEPRI, r3
 8008ed2:	f3bf 8f6f 	isb	sy
 8008ed6:	f3bf 8f4f 	dsb	sy
 8008eda:	617b      	str	r3, [r7, #20]
}
 8008edc:	bf00      	nop
 8008ede:	e7fe      	b.n	8008ede <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008ee0:	68bb      	ldr	r3, [r7, #8]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d01f      	beq.n	8008f26 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	61fb      	str	r3, [r7, #28]
 8008eea:	e012      	b.n	8008f12 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008eec:	68ba      	ldr	r2, [r7, #8]
 8008eee:	69fb      	ldr	r3, [r7, #28]
 8008ef0:	4413      	add	r3, r2
 8008ef2:	7819      	ldrb	r1, [r3, #0]
 8008ef4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ef6:	69fb      	ldr	r3, [r7, #28]
 8008ef8:	4413      	add	r3, r2
 8008efa:	3334      	adds	r3, #52	; 0x34
 8008efc:	460a      	mov	r2, r1
 8008efe:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008f00:	68ba      	ldr	r2, [r7, #8]
 8008f02:	69fb      	ldr	r3, [r7, #28]
 8008f04:	4413      	add	r3, r2
 8008f06:	781b      	ldrb	r3, [r3, #0]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d006      	beq.n	8008f1a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008f0c:	69fb      	ldr	r3, [r7, #28]
 8008f0e:	3301      	adds	r3, #1
 8008f10:	61fb      	str	r3, [r7, #28]
 8008f12:	69fb      	ldr	r3, [r7, #28]
 8008f14:	2b0f      	cmp	r3, #15
 8008f16:	d9e9      	bls.n	8008eec <prvInitialiseNewTask+0x64>
 8008f18:	e000      	b.n	8008f1c <prvInitialiseNewTask+0x94>
			{
				break;
 8008f1a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008f1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f1e:	2200      	movs	r2, #0
 8008f20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008f24:	e003      	b.n	8008f2e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f28:	2200      	movs	r2, #0
 8008f2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f30:	2b37      	cmp	r3, #55	; 0x37
 8008f32:	d901      	bls.n	8008f38 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008f34:	2337      	movs	r3, #55	; 0x37
 8008f36:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008f3c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008f42:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f46:	2200      	movs	r2, #0
 8008f48:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f4c:	3304      	adds	r3, #4
 8008f4e:	4618      	mov	r0, r3
 8008f50:	f7ff f978 	bl	8008244 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f56:	3318      	adds	r3, #24
 8008f58:	4618      	mov	r0, r3
 8008f5a:	f7ff f973 	bl	8008244 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f62:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f66:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f6c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f72:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f76:	2200      	movs	r2, #0
 8008f78:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008f82:	683a      	ldr	r2, [r7, #0]
 8008f84:	68f9      	ldr	r1, [r7, #12]
 8008f86:	69b8      	ldr	r0, [r7, #24]
 8008f88:	f001 f928 	bl	800a1dc <pxPortInitialiseStack>
 8008f8c:	4602      	mov	r2, r0
 8008f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f90:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d002      	beq.n	8008f9e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f9c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008f9e:	bf00      	nop
 8008fa0:	3720      	adds	r7, #32
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	bd80      	pop	{r7, pc}
	...

08008fa8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	b082      	sub	sp, #8
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008fb0:	f001 fa40 	bl	800a434 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008fb4:	4b2d      	ldr	r3, [pc, #180]	; (800906c <prvAddNewTaskToReadyList+0xc4>)
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	3301      	adds	r3, #1
 8008fba:	4a2c      	ldr	r2, [pc, #176]	; (800906c <prvAddNewTaskToReadyList+0xc4>)
 8008fbc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008fbe:	4b2c      	ldr	r3, [pc, #176]	; (8009070 <prvAddNewTaskToReadyList+0xc8>)
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d109      	bne.n	8008fda <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008fc6:	4a2a      	ldr	r2, [pc, #168]	; (8009070 <prvAddNewTaskToReadyList+0xc8>)
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008fcc:	4b27      	ldr	r3, [pc, #156]	; (800906c <prvAddNewTaskToReadyList+0xc4>)
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	2b01      	cmp	r3, #1
 8008fd2:	d110      	bne.n	8008ff6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008fd4:	f000 fc16 	bl	8009804 <prvInitialiseTaskLists>
 8008fd8:	e00d      	b.n	8008ff6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008fda:	4b26      	ldr	r3, [pc, #152]	; (8009074 <prvAddNewTaskToReadyList+0xcc>)
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d109      	bne.n	8008ff6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008fe2:	4b23      	ldr	r3, [pc, #140]	; (8009070 <prvAddNewTaskToReadyList+0xc8>)
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fec:	429a      	cmp	r2, r3
 8008fee:	d802      	bhi.n	8008ff6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008ff0:	4a1f      	ldr	r2, [pc, #124]	; (8009070 <prvAddNewTaskToReadyList+0xc8>)
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008ff6:	4b20      	ldr	r3, [pc, #128]	; (8009078 <prvAddNewTaskToReadyList+0xd0>)
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	3301      	adds	r3, #1
 8008ffc:	4a1e      	ldr	r2, [pc, #120]	; (8009078 <prvAddNewTaskToReadyList+0xd0>)
 8008ffe:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009000:	4b1d      	ldr	r3, [pc, #116]	; (8009078 <prvAddNewTaskToReadyList+0xd0>)
 8009002:	681a      	ldr	r2, [r3, #0]
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800900c:	4b1b      	ldr	r3, [pc, #108]	; (800907c <prvAddNewTaskToReadyList+0xd4>)
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	429a      	cmp	r2, r3
 8009012:	d903      	bls.n	800901c <prvAddNewTaskToReadyList+0x74>
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009018:	4a18      	ldr	r2, [pc, #96]	; (800907c <prvAddNewTaskToReadyList+0xd4>)
 800901a:	6013      	str	r3, [r2, #0]
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009020:	4613      	mov	r3, r2
 8009022:	009b      	lsls	r3, r3, #2
 8009024:	4413      	add	r3, r2
 8009026:	009b      	lsls	r3, r3, #2
 8009028:	4a15      	ldr	r2, [pc, #84]	; (8009080 <prvAddNewTaskToReadyList+0xd8>)
 800902a:	441a      	add	r2, r3
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	3304      	adds	r3, #4
 8009030:	4619      	mov	r1, r3
 8009032:	4610      	mov	r0, r2
 8009034:	f7ff f913 	bl	800825e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009038:	f001 fa2c 	bl	800a494 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800903c:	4b0d      	ldr	r3, [pc, #52]	; (8009074 <prvAddNewTaskToReadyList+0xcc>)
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	2b00      	cmp	r3, #0
 8009042:	d00e      	beq.n	8009062 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009044:	4b0a      	ldr	r3, [pc, #40]	; (8009070 <prvAddNewTaskToReadyList+0xc8>)
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800904e:	429a      	cmp	r2, r3
 8009050:	d207      	bcs.n	8009062 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009052:	4b0c      	ldr	r3, [pc, #48]	; (8009084 <prvAddNewTaskToReadyList+0xdc>)
 8009054:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009058:	601a      	str	r2, [r3, #0]
 800905a:	f3bf 8f4f 	dsb	sy
 800905e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009062:	bf00      	nop
 8009064:	3708      	adds	r7, #8
 8009066:	46bd      	mov	sp, r7
 8009068:	bd80      	pop	{r7, pc}
 800906a:	bf00      	nop
 800906c:	20000e00 	.word	0x20000e00
 8009070:	2000092c 	.word	0x2000092c
 8009074:	20000e0c 	.word	0x20000e0c
 8009078:	20000e1c 	.word	0x20000e1c
 800907c:	20000e08 	.word	0x20000e08
 8009080:	20000930 	.word	0x20000930
 8009084:	e000ed04 	.word	0xe000ed04

08009088 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009088:	b580      	push	{r7, lr}
 800908a:	b084      	sub	sp, #16
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009090:	2300      	movs	r3, #0
 8009092:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d017      	beq.n	80090ca <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800909a:	4b13      	ldr	r3, [pc, #76]	; (80090e8 <vTaskDelay+0x60>)
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d00a      	beq.n	80090b8 <vTaskDelay+0x30>
	__asm volatile
 80090a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090a6:	f383 8811 	msr	BASEPRI, r3
 80090aa:	f3bf 8f6f 	isb	sy
 80090ae:	f3bf 8f4f 	dsb	sy
 80090b2:	60bb      	str	r3, [r7, #8]
}
 80090b4:	bf00      	nop
 80090b6:	e7fe      	b.n	80090b6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80090b8:	f000 f880 	bl	80091bc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80090bc:	2100      	movs	r1, #0
 80090be:	6878      	ldr	r0, [r7, #4]
 80090c0:	f000 fcea 	bl	8009a98 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80090c4:	f000 f888 	bl	80091d8 <xTaskResumeAll>
 80090c8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d107      	bne.n	80090e0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80090d0:	4b06      	ldr	r3, [pc, #24]	; (80090ec <vTaskDelay+0x64>)
 80090d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090d6:	601a      	str	r2, [r3, #0]
 80090d8:	f3bf 8f4f 	dsb	sy
 80090dc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80090e0:	bf00      	nop
 80090e2:	3710      	adds	r7, #16
 80090e4:	46bd      	mov	sp, r7
 80090e6:	bd80      	pop	{r7, pc}
 80090e8:	20000e28 	.word	0x20000e28
 80090ec:	e000ed04 	.word	0xe000ed04

080090f0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80090f0:	b580      	push	{r7, lr}
 80090f2:	b08a      	sub	sp, #40	; 0x28
 80090f4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80090f6:	2300      	movs	r3, #0
 80090f8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80090fa:	2300      	movs	r3, #0
 80090fc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80090fe:	463a      	mov	r2, r7
 8009100:	1d39      	adds	r1, r7, #4
 8009102:	f107 0308 	add.w	r3, r7, #8
 8009106:	4618      	mov	r0, r3
 8009108:	f7ff f848 	bl	800819c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800910c:	6839      	ldr	r1, [r7, #0]
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	68ba      	ldr	r2, [r7, #8]
 8009112:	9202      	str	r2, [sp, #8]
 8009114:	9301      	str	r3, [sp, #4]
 8009116:	2300      	movs	r3, #0
 8009118:	9300      	str	r3, [sp, #0]
 800911a:	2300      	movs	r3, #0
 800911c:	460a      	mov	r2, r1
 800911e:	4921      	ldr	r1, [pc, #132]	; (80091a4 <vTaskStartScheduler+0xb4>)
 8009120:	4821      	ldr	r0, [pc, #132]	; (80091a8 <vTaskStartScheduler+0xb8>)
 8009122:	f7ff fe0f 	bl	8008d44 <xTaskCreateStatic>
 8009126:	4603      	mov	r3, r0
 8009128:	4a20      	ldr	r2, [pc, #128]	; (80091ac <vTaskStartScheduler+0xbc>)
 800912a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800912c:	4b1f      	ldr	r3, [pc, #124]	; (80091ac <vTaskStartScheduler+0xbc>)
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	2b00      	cmp	r3, #0
 8009132:	d002      	beq.n	800913a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009134:	2301      	movs	r3, #1
 8009136:	617b      	str	r3, [r7, #20]
 8009138:	e001      	b.n	800913e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800913a:	2300      	movs	r3, #0
 800913c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800913e:	697b      	ldr	r3, [r7, #20]
 8009140:	2b01      	cmp	r3, #1
 8009142:	d102      	bne.n	800914a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009144:	f000 fcfc 	bl	8009b40 <xTimerCreateTimerTask>
 8009148:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800914a:	697b      	ldr	r3, [r7, #20]
 800914c:	2b01      	cmp	r3, #1
 800914e:	d116      	bne.n	800917e <vTaskStartScheduler+0x8e>
	__asm volatile
 8009150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009154:	f383 8811 	msr	BASEPRI, r3
 8009158:	f3bf 8f6f 	isb	sy
 800915c:	f3bf 8f4f 	dsb	sy
 8009160:	613b      	str	r3, [r7, #16]
}
 8009162:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009164:	4b12      	ldr	r3, [pc, #72]	; (80091b0 <vTaskStartScheduler+0xc0>)
 8009166:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800916a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800916c:	4b11      	ldr	r3, [pc, #68]	; (80091b4 <vTaskStartScheduler+0xc4>)
 800916e:	2201      	movs	r2, #1
 8009170:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009172:	4b11      	ldr	r3, [pc, #68]	; (80091b8 <vTaskStartScheduler+0xc8>)
 8009174:	2200      	movs	r2, #0
 8009176:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009178:	f001 f8ba 	bl	800a2f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800917c:	e00e      	b.n	800919c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800917e:	697b      	ldr	r3, [r7, #20]
 8009180:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009184:	d10a      	bne.n	800919c <vTaskStartScheduler+0xac>
	__asm volatile
 8009186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800918a:	f383 8811 	msr	BASEPRI, r3
 800918e:	f3bf 8f6f 	isb	sy
 8009192:	f3bf 8f4f 	dsb	sy
 8009196:	60fb      	str	r3, [r7, #12]
}
 8009198:	bf00      	nop
 800919a:	e7fe      	b.n	800919a <vTaskStartScheduler+0xaa>
}
 800919c:	bf00      	nop
 800919e:	3718      	adds	r7, #24
 80091a0:	46bd      	mov	sp, r7
 80091a2:	bd80      	pop	{r7, pc}
 80091a4:	0800b608 	.word	0x0800b608
 80091a8:	080097d5 	.word	0x080097d5
 80091ac:	20000e24 	.word	0x20000e24
 80091b0:	20000e20 	.word	0x20000e20
 80091b4:	20000e0c 	.word	0x20000e0c
 80091b8:	20000e04 	.word	0x20000e04

080091bc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80091bc:	b480      	push	{r7}
 80091be:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80091c0:	4b04      	ldr	r3, [pc, #16]	; (80091d4 <vTaskSuspendAll+0x18>)
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	3301      	adds	r3, #1
 80091c6:	4a03      	ldr	r2, [pc, #12]	; (80091d4 <vTaskSuspendAll+0x18>)
 80091c8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80091ca:	bf00      	nop
 80091cc:	46bd      	mov	sp, r7
 80091ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d2:	4770      	bx	lr
 80091d4:	20000e28 	.word	0x20000e28

080091d8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80091d8:	b580      	push	{r7, lr}
 80091da:	b084      	sub	sp, #16
 80091dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80091de:	2300      	movs	r3, #0
 80091e0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80091e2:	2300      	movs	r3, #0
 80091e4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80091e6:	4b42      	ldr	r3, [pc, #264]	; (80092f0 <xTaskResumeAll+0x118>)
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d10a      	bne.n	8009204 <xTaskResumeAll+0x2c>
	__asm volatile
 80091ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091f2:	f383 8811 	msr	BASEPRI, r3
 80091f6:	f3bf 8f6f 	isb	sy
 80091fa:	f3bf 8f4f 	dsb	sy
 80091fe:	603b      	str	r3, [r7, #0]
}
 8009200:	bf00      	nop
 8009202:	e7fe      	b.n	8009202 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009204:	f001 f916 	bl	800a434 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009208:	4b39      	ldr	r3, [pc, #228]	; (80092f0 <xTaskResumeAll+0x118>)
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	3b01      	subs	r3, #1
 800920e:	4a38      	ldr	r2, [pc, #224]	; (80092f0 <xTaskResumeAll+0x118>)
 8009210:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009212:	4b37      	ldr	r3, [pc, #220]	; (80092f0 <xTaskResumeAll+0x118>)
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	2b00      	cmp	r3, #0
 8009218:	d162      	bne.n	80092e0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800921a:	4b36      	ldr	r3, [pc, #216]	; (80092f4 <xTaskResumeAll+0x11c>)
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d05e      	beq.n	80092e0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009222:	e02f      	b.n	8009284 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009224:	4b34      	ldr	r3, [pc, #208]	; (80092f8 <xTaskResumeAll+0x120>)
 8009226:	68db      	ldr	r3, [r3, #12]
 8009228:	68db      	ldr	r3, [r3, #12]
 800922a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	3318      	adds	r3, #24
 8009230:	4618      	mov	r0, r3
 8009232:	f7ff f871 	bl	8008318 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	3304      	adds	r3, #4
 800923a:	4618      	mov	r0, r3
 800923c:	f7ff f86c 	bl	8008318 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009244:	4b2d      	ldr	r3, [pc, #180]	; (80092fc <xTaskResumeAll+0x124>)
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	429a      	cmp	r2, r3
 800924a:	d903      	bls.n	8009254 <xTaskResumeAll+0x7c>
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009250:	4a2a      	ldr	r2, [pc, #168]	; (80092fc <xTaskResumeAll+0x124>)
 8009252:	6013      	str	r3, [r2, #0]
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009258:	4613      	mov	r3, r2
 800925a:	009b      	lsls	r3, r3, #2
 800925c:	4413      	add	r3, r2
 800925e:	009b      	lsls	r3, r3, #2
 8009260:	4a27      	ldr	r2, [pc, #156]	; (8009300 <xTaskResumeAll+0x128>)
 8009262:	441a      	add	r2, r3
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	3304      	adds	r3, #4
 8009268:	4619      	mov	r1, r3
 800926a:	4610      	mov	r0, r2
 800926c:	f7fe fff7 	bl	800825e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009274:	4b23      	ldr	r3, [pc, #140]	; (8009304 <xTaskResumeAll+0x12c>)
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800927a:	429a      	cmp	r2, r3
 800927c:	d302      	bcc.n	8009284 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800927e:	4b22      	ldr	r3, [pc, #136]	; (8009308 <xTaskResumeAll+0x130>)
 8009280:	2201      	movs	r2, #1
 8009282:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009284:	4b1c      	ldr	r3, [pc, #112]	; (80092f8 <xTaskResumeAll+0x120>)
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	2b00      	cmp	r3, #0
 800928a:	d1cb      	bne.n	8009224 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	2b00      	cmp	r3, #0
 8009290:	d001      	beq.n	8009296 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009292:	f000 fb55 	bl	8009940 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009296:	4b1d      	ldr	r3, [pc, #116]	; (800930c <xTaskResumeAll+0x134>)
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d010      	beq.n	80092c4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80092a2:	f000 f847 	bl	8009334 <xTaskIncrementTick>
 80092a6:	4603      	mov	r3, r0
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d002      	beq.n	80092b2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80092ac:	4b16      	ldr	r3, [pc, #88]	; (8009308 <xTaskResumeAll+0x130>)
 80092ae:	2201      	movs	r2, #1
 80092b0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	3b01      	subs	r3, #1
 80092b6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d1f1      	bne.n	80092a2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80092be:	4b13      	ldr	r3, [pc, #76]	; (800930c <xTaskResumeAll+0x134>)
 80092c0:	2200      	movs	r2, #0
 80092c2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80092c4:	4b10      	ldr	r3, [pc, #64]	; (8009308 <xTaskResumeAll+0x130>)
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d009      	beq.n	80092e0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80092cc:	2301      	movs	r3, #1
 80092ce:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80092d0:	4b0f      	ldr	r3, [pc, #60]	; (8009310 <xTaskResumeAll+0x138>)
 80092d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80092d6:	601a      	str	r2, [r3, #0]
 80092d8:	f3bf 8f4f 	dsb	sy
 80092dc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80092e0:	f001 f8d8 	bl	800a494 <vPortExitCritical>

	return xAlreadyYielded;
 80092e4:	68bb      	ldr	r3, [r7, #8]
}
 80092e6:	4618      	mov	r0, r3
 80092e8:	3710      	adds	r7, #16
 80092ea:	46bd      	mov	sp, r7
 80092ec:	bd80      	pop	{r7, pc}
 80092ee:	bf00      	nop
 80092f0:	20000e28 	.word	0x20000e28
 80092f4:	20000e00 	.word	0x20000e00
 80092f8:	20000dc0 	.word	0x20000dc0
 80092fc:	20000e08 	.word	0x20000e08
 8009300:	20000930 	.word	0x20000930
 8009304:	2000092c 	.word	0x2000092c
 8009308:	20000e14 	.word	0x20000e14
 800930c:	20000e10 	.word	0x20000e10
 8009310:	e000ed04 	.word	0xe000ed04

08009314 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009314:	b480      	push	{r7}
 8009316:	b083      	sub	sp, #12
 8009318:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800931a:	4b05      	ldr	r3, [pc, #20]	; (8009330 <xTaskGetTickCount+0x1c>)
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009320:	687b      	ldr	r3, [r7, #4]
}
 8009322:	4618      	mov	r0, r3
 8009324:	370c      	adds	r7, #12
 8009326:	46bd      	mov	sp, r7
 8009328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932c:	4770      	bx	lr
 800932e:	bf00      	nop
 8009330:	20000e04 	.word	0x20000e04

08009334 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009334:	b580      	push	{r7, lr}
 8009336:	b086      	sub	sp, #24
 8009338:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800933a:	2300      	movs	r3, #0
 800933c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800933e:	4b4f      	ldr	r3, [pc, #316]	; (800947c <xTaskIncrementTick+0x148>)
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	2b00      	cmp	r3, #0
 8009344:	f040 808f 	bne.w	8009466 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009348:	4b4d      	ldr	r3, [pc, #308]	; (8009480 <xTaskIncrementTick+0x14c>)
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	3301      	adds	r3, #1
 800934e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009350:	4a4b      	ldr	r2, [pc, #300]	; (8009480 <xTaskIncrementTick+0x14c>)
 8009352:	693b      	ldr	r3, [r7, #16]
 8009354:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009356:	693b      	ldr	r3, [r7, #16]
 8009358:	2b00      	cmp	r3, #0
 800935a:	d120      	bne.n	800939e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800935c:	4b49      	ldr	r3, [pc, #292]	; (8009484 <xTaskIncrementTick+0x150>)
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	2b00      	cmp	r3, #0
 8009364:	d00a      	beq.n	800937c <xTaskIncrementTick+0x48>
	__asm volatile
 8009366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800936a:	f383 8811 	msr	BASEPRI, r3
 800936e:	f3bf 8f6f 	isb	sy
 8009372:	f3bf 8f4f 	dsb	sy
 8009376:	603b      	str	r3, [r7, #0]
}
 8009378:	bf00      	nop
 800937a:	e7fe      	b.n	800937a <xTaskIncrementTick+0x46>
 800937c:	4b41      	ldr	r3, [pc, #260]	; (8009484 <xTaskIncrementTick+0x150>)
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	60fb      	str	r3, [r7, #12]
 8009382:	4b41      	ldr	r3, [pc, #260]	; (8009488 <xTaskIncrementTick+0x154>)
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	4a3f      	ldr	r2, [pc, #252]	; (8009484 <xTaskIncrementTick+0x150>)
 8009388:	6013      	str	r3, [r2, #0]
 800938a:	4a3f      	ldr	r2, [pc, #252]	; (8009488 <xTaskIncrementTick+0x154>)
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	6013      	str	r3, [r2, #0]
 8009390:	4b3e      	ldr	r3, [pc, #248]	; (800948c <xTaskIncrementTick+0x158>)
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	3301      	adds	r3, #1
 8009396:	4a3d      	ldr	r2, [pc, #244]	; (800948c <xTaskIncrementTick+0x158>)
 8009398:	6013      	str	r3, [r2, #0]
 800939a:	f000 fad1 	bl	8009940 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800939e:	4b3c      	ldr	r3, [pc, #240]	; (8009490 <xTaskIncrementTick+0x15c>)
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	693a      	ldr	r2, [r7, #16]
 80093a4:	429a      	cmp	r2, r3
 80093a6:	d349      	bcc.n	800943c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80093a8:	4b36      	ldr	r3, [pc, #216]	; (8009484 <xTaskIncrementTick+0x150>)
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d104      	bne.n	80093bc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80093b2:	4b37      	ldr	r3, [pc, #220]	; (8009490 <xTaskIncrementTick+0x15c>)
 80093b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80093b8:	601a      	str	r2, [r3, #0]
					break;
 80093ba:	e03f      	b.n	800943c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80093bc:	4b31      	ldr	r3, [pc, #196]	; (8009484 <xTaskIncrementTick+0x150>)
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	68db      	ldr	r3, [r3, #12]
 80093c2:	68db      	ldr	r3, [r3, #12]
 80093c4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80093c6:	68bb      	ldr	r3, [r7, #8]
 80093c8:	685b      	ldr	r3, [r3, #4]
 80093ca:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80093cc:	693a      	ldr	r2, [r7, #16]
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	429a      	cmp	r2, r3
 80093d2:	d203      	bcs.n	80093dc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80093d4:	4a2e      	ldr	r2, [pc, #184]	; (8009490 <xTaskIncrementTick+0x15c>)
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80093da:	e02f      	b.n	800943c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80093dc:	68bb      	ldr	r3, [r7, #8]
 80093de:	3304      	adds	r3, #4
 80093e0:	4618      	mov	r0, r3
 80093e2:	f7fe ff99 	bl	8008318 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80093e6:	68bb      	ldr	r3, [r7, #8]
 80093e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d004      	beq.n	80093f8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80093ee:	68bb      	ldr	r3, [r7, #8]
 80093f0:	3318      	adds	r3, #24
 80093f2:	4618      	mov	r0, r3
 80093f4:	f7fe ff90 	bl	8008318 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80093f8:	68bb      	ldr	r3, [r7, #8]
 80093fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093fc:	4b25      	ldr	r3, [pc, #148]	; (8009494 <xTaskIncrementTick+0x160>)
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	429a      	cmp	r2, r3
 8009402:	d903      	bls.n	800940c <xTaskIncrementTick+0xd8>
 8009404:	68bb      	ldr	r3, [r7, #8]
 8009406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009408:	4a22      	ldr	r2, [pc, #136]	; (8009494 <xTaskIncrementTick+0x160>)
 800940a:	6013      	str	r3, [r2, #0]
 800940c:	68bb      	ldr	r3, [r7, #8]
 800940e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009410:	4613      	mov	r3, r2
 8009412:	009b      	lsls	r3, r3, #2
 8009414:	4413      	add	r3, r2
 8009416:	009b      	lsls	r3, r3, #2
 8009418:	4a1f      	ldr	r2, [pc, #124]	; (8009498 <xTaskIncrementTick+0x164>)
 800941a:	441a      	add	r2, r3
 800941c:	68bb      	ldr	r3, [r7, #8]
 800941e:	3304      	adds	r3, #4
 8009420:	4619      	mov	r1, r3
 8009422:	4610      	mov	r0, r2
 8009424:	f7fe ff1b 	bl	800825e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009428:	68bb      	ldr	r3, [r7, #8]
 800942a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800942c:	4b1b      	ldr	r3, [pc, #108]	; (800949c <xTaskIncrementTick+0x168>)
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009432:	429a      	cmp	r2, r3
 8009434:	d3b8      	bcc.n	80093a8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009436:	2301      	movs	r3, #1
 8009438:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800943a:	e7b5      	b.n	80093a8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800943c:	4b17      	ldr	r3, [pc, #92]	; (800949c <xTaskIncrementTick+0x168>)
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009442:	4915      	ldr	r1, [pc, #84]	; (8009498 <xTaskIncrementTick+0x164>)
 8009444:	4613      	mov	r3, r2
 8009446:	009b      	lsls	r3, r3, #2
 8009448:	4413      	add	r3, r2
 800944a:	009b      	lsls	r3, r3, #2
 800944c:	440b      	add	r3, r1
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	2b01      	cmp	r3, #1
 8009452:	d901      	bls.n	8009458 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009454:	2301      	movs	r3, #1
 8009456:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009458:	4b11      	ldr	r3, [pc, #68]	; (80094a0 <xTaskIncrementTick+0x16c>)
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	2b00      	cmp	r3, #0
 800945e:	d007      	beq.n	8009470 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009460:	2301      	movs	r3, #1
 8009462:	617b      	str	r3, [r7, #20]
 8009464:	e004      	b.n	8009470 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009466:	4b0f      	ldr	r3, [pc, #60]	; (80094a4 <xTaskIncrementTick+0x170>)
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	3301      	adds	r3, #1
 800946c:	4a0d      	ldr	r2, [pc, #52]	; (80094a4 <xTaskIncrementTick+0x170>)
 800946e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009470:	697b      	ldr	r3, [r7, #20]
}
 8009472:	4618      	mov	r0, r3
 8009474:	3718      	adds	r7, #24
 8009476:	46bd      	mov	sp, r7
 8009478:	bd80      	pop	{r7, pc}
 800947a:	bf00      	nop
 800947c:	20000e28 	.word	0x20000e28
 8009480:	20000e04 	.word	0x20000e04
 8009484:	20000db8 	.word	0x20000db8
 8009488:	20000dbc 	.word	0x20000dbc
 800948c:	20000e18 	.word	0x20000e18
 8009490:	20000e20 	.word	0x20000e20
 8009494:	20000e08 	.word	0x20000e08
 8009498:	20000930 	.word	0x20000930
 800949c:	2000092c 	.word	0x2000092c
 80094a0:	20000e14 	.word	0x20000e14
 80094a4:	20000e10 	.word	0x20000e10

080094a8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80094a8:	b480      	push	{r7}
 80094aa:	b085      	sub	sp, #20
 80094ac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80094ae:	4b28      	ldr	r3, [pc, #160]	; (8009550 <vTaskSwitchContext+0xa8>)
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d003      	beq.n	80094be <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80094b6:	4b27      	ldr	r3, [pc, #156]	; (8009554 <vTaskSwitchContext+0xac>)
 80094b8:	2201      	movs	r2, #1
 80094ba:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80094bc:	e041      	b.n	8009542 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80094be:	4b25      	ldr	r3, [pc, #148]	; (8009554 <vTaskSwitchContext+0xac>)
 80094c0:	2200      	movs	r2, #0
 80094c2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80094c4:	4b24      	ldr	r3, [pc, #144]	; (8009558 <vTaskSwitchContext+0xb0>)
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	60fb      	str	r3, [r7, #12]
 80094ca:	e010      	b.n	80094ee <vTaskSwitchContext+0x46>
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d10a      	bne.n	80094e8 <vTaskSwitchContext+0x40>
	__asm volatile
 80094d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094d6:	f383 8811 	msr	BASEPRI, r3
 80094da:	f3bf 8f6f 	isb	sy
 80094de:	f3bf 8f4f 	dsb	sy
 80094e2:	607b      	str	r3, [r7, #4]
}
 80094e4:	bf00      	nop
 80094e6:	e7fe      	b.n	80094e6 <vTaskSwitchContext+0x3e>
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	3b01      	subs	r3, #1
 80094ec:	60fb      	str	r3, [r7, #12]
 80094ee:	491b      	ldr	r1, [pc, #108]	; (800955c <vTaskSwitchContext+0xb4>)
 80094f0:	68fa      	ldr	r2, [r7, #12]
 80094f2:	4613      	mov	r3, r2
 80094f4:	009b      	lsls	r3, r3, #2
 80094f6:	4413      	add	r3, r2
 80094f8:	009b      	lsls	r3, r3, #2
 80094fa:	440b      	add	r3, r1
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d0e4      	beq.n	80094cc <vTaskSwitchContext+0x24>
 8009502:	68fa      	ldr	r2, [r7, #12]
 8009504:	4613      	mov	r3, r2
 8009506:	009b      	lsls	r3, r3, #2
 8009508:	4413      	add	r3, r2
 800950a:	009b      	lsls	r3, r3, #2
 800950c:	4a13      	ldr	r2, [pc, #76]	; (800955c <vTaskSwitchContext+0xb4>)
 800950e:	4413      	add	r3, r2
 8009510:	60bb      	str	r3, [r7, #8]
 8009512:	68bb      	ldr	r3, [r7, #8]
 8009514:	685b      	ldr	r3, [r3, #4]
 8009516:	685a      	ldr	r2, [r3, #4]
 8009518:	68bb      	ldr	r3, [r7, #8]
 800951a:	605a      	str	r2, [r3, #4]
 800951c:	68bb      	ldr	r3, [r7, #8]
 800951e:	685a      	ldr	r2, [r3, #4]
 8009520:	68bb      	ldr	r3, [r7, #8]
 8009522:	3308      	adds	r3, #8
 8009524:	429a      	cmp	r2, r3
 8009526:	d104      	bne.n	8009532 <vTaskSwitchContext+0x8a>
 8009528:	68bb      	ldr	r3, [r7, #8]
 800952a:	685b      	ldr	r3, [r3, #4]
 800952c:	685a      	ldr	r2, [r3, #4]
 800952e:	68bb      	ldr	r3, [r7, #8]
 8009530:	605a      	str	r2, [r3, #4]
 8009532:	68bb      	ldr	r3, [r7, #8]
 8009534:	685b      	ldr	r3, [r3, #4]
 8009536:	68db      	ldr	r3, [r3, #12]
 8009538:	4a09      	ldr	r2, [pc, #36]	; (8009560 <vTaskSwitchContext+0xb8>)
 800953a:	6013      	str	r3, [r2, #0]
 800953c:	4a06      	ldr	r2, [pc, #24]	; (8009558 <vTaskSwitchContext+0xb0>)
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	6013      	str	r3, [r2, #0]
}
 8009542:	bf00      	nop
 8009544:	3714      	adds	r7, #20
 8009546:	46bd      	mov	sp, r7
 8009548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954c:	4770      	bx	lr
 800954e:	bf00      	nop
 8009550:	20000e28 	.word	0x20000e28
 8009554:	20000e14 	.word	0x20000e14
 8009558:	20000e08 	.word	0x20000e08
 800955c:	20000930 	.word	0x20000930
 8009560:	2000092c 	.word	0x2000092c

08009564 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009564:	b580      	push	{r7, lr}
 8009566:	b084      	sub	sp, #16
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]
 800956c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	2b00      	cmp	r3, #0
 8009572:	d10a      	bne.n	800958a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009578:	f383 8811 	msr	BASEPRI, r3
 800957c:	f3bf 8f6f 	isb	sy
 8009580:	f3bf 8f4f 	dsb	sy
 8009584:	60fb      	str	r3, [r7, #12]
}
 8009586:	bf00      	nop
 8009588:	e7fe      	b.n	8009588 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800958a:	4b07      	ldr	r3, [pc, #28]	; (80095a8 <vTaskPlaceOnEventList+0x44>)
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	3318      	adds	r3, #24
 8009590:	4619      	mov	r1, r3
 8009592:	6878      	ldr	r0, [r7, #4]
 8009594:	f7fe fe87 	bl	80082a6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009598:	2101      	movs	r1, #1
 800959a:	6838      	ldr	r0, [r7, #0]
 800959c:	f000 fa7c 	bl	8009a98 <prvAddCurrentTaskToDelayedList>
}
 80095a0:	bf00      	nop
 80095a2:	3710      	adds	r7, #16
 80095a4:	46bd      	mov	sp, r7
 80095a6:	bd80      	pop	{r7, pc}
 80095a8:	2000092c 	.word	0x2000092c

080095ac <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	b086      	sub	sp, #24
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	60f8      	str	r0, [r7, #12]
 80095b4:	60b9      	str	r1, [r7, #8]
 80095b6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d10a      	bne.n	80095d4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80095be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095c2:	f383 8811 	msr	BASEPRI, r3
 80095c6:	f3bf 8f6f 	isb	sy
 80095ca:	f3bf 8f4f 	dsb	sy
 80095ce:	617b      	str	r3, [r7, #20]
}
 80095d0:	bf00      	nop
 80095d2:	e7fe      	b.n	80095d2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80095d4:	4b0a      	ldr	r3, [pc, #40]	; (8009600 <vTaskPlaceOnEventListRestricted+0x54>)
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	3318      	adds	r3, #24
 80095da:	4619      	mov	r1, r3
 80095dc:	68f8      	ldr	r0, [r7, #12]
 80095de:	f7fe fe3e 	bl	800825e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d002      	beq.n	80095ee <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80095e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80095ec:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80095ee:	6879      	ldr	r1, [r7, #4]
 80095f0:	68b8      	ldr	r0, [r7, #8]
 80095f2:	f000 fa51 	bl	8009a98 <prvAddCurrentTaskToDelayedList>
	}
 80095f6:	bf00      	nop
 80095f8:	3718      	adds	r7, #24
 80095fa:	46bd      	mov	sp, r7
 80095fc:	bd80      	pop	{r7, pc}
 80095fe:	bf00      	nop
 8009600:	2000092c 	.word	0x2000092c

08009604 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009604:	b580      	push	{r7, lr}
 8009606:	b086      	sub	sp, #24
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	68db      	ldr	r3, [r3, #12]
 8009610:	68db      	ldr	r3, [r3, #12]
 8009612:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009614:	693b      	ldr	r3, [r7, #16]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d10a      	bne.n	8009630 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800961a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800961e:	f383 8811 	msr	BASEPRI, r3
 8009622:	f3bf 8f6f 	isb	sy
 8009626:	f3bf 8f4f 	dsb	sy
 800962a:	60fb      	str	r3, [r7, #12]
}
 800962c:	bf00      	nop
 800962e:	e7fe      	b.n	800962e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009630:	693b      	ldr	r3, [r7, #16]
 8009632:	3318      	adds	r3, #24
 8009634:	4618      	mov	r0, r3
 8009636:	f7fe fe6f 	bl	8008318 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800963a:	4b1e      	ldr	r3, [pc, #120]	; (80096b4 <xTaskRemoveFromEventList+0xb0>)
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	2b00      	cmp	r3, #0
 8009640:	d11d      	bne.n	800967e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009642:	693b      	ldr	r3, [r7, #16]
 8009644:	3304      	adds	r3, #4
 8009646:	4618      	mov	r0, r3
 8009648:	f7fe fe66 	bl	8008318 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800964c:	693b      	ldr	r3, [r7, #16]
 800964e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009650:	4b19      	ldr	r3, [pc, #100]	; (80096b8 <xTaskRemoveFromEventList+0xb4>)
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	429a      	cmp	r2, r3
 8009656:	d903      	bls.n	8009660 <xTaskRemoveFromEventList+0x5c>
 8009658:	693b      	ldr	r3, [r7, #16]
 800965a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800965c:	4a16      	ldr	r2, [pc, #88]	; (80096b8 <xTaskRemoveFromEventList+0xb4>)
 800965e:	6013      	str	r3, [r2, #0]
 8009660:	693b      	ldr	r3, [r7, #16]
 8009662:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009664:	4613      	mov	r3, r2
 8009666:	009b      	lsls	r3, r3, #2
 8009668:	4413      	add	r3, r2
 800966a:	009b      	lsls	r3, r3, #2
 800966c:	4a13      	ldr	r2, [pc, #76]	; (80096bc <xTaskRemoveFromEventList+0xb8>)
 800966e:	441a      	add	r2, r3
 8009670:	693b      	ldr	r3, [r7, #16]
 8009672:	3304      	adds	r3, #4
 8009674:	4619      	mov	r1, r3
 8009676:	4610      	mov	r0, r2
 8009678:	f7fe fdf1 	bl	800825e <vListInsertEnd>
 800967c:	e005      	b.n	800968a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800967e:	693b      	ldr	r3, [r7, #16]
 8009680:	3318      	adds	r3, #24
 8009682:	4619      	mov	r1, r3
 8009684:	480e      	ldr	r0, [pc, #56]	; (80096c0 <xTaskRemoveFromEventList+0xbc>)
 8009686:	f7fe fdea 	bl	800825e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800968a:	693b      	ldr	r3, [r7, #16]
 800968c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800968e:	4b0d      	ldr	r3, [pc, #52]	; (80096c4 <xTaskRemoveFromEventList+0xc0>)
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009694:	429a      	cmp	r2, r3
 8009696:	d905      	bls.n	80096a4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009698:	2301      	movs	r3, #1
 800969a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800969c:	4b0a      	ldr	r3, [pc, #40]	; (80096c8 <xTaskRemoveFromEventList+0xc4>)
 800969e:	2201      	movs	r2, #1
 80096a0:	601a      	str	r2, [r3, #0]
 80096a2:	e001      	b.n	80096a8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80096a4:	2300      	movs	r3, #0
 80096a6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80096a8:	697b      	ldr	r3, [r7, #20]
}
 80096aa:	4618      	mov	r0, r3
 80096ac:	3718      	adds	r7, #24
 80096ae:	46bd      	mov	sp, r7
 80096b0:	bd80      	pop	{r7, pc}
 80096b2:	bf00      	nop
 80096b4:	20000e28 	.word	0x20000e28
 80096b8:	20000e08 	.word	0x20000e08
 80096bc:	20000930 	.word	0x20000930
 80096c0:	20000dc0 	.word	0x20000dc0
 80096c4:	2000092c 	.word	0x2000092c
 80096c8:	20000e14 	.word	0x20000e14

080096cc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80096cc:	b480      	push	{r7}
 80096ce:	b083      	sub	sp, #12
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80096d4:	4b06      	ldr	r3, [pc, #24]	; (80096f0 <vTaskInternalSetTimeOutState+0x24>)
 80096d6:	681a      	ldr	r2, [r3, #0]
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80096dc:	4b05      	ldr	r3, [pc, #20]	; (80096f4 <vTaskInternalSetTimeOutState+0x28>)
 80096de:	681a      	ldr	r2, [r3, #0]
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	605a      	str	r2, [r3, #4]
}
 80096e4:	bf00      	nop
 80096e6:	370c      	adds	r7, #12
 80096e8:	46bd      	mov	sp, r7
 80096ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ee:	4770      	bx	lr
 80096f0:	20000e18 	.word	0x20000e18
 80096f4:	20000e04 	.word	0x20000e04

080096f8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80096f8:	b580      	push	{r7, lr}
 80096fa:	b088      	sub	sp, #32
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
 8009700:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	2b00      	cmp	r3, #0
 8009706:	d10a      	bne.n	800971e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800970c:	f383 8811 	msr	BASEPRI, r3
 8009710:	f3bf 8f6f 	isb	sy
 8009714:	f3bf 8f4f 	dsb	sy
 8009718:	613b      	str	r3, [r7, #16]
}
 800971a:	bf00      	nop
 800971c:	e7fe      	b.n	800971c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800971e:	683b      	ldr	r3, [r7, #0]
 8009720:	2b00      	cmp	r3, #0
 8009722:	d10a      	bne.n	800973a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009728:	f383 8811 	msr	BASEPRI, r3
 800972c:	f3bf 8f6f 	isb	sy
 8009730:	f3bf 8f4f 	dsb	sy
 8009734:	60fb      	str	r3, [r7, #12]
}
 8009736:	bf00      	nop
 8009738:	e7fe      	b.n	8009738 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800973a:	f000 fe7b 	bl	800a434 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800973e:	4b1d      	ldr	r3, [pc, #116]	; (80097b4 <xTaskCheckForTimeOut+0xbc>)
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	685b      	ldr	r3, [r3, #4]
 8009748:	69ba      	ldr	r2, [r7, #24]
 800974a:	1ad3      	subs	r3, r2, r3
 800974c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800974e:	683b      	ldr	r3, [r7, #0]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009756:	d102      	bne.n	800975e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009758:	2300      	movs	r3, #0
 800975a:	61fb      	str	r3, [r7, #28]
 800975c:	e023      	b.n	80097a6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681a      	ldr	r2, [r3, #0]
 8009762:	4b15      	ldr	r3, [pc, #84]	; (80097b8 <xTaskCheckForTimeOut+0xc0>)
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	429a      	cmp	r2, r3
 8009768:	d007      	beq.n	800977a <xTaskCheckForTimeOut+0x82>
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	685b      	ldr	r3, [r3, #4]
 800976e:	69ba      	ldr	r2, [r7, #24]
 8009770:	429a      	cmp	r2, r3
 8009772:	d302      	bcc.n	800977a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009774:	2301      	movs	r3, #1
 8009776:	61fb      	str	r3, [r7, #28]
 8009778:	e015      	b.n	80097a6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800977a:	683b      	ldr	r3, [r7, #0]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	697a      	ldr	r2, [r7, #20]
 8009780:	429a      	cmp	r2, r3
 8009782:	d20b      	bcs.n	800979c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009784:	683b      	ldr	r3, [r7, #0]
 8009786:	681a      	ldr	r2, [r3, #0]
 8009788:	697b      	ldr	r3, [r7, #20]
 800978a:	1ad2      	subs	r2, r2, r3
 800978c:	683b      	ldr	r3, [r7, #0]
 800978e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009790:	6878      	ldr	r0, [r7, #4]
 8009792:	f7ff ff9b 	bl	80096cc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009796:	2300      	movs	r3, #0
 8009798:	61fb      	str	r3, [r7, #28]
 800979a:	e004      	b.n	80097a6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800979c:	683b      	ldr	r3, [r7, #0]
 800979e:	2200      	movs	r2, #0
 80097a0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80097a2:	2301      	movs	r3, #1
 80097a4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80097a6:	f000 fe75 	bl	800a494 <vPortExitCritical>

	return xReturn;
 80097aa:	69fb      	ldr	r3, [r7, #28]
}
 80097ac:	4618      	mov	r0, r3
 80097ae:	3720      	adds	r7, #32
 80097b0:	46bd      	mov	sp, r7
 80097b2:	bd80      	pop	{r7, pc}
 80097b4:	20000e04 	.word	0x20000e04
 80097b8:	20000e18 	.word	0x20000e18

080097bc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80097bc:	b480      	push	{r7}
 80097be:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80097c0:	4b03      	ldr	r3, [pc, #12]	; (80097d0 <vTaskMissedYield+0x14>)
 80097c2:	2201      	movs	r2, #1
 80097c4:	601a      	str	r2, [r3, #0]
}
 80097c6:	bf00      	nop
 80097c8:	46bd      	mov	sp, r7
 80097ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ce:	4770      	bx	lr
 80097d0:	20000e14 	.word	0x20000e14

080097d4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80097d4:	b580      	push	{r7, lr}
 80097d6:	b082      	sub	sp, #8
 80097d8:	af00      	add	r7, sp, #0
 80097da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80097dc:	f000 f852 	bl	8009884 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80097e0:	4b06      	ldr	r3, [pc, #24]	; (80097fc <prvIdleTask+0x28>)
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	2b01      	cmp	r3, #1
 80097e6:	d9f9      	bls.n	80097dc <prvIdleTask+0x8>
			{
				taskYIELD();
 80097e8:	4b05      	ldr	r3, [pc, #20]	; (8009800 <prvIdleTask+0x2c>)
 80097ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80097ee:	601a      	str	r2, [r3, #0]
 80097f0:	f3bf 8f4f 	dsb	sy
 80097f4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80097f8:	e7f0      	b.n	80097dc <prvIdleTask+0x8>
 80097fa:	bf00      	nop
 80097fc:	20000930 	.word	0x20000930
 8009800:	e000ed04 	.word	0xe000ed04

08009804 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009804:	b580      	push	{r7, lr}
 8009806:	b082      	sub	sp, #8
 8009808:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800980a:	2300      	movs	r3, #0
 800980c:	607b      	str	r3, [r7, #4]
 800980e:	e00c      	b.n	800982a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009810:	687a      	ldr	r2, [r7, #4]
 8009812:	4613      	mov	r3, r2
 8009814:	009b      	lsls	r3, r3, #2
 8009816:	4413      	add	r3, r2
 8009818:	009b      	lsls	r3, r3, #2
 800981a:	4a12      	ldr	r2, [pc, #72]	; (8009864 <prvInitialiseTaskLists+0x60>)
 800981c:	4413      	add	r3, r2
 800981e:	4618      	mov	r0, r3
 8009820:	f7fe fcf0 	bl	8008204 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	3301      	adds	r3, #1
 8009828:	607b      	str	r3, [r7, #4]
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	2b37      	cmp	r3, #55	; 0x37
 800982e:	d9ef      	bls.n	8009810 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009830:	480d      	ldr	r0, [pc, #52]	; (8009868 <prvInitialiseTaskLists+0x64>)
 8009832:	f7fe fce7 	bl	8008204 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009836:	480d      	ldr	r0, [pc, #52]	; (800986c <prvInitialiseTaskLists+0x68>)
 8009838:	f7fe fce4 	bl	8008204 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800983c:	480c      	ldr	r0, [pc, #48]	; (8009870 <prvInitialiseTaskLists+0x6c>)
 800983e:	f7fe fce1 	bl	8008204 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009842:	480c      	ldr	r0, [pc, #48]	; (8009874 <prvInitialiseTaskLists+0x70>)
 8009844:	f7fe fcde 	bl	8008204 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009848:	480b      	ldr	r0, [pc, #44]	; (8009878 <prvInitialiseTaskLists+0x74>)
 800984a:	f7fe fcdb 	bl	8008204 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800984e:	4b0b      	ldr	r3, [pc, #44]	; (800987c <prvInitialiseTaskLists+0x78>)
 8009850:	4a05      	ldr	r2, [pc, #20]	; (8009868 <prvInitialiseTaskLists+0x64>)
 8009852:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009854:	4b0a      	ldr	r3, [pc, #40]	; (8009880 <prvInitialiseTaskLists+0x7c>)
 8009856:	4a05      	ldr	r2, [pc, #20]	; (800986c <prvInitialiseTaskLists+0x68>)
 8009858:	601a      	str	r2, [r3, #0]
}
 800985a:	bf00      	nop
 800985c:	3708      	adds	r7, #8
 800985e:	46bd      	mov	sp, r7
 8009860:	bd80      	pop	{r7, pc}
 8009862:	bf00      	nop
 8009864:	20000930 	.word	0x20000930
 8009868:	20000d90 	.word	0x20000d90
 800986c:	20000da4 	.word	0x20000da4
 8009870:	20000dc0 	.word	0x20000dc0
 8009874:	20000dd4 	.word	0x20000dd4
 8009878:	20000dec 	.word	0x20000dec
 800987c:	20000db8 	.word	0x20000db8
 8009880:	20000dbc 	.word	0x20000dbc

08009884 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009884:	b580      	push	{r7, lr}
 8009886:	b082      	sub	sp, #8
 8009888:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800988a:	e019      	b.n	80098c0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800988c:	f000 fdd2 	bl	800a434 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009890:	4b10      	ldr	r3, [pc, #64]	; (80098d4 <prvCheckTasksWaitingTermination+0x50>)
 8009892:	68db      	ldr	r3, [r3, #12]
 8009894:	68db      	ldr	r3, [r3, #12]
 8009896:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	3304      	adds	r3, #4
 800989c:	4618      	mov	r0, r3
 800989e:	f7fe fd3b 	bl	8008318 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80098a2:	4b0d      	ldr	r3, [pc, #52]	; (80098d8 <prvCheckTasksWaitingTermination+0x54>)
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	3b01      	subs	r3, #1
 80098a8:	4a0b      	ldr	r2, [pc, #44]	; (80098d8 <prvCheckTasksWaitingTermination+0x54>)
 80098aa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80098ac:	4b0b      	ldr	r3, [pc, #44]	; (80098dc <prvCheckTasksWaitingTermination+0x58>)
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	3b01      	subs	r3, #1
 80098b2:	4a0a      	ldr	r2, [pc, #40]	; (80098dc <prvCheckTasksWaitingTermination+0x58>)
 80098b4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80098b6:	f000 fded 	bl	800a494 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80098ba:	6878      	ldr	r0, [r7, #4]
 80098bc:	f000 f810 	bl	80098e0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80098c0:	4b06      	ldr	r3, [pc, #24]	; (80098dc <prvCheckTasksWaitingTermination+0x58>)
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d1e1      	bne.n	800988c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80098c8:	bf00      	nop
 80098ca:	bf00      	nop
 80098cc:	3708      	adds	r7, #8
 80098ce:	46bd      	mov	sp, r7
 80098d0:	bd80      	pop	{r7, pc}
 80098d2:	bf00      	nop
 80098d4:	20000dd4 	.word	0x20000dd4
 80098d8:	20000e00 	.word	0x20000e00
 80098dc:	20000de8 	.word	0x20000de8

080098e0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b084      	sub	sp, #16
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d108      	bne.n	8009904 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098f6:	4618      	mov	r0, r3
 80098f8:	f000 ff8a 	bl	800a810 <vPortFree>
				vPortFree( pxTCB );
 80098fc:	6878      	ldr	r0, [r7, #4]
 80098fe:	f000 ff87 	bl	800a810 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009902:	e018      	b.n	8009936 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800990a:	2b01      	cmp	r3, #1
 800990c:	d103      	bne.n	8009916 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800990e:	6878      	ldr	r0, [r7, #4]
 8009910:	f000 ff7e 	bl	800a810 <vPortFree>
	}
 8009914:	e00f      	b.n	8009936 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800991c:	2b02      	cmp	r3, #2
 800991e:	d00a      	beq.n	8009936 <prvDeleteTCB+0x56>
	__asm volatile
 8009920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009924:	f383 8811 	msr	BASEPRI, r3
 8009928:	f3bf 8f6f 	isb	sy
 800992c:	f3bf 8f4f 	dsb	sy
 8009930:	60fb      	str	r3, [r7, #12]
}
 8009932:	bf00      	nop
 8009934:	e7fe      	b.n	8009934 <prvDeleteTCB+0x54>
	}
 8009936:	bf00      	nop
 8009938:	3710      	adds	r7, #16
 800993a:	46bd      	mov	sp, r7
 800993c:	bd80      	pop	{r7, pc}
	...

08009940 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009940:	b480      	push	{r7}
 8009942:	b083      	sub	sp, #12
 8009944:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009946:	4b0c      	ldr	r3, [pc, #48]	; (8009978 <prvResetNextTaskUnblockTime+0x38>)
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	2b00      	cmp	r3, #0
 800994e:	d104      	bne.n	800995a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009950:	4b0a      	ldr	r3, [pc, #40]	; (800997c <prvResetNextTaskUnblockTime+0x3c>)
 8009952:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009956:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009958:	e008      	b.n	800996c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800995a:	4b07      	ldr	r3, [pc, #28]	; (8009978 <prvResetNextTaskUnblockTime+0x38>)
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	68db      	ldr	r3, [r3, #12]
 8009960:	68db      	ldr	r3, [r3, #12]
 8009962:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	685b      	ldr	r3, [r3, #4]
 8009968:	4a04      	ldr	r2, [pc, #16]	; (800997c <prvResetNextTaskUnblockTime+0x3c>)
 800996a:	6013      	str	r3, [r2, #0]
}
 800996c:	bf00      	nop
 800996e:	370c      	adds	r7, #12
 8009970:	46bd      	mov	sp, r7
 8009972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009976:	4770      	bx	lr
 8009978:	20000db8 	.word	0x20000db8
 800997c:	20000e20 	.word	0x20000e20

08009980 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009980:	b480      	push	{r7}
 8009982:	b083      	sub	sp, #12
 8009984:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009986:	4b0b      	ldr	r3, [pc, #44]	; (80099b4 <xTaskGetSchedulerState+0x34>)
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	2b00      	cmp	r3, #0
 800998c:	d102      	bne.n	8009994 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800998e:	2301      	movs	r3, #1
 8009990:	607b      	str	r3, [r7, #4]
 8009992:	e008      	b.n	80099a6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009994:	4b08      	ldr	r3, [pc, #32]	; (80099b8 <xTaskGetSchedulerState+0x38>)
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	2b00      	cmp	r3, #0
 800999a:	d102      	bne.n	80099a2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800999c:	2302      	movs	r3, #2
 800999e:	607b      	str	r3, [r7, #4]
 80099a0:	e001      	b.n	80099a6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80099a2:	2300      	movs	r3, #0
 80099a4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80099a6:	687b      	ldr	r3, [r7, #4]
	}
 80099a8:	4618      	mov	r0, r3
 80099aa:	370c      	adds	r7, #12
 80099ac:	46bd      	mov	sp, r7
 80099ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b2:	4770      	bx	lr
 80099b4:	20000e0c 	.word	0x20000e0c
 80099b8:	20000e28 	.word	0x20000e28

080099bc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80099bc:	b580      	push	{r7, lr}
 80099be:	b086      	sub	sp, #24
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80099c8:	2300      	movs	r3, #0
 80099ca:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d056      	beq.n	8009a80 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80099d2:	4b2e      	ldr	r3, [pc, #184]	; (8009a8c <xTaskPriorityDisinherit+0xd0>)
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	693a      	ldr	r2, [r7, #16]
 80099d8:	429a      	cmp	r2, r3
 80099da:	d00a      	beq.n	80099f2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80099dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099e0:	f383 8811 	msr	BASEPRI, r3
 80099e4:	f3bf 8f6f 	isb	sy
 80099e8:	f3bf 8f4f 	dsb	sy
 80099ec:	60fb      	str	r3, [r7, #12]
}
 80099ee:	bf00      	nop
 80099f0:	e7fe      	b.n	80099f0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80099f2:	693b      	ldr	r3, [r7, #16]
 80099f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d10a      	bne.n	8009a10 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80099fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099fe:	f383 8811 	msr	BASEPRI, r3
 8009a02:	f3bf 8f6f 	isb	sy
 8009a06:	f3bf 8f4f 	dsb	sy
 8009a0a:	60bb      	str	r3, [r7, #8]
}
 8009a0c:	bf00      	nop
 8009a0e:	e7fe      	b.n	8009a0e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009a10:	693b      	ldr	r3, [r7, #16]
 8009a12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a14:	1e5a      	subs	r2, r3, #1
 8009a16:	693b      	ldr	r3, [r7, #16]
 8009a18:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009a1a:	693b      	ldr	r3, [r7, #16]
 8009a1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a1e:	693b      	ldr	r3, [r7, #16]
 8009a20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a22:	429a      	cmp	r2, r3
 8009a24:	d02c      	beq.n	8009a80 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009a26:	693b      	ldr	r3, [r7, #16]
 8009a28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d128      	bne.n	8009a80 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009a2e:	693b      	ldr	r3, [r7, #16]
 8009a30:	3304      	adds	r3, #4
 8009a32:	4618      	mov	r0, r3
 8009a34:	f7fe fc70 	bl	8008318 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009a38:	693b      	ldr	r3, [r7, #16]
 8009a3a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009a3c:	693b      	ldr	r3, [r7, #16]
 8009a3e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009a40:	693b      	ldr	r3, [r7, #16]
 8009a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a44:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009a48:	693b      	ldr	r3, [r7, #16]
 8009a4a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009a4c:	693b      	ldr	r3, [r7, #16]
 8009a4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a50:	4b0f      	ldr	r3, [pc, #60]	; (8009a90 <xTaskPriorityDisinherit+0xd4>)
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	429a      	cmp	r2, r3
 8009a56:	d903      	bls.n	8009a60 <xTaskPriorityDisinherit+0xa4>
 8009a58:	693b      	ldr	r3, [r7, #16]
 8009a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a5c:	4a0c      	ldr	r2, [pc, #48]	; (8009a90 <xTaskPriorityDisinherit+0xd4>)
 8009a5e:	6013      	str	r3, [r2, #0]
 8009a60:	693b      	ldr	r3, [r7, #16]
 8009a62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a64:	4613      	mov	r3, r2
 8009a66:	009b      	lsls	r3, r3, #2
 8009a68:	4413      	add	r3, r2
 8009a6a:	009b      	lsls	r3, r3, #2
 8009a6c:	4a09      	ldr	r2, [pc, #36]	; (8009a94 <xTaskPriorityDisinherit+0xd8>)
 8009a6e:	441a      	add	r2, r3
 8009a70:	693b      	ldr	r3, [r7, #16]
 8009a72:	3304      	adds	r3, #4
 8009a74:	4619      	mov	r1, r3
 8009a76:	4610      	mov	r0, r2
 8009a78:	f7fe fbf1 	bl	800825e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009a7c:	2301      	movs	r3, #1
 8009a7e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009a80:	697b      	ldr	r3, [r7, #20]
	}
 8009a82:	4618      	mov	r0, r3
 8009a84:	3718      	adds	r7, #24
 8009a86:	46bd      	mov	sp, r7
 8009a88:	bd80      	pop	{r7, pc}
 8009a8a:	bf00      	nop
 8009a8c:	2000092c 	.word	0x2000092c
 8009a90:	20000e08 	.word	0x20000e08
 8009a94:	20000930 	.word	0x20000930

08009a98 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	b084      	sub	sp, #16
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	6078      	str	r0, [r7, #4]
 8009aa0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009aa2:	4b21      	ldr	r3, [pc, #132]	; (8009b28 <prvAddCurrentTaskToDelayedList+0x90>)
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009aa8:	4b20      	ldr	r3, [pc, #128]	; (8009b2c <prvAddCurrentTaskToDelayedList+0x94>)
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	3304      	adds	r3, #4
 8009aae:	4618      	mov	r0, r3
 8009ab0:	f7fe fc32 	bl	8008318 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009aba:	d10a      	bne.n	8009ad2 <prvAddCurrentTaskToDelayedList+0x3a>
 8009abc:	683b      	ldr	r3, [r7, #0]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d007      	beq.n	8009ad2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009ac2:	4b1a      	ldr	r3, [pc, #104]	; (8009b2c <prvAddCurrentTaskToDelayedList+0x94>)
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	3304      	adds	r3, #4
 8009ac8:	4619      	mov	r1, r3
 8009aca:	4819      	ldr	r0, [pc, #100]	; (8009b30 <prvAddCurrentTaskToDelayedList+0x98>)
 8009acc:	f7fe fbc7 	bl	800825e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009ad0:	e026      	b.n	8009b20 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009ad2:	68fa      	ldr	r2, [r7, #12]
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	4413      	add	r3, r2
 8009ad8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009ada:	4b14      	ldr	r3, [pc, #80]	; (8009b2c <prvAddCurrentTaskToDelayedList+0x94>)
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	68ba      	ldr	r2, [r7, #8]
 8009ae0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009ae2:	68ba      	ldr	r2, [r7, #8]
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	429a      	cmp	r2, r3
 8009ae8:	d209      	bcs.n	8009afe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009aea:	4b12      	ldr	r3, [pc, #72]	; (8009b34 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009aec:	681a      	ldr	r2, [r3, #0]
 8009aee:	4b0f      	ldr	r3, [pc, #60]	; (8009b2c <prvAddCurrentTaskToDelayedList+0x94>)
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	3304      	adds	r3, #4
 8009af4:	4619      	mov	r1, r3
 8009af6:	4610      	mov	r0, r2
 8009af8:	f7fe fbd5 	bl	80082a6 <vListInsert>
}
 8009afc:	e010      	b.n	8009b20 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009afe:	4b0e      	ldr	r3, [pc, #56]	; (8009b38 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009b00:	681a      	ldr	r2, [r3, #0]
 8009b02:	4b0a      	ldr	r3, [pc, #40]	; (8009b2c <prvAddCurrentTaskToDelayedList+0x94>)
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	3304      	adds	r3, #4
 8009b08:	4619      	mov	r1, r3
 8009b0a:	4610      	mov	r0, r2
 8009b0c:	f7fe fbcb 	bl	80082a6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009b10:	4b0a      	ldr	r3, [pc, #40]	; (8009b3c <prvAddCurrentTaskToDelayedList+0xa4>)
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	68ba      	ldr	r2, [r7, #8]
 8009b16:	429a      	cmp	r2, r3
 8009b18:	d202      	bcs.n	8009b20 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009b1a:	4a08      	ldr	r2, [pc, #32]	; (8009b3c <prvAddCurrentTaskToDelayedList+0xa4>)
 8009b1c:	68bb      	ldr	r3, [r7, #8]
 8009b1e:	6013      	str	r3, [r2, #0]
}
 8009b20:	bf00      	nop
 8009b22:	3710      	adds	r7, #16
 8009b24:	46bd      	mov	sp, r7
 8009b26:	bd80      	pop	{r7, pc}
 8009b28:	20000e04 	.word	0x20000e04
 8009b2c:	2000092c 	.word	0x2000092c
 8009b30:	20000dec 	.word	0x20000dec
 8009b34:	20000dbc 	.word	0x20000dbc
 8009b38:	20000db8 	.word	0x20000db8
 8009b3c:	20000e20 	.word	0x20000e20

08009b40 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009b40:	b580      	push	{r7, lr}
 8009b42:	b08a      	sub	sp, #40	; 0x28
 8009b44:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009b46:	2300      	movs	r3, #0
 8009b48:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009b4a:	f000 fb07 	bl	800a15c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009b4e:	4b1c      	ldr	r3, [pc, #112]	; (8009bc0 <xTimerCreateTimerTask+0x80>)
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d021      	beq.n	8009b9a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009b56:	2300      	movs	r3, #0
 8009b58:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009b5a:	2300      	movs	r3, #0
 8009b5c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009b5e:	1d3a      	adds	r2, r7, #4
 8009b60:	f107 0108 	add.w	r1, r7, #8
 8009b64:	f107 030c 	add.w	r3, r7, #12
 8009b68:	4618      	mov	r0, r3
 8009b6a:	f7fe fb31 	bl	80081d0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009b6e:	6879      	ldr	r1, [r7, #4]
 8009b70:	68bb      	ldr	r3, [r7, #8]
 8009b72:	68fa      	ldr	r2, [r7, #12]
 8009b74:	9202      	str	r2, [sp, #8]
 8009b76:	9301      	str	r3, [sp, #4]
 8009b78:	2302      	movs	r3, #2
 8009b7a:	9300      	str	r3, [sp, #0]
 8009b7c:	2300      	movs	r3, #0
 8009b7e:	460a      	mov	r2, r1
 8009b80:	4910      	ldr	r1, [pc, #64]	; (8009bc4 <xTimerCreateTimerTask+0x84>)
 8009b82:	4811      	ldr	r0, [pc, #68]	; (8009bc8 <xTimerCreateTimerTask+0x88>)
 8009b84:	f7ff f8de 	bl	8008d44 <xTaskCreateStatic>
 8009b88:	4603      	mov	r3, r0
 8009b8a:	4a10      	ldr	r2, [pc, #64]	; (8009bcc <xTimerCreateTimerTask+0x8c>)
 8009b8c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009b8e:	4b0f      	ldr	r3, [pc, #60]	; (8009bcc <xTimerCreateTimerTask+0x8c>)
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d001      	beq.n	8009b9a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009b96:	2301      	movs	r3, #1
 8009b98:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009b9a:	697b      	ldr	r3, [r7, #20]
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d10a      	bne.n	8009bb6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ba4:	f383 8811 	msr	BASEPRI, r3
 8009ba8:	f3bf 8f6f 	isb	sy
 8009bac:	f3bf 8f4f 	dsb	sy
 8009bb0:	613b      	str	r3, [r7, #16]
}
 8009bb2:	bf00      	nop
 8009bb4:	e7fe      	b.n	8009bb4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009bb6:	697b      	ldr	r3, [r7, #20]
}
 8009bb8:	4618      	mov	r0, r3
 8009bba:	3718      	adds	r7, #24
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	bd80      	pop	{r7, pc}
 8009bc0:	20000e5c 	.word	0x20000e5c
 8009bc4:	0800b610 	.word	0x0800b610
 8009bc8:	08009d05 	.word	0x08009d05
 8009bcc:	20000e60 	.word	0x20000e60

08009bd0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009bd0:	b580      	push	{r7, lr}
 8009bd2:	b08a      	sub	sp, #40	; 0x28
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	60f8      	str	r0, [r7, #12]
 8009bd8:	60b9      	str	r1, [r7, #8]
 8009bda:	607a      	str	r2, [r7, #4]
 8009bdc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009bde:	2300      	movs	r3, #0
 8009be0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d10a      	bne.n	8009bfe <xTimerGenericCommand+0x2e>
	__asm volatile
 8009be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bec:	f383 8811 	msr	BASEPRI, r3
 8009bf0:	f3bf 8f6f 	isb	sy
 8009bf4:	f3bf 8f4f 	dsb	sy
 8009bf8:	623b      	str	r3, [r7, #32]
}
 8009bfa:	bf00      	nop
 8009bfc:	e7fe      	b.n	8009bfc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009bfe:	4b1a      	ldr	r3, [pc, #104]	; (8009c68 <xTimerGenericCommand+0x98>)
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d02a      	beq.n	8009c5c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009c06:	68bb      	ldr	r3, [r7, #8]
 8009c08:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009c12:	68bb      	ldr	r3, [r7, #8]
 8009c14:	2b05      	cmp	r3, #5
 8009c16:	dc18      	bgt.n	8009c4a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009c18:	f7ff feb2 	bl	8009980 <xTaskGetSchedulerState>
 8009c1c:	4603      	mov	r3, r0
 8009c1e:	2b02      	cmp	r3, #2
 8009c20:	d109      	bne.n	8009c36 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009c22:	4b11      	ldr	r3, [pc, #68]	; (8009c68 <xTimerGenericCommand+0x98>)
 8009c24:	6818      	ldr	r0, [r3, #0]
 8009c26:	f107 0110 	add.w	r1, r7, #16
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c2e:	f7fe fca1 	bl	8008574 <xQueueGenericSend>
 8009c32:	6278      	str	r0, [r7, #36]	; 0x24
 8009c34:	e012      	b.n	8009c5c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009c36:	4b0c      	ldr	r3, [pc, #48]	; (8009c68 <xTimerGenericCommand+0x98>)
 8009c38:	6818      	ldr	r0, [r3, #0]
 8009c3a:	f107 0110 	add.w	r1, r7, #16
 8009c3e:	2300      	movs	r3, #0
 8009c40:	2200      	movs	r2, #0
 8009c42:	f7fe fc97 	bl	8008574 <xQueueGenericSend>
 8009c46:	6278      	str	r0, [r7, #36]	; 0x24
 8009c48:	e008      	b.n	8009c5c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009c4a:	4b07      	ldr	r3, [pc, #28]	; (8009c68 <xTimerGenericCommand+0x98>)
 8009c4c:	6818      	ldr	r0, [r3, #0]
 8009c4e:	f107 0110 	add.w	r1, r7, #16
 8009c52:	2300      	movs	r3, #0
 8009c54:	683a      	ldr	r2, [r7, #0]
 8009c56:	f7fe fd8b 	bl	8008770 <xQueueGenericSendFromISR>
 8009c5a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009c5e:	4618      	mov	r0, r3
 8009c60:	3728      	adds	r7, #40	; 0x28
 8009c62:	46bd      	mov	sp, r7
 8009c64:	bd80      	pop	{r7, pc}
 8009c66:	bf00      	nop
 8009c68:	20000e5c 	.word	0x20000e5c

08009c6c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	b088      	sub	sp, #32
 8009c70:	af02      	add	r7, sp, #8
 8009c72:	6078      	str	r0, [r7, #4]
 8009c74:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c76:	4b22      	ldr	r3, [pc, #136]	; (8009d00 <prvProcessExpiredTimer+0x94>)
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	68db      	ldr	r3, [r3, #12]
 8009c7c:	68db      	ldr	r3, [r3, #12]
 8009c7e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009c80:	697b      	ldr	r3, [r7, #20]
 8009c82:	3304      	adds	r3, #4
 8009c84:	4618      	mov	r0, r3
 8009c86:	f7fe fb47 	bl	8008318 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009c8a:	697b      	ldr	r3, [r7, #20]
 8009c8c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009c90:	f003 0304 	and.w	r3, r3, #4
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d022      	beq.n	8009cde <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009c98:	697b      	ldr	r3, [r7, #20]
 8009c9a:	699a      	ldr	r2, [r3, #24]
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	18d1      	adds	r1, r2, r3
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	683a      	ldr	r2, [r7, #0]
 8009ca4:	6978      	ldr	r0, [r7, #20]
 8009ca6:	f000 f8d1 	bl	8009e4c <prvInsertTimerInActiveList>
 8009caa:	4603      	mov	r3, r0
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d01f      	beq.n	8009cf0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009cb0:	2300      	movs	r3, #0
 8009cb2:	9300      	str	r3, [sp, #0]
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	687a      	ldr	r2, [r7, #4]
 8009cb8:	2100      	movs	r1, #0
 8009cba:	6978      	ldr	r0, [r7, #20]
 8009cbc:	f7ff ff88 	bl	8009bd0 <xTimerGenericCommand>
 8009cc0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009cc2:	693b      	ldr	r3, [r7, #16]
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d113      	bne.n	8009cf0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ccc:	f383 8811 	msr	BASEPRI, r3
 8009cd0:	f3bf 8f6f 	isb	sy
 8009cd4:	f3bf 8f4f 	dsb	sy
 8009cd8:	60fb      	str	r3, [r7, #12]
}
 8009cda:	bf00      	nop
 8009cdc:	e7fe      	b.n	8009cdc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009cde:	697b      	ldr	r3, [r7, #20]
 8009ce0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009ce4:	f023 0301 	bic.w	r3, r3, #1
 8009ce8:	b2da      	uxtb	r2, r3
 8009cea:	697b      	ldr	r3, [r7, #20]
 8009cec:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009cf0:	697b      	ldr	r3, [r7, #20]
 8009cf2:	6a1b      	ldr	r3, [r3, #32]
 8009cf4:	6978      	ldr	r0, [r7, #20]
 8009cf6:	4798      	blx	r3
}
 8009cf8:	bf00      	nop
 8009cfa:	3718      	adds	r7, #24
 8009cfc:	46bd      	mov	sp, r7
 8009cfe:	bd80      	pop	{r7, pc}
 8009d00:	20000e54 	.word	0x20000e54

08009d04 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009d04:	b580      	push	{r7, lr}
 8009d06:	b084      	sub	sp, #16
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009d0c:	f107 0308 	add.w	r3, r7, #8
 8009d10:	4618      	mov	r0, r3
 8009d12:	f000 f857 	bl	8009dc4 <prvGetNextExpireTime>
 8009d16:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009d18:	68bb      	ldr	r3, [r7, #8]
 8009d1a:	4619      	mov	r1, r3
 8009d1c:	68f8      	ldr	r0, [r7, #12]
 8009d1e:	f000 f803 	bl	8009d28 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009d22:	f000 f8d5 	bl	8009ed0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009d26:	e7f1      	b.n	8009d0c <prvTimerTask+0x8>

08009d28 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009d28:	b580      	push	{r7, lr}
 8009d2a:	b084      	sub	sp, #16
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	6078      	str	r0, [r7, #4]
 8009d30:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009d32:	f7ff fa43 	bl	80091bc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009d36:	f107 0308 	add.w	r3, r7, #8
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	f000 f866 	bl	8009e0c <prvSampleTimeNow>
 8009d40:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009d42:	68bb      	ldr	r3, [r7, #8]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d130      	bne.n	8009daa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009d48:	683b      	ldr	r3, [r7, #0]
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d10a      	bne.n	8009d64 <prvProcessTimerOrBlockTask+0x3c>
 8009d4e:	687a      	ldr	r2, [r7, #4]
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	429a      	cmp	r2, r3
 8009d54:	d806      	bhi.n	8009d64 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009d56:	f7ff fa3f 	bl	80091d8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009d5a:	68f9      	ldr	r1, [r7, #12]
 8009d5c:	6878      	ldr	r0, [r7, #4]
 8009d5e:	f7ff ff85 	bl	8009c6c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009d62:	e024      	b.n	8009dae <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009d64:	683b      	ldr	r3, [r7, #0]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d008      	beq.n	8009d7c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009d6a:	4b13      	ldr	r3, [pc, #76]	; (8009db8 <prvProcessTimerOrBlockTask+0x90>)
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d101      	bne.n	8009d78 <prvProcessTimerOrBlockTask+0x50>
 8009d74:	2301      	movs	r3, #1
 8009d76:	e000      	b.n	8009d7a <prvProcessTimerOrBlockTask+0x52>
 8009d78:	2300      	movs	r3, #0
 8009d7a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009d7c:	4b0f      	ldr	r3, [pc, #60]	; (8009dbc <prvProcessTimerOrBlockTask+0x94>)
 8009d7e:	6818      	ldr	r0, [r3, #0]
 8009d80:	687a      	ldr	r2, [r7, #4]
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	1ad3      	subs	r3, r2, r3
 8009d86:	683a      	ldr	r2, [r7, #0]
 8009d88:	4619      	mov	r1, r3
 8009d8a:	f7fe ffa7 	bl	8008cdc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009d8e:	f7ff fa23 	bl	80091d8 <xTaskResumeAll>
 8009d92:	4603      	mov	r3, r0
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d10a      	bne.n	8009dae <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009d98:	4b09      	ldr	r3, [pc, #36]	; (8009dc0 <prvProcessTimerOrBlockTask+0x98>)
 8009d9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d9e:	601a      	str	r2, [r3, #0]
 8009da0:	f3bf 8f4f 	dsb	sy
 8009da4:	f3bf 8f6f 	isb	sy
}
 8009da8:	e001      	b.n	8009dae <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009daa:	f7ff fa15 	bl	80091d8 <xTaskResumeAll>
}
 8009dae:	bf00      	nop
 8009db0:	3710      	adds	r7, #16
 8009db2:	46bd      	mov	sp, r7
 8009db4:	bd80      	pop	{r7, pc}
 8009db6:	bf00      	nop
 8009db8:	20000e58 	.word	0x20000e58
 8009dbc:	20000e5c 	.word	0x20000e5c
 8009dc0:	e000ed04 	.word	0xe000ed04

08009dc4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009dc4:	b480      	push	{r7}
 8009dc6:	b085      	sub	sp, #20
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009dcc:	4b0e      	ldr	r3, [pc, #56]	; (8009e08 <prvGetNextExpireTime+0x44>)
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d101      	bne.n	8009dda <prvGetNextExpireTime+0x16>
 8009dd6:	2201      	movs	r2, #1
 8009dd8:	e000      	b.n	8009ddc <prvGetNextExpireTime+0x18>
 8009dda:	2200      	movs	r2, #0
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d105      	bne.n	8009df4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009de8:	4b07      	ldr	r3, [pc, #28]	; (8009e08 <prvGetNextExpireTime+0x44>)
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	68db      	ldr	r3, [r3, #12]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	60fb      	str	r3, [r7, #12]
 8009df2:	e001      	b.n	8009df8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009df4:	2300      	movs	r3, #0
 8009df6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009df8:	68fb      	ldr	r3, [r7, #12]
}
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	3714      	adds	r7, #20
 8009dfe:	46bd      	mov	sp, r7
 8009e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e04:	4770      	bx	lr
 8009e06:	bf00      	nop
 8009e08:	20000e54 	.word	0x20000e54

08009e0c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009e0c:	b580      	push	{r7, lr}
 8009e0e:	b084      	sub	sp, #16
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009e14:	f7ff fa7e 	bl	8009314 <xTaskGetTickCount>
 8009e18:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009e1a:	4b0b      	ldr	r3, [pc, #44]	; (8009e48 <prvSampleTimeNow+0x3c>)
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	68fa      	ldr	r2, [r7, #12]
 8009e20:	429a      	cmp	r2, r3
 8009e22:	d205      	bcs.n	8009e30 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009e24:	f000 f936 	bl	800a094 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	2201      	movs	r2, #1
 8009e2c:	601a      	str	r2, [r3, #0]
 8009e2e:	e002      	b.n	8009e36 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	2200      	movs	r2, #0
 8009e34:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009e36:	4a04      	ldr	r2, [pc, #16]	; (8009e48 <prvSampleTimeNow+0x3c>)
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009e3c:	68fb      	ldr	r3, [r7, #12]
}
 8009e3e:	4618      	mov	r0, r3
 8009e40:	3710      	adds	r7, #16
 8009e42:	46bd      	mov	sp, r7
 8009e44:	bd80      	pop	{r7, pc}
 8009e46:	bf00      	nop
 8009e48:	20000e64 	.word	0x20000e64

08009e4c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009e4c:	b580      	push	{r7, lr}
 8009e4e:	b086      	sub	sp, #24
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	60f8      	str	r0, [r7, #12]
 8009e54:	60b9      	str	r1, [r7, #8]
 8009e56:	607a      	str	r2, [r7, #4]
 8009e58:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009e5a:	2300      	movs	r3, #0
 8009e5c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	68ba      	ldr	r2, [r7, #8]
 8009e62:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	68fa      	ldr	r2, [r7, #12]
 8009e68:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009e6a:	68ba      	ldr	r2, [r7, #8]
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	429a      	cmp	r2, r3
 8009e70:	d812      	bhi.n	8009e98 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e72:	687a      	ldr	r2, [r7, #4]
 8009e74:	683b      	ldr	r3, [r7, #0]
 8009e76:	1ad2      	subs	r2, r2, r3
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	699b      	ldr	r3, [r3, #24]
 8009e7c:	429a      	cmp	r2, r3
 8009e7e:	d302      	bcc.n	8009e86 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009e80:	2301      	movs	r3, #1
 8009e82:	617b      	str	r3, [r7, #20]
 8009e84:	e01b      	b.n	8009ebe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009e86:	4b10      	ldr	r3, [pc, #64]	; (8009ec8 <prvInsertTimerInActiveList+0x7c>)
 8009e88:	681a      	ldr	r2, [r3, #0]
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	3304      	adds	r3, #4
 8009e8e:	4619      	mov	r1, r3
 8009e90:	4610      	mov	r0, r2
 8009e92:	f7fe fa08 	bl	80082a6 <vListInsert>
 8009e96:	e012      	b.n	8009ebe <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009e98:	687a      	ldr	r2, [r7, #4]
 8009e9a:	683b      	ldr	r3, [r7, #0]
 8009e9c:	429a      	cmp	r2, r3
 8009e9e:	d206      	bcs.n	8009eae <prvInsertTimerInActiveList+0x62>
 8009ea0:	68ba      	ldr	r2, [r7, #8]
 8009ea2:	683b      	ldr	r3, [r7, #0]
 8009ea4:	429a      	cmp	r2, r3
 8009ea6:	d302      	bcc.n	8009eae <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009ea8:	2301      	movs	r3, #1
 8009eaa:	617b      	str	r3, [r7, #20]
 8009eac:	e007      	b.n	8009ebe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009eae:	4b07      	ldr	r3, [pc, #28]	; (8009ecc <prvInsertTimerInActiveList+0x80>)
 8009eb0:	681a      	ldr	r2, [r3, #0]
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	3304      	adds	r3, #4
 8009eb6:	4619      	mov	r1, r3
 8009eb8:	4610      	mov	r0, r2
 8009eba:	f7fe f9f4 	bl	80082a6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009ebe:	697b      	ldr	r3, [r7, #20]
}
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	3718      	adds	r7, #24
 8009ec4:	46bd      	mov	sp, r7
 8009ec6:	bd80      	pop	{r7, pc}
 8009ec8:	20000e58 	.word	0x20000e58
 8009ecc:	20000e54 	.word	0x20000e54

08009ed0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009ed0:	b580      	push	{r7, lr}
 8009ed2:	b08e      	sub	sp, #56	; 0x38
 8009ed4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009ed6:	e0ca      	b.n	800a06e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	da18      	bge.n	8009f10 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009ede:	1d3b      	adds	r3, r7, #4
 8009ee0:	3304      	adds	r3, #4
 8009ee2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009ee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d10a      	bne.n	8009f00 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8009eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eee:	f383 8811 	msr	BASEPRI, r3
 8009ef2:	f3bf 8f6f 	isb	sy
 8009ef6:	f3bf 8f4f 	dsb	sy
 8009efa:	61fb      	str	r3, [r7, #28]
}
 8009efc:	bf00      	nop
 8009efe:	e7fe      	b.n	8009efe <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009f06:	6850      	ldr	r0, [r2, #4]
 8009f08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009f0a:	6892      	ldr	r2, [r2, #8]
 8009f0c:	4611      	mov	r1, r2
 8009f0e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	f2c0 80ab 	blt.w	800a06e <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f1e:	695b      	ldr	r3, [r3, #20]
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d004      	beq.n	8009f2e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f26:	3304      	adds	r3, #4
 8009f28:	4618      	mov	r0, r3
 8009f2a:	f7fe f9f5 	bl	8008318 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009f2e:	463b      	mov	r3, r7
 8009f30:	4618      	mov	r0, r3
 8009f32:	f7ff ff6b 	bl	8009e0c <prvSampleTimeNow>
 8009f36:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	2b09      	cmp	r3, #9
 8009f3c:	f200 8096 	bhi.w	800a06c <prvProcessReceivedCommands+0x19c>
 8009f40:	a201      	add	r2, pc, #4	; (adr r2, 8009f48 <prvProcessReceivedCommands+0x78>)
 8009f42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f46:	bf00      	nop
 8009f48:	08009f71 	.word	0x08009f71
 8009f4c:	08009f71 	.word	0x08009f71
 8009f50:	08009f71 	.word	0x08009f71
 8009f54:	08009fe5 	.word	0x08009fe5
 8009f58:	08009ff9 	.word	0x08009ff9
 8009f5c:	0800a043 	.word	0x0800a043
 8009f60:	08009f71 	.word	0x08009f71
 8009f64:	08009f71 	.word	0x08009f71
 8009f68:	08009fe5 	.word	0x08009fe5
 8009f6c:	08009ff9 	.word	0x08009ff9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f72:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009f76:	f043 0301 	orr.w	r3, r3, #1
 8009f7a:	b2da      	uxtb	r2, r3
 8009f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f7e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009f82:	68ba      	ldr	r2, [r7, #8]
 8009f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f86:	699b      	ldr	r3, [r3, #24]
 8009f88:	18d1      	adds	r1, r2, r3
 8009f8a:	68bb      	ldr	r3, [r7, #8]
 8009f8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009f90:	f7ff ff5c 	bl	8009e4c <prvInsertTimerInActiveList>
 8009f94:	4603      	mov	r3, r0
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d069      	beq.n	800a06e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f9c:	6a1b      	ldr	r3, [r3, #32]
 8009f9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009fa0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fa4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009fa8:	f003 0304 	and.w	r3, r3, #4
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d05e      	beq.n	800a06e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009fb0:	68ba      	ldr	r2, [r7, #8]
 8009fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fb4:	699b      	ldr	r3, [r3, #24]
 8009fb6:	441a      	add	r2, r3
 8009fb8:	2300      	movs	r3, #0
 8009fba:	9300      	str	r3, [sp, #0]
 8009fbc:	2300      	movs	r3, #0
 8009fbe:	2100      	movs	r1, #0
 8009fc0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009fc2:	f7ff fe05 	bl	8009bd0 <xTimerGenericCommand>
 8009fc6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009fc8:	6a3b      	ldr	r3, [r7, #32]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d14f      	bne.n	800a06e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8009fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fd2:	f383 8811 	msr	BASEPRI, r3
 8009fd6:	f3bf 8f6f 	isb	sy
 8009fda:	f3bf 8f4f 	dsb	sy
 8009fde:	61bb      	str	r3, [r7, #24]
}
 8009fe0:	bf00      	nop
 8009fe2:	e7fe      	b.n	8009fe2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fe6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009fea:	f023 0301 	bic.w	r3, r3, #1
 8009fee:	b2da      	uxtb	r2, r3
 8009ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ff2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009ff6:	e03a      	b.n	800a06e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ffa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009ffe:	f043 0301 	orr.w	r3, r3, #1
 800a002:	b2da      	uxtb	r2, r3
 800a004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a006:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a00a:	68ba      	ldr	r2, [r7, #8]
 800a00c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a00e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a012:	699b      	ldr	r3, [r3, #24]
 800a014:	2b00      	cmp	r3, #0
 800a016:	d10a      	bne.n	800a02e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800a018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a01c:	f383 8811 	msr	BASEPRI, r3
 800a020:	f3bf 8f6f 	isb	sy
 800a024:	f3bf 8f4f 	dsb	sy
 800a028:	617b      	str	r3, [r7, #20]
}
 800a02a:	bf00      	nop
 800a02c:	e7fe      	b.n	800a02c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a02e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a030:	699a      	ldr	r2, [r3, #24]
 800a032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a034:	18d1      	adds	r1, r2, r3
 800a036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a038:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a03a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a03c:	f7ff ff06 	bl	8009e4c <prvInsertTimerInActiveList>
					break;
 800a040:	e015      	b.n	800a06e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a044:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a048:	f003 0302 	and.w	r3, r3, #2
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d103      	bne.n	800a058 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800a050:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a052:	f000 fbdd 	bl	800a810 <vPortFree>
 800a056:	e00a      	b.n	800a06e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a05a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a05e:	f023 0301 	bic.w	r3, r3, #1
 800a062:	b2da      	uxtb	r2, r3
 800a064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a066:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a06a:	e000      	b.n	800a06e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800a06c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a06e:	4b08      	ldr	r3, [pc, #32]	; (800a090 <prvProcessReceivedCommands+0x1c0>)
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	1d39      	adds	r1, r7, #4
 800a074:	2200      	movs	r2, #0
 800a076:	4618      	mov	r0, r3
 800a078:	f7fe fc16 	bl	80088a8 <xQueueReceive>
 800a07c:	4603      	mov	r3, r0
 800a07e:	2b00      	cmp	r3, #0
 800a080:	f47f af2a 	bne.w	8009ed8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800a084:	bf00      	nop
 800a086:	bf00      	nop
 800a088:	3730      	adds	r7, #48	; 0x30
 800a08a:	46bd      	mov	sp, r7
 800a08c:	bd80      	pop	{r7, pc}
 800a08e:	bf00      	nop
 800a090:	20000e5c 	.word	0x20000e5c

0800a094 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a094:	b580      	push	{r7, lr}
 800a096:	b088      	sub	sp, #32
 800a098:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a09a:	e048      	b.n	800a12e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a09c:	4b2d      	ldr	r3, [pc, #180]	; (800a154 <prvSwitchTimerLists+0xc0>)
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	68db      	ldr	r3, [r3, #12]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a0a6:	4b2b      	ldr	r3, [pc, #172]	; (800a154 <prvSwitchTimerLists+0xc0>)
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	68db      	ldr	r3, [r3, #12]
 800a0ac:	68db      	ldr	r3, [r3, #12]
 800a0ae:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	3304      	adds	r3, #4
 800a0b4:	4618      	mov	r0, r3
 800a0b6:	f7fe f92f 	bl	8008318 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	6a1b      	ldr	r3, [r3, #32]
 800a0be:	68f8      	ldr	r0, [r7, #12]
 800a0c0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a0c8:	f003 0304 	and.w	r3, r3, #4
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d02e      	beq.n	800a12e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	699b      	ldr	r3, [r3, #24]
 800a0d4:	693a      	ldr	r2, [r7, #16]
 800a0d6:	4413      	add	r3, r2
 800a0d8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a0da:	68ba      	ldr	r2, [r7, #8]
 800a0dc:	693b      	ldr	r3, [r7, #16]
 800a0de:	429a      	cmp	r2, r3
 800a0e0:	d90e      	bls.n	800a100 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	68ba      	ldr	r2, [r7, #8]
 800a0e6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	68fa      	ldr	r2, [r7, #12]
 800a0ec:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a0ee:	4b19      	ldr	r3, [pc, #100]	; (800a154 <prvSwitchTimerLists+0xc0>)
 800a0f0:	681a      	ldr	r2, [r3, #0]
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	3304      	adds	r3, #4
 800a0f6:	4619      	mov	r1, r3
 800a0f8:	4610      	mov	r0, r2
 800a0fa:	f7fe f8d4 	bl	80082a6 <vListInsert>
 800a0fe:	e016      	b.n	800a12e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a100:	2300      	movs	r3, #0
 800a102:	9300      	str	r3, [sp, #0]
 800a104:	2300      	movs	r3, #0
 800a106:	693a      	ldr	r2, [r7, #16]
 800a108:	2100      	movs	r1, #0
 800a10a:	68f8      	ldr	r0, [r7, #12]
 800a10c:	f7ff fd60 	bl	8009bd0 <xTimerGenericCommand>
 800a110:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	2b00      	cmp	r3, #0
 800a116:	d10a      	bne.n	800a12e <prvSwitchTimerLists+0x9a>
	__asm volatile
 800a118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a11c:	f383 8811 	msr	BASEPRI, r3
 800a120:	f3bf 8f6f 	isb	sy
 800a124:	f3bf 8f4f 	dsb	sy
 800a128:	603b      	str	r3, [r7, #0]
}
 800a12a:	bf00      	nop
 800a12c:	e7fe      	b.n	800a12c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a12e:	4b09      	ldr	r3, [pc, #36]	; (800a154 <prvSwitchTimerLists+0xc0>)
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	2b00      	cmp	r3, #0
 800a136:	d1b1      	bne.n	800a09c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a138:	4b06      	ldr	r3, [pc, #24]	; (800a154 <prvSwitchTimerLists+0xc0>)
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a13e:	4b06      	ldr	r3, [pc, #24]	; (800a158 <prvSwitchTimerLists+0xc4>)
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	4a04      	ldr	r2, [pc, #16]	; (800a154 <prvSwitchTimerLists+0xc0>)
 800a144:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a146:	4a04      	ldr	r2, [pc, #16]	; (800a158 <prvSwitchTimerLists+0xc4>)
 800a148:	697b      	ldr	r3, [r7, #20]
 800a14a:	6013      	str	r3, [r2, #0]
}
 800a14c:	bf00      	nop
 800a14e:	3718      	adds	r7, #24
 800a150:	46bd      	mov	sp, r7
 800a152:	bd80      	pop	{r7, pc}
 800a154:	20000e54 	.word	0x20000e54
 800a158:	20000e58 	.word	0x20000e58

0800a15c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a15c:	b580      	push	{r7, lr}
 800a15e:	b082      	sub	sp, #8
 800a160:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a162:	f000 f967 	bl	800a434 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a166:	4b15      	ldr	r3, [pc, #84]	; (800a1bc <prvCheckForValidListAndQueue+0x60>)
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d120      	bne.n	800a1b0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a16e:	4814      	ldr	r0, [pc, #80]	; (800a1c0 <prvCheckForValidListAndQueue+0x64>)
 800a170:	f7fe f848 	bl	8008204 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a174:	4813      	ldr	r0, [pc, #76]	; (800a1c4 <prvCheckForValidListAndQueue+0x68>)
 800a176:	f7fe f845 	bl	8008204 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a17a:	4b13      	ldr	r3, [pc, #76]	; (800a1c8 <prvCheckForValidListAndQueue+0x6c>)
 800a17c:	4a10      	ldr	r2, [pc, #64]	; (800a1c0 <prvCheckForValidListAndQueue+0x64>)
 800a17e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a180:	4b12      	ldr	r3, [pc, #72]	; (800a1cc <prvCheckForValidListAndQueue+0x70>)
 800a182:	4a10      	ldr	r2, [pc, #64]	; (800a1c4 <prvCheckForValidListAndQueue+0x68>)
 800a184:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a186:	2300      	movs	r3, #0
 800a188:	9300      	str	r3, [sp, #0]
 800a18a:	4b11      	ldr	r3, [pc, #68]	; (800a1d0 <prvCheckForValidListAndQueue+0x74>)
 800a18c:	4a11      	ldr	r2, [pc, #68]	; (800a1d4 <prvCheckForValidListAndQueue+0x78>)
 800a18e:	2110      	movs	r1, #16
 800a190:	200a      	movs	r0, #10
 800a192:	f7fe f953 	bl	800843c <xQueueGenericCreateStatic>
 800a196:	4603      	mov	r3, r0
 800a198:	4a08      	ldr	r2, [pc, #32]	; (800a1bc <prvCheckForValidListAndQueue+0x60>)
 800a19a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a19c:	4b07      	ldr	r3, [pc, #28]	; (800a1bc <prvCheckForValidListAndQueue+0x60>)
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d005      	beq.n	800a1b0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a1a4:	4b05      	ldr	r3, [pc, #20]	; (800a1bc <prvCheckForValidListAndQueue+0x60>)
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	490b      	ldr	r1, [pc, #44]	; (800a1d8 <prvCheckForValidListAndQueue+0x7c>)
 800a1aa:	4618      	mov	r0, r3
 800a1ac:	f7fe fd6c 	bl	8008c88 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a1b0:	f000 f970 	bl	800a494 <vPortExitCritical>
}
 800a1b4:	bf00      	nop
 800a1b6:	46bd      	mov	sp, r7
 800a1b8:	bd80      	pop	{r7, pc}
 800a1ba:	bf00      	nop
 800a1bc:	20000e5c 	.word	0x20000e5c
 800a1c0:	20000e2c 	.word	0x20000e2c
 800a1c4:	20000e40 	.word	0x20000e40
 800a1c8:	20000e54 	.word	0x20000e54
 800a1cc:	20000e58 	.word	0x20000e58
 800a1d0:	20000f08 	.word	0x20000f08
 800a1d4:	20000e68 	.word	0x20000e68
 800a1d8:	0800b618 	.word	0x0800b618

0800a1dc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a1dc:	b480      	push	{r7}
 800a1de:	b085      	sub	sp, #20
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	60f8      	str	r0, [r7, #12]
 800a1e4:	60b9      	str	r1, [r7, #8]
 800a1e6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	3b04      	subs	r3, #4
 800a1ec:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a1f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	3b04      	subs	r3, #4
 800a1fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a1fc:	68bb      	ldr	r3, [r7, #8]
 800a1fe:	f023 0201 	bic.w	r2, r3, #1
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	3b04      	subs	r3, #4
 800a20a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a20c:	4a0c      	ldr	r2, [pc, #48]	; (800a240 <pxPortInitialiseStack+0x64>)
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	3b14      	subs	r3, #20
 800a216:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a218:	687a      	ldr	r2, [r7, #4]
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	3b04      	subs	r3, #4
 800a222:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	f06f 0202 	mvn.w	r2, #2
 800a22a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	3b20      	subs	r3, #32
 800a230:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a232:	68fb      	ldr	r3, [r7, #12]
}
 800a234:	4618      	mov	r0, r3
 800a236:	3714      	adds	r7, #20
 800a238:	46bd      	mov	sp, r7
 800a23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a23e:	4770      	bx	lr
 800a240:	0800a245 	.word	0x0800a245

0800a244 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a244:	b480      	push	{r7}
 800a246:	b085      	sub	sp, #20
 800a248:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a24a:	2300      	movs	r3, #0
 800a24c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a24e:	4b12      	ldr	r3, [pc, #72]	; (800a298 <prvTaskExitError+0x54>)
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a256:	d00a      	beq.n	800a26e <prvTaskExitError+0x2a>
	__asm volatile
 800a258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a25c:	f383 8811 	msr	BASEPRI, r3
 800a260:	f3bf 8f6f 	isb	sy
 800a264:	f3bf 8f4f 	dsb	sy
 800a268:	60fb      	str	r3, [r7, #12]
}
 800a26a:	bf00      	nop
 800a26c:	e7fe      	b.n	800a26c <prvTaskExitError+0x28>
	__asm volatile
 800a26e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a272:	f383 8811 	msr	BASEPRI, r3
 800a276:	f3bf 8f6f 	isb	sy
 800a27a:	f3bf 8f4f 	dsb	sy
 800a27e:	60bb      	str	r3, [r7, #8]
}
 800a280:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a282:	bf00      	nop
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	2b00      	cmp	r3, #0
 800a288:	d0fc      	beq.n	800a284 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a28a:	bf00      	nop
 800a28c:	bf00      	nop
 800a28e:	3714      	adds	r7, #20
 800a290:	46bd      	mov	sp, r7
 800a292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a296:	4770      	bx	lr
 800a298:	200000cc 	.word	0x200000cc
 800a29c:	00000000 	.word	0x00000000

0800a2a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a2a0:	4b07      	ldr	r3, [pc, #28]	; (800a2c0 <pxCurrentTCBConst2>)
 800a2a2:	6819      	ldr	r1, [r3, #0]
 800a2a4:	6808      	ldr	r0, [r1, #0]
 800a2a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2aa:	f380 8809 	msr	PSP, r0
 800a2ae:	f3bf 8f6f 	isb	sy
 800a2b2:	f04f 0000 	mov.w	r0, #0
 800a2b6:	f380 8811 	msr	BASEPRI, r0
 800a2ba:	4770      	bx	lr
 800a2bc:	f3af 8000 	nop.w

0800a2c0 <pxCurrentTCBConst2>:
 800a2c0:	2000092c 	.word	0x2000092c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a2c4:	bf00      	nop
 800a2c6:	bf00      	nop

0800a2c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a2c8:	4808      	ldr	r0, [pc, #32]	; (800a2ec <prvPortStartFirstTask+0x24>)
 800a2ca:	6800      	ldr	r0, [r0, #0]
 800a2cc:	6800      	ldr	r0, [r0, #0]
 800a2ce:	f380 8808 	msr	MSP, r0
 800a2d2:	f04f 0000 	mov.w	r0, #0
 800a2d6:	f380 8814 	msr	CONTROL, r0
 800a2da:	b662      	cpsie	i
 800a2dc:	b661      	cpsie	f
 800a2de:	f3bf 8f4f 	dsb	sy
 800a2e2:	f3bf 8f6f 	isb	sy
 800a2e6:	df00      	svc	0
 800a2e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a2ea:	bf00      	nop
 800a2ec:	e000ed08 	.word	0xe000ed08

0800a2f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a2f0:	b580      	push	{r7, lr}
 800a2f2:	b086      	sub	sp, #24
 800a2f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a2f6:	4b46      	ldr	r3, [pc, #280]	; (800a410 <xPortStartScheduler+0x120>)
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	4a46      	ldr	r2, [pc, #280]	; (800a414 <xPortStartScheduler+0x124>)
 800a2fc:	4293      	cmp	r3, r2
 800a2fe:	d10a      	bne.n	800a316 <xPortStartScheduler+0x26>
	__asm volatile
 800a300:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a304:	f383 8811 	msr	BASEPRI, r3
 800a308:	f3bf 8f6f 	isb	sy
 800a30c:	f3bf 8f4f 	dsb	sy
 800a310:	613b      	str	r3, [r7, #16]
}
 800a312:	bf00      	nop
 800a314:	e7fe      	b.n	800a314 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a316:	4b3e      	ldr	r3, [pc, #248]	; (800a410 <xPortStartScheduler+0x120>)
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	4a3f      	ldr	r2, [pc, #252]	; (800a418 <xPortStartScheduler+0x128>)
 800a31c:	4293      	cmp	r3, r2
 800a31e:	d10a      	bne.n	800a336 <xPortStartScheduler+0x46>
	__asm volatile
 800a320:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a324:	f383 8811 	msr	BASEPRI, r3
 800a328:	f3bf 8f6f 	isb	sy
 800a32c:	f3bf 8f4f 	dsb	sy
 800a330:	60fb      	str	r3, [r7, #12]
}
 800a332:	bf00      	nop
 800a334:	e7fe      	b.n	800a334 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a336:	4b39      	ldr	r3, [pc, #228]	; (800a41c <xPortStartScheduler+0x12c>)
 800a338:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a33a:	697b      	ldr	r3, [r7, #20]
 800a33c:	781b      	ldrb	r3, [r3, #0]
 800a33e:	b2db      	uxtb	r3, r3
 800a340:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a342:	697b      	ldr	r3, [r7, #20]
 800a344:	22ff      	movs	r2, #255	; 0xff
 800a346:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a348:	697b      	ldr	r3, [r7, #20]
 800a34a:	781b      	ldrb	r3, [r3, #0]
 800a34c:	b2db      	uxtb	r3, r3
 800a34e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a350:	78fb      	ldrb	r3, [r7, #3]
 800a352:	b2db      	uxtb	r3, r3
 800a354:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a358:	b2da      	uxtb	r2, r3
 800a35a:	4b31      	ldr	r3, [pc, #196]	; (800a420 <xPortStartScheduler+0x130>)
 800a35c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a35e:	4b31      	ldr	r3, [pc, #196]	; (800a424 <xPortStartScheduler+0x134>)
 800a360:	2207      	movs	r2, #7
 800a362:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a364:	e009      	b.n	800a37a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a366:	4b2f      	ldr	r3, [pc, #188]	; (800a424 <xPortStartScheduler+0x134>)
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	3b01      	subs	r3, #1
 800a36c:	4a2d      	ldr	r2, [pc, #180]	; (800a424 <xPortStartScheduler+0x134>)
 800a36e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a370:	78fb      	ldrb	r3, [r7, #3]
 800a372:	b2db      	uxtb	r3, r3
 800a374:	005b      	lsls	r3, r3, #1
 800a376:	b2db      	uxtb	r3, r3
 800a378:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a37a:	78fb      	ldrb	r3, [r7, #3]
 800a37c:	b2db      	uxtb	r3, r3
 800a37e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a382:	2b80      	cmp	r3, #128	; 0x80
 800a384:	d0ef      	beq.n	800a366 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a386:	4b27      	ldr	r3, [pc, #156]	; (800a424 <xPortStartScheduler+0x134>)
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	f1c3 0307 	rsb	r3, r3, #7
 800a38e:	2b04      	cmp	r3, #4
 800a390:	d00a      	beq.n	800a3a8 <xPortStartScheduler+0xb8>
	__asm volatile
 800a392:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a396:	f383 8811 	msr	BASEPRI, r3
 800a39a:	f3bf 8f6f 	isb	sy
 800a39e:	f3bf 8f4f 	dsb	sy
 800a3a2:	60bb      	str	r3, [r7, #8]
}
 800a3a4:	bf00      	nop
 800a3a6:	e7fe      	b.n	800a3a6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a3a8:	4b1e      	ldr	r3, [pc, #120]	; (800a424 <xPortStartScheduler+0x134>)
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	021b      	lsls	r3, r3, #8
 800a3ae:	4a1d      	ldr	r2, [pc, #116]	; (800a424 <xPortStartScheduler+0x134>)
 800a3b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a3b2:	4b1c      	ldr	r3, [pc, #112]	; (800a424 <xPortStartScheduler+0x134>)
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a3ba:	4a1a      	ldr	r2, [pc, #104]	; (800a424 <xPortStartScheduler+0x134>)
 800a3bc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	b2da      	uxtb	r2, r3
 800a3c2:	697b      	ldr	r3, [r7, #20]
 800a3c4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a3c6:	4b18      	ldr	r3, [pc, #96]	; (800a428 <xPortStartScheduler+0x138>)
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	4a17      	ldr	r2, [pc, #92]	; (800a428 <xPortStartScheduler+0x138>)
 800a3cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a3d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a3d2:	4b15      	ldr	r3, [pc, #84]	; (800a428 <xPortStartScheduler+0x138>)
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	4a14      	ldr	r2, [pc, #80]	; (800a428 <xPortStartScheduler+0x138>)
 800a3d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a3dc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a3de:	f000 f8dd 	bl	800a59c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a3e2:	4b12      	ldr	r3, [pc, #72]	; (800a42c <xPortStartScheduler+0x13c>)
 800a3e4:	2200      	movs	r2, #0
 800a3e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a3e8:	f000 f8fc 	bl	800a5e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a3ec:	4b10      	ldr	r3, [pc, #64]	; (800a430 <xPortStartScheduler+0x140>)
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	4a0f      	ldr	r2, [pc, #60]	; (800a430 <xPortStartScheduler+0x140>)
 800a3f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a3f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a3f8:	f7ff ff66 	bl	800a2c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a3fc:	f7ff f854 	bl	80094a8 <vTaskSwitchContext>
	prvTaskExitError();
 800a400:	f7ff ff20 	bl	800a244 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a404:	2300      	movs	r3, #0
}
 800a406:	4618      	mov	r0, r3
 800a408:	3718      	adds	r7, #24
 800a40a:	46bd      	mov	sp, r7
 800a40c:	bd80      	pop	{r7, pc}
 800a40e:	bf00      	nop
 800a410:	e000ed00 	.word	0xe000ed00
 800a414:	410fc271 	.word	0x410fc271
 800a418:	410fc270 	.word	0x410fc270
 800a41c:	e000e400 	.word	0xe000e400
 800a420:	20000f58 	.word	0x20000f58
 800a424:	20000f5c 	.word	0x20000f5c
 800a428:	e000ed20 	.word	0xe000ed20
 800a42c:	200000cc 	.word	0x200000cc
 800a430:	e000ef34 	.word	0xe000ef34

0800a434 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a434:	b480      	push	{r7}
 800a436:	b083      	sub	sp, #12
 800a438:	af00      	add	r7, sp, #0
	__asm volatile
 800a43a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a43e:	f383 8811 	msr	BASEPRI, r3
 800a442:	f3bf 8f6f 	isb	sy
 800a446:	f3bf 8f4f 	dsb	sy
 800a44a:	607b      	str	r3, [r7, #4]
}
 800a44c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a44e:	4b0f      	ldr	r3, [pc, #60]	; (800a48c <vPortEnterCritical+0x58>)
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	3301      	adds	r3, #1
 800a454:	4a0d      	ldr	r2, [pc, #52]	; (800a48c <vPortEnterCritical+0x58>)
 800a456:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a458:	4b0c      	ldr	r3, [pc, #48]	; (800a48c <vPortEnterCritical+0x58>)
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	2b01      	cmp	r3, #1
 800a45e:	d10f      	bne.n	800a480 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a460:	4b0b      	ldr	r3, [pc, #44]	; (800a490 <vPortEnterCritical+0x5c>)
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	b2db      	uxtb	r3, r3
 800a466:	2b00      	cmp	r3, #0
 800a468:	d00a      	beq.n	800a480 <vPortEnterCritical+0x4c>
	__asm volatile
 800a46a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a46e:	f383 8811 	msr	BASEPRI, r3
 800a472:	f3bf 8f6f 	isb	sy
 800a476:	f3bf 8f4f 	dsb	sy
 800a47a:	603b      	str	r3, [r7, #0]
}
 800a47c:	bf00      	nop
 800a47e:	e7fe      	b.n	800a47e <vPortEnterCritical+0x4a>
	}
}
 800a480:	bf00      	nop
 800a482:	370c      	adds	r7, #12
 800a484:	46bd      	mov	sp, r7
 800a486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a48a:	4770      	bx	lr
 800a48c:	200000cc 	.word	0x200000cc
 800a490:	e000ed04 	.word	0xe000ed04

0800a494 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a494:	b480      	push	{r7}
 800a496:	b083      	sub	sp, #12
 800a498:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a49a:	4b12      	ldr	r3, [pc, #72]	; (800a4e4 <vPortExitCritical+0x50>)
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d10a      	bne.n	800a4b8 <vPortExitCritical+0x24>
	__asm volatile
 800a4a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4a6:	f383 8811 	msr	BASEPRI, r3
 800a4aa:	f3bf 8f6f 	isb	sy
 800a4ae:	f3bf 8f4f 	dsb	sy
 800a4b2:	607b      	str	r3, [r7, #4]
}
 800a4b4:	bf00      	nop
 800a4b6:	e7fe      	b.n	800a4b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a4b8:	4b0a      	ldr	r3, [pc, #40]	; (800a4e4 <vPortExitCritical+0x50>)
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	3b01      	subs	r3, #1
 800a4be:	4a09      	ldr	r2, [pc, #36]	; (800a4e4 <vPortExitCritical+0x50>)
 800a4c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a4c2:	4b08      	ldr	r3, [pc, #32]	; (800a4e4 <vPortExitCritical+0x50>)
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d105      	bne.n	800a4d6 <vPortExitCritical+0x42>
 800a4ca:	2300      	movs	r3, #0
 800a4cc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a4ce:	683b      	ldr	r3, [r7, #0]
 800a4d0:	f383 8811 	msr	BASEPRI, r3
}
 800a4d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a4d6:	bf00      	nop
 800a4d8:	370c      	adds	r7, #12
 800a4da:	46bd      	mov	sp, r7
 800a4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e0:	4770      	bx	lr
 800a4e2:	bf00      	nop
 800a4e4:	200000cc 	.word	0x200000cc
	...

0800a4f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a4f0:	f3ef 8009 	mrs	r0, PSP
 800a4f4:	f3bf 8f6f 	isb	sy
 800a4f8:	4b15      	ldr	r3, [pc, #84]	; (800a550 <pxCurrentTCBConst>)
 800a4fa:	681a      	ldr	r2, [r3, #0]
 800a4fc:	f01e 0f10 	tst.w	lr, #16
 800a500:	bf08      	it	eq
 800a502:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a506:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a50a:	6010      	str	r0, [r2, #0]
 800a50c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a510:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a514:	f380 8811 	msr	BASEPRI, r0
 800a518:	f3bf 8f4f 	dsb	sy
 800a51c:	f3bf 8f6f 	isb	sy
 800a520:	f7fe ffc2 	bl	80094a8 <vTaskSwitchContext>
 800a524:	f04f 0000 	mov.w	r0, #0
 800a528:	f380 8811 	msr	BASEPRI, r0
 800a52c:	bc09      	pop	{r0, r3}
 800a52e:	6819      	ldr	r1, [r3, #0]
 800a530:	6808      	ldr	r0, [r1, #0]
 800a532:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a536:	f01e 0f10 	tst.w	lr, #16
 800a53a:	bf08      	it	eq
 800a53c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a540:	f380 8809 	msr	PSP, r0
 800a544:	f3bf 8f6f 	isb	sy
 800a548:	4770      	bx	lr
 800a54a:	bf00      	nop
 800a54c:	f3af 8000 	nop.w

0800a550 <pxCurrentTCBConst>:
 800a550:	2000092c 	.word	0x2000092c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a554:	bf00      	nop
 800a556:	bf00      	nop

0800a558 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a558:	b580      	push	{r7, lr}
 800a55a:	b082      	sub	sp, #8
 800a55c:	af00      	add	r7, sp, #0
	__asm volatile
 800a55e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a562:	f383 8811 	msr	BASEPRI, r3
 800a566:	f3bf 8f6f 	isb	sy
 800a56a:	f3bf 8f4f 	dsb	sy
 800a56e:	607b      	str	r3, [r7, #4]
}
 800a570:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a572:	f7fe fedf 	bl	8009334 <xTaskIncrementTick>
 800a576:	4603      	mov	r3, r0
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d003      	beq.n	800a584 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a57c:	4b06      	ldr	r3, [pc, #24]	; (800a598 <xPortSysTickHandler+0x40>)
 800a57e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a582:	601a      	str	r2, [r3, #0]
 800a584:	2300      	movs	r3, #0
 800a586:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a588:	683b      	ldr	r3, [r7, #0]
 800a58a:	f383 8811 	msr	BASEPRI, r3
}
 800a58e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a590:	bf00      	nop
 800a592:	3708      	adds	r7, #8
 800a594:	46bd      	mov	sp, r7
 800a596:	bd80      	pop	{r7, pc}
 800a598:	e000ed04 	.word	0xe000ed04

0800a59c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a59c:	b480      	push	{r7}
 800a59e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a5a0:	4b0b      	ldr	r3, [pc, #44]	; (800a5d0 <vPortSetupTimerInterrupt+0x34>)
 800a5a2:	2200      	movs	r2, #0
 800a5a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a5a6:	4b0b      	ldr	r3, [pc, #44]	; (800a5d4 <vPortSetupTimerInterrupt+0x38>)
 800a5a8:	2200      	movs	r2, #0
 800a5aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a5ac:	4b0a      	ldr	r3, [pc, #40]	; (800a5d8 <vPortSetupTimerInterrupt+0x3c>)
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	4a0a      	ldr	r2, [pc, #40]	; (800a5dc <vPortSetupTimerInterrupt+0x40>)
 800a5b2:	fba2 2303 	umull	r2, r3, r2, r3
 800a5b6:	099b      	lsrs	r3, r3, #6
 800a5b8:	4a09      	ldr	r2, [pc, #36]	; (800a5e0 <vPortSetupTimerInterrupt+0x44>)
 800a5ba:	3b01      	subs	r3, #1
 800a5bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a5be:	4b04      	ldr	r3, [pc, #16]	; (800a5d0 <vPortSetupTimerInterrupt+0x34>)
 800a5c0:	2207      	movs	r2, #7
 800a5c2:	601a      	str	r2, [r3, #0]
}
 800a5c4:	bf00      	nop
 800a5c6:	46bd      	mov	sp, r7
 800a5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5cc:	4770      	bx	lr
 800a5ce:	bf00      	nop
 800a5d0:	e000e010 	.word	0xe000e010
 800a5d4:	e000e018 	.word	0xe000e018
 800a5d8:	20000000 	.word	0x20000000
 800a5dc:	10624dd3 	.word	0x10624dd3
 800a5e0:	e000e014 	.word	0xe000e014

0800a5e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a5e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a5f4 <vPortEnableVFP+0x10>
 800a5e8:	6801      	ldr	r1, [r0, #0]
 800a5ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a5ee:	6001      	str	r1, [r0, #0]
 800a5f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a5f2:	bf00      	nop
 800a5f4:	e000ed88 	.word	0xe000ed88

0800a5f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a5f8:	b480      	push	{r7}
 800a5fa:	b085      	sub	sp, #20
 800a5fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a5fe:	f3ef 8305 	mrs	r3, IPSR
 800a602:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	2b0f      	cmp	r3, #15
 800a608:	d914      	bls.n	800a634 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a60a:	4a17      	ldr	r2, [pc, #92]	; (800a668 <vPortValidateInterruptPriority+0x70>)
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	4413      	add	r3, r2
 800a610:	781b      	ldrb	r3, [r3, #0]
 800a612:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a614:	4b15      	ldr	r3, [pc, #84]	; (800a66c <vPortValidateInterruptPriority+0x74>)
 800a616:	781b      	ldrb	r3, [r3, #0]
 800a618:	7afa      	ldrb	r2, [r7, #11]
 800a61a:	429a      	cmp	r2, r3
 800a61c:	d20a      	bcs.n	800a634 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a61e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a622:	f383 8811 	msr	BASEPRI, r3
 800a626:	f3bf 8f6f 	isb	sy
 800a62a:	f3bf 8f4f 	dsb	sy
 800a62e:	607b      	str	r3, [r7, #4]
}
 800a630:	bf00      	nop
 800a632:	e7fe      	b.n	800a632 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a634:	4b0e      	ldr	r3, [pc, #56]	; (800a670 <vPortValidateInterruptPriority+0x78>)
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a63c:	4b0d      	ldr	r3, [pc, #52]	; (800a674 <vPortValidateInterruptPriority+0x7c>)
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	429a      	cmp	r2, r3
 800a642:	d90a      	bls.n	800a65a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a644:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a648:	f383 8811 	msr	BASEPRI, r3
 800a64c:	f3bf 8f6f 	isb	sy
 800a650:	f3bf 8f4f 	dsb	sy
 800a654:	603b      	str	r3, [r7, #0]
}
 800a656:	bf00      	nop
 800a658:	e7fe      	b.n	800a658 <vPortValidateInterruptPriority+0x60>
	}
 800a65a:	bf00      	nop
 800a65c:	3714      	adds	r7, #20
 800a65e:	46bd      	mov	sp, r7
 800a660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a664:	4770      	bx	lr
 800a666:	bf00      	nop
 800a668:	e000e3f0 	.word	0xe000e3f0
 800a66c:	20000f58 	.word	0x20000f58
 800a670:	e000ed0c 	.word	0xe000ed0c
 800a674:	20000f5c 	.word	0x20000f5c

0800a678 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a678:	b580      	push	{r7, lr}
 800a67a:	b08a      	sub	sp, #40	; 0x28
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a680:	2300      	movs	r3, #0
 800a682:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a684:	f7fe fd9a 	bl	80091bc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a688:	4b5b      	ldr	r3, [pc, #364]	; (800a7f8 <pvPortMalloc+0x180>)
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d101      	bne.n	800a694 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a690:	f000 f920 	bl	800a8d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a694:	4b59      	ldr	r3, [pc, #356]	; (800a7fc <pvPortMalloc+0x184>)
 800a696:	681a      	ldr	r2, [r3, #0]
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	4013      	ands	r3, r2
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	f040 8093 	bne.w	800a7c8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d01d      	beq.n	800a6e4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a6a8:	2208      	movs	r2, #8
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	4413      	add	r3, r2
 800a6ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	f003 0307 	and.w	r3, r3, #7
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d014      	beq.n	800a6e4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	f023 0307 	bic.w	r3, r3, #7
 800a6c0:	3308      	adds	r3, #8
 800a6c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	f003 0307 	and.w	r3, r3, #7
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d00a      	beq.n	800a6e4 <pvPortMalloc+0x6c>
	__asm volatile
 800a6ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6d2:	f383 8811 	msr	BASEPRI, r3
 800a6d6:	f3bf 8f6f 	isb	sy
 800a6da:	f3bf 8f4f 	dsb	sy
 800a6de:	617b      	str	r3, [r7, #20]
}
 800a6e0:	bf00      	nop
 800a6e2:	e7fe      	b.n	800a6e2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d06e      	beq.n	800a7c8 <pvPortMalloc+0x150>
 800a6ea:	4b45      	ldr	r3, [pc, #276]	; (800a800 <pvPortMalloc+0x188>)
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	687a      	ldr	r2, [r7, #4]
 800a6f0:	429a      	cmp	r2, r3
 800a6f2:	d869      	bhi.n	800a7c8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a6f4:	4b43      	ldr	r3, [pc, #268]	; (800a804 <pvPortMalloc+0x18c>)
 800a6f6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a6f8:	4b42      	ldr	r3, [pc, #264]	; (800a804 <pvPortMalloc+0x18c>)
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a6fe:	e004      	b.n	800a70a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a702:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a70a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a70c:	685b      	ldr	r3, [r3, #4]
 800a70e:	687a      	ldr	r2, [r7, #4]
 800a710:	429a      	cmp	r2, r3
 800a712:	d903      	bls.n	800a71c <pvPortMalloc+0xa4>
 800a714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d1f1      	bne.n	800a700 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a71c:	4b36      	ldr	r3, [pc, #216]	; (800a7f8 <pvPortMalloc+0x180>)
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a722:	429a      	cmp	r2, r3
 800a724:	d050      	beq.n	800a7c8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a726:	6a3b      	ldr	r3, [r7, #32]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	2208      	movs	r2, #8
 800a72c:	4413      	add	r3, r2
 800a72e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a732:	681a      	ldr	r2, [r3, #0]
 800a734:	6a3b      	ldr	r3, [r7, #32]
 800a736:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a73a:	685a      	ldr	r2, [r3, #4]
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	1ad2      	subs	r2, r2, r3
 800a740:	2308      	movs	r3, #8
 800a742:	005b      	lsls	r3, r3, #1
 800a744:	429a      	cmp	r2, r3
 800a746:	d91f      	bls.n	800a788 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a748:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	4413      	add	r3, r2
 800a74e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a750:	69bb      	ldr	r3, [r7, #24]
 800a752:	f003 0307 	and.w	r3, r3, #7
 800a756:	2b00      	cmp	r3, #0
 800a758:	d00a      	beq.n	800a770 <pvPortMalloc+0xf8>
	__asm volatile
 800a75a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a75e:	f383 8811 	msr	BASEPRI, r3
 800a762:	f3bf 8f6f 	isb	sy
 800a766:	f3bf 8f4f 	dsb	sy
 800a76a:	613b      	str	r3, [r7, #16]
}
 800a76c:	bf00      	nop
 800a76e:	e7fe      	b.n	800a76e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a772:	685a      	ldr	r2, [r3, #4]
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	1ad2      	subs	r2, r2, r3
 800a778:	69bb      	ldr	r3, [r7, #24]
 800a77a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a77c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a77e:	687a      	ldr	r2, [r7, #4]
 800a780:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a782:	69b8      	ldr	r0, [r7, #24]
 800a784:	f000 f908 	bl	800a998 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a788:	4b1d      	ldr	r3, [pc, #116]	; (800a800 <pvPortMalloc+0x188>)
 800a78a:	681a      	ldr	r2, [r3, #0]
 800a78c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a78e:	685b      	ldr	r3, [r3, #4]
 800a790:	1ad3      	subs	r3, r2, r3
 800a792:	4a1b      	ldr	r2, [pc, #108]	; (800a800 <pvPortMalloc+0x188>)
 800a794:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a796:	4b1a      	ldr	r3, [pc, #104]	; (800a800 <pvPortMalloc+0x188>)
 800a798:	681a      	ldr	r2, [r3, #0]
 800a79a:	4b1b      	ldr	r3, [pc, #108]	; (800a808 <pvPortMalloc+0x190>)
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	429a      	cmp	r2, r3
 800a7a0:	d203      	bcs.n	800a7aa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a7a2:	4b17      	ldr	r3, [pc, #92]	; (800a800 <pvPortMalloc+0x188>)
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	4a18      	ldr	r2, [pc, #96]	; (800a808 <pvPortMalloc+0x190>)
 800a7a8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a7aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7ac:	685a      	ldr	r2, [r3, #4]
 800a7ae:	4b13      	ldr	r3, [pc, #76]	; (800a7fc <pvPortMalloc+0x184>)
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	431a      	orrs	r2, r3
 800a7b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7b6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a7b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7ba:	2200      	movs	r2, #0
 800a7bc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a7be:	4b13      	ldr	r3, [pc, #76]	; (800a80c <pvPortMalloc+0x194>)
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	3301      	adds	r3, #1
 800a7c4:	4a11      	ldr	r2, [pc, #68]	; (800a80c <pvPortMalloc+0x194>)
 800a7c6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a7c8:	f7fe fd06 	bl	80091d8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a7cc:	69fb      	ldr	r3, [r7, #28]
 800a7ce:	f003 0307 	and.w	r3, r3, #7
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d00a      	beq.n	800a7ec <pvPortMalloc+0x174>
	__asm volatile
 800a7d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7da:	f383 8811 	msr	BASEPRI, r3
 800a7de:	f3bf 8f6f 	isb	sy
 800a7e2:	f3bf 8f4f 	dsb	sy
 800a7e6:	60fb      	str	r3, [r7, #12]
}
 800a7e8:	bf00      	nop
 800a7ea:	e7fe      	b.n	800a7ea <pvPortMalloc+0x172>
	return pvReturn;
 800a7ec:	69fb      	ldr	r3, [r7, #28]
}
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	3728      	adds	r7, #40	; 0x28
 800a7f2:	46bd      	mov	sp, r7
 800a7f4:	bd80      	pop	{r7, pc}
 800a7f6:	bf00      	nop
 800a7f8:	20001b20 	.word	0x20001b20
 800a7fc:	20001b34 	.word	0x20001b34
 800a800:	20001b24 	.word	0x20001b24
 800a804:	20001b18 	.word	0x20001b18
 800a808:	20001b28 	.word	0x20001b28
 800a80c:	20001b2c 	.word	0x20001b2c

0800a810 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a810:	b580      	push	{r7, lr}
 800a812:	b086      	sub	sp, #24
 800a814:	af00      	add	r7, sp, #0
 800a816:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d04d      	beq.n	800a8be <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a822:	2308      	movs	r3, #8
 800a824:	425b      	negs	r3, r3
 800a826:	697a      	ldr	r2, [r7, #20]
 800a828:	4413      	add	r3, r2
 800a82a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a82c:	697b      	ldr	r3, [r7, #20]
 800a82e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a830:	693b      	ldr	r3, [r7, #16]
 800a832:	685a      	ldr	r2, [r3, #4]
 800a834:	4b24      	ldr	r3, [pc, #144]	; (800a8c8 <vPortFree+0xb8>)
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	4013      	ands	r3, r2
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d10a      	bne.n	800a854 <vPortFree+0x44>
	__asm volatile
 800a83e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a842:	f383 8811 	msr	BASEPRI, r3
 800a846:	f3bf 8f6f 	isb	sy
 800a84a:	f3bf 8f4f 	dsb	sy
 800a84e:	60fb      	str	r3, [r7, #12]
}
 800a850:	bf00      	nop
 800a852:	e7fe      	b.n	800a852 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a854:	693b      	ldr	r3, [r7, #16]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d00a      	beq.n	800a872 <vPortFree+0x62>
	__asm volatile
 800a85c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a860:	f383 8811 	msr	BASEPRI, r3
 800a864:	f3bf 8f6f 	isb	sy
 800a868:	f3bf 8f4f 	dsb	sy
 800a86c:	60bb      	str	r3, [r7, #8]
}
 800a86e:	bf00      	nop
 800a870:	e7fe      	b.n	800a870 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a872:	693b      	ldr	r3, [r7, #16]
 800a874:	685a      	ldr	r2, [r3, #4]
 800a876:	4b14      	ldr	r3, [pc, #80]	; (800a8c8 <vPortFree+0xb8>)
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	4013      	ands	r3, r2
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d01e      	beq.n	800a8be <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a880:	693b      	ldr	r3, [r7, #16]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	2b00      	cmp	r3, #0
 800a886:	d11a      	bne.n	800a8be <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a888:	693b      	ldr	r3, [r7, #16]
 800a88a:	685a      	ldr	r2, [r3, #4]
 800a88c:	4b0e      	ldr	r3, [pc, #56]	; (800a8c8 <vPortFree+0xb8>)
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	43db      	mvns	r3, r3
 800a892:	401a      	ands	r2, r3
 800a894:	693b      	ldr	r3, [r7, #16]
 800a896:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a898:	f7fe fc90 	bl	80091bc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a89c:	693b      	ldr	r3, [r7, #16]
 800a89e:	685a      	ldr	r2, [r3, #4]
 800a8a0:	4b0a      	ldr	r3, [pc, #40]	; (800a8cc <vPortFree+0xbc>)
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	4413      	add	r3, r2
 800a8a6:	4a09      	ldr	r2, [pc, #36]	; (800a8cc <vPortFree+0xbc>)
 800a8a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a8aa:	6938      	ldr	r0, [r7, #16]
 800a8ac:	f000 f874 	bl	800a998 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a8b0:	4b07      	ldr	r3, [pc, #28]	; (800a8d0 <vPortFree+0xc0>)
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	3301      	adds	r3, #1
 800a8b6:	4a06      	ldr	r2, [pc, #24]	; (800a8d0 <vPortFree+0xc0>)
 800a8b8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a8ba:	f7fe fc8d 	bl	80091d8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a8be:	bf00      	nop
 800a8c0:	3718      	adds	r7, #24
 800a8c2:	46bd      	mov	sp, r7
 800a8c4:	bd80      	pop	{r7, pc}
 800a8c6:	bf00      	nop
 800a8c8:	20001b34 	.word	0x20001b34
 800a8cc:	20001b24 	.word	0x20001b24
 800a8d0:	20001b30 	.word	0x20001b30

0800a8d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a8d4:	b480      	push	{r7}
 800a8d6:	b085      	sub	sp, #20
 800a8d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a8da:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800a8de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a8e0:	4b27      	ldr	r3, [pc, #156]	; (800a980 <prvHeapInit+0xac>)
 800a8e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	f003 0307 	and.w	r3, r3, #7
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d00c      	beq.n	800a908 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	3307      	adds	r3, #7
 800a8f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	f023 0307 	bic.w	r3, r3, #7
 800a8fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a8fc:	68ba      	ldr	r2, [r7, #8]
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	1ad3      	subs	r3, r2, r3
 800a902:	4a1f      	ldr	r2, [pc, #124]	; (800a980 <prvHeapInit+0xac>)
 800a904:	4413      	add	r3, r2
 800a906:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a90c:	4a1d      	ldr	r2, [pc, #116]	; (800a984 <prvHeapInit+0xb0>)
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a912:	4b1c      	ldr	r3, [pc, #112]	; (800a984 <prvHeapInit+0xb0>)
 800a914:	2200      	movs	r2, #0
 800a916:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	68ba      	ldr	r2, [r7, #8]
 800a91c:	4413      	add	r3, r2
 800a91e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a920:	2208      	movs	r2, #8
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	1a9b      	subs	r3, r3, r2
 800a926:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	f023 0307 	bic.w	r3, r3, #7
 800a92e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	4a15      	ldr	r2, [pc, #84]	; (800a988 <prvHeapInit+0xb4>)
 800a934:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a936:	4b14      	ldr	r3, [pc, #80]	; (800a988 <prvHeapInit+0xb4>)
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	2200      	movs	r2, #0
 800a93c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a93e:	4b12      	ldr	r3, [pc, #72]	; (800a988 <prvHeapInit+0xb4>)
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	2200      	movs	r2, #0
 800a944:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a94a:	683b      	ldr	r3, [r7, #0]
 800a94c:	68fa      	ldr	r2, [r7, #12]
 800a94e:	1ad2      	subs	r2, r2, r3
 800a950:	683b      	ldr	r3, [r7, #0]
 800a952:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a954:	4b0c      	ldr	r3, [pc, #48]	; (800a988 <prvHeapInit+0xb4>)
 800a956:	681a      	ldr	r2, [r3, #0]
 800a958:	683b      	ldr	r3, [r7, #0]
 800a95a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a95c:	683b      	ldr	r3, [r7, #0]
 800a95e:	685b      	ldr	r3, [r3, #4]
 800a960:	4a0a      	ldr	r2, [pc, #40]	; (800a98c <prvHeapInit+0xb8>)
 800a962:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a964:	683b      	ldr	r3, [r7, #0]
 800a966:	685b      	ldr	r3, [r3, #4]
 800a968:	4a09      	ldr	r2, [pc, #36]	; (800a990 <prvHeapInit+0xbc>)
 800a96a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a96c:	4b09      	ldr	r3, [pc, #36]	; (800a994 <prvHeapInit+0xc0>)
 800a96e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a972:	601a      	str	r2, [r3, #0]
}
 800a974:	bf00      	nop
 800a976:	3714      	adds	r7, #20
 800a978:	46bd      	mov	sp, r7
 800a97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a97e:	4770      	bx	lr
 800a980:	20000f60 	.word	0x20000f60
 800a984:	20001b18 	.word	0x20001b18
 800a988:	20001b20 	.word	0x20001b20
 800a98c:	20001b28 	.word	0x20001b28
 800a990:	20001b24 	.word	0x20001b24
 800a994:	20001b34 	.word	0x20001b34

0800a998 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a998:	b480      	push	{r7}
 800a99a:	b085      	sub	sp, #20
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a9a0:	4b28      	ldr	r3, [pc, #160]	; (800aa44 <prvInsertBlockIntoFreeList+0xac>)
 800a9a2:	60fb      	str	r3, [r7, #12]
 800a9a4:	e002      	b.n	800a9ac <prvInsertBlockIntoFreeList+0x14>
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	60fb      	str	r3, [r7, #12]
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	687a      	ldr	r2, [r7, #4]
 800a9b2:	429a      	cmp	r2, r3
 800a9b4:	d8f7      	bhi.n	800a9a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	685b      	ldr	r3, [r3, #4]
 800a9be:	68ba      	ldr	r2, [r7, #8]
 800a9c0:	4413      	add	r3, r2
 800a9c2:	687a      	ldr	r2, [r7, #4]
 800a9c4:	429a      	cmp	r2, r3
 800a9c6:	d108      	bne.n	800a9da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	685a      	ldr	r2, [r3, #4]
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	685b      	ldr	r3, [r3, #4]
 800a9d0:	441a      	add	r2, r3
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	685b      	ldr	r3, [r3, #4]
 800a9e2:	68ba      	ldr	r2, [r7, #8]
 800a9e4:	441a      	add	r2, r3
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	429a      	cmp	r2, r3
 800a9ec:	d118      	bne.n	800aa20 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	681a      	ldr	r2, [r3, #0]
 800a9f2:	4b15      	ldr	r3, [pc, #84]	; (800aa48 <prvInsertBlockIntoFreeList+0xb0>)
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	429a      	cmp	r2, r3
 800a9f8:	d00d      	beq.n	800aa16 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	685a      	ldr	r2, [r3, #4]
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	685b      	ldr	r3, [r3, #4]
 800aa04:	441a      	add	r2, r3
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	681a      	ldr	r2, [r3, #0]
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	601a      	str	r2, [r3, #0]
 800aa14:	e008      	b.n	800aa28 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800aa16:	4b0c      	ldr	r3, [pc, #48]	; (800aa48 <prvInsertBlockIntoFreeList+0xb0>)
 800aa18:	681a      	ldr	r2, [r3, #0]
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	601a      	str	r2, [r3, #0]
 800aa1e:	e003      	b.n	800aa28 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	681a      	ldr	r2, [r3, #0]
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800aa28:	68fa      	ldr	r2, [r7, #12]
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	429a      	cmp	r2, r3
 800aa2e:	d002      	beq.n	800aa36 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	687a      	ldr	r2, [r7, #4]
 800aa34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800aa36:	bf00      	nop
 800aa38:	3714      	adds	r7, #20
 800aa3a:	46bd      	mov	sp, r7
 800aa3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa40:	4770      	bx	lr
 800aa42:	bf00      	nop
 800aa44:	20001b18 	.word	0x20001b18
 800aa48:	20001b20 	.word	0x20001b20

0800aa4c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800aa4c:	b580      	push	{r7, lr}
 800aa4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800aa50:	2200      	movs	r2, #0
 800aa52:	490e      	ldr	r1, [pc, #56]	; (800aa8c <MX_USB_DEVICE_Init+0x40>)
 800aa54:	480e      	ldr	r0, [pc, #56]	; (800aa90 <MX_USB_DEVICE_Init+0x44>)
 800aa56:	f7fb ff6f 	bl	8006938 <USBD_Init>
 800aa5a:	4603      	mov	r3, r0
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d001      	beq.n	800aa64 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800aa60:	f7f6 f928 	bl	8000cb4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 800aa64:	490b      	ldr	r1, [pc, #44]	; (800aa94 <MX_USB_DEVICE_Init+0x48>)
 800aa66:	480a      	ldr	r0, [pc, #40]	; (800aa90 <MX_USB_DEVICE_Init+0x44>)
 800aa68:	f7fb ff96 	bl	8006998 <USBD_RegisterClass>
 800aa6c:	4603      	mov	r3, r0
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d001      	beq.n	800aa76 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800aa72:	f7f6 f91f 	bl	8000cb4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800aa76:	4806      	ldr	r0, [pc, #24]	; (800aa90 <MX_USB_DEVICE_Init+0x44>)
 800aa78:	f7fb ffc4 	bl	8006a04 <USBD_Start>
 800aa7c:	4603      	mov	r3, r0
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d001      	beq.n	800aa86 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 800aa82:	f7f6 f917 	bl	8000cb4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800aa86:	bf00      	nop
 800aa88:	bd80      	pop	{r7, pc}
 800aa8a:	bf00      	nop
 800aa8c:	200000d0 	.word	0x200000d0
 800aa90:	20001b38 	.word	0x20001b38
 800aa94:	2000000c 	.word	0x2000000c

0800aa98 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa98:	b480      	push	{r7}
 800aa9a:	b083      	sub	sp, #12
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	4603      	mov	r3, r0
 800aaa0:	6039      	str	r1, [r7, #0]
 800aaa2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800aaa4:	683b      	ldr	r3, [r7, #0]
 800aaa6:	2212      	movs	r2, #18
 800aaa8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800aaaa:	4b03      	ldr	r3, [pc, #12]	; (800aab8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800aaac:	4618      	mov	r0, r3
 800aaae:	370c      	adds	r7, #12
 800aab0:	46bd      	mov	sp, r7
 800aab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab6:	4770      	bx	lr
 800aab8:	200000f0 	.word	0x200000f0

0800aabc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aabc:	b480      	push	{r7}
 800aabe:	b083      	sub	sp, #12
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	4603      	mov	r3, r0
 800aac4:	6039      	str	r1, [r7, #0]
 800aac6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800aac8:	683b      	ldr	r3, [r7, #0]
 800aaca:	2204      	movs	r2, #4
 800aacc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800aace:	4b03      	ldr	r3, [pc, #12]	; (800aadc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800aad0:	4618      	mov	r0, r3
 800aad2:	370c      	adds	r7, #12
 800aad4:	46bd      	mov	sp, r7
 800aad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aada:	4770      	bx	lr
 800aadc:	20000110 	.word	0x20000110

0800aae0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aae0:	b580      	push	{r7, lr}
 800aae2:	b082      	sub	sp, #8
 800aae4:	af00      	add	r7, sp, #0
 800aae6:	4603      	mov	r3, r0
 800aae8:	6039      	str	r1, [r7, #0]
 800aaea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800aaec:	79fb      	ldrb	r3, [r7, #7]
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d105      	bne.n	800aafe <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800aaf2:	683a      	ldr	r2, [r7, #0]
 800aaf4:	4907      	ldr	r1, [pc, #28]	; (800ab14 <USBD_FS_ProductStrDescriptor+0x34>)
 800aaf6:	4808      	ldr	r0, [pc, #32]	; (800ab18 <USBD_FS_ProductStrDescriptor+0x38>)
 800aaf8:	f7fd f960 	bl	8007dbc <USBD_GetString>
 800aafc:	e004      	b.n	800ab08 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800aafe:	683a      	ldr	r2, [r7, #0]
 800ab00:	4904      	ldr	r1, [pc, #16]	; (800ab14 <USBD_FS_ProductStrDescriptor+0x34>)
 800ab02:	4805      	ldr	r0, [pc, #20]	; (800ab18 <USBD_FS_ProductStrDescriptor+0x38>)
 800ab04:	f7fd f95a 	bl	8007dbc <USBD_GetString>
  }
  return USBD_StrDesc;
 800ab08:	4b02      	ldr	r3, [pc, #8]	; (800ab14 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	3708      	adds	r7, #8
 800ab0e:	46bd      	mov	sp, r7
 800ab10:	bd80      	pop	{r7, pc}
 800ab12:	bf00      	nop
 800ab14:	20001e14 	.word	0x20001e14
 800ab18:	0800b620 	.word	0x0800b620

0800ab1c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ab1c:	b580      	push	{r7, lr}
 800ab1e:	b082      	sub	sp, #8
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	4603      	mov	r3, r0
 800ab24:	6039      	str	r1, [r7, #0]
 800ab26:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ab28:	683a      	ldr	r2, [r7, #0]
 800ab2a:	4904      	ldr	r1, [pc, #16]	; (800ab3c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800ab2c:	4804      	ldr	r0, [pc, #16]	; (800ab40 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800ab2e:	f7fd f945 	bl	8007dbc <USBD_GetString>
  return USBD_StrDesc;
 800ab32:	4b02      	ldr	r3, [pc, #8]	; (800ab3c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800ab34:	4618      	mov	r0, r3
 800ab36:	3708      	adds	r7, #8
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	bd80      	pop	{r7, pc}
 800ab3c:	20001e14 	.word	0x20001e14
 800ab40:	0800b638 	.word	0x0800b638

0800ab44 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ab44:	b580      	push	{r7, lr}
 800ab46:	b082      	sub	sp, #8
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	4603      	mov	r3, r0
 800ab4c:	6039      	str	r1, [r7, #0]
 800ab4e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ab50:	683b      	ldr	r3, [r7, #0]
 800ab52:	221a      	movs	r2, #26
 800ab54:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ab56:	f000 f855 	bl	800ac04 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800ab5a:	4b02      	ldr	r3, [pc, #8]	; (800ab64 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800ab5c:	4618      	mov	r0, r3
 800ab5e:	3708      	adds	r7, #8
 800ab60:	46bd      	mov	sp, r7
 800ab62:	bd80      	pop	{r7, pc}
 800ab64:	20000114 	.word	0x20000114

0800ab68 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ab68:	b580      	push	{r7, lr}
 800ab6a:	b082      	sub	sp, #8
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	4603      	mov	r3, r0
 800ab70:	6039      	str	r1, [r7, #0]
 800ab72:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ab74:	79fb      	ldrb	r3, [r7, #7]
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d105      	bne.n	800ab86 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ab7a:	683a      	ldr	r2, [r7, #0]
 800ab7c:	4907      	ldr	r1, [pc, #28]	; (800ab9c <USBD_FS_ConfigStrDescriptor+0x34>)
 800ab7e:	4808      	ldr	r0, [pc, #32]	; (800aba0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ab80:	f7fd f91c 	bl	8007dbc <USBD_GetString>
 800ab84:	e004      	b.n	800ab90 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ab86:	683a      	ldr	r2, [r7, #0]
 800ab88:	4904      	ldr	r1, [pc, #16]	; (800ab9c <USBD_FS_ConfigStrDescriptor+0x34>)
 800ab8a:	4805      	ldr	r0, [pc, #20]	; (800aba0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ab8c:	f7fd f916 	bl	8007dbc <USBD_GetString>
  }
  return USBD_StrDesc;
 800ab90:	4b02      	ldr	r3, [pc, #8]	; (800ab9c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800ab92:	4618      	mov	r0, r3
 800ab94:	3708      	adds	r7, #8
 800ab96:	46bd      	mov	sp, r7
 800ab98:	bd80      	pop	{r7, pc}
 800ab9a:	bf00      	nop
 800ab9c:	20001e14 	.word	0x20001e14
 800aba0:	0800b64c 	.word	0x0800b64c

0800aba4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aba4:	b580      	push	{r7, lr}
 800aba6:	b082      	sub	sp, #8
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	4603      	mov	r3, r0
 800abac:	6039      	str	r1, [r7, #0]
 800abae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800abb0:	79fb      	ldrb	r3, [r7, #7]
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d105      	bne.n	800abc2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800abb6:	683a      	ldr	r2, [r7, #0]
 800abb8:	4907      	ldr	r1, [pc, #28]	; (800abd8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800abba:	4808      	ldr	r0, [pc, #32]	; (800abdc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800abbc:	f7fd f8fe 	bl	8007dbc <USBD_GetString>
 800abc0:	e004      	b.n	800abcc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800abc2:	683a      	ldr	r2, [r7, #0]
 800abc4:	4904      	ldr	r1, [pc, #16]	; (800abd8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800abc6:	4805      	ldr	r0, [pc, #20]	; (800abdc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800abc8:	f7fd f8f8 	bl	8007dbc <USBD_GetString>
  }
  return USBD_StrDesc;
 800abcc:	4b02      	ldr	r3, [pc, #8]	; (800abd8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800abce:	4618      	mov	r0, r3
 800abd0:	3708      	adds	r7, #8
 800abd2:	46bd      	mov	sp, r7
 800abd4:	bd80      	pop	{r7, pc}
 800abd6:	bf00      	nop
 800abd8:	20001e14 	.word	0x20001e14
 800abdc:	0800b658 	.word	0x0800b658

0800abe0 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800abe0:	b480      	push	{r7}
 800abe2:	b083      	sub	sp, #12
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	4603      	mov	r3, r0
 800abe8:	6039      	str	r1, [r7, #0]
 800abea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800abec:	683b      	ldr	r3, [r7, #0]
 800abee:	220c      	movs	r2, #12
 800abf0:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800abf2:	4b03      	ldr	r3, [pc, #12]	; (800ac00 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800abf4:	4618      	mov	r0, r3
 800abf6:	370c      	adds	r7, #12
 800abf8:	46bd      	mov	sp, r7
 800abfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abfe:	4770      	bx	lr
 800ac00:	20000104 	.word	0x20000104

0800ac04 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ac04:	b580      	push	{r7, lr}
 800ac06:	b084      	sub	sp, #16
 800ac08:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ac0a:	4b0f      	ldr	r3, [pc, #60]	; (800ac48 <Get_SerialNum+0x44>)
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ac10:	4b0e      	ldr	r3, [pc, #56]	; (800ac4c <Get_SerialNum+0x48>)
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ac16:	4b0e      	ldr	r3, [pc, #56]	; (800ac50 <Get_SerialNum+0x4c>)
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ac1c:	68fa      	ldr	r2, [r7, #12]
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	4413      	add	r3, r2
 800ac22:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d009      	beq.n	800ac3e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ac2a:	2208      	movs	r2, #8
 800ac2c:	4909      	ldr	r1, [pc, #36]	; (800ac54 <Get_SerialNum+0x50>)
 800ac2e:	68f8      	ldr	r0, [r7, #12]
 800ac30:	f000 f814 	bl	800ac5c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ac34:	2204      	movs	r2, #4
 800ac36:	4908      	ldr	r1, [pc, #32]	; (800ac58 <Get_SerialNum+0x54>)
 800ac38:	68b8      	ldr	r0, [r7, #8]
 800ac3a:	f000 f80f 	bl	800ac5c <IntToUnicode>
  }
}
 800ac3e:	bf00      	nop
 800ac40:	3710      	adds	r7, #16
 800ac42:	46bd      	mov	sp, r7
 800ac44:	bd80      	pop	{r7, pc}
 800ac46:	bf00      	nop
 800ac48:	1fff7590 	.word	0x1fff7590
 800ac4c:	1fff7594 	.word	0x1fff7594
 800ac50:	1fff7598 	.word	0x1fff7598
 800ac54:	20000116 	.word	0x20000116
 800ac58:	20000126 	.word	0x20000126

0800ac5c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ac5c:	b480      	push	{r7}
 800ac5e:	b087      	sub	sp, #28
 800ac60:	af00      	add	r7, sp, #0
 800ac62:	60f8      	str	r0, [r7, #12]
 800ac64:	60b9      	str	r1, [r7, #8]
 800ac66:	4613      	mov	r3, r2
 800ac68:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ac6a:	2300      	movs	r3, #0
 800ac6c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ac6e:	2300      	movs	r3, #0
 800ac70:	75fb      	strb	r3, [r7, #23]
 800ac72:	e027      	b.n	800acc4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	0f1b      	lsrs	r3, r3, #28
 800ac78:	2b09      	cmp	r3, #9
 800ac7a:	d80b      	bhi.n	800ac94 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	0f1b      	lsrs	r3, r3, #28
 800ac80:	b2da      	uxtb	r2, r3
 800ac82:	7dfb      	ldrb	r3, [r7, #23]
 800ac84:	005b      	lsls	r3, r3, #1
 800ac86:	4619      	mov	r1, r3
 800ac88:	68bb      	ldr	r3, [r7, #8]
 800ac8a:	440b      	add	r3, r1
 800ac8c:	3230      	adds	r2, #48	; 0x30
 800ac8e:	b2d2      	uxtb	r2, r2
 800ac90:	701a      	strb	r2, [r3, #0]
 800ac92:	e00a      	b.n	800acaa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	0f1b      	lsrs	r3, r3, #28
 800ac98:	b2da      	uxtb	r2, r3
 800ac9a:	7dfb      	ldrb	r3, [r7, #23]
 800ac9c:	005b      	lsls	r3, r3, #1
 800ac9e:	4619      	mov	r1, r3
 800aca0:	68bb      	ldr	r3, [r7, #8]
 800aca2:	440b      	add	r3, r1
 800aca4:	3237      	adds	r2, #55	; 0x37
 800aca6:	b2d2      	uxtb	r2, r2
 800aca8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	011b      	lsls	r3, r3, #4
 800acae:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800acb0:	7dfb      	ldrb	r3, [r7, #23]
 800acb2:	005b      	lsls	r3, r3, #1
 800acb4:	3301      	adds	r3, #1
 800acb6:	68ba      	ldr	r2, [r7, #8]
 800acb8:	4413      	add	r3, r2
 800acba:	2200      	movs	r2, #0
 800acbc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800acbe:	7dfb      	ldrb	r3, [r7, #23]
 800acc0:	3301      	adds	r3, #1
 800acc2:	75fb      	strb	r3, [r7, #23]
 800acc4:	7dfa      	ldrb	r2, [r7, #23]
 800acc6:	79fb      	ldrb	r3, [r7, #7]
 800acc8:	429a      	cmp	r2, r3
 800acca:	d3d3      	bcc.n	800ac74 <IntToUnicode+0x18>
  }
}
 800accc:	bf00      	nop
 800acce:	bf00      	nop
 800acd0:	371c      	adds	r7, #28
 800acd2:	46bd      	mov	sp, r7
 800acd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd8:	4770      	bx	lr
	...

0800acdc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800acdc:	b580      	push	{r7, lr}
 800acde:	b0ae      	sub	sp, #184	; 0xb8
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ace4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800ace8:	2200      	movs	r2, #0
 800acea:	601a      	str	r2, [r3, #0]
 800acec:	605a      	str	r2, [r3, #4]
 800acee:	609a      	str	r2, [r3, #8]
 800acf0:	60da      	str	r2, [r3, #12]
 800acf2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800acf4:	f107 0318 	add.w	r3, r7, #24
 800acf8:	228c      	movs	r2, #140	; 0x8c
 800acfa:	2100      	movs	r1, #0
 800acfc:	4618      	mov	r0, r3
 800acfe:	f000 fc2f 	bl	800b560 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ad0a:	f040 8085 	bne.w	800ae18 <HAL_PCD_MspInit+0x13c>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800ad0e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ad12:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800ad14:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800ad18:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800ad1c:	2301      	movs	r3, #1
 800ad1e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800ad20:	2301      	movs	r3, #1
 800ad22:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800ad24:	2318      	movs	r3, #24
 800ad26:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 800ad28:	2302      	movs	r3, #2
 800ad2a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800ad2c:	2302      	movs	r3, #2
 800ad2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800ad30:	2302      	movs	r3, #2
 800ad32:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800ad34:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800ad38:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800ad3a:	f107 0318 	add.w	r3, r7, #24
 800ad3e:	4618      	mov	r0, r3
 800ad40:	f7f8 fc9c 	bl	800367c <HAL_RCCEx_PeriphCLKConfig>
 800ad44:	4603      	mov	r3, r0
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d001      	beq.n	800ad4e <HAL_PCD_MspInit+0x72>
    {
      Error_Handler();
 800ad4a:	f7f5 ffb3 	bl	8000cb4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ad4e:	4b34      	ldr	r3, [pc, #208]	; (800ae20 <HAL_PCD_MspInit+0x144>)
 800ad50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ad52:	4a33      	ldr	r2, [pc, #204]	; (800ae20 <HAL_PCD_MspInit+0x144>)
 800ad54:	f043 0301 	orr.w	r3, r3, #1
 800ad58:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ad5a:	4b31      	ldr	r3, [pc, #196]	; (800ae20 <HAL_PCD_MspInit+0x144>)
 800ad5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ad5e:	f003 0301 	and.w	r3, r3, #1
 800ad62:	617b      	str	r3, [r7, #20]
 800ad64:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800ad66:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800ad6a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ad6e:	2302      	movs	r3, #2
 800ad70:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ad74:	2300      	movs	r3, #0
 800ad76:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ad7a:	2303      	movs	r3, #3
 800ad7c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ad80:	230a      	movs	r3, #10
 800ad82:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ad86:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800ad8a:	4619      	mov	r1, r3
 800ad8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800ad90:	f7f6 fa50 	bl	8001234 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800ad94:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ad98:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ad9c:	2300      	movs	r3, #0
 800ad9e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ada2:	2300      	movs	r3, #0
 800ada4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800ada8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800adac:	4619      	mov	r1, r3
 800adae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800adb2:	f7f6 fa3f 	bl	8001234 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800adb6:	4b1a      	ldr	r3, [pc, #104]	; (800ae20 <HAL_PCD_MspInit+0x144>)
 800adb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800adba:	4a19      	ldr	r2, [pc, #100]	; (800ae20 <HAL_PCD_MspInit+0x144>)
 800adbc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800adc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 800adc2:	4b17      	ldr	r3, [pc, #92]	; (800ae20 <HAL_PCD_MspInit+0x144>)
 800adc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800adc6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800adca:	613b      	str	r3, [r7, #16]
 800adcc:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800adce:	4b14      	ldr	r3, [pc, #80]	; (800ae20 <HAL_PCD_MspInit+0x144>)
 800add0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800add2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800add6:	2b00      	cmp	r3, #0
 800add8:	d114      	bne.n	800ae04 <HAL_PCD_MspInit+0x128>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800adda:	4b11      	ldr	r3, [pc, #68]	; (800ae20 <HAL_PCD_MspInit+0x144>)
 800addc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800adde:	4a10      	ldr	r2, [pc, #64]	; (800ae20 <HAL_PCD_MspInit+0x144>)
 800ade0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ade4:	6593      	str	r3, [r2, #88]	; 0x58
 800ade6:	4b0e      	ldr	r3, [pc, #56]	; (800ae20 <HAL_PCD_MspInit+0x144>)
 800ade8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800adea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800adee:	60fb      	str	r3, [r7, #12]
 800adf0:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 800adf2:	f7f7 fde5 	bl	80029c0 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800adf6:	4b0a      	ldr	r3, [pc, #40]	; (800ae20 <HAL_PCD_MspInit+0x144>)
 800adf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800adfa:	4a09      	ldr	r2, [pc, #36]	; (800ae20 <HAL_PCD_MspInit+0x144>)
 800adfc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ae00:	6593      	str	r3, [r2, #88]	; 0x58
 800ae02:	e001      	b.n	800ae08 <HAL_PCD_MspInit+0x12c>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800ae04:	f7f7 fddc 	bl	80029c0 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800ae08:	2200      	movs	r2, #0
 800ae0a:	2105      	movs	r1, #5
 800ae0c:	2043      	movs	r0, #67	; 0x43
 800ae0e:	f7f6 f9da 	bl	80011c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ae12:	2043      	movs	r0, #67	; 0x43
 800ae14:	f7f6 f9f3 	bl	80011fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800ae18:	bf00      	nop
 800ae1a:	37b8      	adds	r7, #184	; 0xb8
 800ae1c:	46bd      	mov	sp, r7
 800ae1e:	bd80      	pop	{r7, pc}
 800ae20:	40021000 	.word	0x40021000

0800ae24 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae24:	b580      	push	{r7, lr}
 800ae26:	b082      	sub	sp, #8
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800ae38:	4619      	mov	r1, r3
 800ae3a:	4610      	mov	r0, r2
 800ae3c:	f7fb fe2f 	bl	8006a9e <USBD_LL_SetupStage>
}
 800ae40:	bf00      	nop
 800ae42:	3708      	adds	r7, #8
 800ae44:	46bd      	mov	sp, r7
 800ae46:	bd80      	pop	{r7, pc}

0800ae48 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae48:	b580      	push	{r7, lr}
 800ae4a:	b082      	sub	sp, #8
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	6078      	str	r0, [r7, #4]
 800ae50:	460b      	mov	r3, r1
 800ae52:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800ae5a:	78fa      	ldrb	r2, [r7, #3]
 800ae5c:	6879      	ldr	r1, [r7, #4]
 800ae5e:	4613      	mov	r3, r2
 800ae60:	00db      	lsls	r3, r3, #3
 800ae62:	4413      	add	r3, r2
 800ae64:	009b      	lsls	r3, r3, #2
 800ae66:	440b      	add	r3, r1
 800ae68:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800ae6c:	681a      	ldr	r2, [r3, #0]
 800ae6e:	78fb      	ldrb	r3, [r7, #3]
 800ae70:	4619      	mov	r1, r3
 800ae72:	f7fb fe69 	bl	8006b48 <USBD_LL_DataOutStage>
}
 800ae76:	bf00      	nop
 800ae78:	3708      	adds	r7, #8
 800ae7a:	46bd      	mov	sp, r7
 800ae7c:	bd80      	pop	{r7, pc}

0800ae7e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae7e:	b580      	push	{r7, lr}
 800ae80:	b082      	sub	sp, #8
 800ae82:	af00      	add	r7, sp, #0
 800ae84:	6078      	str	r0, [r7, #4]
 800ae86:	460b      	mov	r3, r1
 800ae88:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800ae90:	78fa      	ldrb	r2, [r7, #3]
 800ae92:	6879      	ldr	r1, [r7, #4]
 800ae94:	4613      	mov	r3, r2
 800ae96:	00db      	lsls	r3, r3, #3
 800ae98:	4413      	add	r3, r2
 800ae9a:	009b      	lsls	r3, r3, #2
 800ae9c:	440b      	add	r3, r1
 800ae9e:	3348      	adds	r3, #72	; 0x48
 800aea0:	681a      	ldr	r2, [r3, #0]
 800aea2:	78fb      	ldrb	r3, [r7, #3]
 800aea4:	4619      	mov	r1, r3
 800aea6:	f7fb ff02 	bl	8006cae <USBD_LL_DataInStage>
}
 800aeaa:	bf00      	nop
 800aeac:	3708      	adds	r7, #8
 800aeae:	46bd      	mov	sp, r7
 800aeb0:	bd80      	pop	{r7, pc}

0800aeb2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aeb2:	b580      	push	{r7, lr}
 800aeb4:	b082      	sub	sp, #8
 800aeb6:	af00      	add	r7, sp, #0
 800aeb8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800aec0:	4618      	mov	r0, r3
 800aec2:	f7fc f83c 	bl	8006f3e <USBD_LL_SOF>
}
 800aec6:	bf00      	nop
 800aec8:	3708      	adds	r7, #8
 800aeca:	46bd      	mov	sp, r7
 800aecc:	bd80      	pop	{r7, pc}

0800aece <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aece:	b580      	push	{r7, lr}
 800aed0:	b084      	sub	sp, #16
 800aed2:	af00      	add	r7, sp, #0
 800aed4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800aed6:	2301      	movs	r3, #1
 800aed8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	691b      	ldr	r3, [r3, #16]
 800aede:	2b02      	cmp	r3, #2
 800aee0:	d001      	beq.n	800aee6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800aee2:	f7f5 fee7 	bl	8000cb4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800aeec:	7bfa      	ldrb	r2, [r7, #15]
 800aeee:	4611      	mov	r1, r2
 800aef0:	4618      	mov	r0, r3
 800aef2:	f7fb ffe0 	bl	8006eb6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800aefc:	4618      	mov	r0, r3
 800aefe:	f7fb ff88 	bl	8006e12 <USBD_LL_Reset>
}
 800af02:	bf00      	nop
 800af04:	3710      	adds	r7, #16
 800af06:	46bd      	mov	sp, r7
 800af08:	bd80      	pop	{r7, pc}
	...

0800af0c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800af0c:	b580      	push	{r7, lr}
 800af0e:	b082      	sub	sp, #8
 800af10:	af00      	add	r7, sp, #0
 800af12:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	687a      	ldr	r2, [r7, #4]
 800af20:	6812      	ldr	r2, [r2, #0]
 800af22:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800af26:	f043 0301 	orr.w	r3, r3, #1
 800af2a:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800af32:	4618      	mov	r0, r3
 800af34:	f7fb ffcf 	bl	8006ed6 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	6a1b      	ldr	r3, [r3, #32]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d005      	beq.n	800af4c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800af40:	4b04      	ldr	r3, [pc, #16]	; (800af54 <HAL_PCD_SuspendCallback+0x48>)
 800af42:	691b      	ldr	r3, [r3, #16]
 800af44:	4a03      	ldr	r2, [pc, #12]	; (800af54 <HAL_PCD_SuspendCallback+0x48>)
 800af46:	f043 0306 	orr.w	r3, r3, #6
 800af4a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800af4c:	bf00      	nop
 800af4e:	3708      	adds	r7, #8
 800af50:	46bd      	mov	sp, r7
 800af52:	bd80      	pop	{r7, pc}
 800af54:	e000ed00 	.word	0xe000ed00

0800af58 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800af58:	b580      	push	{r7, lr}
 800af5a:	b082      	sub	sp, #8
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	687a      	ldr	r2, [r7, #4]
 800af6c:	6812      	ldr	r2, [r2, #0]
 800af6e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800af72:	f023 0301 	bic.w	r3, r3, #1
 800af76:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	6a1b      	ldr	r3, [r3, #32]
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d007      	beq.n	800af90 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800af80:	4b08      	ldr	r3, [pc, #32]	; (800afa4 <HAL_PCD_ResumeCallback+0x4c>)
 800af82:	691b      	ldr	r3, [r3, #16]
 800af84:	4a07      	ldr	r2, [pc, #28]	; (800afa4 <HAL_PCD_ResumeCallback+0x4c>)
 800af86:	f023 0306 	bic.w	r3, r3, #6
 800af8a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800af8c:	f000 fae2 	bl	800b554 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800af96:	4618      	mov	r0, r3
 800af98:	f7fb ffb9 	bl	8006f0e <USBD_LL_Resume>
}
 800af9c:	bf00      	nop
 800af9e:	3708      	adds	r7, #8
 800afa0:	46bd      	mov	sp, r7
 800afa2:	bd80      	pop	{r7, pc}
 800afa4:	e000ed00 	.word	0xe000ed00

0800afa8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800afa8:	b580      	push	{r7, lr}
 800afaa:	b082      	sub	sp, #8
 800afac:	af00      	add	r7, sp, #0
 800afae:	6078      	str	r0, [r7, #4]
 800afb0:	460b      	mov	r3, r1
 800afb2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800afba:	78fa      	ldrb	r2, [r7, #3]
 800afbc:	4611      	mov	r1, r2
 800afbe:	4618      	mov	r0, r3
 800afc0:	f7fc f80f 	bl	8006fe2 <USBD_LL_IsoOUTIncomplete>
}
 800afc4:	bf00      	nop
 800afc6:	3708      	adds	r7, #8
 800afc8:	46bd      	mov	sp, r7
 800afca:	bd80      	pop	{r7, pc}

0800afcc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800afcc:	b580      	push	{r7, lr}
 800afce:	b082      	sub	sp, #8
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	6078      	str	r0, [r7, #4]
 800afd4:	460b      	mov	r3, r1
 800afd6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800afde:	78fa      	ldrb	r2, [r7, #3]
 800afe0:	4611      	mov	r1, r2
 800afe2:	4618      	mov	r0, r3
 800afe4:	f7fb ffcb 	bl	8006f7e <USBD_LL_IsoINIncomplete>
}
 800afe8:	bf00      	nop
 800afea:	3708      	adds	r7, #8
 800afec:	46bd      	mov	sp, r7
 800afee:	bd80      	pop	{r7, pc}

0800aff0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aff0:	b580      	push	{r7, lr}
 800aff2:	b082      	sub	sp, #8
 800aff4:	af00      	add	r7, sp, #0
 800aff6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800affe:	4618      	mov	r0, r3
 800b000:	f7fc f821 	bl	8007046 <USBD_LL_DevConnected>
}
 800b004:	bf00      	nop
 800b006:	3708      	adds	r7, #8
 800b008:	46bd      	mov	sp, r7
 800b00a:	bd80      	pop	{r7, pc}

0800b00c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b00c:	b580      	push	{r7, lr}
 800b00e:	b082      	sub	sp, #8
 800b010:	af00      	add	r7, sp, #0
 800b012:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b01a:	4618      	mov	r0, r3
 800b01c:	f7fc f81e 	bl	800705c <USBD_LL_DevDisconnected>
}
 800b020:	bf00      	nop
 800b022:	3708      	adds	r7, #8
 800b024:	46bd      	mov	sp, r7
 800b026:	bd80      	pop	{r7, pc}

0800b028 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b028:	b580      	push	{r7, lr}
 800b02a:	b082      	sub	sp, #8
 800b02c:	af00      	add	r7, sp, #0
 800b02e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	781b      	ldrb	r3, [r3, #0]
 800b034:	2b00      	cmp	r3, #0
 800b036:	d13c      	bne.n	800b0b2 <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800b038:	4a20      	ldr	r2, [pc, #128]	; (800b0bc <USBD_LL_Init+0x94>)
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	4a1e      	ldr	r2, [pc, #120]	; (800b0bc <USBD_LL_Init+0x94>)
 800b044:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b048:	4b1c      	ldr	r3, [pc, #112]	; (800b0bc <USBD_LL_Init+0x94>)
 800b04a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800b04e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800b050:	4b1a      	ldr	r3, [pc, #104]	; (800b0bc <USBD_LL_Init+0x94>)
 800b052:	2206      	movs	r2, #6
 800b054:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800b056:	4b19      	ldr	r3, [pc, #100]	; (800b0bc <USBD_LL_Init+0x94>)
 800b058:	2202      	movs	r2, #2
 800b05a:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b05c:	4b17      	ldr	r3, [pc, #92]	; (800b0bc <USBD_LL_Init+0x94>)
 800b05e:	2202      	movs	r2, #2
 800b060:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800b062:	4b16      	ldr	r3, [pc, #88]	; (800b0bc <USBD_LL_Init+0x94>)
 800b064:	2201      	movs	r2, #1
 800b066:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800b068:	4b14      	ldr	r3, [pc, #80]	; (800b0bc <USBD_LL_Init+0x94>)
 800b06a:	2200      	movs	r2, #0
 800b06c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800b06e:	4b13      	ldr	r3, [pc, #76]	; (800b0bc <USBD_LL_Init+0x94>)
 800b070:	2200      	movs	r2, #0
 800b072:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 800b074:	4b11      	ldr	r3, [pc, #68]	; (800b0bc <USBD_LL_Init+0x94>)
 800b076:	2201      	movs	r2, #1
 800b078:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800b07a:	4b10      	ldr	r3, [pc, #64]	; (800b0bc <USBD_LL_Init+0x94>)
 800b07c:	2200      	movs	r2, #0
 800b07e:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800b080:	4b0e      	ldr	r3, [pc, #56]	; (800b0bc <USBD_LL_Init+0x94>)
 800b082:	2201      	movs	r2, #1
 800b084:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800b086:	480d      	ldr	r0, [pc, #52]	; (800b0bc <USBD_LL_Init+0x94>)
 800b088:	f7f6 fa96 	bl	80015b8 <HAL_PCD_Init>
 800b08c:	4603      	mov	r3, r0
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d001      	beq.n	800b096 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800b092:	f7f5 fe0f 	bl	8000cb4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800b096:	2180      	movs	r1, #128	; 0x80
 800b098:	4808      	ldr	r0, [pc, #32]	; (800b0bc <USBD_LL_Init+0x94>)
 800b09a:	f7f7 fbe8 	bl	800286e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800b09e:	2240      	movs	r2, #64	; 0x40
 800b0a0:	2100      	movs	r1, #0
 800b0a2:	4806      	ldr	r0, [pc, #24]	; (800b0bc <USBD_LL_Init+0x94>)
 800b0a4:	f7f7 fb9c 	bl	80027e0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800b0a8:	2280      	movs	r2, #128	; 0x80
 800b0aa:	2101      	movs	r1, #1
 800b0ac:	4803      	ldr	r0, [pc, #12]	; (800b0bc <USBD_LL_Init+0x94>)
 800b0ae:	f7f7 fb97 	bl	80027e0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800b0b2:	2300      	movs	r3, #0
}
 800b0b4:	4618      	mov	r0, r3
 800b0b6:	3708      	adds	r7, #8
 800b0b8:	46bd      	mov	sp, r7
 800b0ba:	bd80      	pop	{r7, pc}
 800b0bc:	20002014 	.word	0x20002014

0800b0c0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b0c0:	b580      	push	{r7, lr}
 800b0c2:	b084      	sub	sp, #16
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b0c8:	2300      	movs	r3, #0
 800b0ca:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b0cc:	2300      	movs	r3, #0
 800b0ce:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b0d6:	4618      	mov	r0, r3
 800b0d8:	f7f6 fb92 	bl	8001800 <HAL_PCD_Start>
 800b0dc:	4603      	mov	r3, r0
 800b0de:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800b0e0:	7bbb      	ldrb	r3, [r7, #14]
 800b0e2:	2b03      	cmp	r3, #3
 800b0e4:	d816      	bhi.n	800b114 <USBD_LL_Start+0x54>
 800b0e6:	a201      	add	r2, pc, #4	; (adr r2, 800b0ec <USBD_LL_Start+0x2c>)
 800b0e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0ec:	0800b0fd 	.word	0x0800b0fd
 800b0f0:	0800b103 	.word	0x0800b103
 800b0f4:	0800b109 	.word	0x0800b109
 800b0f8:	0800b10f 	.word	0x0800b10f
    case HAL_OK :
      usb_status = USBD_OK;
 800b0fc:	2300      	movs	r3, #0
 800b0fe:	73fb      	strb	r3, [r7, #15]
    break;
 800b100:	e00b      	b.n	800b11a <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b102:	2303      	movs	r3, #3
 800b104:	73fb      	strb	r3, [r7, #15]
    break;
 800b106:	e008      	b.n	800b11a <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b108:	2301      	movs	r3, #1
 800b10a:	73fb      	strb	r3, [r7, #15]
    break;
 800b10c:	e005      	b.n	800b11a <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b10e:	2303      	movs	r3, #3
 800b110:	73fb      	strb	r3, [r7, #15]
    break;
 800b112:	e002      	b.n	800b11a <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800b114:	2303      	movs	r3, #3
 800b116:	73fb      	strb	r3, [r7, #15]
    break;
 800b118:	bf00      	nop
  }
  return usb_status;
 800b11a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b11c:	4618      	mov	r0, r3
 800b11e:	3710      	adds	r7, #16
 800b120:	46bd      	mov	sp, r7
 800b122:	bd80      	pop	{r7, pc}

0800b124 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b124:	b580      	push	{r7, lr}
 800b126:	b084      	sub	sp, #16
 800b128:	af00      	add	r7, sp, #0
 800b12a:	6078      	str	r0, [r7, #4]
 800b12c:	4608      	mov	r0, r1
 800b12e:	4611      	mov	r1, r2
 800b130:	461a      	mov	r2, r3
 800b132:	4603      	mov	r3, r0
 800b134:	70fb      	strb	r3, [r7, #3]
 800b136:	460b      	mov	r3, r1
 800b138:	70bb      	strb	r3, [r7, #2]
 800b13a:	4613      	mov	r3, r2
 800b13c:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b13e:	2300      	movs	r3, #0
 800b140:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b142:	2300      	movs	r3, #0
 800b144:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b14c:	78bb      	ldrb	r3, [r7, #2]
 800b14e:	883a      	ldrh	r2, [r7, #0]
 800b150:	78f9      	ldrb	r1, [r7, #3]
 800b152:	f7f7 f83c 	bl	80021ce <HAL_PCD_EP_Open>
 800b156:	4603      	mov	r3, r0
 800b158:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800b15a:	7bbb      	ldrb	r3, [r7, #14]
 800b15c:	2b03      	cmp	r3, #3
 800b15e:	d817      	bhi.n	800b190 <USBD_LL_OpenEP+0x6c>
 800b160:	a201      	add	r2, pc, #4	; (adr r2, 800b168 <USBD_LL_OpenEP+0x44>)
 800b162:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b166:	bf00      	nop
 800b168:	0800b179 	.word	0x0800b179
 800b16c:	0800b17f 	.word	0x0800b17f
 800b170:	0800b185 	.word	0x0800b185
 800b174:	0800b18b 	.word	0x0800b18b
    case HAL_OK :
      usb_status = USBD_OK;
 800b178:	2300      	movs	r3, #0
 800b17a:	73fb      	strb	r3, [r7, #15]
    break;
 800b17c:	e00b      	b.n	800b196 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b17e:	2303      	movs	r3, #3
 800b180:	73fb      	strb	r3, [r7, #15]
    break;
 800b182:	e008      	b.n	800b196 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b184:	2301      	movs	r3, #1
 800b186:	73fb      	strb	r3, [r7, #15]
    break;
 800b188:	e005      	b.n	800b196 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b18a:	2303      	movs	r3, #3
 800b18c:	73fb      	strb	r3, [r7, #15]
    break;
 800b18e:	e002      	b.n	800b196 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800b190:	2303      	movs	r3, #3
 800b192:	73fb      	strb	r3, [r7, #15]
    break;
 800b194:	bf00      	nop
  }
  return usb_status;
 800b196:	7bfb      	ldrb	r3, [r7, #15]
}
 800b198:	4618      	mov	r0, r3
 800b19a:	3710      	adds	r7, #16
 800b19c:	46bd      	mov	sp, r7
 800b19e:	bd80      	pop	{r7, pc}

0800b1a0 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b1a0:	b580      	push	{r7, lr}
 800b1a2:	b084      	sub	sp, #16
 800b1a4:	af00      	add	r7, sp, #0
 800b1a6:	6078      	str	r0, [r7, #4]
 800b1a8:	460b      	mov	r3, r1
 800b1aa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b1ac:	2300      	movs	r3, #0
 800b1ae:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b1b0:	2300      	movs	r3, #0
 800b1b2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b1ba:	78fa      	ldrb	r2, [r7, #3]
 800b1bc:	4611      	mov	r1, r2
 800b1be:	4618      	mov	r0, r3
 800b1c0:	f7f7 f86d 	bl	800229e <HAL_PCD_EP_Close>
 800b1c4:	4603      	mov	r3, r0
 800b1c6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800b1c8:	7bbb      	ldrb	r3, [r7, #14]
 800b1ca:	2b03      	cmp	r3, #3
 800b1cc:	d816      	bhi.n	800b1fc <USBD_LL_CloseEP+0x5c>
 800b1ce:	a201      	add	r2, pc, #4	; (adr r2, 800b1d4 <USBD_LL_CloseEP+0x34>)
 800b1d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1d4:	0800b1e5 	.word	0x0800b1e5
 800b1d8:	0800b1eb 	.word	0x0800b1eb
 800b1dc:	0800b1f1 	.word	0x0800b1f1
 800b1e0:	0800b1f7 	.word	0x0800b1f7
    case HAL_OK :
      usb_status = USBD_OK;
 800b1e4:	2300      	movs	r3, #0
 800b1e6:	73fb      	strb	r3, [r7, #15]
    break;
 800b1e8:	e00b      	b.n	800b202 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b1ea:	2303      	movs	r3, #3
 800b1ec:	73fb      	strb	r3, [r7, #15]
    break;
 800b1ee:	e008      	b.n	800b202 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b1f0:	2301      	movs	r3, #1
 800b1f2:	73fb      	strb	r3, [r7, #15]
    break;
 800b1f4:	e005      	b.n	800b202 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b1f6:	2303      	movs	r3, #3
 800b1f8:	73fb      	strb	r3, [r7, #15]
    break;
 800b1fa:	e002      	b.n	800b202 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800b1fc:	2303      	movs	r3, #3
 800b1fe:	73fb      	strb	r3, [r7, #15]
    break;
 800b200:	bf00      	nop
  }
  return usb_status;
 800b202:	7bfb      	ldrb	r3, [r7, #15]
}
 800b204:	4618      	mov	r0, r3
 800b206:	3710      	adds	r7, #16
 800b208:	46bd      	mov	sp, r7
 800b20a:	bd80      	pop	{r7, pc}

0800b20c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b20c:	b580      	push	{r7, lr}
 800b20e:	b084      	sub	sp, #16
 800b210:	af00      	add	r7, sp, #0
 800b212:	6078      	str	r0, [r7, #4]
 800b214:	460b      	mov	r3, r1
 800b216:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b218:	2300      	movs	r3, #0
 800b21a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b21c:	2300      	movs	r3, #0
 800b21e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b226:	78fa      	ldrb	r2, [r7, #3]
 800b228:	4611      	mov	r1, r2
 800b22a:	4618      	mov	r0, r3
 800b22c:	f7f7 f8e4 	bl	80023f8 <HAL_PCD_EP_SetStall>
 800b230:	4603      	mov	r3, r0
 800b232:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800b234:	7bbb      	ldrb	r3, [r7, #14]
 800b236:	2b03      	cmp	r3, #3
 800b238:	d816      	bhi.n	800b268 <USBD_LL_StallEP+0x5c>
 800b23a:	a201      	add	r2, pc, #4	; (adr r2, 800b240 <USBD_LL_StallEP+0x34>)
 800b23c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b240:	0800b251 	.word	0x0800b251
 800b244:	0800b257 	.word	0x0800b257
 800b248:	0800b25d 	.word	0x0800b25d
 800b24c:	0800b263 	.word	0x0800b263
    case HAL_OK :
      usb_status = USBD_OK;
 800b250:	2300      	movs	r3, #0
 800b252:	73fb      	strb	r3, [r7, #15]
    break;
 800b254:	e00b      	b.n	800b26e <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b256:	2303      	movs	r3, #3
 800b258:	73fb      	strb	r3, [r7, #15]
    break;
 800b25a:	e008      	b.n	800b26e <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b25c:	2301      	movs	r3, #1
 800b25e:	73fb      	strb	r3, [r7, #15]
    break;
 800b260:	e005      	b.n	800b26e <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b262:	2303      	movs	r3, #3
 800b264:	73fb      	strb	r3, [r7, #15]
    break;
 800b266:	e002      	b.n	800b26e <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800b268:	2303      	movs	r3, #3
 800b26a:	73fb      	strb	r3, [r7, #15]
    break;
 800b26c:	bf00      	nop
  }
  return usb_status;
 800b26e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b270:	4618      	mov	r0, r3
 800b272:	3710      	adds	r7, #16
 800b274:	46bd      	mov	sp, r7
 800b276:	bd80      	pop	{r7, pc}

0800b278 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b278:	b580      	push	{r7, lr}
 800b27a:	b084      	sub	sp, #16
 800b27c:	af00      	add	r7, sp, #0
 800b27e:	6078      	str	r0, [r7, #4]
 800b280:	460b      	mov	r3, r1
 800b282:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b284:	2300      	movs	r3, #0
 800b286:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b288:	2300      	movs	r3, #0
 800b28a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b292:	78fa      	ldrb	r2, [r7, #3]
 800b294:	4611      	mov	r1, r2
 800b296:	4618      	mov	r0, r3
 800b298:	f7f7 f910 	bl	80024bc <HAL_PCD_EP_ClrStall>
 800b29c:	4603      	mov	r3, r0
 800b29e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800b2a0:	7bbb      	ldrb	r3, [r7, #14]
 800b2a2:	2b03      	cmp	r3, #3
 800b2a4:	d816      	bhi.n	800b2d4 <USBD_LL_ClearStallEP+0x5c>
 800b2a6:	a201      	add	r2, pc, #4	; (adr r2, 800b2ac <USBD_LL_ClearStallEP+0x34>)
 800b2a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2ac:	0800b2bd 	.word	0x0800b2bd
 800b2b0:	0800b2c3 	.word	0x0800b2c3
 800b2b4:	0800b2c9 	.word	0x0800b2c9
 800b2b8:	0800b2cf 	.word	0x0800b2cf
    case HAL_OK :
      usb_status = USBD_OK;
 800b2bc:	2300      	movs	r3, #0
 800b2be:	73fb      	strb	r3, [r7, #15]
    break;
 800b2c0:	e00b      	b.n	800b2da <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b2c2:	2303      	movs	r3, #3
 800b2c4:	73fb      	strb	r3, [r7, #15]
    break;
 800b2c6:	e008      	b.n	800b2da <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b2c8:	2301      	movs	r3, #1
 800b2ca:	73fb      	strb	r3, [r7, #15]
    break;
 800b2cc:	e005      	b.n	800b2da <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b2ce:	2303      	movs	r3, #3
 800b2d0:	73fb      	strb	r3, [r7, #15]
    break;
 800b2d2:	e002      	b.n	800b2da <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800b2d4:	2303      	movs	r3, #3
 800b2d6:	73fb      	strb	r3, [r7, #15]
    break;
 800b2d8:	bf00      	nop
  }
  return usb_status;
 800b2da:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2dc:	4618      	mov	r0, r3
 800b2de:	3710      	adds	r7, #16
 800b2e0:	46bd      	mov	sp, r7
 800b2e2:	bd80      	pop	{r7, pc}

0800b2e4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b2e4:	b480      	push	{r7}
 800b2e6:	b085      	sub	sp, #20
 800b2e8:	af00      	add	r7, sp, #0
 800b2ea:	6078      	str	r0, [r7, #4]
 800b2ec:	460b      	mov	r3, r1
 800b2ee:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b2f6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b2f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	da0b      	bge.n	800b318 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b300:	78fb      	ldrb	r3, [r7, #3]
 800b302:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b306:	68f9      	ldr	r1, [r7, #12]
 800b308:	4613      	mov	r3, r2
 800b30a:	00db      	lsls	r3, r3, #3
 800b30c:	4413      	add	r3, r2
 800b30e:	009b      	lsls	r3, r3, #2
 800b310:	440b      	add	r3, r1
 800b312:	333e      	adds	r3, #62	; 0x3e
 800b314:	781b      	ldrb	r3, [r3, #0]
 800b316:	e00b      	b.n	800b330 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b318:	78fb      	ldrb	r3, [r7, #3]
 800b31a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b31e:	68f9      	ldr	r1, [r7, #12]
 800b320:	4613      	mov	r3, r2
 800b322:	00db      	lsls	r3, r3, #3
 800b324:	4413      	add	r3, r2
 800b326:	009b      	lsls	r3, r3, #2
 800b328:	440b      	add	r3, r1
 800b32a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800b32e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b330:	4618      	mov	r0, r3
 800b332:	3714      	adds	r7, #20
 800b334:	46bd      	mov	sp, r7
 800b336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b33a:	4770      	bx	lr

0800b33c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b33c:	b580      	push	{r7, lr}
 800b33e:	b084      	sub	sp, #16
 800b340:	af00      	add	r7, sp, #0
 800b342:	6078      	str	r0, [r7, #4]
 800b344:	460b      	mov	r3, r1
 800b346:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b348:	2300      	movs	r3, #0
 800b34a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b34c:	2300      	movs	r3, #0
 800b34e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b356:	78fa      	ldrb	r2, [r7, #3]
 800b358:	4611      	mov	r1, r2
 800b35a:	4618      	mov	r0, r3
 800b35c:	f7f6 ff12 	bl	8002184 <HAL_PCD_SetAddress>
 800b360:	4603      	mov	r3, r0
 800b362:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800b364:	7bbb      	ldrb	r3, [r7, #14]
 800b366:	2b03      	cmp	r3, #3
 800b368:	d816      	bhi.n	800b398 <USBD_LL_SetUSBAddress+0x5c>
 800b36a:	a201      	add	r2, pc, #4	; (adr r2, 800b370 <USBD_LL_SetUSBAddress+0x34>)
 800b36c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b370:	0800b381 	.word	0x0800b381
 800b374:	0800b387 	.word	0x0800b387
 800b378:	0800b38d 	.word	0x0800b38d
 800b37c:	0800b393 	.word	0x0800b393
    case HAL_OK :
      usb_status = USBD_OK;
 800b380:	2300      	movs	r3, #0
 800b382:	73fb      	strb	r3, [r7, #15]
    break;
 800b384:	e00b      	b.n	800b39e <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b386:	2303      	movs	r3, #3
 800b388:	73fb      	strb	r3, [r7, #15]
    break;
 800b38a:	e008      	b.n	800b39e <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b38c:	2301      	movs	r3, #1
 800b38e:	73fb      	strb	r3, [r7, #15]
    break;
 800b390:	e005      	b.n	800b39e <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b392:	2303      	movs	r3, #3
 800b394:	73fb      	strb	r3, [r7, #15]
    break;
 800b396:	e002      	b.n	800b39e <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800b398:	2303      	movs	r3, #3
 800b39a:	73fb      	strb	r3, [r7, #15]
    break;
 800b39c:	bf00      	nop
  }
  return usb_status;
 800b39e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3a0:	4618      	mov	r0, r3
 800b3a2:	3710      	adds	r7, #16
 800b3a4:	46bd      	mov	sp, r7
 800b3a6:	bd80      	pop	{r7, pc}

0800b3a8 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b3a8:	b580      	push	{r7, lr}
 800b3aa:	b086      	sub	sp, #24
 800b3ac:	af00      	add	r7, sp, #0
 800b3ae:	60f8      	str	r0, [r7, #12]
 800b3b0:	607a      	str	r2, [r7, #4]
 800b3b2:	603b      	str	r3, [r7, #0]
 800b3b4:	460b      	mov	r3, r1
 800b3b6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b3b8:	2300      	movs	r3, #0
 800b3ba:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b3bc:	2300      	movs	r3, #0
 800b3be:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b3c6:	7af9      	ldrb	r1, [r7, #11]
 800b3c8:	683b      	ldr	r3, [r7, #0]
 800b3ca:	687a      	ldr	r2, [r7, #4]
 800b3cc:	f7f6 ffe3 	bl	8002396 <HAL_PCD_EP_Transmit>
 800b3d0:	4603      	mov	r3, r0
 800b3d2:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800b3d4:	7dbb      	ldrb	r3, [r7, #22]
 800b3d6:	2b03      	cmp	r3, #3
 800b3d8:	d816      	bhi.n	800b408 <USBD_LL_Transmit+0x60>
 800b3da:	a201      	add	r2, pc, #4	; (adr r2, 800b3e0 <USBD_LL_Transmit+0x38>)
 800b3dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3e0:	0800b3f1 	.word	0x0800b3f1
 800b3e4:	0800b3f7 	.word	0x0800b3f7
 800b3e8:	0800b3fd 	.word	0x0800b3fd
 800b3ec:	0800b403 	.word	0x0800b403
    case HAL_OK :
      usb_status = USBD_OK;
 800b3f0:	2300      	movs	r3, #0
 800b3f2:	75fb      	strb	r3, [r7, #23]
    break;
 800b3f4:	e00b      	b.n	800b40e <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b3f6:	2303      	movs	r3, #3
 800b3f8:	75fb      	strb	r3, [r7, #23]
    break;
 800b3fa:	e008      	b.n	800b40e <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b3fc:	2301      	movs	r3, #1
 800b3fe:	75fb      	strb	r3, [r7, #23]
    break;
 800b400:	e005      	b.n	800b40e <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b402:	2303      	movs	r3, #3
 800b404:	75fb      	strb	r3, [r7, #23]
    break;
 800b406:	e002      	b.n	800b40e <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800b408:	2303      	movs	r3, #3
 800b40a:	75fb      	strb	r3, [r7, #23]
    break;
 800b40c:	bf00      	nop
  }
  return usb_status;
 800b40e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b410:	4618      	mov	r0, r3
 800b412:	3718      	adds	r7, #24
 800b414:	46bd      	mov	sp, r7
 800b416:	bd80      	pop	{r7, pc}

0800b418 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b418:	b580      	push	{r7, lr}
 800b41a:	b086      	sub	sp, #24
 800b41c:	af00      	add	r7, sp, #0
 800b41e:	60f8      	str	r0, [r7, #12]
 800b420:	607a      	str	r2, [r7, #4]
 800b422:	603b      	str	r3, [r7, #0]
 800b424:	460b      	mov	r3, r1
 800b426:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b428:	2300      	movs	r3, #0
 800b42a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b42c:	2300      	movs	r3, #0
 800b42e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b436:	7af9      	ldrb	r1, [r7, #11]
 800b438:	683b      	ldr	r3, [r7, #0]
 800b43a:	687a      	ldr	r2, [r7, #4]
 800b43c:	f7f6 ff79 	bl	8002332 <HAL_PCD_EP_Receive>
 800b440:	4603      	mov	r3, r0
 800b442:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800b444:	7dbb      	ldrb	r3, [r7, #22]
 800b446:	2b03      	cmp	r3, #3
 800b448:	d816      	bhi.n	800b478 <USBD_LL_PrepareReceive+0x60>
 800b44a:	a201      	add	r2, pc, #4	; (adr r2, 800b450 <USBD_LL_PrepareReceive+0x38>)
 800b44c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b450:	0800b461 	.word	0x0800b461
 800b454:	0800b467 	.word	0x0800b467
 800b458:	0800b46d 	.word	0x0800b46d
 800b45c:	0800b473 	.word	0x0800b473
    case HAL_OK :
      usb_status = USBD_OK;
 800b460:	2300      	movs	r3, #0
 800b462:	75fb      	strb	r3, [r7, #23]
    break;
 800b464:	e00b      	b.n	800b47e <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b466:	2303      	movs	r3, #3
 800b468:	75fb      	strb	r3, [r7, #23]
    break;
 800b46a:	e008      	b.n	800b47e <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b46c:	2301      	movs	r3, #1
 800b46e:	75fb      	strb	r3, [r7, #23]
    break;
 800b470:	e005      	b.n	800b47e <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b472:	2303      	movs	r3, #3
 800b474:	75fb      	strb	r3, [r7, #23]
    break;
 800b476:	e002      	b.n	800b47e <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800b478:	2303      	movs	r3, #3
 800b47a:	75fb      	strb	r3, [r7, #23]
    break;
 800b47c:	bf00      	nop
  }
  return usb_status;
 800b47e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b480:	4618      	mov	r0, r3
 800b482:	3718      	adds	r7, #24
 800b484:	46bd      	mov	sp, r7
 800b486:	bd80      	pop	{r7, pc}

0800b488 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800b488:	b580      	push	{r7, lr}
 800b48a:	b082      	sub	sp, #8
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	6078      	str	r0, [r7, #4]
 800b490:	460b      	mov	r3, r1
 800b492:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800b494:	78fb      	ldrb	r3, [r7, #3]
 800b496:	2b00      	cmp	r3, #0
 800b498:	d002      	beq.n	800b4a0 <HAL_PCDEx_LPM_Callback+0x18>
 800b49a:	2b01      	cmp	r3, #1
 800b49c:	d01f      	beq.n	800b4de <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800b49e:	e03b      	b.n	800b518 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	6a1b      	ldr	r3, [r3, #32]
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d007      	beq.n	800b4b8 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800b4a8:	f000 f854 	bl	800b554 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b4ac:	4b1c      	ldr	r3, [pc, #112]	; (800b520 <HAL_PCDEx_LPM_Callback+0x98>)
 800b4ae:	691b      	ldr	r3, [r3, #16]
 800b4b0:	4a1b      	ldr	r2, [pc, #108]	; (800b520 <HAL_PCDEx_LPM_Callback+0x98>)
 800b4b2:	f023 0306 	bic.w	r3, r3, #6
 800b4b6:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	687a      	ldr	r2, [r7, #4]
 800b4c4:	6812      	ldr	r2, [r2, #0]
 800b4c6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b4ca:	f023 0301 	bic.w	r3, r3, #1
 800b4ce:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b4d6:	4618      	mov	r0, r3
 800b4d8:	f7fb fd19 	bl	8006f0e <USBD_LL_Resume>
    break;
 800b4dc:	e01c      	b.n	800b518 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	687a      	ldr	r2, [r7, #4]
 800b4ea:	6812      	ldr	r2, [r2, #0]
 800b4ec:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b4f0:	f043 0301 	orr.w	r3, r3, #1
 800b4f4:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b4fc:	4618      	mov	r0, r3
 800b4fe:	f7fb fcea 	bl	8006ed6 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	6a1b      	ldr	r3, [r3, #32]
 800b506:	2b00      	cmp	r3, #0
 800b508:	d005      	beq.n	800b516 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b50a:	4b05      	ldr	r3, [pc, #20]	; (800b520 <HAL_PCDEx_LPM_Callback+0x98>)
 800b50c:	691b      	ldr	r3, [r3, #16]
 800b50e:	4a04      	ldr	r2, [pc, #16]	; (800b520 <HAL_PCDEx_LPM_Callback+0x98>)
 800b510:	f043 0306 	orr.w	r3, r3, #6
 800b514:	6113      	str	r3, [r2, #16]
    break;
 800b516:	bf00      	nop
}
 800b518:	bf00      	nop
 800b51a:	3708      	adds	r7, #8
 800b51c:	46bd      	mov	sp, r7
 800b51e:	bd80      	pop	{r7, pc}
 800b520:	e000ed00 	.word	0xe000ed00

0800b524 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b524:	b480      	push	{r7}
 800b526:	b083      	sub	sp, #12
 800b528:	af00      	add	r7, sp, #0
 800b52a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b52c:	4b03      	ldr	r3, [pc, #12]	; (800b53c <USBD_static_malloc+0x18>)
}
 800b52e:	4618      	mov	r0, r3
 800b530:	370c      	adds	r7, #12
 800b532:	46bd      	mov	sp, r7
 800b534:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b538:	4770      	bx	lr
 800b53a:	bf00      	nop
 800b53c:	20002520 	.word	0x20002520

0800b540 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b540:	b480      	push	{r7}
 800b542:	b083      	sub	sp, #12
 800b544:	af00      	add	r7, sp, #0
 800b546:	6078      	str	r0, [r7, #4]

}
 800b548:	bf00      	nop
 800b54a:	370c      	adds	r7, #12
 800b54c:	46bd      	mov	sp, r7
 800b54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b552:	4770      	bx	lr

0800b554 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800b554:	b580      	push	{r7, lr}
 800b556:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800b558:	f7f5 f832 	bl	80005c0 <SystemClock_Config>
}
 800b55c:	bf00      	nop
 800b55e:	bd80      	pop	{r7, pc}

0800b560 <memset>:
 800b560:	4402      	add	r2, r0
 800b562:	4603      	mov	r3, r0
 800b564:	4293      	cmp	r3, r2
 800b566:	d100      	bne.n	800b56a <memset+0xa>
 800b568:	4770      	bx	lr
 800b56a:	f803 1b01 	strb.w	r1, [r3], #1
 800b56e:	e7f9      	b.n	800b564 <memset+0x4>

0800b570 <__libc_init_array>:
 800b570:	b570      	push	{r4, r5, r6, lr}
 800b572:	4d0d      	ldr	r5, [pc, #52]	; (800b5a8 <__libc_init_array+0x38>)
 800b574:	4c0d      	ldr	r4, [pc, #52]	; (800b5ac <__libc_init_array+0x3c>)
 800b576:	1b64      	subs	r4, r4, r5
 800b578:	10a4      	asrs	r4, r4, #2
 800b57a:	2600      	movs	r6, #0
 800b57c:	42a6      	cmp	r6, r4
 800b57e:	d109      	bne.n	800b594 <__libc_init_array+0x24>
 800b580:	4d0b      	ldr	r5, [pc, #44]	; (800b5b0 <__libc_init_array+0x40>)
 800b582:	4c0c      	ldr	r4, [pc, #48]	; (800b5b4 <__libc_init_array+0x44>)
 800b584:	f000 f826 	bl	800b5d4 <_init>
 800b588:	1b64      	subs	r4, r4, r5
 800b58a:	10a4      	asrs	r4, r4, #2
 800b58c:	2600      	movs	r6, #0
 800b58e:	42a6      	cmp	r6, r4
 800b590:	d105      	bne.n	800b59e <__libc_init_array+0x2e>
 800b592:	bd70      	pop	{r4, r5, r6, pc}
 800b594:	f855 3b04 	ldr.w	r3, [r5], #4
 800b598:	4798      	blx	r3
 800b59a:	3601      	adds	r6, #1
 800b59c:	e7ee      	b.n	800b57c <__libc_init_array+0xc>
 800b59e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b5a2:	4798      	blx	r3
 800b5a4:	3601      	adds	r6, #1
 800b5a6:	e7f2      	b.n	800b58e <__libc_init_array+0x1e>
 800b5a8:	0800b700 	.word	0x0800b700
 800b5ac:	0800b700 	.word	0x0800b700
 800b5b0:	0800b700 	.word	0x0800b700
 800b5b4:	0800b704 	.word	0x0800b704

0800b5b8 <memcpy>:
 800b5b8:	440a      	add	r2, r1
 800b5ba:	4291      	cmp	r1, r2
 800b5bc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800b5c0:	d100      	bne.n	800b5c4 <memcpy+0xc>
 800b5c2:	4770      	bx	lr
 800b5c4:	b510      	push	{r4, lr}
 800b5c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b5ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b5ce:	4291      	cmp	r1, r2
 800b5d0:	d1f9      	bne.n	800b5c6 <memcpy+0xe>
 800b5d2:	bd10      	pop	{r4, pc}

0800b5d4 <_init>:
 800b5d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5d6:	bf00      	nop
 800b5d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b5da:	bc08      	pop	{r3}
 800b5dc:	469e      	mov	lr, r3
 800b5de:	4770      	bx	lr

0800b5e0 <_fini>:
 800b5e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5e2:	bf00      	nop
 800b5e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b5e6:	bc08      	pop	{r3}
 800b5e8:	469e      	mov	lr, r3
 800b5ea:	4770      	bx	lr
