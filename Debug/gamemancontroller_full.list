
gamemancontroller_full.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b36c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000010c  0800b51c  0800b51c  0001b51c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b628  0800b628  00020130  2**0
                  CONTENTS
  4 .ARM          00000008  0800b628  0800b628  0001b628  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b630  0800b630  00020130  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b630  0800b630  0001b630  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b634  0800b634  0001b634  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000130  20000000  0800b638  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002404  20000130  0800b768  00020130  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002534  0800b768  00022534  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020130  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020160  2**0
                  CONTENTS, READONLY
 13 .debug_info   00022ac5  00000000  00000000  000201a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004d21  00000000  00000000  00042c68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001df8  00000000  00000000  00047990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000171d  00000000  00000000  00049788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000063eb  00000000  00000000  0004aea5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000216e7  00000000  00000000  00051290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010f028  00000000  00000000  00072977  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007ea8  00000000  00000000  001819a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  00189848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000130 	.word	0x20000130
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800b504 	.word	0x0800b504

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000134 	.word	0x20000134
 80001ec:	0800b504 	.word	0x0800b504

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000200:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000204:	f000 b970 	b.w	80004e8 <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9e08      	ldr	r6, [sp, #32]
 8000226:	460d      	mov	r5, r1
 8000228:	4604      	mov	r4, r0
 800022a:	460f      	mov	r7, r1
 800022c:	2b00      	cmp	r3, #0
 800022e:	d14a      	bne.n	80002c6 <__udivmoddi4+0xa6>
 8000230:	428a      	cmp	r2, r1
 8000232:	4694      	mov	ip, r2
 8000234:	d965      	bls.n	8000302 <__udivmoddi4+0xe2>
 8000236:	fab2 f382 	clz	r3, r2
 800023a:	b143      	cbz	r3, 800024e <__udivmoddi4+0x2e>
 800023c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000240:	f1c3 0220 	rsb	r2, r3, #32
 8000244:	409f      	lsls	r7, r3
 8000246:	fa20 f202 	lsr.w	r2, r0, r2
 800024a:	4317      	orrs	r7, r2
 800024c:	409c      	lsls	r4, r3
 800024e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000252:	fa1f f58c 	uxth.w	r5, ip
 8000256:	fbb7 f1fe 	udiv	r1, r7, lr
 800025a:	0c22      	lsrs	r2, r4, #16
 800025c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000260:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000264:	fb01 f005 	mul.w	r0, r1, r5
 8000268:	4290      	cmp	r0, r2
 800026a:	d90a      	bls.n	8000282 <__udivmoddi4+0x62>
 800026c:	eb1c 0202 	adds.w	r2, ip, r2
 8000270:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000274:	f080 811c 	bcs.w	80004b0 <__udivmoddi4+0x290>
 8000278:	4290      	cmp	r0, r2
 800027a:	f240 8119 	bls.w	80004b0 <__udivmoddi4+0x290>
 800027e:	3902      	subs	r1, #2
 8000280:	4462      	add	r2, ip
 8000282:	1a12      	subs	r2, r2, r0
 8000284:	b2a4      	uxth	r4, r4
 8000286:	fbb2 f0fe 	udiv	r0, r2, lr
 800028a:	fb0e 2210 	mls	r2, lr, r0, r2
 800028e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000292:	fb00 f505 	mul.w	r5, r0, r5
 8000296:	42a5      	cmp	r5, r4
 8000298:	d90a      	bls.n	80002b0 <__udivmoddi4+0x90>
 800029a:	eb1c 0404 	adds.w	r4, ip, r4
 800029e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002a2:	f080 8107 	bcs.w	80004b4 <__udivmoddi4+0x294>
 80002a6:	42a5      	cmp	r5, r4
 80002a8:	f240 8104 	bls.w	80004b4 <__udivmoddi4+0x294>
 80002ac:	4464      	add	r4, ip
 80002ae:	3802      	subs	r0, #2
 80002b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002b4:	1b64      	subs	r4, r4, r5
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11e      	cbz	r6, 80002c2 <__udivmoddi4+0xa2>
 80002ba:	40dc      	lsrs	r4, r3
 80002bc:	2300      	movs	r3, #0
 80002be:	e9c6 4300 	strd	r4, r3, [r6]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d908      	bls.n	80002dc <__udivmoddi4+0xbc>
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	f000 80ed 	beq.w	80004aa <__udivmoddi4+0x28a>
 80002d0:	2100      	movs	r1, #0
 80002d2:	e9c6 0500 	strd	r0, r5, [r6]
 80002d6:	4608      	mov	r0, r1
 80002d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002dc:	fab3 f183 	clz	r1, r3
 80002e0:	2900      	cmp	r1, #0
 80002e2:	d149      	bne.n	8000378 <__udivmoddi4+0x158>
 80002e4:	42ab      	cmp	r3, r5
 80002e6:	d302      	bcc.n	80002ee <__udivmoddi4+0xce>
 80002e8:	4282      	cmp	r2, r0
 80002ea:	f200 80f8 	bhi.w	80004de <__udivmoddi4+0x2be>
 80002ee:	1a84      	subs	r4, r0, r2
 80002f0:	eb65 0203 	sbc.w	r2, r5, r3
 80002f4:	2001      	movs	r0, #1
 80002f6:	4617      	mov	r7, r2
 80002f8:	2e00      	cmp	r6, #0
 80002fa:	d0e2      	beq.n	80002c2 <__udivmoddi4+0xa2>
 80002fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000300:	e7df      	b.n	80002c2 <__udivmoddi4+0xa2>
 8000302:	b902      	cbnz	r2, 8000306 <__udivmoddi4+0xe6>
 8000304:	deff      	udf	#255	; 0xff
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	2b00      	cmp	r3, #0
 800030c:	f040 8090 	bne.w	8000430 <__udivmoddi4+0x210>
 8000310:	1a8a      	subs	r2, r1, r2
 8000312:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000316:	fa1f fe8c 	uxth.w	lr, ip
 800031a:	2101      	movs	r1, #1
 800031c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000320:	fb07 2015 	mls	r0, r7, r5, r2
 8000324:	0c22      	lsrs	r2, r4, #16
 8000326:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800032a:	fb0e f005 	mul.w	r0, lr, r5
 800032e:	4290      	cmp	r0, r2
 8000330:	d908      	bls.n	8000344 <__udivmoddi4+0x124>
 8000332:	eb1c 0202 	adds.w	r2, ip, r2
 8000336:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x122>
 800033c:	4290      	cmp	r0, r2
 800033e:	f200 80cb 	bhi.w	80004d8 <__udivmoddi4+0x2b8>
 8000342:	4645      	mov	r5, r8
 8000344:	1a12      	subs	r2, r2, r0
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb2 f0f7 	udiv	r0, r2, r7
 800034c:	fb07 2210 	mls	r2, r7, r0, r2
 8000350:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000354:	fb0e fe00 	mul.w	lr, lr, r0
 8000358:	45a6      	cmp	lr, r4
 800035a:	d908      	bls.n	800036e <__udivmoddi4+0x14e>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000364:	d202      	bcs.n	800036c <__udivmoddi4+0x14c>
 8000366:	45a6      	cmp	lr, r4
 8000368:	f200 80bb 	bhi.w	80004e2 <__udivmoddi4+0x2c2>
 800036c:	4610      	mov	r0, r2
 800036e:	eba4 040e 	sub.w	r4, r4, lr
 8000372:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000376:	e79f      	b.n	80002b8 <__udivmoddi4+0x98>
 8000378:	f1c1 0720 	rsb	r7, r1, #32
 800037c:	408b      	lsls	r3, r1
 800037e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000382:	ea4c 0c03 	orr.w	ip, ip, r3
 8000386:	fa05 f401 	lsl.w	r4, r5, r1
 800038a:	fa20 f307 	lsr.w	r3, r0, r7
 800038e:	40fd      	lsrs	r5, r7
 8000390:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000394:	4323      	orrs	r3, r4
 8000396:	fbb5 f8f9 	udiv	r8, r5, r9
 800039a:	fa1f fe8c 	uxth.w	lr, ip
 800039e:	fb09 5518 	mls	r5, r9, r8, r5
 80003a2:	0c1c      	lsrs	r4, r3, #16
 80003a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003a8:	fb08 f50e 	mul.w	r5, r8, lr
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	fa02 f201 	lsl.w	r2, r2, r1
 80003b2:	fa00 f001 	lsl.w	r0, r0, r1
 80003b6:	d90b      	bls.n	80003d0 <__udivmoddi4+0x1b0>
 80003b8:	eb1c 0404 	adds.w	r4, ip, r4
 80003bc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003c0:	f080 8088 	bcs.w	80004d4 <__udivmoddi4+0x2b4>
 80003c4:	42a5      	cmp	r5, r4
 80003c6:	f240 8085 	bls.w	80004d4 <__udivmoddi4+0x2b4>
 80003ca:	f1a8 0802 	sub.w	r8, r8, #2
 80003ce:	4464      	add	r4, ip
 80003d0:	1b64      	subs	r4, r4, r5
 80003d2:	b29d      	uxth	r5, r3
 80003d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003d8:	fb09 4413 	mls	r4, r9, r3, r4
 80003dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003e4:	45a6      	cmp	lr, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x1da>
 80003e8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ec:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003f0:	d26c      	bcs.n	80004cc <__udivmoddi4+0x2ac>
 80003f2:	45a6      	cmp	lr, r4
 80003f4:	d96a      	bls.n	80004cc <__udivmoddi4+0x2ac>
 80003f6:	3b02      	subs	r3, #2
 80003f8:	4464      	add	r4, ip
 80003fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000402:	eba4 040e 	sub.w	r4, r4, lr
 8000406:	42ac      	cmp	r4, r5
 8000408:	46c8      	mov	r8, r9
 800040a:	46ae      	mov	lr, r5
 800040c:	d356      	bcc.n	80004bc <__udivmoddi4+0x29c>
 800040e:	d053      	beq.n	80004b8 <__udivmoddi4+0x298>
 8000410:	b156      	cbz	r6, 8000428 <__udivmoddi4+0x208>
 8000412:	ebb0 0208 	subs.w	r2, r0, r8
 8000416:	eb64 040e 	sbc.w	r4, r4, lr
 800041a:	fa04 f707 	lsl.w	r7, r4, r7
 800041e:	40ca      	lsrs	r2, r1
 8000420:	40cc      	lsrs	r4, r1
 8000422:	4317      	orrs	r7, r2
 8000424:	e9c6 7400 	strd	r7, r4, [r6]
 8000428:	4618      	mov	r0, r3
 800042a:	2100      	movs	r1, #0
 800042c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000430:	f1c3 0120 	rsb	r1, r3, #32
 8000434:	fa02 fc03 	lsl.w	ip, r2, r3
 8000438:	fa20 f201 	lsr.w	r2, r0, r1
 800043c:	fa25 f101 	lsr.w	r1, r5, r1
 8000440:	409d      	lsls	r5, r3
 8000442:	432a      	orrs	r2, r5
 8000444:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000450:	fb07 1510 	mls	r5, r7, r0, r1
 8000454:	0c11      	lsrs	r1, r2, #16
 8000456:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800045a:	fb00 f50e 	mul.w	r5, r0, lr
 800045e:	428d      	cmp	r5, r1
 8000460:	fa04 f403 	lsl.w	r4, r4, r3
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x258>
 8000466:	eb1c 0101 	adds.w	r1, ip, r1
 800046a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800046e:	d22f      	bcs.n	80004d0 <__udivmoddi4+0x2b0>
 8000470:	428d      	cmp	r5, r1
 8000472:	d92d      	bls.n	80004d0 <__udivmoddi4+0x2b0>
 8000474:	3802      	subs	r0, #2
 8000476:	4461      	add	r1, ip
 8000478:	1b49      	subs	r1, r1, r5
 800047a:	b292      	uxth	r2, r2
 800047c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000480:	fb07 1115 	mls	r1, r7, r5, r1
 8000484:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000488:	fb05 f10e 	mul.w	r1, r5, lr
 800048c:	4291      	cmp	r1, r2
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x282>
 8000490:	eb1c 0202 	adds.w	r2, ip, r2
 8000494:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000498:	d216      	bcs.n	80004c8 <__udivmoddi4+0x2a8>
 800049a:	4291      	cmp	r1, r2
 800049c:	d914      	bls.n	80004c8 <__udivmoddi4+0x2a8>
 800049e:	3d02      	subs	r5, #2
 80004a0:	4462      	add	r2, ip
 80004a2:	1a52      	subs	r2, r2, r1
 80004a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004a8:	e738      	b.n	800031c <__udivmoddi4+0xfc>
 80004aa:	4631      	mov	r1, r6
 80004ac:	4630      	mov	r0, r6
 80004ae:	e708      	b.n	80002c2 <__udivmoddi4+0xa2>
 80004b0:	4639      	mov	r1, r7
 80004b2:	e6e6      	b.n	8000282 <__udivmoddi4+0x62>
 80004b4:	4610      	mov	r0, r2
 80004b6:	e6fb      	b.n	80002b0 <__udivmoddi4+0x90>
 80004b8:	4548      	cmp	r0, r9
 80004ba:	d2a9      	bcs.n	8000410 <__udivmoddi4+0x1f0>
 80004bc:	ebb9 0802 	subs.w	r8, r9, r2
 80004c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004c4:	3b01      	subs	r3, #1
 80004c6:	e7a3      	b.n	8000410 <__udivmoddi4+0x1f0>
 80004c8:	4645      	mov	r5, r8
 80004ca:	e7ea      	b.n	80004a2 <__udivmoddi4+0x282>
 80004cc:	462b      	mov	r3, r5
 80004ce:	e794      	b.n	80003fa <__udivmoddi4+0x1da>
 80004d0:	4640      	mov	r0, r8
 80004d2:	e7d1      	b.n	8000478 <__udivmoddi4+0x258>
 80004d4:	46d0      	mov	r8, sl
 80004d6:	e77b      	b.n	80003d0 <__udivmoddi4+0x1b0>
 80004d8:	3d02      	subs	r5, #2
 80004da:	4462      	add	r2, ip
 80004dc:	e732      	b.n	8000344 <__udivmoddi4+0x124>
 80004de:	4608      	mov	r0, r1
 80004e0:	e70a      	b.n	80002f8 <__udivmoddi4+0xd8>
 80004e2:	4464      	add	r4, ip
 80004e4:	3802      	subs	r0, #2
 80004e6:	e742      	b.n	800036e <__udivmoddi4+0x14e>

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f0:	f000 fca7 	bl	8000e42 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f4:	f000 f828 	bl	8000548 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f8:	f000 f906 	bl	8000708 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 80004fc:	f000 f888 	bl	8000610 <MX_LPUART1_UART_Init>
  MX_TIM2_Init();
 8000500:	f000 f8b4 	bl	800066c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000504:	f007 fcec 	bl	8007ee0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000508:	4a09      	ldr	r2, [pc, #36]	; (8000530 <main+0x44>)
 800050a:	2100      	movs	r1, #0
 800050c:	4809      	ldr	r0, [pc, #36]	; (8000534 <main+0x48>)
 800050e:	f007 fd31 	bl	8007f74 <osThreadNew>
 8000512:	4603      	mov	r3, r0
 8000514:	4a08      	ldr	r2, [pc, #32]	; (8000538 <main+0x4c>)
 8000516:	6013      	str	r3, [r2, #0]
  checkkeysTaskHandle = osThreadNew(checkkeys, NULL,&checkkeysTaskHandle_attributes);
 8000518:	4a08      	ldr	r2, [pc, #32]	; (800053c <main+0x50>)
 800051a:	2100      	movs	r1, #0
 800051c:	4808      	ldr	r0, [pc, #32]	; (8000540 <main+0x54>)
 800051e:	f007 fd29 	bl	8007f74 <osThreadNew>
 8000522:	4603      	mov	r3, r0
 8000524:	4a07      	ldr	r2, [pc, #28]	; (8000544 <main+0x58>)
 8000526:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000528:	f007 fcfe 	bl	8007f28 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800052c:	e7fe      	b.n	800052c <main+0x40>
 800052e:	bf00      	nop
 8000530:	0800b598 	.word	0x0800b598
 8000534:	08000c05 	.word	0x08000c05
 8000538:	20000220 	.word	0x20000220
 800053c:	0800b5bc 	.word	0x0800b5bc
 8000540:	080008f9 	.word	0x080008f9
 8000544:	20000224 	.word	0x20000224

08000548 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b096      	sub	sp, #88	; 0x58
 800054c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800054e:	f107 0314 	add.w	r3, r7, #20
 8000552:	2244      	movs	r2, #68	; 0x44
 8000554:	2100      	movs	r1, #0
 8000556:	4618      	mov	r0, r3
 8000558:	f00a ff9a 	bl	800b490 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800055c:	463b      	mov	r3, r7
 800055e:	2200      	movs	r2, #0
 8000560:	601a      	str	r2, [r3, #0]
 8000562:	605a      	str	r2, [r3, #4]
 8000564:	609a      	str	r2, [r3, #8]
 8000566:	60da      	str	r2, [r3, #12]
 8000568:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800056a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800056e:	f002 f96b 	bl	8002848 <HAL_PWREx_ControlVoltageScaling>
 8000572:	4603      	mov	r3, r0
 8000574:	2b00      	cmp	r3, #0
 8000576:	d001      	beq.n	800057c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000578:	f000 fb4e 	bl	8000c18 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800057c:	f002 f946 	bl	800280c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000580:	4b22      	ldr	r3, [pc, #136]	; (800060c <SystemClock_Config+0xc4>)
 8000582:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000586:	4a21      	ldr	r2, [pc, #132]	; (800060c <SystemClock_Config+0xc4>)
 8000588:	f023 0318 	bic.w	r3, r3, #24
 800058c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000590:	2314      	movs	r3, #20
 8000592:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000594:	2301      	movs	r3, #1
 8000596:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000598:	2301      	movs	r3, #1
 800059a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800059c:	2300      	movs	r3, #0
 800059e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80005a0:	2360      	movs	r3, #96	; 0x60
 80005a2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005a4:	2302      	movs	r3, #2
 80005a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80005a8:	2301      	movs	r3, #1
 80005aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005ac:	2301      	movs	r3, #1
 80005ae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 71;
 80005b0:	2347      	movs	r3, #71	; 0x47
 80005b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005b4:	2302      	movs	r3, #2
 80005b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005b8:	2302      	movs	r3, #2
 80005ba:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV6;
 80005bc:	2306      	movs	r3, #6
 80005be:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c0:	f107 0314 	add.w	r3, r7, #20
 80005c4:	4618      	mov	r0, r3
 80005c6:	f002 f9b5 	bl	8002934 <HAL_RCC_OscConfig>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d001      	beq.n	80005d4 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80005d0:	f000 fb22 	bl	8000c18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d4:	230f      	movs	r3, #15
 80005d6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005d8:	2303      	movs	r3, #3
 80005da:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005dc:	2300      	movs	r3, #0
 80005de:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005e4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005e6:	2300      	movs	r3, #0
 80005e8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005ea:	463b      	mov	r3, r7
 80005ec:	2102      	movs	r1, #2
 80005ee:	4618      	mov	r0, r3
 80005f0:	f002 fdba 	bl	8003168 <HAL_RCC_ClockConfig>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80005fa:	f000 fb0d 	bl	8000c18 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80005fe:	f003 fad3 	bl	8003ba8 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000602:	bf00      	nop
 8000604:	3758      	adds	r7, #88	; 0x58
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	40021000 	.word	0x40021000

08000610 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000614:	4b12      	ldr	r3, [pc, #72]	; (8000660 <MX_LPUART1_UART_Init+0x50>)
 8000616:	4a13      	ldr	r2, [pc, #76]	; (8000664 <MX_LPUART1_UART_Init+0x54>)
 8000618:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 800061a:	4b11      	ldr	r3, [pc, #68]	; (8000660 <MX_LPUART1_UART_Init+0x50>)
 800061c:	4a12      	ldr	r2, [pc, #72]	; (8000668 <MX_LPUART1_UART_Init+0x58>)
 800061e:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 8000620:	4b0f      	ldr	r3, [pc, #60]	; (8000660 <MX_LPUART1_UART_Init+0x50>)
 8000622:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000626:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000628:	4b0d      	ldr	r3, [pc, #52]	; (8000660 <MX_LPUART1_UART_Init+0x50>)
 800062a:	2200      	movs	r2, #0
 800062c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800062e:	4b0c      	ldr	r3, [pc, #48]	; (8000660 <MX_LPUART1_UART_Init+0x50>)
 8000630:	2200      	movs	r2, #0
 8000632:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000634:	4b0a      	ldr	r3, [pc, #40]	; (8000660 <MX_LPUART1_UART_Init+0x50>)
 8000636:	220c      	movs	r2, #12
 8000638:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800063a:	4b09      	ldr	r3, [pc, #36]	; (8000660 <MX_LPUART1_UART_Init+0x50>)
 800063c:	2200      	movs	r2, #0
 800063e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000640:	4b07      	ldr	r3, [pc, #28]	; (8000660 <MX_LPUART1_UART_Init+0x50>)
 8000642:	2200      	movs	r2, #0
 8000644:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000646:	4b06      	ldr	r3, [pc, #24]	; (8000660 <MX_LPUART1_UART_Init+0x50>)
 8000648:	2200      	movs	r2, #0
 800064a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800064c:	4804      	ldr	r0, [pc, #16]	; (8000660 <MX_LPUART1_UART_Init+0x50>)
 800064e:	f003 ff65 	bl	800451c <HAL_UART_Init>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8000658:	f000 fade 	bl	8000c18 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800065c:	bf00      	nop
 800065e:	bd80      	pop	{r7, pc}
 8000660:	2000014c 	.word	0x2000014c
 8000664:	40008000 	.word	0x40008000
 8000668:	00033324 	.word	0x00033324

0800066c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b088      	sub	sp, #32
 8000670:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000672:	f107 0310 	add.w	r3, r7, #16
 8000676:	2200      	movs	r2, #0
 8000678:	601a      	str	r2, [r3, #0]
 800067a:	605a      	str	r2, [r3, #4]
 800067c:	609a      	str	r2, [r3, #8]
 800067e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000680:	1d3b      	adds	r3, r7, #4
 8000682:	2200      	movs	r2, #0
 8000684:	601a      	str	r2, [r3, #0]
 8000686:	605a      	str	r2, [r3, #4]
 8000688:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800068a:	4b1e      	ldr	r3, [pc, #120]	; (8000704 <MX_TIM2_Init+0x98>)
 800068c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000690:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000692:	4b1c      	ldr	r3, [pc, #112]	; (8000704 <MX_TIM2_Init+0x98>)
 8000694:	2200      	movs	r2, #0
 8000696:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000698:	4b1a      	ldr	r3, [pc, #104]	; (8000704 <MX_TIM2_Init+0x98>)
 800069a:	2200      	movs	r2, #0
 800069c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800069e:	4b19      	ldr	r3, [pc, #100]	; (8000704 <MX_TIM2_Init+0x98>)
 80006a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80006a4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006a6:	4b17      	ldr	r3, [pc, #92]	; (8000704 <MX_TIM2_Init+0x98>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006ac:	4b15      	ldr	r3, [pc, #84]	; (8000704 <MX_TIM2_Init+0x98>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80006b2:	4814      	ldr	r0, [pc, #80]	; (8000704 <MX_TIM2_Init+0x98>)
 80006b4:	f003 fc56 	bl	8003f64 <HAL_TIM_Base_Init>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80006be:	f000 faab 	bl	8000c18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006c6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80006c8:	f107 0310 	add.w	r3, r7, #16
 80006cc:	4619      	mov	r1, r3
 80006ce:	480d      	ldr	r0, [pc, #52]	; (8000704 <MX_TIM2_Init+0x98>)
 80006d0:	f003 fc9f 	bl	8004012 <HAL_TIM_ConfigClockSource>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80006da:	f000 fa9d 	bl	8000c18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006de:	2300      	movs	r3, #0
 80006e0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006e2:	2300      	movs	r3, #0
 80006e4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80006e6:	1d3b      	adds	r3, r7, #4
 80006e8:	4619      	mov	r1, r3
 80006ea:	4806      	ldr	r0, [pc, #24]	; (8000704 <MX_TIM2_Init+0x98>)
 80006ec:	f003 fe8e 	bl	800440c <HAL_TIMEx_MasterConfigSynchronization>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80006f6:	f000 fa8f 	bl	8000c18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80006fa:	bf00      	nop
 80006fc:	3720      	adds	r7, #32
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	200001d4 	.word	0x200001d4

08000708 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b08c      	sub	sp, #48	; 0x30
 800070c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800070e:	f107 031c 	add.w	r3, r7, #28
 8000712:	2200      	movs	r2, #0
 8000714:	601a      	str	r2, [r3, #0]
 8000716:	605a      	str	r2, [r3, #4]
 8000718:	609a      	str	r2, [r3, #8]
 800071a:	60da      	str	r2, [r3, #12]
 800071c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800071e:	4b70      	ldr	r3, [pc, #448]	; (80008e0 <MX_GPIO_Init+0x1d8>)
 8000720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000722:	4a6f      	ldr	r2, [pc, #444]	; (80008e0 <MX_GPIO_Init+0x1d8>)
 8000724:	f043 0304 	orr.w	r3, r3, #4
 8000728:	64d3      	str	r3, [r2, #76]	; 0x4c
 800072a:	4b6d      	ldr	r3, [pc, #436]	; (80008e0 <MX_GPIO_Init+0x1d8>)
 800072c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800072e:	f003 0304 	and.w	r3, r3, #4
 8000732:	61bb      	str	r3, [r7, #24]
 8000734:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000736:	4b6a      	ldr	r3, [pc, #424]	; (80008e0 <MX_GPIO_Init+0x1d8>)
 8000738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800073a:	4a69      	ldr	r2, [pc, #420]	; (80008e0 <MX_GPIO_Init+0x1d8>)
 800073c:	f043 0320 	orr.w	r3, r3, #32
 8000740:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000742:	4b67      	ldr	r3, [pc, #412]	; (80008e0 <MX_GPIO_Init+0x1d8>)
 8000744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000746:	f003 0320 	and.w	r3, r3, #32
 800074a:	617b      	str	r3, [r7, #20]
 800074c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800074e:	4b64      	ldr	r3, [pc, #400]	; (80008e0 <MX_GPIO_Init+0x1d8>)
 8000750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000752:	4a63      	ldr	r2, [pc, #396]	; (80008e0 <MX_GPIO_Init+0x1d8>)
 8000754:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000758:	64d3      	str	r3, [r2, #76]	; 0x4c
 800075a:	4b61      	ldr	r3, [pc, #388]	; (80008e0 <MX_GPIO_Init+0x1d8>)
 800075c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800075e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000762:	613b      	str	r3, [r7, #16]
 8000764:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000766:	4b5e      	ldr	r3, [pc, #376]	; (80008e0 <MX_GPIO_Init+0x1d8>)
 8000768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800076a:	4a5d      	ldr	r2, [pc, #372]	; (80008e0 <MX_GPIO_Init+0x1d8>)
 800076c:	f043 0301 	orr.w	r3, r3, #1
 8000770:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000772:	4b5b      	ldr	r3, [pc, #364]	; (80008e0 <MX_GPIO_Init+0x1d8>)
 8000774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000776:	f003 0301 	and.w	r3, r3, #1
 800077a:	60fb      	str	r3, [r7, #12]
 800077c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800077e:	4b58      	ldr	r3, [pc, #352]	; (80008e0 <MX_GPIO_Init+0x1d8>)
 8000780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000782:	4a57      	ldr	r2, [pc, #348]	; (80008e0 <MX_GPIO_Init+0x1d8>)
 8000784:	f043 0302 	orr.w	r3, r3, #2
 8000788:	64d3      	str	r3, [r2, #76]	; 0x4c
 800078a:	4b55      	ldr	r3, [pc, #340]	; (80008e0 <MX_GPIO_Init+0x1d8>)
 800078c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800078e:	f003 0302 	and.w	r3, r3, #2
 8000792:	60bb      	str	r3, [r7, #8]
 8000794:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000796:	4b52      	ldr	r3, [pc, #328]	; (80008e0 <MX_GPIO_Init+0x1d8>)
 8000798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800079a:	4a51      	ldr	r2, [pc, #324]	; (80008e0 <MX_GPIO_Init+0x1d8>)
 800079c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007a2:	4b4f      	ldr	r3, [pc, #316]	; (80008e0 <MX_GPIO_Init+0x1d8>)
 80007a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007aa:	607b      	str	r3, [r7, #4]
 80007ac:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 80007ae:	f002 f8b1 	bl	8002914 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007b2:	4b4b      	ldr	r3, [pc, #300]	; (80008e0 <MX_GPIO_Init+0x1d8>)
 80007b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007b6:	4a4a      	ldr	r2, [pc, #296]	; (80008e0 <MX_GPIO_Init+0x1d8>)
 80007b8:	f043 0308 	orr.w	r3, r3, #8
 80007bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007be:	4b48      	ldr	r3, [pc, #288]	; (80008e0 <MX_GPIO_Init+0x1d8>)
 80007c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007c2:	f003 0308 	and.w	r3, r3, #8
 80007c6:	603b      	str	r3, [r7, #0]
 80007c8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(driverpin_GPIO_Port, driverpin_Pin, GPIO_PIN_RESET);
 80007ca:	2200      	movs	r2, #0
 80007cc:	2108      	movs	r1, #8
 80007ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007d2:	f000 fe73 	bl	80014bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80007d6:	2200      	movs	r2, #0
 80007d8:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 80007dc:	4841      	ldr	r0, [pc, #260]	; (80008e4 <MX_GPIO_Init+0x1dc>)
 80007de:	f000 fe6d 	bl	80014bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80007e2:	2200      	movs	r2, #0
 80007e4:	2140      	movs	r1, #64	; 0x40
 80007e6:	4840      	ldr	r0, [pc, #256]	; (80008e8 <MX_GPIO_Init+0x1e0>)
 80007e8:	f000 fe68 	bl	80014bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007f2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80007f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f8:	2300      	movs	r3, #0
 80007fa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007fc:	f107 031c 	add.w	r3, r7, #28
 8000800:	4619      	mov	r1, r3
 8000802:	483a      	ldr	r0, [pc, #232]	; (80008ec <MX_GPIO_Init+0x1e4>)
 8000804:	f000 fcc8 	bl	8001198 <HAL_GPIO_Init>

  /*Configure GPIO pins : btnLEFT_Pin btnDOWN_Pin */
  GPIO_InitStruct.Pin = btnLEFT_Pin|btnDOWN_Pin;
 8000808:	2306      	movs	r3, #6
 800080a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800080c:	2300      	movs	r3, #0
 800080e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000810:	2300      	movs	r3, #0
 8000812:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000814:	f107 031c 	add.w	r3, r7, #28
 8000818:	4619      	mov	r1, r3
 800081a:	4835      	ldr	r0, [pc, #212]	; (80008f0 <MX_GPIO_Init+0x1e8>)
 800081c:	f000 fcbc 	bl	8001198 <HAL_GPIO_Init>

  /*Configure GPIO pins : btnA_Pin btnX_Pin btnB_Pin btnY_Pin
                           btnSTART_Pin */
  GPIO_InitStruct.Pin = btnA_Pin|btnX_Pin|btnB_Pin|btnY_Pin
 8000820:	233b      	movs	r3, #59	; 0x3b
 8000822:	61fb      	str	r3, [r7, #28]
                          |btnSTART_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000824:	2300      	movs	r3, #0
 8000826:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000828:	2300      	movs	r3, #0
 800082a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800082c:	f107 031c 	add.w	r3, r7, #28
 8000830:	4619      	mov	r1, r3
 8000832:	482e      	ldr	r0, [pc, #184]	; (80008ec <MX_GPIO_Init+0x1e4>)
 8000834:	f000 fcb0 	bl	8001198 <HAL_GPIO_Init>

  /*Configure GPIO pin : driverpin_Pin */
  GPIO_InitStruct.Pin = driverpin_Pin;
 8000838:	2308      	movs	r3, #8
 800083a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800083c:	2301      	movs	r3, #1
 800083e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000840:	2300      	movs	r3, #0
 8000842:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000844:	2300      	movs	r3, #0
 8000846:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(driverpin_GPIO_Port, &GPIO_InitStruct);
 8000848:	f107 031c 	add.w	r3, r7, #28
 800084c:	4619      	mov	r1, r3
 800084e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000852:	f000 fca1 	bl	8001198 <HAL_GPIO_Init>

  /*Configure GPIO pins : btnSELECT_Pin btnUP_Pin */
  GPIO_InitStruct.Pin = btnSELECT_Pin|btnUP_Pin;
 8000856:	2344      	movs	r3, #68	; 0x44
 8000858:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800085a:	2300      	movs	r3, #0
 800085c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085e:	2300      	movs	r3, #0
 8000860:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000862:	f107 031c 	add.w	r3, r7, #28
 8000866:	4619      	mov	r1, r3
 8000868:	481e      	ldr	r0, [pc, #120]	; (80008e4 <MX_GPIO_Init+0x1dc>)
 800086a:	f000 fc95 	bl	8001198 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 800086e:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000872:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000874:	2301      	movs	r3, #1
 8000876:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000878:	2300      	movs	r3, #0
 800087a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087c:	2300      	movs	r3, #0
 800087e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000880:	f107 031c 	add.w	r3, r7, #28
 8000884:	4619      	mov	r1, r3
 8000886:	4817      	ldr	r0, [pc, #92]	; (80008e4 <MX_GPIO_Init+0x1dc>)
 8000888:	f000 fc86 	bl	8001198 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800088c:	2320      	movs	r3, #32
 800088e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000890:	2300      	movs	r3, #0
 8000892:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000894:	2300      	movs	r3, #0
 8000896:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000898:	f107 031c 	add.w	r3, r7, #28
 800089c:	4619      	mov	r1, r3
 800089e:	4812      	ldr	r0, [pc, #72]	; (80008e8 <MX_GPIO_Init+0x1e0>)
 80008a0:	f000 fc7a 	bl	8001198 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008a4:	2340      	movs	r3, #64	; 0x40
 80008a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a8:	2301      	movs	r3, #1
 80008aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ac:	2300      	movs	r3, #0
 80008ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b0:	2300      	movs	r3, #0
 80008b2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008b4:	f107 031c 	add.w	r3, r7, #28
 80008b8:	4619      	mov	r1, r3
 80008ba:	480b      	ldr	r0, [pc, #44]	; (80008e8 <MX_GPIO_Init+0x1e0>)
 80008bc:	f000 fc6c 	bl	8001198 <HAL_GPIO_Init>

  /*Configure GPIO pins : HOTKEY_Pin btnRIGHT_Pin */
  GPIO_InitStruct.Pin = HOTKEY_Pin|btnRIGHT_Pin;
 80008c0:	23c0      	movs	r3, #192	; 0xc0
 80008c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008c4:	2300      	movs	r3, #0
 80008c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c8:	2300      	movs	r3, #0
 80008ca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008cc:	f107 031c 	add.w	r3, r7, #28
 80008d0:	4619      	mov	r1, r3
 80008d2:	4808      	ldr	r0, [pc, #32]	; (80008f4 <MX_GPIO_Init+0x1ec>)
 80008d4:	f000 fc60 	bl	8001198 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008d8:	bf00      	nop
 80008da:	3730      	adds	r7, #48	; 0x30
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	40021000 	.word	0x40021000
 80008e4:	48000400 	.word	0x48000400
 80008e8:	48001800 	.word	0x48001800
 80008ec:	48000800 	.word	0x48000800
 80008f0:	48001400 	.word	0x48001400
 80008f4:	48000c00 	.word	0x48000c00

080008f8 <checkkeys>:

/* USER CODE BEGIN 4 */
void checkkeys(void *argument)
{
 80008f8:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80008fc:	b0bf      	sub	sp, #252	; 0xfc
 80008fe:	af00      	add	r7, sp, #0
 8000900:	60f8      	str	r0, [r7, #12]
	// setup the list of keys
	const uint8_t keycount = 11; // 4 buttons + 4 directional + start + select + hotkey
 8000902:	230b      	movs	r3, #11
 8000904:	f887 30f6 	strb.w	r3, [r7, #246]	; 0xf6

	// A button
	capkey_t buttonA;
	buttonA.pinIndex = 0;
 8000908:	2300      	movs	r3, #0
 800090a:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
	//buttonA.pinName = "btnA";
	buttonA.gpioport = btnA_GPIO_Port;
 800090e:	4bb9      	ldr	r3, [pc, #740]	; (8000bf4 <checkkeys+0x2fc>)
 8000910:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	buttonA.gpiopin = btnA_Pin;
 8000914:	2301      	movs	r3, #1
 8000916:	f8a7 30e0 	strh.w	r3, [r7, #224]	; 0xe0
	buttonA.triggerTime = 3000;
 800091a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800091e:	f8a7 30e2 	strh.w	r3, [r7, #226]	; 0xe2
	buttonA.keyCode = 0x04;
 8000922:	2304      	movs	r3, #4
 8000924:	f887 30e8 	strb.w	r3, [r7, #232]	; 0xe8

	// B button
	capkey_t buttonB;
	buttonB.pinIndex = 1;
 8000928:	2301      	movs	r3, #1
 800092a:	f887 30c6 	strb.w	r3, [r7, #198]	; 0xc6
	buttonB.gpioport = btnB_GPIO_Port;
 800092e:	4bb1      	ldr	r3, [pc, #708]	; (8000bf4 <checkkeys+0x2fc>)
 8000930:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	buttonB.gpiopin = btnB_Pin;
 8000934:	2308      	movs	r3, #8
 8000936:	f8a7 30cc 	strh.w	r3, [r7, #204]	; 0xcc
	buttonB.triggerTime = 3000;
 800093a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800093e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
	buttonB.keyCode = 0x05;
 8000942:	2305      	movs	r3, #5
 8000944:	f887 30d4 	strb.w	r3, [r7, #212]	; 0xd4

	// X button
	capkey_t buttonX;
	buttonX.pinIndex = 2;
 8000948:	2302      	movs	r3, #2
 800094a:	f887 30b2 	strb.w	r3, [r7, #178]	; 0xb2
	buttonX.gpioport = btnX_GPIO_Port;
 800094e:	4ba9      	ldr	r3, [pc, #676]	; (8000bf4 <checkkeys+0x2fc>)
 8000950:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	buttonX.gpiopin = btnX_Pin;
 8000954:	2302      	movs	r3, #2
 8000956:	f8a7 30b8 	strh.w	r3, [r7, #184]	; 0xb8
	buttonX.triggerTime = 3000;
 800095a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800095e:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba
	buttonX.keyCode = 0x1B;
 8000962:	231b      	movs	r3, #27
 8000964:	f887 30c0 	strb.w	r3, [r7, #192]	; 0xc0

	// Y button
	capkey_t buttonY;
	buttonY.pinIndex = 3;
 8000968:	2303      	movs	r3, #3
 800096a:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
	buttonY.gpioport = btnY_GPIO_Port;
 800096e:	4ba1      	ldr	r3, [pc, #644]	; (8000bf4 <checkkeys+0x2fc>)
 8000970:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	buttonY.gpiopin = btnY_Pin;
 8000974:	2310      	movs	r3, #16
 8000976:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
	buttonY.triggerTime = 3000;
 800097a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800097e:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
	buttonY.keyCode = 0x1C;
 8000982:	231c      	movs	r3, #28
 8000984:	f887 30ac 	strb.w	r3, [r7, #172]	; 0xac

	// up button
	capkey_t buttonUp;
	buttonUp.pinIndex = 4;
 8000988:	2304      	movs	r3, #4
 800098a:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
	buttonUp.gpioport = btnUP_GPIO_Port;
 800098e:	4b9a      	ldr	r3, [pc, #616]	; (8000bf8 <checkkeys+0x300>)
 8000990:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	buttonUp.gpiopin = btnUP_Pin;
 8000994:	2340      	movs	r3, #64	; 0x40
 8000996:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
	buttonUp.triggerTime = 3000;
 800099a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800099e:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
	buttonUp.keyCode = 0x52;
 80009a2:	2352      	movs	r3, #82	; 0x52
 80009a4:	f887 3098 	strb.w	r3, [r7, #152]	; 0x98

	// down button
	capkey_t buttonDown;
	buttonDown.pinIndex = 5;
 80009a8:	2305      	movs	r3, #5
 80009aa:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	buttonDown.gpioport = btnDOWN_GPIO_Port;
 80009ae:	4b93      	ldr	r3, [pc, #588]	; (8000bfc <checkkeys+0x304>)
 80009b0:	67bb      	str	r3, [r7, #120]	; 0x78
	buttonDown.gpiopin = btnDOWN_Pin;
 80009b2:	2304      	movs	r3, #4
 80009b4:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
	buttonDown.triggerTime = 3000;
 80009b8:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80009bc:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
	buttonDown.keyCode = 0x51;
 80009c0:	2351      	movs	r3, #81	; 0x51
 80009c2:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84

	// left button
	capkey_t buttonLeft;
	buttonLeft.pinIndex = 6;
 80009c6:	2306      	movs	r3, #6
 80009c8:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
	buttonLeft.gpioport = btnLEFT_GPIO_Port;
 80009cc:	4b8b      	ldr	r3, [pc, #556]	; (8000bfc <checkkeys+0x304>)
 80009ce:	667b      	str	r3, [r7, #100]	; 0x64
	buttonLeft.gpiopin = btnLEFT_Pin;
 80009d0:	2302      	movs	r3, #2
 80009d2:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
	buttonLeft.triggerTime = 3000;
 80009d6:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80009da:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
	buttonLeft.keyCode = 0x50;
 80009de:	2350      	movs	r3, #80	; 0x50
 80009e0:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70

	// right button
	capkey_t buttonRight;
	buttonRight.pinIndex = 7;
 80009e4:	2307      	movs	r3, #7
 80009e6:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	buttonRight.gpioport = btnRIGHT_GPIO_Port;
 80009ea:	4b85      	ldr	r3, [pc, #532]	; (8000c00 <checkkeys+0x308>)
 80009ec:	653b      	str	r3, [r7, #80]	; 0x50
	buttonRight.gpiopin = btnRIGHT_Pin;
 80009ee:	2380      	movs	r3, #128	; 0x80
 80009f0:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
	buttonRight.triggerTime = 3000;
 80009f4:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80009f8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
	buttonRight.keyCode = 0x4F;
 80009fc:	234f      	movs	r3, #79	; 0x4f
 80009fe:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c

	// select button
	capkey_t buttonSelect;
	buttonSelect.pinIndex = 8;
 8000a02:	2308      	movs	r3, #8
 8000a04:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	buttonSelect.gpioport = btnSELECT_GPIO_Port;
 8000a08:	4b7b      	ldr	r3, [pc, #492]	; (8000bf8 <checkkeys+0x300>)
 8000a0a:	63fb      	str	r3, [r7, #60]	; 0x3c
	buttonSelect.gpiopin = btnSELECT_Pin;
 8000a0c:	2304      	movs	r3, #4
 8000a0e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
	buttonSelect.triggerTime = 3000;
 8000a12:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000a16:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
	buttonSelect.keyCode = 0x18; // scan key code for u
 8000a1a:	2318      	movs	r3, #24
 8000a1c:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48

	// start button
	capkey_t buttonStart;
	buttonStart.pinIndex = 9;
 8000a20:	2309      	movs	r3, #9
 8000a22:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	buttonStart.gpioport = btnSTART_GPIO_Port;
 8000a26:	4b73      	ldr	r3, [pc, #460]	; (8000bf4 <checkkeys+0x2fc>)
 8000a28:	62bb      	str	r3, [r7, #40]	; 0x28
	buttonStart.gpiopin = btnSTART_Pin;
 8000a2a:	2320      	movs	r3, #32
 8000a2c:	85bb      	strh	r3, [r7, #44]	; 0x2c
	buttonStart.triggerTime = 3000;
 8000a2e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000a32:	85fb      	strh	r3, [r7, #46]	; 0x2e
	buttonStart.keyCode = 0x19; // scan key code for v
 8000a34:	2319      	movs	r3, #25
 8000a36:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

	// HOTKEY
	capkey_t buttonHotkey;
	buttonHotkey.pinIndex = 10;
 8000a3a:	230a      	movs	r3, #10
 8000a3c:	74bb      	strb	r3, [r7, #18]
	buttonHotkey.gpioport = HOTKEY_GPIO_Port;
 8000a3e:	4b70      	ldr	r3, [pc, #448]	; (8000c00 <checkkeys+0x308>)
 8000a40:	617b      	str	r3, [r7, #20]
	buttonHotkey.gpiopin = HOTKEY_Pin;
 8000a42:	2340      	movs	r3, #64	; 0x40
 8000a44:	833b      	strh	r3, [r7, #24]
	buttonHotkey.triggerTime = 3000;
 8000a46:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000a4a:	837b      	strh	r3, [r7, #26]
	buttonHotkey.keyCode = 0x0B; // scan key code for h
 8000a4c:	230b      	movs	r3, #11
 8000a4e:	f887 3020 	strb.w	r3, [r7, #32]

	capkey_t buttons[keycount];
 8000a52:	f897 30f6 	ldrb.w	r3, [r7, #246]	; 0xf6
 8000a56:	3b01      	subs	r3, #1
 8000a58:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8000a5c:	f897 30f6 	ldrb.w	r3, [r7, #246]	; 0xf6
 8000a60:	2200      	movs	r2, #0
 8000a62:	603b      	str	r3, [r7, #0]
 8000a64:	607a      	str	r2, [r7, #4]
 8000a66:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000a6a:	f04f 0000 	mov.w	r0, #0
 8000a6e:	f04f 0100 	mov.w	r1, #0
 8000a72:	0099      	lsls	r1, r3, #2
 8000a74:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8000a78:	0090      	lsls	r0, r2, #2
 8000a7a:	4602      	mov	r2, r0
 8000a7c:	460b      	mov	r3, r1
 8000a7e:	6839      	ldr	r1, [r7, #0]
 8000a80:	eb12 0801 	adds.w	r8, r2, r1
 8000a84:	6879      	ldr	r1, [r7, #4]
 8000a86:	eb43 0901 	adc.w	r9, r3, r1
 8000a8a:	f04f 0200 	mov.w	r2, #0
 8000a8e:	f04f 0300 	mov.w	r3, #0
 8000a92:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8000a96:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8000a9a:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8000a9e:	f897 30f6 	ldrb.w	r3, [r7, #246]	; 0xf6
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	469a      	mov	sl, r3
 8000aa6:	4693      	mov	fp, r2
 8000aa8:	4652      	mov	r2, sl
 8000aaa:	465b      	mov	r3, fp
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	f04f 0100 	mov.w	r1, #0
 8000ab4:	0099      	lsls	r1, r3, #2
 8000ab6:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8000aba:	0090      	lsls	r0, r2, #2
 8000abc:	4602      	mov	r2, r0
 8000abe:	460b      	mov	r3, r1
 8000ac0:	eb12 040a 	adds.w	r4, r2, sl
 8000ac4:	eb43 050b 	adc.w	r5, r3, fp
 8000ac8:	f04f 0200 	mov.w	r2, #0
 8000acc:	f04f 0300 	mov.w	r3, #0
 8000ad0:	016b      	lsls	r3, r5, #5
 8000ad2:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8000ad6:	0162      	lsls	r2, r4, #5
 8000ad8:	f897 20f6 	ldrb.w	r2, [r7, #246]	; 0xf6
 8000adc:	4613      	mov	r3, r2
 8000ade:	009b      	lsls	r3, r3, #2
 8000ae0:	4413      	add	r3, r2
 8000ae2:	009b      	lsls	r3, r3, #2
 8000ae4:	3307      	adds	r3, #7
 8000ae6:	08db      	lsrs	r3, r3, #3
 8000ae8:	00db      	lsls	r3, r3, #3
 8000aea:	ebad 0d03 	sub.w	sp, sp, r3
 8000aee:	466b      	mov	r3, sp
 8000af0:	3303      	adds	r3, #3
 8000af2:	089b      	lsrs	r3, r3, #2
 8000af4:	009b      	lsls	r3, r3, #2
 8000af6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
	buttons[0] = buttonA;
 8000afa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000afe:	461d      	mov	r5, r3
 8000b00:	f107 04d8 	add.w	r4, r7, #216	; 0xd8
 8000b04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b06:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b08:	6823      	ldr	r3, [r4, #0]
 8000b0a:	602b      	str	r3, [r5, #0]
	buttons[1] = buttonB;
 8000b0c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000b10:	f103 0414 	add.w	r4, r3, #20
 8000b14:	f107 05c4 	add.w	r5, r7, #196	; 0xc4
 8000b18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b1c:	682b      	ldr	r3, [r5, #0]
 8000b1e:	6023      	str	r3, [r4, #0]
	buttons[2] = buttonX;
 8000b20:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000b24:	f103 0428 	add.w	r4, r3, #40	; 0x28
 8000b28:	f107 05b0 	add.w	r5, r7, #176	; 0xb0
 8000b2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b30:	682b      	ldr	r3, [r5, #0]
 8000b32:	6023      	str	r3, [r4, #0]
	buttons[3] = buttonY;
 8000b34:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000b38:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 8000b3c:	f107 059c 	add.w	r5, r7, #156	; 0x9c
 8000b40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b44:	682b      	ldr	r3, [r5, #0]
 8000b46:	6023      	str	r3, [r4, #0]
	buttons[4] = buttonUp;
 8000b48:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000b4c:	f103 0450 	add.w	r4, r3, #80	; 0x50
 8000b50:	f107 0588 	add.w	r5, r7, #136	; 0x88
 8000b54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b58:	682b      	ldr	r3, [r5, #0]
 8000b5a:	6023      	str	r3, [r4, #0]
	buttons[5] = buttonDown;
 8000b5c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000b60:	f103 0464 	add.w	r4, r3, #100	; 0x64
 8000b64:	f107 0574 	add.w	r5, r7, #116	; 0x74
 8000b68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b6c:	682b      	ldr	r3, [r5, #0]
 8000b6e:	6023      	str	r3, [r4, #0]
	buttons[6] = buttonLeft;
 8000b70:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000b74:	f103 0478 	add.w	r4, r3, #120	; 0x78
 8000b78:	f107 0560 	add.w	r5, r7, #96	; 0x60
 8000b7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b80:	682b      	ldr	r3, [r5, #0]
 8000b82:	6023      	str	r3, [r4, #0]
	buttons[7] = buttonRight;
 8000b84:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000b88:	f103 048c 	add.w	r4, r3, #140	; 0x8c
 8000b8c:	f107 054c 	add.w	r5, r7, #76	; 0x4c
 8000b90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b94:	682b      	ldr	r3, [r5, #0]
 8000b96:	6023      	str	r3, [r4, #0]
	buttons[8] = buttonSelect;
 8000b98:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000b9c:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 8000ba0:	f107 0538 	add.w	r5, r7, #56	; 0x38
 8000ba4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ba6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ba8:	682b      	ldr	r3, [r5, #0]
 8000baa:	6023      	str	r3, [r4, #0]
	buttons[9] = buttonStart;
 8000bac:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000bb0:	f103 04b4 	add.w	r4, r3, #180	; 0xb4
 8000bb4:	f107 0524 	add.w	r5, r7, #36	; 0x24
 8000bb8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bbc:	682b      	ldr	r3, [r5, #0]
 8000bbe:	6023      	str	r3, [r4, #0]
	buttons[10] = buttonHotkey;
 8000bc0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000bc4:	f103 04c8 	add.w	r4, r3, #200	; 0xc8
 8000bc8:	f107 0510 	add.w	r5, r7, #16
 8000bcc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bd0:	682b      	ldr	r3, [r5, #0]
 8000bd2:	6023      	str	r3, [r4, #0]

	// and then interate through that list
	for(;;)
	{
		for(uint8_t i=0;i<keycount;i++)
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
 8000bda:	e004      	b.n	8000be6 <checkkeys+0x2ee>
 8000bdc:	f897 30f7 	ldrb.w	r3, [r7, #247]	; 0xf7
 8000be0:	3301      	adds	r3, #1
 8000be2:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
 8000be6:	f897 20f7 	ldrb.w	r2, [r7, #247]	; 0xf7
 8000bea:	f897 30f6 	ldrb.w	r3, [r7, #246]	; 0xf6
 8000bee:	429a      	cmp	r2, r3
 8000bf0:	d3f4      	bcc.n	8000bdc <checkkeys+0x2e4>
 8000bf2:	e7ef      	b.n	8000bd4 <checkkeys+0x2dc>
 8000bf4:	48000800 	.word	0x48000800
 8000bf8:	48000400 	.word	0x48000400
 8000bfc:	48001400 	.word	0x48001400
 8000c00:	48000c00 	.word	0x48000c00

08000c04 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000c0c:	f009 feb6 	bl	800a97c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000c10:	2001      	movs	r0, #1
 8000c12:	f007 fa41 	bl	8008098 <osDelay>
 8000c16:	e7fb      	b.n	8000c10 <StartDefaultTask+0xc>

08000c18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c1c:	b672      	cpsid	i
}
 8000c1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c20:	e7fe      	b.n	8000c20 <Error_Handler+0x8>
	...

08000c24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c2a:	4b11      	ldr	r3, [pc, #68]	; (8000c70 <HAL_MspInit+0x4c>)
 8000c2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c2e:	4a10      	ldr	r2, [pc, #64]	; (8000c70 <HAL_MspInit+0x4c>)
 8000c30:	f043 0301 	orr.w	r3, r3, #1
 8000c34:	6613      	str	r3, [r2, #96]	; 0x60
 8000c36:	4b0e      	ldr	r3, [pc, #56]	; (8000c70 <HAL_MspInit+0x4c>)
 8000c38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c3a:	f003 0301 	and.w	r3, r3, #1
 8000c3e:	607b      	str	r3, [r7, #4]
 8000c40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c42:	4b0b      	ldr	r3, [pc, #44]	; (8000c70 <HAL_MspInit+0x4c>)
 8000c44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c46:	4a0a      	ldr	r2, [pc, #40]	; (8000c70 <HAL_MspInit+0x4c>)
 8000c48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c4c:	6593      	str	r3, [r2, #88]	; 0x58
 8000c4e:	4b08      	ldr	r3, [pc, #32]	; (8000c70 <HAL_MspInit+0x4c>)
 8000c50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c56:	603b      	str	r3, [r7, #0]
 8000c58:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	210f      	movs	r1, #15
 8000c5e:	f06f 0001 	mvn.w	r0, #1
 8000c62:	f000 fa62 	bl	800112a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c66:	bf00      	nop
 8000c68:	3708      	adds	r7, #8
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	40021000 	.word	0x40021000

08000c74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b0ac      	sub	sp, #176	; 0xb0
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c7c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000c80:	2200      	movs	r2, #0
 8000c82:	601a      	str	r2, [r3, #0]
 8000c84:	605a      	str	r2, [r3, #4]
 8000c86:	609a      	str	r2, [r3, #8]
 8000c88:	60da      	str	r2, [r3, #12]
 8000c8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c8c:	f107 0310 	add.w	r3, r7, #16
 8000c90:	228c      	movs	r2, #140	; 0x8c
 8000c92:	2100      	movs	r1, #0
 8000c94:	4618      	mov	r0, r3
 8000c96:	f00a fbfb 	bl	800b490 <memset>
  if(huart->Instance==LPUART1)
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	4a22      	ldr	r2, [pc, #136]	; (8000d28 <HAL_UART_MspInit+0xb4>)
 8000ca0:	4293      	cmp	r3, r2
 8000ca2:	d13d      	bne.n	8000d20 <HAL_UART_MspInit+0xac>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000ca4:	2320      	movs	r3, #32
 8000ca6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cac:	f107 0310 	add.w	r3, r7, #16
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f002 fc7d 	bl	80035b0 <HAL_RCCEx_PeriphCLKConfig>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000cbc:	f7ff ffac 	bl	8000c18 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000cc0:	4b1a      	ldr	r3, [pc, #104]	; (8000d2c <HAL_UART_MspInit+0xb8>)
 8000cc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000cc4:	4a19      	ldr	r2, [pc, #100]	; (8000d2c <HAL_UART_MspInit+0xb8>)
 8000cc6:	f043 0301 	orr.w	r3, r3, #1
 8000cca:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000ccc:	4b17      	ldr	r3, [pc, #92]	; (8000d2c <HAL_UART_MspInit+0xb8>)
 8000cce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000cd0:	f003 0301 	and.w	r3, r3, #1
 8000cd4:	60fb      	str	r3, [r7, #12]
 8000cd6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000cd8:	4b14      	ldr	r3, [pc, #80]	; (8000d2c <HAL_UART_MspInit+0xb8>)
 8000cda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cdc:	4a13      	ldr	r2, [pc, #76]	; (8000d2c <HAL_UART_MspInit+0xb8>)
 8000cde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ce2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ce4:	4b11      	ldr	r3, [pc, #68]	; (8000d2c <HAL_UART_MspInit+0xb8>)
 8000ce6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ce8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cec:	60bb      	str	r3, [r7, #8]
 8000cee:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8000cf0:	f001 fe10 	bl	8002914 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000cf4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000cf8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfc:	2302      	movs	r3, #2
 8000cfe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d02:	2300      	movs	r3, #0
 8000d04:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d08:	2303      	movs	r3, #3
 8000d0a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000d0e:	2308      	movs	r3, #8
 8000d10:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d14:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d18:	4619      	mov	r1, r3
 8000d1a:	4805      	ldr	r0, [pc, #20]	; (8000d30 <HAL_UART_MspInit+0xbc>)
 8000d1c:	f000 fa3c 	bl	8001198 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000d20:	bf00      	nop
 8000d22:	37b0      	adds	r7, #176	; 0xb0
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	40008000 	.word	0x40008000
 8000d2c:	40021000 	.word	0x40021000
 8000d30:	48001800 	.word	0x48001800

08000d34 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b085      	sub	sp, #20
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d44:	d10b      	bne.n	8000d5e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d46:	4b09      	ldr	r3, [pc, #36]	; (8000d6c <HAL_TIM_Base_MspInit+0x38>)
 8000d48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d4a:	4a08      	ldr	r2, [pc, #32]	; (8000d6c <HAL_TIM_Base_MspInit+0x38>)
 8000d4c:	f043 0301 	orr.w	r3, r3, #1
 8000d50:	6593      	str	r3, [r2, #88]	; 0x58
 8000d52:	4b06      	ldr	r3, [pc, #24]	; (8000d6c <HAL_TIM_Base_MspInit+0x38>)
 8000d54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d56:	f003 0301 	and.w	r3, r3, #1
 8000d5a:	60fb      	str	r3, [r7, #12]
 8000d5c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000d5e:	bf00      	nop
 8000d60:	3714      	adds	r7, #20
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	40021000 	.word	0x40021000

08000d70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d74:	e7fe      	b.n	8000d74 <NMI_Handler+0x4>

08000d76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d76:	b480      	push	{r7}
 8000d78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d7a:	e7fe      	b.n	8000d7a <HardFault_Handler+0x4>

08000d7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d80:	e7fe      	b.n	8000d80 <MemManage_Handler+0x4>

08000d82 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d82:	b480      	push	{r7}
 8000d84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d86:	e7fe      	b.n	8000d86 <BusFault_Handler+0x4>

08000d88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d8c:	e7fe      	b.n	8000d8c <UsageFault_Handler+0x4>

08000d8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d8e:	b480      	push	{r7}
 8000d90:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d92:	bf00      	nop
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr

08000d9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000da0:	f000 f8a4 	bl	8000eec <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000da4:	f008 fd86 	bl	80098b4 <xTaskGetSchedulerState>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b01      	cmp	r3, #1
 8000dac:	d001      	beq.n	8000db2 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000dae:	f009 fb6b 	bl	800a488 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000db2:	bf00      	nop
 8000db4:	bd80      	pop	{r7, pc}
	...

08000db8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000dbc:	4802      	ldr	r0, [pc, #8]	; (8000dc8 <OTG_FS_IRQHandler+0x10>)
 8000dbe:	f000 fce8 	bl	8001792 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000dc2:	bf00      	nop
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	20002014 	.word	0x20002014

08000dcc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000dd0:	4b06      	ldr	r3, [pc, #24]	; (8000dec <SystemInit+0x20>)
 8000dd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dd6:	4a05      	ldr	r2, [pc, #20]	; (8000dec <SystemInit+0x20>)
 8000dd8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ddc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000de0:	bf00      	nop
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	e000ed00 	.word	0xe000ed00

08000df0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000df0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e28 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000df4:	f7ff ffea 	bl	8000dcc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000df8:	480c      	ldr	r0, [pc, #48]	; (8000e2c <LoopForever+0x6>)
  ldr r1, =_edata
 8000dfa:	490d      	ldr	r1, [pc, #52]	; (8000e30 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000dfc:	4a0d      	ldr	r2, [pc, #52]	; (8000e34 <LoopForever+0xe>)
  movs r3, #0
 8000dfe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e00:	e002      	b.n	8000e08 <LoopCopyDataInit>

08000e02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e06:	3304      	adds	r3, #4

08000e08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e0c:	d3f9      	bcc.n	8000e02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e0e:	4a0a      	ldr	r2, [pc, #40]	; (8000e38 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e10:	4c0a      	ldr	r4, [pc, #40]	; (8000e3c <LoopForever+0x16>)
  movs r3, #0
 8000e12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e14:	e001      	b.n	8000e1a <LoopFillZerobss>

08000e16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e18:	3204      	adds	r2, #4

08000e1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e1c:	d3fb      	bcc.n	8000e16 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e1e:	f00a fb3f 	bl	800b4a0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e22:	f7ff fb63 	bl	80004ec <main>

08000e26 <LoopForever>:

LoopForever:
    b LoopForever
 8000e26:	e7fe      	b.n	8000e26 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000e28:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000e2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e30:	20000130 	.word	0x20000130
  ldr r2, =_sidata
 8000e34:	0800b638 	.word	0x0800b638
  ldr r2, =_sbss
 8000e38:	20000130 	.word	0x20000130
  ldr r4, =_ebss
 8000e3c:	20002534 	.word	0x20002534

08000e40 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e40:	e7fe      	b.n	8000e40 <ADC1_2_IRQHandler>

08000e42 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e42:	b580      	push	{r7, lr}
 8000e44:	b082      	sub	sp, #8
 8000e46:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e4c:	2003      	movs	r0, #3
 8000e4e:	f000 f961 	bl	8001114 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e52:	200f      	movs	r0, #15
 8000e54:	f000 f80e 	bl	8000e74 <HAL_InitTick>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d002      	beq.n	8000e64 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	71fb      	strb	r3, [r7, #7]
 8000e62:	e001      	b.n	8000e68 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e64:	f7ff fede 	bl	8000c24 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e68:	79fb      	ldrb	r3, [r7, #7]
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	3708      	adds	r7, #8
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
	...

08000e74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b084      	sub	sp, #16
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000e80:	4b17      	ldr	r3, [pc, #92]	; (8000ee0 <HAL_InitTick+0x6c>)
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d023      	beq.n	8000ed0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000e88:	4b16      	ldr	r3, [pc, #88]	; (8000ee4 <HAL_InitTick+0x70>)
 8000e8a:	681a      	ldr	r2, [r3, #0]
 8000e8c:	4b14      	ldr	r3, [pc, #80]	; (8000ee0 <HAL_InitTick+0x6c>)
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	4619      	mov	r1, r3
 8000e92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e96:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f000 f96d 	bl	800117e <HAL_SYSTICK_Config>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d10f      	bne.n	8000eca <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	2b0f      	cmp	r3, #15
 8000eae:	d809      	bhi.n	8000ec4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	6879      	ldr	r1, [r7, #4]
 8000eb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000eb8:	f000 f937 	bl	800112a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ebc:	4a0a      	ldr	r2, [pc, #40]	; (8000ee8 <HAL_InitTick+0x74>)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	6013      	str	r3, [r2, #0]
 8000ec2:	e007      	b.n	8000ed4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	73fb      	strb	r3, [r7, #15]
 8000ec8:	e004      	b.n	8000ed4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	73fb      	strb	r3, [r7, #15]
 8000ece:	e001      	b.n	8000ed4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ed4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	3710      	adds	r7, #16
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	20000008 	.word	0x20000008
 8000ee4:	20000000 	.word	0x20000000
 8000ee8:	20000004 	.word	0x20000004

08000eec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ef0:	4b06      	ldr	r3, [pc, #24]	; (8000f0c <HAL_IncTick+0x20>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	461a      	mov	r2, r3
 8000ef6:	4b06      	ldr	r3, [pc, #24]	; (8000f10 <HAL_IncTick+0x24>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4413      	add	r3, r2
 8000efc:	4a04      	ldr	r2, [pc, #16]	; (8000f10 <HAL_IncTick+0x24>)
 8000efe:	6013      	str	r3, [r2, #0]
}
 8000f00:	bf00      	nop
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	20000008 	.word	0x20000008
 8000f10:	20000228 	.word	0x20000228

08000f14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  return uwTick;
 8000f18:	4b03      	ldr	r3, [pc, #12]	; (8000f28 <HAL_GetTick+0x14>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	20000228 	.word	0x20000228

08000f2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b084      	sub	sp, #16
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f34:	f7ff ffee 	bl	8000f14 <HAL_GetTick>
 8000f38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000f44:	d005      	beq.n	8000f52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000f46:	4b0a      	ldr	r3, [pc, #40]	; (8000f70 <HAL_Delay+0x44>)
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	461a      	mov	r2, r3
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	4413      	add	r3, r2
 8000f50:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f52:	bf00      	nop
 8000f54:	f7ff ffde 	bl	8000f14 <HAL_GetTick>
 8000f58:	4602      	mov	r2, r0
 8000f5a:	68bb      	ldr	r3, [r7, #8]
 8000f5c:	1ad3      	subs	r3, r2, r3
 8000f5e:	68fa      	ldr	r2, [r7, #12]
 8000f60:	429a      	cmp	r2, r3
 8000f62:	d8f7      	bhi.n	8000f54 <HAL_Delay+0x28>
  {
  }
}
 8000f64:	bf00      	nop
 8000f66:	bf00      	nop
 8000f68:	3710      	adds	r7, #16
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	20000008 	.word	0x20000008

08000f74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b085      	sub	sp, #20
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	f003 0307 	and.w	r3, r3, #7
 8000f82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f84:	4b0c      	ldr	r3, [pc, #48]	; (8000fb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000f86:	68db      	ldr	r3, [r3, #12]
 8000f88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f8a:	68ba      	ldr	r2, [r7, #8]
 8000f8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f90:	4013      	ands	r3, r2
 8000f92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fa0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fa4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fa6:	4a04      	ldr	r2, [pc, #16]	; (8000fb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	60d3      	str	r3, [r2, #12]
}
 8000fac:	bf00      	nop
 8000fae:	3714      	adds	r7, #20
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr
 8000fb8:	e000ed00 	.word	0xe000ed00

08000fbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fc0:	4b04      	ldr	r3, [pc, #16]	; (8000fd4 <__NVIC_GetPriorityGrouping+0x18>)
 8000fc2:	68db      	ldr	r3, [r3, #12]
 8000fc4:	0a1b      	lsrs	r3, r3, #8
 8000fc6:	f003 0307 	and.w	r3, r3, #7
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr
 8000fd4:	e000ed00 	.word	0xe000ed00

08000fd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	4603      	mov	r3, r0
 8000fe0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	db0b      	blt.n	8001002 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fea:	79fb      	ldrb	r3, [r7, #7]
 8000fec:	f003 021f 	and.w	r2, r3, #31
 8000ff0:	4907      	ldr	r1, [pc, #28]	; (8001010 <__NVIC_EnableIRQ+0x38>)
 8000ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff6:	095b      	lsrs	r3, r3, #5
 8000ff8:	2001      	movs	r0, #1
 8000ffa:	fa00 f202 	lsl.w	r2, r0, r2
 8000ffe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001002:	bf00      	nop
 8001004:	370c      	adds	r7, #12
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	e000e100 	.word	0xe000e100

08001014 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
 800101a:	4603      	mov	r3, r0
 800101c:	6039      	str	r1, [r7, #0]
 800101e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001020:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001024:	2b00      	cmp	r3, #0
 8001026:	db0a      	blt.n	800103e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	b2da      	uxtb	r2, r3
 800102c:	490c      	ldr	r1, [pc, #48]	; (8001060 <__NVIC_SetPriority+0x4c>)
 800102e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001032:	0112      	lsls	r2, r2, #4
 8001034:	b2d2      	uxtb	r2, r2
 8001036:	440b      	add	r3, r1
 8001038:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800103c:	e00a      	b.n	8001054 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	b2da      	uxtb	r2, r3
 8001042:	4908      	ldr	r1, [pc, #32]	; (8001064 <__NVIC_SetPriority+0x50>)
 8001044:	79fb      	ldrb	r3, [r7, #7]
 8001046:	f003 030f 	and.w	r3, r3, #15
 800104a:	3b04      	subs	r3, #4
 800104c:	0112      	lsls	r2, r2, #4
 800104e:	b2d2      	uxtb	r2, r2
 8001050:	440b      	add	r3, r1
 8001052:	761a      	strb	r2, [r3, #24]
}
 8001054:	bf00      	nop
 8001056:	370c      	adds	r7, #12
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr
 8001060:	e000e100 	.word	0xe000e100
 8001064:	e000ed00 	.word	0xe000ed00

08001068 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001068:	b480      	push	{r7}
 800106a:	b089      	sub	sp, #36	; 0x24
 800106c:	af00      	add	r7, sp, #0
 800106e:	60f8      	str	r0, [r7, #12]
 8001070:	60b9      	str	r1, [r7, #8]
 8001072:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	f003 0307 	and.w	r3, r3, #7
 800107a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800107c:	69fb      	ldr	r3, [r7, #28]
 800107e:	f1c3 0307 	rsb	r3, r3, #7
 8001082:	2b04      	cmp	r3, #4
 8001084:	bf28      	it	cs
 8001086:	2304      	movcs	r3, #4
 8001088:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	3304      	adds	r3, #4
 800108e:	2b06      	cmp	r3, #6
 8001090:	d902      	bls.n	8001098 <NVIC_EncodePriority+0x30>
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	3b03      	subs	r3, #3
 8001096:	e000      	b.n	800109a <NVIC_EncodePriority+0x32>
 8001098:	2300      	movs	r3, #0
 800109a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800109c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80010a0:	69bb      	ldr	r3, [r7, #24]
 80010a2:	fa02 f303 	lsl.w	r3, r2, r3
 80010a6:	43da      	mvns	r2, r3
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	401a      	ands	r2, r3
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010b0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	fa01 f303 	lsl.w	r3, r1, r3
 80010ba:	43d9      	mvns	r1, r3
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010c0:	4313      	orrs	r3, r2
         );
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3724      	adds	r7, #36	; 0x24
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
	...

080010d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	3b01      	subs	r3, #1
 80010dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010e0:	d301      	bcc.n	80010e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010e2:	2301      	movs	r3, #1
 80010e4:	e00f      	b.n	8001106 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010e6:	4a0a      	ldr	r2, [pc, #40]	; (8001110 <SysTick_Config+0x40>)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	3b01      	subs	r3, #1
 80010ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010ee:	210f      	movs	r1, #15
 80010f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80010f4:	f7ff ff8e 	bl	8001014 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010f8:	4b05      	ldr	r3, [pc, #20]	; (8001110 <SysTick_Config+0x40>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010fe:	4b04      	ldr	r3, [pc, #16]	; (8001110 <SysTick_Config+0x40>)
 8001100:	2207      	movs	r2, #7
 8001102:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001104:	2300      	movs	r3, #0
}
 8001106:	4618      	mov	r0, r3
 8001108:	3708      	adds	r7, #8
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	e000e010 	.word	0xe000e010

08001114 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800111c:	6878      	ldr	r0, [r7, #4]
 800111e:	f7ff ff29 	bl	8000f74 <__NVIC_SetPriorityGrouping>
}
 8001122:	bf00      	nop
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}

0800112a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800112a:	b580      	push	{r7, lr}
 800112c:	b086      	sub	sp, #24
 800112e:	af00      	add	r7, sp, #0
 8001130:	4603      	mov	r3, r0
 8001132:	60b9      	str	r1, [r7, #8]
 8001134:	607a      	str	r2, [r7, #4]
 8001136:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001138:	2300      	movs	r3, #0
 800113a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800113c:	f7ff ff3e 	bl	8000fbc <__NVIC_GetPriorityGrouping>
 8001140:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001142:	687a      	ldr	r2, [r7, #4]
 8001144:	68b9      	ldr	r1, [r7, #8]
 8001146:	6978      	ldr	r0, [r7, #20]
 8001148:	f7ff ff8e 	bl	8001068 <NVIC_EncodePriority>
 800114c:	4602      	mov	r2, r0
 800114e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001152:	4611      	mov	r1, r2
 8001154:	4618      	mov	r0, r3
 8001156:	f7ff ff5d 	bl	8001014 <__NVIC_SetPriority>
}
 800115a:	bf00      	nop
 800115c:	3718      	adds	r7, #24
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}

08001162 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001162:	b580      	push	{r7, lr}
 8001164:	b082      	sub	sp, #8
 8001166:	af00      	add	r7, sp, #0
 8001168:	4603      	mov	r3, r0
 800116a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800116c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001170:	4618      	mov	r0, r3
 8001172:	f7ff ff31 	bl	8000fd8 <__NVIC_EnableIRQ>
}
 8001176:	bf00      	nop
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}

0800117e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800117e:	b580      	push	{r7, lr}
 8001180:	b082      	sub	sp, #8
 8001182:	af00      	add	r7, sp, #0
 8001184:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001186:	6878      	ldr	r0, [r7, #4]
 8001188:	f7ff ffa2 	bl	80010d0 <SysTick_Config>
 800118c:	4603      	mov	r3, r0
}
 800118e:	4618      	mov	r0, r3
 8001190:	3708      	adds	r7, #8
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
	...

08001198 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001198:	b480      	push	{r7}
 800119a:	b087      	sub	sp, #28
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011a2:	2300      	movs	r3, #0
 80011a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011a6:	e166      	b.n	8001476 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	2101      	movs	r1, #1
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	fa01 f303 	lsl.w	r3, r1, r3
 80011b4:	4013      	ands	r3, r2
 80011b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	f000 8158 	beq.w	8001470 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	f003 0303 	and.w	r3, r3, #3
 80011c8:	2b01      	cmp	r3, #1
 80011ca:	d005      	beq.n	80011d8 <HAL_GPIO_Init+0x40>
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f003 0303 	and.w	r3, r3, #3
 80011d4:	2b02      	cmp	r3, #2
 80011d6:	d130      	bne.n	800123a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	689b      	ldr	r3, [r3, #8]
 80011dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	005b      	lsls	r3, r3, #1
 80011e2:	2203      	movs	r2, #3
 80011e4:	fa02 f303 	lsl.w	r3, r2, r3
 80011e8:	43db      	mvns	r3, r3
 80011ea:	693a      	ldr	r2, [r7, #16]
 80011ec:	4013      	ands	r3, r2
 80011ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	68da      	ldr	r2, [r3, #12]
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	005b      	lsls	r3, r3, #1
 80011f8:	fa02 f303 	lsl.w	r3, r2, r3
 80011fc:	693a      	ldr	r2, [r7, #16]
 80011fe:	4313      	orrs	r3, r2
 8001200:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	693a      	ldr	r2, [r7, #16]
 8001206:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800120e:	2201      	movs	r2, #1
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	fa02 f303 	lsl.w	r3, r2, r3
 8001216:	43db      	mvns	r3, r3
 8001218:	693a      	ldr	r2, [r7, #16]
 800121a:	4013      	ands	r3, r2
 800121c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	091b      	lsrs	r3, r3, #4
 8001224:	f003 0201 	and.w	r2, r3, #1
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	fa02 f303 	lsl.w	r3, r2, r3
 800122e:	693a      	ldr	r2, [r7, #16]
 8001230:	4313      	orrs	r3, r2
 8001232:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	693a      	ldr	r2, [r7, #16]
 8001238:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	f003 0303 	and.w	r3, r3, #3
 8001242:	2b03      	cmp	r3, #3
 8001244:	d017      	beq.n	8001276 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	68db      	ldr	r3, [r3, #12]
 800124a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	005b      	lsls	r3, r3, #1
 8001250:	2203      	movs	r2, #3
 8001252:	fa02 f303 	lsl.w	r3, r2, r3
 8001256:	43db      	mvns	r3, r3
 8001258:	693a      	ldr	r2, [r7, #16]
 800125a:	4013      	ands	r3, r2
 800125c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	689a      	ldr	r2, [r3, #8]
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	005b      	lsls	r3, r3, #1
 8001266:	fa02 f303 	lsl.w	r3, r2, r3
 800126a:	693a      	ldr	r2, [r7, #16]
 800126c:	4313      	orrs	r3, r2
 800126e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	693a      	ldr	r2, [r7, #16]
 8001274:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	f003 0303 	and.w	r3, r3, #3
 800127e:	2b02      	cmp	r3, #2
 8001280:	d123      	bne.n	80012ca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	08da      	lsrs	r2, r3, #3
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	3208      	adds	r2, #8
 800128a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800128e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	f003 0307 	and.w	r3, r3, #7
 8001296:	009b      	lsls	r3, r3, #2
 8001298:	220f      	movs	r2, #15
 800129a:	fa02 f303 	lsl.w	r3, r2, r3
 800129e:	43db      	mvns	r3, r3
 80012a0:	693a      	ldr	r2, [r7, #16]
 80012a2:	4013      	ands	r3, r2
 80012a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	691a      	ldr	r2, [r3, #16]
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	f003 0307 	and.w	r3, r3, #7
 80012b0:	009b      	lsls	r3, r3, #2
 80012b2:	fa02 f303 	lsl.w	r3, r2, r3
 80012b6:	693a      	ldr	r2, [r7, #16]
 80012b8:	4313      	orrs	r3, r2
 80012ba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	08da      	lsrs	r2, r3, #3
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	3208      	adds	r2, #8
 80012c4:	6939      	ldr	r1, [r7, #16]
 80012c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	005b      	lsls	r3, r3, #1
 80012d4:	2203      	movs	r2, #3
 80012d6:	fa02 f303 	lsl.w	r3, r2, r3
 80012da:	43db      	mvns	r3, r3
 80012dc:	693a      	ldr	r2, [r7, #16]
 80012de:	4013      	ands	r3, r2
 80012e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	f003 0203 	and.w	r2, r3, #3
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	005b      	lsls	r3, r3, #1
 80012ee:	fa02 f303 	lsl.w	r3, r2, r3
 80012f2:	693a      	ldr	r2, [r7, #16]
 80012f4:	4313      	orrs	r3, r2
 80012f6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	693a      	ldr	r2, [r7, #16]
 80012fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001306:	2b00      	cmp	r3, #0
 8001308:	f000 80b2 	beq.w	8001470 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800130c:	4b61      	ldr	r3, [pc, #388]	; (8001494 <HAL_GPIO_Init+0x2fc>)
 800130e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001310:	4a60      	ldr	r2, [pc, #384]	; (8001494 <HAL_GPIO_Init+0x2fc>)
 8001312:	f043 0301 	orr.w	r3, r3, #1
 8001316:	6613      	str	r3, [r2, #96]	; 0x60
 8001318:	4b5e      	ldr	r3, [pc, #376]	; (8001494 <HAL_GPIO_Init+0x2fc>)
 800131a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800131c:	f003 0301 	and.w	r3, r3, #1
 8001320:	60bb      	str	r3, [r7, #8]
 8001322:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001324:	4a5c      	ldr	r2, [pc, #368]	; (8001498 <HAL_GPIO_Init+0x300>)
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	089b      	lsrs	r3, r3, #2
 800132a:	3302      	adds	r3, #2
 800132c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001330:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	f003 0303 	and.w	r3, r3, #3
 8001338:	009b      	lsls	r3, r3, #2
 800133a:	220f      	movs	r2, #15
 800133c:	fa02 f303 	lsl.w	r3, r2, r3
 8001340:	43db      	mvns	r3, r3
 8001342:	693a      	ldr	r2, [r7, #16]
 8001344:	4013      	ands	r3, r2
 8001346:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800134e:	d02b      	beq.n	80013a8 <HAL_GPIO_Init+0x210>
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	4a52      	ldr	r2, [pc, #328]	; (800149c <HAL_GPIO_Init+0x304>)
 8001354:	4293      	cmp	r3, r2
 8001356:	d025      	beq.n	80013a4 <HAL_GPIO_Init+0x20c>
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	4a51      	ldr	r2, [pc, #324]	; (80014a0 <HAL_GPIO_Init+0x308>)
 800135c:	4293      	cmp	r3, r2
 800135e:	d01f      	beq.n	80013a0 <HAL_GPIO_Init+0x208>
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	4a50      	ldr	r2, [pc, #320]	; (80014a4 <HAL_GPIO_Init+0x30c>)
 8001364:	4293      	cmp	r3, r2
 8001366:	d019      	beq.n	800139c <HAL_GPIO_Init+0x204>
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	4a4f      	ldr	r2, [pc, #316]	; (80014a8 <HAL_GPIO_Init+0x310>)
 800136c:	4293      	cmp	r3, r2
 800136e:	d013      	beq.n	8001398 <HAL_GPIO_Init+0x200>
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	4a4e      	ldr	r2, [pc, #312]	; (80014ac <HAL_GPIO_Init+0x314>)
 8001374:	4293      	cmp	r3, r2
 8001376:	d00d      	beq.n	8001394 <HAL_GPIO_Init+0x1fc>
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	4a4d      	ldr	r2, [pc, #308]	; (80014b0 <HAL_GPIO_Init+0x318>)
 800137c:	4293      	cmp	r3, r2
 800137e:	d007      	beq.n	8001390 <HAL_GPIO_Init+0x1f8>
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	4a4c      	ldr	r2, [pc, #304]	; (80014b4 <HAL_GPIO_Init+0x31c>)
 8001384:	4293      	cmp	r3, r2
 8001386:	d101      	bne.n	800138c <HAL_GPIO_Init+0x1f4>
 8001388:	2307      	movs	r3, #7
 800138a:	e00e      	b.n	80013aa <HAL_GPIO_Init+0x212>
 800138c:	2308      	movs	r3, #8
 800138e:	e00c      	b.n	80013aa <HAL_GPIO_Init+0x212>
 8001390:	2306      	movs	r3, #6
 8001392:	e00a      	b.n	80013aa <HAL_GPIO_Init+0x212>
 8001394:	2305      	movs	r3, #5
 8001396:	e008      	b.n	80013aa <HAL_GPIO_Init+0x212>
 8001398:	2304      	movs	r3, #4
 800139a:	e006      	b.n	80013aa <HAL_GPIO_Init+0x212>
 800139c:	2303      	movs	r3, #3
 800139e:	e004      	b.n	80013aa <HAL_GPIO_Init+0x212>
 80013a0:	2302      	movs	r3, #2
 80013a2:	e002      	b.n	80013aa <HAL_GPIO_Init+0x212>
 80013a4:	2301      	movs	r3, #1
 80013a6:	e000      	b.n	80013aa <HAL_GPIO_Init+0x212>
 80013a8:	2300      	movs	r3, #0
 80013aa:	697a      	ldr	r2, [r7, #20]
 80013ac:	f002 0203 	and.w	r2, r2, #3
 80013b0:	0092      	lsls	r2, r2, #2
 80013b2:	4093      	lsls	r3, r2
 80013b4:	693a      	ldr	r2, [r7, #16]
 80013b6:	4313      	orrs	r3, r2
 80013b8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80013ba:	4937      	ldr	r1, [pc, #220]	; (8001498 <HAL_GPIO_Init+0x300>)
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	089b      	lsrs	r3, r3, #2
 80013c0:	3302      	adds	r3, #2
 80013c2:	693a      	ldr	r2, [r7, #16]
 80013c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80013c8:	4b3b      	ldr	r3, [pc, #236]	; (80014b8 <HAL_GPIO_Init+0x320>)
 80013ca:	689b      	ldr	r3, [r3, #8]
 80013cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	43db      	mvns	r3, r3
 80013d2:	693a      	ldr	r2, [r7, #16]
 80013d4:	4013      	ands	r3, r2
 80013d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d003      	beq.n	80013ec <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80013e4:	693a      	ldr	r2, [r7, #16]
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	4313      	orrs	r3, r2
 80013ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80013ec:	4a32      	ldr	r2, [pc, #200]	; (80014b8 <HAL_GPIO_Init+0x320>)
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80013f2:	4b31      	ldr	r3, [pc, #196]	; (80014b8 <HAL_GPIO_Init+0x320>)
 80013f4:	68db      	ldr	r3, [r3, #12]
 80013f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	43db      	mvns	r3, r3
 80013fc:	693a      	ldr	r2, [r7, #16]
 80013fe:	4013      	ands	r3, r2
 8001400:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800140a:	2b00      	cmp	r3, #0
 800140c:	d003      	beq.n	8001416 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800140e:	693a      	ldr	r2, [r7, #16]
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	4313      	orrs	r3, r2
 8001414:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001416:	4a28      	ldr	r2, [pc, #160]	; (80014b8 <HAL_GPIO_Init+0x320>)
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800141c:	4b26      	ldr	r3, [pc, #152]	; (80014b8 <HAL_GPIO_Init+0x320>)
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	43db      	mvns	r3, r3
 8001426:	693a      	ldr	r2, [r7, #16]
 8001428:	4013      	ands	r3, r2
 800142a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001434:	2b00      	cmp	r3, #0
 8001436:	d003      	beq.n	8001440 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001438:	693a      	ldr	r2, [r7, #16]
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	4313      	orrs	r3, r2
 800143e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001440:	4a1d      	ldr	r2, [pc, #116]	; (80014b8 <HAL_GPIO_Init+0x320>)
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001446:	4b1c      	ldr	r3, [pc, #112]	; (80014b8 <HAL_GPIO_Init+0x320>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	43db      	mvns	r3, r3
 8001450:	693a      	ldr	r2, [r7, #16]
 8001452:	4013      	ands	r3, r2
 8001454:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800145e:	2b00      	cmp	r3, #0
 8001460:	d003      	beq.n	800146a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001462:	693a      	ldr	r2, [r7, #16]
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	4313      	orrs	r3, r2
 8001468:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800146a:	4a13      	ldr	r2, [pc, #76]	; (80014b8 <HAL_GPIO_Init+0x320>)
 800146c:	693b      	ldr	r3, [r7, #16]
 800146e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	3301      	adds	r3, #1
 8001474:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	fa22 f303 	lsr.w	r3, r2, r3
 8001480:	2b00      	cmp	r3, #0
 8001482:	f47f ae91 	bne.w	80011a8 <HAL_GPIO_Init+0x10>
  }
}
 8001486:	bf00      	nop
 8001488:	bf00      	nop
 800148a:	371c      	adds	r7, #28
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr
 8001494:	40021000 	.word	0x40021000
 8001498:	40010000 	.word	0x40010000
 800149c:	48000400 	.word	0x48000400
 80014a0:	48000800 	.word	0x48000800
 80014a4:	48000c00 	.word	0x48000c00
 80014a8:	48001000 	.word	0x48001000
 80014ac:	48001400 	.word	0x48001400
 80014b0:	48001800 	.word	0x48001800
 80014b4:	48001c00 	.word	0x48001c00
 80014b8:	40010400 	.word	0x40010400

080014bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014bc:	b480      	push	{r7}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
 80014c4:	460b      	mov	r3, r1
 80014c6:	807b      	strh	r3, [r7, #2]
 80014c8:	4613      	mov	r3, r2
 80014ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014cc:	787b      	ldrb	r3, [r7, #1]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d003      	beq.n	80014da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80014d2:	887a      	ldrh	r2, [r7, #2]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80014d8:	e002      	b.n	80014e0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80014da:	887a      	ldrh	r2, [r7, #2]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	629a      	str	r2, [r3, #40]	; 0x28
}
 80014e0:	bf00      	nop
 80014e2:	370c      	adds	r7, #12
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr

080014ec <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80014ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014ee:	b08f      	sub	sp, #60	; 0x3c
 80014f0:	af0a      	add	r7, sp, #40	; 0x28
 80014f2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d101      	bne.n	80014fe <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	e116      	b.n	800172c <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800150a:	b2db      	uxtb	r3, r3
 800150c:	2b00      	cmp	r3, #0
 800150e:	d106      	bne.n	800151e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2200      	movs	r2, #0
 8001514:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001518:	6878      	ldr	r0, [r7, #4]
 800151a:	f009 fb77 	bl	800ac0c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2203      	movs	r2, #3
 8001522:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001526:	68bb      	ldr	r3, [r7, #8]
 8001528:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800152a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800152e:	2b00      	cmp	r3, #0
 8001530:	d102      	bne.n	8001538 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2200      	movs	r2, #0
 8001536:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4618      	mov	r0, r3
 800153e:	f003 fde2 	bl	8005106 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	603b      	str	r3, [r7, #0]
 8001548:	687e      	ldr	r6, [r7, #4]
 800154a:	466d      	mov	r5, sp
 800154c:	f106 0410 	add.w	r4, r6, #16
 8001550:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001552:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001554:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001556:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001558:	e894 0003 	ldmia.w	r4, {r0, r1}
 800155c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001560:	1d33      	adds	r3, r6, #4
 8001562:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001564:	6838      	ldr	r0, [r7, #0]
 8001566:	f003 fcf4 	bl	8004f52 <USB_CoreInit>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d005      	beq.n	800157c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2202      	movs	r2, #2
 8001574:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001578:	2301      	movs	r3, #1
 800157a:	e0d7      	b.n	800172c <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	2100      	movs	r1, #0
 8001582:	4618      	mov	r0, r3
 8001584:	f003 fdd0 	bl	8005128 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001588:	2300      	movs	r3, #0
 800158a:	73fb      	strb	r3, [r7, #15]
 800158c:	e04a      	b.n	8001624 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800158e:	7bfa      	ldrb	r2, [r7, #15]
 8001590:	6879      	ldr	r1, [r7, #4]
 8001592:	4613      	mov	r3, r2
 8001594:	00db      	lsls	r3, r3, #3
 8001596:	4413      	add	r3, r2
 8001598:	009b      	lsls	r3, r3, #2
 800159a:	440b      	add	r3, r1
 800159c:	333d      	adds	r3, #61	; 0x3d
 800159e:	2201      	movs	r2, #1
 80015a0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80015a2:	7bfa      	ldrb	r2, [r7, #15]
 80015a4:	6879      	ldr	r1, [r7, #4]
 80015a6:	4613      	mov	r3, r2
 80015a8:	00db      	lsls	r3, r3, #3
 80015aa:	4413      	add	r3, r2
 80015ac:	009b      	lsls	r3, r3, #2
 80015ae:	440b      	add	r3, r1
 80015b0:	333c      	adds	r3, #60	; 0x3c
 80015b2:	7bfa      	ldrb	r2, [r7, #15]
 80015b4:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 80015b6:	7bfa      	ldrb	r2, [r7, #15]
 80015b8:	7bfb      	ldrb	r3, [r7, #15]
 80015ba:	b298      	uxth	r0, r3
 80015bc:	6879      	ldr	r1, [r7, #4]
 80015be:	4613      	mov	r3, r2
 80015c0:	00db      	lsls	r3, r3, #3
 80015c2:	4413      	add	r3, r2
 80015c4:	009b      	lsls	r3, r3, #2
 80015c6:	440b      	add	r3, r1
 80015c8:	3356      	adds	r3, #86	; 0x56
 80015ca:	4602      	mov	r2, r0
 80015cc:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80015ce:	7bfa      	ldrb	r2, [r7, #15]
 80015d0:	6879      	ldr	r1, [r7, #4]
 80015d2:	4613      	mov	r3, r2
 80015d4:	00db      	lsls	r3, r3, #3
 80015d6:	4413      	add	r3, r2
 80015d8:	009b      	lsls	r3, r3, #2
 80015da:	440b      	add	r3, r1
 80015dc:	3340      	adds	r3, #64	; 0x40
 80015de:	2200      	movs	r2, #0
 80015e0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80015e2:	7bfa      	ldrb	r2, [r7, #15]
 80015e4:	6879      	ldr	r1, [r7, #4]
 80015e6:	4613      	mov	r3, r2
 80015e8:	00db      	lsls	r3, r3, #3
 80015ea:	4413      	add	r3, r2
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	440b      	add	r3, r1
 80015f0:	3344      	adds	r3, #68	; 0x44
 80015f2:	2200      	movs	r2, #0
 80015f4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80015f6:	7bfa      	ldrb	r2, [r7, #15]
 80015f8:	6879      	ldr	r1, [r7, #4]
 80015fa:	4613      	mov	r3, r2
 80015fc:	00db      	lsls	r3, r3, #3
 80015fe:	4413      	add	r3, r2
 8001600:	009b      	lsls	r3, r3, #2
 8001602:	440b      	add	r3, r1
 8001604:	3348      	adds	r3, #72	; 0x48
 8001606:	2200      	movs	r2, #0
 8001608:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800160a:	7bfa      	ldrb	r2, [r7, #15]
 800160c:	6879      	ldr	r1, [r7, #4]
 800160e:	4613      	mov	r3, r2
 8001610:	00db      	lsls	r3, r3, #3
 8001612:	4413      	add	r3, r2
 8001614:	009b      	lsls	r3, r3, #2
 8001616:	440b      	add	r3, r1
 8001618:	334c      	adds	r3, #76	; 0x4c
 800161a:	2200      	movs	r2, #0
 800161c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800161e:	7bfb      	ldrb	r3, [r7, #15]
 8001620:	3301      	adds	r3, #1
 8001622:	73fb      	strb	r3, [r7, #15]
 8001624:	7bfa      	ldrb	r2, [r7, #15]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	429a      	cmp	r2, r3
 800162c:	d3af      	bcc.n	800158e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800162e:	2300      	movs	r3, #0
 8001630:	73fb      	strb	r3, [r7, #15]
 8001632:	e044      	b.n	80016be <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001634:	7bfa      	ldrb	r2, [r7, #15]
 8001636:	6879      	ldr	r1, [r7, #4]
 8001638:	4613      	mov	r3, r2
 800163a:	00db      	lsls	r3, r3, #3
 800163c:	4413      	add	r3, r2
 800163e:	009b      	lsls	r3, r3, #2
 8001640:	440b      	add	r3, r1
 8001642:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001646:	2200      	movs	r2, #0
 8001648:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800164a:	7bfa      	ldrb	r2, [r7, #15]
 800164c:	6879      	ldr	r1, [r7, #4]
 800164e:	4613      	mov	r3, r2
 8001650:	00db      	lsls	r3, r3, #3
 8001652:	4413      	add	r3, r2
 8001654:	009b      	lsls	r3, r3, #2
 8001656:	440b      	add	r3, r1
 8001658:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800165c:	7bfa      	ldrb	r2, [r7, #15]
 800165e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001660:	7bfa      	ldrb	r2, [r7, #15]
 8001662:	6879      	ldr	r1, [r7, #4]
 8001664:	4613      	mov	r3, r2
 8001666:	00db      	lsls	r3, r3, #3
 8001668:	4413      	add	r3, r2
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	440b      	add	r3, r1
 800166e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001672:	2200      	movs	r2, #0
 8001674:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001676:	7bfa      	ldrb	r2, [r7, #15]
 8001678:	6879      	ldr	r1, [r7, #4]
 800167a:	4613      	mov	r3, r2
 800167c:	00db      	lsls	r3, r3, #3
 800167e:	4413      	add	r3, r2
 8001680:	009b      	lsls	r3, r3, #2
 8001682:	440b      	add	r3, r1
 8001684:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8001688:	2200      	movs	r2, #0
 800168a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800168c:	7bfa      	ldrb	r2, [r7, #15]
 800168e:	6879      	ldr	r1, [r7, #4]
 8001690:	4613      	mov	r3, r2
 8001692:	00db      	lsls	r3, r3, #3
 8001694:	4413      	add	r3, r2
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	440b      	add	r3, r1
 800169a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800169e:	2200      	movs	r2, #0
 80016a0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80016a2:	7bfa      	ldrb	r2, [r7, #15]
 80016a4:	6879      	ldr	r1, [r7, #4]
 80016a6:	4613      	mov	r3, r2
 80016a8:	00db      	lsls	r3, r3, #3
 80016aa:	4413      	add	r3, r2
 80016ac:	009b      	lsls	r3, r3, #2
 80016ae:	440b      	add	r3, r1
 80016b0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80016b4:	2200      	movs	r2, #0
 80016b6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016b8:	7bfb      	ldrb	r3, [r7, #15]
 80016ba:	3301      	adds	r3, #1
 80016bc:	73fb      	strb	r3, [r7, #15]
 80016be:	7bfa      	ldrb	r2, [r7, #15]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	429a      	cmp	r2, r3
 80016c6:	d3b5      	bcc.n	8001634 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	603b      	str	r3, [r7, #0]
 80016ce:	687e      	ldr	r6, [r7, #4]
 80016d0:	466d      	mov	r5, sp
 80016d2:	f106 0410 	add.w	r4, r6, #16
 80016d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016de:	e894 0003 	ldmia.w	r4, {r0, r1}
 80016e2:	e885 0003 	stmia.w	r5, {r0, r1}
 80016e6:	1d33      	adds	r3, r6, #4
 80016e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016ea:	6838      	ldr	r0, [r7, #0]
 80016ec:	f003 fd68 	bl	80051c0 <USB_DevInit>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d005      	beq.n	8001702 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2202      	movs	r2, #2
 80016fa:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
 8001700:	e014      	b.n	800172c <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2200      	movs	r2, #0
 8001706:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2201      	movs	r2, #1
 800170e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001716:	2b01      	cmp	r3, #1
 8001718:	d102      	bne.n	8001720 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800171a:	6878      	ldr	r0, [r7, #4]
 800171c:	f001 f852 	bl	80027c4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4618      	mov	r0, r3
 8001726:	f004 fd16 	bl	8006156 <USB_DevDisconnect>

  return HAL_OK;
 800172a:	2300      	movs	r3, #0
}
 800172c:	4618      	mov	r0, r3
 800172e:	3714      	adds	r7, #20
 8001730:	46bd      	mov	sp, r7
 8001732:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001734 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b084      	sub	sp, #16
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001748:	2b01      	cmp	r3, #1
 800174a:	d101      	bne.n	8001750 <HAL_PCD_Start+0x1c>
 800174c:	2302      	movs	r3, #2
 800174e:	e01c      	b.n	800178a <HAL_PCD_Start+0x56>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2201      	movs	r2, #1
 8001754:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800175c:	2b01      	cmp	r3, #1
 800175e:	d105      	bne.n	800176c <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001764:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4618      	mov	r0, r3
 8001772:	f003 fcb7 	bl	80050e4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4618      	mov	r0, r3
 800177c:	f004 fcca 	bl	8006114 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2200      	movs	r2, #0
 8001784:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001788:	2300      	movs	r3, #0
}
 800178a:	4618      	mov	r0, r3
 800178c:	3710      	adds	r7, #16
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}

08001792 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001792:	b590      	push	{r4, r7, lr}
 8001794:	b08d      	sub	sp, #52	; 0x34
 8001796:	af00      	add	r7, sp, #0
 8001798:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80017a0:	6a3b      	ldr	r3, [r7, #32]
 80017a2:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4618      	mov	r0, r3
 80017aa:	f004 fd88 	bl	80062be <USB_GetMode>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	f040 847e 	bne.w	80020b2 <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4618      	mov	r0, r3
 80017bc:	f004 fcec 	bl	8006198 <USB_ReadInterrupts>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	f000 8474 	beq.w	80020b0 <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80017c8:	69fb      	ldr	r3, [r7, #28]
 80017ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	0a1b      	lsrs	r3, r3, #8
 80017d2:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4618      	mov	r0, r3
 80017e2:	f004 fcd9 	bl	8006198 <USB_ReadInterrupts>
 80017e6:	4603      	mov	r3, r0
 80017e8:	f003 0302 	and.w	r3, r3, #2
 80017ec:	2b02      	cmp	r3, #2
 80017ee:	d107      	bne.n	8001800 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	695a      	ldr	r2, [r3, #20]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f002 0202 	and.w	r2, r2, #2
 80017fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4618      	mov	r0, r3
 8001806:	f004 fcc7 	bl	8006198 <USB_ReadInterrupts>
 800180a:	4603      	mov	r3, r0
 800180c:	f003 0310 	and.w	r3, r3, #16
 8001810:	2b10      	cmp	r3, #16
 8001812:	d161      	bne.n	80018d8 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	699a      	ldr	r2, [r3, #24]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f022 0210 	bic.w	r2, r2, #16
 8001822:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001824:	6a3b      	ldr	r3, [r7, #32]
 8001826:	6a1b      	ldr	r3, [r3, #32]
 8001828:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800182a:	69bb      	ldr	r3, [r7, #24]
 800182c:	f003 020f 	and.w	r2, r3, #15
 8001830:	4613      	mov	r3, r2
 8001832:	00db      	lsls	r3, r3, #3
 8001834:	4413      	add	r3, r2
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800183c:	687a      	ldr	r2, [r7, #4]
 800183e:	4413      	add	r3, r2
 8001840:	3304      	adds	r3, #4
 8001842:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001844:	69bb      	ldr	r3, [r7, #24]
 8001846:	0c5b      	lsrs	r3, r3, #17
 8001848:	f003 030f 	and.w	r3, r3, #15
 800184c:	2b02      	cmp	r3, #2
 800184e:	d124      	bne.n	800189a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001850:	69ba      	ldr	r2, [r7, #24]
 8001852:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001856:	4013      	ands	r3, r2
 8001858:	2b00      	cmp	r3, #0
 800185a:	d035      	beq.n	80018c8 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001860:	69bb      	ldr	r3, [r7, #24]
 8001862:	091b      	lsrs	r3, r3, #4
 8001864:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001866:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800186a:	b29b      	uxth	r3, r3
 800186c:	461a      	mov	r2, r3
 800186e:	6a38      	ldr	r0, [r7, #32]
 8001870:	f004 fafe 	bl	8005e70 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	68da      	ldr	r2, [r3, #12]
 8001878:	69bb      	ldr	r3, [r7, #24]
 800187a:	091b      	lsrs	r3, r3, #4
 800187c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001880:	441a      	add	r2, r3
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	695a      	ldr	r2, [r3, #20]
 800188a:	69bb      	ldr	r3, [r7, #24]
 800188c:	091b      	lsrs	r3, r3, #4
 800188e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001892:	441a      	add	r2, r3
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	615a      	str	r2, [r3, #20]
 8001898:	e016      	b.n	80018c8 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800189a:	69bb      	ldr	r3, [r7, #24]
 800189c:	0c5b      	lsrs	r3, r3, #17
 800189e:	f003 030f 	and.w	r3, r3, #15
 80018a2:	2b06      	cmp	r3, #6
 80018a4:	d110      	bne.n	80018c8 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80018ac:	2208      	movs	r2, #8
 80018ae:	4619      	mov	r1, r3
 80018b0:	6a38      	ldr	r0, [r7, #32]
 80018b2:	f004 fadd 	bl	8005e70 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	695a      	ldr	r2, [r3, #20]
 80018ba:	69bb      	ldr	r3, [r7, #24]
 80018bc:	091b      	lsrs	r3, r3, #4
 80018be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80018c2:	441a      	add	r2, r3
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	699a      	ldr	r2, [r3, #24]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f042 0210 	orr.w	r2, r2, #16
 80018d6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4618      	mov	r0, r3
 80018de:	f004 fc5b 	bl	8006198 <USB_ReadInterrupts>
 80018e2:	4603      	mov	r3, r0
 80018e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80018e8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80018ec:	f040 80a7 	bne.w	8001a3e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80018f0:	2300      	movs	r3, #0
 80018f2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4618      	mov	r0, r3
 80018fa:	f004 fc60 	bl	80061be <USB_ReadDevAllOutEpInterrupt>
 80018fe:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001900:	e099      	b.n	8001a36 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001904:	f003 0301 	and.w	r3, r3, #1
 8001908:	2b00      	cmp	r3, #0
 800190a:	f000 808e 	beq.w	8001a2a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001914:	b2d2      	uxtb	r2, r2
 8001916:	4611      	mov	r1, r2
 8001918:	4618      	mov	r0, r3
 800191a:	f004 fc84 	bl	8006226 <USB_ReadDevOutEPInterrupt>
 800191e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001920:	693b      	ldr	r3, [r7, #16]
 8001922:	f003 0301 	and.w	r3, r3, #1
 8001926:	2b00      	cmp	r3, #0
 8001928:	d00c      	beq.n	8001944 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800192a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800192c:	015a      	lsls	r2, r3, #5
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	4413      	add	r3, r2
 8001932:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001936:	461a      	mov	r2, r3
 8001938:	2301      	movs	r3, #1
 800193a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800193c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800193e:	6878      	ldr	r0, [r7, #4]
 8001940:	f000 fe66 	bl	8002610 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	f003 0308 	and.w	r3, r3, #8
 800194a:	2b00      	cmp	r3, #0
 800194c:	d00c      	beq.n	8001968 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800194e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001950:	015a      	lsls	r2, r3, #5
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	4413      	add	r3, r2
 8001956:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800195a:	461a      	mov	r2, r3
 800195c:	2308      	movs	r3, #8
 800195e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001960:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001962:	6878      	ldr	r0, [r7, #4]
 8001964:	f000 fea2 	bl	80026ac <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	f003 0310 	and.w	r3, r3, #16
 800196e:	2b00      	cmp	r3, #0
 8001970:	d008      	beq.n	8001984 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001974:	015a      	lsls	r2, r3, #5
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	4413      	add	r3, r2
 800197a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800197e:	461a      	mov	r2, r3
 8001980:	2310      	movs	r3, #16
 8001982:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	f003 0302 	and.w	r3, r3, #2
 800198a:	2b00      	cmp	r3, #0
 800198c:	d030      	beq.n	80019f0 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800198e:	6a3b      	ldr	r3, [r7, #32]
 8001990:	695b      	ldr	r3, [r3, #20]
 8001992:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001996:	2b80      	cmp	r3, #128	; 0x80
 8001998:	d109      	bne.n	80019ae <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	69fa      	ldr	r2, [r7, #28]
 80019a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80019a8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019ac:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80019ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019b0:	4613      	mov	r3, r2
 80019b2:	00db      	lsls	r3, r3, #3
 80019b4:	4413      	add	r3, r2
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80019bc:	687a      	ldr	r2, [r7, #4]
 80019be:	4413      	add	r3, r2
 80019c0:	3304      	adds	r3, #4
 80019c2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	78db      	ldrb	r3, [r3, #3]
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d108      	bne.n	80019de <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	2200      	movs	r2, #0
 80019d0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80019d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d4:	b2db      	uxtb	r3, r3
 80019d6:	4619      	mov	r1, r3
 80019d8:	6878      	ldr	r0, [r7, #4]
 80019da:	f009 fa7d 	bl	800aed8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80019de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e0:	015a      	lsls	r2, r3, #5
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	4413      	add	r3, r2
 80019e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80019ea:	461a      	mov	r2, r3
 80019ec:	2302      	movs	r3, #2
 80019ee:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	f003 0320 	and.w	r3, r3, #32
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d008      	beq.n	8001a0c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80019fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019fc:	015a      	lsls	r2, r3, #5
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	4413      	add	r3, r2
 8001a02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a06:	461a      	mov	r2, r3
 8001a08:	2320      	movs	r3, #32
 8001a0a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001a0c:	693b      	ldr	r3, [r7, #16]
 8001a0e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d009      	beq.n	8001a2a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a18:	015a      	lsls	r2, r3, #5
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	4413      	add	r3, r2
 8001a1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a22:	461a      	mov	r2, r3
 8001a24:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a28:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a2c:	3301      	adds	r3, #1
 8001a2e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a32:	085b      	lsrs	r3, r3, #1
 8001a34:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	f47f af62 	bne.w	8001902 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4618      	mov	r0, r3
 8001a44:	f004 fba8 	bl	8006198 <USB_ReadInterrupts>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a4e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001a52:	f040 80a4 	bne.w	8001b9e <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f004 fbc9 	bl	80061f2 <USB_ReadDevAllInEpInterrupt>
 8001a60:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001a62:	2300      	movs	r3, #0
 8001a64:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001a66:	e096      	b.n	8001b96 <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a6a:	f003 0301 	and.w	r3, r3, #1
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	f000 808b 	beq.w	8001b8a <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a7a:	b2d2      	uxtb	r2, r2
 8001a7c:	4611      	mov	r1, r2
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f004 fbef 	bl	8006262 <USB_ReadDevInEPInterrupt>
 8001a84:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	f003 0301 	and.w	r3, r3, #1
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d020      	beq.n	8001ad2 <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a92:	f003 030f 	and.w	r3, r3, #15
 8001a96:	2201      	movs	r2, #1
 8001a98:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001aa4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	43db      	mvns	r3, r3
 8001aaa:	69f9      	ldr	r1, [r7, #28]
 8001aac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab6:	015a      	lsls	r2, r3, #5
 8001ab8:	69fb      	ldr	r3, [r7, #28]
 8001aba:	4413      	add	r3, r2
 8001abc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac8:	b2db      	uxtb	r3, r3
 8001aca:	4619      	mov	r1, r3
 8001acc:	6878      	ldr	r0, [r7, #4]
 8001ace:	f009 f96e 	bl	800adae <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	f003 0308 	and.w	r3, r3, #8
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d008      	beq.n	8001aee <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ade:	015a      	lsls	r2, r3, #5
 8001ae0:	69fb      	ldr	r3, [r7, #28]
 8001ae2:	4413      	add	r3, r2
 8001ae4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ae8:	461a      	mov	r2, r3
 8001aea:	2308      	movs	r3, #8
 8001aec:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	f003 0310 	and.w	r3, r3, #16
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d008      	beq.n	8001b0a <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001afa:	015a      	lsls	r2, r3, #5
 8001afc:	69fb      	ldr	r3, [r7, #28]
 8001afe:	4413      	add	r3, r2
 8001b00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001b04:	461a      	mov	r2, r3
 8001b06:	2310      	movs	r3, #16
 8001b08:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d008      	beq.n	8001b26 <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b16:	015a      	lsls	r2, r3, #5
 8001b18:	69fb      	ldr	r3, [r7, #28]
 8001b1a:	4413      	add	r3, r2
 8001b1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001b20:	461a      	mov	r2, r3
 8001b22:	2340      	movs	r3, #64	; 0x40
 8001b24:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	f003 0302 	and.w	r3, r3, #2
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d023      	beq.n	8001b78 <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001b30:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b32:	6a38      	ldr	r0, [r7, #32]
 8001b34:	f003 fc86 	bl	8005444 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001b38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b3a:	4613      	mov	r3, r2
 8001b3c:	00db      	lsls	r3, r3, #3
 8001b3e:	4413      	add	r3, r2
 8001b40:	009b      	lsls	r3, r3, #2
 8001b42:	3338      	adds	r3, #56	; 0x38
 8001b44:	687a      	ldr	r2, [r7, #4]
 8001b46:	4413      	add	r3, r2
 8001b48:	3304      	adds	r3, #4
 8001b4a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	78db      	ldrb	r3, [r3, #3]
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d108      	bne.n	8001b66 <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	2200      	movs	r2, #0
 8001b58:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	4619      	mov	r1, r3
 8001b60:	6878      	ldr	r0, [r7, #4]
 8001b62:	f009 f9cb 	bl	800aefc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b68:	015a      	lsls	r2, r3, #5
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	4413      	add	r3, r2
 8001b6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001b72:	461a      	mov	r2, r3
 8001b74:	2302      	movs	r3, #2
 8001b76:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d003      	beq.n	8001b8a <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001b82:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b84:	6878      	ldr	r0, [r7, #4]
 8001b86:	f000 fcba 	bl	80024fe <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b8c:	3301      	adds	r3, #1
 8001b8e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b92:	085b      	lsrs	r3, r3, #1
 8001b94:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	f47f af65 	bne.w	8001a68 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f004 faf8 	bl	8006198 <USB_ReadInterrupts>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001bae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001bb2:	d122      	bne.n	8001bfa <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001bb4:	69fb      	ldr	r3, [r7, #28]
 8001bb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	69fa      	ldr	r2, [r7, #28]
 8001bbe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001bc2:	f023 0301 	bic.w	r3, r3, #1
 8001bc6:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	d108      	bne.n	8001be4 <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001bda:	2100      	movs	r1, #0
 8001bdc:	6878      	ldr	r0, [r7, #4]
 8001bde:	f009 fbeb 	bl	800b3b8 <HAL_PCDEx_LPM_Callback>
 8001be2:	e002      	b.n	8001bea <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001be4:	6878      	ldr	r0, [r7, #4]
 8001be6:	f009 f94f 	bl	800ae88 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	695a      	ldr	r2, [r3, #20]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001bf8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f004 faca 	bl	8006198 <USB_ReadInterrupts>
 8001c04:	4603      	mov	r3, r0
 8001c06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001c0e:	d112      	bne.n	8001c36 <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001c10:	69fb      	ldr	r3, [r7, #28]
 8001c12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	f003 0301 	and.w	r3, r3, #1
 8001c1c:	2b01      	cmp	r3, #1
 8001c1e:	d102      	bne.n	8001c26 <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	f009 f90b 	bl	800ae3c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	695a      	ldr	r2, [r3, #20]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001c34:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f004 faac 	bl	8006198 <USB_ReadInterrupts>
 8001c40:	4603      	mov	r3, r0
 8001c42:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001c46:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001c4a:	d121      	bne.n	8001c90 <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	695a      	ldr	r2, [r3, #20]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8001c5a:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d111      	bne.n	8001c8a <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2201      	movs	r2, #1
 8001c6a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c74:	089b      	lsrs	r3, r3, #2
 8001c76:	f003 020f 	and.w	r2, r3, #15
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001c80:	2101      	movs	r1, #1
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	f009 fb98 	bl	800b3b8 <HAL_PCDEx_LPM_Callback>
 8001c88:	e002      	b.n	8001c90 <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	f009 f8d6 	bl	800ae3c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4618      	mov	r0, r3
 8001c96:	f004 fa7f 	bl	8006198 <USB_ReadInterrupts>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ca0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ca4:	f040 80b5 	bne.w	8001e12 <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001ca8:	69fb      	ldr	r3, [r7, #28]
 8001caa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	69fa      	ldr	r2, [r7, #28]
 8001cb2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001cb6:	f023 0301 	bic.w	r3, r3, #1
 8001cba:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	2110      	movs	r1, #16
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f003 fbbe 	bl	8005444 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cc8:	2300      	movs	r3, #0
 8001cca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ccc:	e046      	b.n	8001d5c <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cd0:	015a      	lsls	r2, r3, #5
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	4413      	add	r3, r2
 8001cd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001cda:	461a      	mov	r2, r3
 8001cdc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001ce0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ce4:	015a      	lsls	r2, r3, #5
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	4413      	add	r3, r2
 8001cea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001cf2:	0151      	lsls	r1, r2, #5
 8001cf4:	69fa      	ldr	r2, [r7, #28]
 8001cf6:	440a      	add	r2, r1
 8001cf8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001cfc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001d00:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d04:	015a      	lsls	r2, r3, #5
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	4413      	add	r3, r2
 8001d0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d0e:	461a      	mov	r2, r3
 8001d10:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001d14:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001d16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d18:	015a      	lsls	r2, r3, #5
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	4413      	add	r3, r2
 8001d1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d26:	0151      	lsls	r1, r2, #5
 8001d28:	69fa      	ldr	r2, [r7, #28]
 8001d2a:	440a      	add	r2, r1
 8001d2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001d30:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001d34:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d38:	015a      	lsls	r2, r3, #5
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	4413      	add	r3, r2
 8001d3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d46:	0151      	lsls	r1, r2, #5
 8001d48:	69fa      	ldr	r2, [r7, #28]
 8001d4a:	440a      	add	r2, r1
 8001d4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001d50:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001d54:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d58:	3301      	adds	r3, #1
 8001d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d62:	429a      	cmp	r2, r3
 8001d64:	d3b3      	bcc.n	8001cce <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d6c:	69db      	ldr	r3, [r3, #28]
 8001d6e:	69fa      	ldr	r2, [r7, #28]
 8001d70:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001d74:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001d78:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d016      	beq.n	8001db0 <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001d82:	69fb      	ldr	r3, [r7, #28]
 8001d84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001d8c:	69fa      	ldr	r2, [r7, #28]
 8001d8e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001d92:	f043 030b 	orr.w	r3, r3, #11
 8001d96:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001da2:	69fa      	ldr	r2, [r7, #28]
 8001da4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001da8:	f043 030b 	orr.w	r3, r3, #11
 8001dac:	6453      	str	r3, [r2, #68]	; 0x44
 8001dae:	e015      	b.n	8001ddc <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001db0:	69fb      	ldr	r3, [r7, #28]
 8001db2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001db6:	695b      	ldr	r3, [r3, #20]
 8001db8:	69fa      	ldr	r2, [r7, #28]
 8001dba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001dbe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001dc2:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001dc6:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001dce:	691b      	ldr	r3, [r3, #16]
 8001dd0:	69fa      	ldr	r2, [r7, #28]
 8001dd2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001dd6:	f043 030b 	orr.w	r3, r3, #11
 8001dda:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001ddc:	69fb      	ldr	r3, [r7, #28]
 8001dde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	69fa      	ldr	r2, [r7, #28]
 8001de6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001dea:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001dee:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	4610      	mov	r0, r2
 8001dfe:	f004 fa8f 	bl	8006320 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	695a      	ldr	r2, [r3, #20]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001e10:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4618      	mov	r0, r3
 8001e18:	f004 f9be 	bl	8006198 <USB_ReadInterrupts>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e26:	d124      	bne.n	8001e72 <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f004 fa54 	bl	80062da <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4618      	mov	r0, r3
 8001e38:	f003 fb81 	bl	800553e <USB_GetDevSpeed>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	461a      	mov	r2, r3
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681c      	ldr	r4, [r3, #0]
 8001e48:	f001 fb1a 	bl	8003480 <HAL_RCC_GetHCLKFreq>
 8001e4c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	461a      	mov	r2, r3
 8001e56:	4620      	mov	r0, r4
 8001e58:	f003 f8a8 	bl	8004fac <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001e5c:	6878      	ldr	r0, [r7, #4]
 8001e5e:	f008 ffce 	bl	800adfe <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	695a      	ldr	r2, [r3, #20]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001e70:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4618      	mov	r0, r3
 8001e78:	f004 f98e 	bl	8006198 <USB_ReadInterrupts>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	f003 0308 	and.w	r3, r3, #8
 8001e82:	2b08      	cmp	r3, #8
 8001e84:	d10a      	bne.n	8001e9c <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f008 ffab 	bl	800ade2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	695a      	ldr	r2, [r3, #20]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f002 0208 	and.w	r2, r2, #8
 8001e9a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f004 f979 	bl	8006198 <USB_ReadInterrupts>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eac:	2b80      	cmp	r3, #128	; 0x80
 8001eae:	d122      	bne.n	8001ef6 <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001eb0:	6a3b      	ldr	r3, [r7, #32]
 8001eb2:	699b      	ldr	r3, [r3, #24]
 8001eb4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001eb8:	6a3b      	ldr	r3, [r7, #32]
 8001eba:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	627b      	str	r3, [r7, #36]	; 0x24
 8001ec0:	e014      	b.n	8001eec <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001ec2:	6879      	ldr	r1, [r7, #4]
 8001ec4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ec6:	4613      	mov	r3, r2
 8001ec8:	00db      	lsls	r3, r3, #3
 8001eca:	4413      	add	r3, r2
 8001ecc:	009b      	lsls	r3, r3, #2
 8001ece:	440b      	add	r3, r1
 8001ed0:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001ed4:	781b      	ldrb	r3, [r3, #0]
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	d105      	bne.n	8001ee6 <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	4619      	mov	r1, r3
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	f000 fadb 	bl	800249c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee8:	3301      	adds	r3, #1
 8001eea:	627b      	str	r3, [r7, #36]	; 0x24
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ef2:	429a      	cmp	r2, r3
 8001ef4:	d3e5      	bcc.n	8001ec2 <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4618      	mov	r0, r3
 8001efc:	f004 f94c 	bl	8006198 <USB_ReadInterrupts>
 8001f00:	4603      	mov	r3, r0
 8001f02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001f0a:	d13b      	bne.n	8001f84 <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	627b      	str	r3, [r7, #36]	; 0x24
 8001f10:	e02b      	b.n	8001f6a <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f14:	015a      	lsls	r2, r3, #5
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	4413      	add	r3, r2
 8001f1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001f22:	6879      	ldr	r1, [r7, #4]
 8001f24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f26:	4613      	mov	r3, r2
 8001f28:	00db      	lsls	r3, r3, #3
 8001f2a:	4413      	add	r3, r2
 8001f2c:	009b      	lsls	r3, r3, #2
 8001f2e:	440b      	add	r3, r1
 8001f30:	3340      	adds	r3, #64	; 0x40
 8001f32:	781b      	ldrb	r3, [r3, #0]
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	d115      	bne.n	8001f64 <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001f38:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	da12      	bge.n	8001f64 <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001f3e:	6879      	ldr	r1, [r7, #4]
 8001f40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f42:	4613      	mov	r3, r2
 8001f44:	00db      	lsls	r3, r3, #3
 8001f46:	4413      	add	r3, r2
 8001f48:	009b      	lsls	r3, r3, #2
 8001f4a:	440b      	add	r3, r1
 8001f4c:	333f      	adds	r3, #63	; 0x3f
 8001f4e:	2201      	movs	r2, #1
 8001f50:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	f000 fa9c 	bl	800249c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f66:	3301      	adds	r3, #1
 8001f68:	627b      	str	r3, [r7, #36]	; 0x24
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d3ce      	bcc.n	8001f12 <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	695a      	ldr	r2, [r3, #20]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001f82:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f004 f905 	bl	8006198 <USB_ReadInterrupts>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f94:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001f98:	d155      	bne.n	8002046 <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	627b      	str	r3, [r7, #36]	; 0x24
 8001f9e:	e045      	b.n	800202c <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa2:	015a      	lsls	r2, r3, #5
 8001fa4:	69fb      	ldr	r3, [r7, #28]
 8001fa6:	4413      	add	r3, r2
 8001fa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001fb0:	6879      	ldr	r1, [r7, #4]
 8001fb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fb4:	4613      	mov	r3, r2
 8001fb6:	00db      	lsls	r3, r3, #3
 8001fb8:	4413      	add	r3, r2
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	440b      	add	r3, r1
 8001fbe:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d12e      	bne.n	8002026 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001fc8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	da2b      	bge.n	8002026 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001fce:	69bb      	ldr	r3, [r7, #24]
 8001fd0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001fda:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001fde:	429a      	cmp	r2, r3
 8001fe0:	d121      	bne.n	8002026 <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001fe2:	6879      	ldr	r1, [r7, #4]
 8001fe4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fe6:	4613      	mov	r3, r2
 8001fe8:	00db      	lsls	r3, r3, #3
 8001fea:	4413      	add	r3, r2
 8001fec:	009b      	lsls	r3, r3, #2
 8001fee:	440b      	add	r3, r1
 8001ff0:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001ff8:	6a3b      	ldr	r3, [r7, #32]
 8001ffa:	699b      	ldr	r3, [r3, #24]
 8001ffc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002000:	6a3b      	ldr	r3, [r7, #32]
 8002002:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002004:	6a3b      	ldr	r3, [r7, #32]
 8002006:	695b      	ldr	r3, [r3, #20]
 8002008:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800200c:	2b00      	cmp	r3, #0
 800200e:	d10a      	bne.n	8002026 <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	69fa      	ldr	r2, [r7, #28]
 800201a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800201e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002022:	6053      	str	r3, [r2, #4]
            break;
 8002024:	e007      	b.n	8002036 <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002028:	3301      	adds	r3, #1
 800202a:	627b      	str	r3, [r7, #36]	; 0x24
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002032:	429a      	cmp	r2, r3
 8002034:	d3b4      	bcc.n	8001fa0 <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	695a      	ldr	r2, [r3, #20]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002044:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4618      	mov	r0, r3
 800204c:	f004 f8a4 	bl	8006198 <USB_ReadInterrupts>
 8002050:	4603      	mov	r3, r0
 8002052:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002056:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800205a:	d10a      	bne.n	8002072 <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800205c:	6878      	ldr	r0, [r7, #4]
 800205e:	f008 ff5f 	bl	800af20 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	695a      	ldr	r2, [r3, #20]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002070:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4618      	mov	r0, r3
 8002078:	f004 f88e 	bl	8006198 <USB_ReadInterrupts>
 800207c:	4603      	mov	r3, r0
 800207e:	f003 0304 	and.w	r3, r3, #4
 8002082:	2b04      	cmp	r3, #4
 8002084:	d115      	bne.n	80020b2 <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800208e:	69bb      	ldr	r3, [r7, #24]
 8002090:	f003 0304 	and.w	r3, r3, #4
 8002094:	2b00      	cmp	r3, #0
 8002096:	d002      	beq.n	800209e <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002098:	6878      	ldr	r0, [r7, #4]
 800209a:	f008 ff4f 	bl	800af3c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	6859      	ldr	r1, [r3, #4]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	69ba      	ldr	r2, [r7, #24]
 80020aa:	430a      	orrs	r2, r1
 80020ac:	605a      	str	r2, [r3, #4]
 80020ae:	e000      	b.n	80020b2 <HAL_PCD_IRQHandler+0x920>
      return;
 80020b0:	bf00      	nop
    }
  }
}
 80020b2:	3734      	adds	r7, #52	; 0x34
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd90      	pop	{r4, r7, pc}

080020b8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
 80020c0:	460b      	mov	r3, r1
 80020c2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d101      	bne.n	80020d2 <HAL_PCD_SetAddress+0x1a>
 80020ce:	2302      	movs	r3, #2
 80020d0:	e013      	b.n	80020fa <HAL_PCD_SetAddress+0x42>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2201      	movs	r2, #1
 80020d6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	78fa      	ldrb	r2, [r7, #3]
 80020de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	78fa      	ldrb	r2, [r7, #3]
 80020e8:	4611      	mov	r1, r2
 80020ea:	4618      	mov	r0, r3
 80020ec:	f003 ffec 	bl	80060c8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2200      	movs	r2, #0
 80020f4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80020f8:	2300      	movs	r3, #0
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3708      	adds	r7, #8
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}

08002102 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002102:	b580      	push	{r7, lr}
 8002104:	b084      	sub	sp, #16
 8002106:	af00      	add	r7, sp, #0
 8002108:	6078      	str	r0, [r7, #4]
 800210a:	4608      	mov	r0, r1
 800210c:	4611      	mov	r1, r2
 800210e:	461a      	mov	r2, r3
 8002110:	4603      	mov	r3, r0
 8002112:	70fb      	strb	r3, [r7, #3]
 8002114:	460b      	mov	r3, r1
 8002116:	803b      	strh	r3, [r7, #0]
 8002118:	4613      	mov	r3, r2
 800211a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800211c:	2300      	movs	r3, #0
 800211e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002120:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002124:	2b00      	cmp	r3, #0
 8002126:	da0f      	bge.n	8002148 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002128:	78fb      	ldrb	r3, [r7, #3]
 800212a:	f003 020f 	and.w	r2, r3, #15
 800212e:	4613      	mov	r3, r2
 8002130:	00db      	lsls	r3, r3, #3
 8002132:	4413      	add	r3, r2
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	3338      	adds	r3, #56	; 0x38
 8002138:	687a      	ldr	r2, [r7, #4]
 800213a:	4413      	add	r3, r2
 800213c:	3304      	adds	r3, #4
 800213e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	2201      	movs	r2, #1
 8002144:	705a      	strb	r2, [r3, #1]
 8002146:	e00f      	b.n	8002168 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002148:	78fb      	ldrb	r3, [r7, #3]
 800214a:	f003 020f 	and.w	r2, r3, #15
 800214e:	4613      	mov	r3, r2
 8002150:	00db      	lsls	r3, r3, #3
 8002152:	4413      	add	r3, r2
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800215a:	687a      	ldr	r2, [r7, #4]
 800215c:	4413      	add	r3, r2
 800215e:	3304      	adds	r3, #4
 8002160:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	2200      	movs	r2, #0
 8002166:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002168:	78fb      	ldrb	r3, [r7, #3]
 800216a:	f003 030f 	and.w	r3, r3, #15
 800216e:	b2da      	uxtb	r2, r3
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002174:	883a      	ldrh	r2, [r7, #0]
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	78ba      	ldrb	r2, [r7, #2]
 800217e:	711a      	strb	r2, [r3, #4]

#if defined (USB_OTG_FS)
  if (ep->is_in != 0U)
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	785b      	ldrb	r3, [r3, #1]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d004      	beq.n	8002192 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	b29a      	uxth	r2, r3
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	835a      	strh	r2, [r3, #26]
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002192:	78bb      	ldrb	r3, [r7, #2]
 8002194:	2b02      	cmp	r3, #2
 8002196:	d102      	bne.n	800219e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	2200      	movs	r2, #0
 800219c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d101      	bne.n	80021ac <HAL_PCD_EP_Open+0xaa>
 80021a8:	2302      	movs	r3, #2
 80021aa:	e00e      	b.n	80021ca <HAL_PCD_EP_Open+0xc8>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2201      	movs	r2, #1
 80021b0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	68f9      	ldr	r1, [r7, #12]
 80021ba:	4618      	mov	r0, r3
 80021bc:	f003 f9de 	bl	800557c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2200      	movs	r2, #0
 80021c4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80021c8:	7afb      	ldrb	r3, [r7, #11]
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3710      	adds	r7, #16
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}

080021d2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80021d2:	b580      	push	{r7, lr}
 80021d4:	b084      	sub	sp, #16
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	6078      	str	r0, [r7, #4]
 80021da:	460b      	mov	r3, r1
 80021dc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80021de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	da0f      	bge.n	8002206 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021e6:	78fb      	ldrb	r3, [r7, #3]
 80021e8:	f003 020f 	and.w	r2, r3, #15
 80021ec:	4613      	mov	r3, r2
 80021ee:	00db      	lsls	r3, r3, #3
 80021f0:	4413      	add	r3, r2
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	3338      	adds	r3, #56	; 0x38
 80021f6:	687a      	ldr	r2, [r7, #4]
 80021f8:	4413      	add	r3, r2
 80021fa:	3304      	adds	r3, #4
 80021fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	2201      	movs	r2, #1
 8002202:	705a      	strb	r2, [r3, #1]
 8002204:	e00f      	b.n	8002226 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002206:	78fb      	ldrb	r3, [r7, #3]
 8002208:	f003 020f 	and.w	r2, r3, #15
 800220c:	4613      	mov	r3, r2
 800220e:	00db      	lsls	r3, r3, #3
 8002210:	4413      	add	r3, r2
 8002212:	009b      	lsls	r3, r3, #2
 8002214:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002218:	687a      	ldr	r2, [r7, #4]
 800221a:	4413      	add	r3, r2
 800221c:	3304      	adds	r3, #4
 800221e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	2200      	movs	r2, #0
 8002224:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002226:	78fb      	ldrb	r3, [r7, #3]
 8002228:	f003 030f 	and.w	r3, r3, #15
 800222c:	b2da      	uxtb	r2, r3
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002238:	2b01      	cmp	r3, #1
 800223a:	d101      	bne.n	8002240 <HAL_PCD_EP_Close+0x6e>
 800223c:	2302      	movs	r3, #2
 800223e:	e00e      	b.n	800225e <HAL_PCD_EP_Close+0x8c>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2201      	movs	r2, #1
 8002244:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	68f9      	ldr	r1, [r7, #12]
 800224e:	4618      	mov	r0, r3
 8002250:	f003 fa1c 	bl	800568c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2200      	movs	r2, #0
 8002258:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800225c:	2300      	movs	r3, #0
}
 800225e:	4618      	mov	r0, r3
 8002260:	3710      	adds	r7, #16
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}

08002266 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002266:	b580      	push	{r7, lr}
 8002268:	b086      	sub	sp, #24
 800226a:	af00      	add	r7, sp, #0
 800226c:	60f8      	str	r0, [r7, #12]
 800226e:	607a      	str	r2, [r7, #4]
 8002270:	603b      	str	r3, [r7, #0]
 8002272:	460b      	mov	r3, r1
 8002274:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002276:	7afb      	ldrb	r3, [r7, #11]
 8002278:	f003 020f 	and.w	r2, r3, #15
 800227c:	4613      	mov	r3, r2
 800227e:	00db      	lsls	r3, r3, #3
 8002280:	4413      	add	r3, r2
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002288:	68fa      	ldr	r2, [r7, #12]
 800228a:	4413      	add	r3, r2
 800228c:	3304      	adds	r3, #4
 800228e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	687a      	ldr	r2, [r7, #4]
 8002294:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	683a      	ldr	r2, [r7, #0]
 800229a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	2200      	movs	r2, #0
 80022a0:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	2200      	movs	r2, #0
 80022a6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80022a8:	7afb      	ldrb	r3, [r7, #11]
 80022aa:	f003 030f 	and.w	r3, r3, #15
 80022ae:	b2da      	uxtb	r2, r3
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	6979      	ldr	r1, [r7, #20]
 80022ba:	4618      	mov	r0, r3
 80022bc:	f003 fac2 	bl	8005844 <USB_EPStartXfer>

  return HAL_OK;
 80022c0:	2300      	movs	r3, #0
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3718      	adds	r7, #24
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}

080022ca <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80022ca:	b580      	push	{r7, lr}
 80022cc:	b086      	sub	sp, #24
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	60f8      	str	r0, [r7, #12]
 80022d2:	607a      	str	r2, [r7, #4]
 80022d4:	603b      	str	r3, [r7, #0]
 80022d6:	460b      	mov	r3, r1
 80022d8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022da:	7afb      	ldrb	r3, [r7, #11]
 80022dc:	f003 020f 	and.w	r2, r3, #15
 80022e0:	4613      	mov	r3, r2
 80022e2:	00db      	lsls	r3, r3, #3
 80022e4:	4413      	add	r3, r2
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	3338      	adds	r3, #56	; 0x38
 80022ea:	68fa      	ldr	r2, [r7, #12]
 80022ec:	4413      	add	r3, r2
 80022ee:	3304      	adds	r3, #4
 80022f0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	687a      	ldr	r2, [r7, #4]
 80022f6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	683a      	ldr	r2, [r7, #0]
 80022fc:	611a      	str	r2, [r3, #16]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	2200      	movs	r2, #0
 8002302:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	2201      	movs	r2, #1
 8002308:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800230a:	7afb      	ldrb	r3, [r7, #11]
 800230c:	f003 030f 	and.w	r3, r3, #15
 8002310:	b2da      	uxtb	r2, r3
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	6979      	ldr	r1, [r7, #20]
 800231c:	4618      	mov	r0, r3
 800231e:	f003 fa91 	bl	8005844 <USB_EPStartXfer>

  return HAL_OK;
 8002322:	2300      	movs	r3, #0
}
 8002324:	4618      	mov	r0, r3
 8002326:	3718      	adds	r7, #24
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}

0800232c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b084      	sub	sp, #16
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
 8002334:	460b      	mov	r3, r1
 8002336:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002338:	78fb      	ldrb	r3, [r7, #3]
 800233a:	f003 020f 	and.w	r2, r3, #15
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	429a      	cmp	r2, r3
 8002344:	d901      	bls.n	800234a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e04e      	b.n	80023e8 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800234a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800234e:	2b00      	cmp	r3, #0
 8002350:	da0f      	bge.n	8002372 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002352:	78fb      	ldrb	r3, [r7, #3]
 8002354:	f003 020f 	and.w	r2, r3, #15
 8002358:	4613      	mov	r3, r2
 800235a:	00db      	lsls	r3, r3, #3
 800235c:	4413      	add	r3, r2
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	3338      	adds	r3, #56	; 0x38
 8002362:	687a      	ldr	r2, [r7, #4]
 8002364:	4413      	add	r3, r2
 8002366:	3304      	adds	r3, #4
 8002368:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	2201      	movs	r2, #1
 800236e:	705a      	strb	r2, [r3, #1]
 8002370:	e00d      	b.n	800238e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002372:	78fa      	ldrb	r2, [r7, #3]
 8002374:	4613      	mov	r3, r2
 8002376:	00db      	lsls	r3, r3, #3
 8002378:	4413      	add	r3, r2
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002380:	687a      	ldr	r2, [r7, #4]
 8002382:	4413      	add	r3, r2
 8002384:	3304      	adds	r3, #4
 8002386:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	2200      	movs	r2, #0
 800238c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	2201      	movs	r2, #1
 8002392:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002394:	78fb      	ldrb	r3, [r7, #3]
 8002396:	f003 030f 	and.w	r3, r3, #15
 800239a:	b2da      	uxtb	r2, r3
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d101      	bne.n	80023ae <HAL_PCD_EP_SetStall+0x82>
 80023aa:	2302      	movs	r3, #2
 80023ac:	e01c      	b.n	80023e8 <HAL_PCD_EP_SetStall+0xbc>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2201      	movs	r2, #1
 80023b2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	68f9      	ldr	r1, [r7, #12]
 80023bc:	4618      	mov	r0, r3
 80023be:	f003 fdaf 	bl	8005f20 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80023c2:	78fb      	ldrb	r3, [r7, #3]
 80023c4:	f003 030f 	and.w	r3, r3, #15
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d108      	bne.n	80023de <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80023d6:	4619      	mov	r1, r3
 80023d8:	4610      	mov	r0, r2
 80023da:	f003 ffa1 	bl	8006320 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2200      	movs	r2, #0
 80023e2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80023e6:	2300      	movs	r3, #0
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	3710      	adds	r7, #16
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}

080023f0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b084      	sub	sp, #16
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
 80023f8:	460b      	mov	r3, r1
 80023fa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80023fc:	78fb      	ldrb	r3, [r7, #3]
 80023fe:	f003 020f 	and.w	r2, r3, #15
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	429a      	cmp	r2, r3
 8002408:	d901      	bls.n	800240e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e042      	b.n	8002494 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800240e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002412:	2b00      	cmp	r3, #0
 8002414:	da0f      	bge.n	8002436 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002416:	78fb      	ldrb	r3, [r7, #3]
 8002418:	f003 020f 	and.w	r2, r3, #15
 800241c:	4613      	mov	r3, r2
 800241e:	00db      	lsls	r3, r3, #3
 8002420:	4413      	add	r3, r2
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	3338      	adds	r3, #56	; 0x38
 8002426:	687a      	ldr	r2, [r7, #4]
 8002428:	4413      	add	r3, r2
 800242a:	3304      	adds	r3, #4
 800242c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2201      	movs	r2, #1
 8002432:	705a      	strb	r2, [r3, #1]
 8002434:	e00f      	b.n	8002456 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002436:	78fb      	ldrb	r3, [r7, #3]
 8002438:	f003 020f 	and.w	r2, r3, #15
 800243c:	4613      	mov	r3, r2
 800243e:	00db      	lsls	r3, r3, #3
 8002440:	4413      	add	r3, r2
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002448:	687a      	ldr	r2, [r7, #4]
 800244a:	4413      	add	r3, r2
 800244c:	3304      	adds	r3, #4
 800244e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	2200      	movs	r2, #0
 8002454:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2200      	movs	r2, #0
 800245a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800245c:	78fb      	ldrb	r3, [r7, #3]
 800245e:	f003 030f 	and.w	r3, r3, #15
 8002462:	b2da      	uxtb	r2, r3
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800246e:	2b01      	cmp	r3, #1
 8002470:	d101      	bne.n	8002476 <HAL_PCD_EP_ClrStall+0x86>
 8002472:	2302      	movs	r3, #2
 8002474:	e00e      	b.n	8002494 <HAL_PCD_EP_ClrStall+0xa4>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2201      	movs	r2, #1
 800247a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	68f9      	ldr	r1, [r7, #12]
 8002484:	4618      	mov	r0, r3
 8002486:	f003 fdb9 	bl	8005ffc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2200      	movs	r2, #0
 800248e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002492:	2300      	movs	r3, #0
}
 8002494:	4618      	mov	r0, r3
 8002496:	3710      	adds	r7, #16
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}

0800249c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b084      	sub	sp, #16
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
 80024a4:	460b      	mov	r3, r1
 80024a6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80024a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	da0c      	bge.n	80024ca <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80024b0:	78fb      	ldrb	r3, [r7, #3]
 80024b2:	f003 020f 	and.w	r2, r3, #15
 80024b6:	4613      	mov	r3, r2
 80024b8:	00db      	lsls	r3, r3, #3
 80024ba:	4413      	add	r3, r2
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	3338      	adds	r3, #56	; 0x38
 80024c0:	687a      	ldr	r2, [r7, #4]
 80024c2:	4413      	add	r3, r2
 80024c4:	3304      	adds	r3, #4
 80024c6:	60fb      	str	r3, [r7, #12]
 80024c8:	e00c      	b.n	80024e4 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80024ca:	78fb      	ldrb	r3, [r7, #3]
 80024cc:	f003 020f 	and.w	r2, r3, #15
 80024d0:	4613      	mov	r3, r2
 80024d2:	00db      	lsls	r3, r3, #3
 80024d4:	4413      	add	r3, r2
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80024dc:	687a      	ldr	r2, [r7, #4]
 80024de:	4413      	add	r3, r2
 80024e0:	3304      	adds	r3, #4
 80024e2:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	68f9      	ldr	r1, [r7, #12]
 80024ea:	4618      	mov	r0, r3
 80024ec:	f003 fbdc 	bl	8005ca8 <USB_EPStopXfer>
 80024f0:	4603      	mov	r3, r0
 80024f2:	72fb      	strb	r3, [r7, #11]

  return ret;
 80024f4:	7afb      	ldrb	r3, [r7, #11]
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3710      	adds	r7, #16
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}

080024fe <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80024fe:	b580      	push	{r7, lr}
 8002500:	b088      	sub	sp, #32
 8002502:	af00      	add	r7, sp, #0
 8002504:	6078      	str	r0, [r7, #4]
 8002506:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002512:	683a      	ldr	r2, [r7, #0]
 8002514:	4613      	mov	r3, r2
 8002516:	00db      	lsls	r3, r3, #3
 8002518:	4413      	add	r3, r2
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	3338      	adds	r3, #56	; 0x38
 800251e:	687a      	ldr	r2, [r7, #4]
 8002520:	4413      	add	r3, r2
 8002522:	3304      	adds	r3, #4
 8002524:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	695a      	ldr	r2, [r3, #20]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	691b      	ldr	r3, [r3, #16]
 800252e:	429a      	cmp	r2, r3
 8002530:	d901      	bls.n	8002536 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e067      	b.n	8002606 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	691a      	ldr	r2, [r3, #16]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	695b      	ldr	r3, [r3, #20]
 800253e:	1ad3      	subs	r3, r2, r3
 8002540:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	69fa      	ldr	r2, [r7, #28]
 8002548:	429a      	cmp	r2, r3
 800254a:	d902      	bls.n	8002552 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	3303      	adds	r3, #3
 8002556:	089b      	lsrs	r3, r3, #2
 8002558:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800255a:	e026      	b.n	80025aa <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	691a      	ldr	r2, [r3, #16]
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	695b      	ldr	r3, [r3, #20]
 8002564:	1ad3      	subs	r3, r2, r3
 8002566:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	69fa      	ldr	r2, [r7, #28]
 800256e:	429a      	cmp	r2, r3
 8002570:	d902      	bls.n	8002578 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002578:	69fb      	ldr	r3, [r7, #28]
 800257a:	3303      	adds	r3, #3
 800257c:	089b      	lsrs	r3, r3, #2
 800257e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	68d9      	ldr	r1, [r3, #12]
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	b2da      	uxtb	r2, r3
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	b29b      	uxth	r3, r3
 800258c:	6978      	ldr	r0, [r7, #20]
 800258e:	f003 fc35 	bl	8005dfc <USB_WritePacket>

    ep->xfer_buff  += len;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	68da      	ldr	r2, [r3, #12]
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	441a      	add	r2, r3
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	695a      	ldr	r2, [r3, #20]
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	441a      	add	r2, r3
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	015a      	lsls	r2, r3, #5
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	4413      	add	r3, r2
 80025b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80025b6:	699b      	ldr	r3, [r3, #24]
 80025b8:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80025ba:	69ba      	ldr	r2, [r7, #24]
 80025bc:	429a      	cmp	r2, r3
 80025be:	d809      	bhi.n	80025d4 <PCD_WriteEmptyTxFifo+0xd6>
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	695a      	ldr	r2, [r3, #20]
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d203      	bcs.n	80025d4 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	691b      	ldr	r3, [r3, #16]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d1c3      	bne.n	800255c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	691a      	ldr	r2, [r3, #16]
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	695b      	ldr	r3, [r3, #20]
 80025dc:	429a      	cmp	r2, r3
 80025de:	d811      	bhi.n	8002604 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	f003 030f 	and.w	r3, r3, #15
 80025e6:	2201      	movs	r2, #1
 80025e8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ec:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	43db      	mvns	r3, r3
 80025fa:	6939      	ldr	r1, [r7, #16]
 80025fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002600:	4013      	ands	r3, r2
 8002602:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002604:	2300      	movs	r3, #0
}
 8002606:	4618      	mov	r0, r3
 8002608:	3720      	adds	r7, #32
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
	...

08002610 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b086      	sub	sp, #24
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
 8002618:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	333c      	adds	r3, #60	; 0x3c
 8002628:	3304      	adds	r3, #4
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	015a      	lsls	r2, r3, #5
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	4413      	add	r3, r2
 8002636:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	4a19      	ldr	r2, [pc, #100]	; (80026a8 <PCD_EP_OutXfrComplete_int+0x98>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d124      	bne.n	8002690 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800264c:	2b00      	cmp	r3, #0
 800264e:	d00a      	beq.n	8002666 <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	015a      	lsls	r2, r3, #5
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	4413      	add	r3, r2
 8002658:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800265c:	461a      	mov	r2, r3
 800265e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002662:	6093      	str	r3, [r2, #8]
 8002664:	e01a      	b.n	800269c <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	f003 0320 	and.w	r3, r3, #32
 800266c:	2b00      	cmp	r3, #0
 800266e:	d008      	beq.n	8002682 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	015a      	lsls	r2, r3, #5
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	4413      	add	r3, r2
 8002678:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800267c:	461a      	mov	r2, r3
 800267e:	2320      	movs	r3, #32
 8002680:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	b2db      	uxtb	r3, r3
 8002686:	4619      	mov	r1, r3
 8002688:	6878      	ldr	r0, [r7, #4]
 800268a:	f008 fb75 	bl	800ad78 <HAL_PCD_DataOutStageCallback>
 800268e:	e005      	b.n	800269c <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	b2db      	uxtb	r3, r3
 8002694:	4619      	mov	r1, r3
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f008 fb6e 	bl	800ad78 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800269c:	2300      	movs	r3, #0
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3718      	adds	r7, #24
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	4f54310a 	.word	0x4f54310a

080026ac <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b086      	sub	sp, #24
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
 80026b4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	333c      	adds	r3, #60	; 0x3c
 80026c4:	3304      	adds	r3, #4
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	015a      	lsls	r2, r3, #5
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	4413      	add	r3, r2
 80026d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	4a0c      	ldr	r2, [pc, #48]	; (8002710 <PCD_EP_OutSetupPacket_int+0x64>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d90e      	bls.n	8002700 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d009      	beq.n	8002700 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	015a      	lsls	r2, r3, #5
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	4413      	add	r3, r2
 80026f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026f8:	461a      	mov	r2, r3
 80026fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80026fe:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	f008 fb27 	bl	800ad54 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8002706:	2300      	movs	r3, #0
}
 8002708:	4618      	mov	r0, r3
 800270a:	3718      	adds	r7, #24
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}
 8002710:	4f54300a 	.word	0x4f54300a

08002714 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002714:	b480      	push	{r7}
 8002716:	b085      	sub	sp, #20
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
 800271c:	460b      	mov	r3, r1
 800271e:	70fb      	strb	r3, [r7, #3]
 8002720:	4613      	mov	r3, r2
 8002722:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800272c:	78fb      	ldrb	r3, [r7, #3]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d107      	bne.n	8002742 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002732:	883b      	ldrh	r3, [r7, #0]
 8002734:	0419      	lsls	r1, r3, #16
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	68ba      	ldr	r2, [r7, #8]
 800273c:	430a      	orrs	r2, r1
 800273e:	629a      	str	r2, [r3, #40]	; 0x28
 8002740:	e028      	b.n	8002794 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002748:	0c1b      	lsrs	r3, r3, #16
 800274a:	68ba      	ldr	r2, [r7, #8]
 800274c:	4413      	add	r3, r2
 800274e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002750:	2300      	movs	r3, #0
 8002752:	73fb      	strb	r3, [r7, #15]
 8002754:	e00d      	b.n	8002772 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	7bfb      	ldrb	r3, [r7, #15]
 800275c:	3340      	adds	r3, #64	; 0x40
 800275e:	009b      	lsls	r3, r3, #2
 8002760:	4413      	add	r3, r2
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	0c1b      	lsrs	r3, r3, #16
 8002766:	68ba      	ldr	r2, [r7, #8]
 8002768:	4413      	add	r3, r2
 800276a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800276c:	7bfb      	ldrb	r3, [r7, #15]
 800276e:	3301      	adds	r3, #1
 8002770:	73fb      	strb	r3, [r7, #15]
 8002772:	7bfa      	ldrb	r2, [r7, #15]
 8002774:	78fb      	ldrb	r3, [r7, #3]
 8002776:	3b01      	subs	r3, #1
 8002778:	429a      	cmp	r2, r3
 800277a:	d3ec      	bcc.n	8002756 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800277c:	883b      	ldrh	r3, [r7, #0]
 800277e:	0418      	lsls	r0, r3, #16
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6819      	ldr	r1, [r3, #0]
 8002784:	78fb      	ldrb	r3, [r7, #3]
 8002786:	3b01      	subs	r3, #1
 8002788:	68ba      	ldr	r2, [r7, #8]
 800278a:	4302      	orrs	r2, r0
 800278c:	3340      	adds	r3, #64	; 0x40
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	440b      	add	r3, r1
 8002792:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002794:	2300      	movs	r3, #0
}
 8002796:	4618      	mov	r0, r3
 8002798:	3714      	adds	r7, #20
 800279a:	46bd      	mov	sp, r7
 800279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a0:	4770      	bx	lr

080027a2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80027a2:	b480      	push	{r7}
 80027a4:	b083      	sub	sp, #12
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	6078      	str	r0, [r7, #4]
 80027aa:	460b      	mov	r3, r1
 80027ac:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	887a      	ldrh	r2, [r7, #2]
 80027b4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80027b6:	2300      	movs	r3, #0
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	370c      	adds	r7, #12
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr

080027c4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b085      	sub	sp, #20
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2201      	movs	r2, #1
 80027d6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2200      	movs	r2, #0
 80027de:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	699b      	ldr	r3, [r3, #24]
 80027e6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027f6:	f043 0303 	orr.w	r3, r3, #3
 80027fa:	68fa      	ldr	r2, [r7, #12]
 80027fc:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80027fe:	2300      	movs	r3, #0
}
 8002800:	4618      	mov	r0, r3
 8002802:	3714      	adds	r7, #20
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr

0800280c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800280c:	b480      	push	{r7}
 800280e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002810:	4b05      	ldr	r3, [pc, #20]	; (8002828 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a04      	ldr	r2, [pc, #16]	; (8002828 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002816:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800281a:	6013      	str	r3, [r2, #0]
}
 800281c:	bf00      	nop
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr
 8002826:	bf00      	nop
 8002828:	40007000 	.word	0x40007000

0800282c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800282c:	b480      	push	{r7}
 800282e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002830:	4b04      	ldr	r3, [pc, #16]	; (8002844 <HAL_PWREx_GetVoltageRange+0x18>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002838:	4618      	mov	r0, r3
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr
 8002842:	bf00      	nop
 8002844:	40007000 	.word	0x40007000

08002848 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002848:	b480      	push	{r7}
 800284a:	b085      	sub	sp, #20
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002856:	d130      	bne.n	80028ba <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002858:	4b23      	ldr	r3, [pc, #140]	; (80028e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002860:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002864:	d038      	beq.n	80028d8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002866:	4b20      	ldr	r3, [pc, #128]	; (80028e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800286e:	4a1e      	ldr	r2, [pc, #120]	; (80028e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002870:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002874:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002876:	4b1d      	ldr	r3, [pc, #116]	; (80028ec <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	2232      	movs	r2, #50	; 0x32
 800287c:	fb02 f303 	mul.w	r3, r2, r3
 8002880:	4a1b      	ldr	r2, [pc, #108]	; (80028f0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002882:	fba2 2303 	umull	r2, r3, r2, r3
 8002886:	0c9b      	lsrs	r3, r3, #18
 8002888:	3301      	adds	r3, #1
 800288a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800288c:	e002      	b.n	8002894 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	3b01      	subs	r3, #1
 8002892:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002894:	4b14      	ldr	r3, [pc, #80]	; (80028e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002896:	695b      	ldr	r3, [r3, #20]
 8002898:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800289c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028a0:	d102      	bne.n	80028a8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d1f2      	bne.n	800288e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80028a8:	4b0f      	ldr	r3, [pc, #60]	; (80028e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028aa:	695b      	ldr	r3, [r3, #20]
 80028ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028b4:	d110      	bne.n	80028d8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80028b6:	2303      	movs	r3, #3
 80028b8:	e00f      	b.n	80028da <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80028ba:	4b0b      	ldr	r3, [pc, #44]	; (80028e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80028c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028c6:	d007      	beq.n	80028d8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80028c8:	4b07      	ldr	r3, [pc, #28]	; (80028e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80028d0:	4a05      	ldr	r2, [pc, #20]	; (80028e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80028d6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80028d8:	2300      	movs	r3, #0
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3714      	adds	r7, #20
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr
 80028e6:	bf00      	nop
 80028e8:	40007000 	.word	0x40007000
 80028ec:	20000000 	.word	0x20000000
 80028f0:	431bde83 	.word	0x431bde83

080028f4 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80028f4:	b480      	push	{r7}
 80028f6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80028f8:	4b05      	ldr	r3, [pc, #20]	; (8002910 <HAL_PWREx_EnableVddUSB+0x1c>)
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	4a04      	ldr	r2, [pc, #16]	; (8002910 <HAL_PWREx_EnableVddUSB+0x1c>)
 80028fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002902:	6053      	str	r3, [r2, #4]
}
 8002904:	bf00      	nop
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr
 800290e:	bf00      	nop
 8002910:	40007000 	.word	0x40007000

08002914 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8002914:	b480      	push	{r7}
 8002916:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8002918:	4b05      	ldr	r3, [pc, #20]	; (8002930 <HAL_PWREx_EnableVddIO2+0x1c>)
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	4a04      	ldr	r2, [pc, #16]	; (8002930 <HAL_PWREx_EnableVddIO2+0x1c>)
 800291e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002922:	6053      	str	r3, [r2, #4]
}
 8002924:	bf00      	nop
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr
 800292e:	bf00      	nop
 8002930:	40007000 	.word	0x40007000

08002934 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b088      	sub	sp, #32
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d102      	bne.n	8002948 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	f000 bc08 	b.w	8003158 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002948:	4b96      	ldr	r3, [pc, #600]	; (8002ba4 <HAL_RCC_OscConfig+0x270>)
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	f003 030c 	and.w	r3, r3, #12
 8002950:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002952:	4b94      	ldr	r3, [pc, #592]	; (8002ba4 <HAL_RCC_OscConfig+0x270>)
 8002954:	68db      	ldr	r3, [r3, #12]
 8002956:	f003 0303 	and.w	r3, r3, #3
 800295a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 0310 	and.w	r3, r3, #16
 8002964:	2b00      	cmp	r3, #0
 8002966:	f000 80e4 	beq.w	8002b32 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800296a:	69bb      	ldr	r3, [r7, #24]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d007      	beq.n	8002980 <HAL_RCC_OscConfig+0x4c>
 8002970:	69bb      	ldr	r3, [r7, #24]
 8002972:	2b0c      	cmp	r3, #12
 8002974:	f040 808b 	bne.w	8002a8e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	2b01      	cmp	r3, #1
 800297c:	f040 8087 	bne.w	8002a8e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002980:	4b88      	ldr	r3, [pc, #544]	; (8002ba4 <HAL_RCC_OscConfig+0x270>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 0302 	and.w	r3, r3, #2
 8002988:	2b00      	cmp	r3, #0
 800298a:	d005      	beq.n	8002998 <HAL_RCC_OscConfig+0x64>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	699b      	ldr	r3, [r3, #24]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d101      	bne.n	8002998 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e3df      	b.n	8003158 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6a1a      	ldr	r2, [r3, #32]
 800299c:	4b81      	ldr	r3, [pc, #516]	; (8002ba4 <HAL_RCC_OscConfig+0x270>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 0308 	and.w	r3, r3, #8
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d004      	beq.n	80029b2 <HAL_RCC_OscConfig+0x7e>
 80029a8:	4b7e      	ldr	r3, [pc, #504]	; (8002ba4 <HAL_RCC_OscConfig+0x270>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029b0:	e005      	b.n	80029be <HAL_RCC_OscConfig+0x8a>
 80029b2:	4b7c      	ldr	r3, [pc, #496]	; (8002ba4 <HAL_RCC_OscConfig+0x270>)
 80029b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029b8:	091b      	lsrs	r3, r3, #4
 80029ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029be:	4293      	cmp	r3, r2
 80029c0:	d223      	bcs.n	8002a0a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6a1b      	ldr	r3, [r3, #32]
 80029c6:	4618      	mov	r0, r3
 80029c8:	f000 fd92 	bl	80034f0 <RCC_SetFlashLatencyFromMSIRange>
 80029cc:	4603      	mov	r3, r0
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d001      	beq.n	80029d6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e3c0      	b.n	8003158 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80029d6:	4b73      	ldr	r3, [pc, #460]	; (8002ba4 <HAL_RCC_OscConfig+0x270>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a72      	ldr	r2, [pc, #456]	; (8002ba4 <HAL_RCC_OscConfig+0x270>)
 80029dc:	f043 0308 	orr.w	r3, r3, #8
 80029e0:	6013      	str	r3, [r2, #0]
 80029e2:	4b70      	ldr	r3, [pc, #448]	; (8002ba4 <HAL_RCC_OscConfig+0x270>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6a1b      	ldr	r3, [r3, #32]
 80029ee:	496d      	ldr	r1, [pc, #436]	; (8002ba4 <HAL_RCC_OscConfig+0x270>)
 80029f0:	4313      	orrs	r3, r2
 80029f2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80029f4:	4b6b      	ldr	r3, [pc, #428]	; (8002ba4 <HAL_RCC_OscConfig+0x270>)
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	69db      	ldr	r3, [r3, #28]
 8002a00:	021b      	lsls	r3, r3, #8
 8002a02:	4968      	ldr	r1, [pc, #416]	; (8002ba4 <HAL_RCC_OscConfig+0x270>)
 8002a04:	4313      	orrs	r3, r2
 8002a06:	604b      	str	r3, [r1, #4]
 8002a08:	e025      	b.n	8002a56 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a0a:	4b66      	ldr	r3, [pc, #408]	; (8002ba4 <HAL_RCC_OscConfig+0x270>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a65      	ldr	r2, [pc, #404]	; (8002ba4 <HAL_RCC_OscConfig+0x270>)
 8002a10:	f043 0308 	orr.w	r3, r3, #8
 8002a14:	6013      	str	r3, [r2, #0]
 8002a16:	4b63      	ldr	r3, [pc, #396]	; (8002ba4 <HAL_RCC_OscConfig+0x270>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6a1b      	ldr	r3, [r3, #32]
 8002a22:	4960      	ldr	r1, [pc, #384]	; (8002ba4 <HAL_RCC_OscConfig+0x270>)
 8002a24:	4313      	orrs	r3, r2
 8002a26:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a28:	4b5e      	ldr	r3, [pc, #376]	; (8002ba4 <HAL_RCC_OscConfig+0x270>)
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	69db      	ldr	r3, [r3, #28]
 8002a34:	021b      	lsls	r3, r3, #8
 8002a36:	495b      	ldr	r1, [pc, #364]	; (8002ba4 <HAL_RCC_OscConfig+0x270>)
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a3c:	69bb      	ldr	r3, [r7, #24]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d109      	bne.n	8002a56 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6a1b      	ldr	r3, [r3, #32]
 8002a46:	4618      	mov	r0, r3
 8002a48:	f000 fd52 	bl	80034f0 <RCC_SetFlashLatencyFromMSIRange>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d001      	beq.n	8002a56 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e380      	b.n	8003158 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002a56:	f000 fc87 	bl	8003368 <HAL_RCC_GetSysClockFreq>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	4b51      	ldr	r3, [pc, #324]	; (8002ba4 <HAL_RCC_OscConfig+0x270>)
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	091b      	lsrs	r3, r3, #4
 8002a62:	f003 030f 	and.w	r3, r3, #15
 8002a66:	4950      	ldr	r1, [pc, #320]	; (8002ba8 <HAL_RCC_OscConfig+0x274>)
 8002a68:	5ccb      	ldrb	r3, [r1, r3]
 8002a6a:	f003 031f 	and.w	r3, r3, #31
 8002a6e:	fa22 f303 	lsr.w	r3, r2, r3
 8002a72:	4a4e      	ldr	r2, [pc, #312]	; (8002bac <HAL_RCC_OscConfig+0x278>)
 8002a74:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002a76:	4b4e      	ldr	r3, [pc, #312]	; (8002bb0 <HAL_RCC_OscConfig+0x27c>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f7fe f9fa 	bl	8000e74 <HAL_InitTick>
 8002a80:	4603      	mov	r3, r0
 8002a82:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002a84:	7bfb      	ldrb	r3, [r7, #15]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d052      	beq.n	8002b30 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002a8a:	7bfb      	ldrb	r3, [r7, #15]
 8002a8c:	e364      	b.n	8003158 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	699b      	ldr	r3, [r3, #24]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d032      	beq.n	8002afc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002a96:	4b43      	ldr	r3, [pc, #268]	; (8002ba4 <HAL_RCC_OscConfig+0x270>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a42      	ldr	r2, [pc, #264]	; (8002ba4 <HAL_RCC_OscConfig+0x270>)
 8002a9c:	f043 0301 	orr.w	r3, r3, #1
 8002aa0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002aa2:	f7fe fa37 	bl	8000f14 <HAL_GetTick>
 8002aa6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002aa8:	e008      	b.n	8002abc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002aaa:	f7fe fa33 	bl	8000f14 <HAL_GetTick>
 8002aae:	4602      	mov	r2, r0
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	1ad3      	subs	r3, r2, r3
 8002ab4:	2b02      	cmp	r3, #2
 8002ab6:	d901      	bls.n	8002abc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002ab8:	2303      	movs	r3, #3
 8002aba:	e34d      	b.n	8003158 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002abc:	4b39      	ldr	r3, [pc, #228]	; (8002ba4 <HAL_RCC_OscConfig+0x270>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 0302 	and.w	r3, r3, #2
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d0f0      	beq.n	8002aaa <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ac8:	4b36      	ldr	r3, [pc, #216]	; (8002ba4 <HAL_RCC_OscConfig+0x270>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a35      	ldr	r2, [pc, #212]	; (8002ba4 <HAL_RCC_OscConfig+0x270>)
 8002ace:	f043 0308 	orr.w	r3, r3, #8
 8002ad2:	6013      	str	r3, [r2, #0]
 8002ad4:	4b33      	ldr	r3, [pc, #204]	; (8002ba4 <HAL_RCC_OscConfig+0x270>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6a1b      	ldr	r3, [r3, #32]
 8002ae0:	4930      	ldr	r1, [pc, #192]	; (8002ba4 <HAL_RCC_OscConfig+0x270>)
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ae6:	4b2f      	ldr	r3, [pc, #188]	; (8002ba4 <HAL_RCC_OscConfig+0x270>)
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	69db      	ldr	r3, [r3, #28]
 8002af2:	021b      	lsls	r3, r3, #8
 8002af4:	492b      	ldr	r1, [pc, #172]	; (8002ba4 <HAL_RCC_OscConfig+0x270>)
 8002af6:	4313      	orrs	r3, r2
 8002af8:	604b      	str	r3, [r1, #4]
 8002afa:	e01a      	b.n	8002b32 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002afc:	4b29      	ldr	r3, [pc, #164]	; (8002ba4 <HAL_RCC_OscConfig+0x270>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a28      	ldr	r2, [pc, #160]	; (8002ba4 <HAL_RCC_OscConfig+0x270>)
 8002b02:	f023 0301 	bic.w	r3, r3, #1
 8002b06:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002b08:	f7fe fa04 	bl	8000f14 <HAL_GetTick>
 8002b0c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002b0e:	e008      	b.n	8002b22 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b10:	f7fe fa00 	bl	8000f14 <HAL_GetTick>
 8002b14:	4602      	mov	r2, r0
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	2b02      	cmp	r3, #2
 8002b1c:	d901      	bls.n	8002b22 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	e31a      	b.n	8003158 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002b22:	4b20      	ldr	r3, [pc, #128]	; (8002ba4 <HAL_RCC_OscConfig+0x270>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f003 0302 	and.w	r3, r3, #2
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d1f0      	bne.n	8002b10 <HAL_RCC_OscConfig+0x1dc>
 8002b2e:	e000      	b.n	8002b32 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002b30:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0301 	and.w	r3, r3, #1
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d073      	beq.n	8002c26 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002b3e:	69bb      	ldr	r3, [r7, #24]
 8002b40:	2b08      	cmp	r3, #8
 8002b42:	d005      	beq.n	8002b50 <HAL_RCC_OscConfig+0x21c>
 8002b44:	69bb      	ldr	r3, [r7, #24]
 8002b46:	2b0c      	cmp	r3, #12
 8002b48:	d10e      	bne.n	8002b68 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	2b03      	cmp	r3, #3
 8002b4e:	d10b      	bne.n	8002b68 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b50:	4b14      	ldr	r3, [pc, #80]	; (8002ba4 <HAL_RCC_OscConfig+0x270>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d063      	beq.n	8002c24 <HAL_RCC_OscConfig+0x2f0>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d15f      	bne.n	8002c24 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	e2f7      	b.n	8003158 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b70:	d106      	bne.n	8002b80 <HAL_RCC_OscConfig+0x24c>
 8002b72:	4b0c      	ldr	r3, [pc, #48]	; (8002ba4 <HAL_RCC_OscConfig+0x270>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a0b      	ldr	r2, [pc, #44]	; (8002ba4 <HAL_RCC_OscConfig+0x270>)
 8002b78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b7c:	6013      	str	r3, [r2, #0]
 8002b7e:	e025      	b.n	8002bcc <HAL_RCC_OscConfig+0x298>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b88:	d114      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x280>
 8002b8a:	4b06      	ldr	r3, [pc, #24]	; (8002ba4 <HAL_RCC_OscConfig+0x270>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a05      	ldr	r2, [pc, #20]	; (8002ba4 <HAL_RCC_OscConfig+0x270>)
 8002b90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b94:	6013      	str	r3, [r2, #0]
 8002b96:	4b03      	ldr	r3, [pc, #12]	; (8002ba4 <HAL_RCC_OscConfig+0x270>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a02      	ldr	r2, [pc, #8]	; (8002ba4 <HAL_RCC_OscConfig+0x270>)
 8002b9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ba0:	6013      	str	r3, [r2, #0]
 8002ba2:	e013      	b.n	8002bcc <HAL_RCC_OscConfig+0x298>
 8002ba4:	40021000 	.word	0x40021000
 8002ba8:	0800b5e0 	.word	0x0800b5e0
 8002bac:	20000000 	.word	0x20000000
 8002bb0:	20000004 	.word	0x20000004
 8002bb4:	4ba0      	ldr	r3, [pc, #640]	; (8002e38 <HAL_RCC_OscConfig+0x504>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a9f      	ldr	r2, [pc, #636]	; (8002e38 <HAL_RCC_OscConfig+0x504>)
 8002bba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bbe:	6013      	str	r3, [r2, #0]
 8002bc0:	4b9d      	ldr	r3, [pc, #628]	; (8002e38 <HAL_RCC_OscConfig+0x504>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a9c      	ldr	r2, [pc, #624]	; (8002e38 <HAL_RCC_OscConfig+0x504>)
 8002bc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d013      	beq.n	8002bfc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bd4:	f7fe f99e 	bl	8000f14 <HAL_GetTick>
 8002bd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002bda:	e008      	b.n	8002bee <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bdc:	f7fe f99a 	bl	8000f14 <HAL_GetTick>
 8002be0:	4602      	mov	r2, r0
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	1ad3      	subs	r3, r2, r3
 8002be6:	2b64      	cmp	r3, #100	; 0x64
 8002be8:	d901      	bls.n	8002bee <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002bea:	2303      	movs	r3, #3
 8002bec:	e2b4      	b.n	8003158 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002bee:	4b92      	ldr	r3, [pc, #584]	; (8002e38 <HAL_RCC_OscConfig+0x504>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d0f0      	beq.n	8002bdc <HAL_RCC_OscConfig+0x2a8>
 8002bfa:	e014      	b.n	8002c26 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bfc:	f7fe f98a 	bl	8000f14 <HAL_GetTick>
 8002c00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c02:	e008      	b.n	8002c16 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c04:	f7fe f986 	bl	8000f14 <HAL_GetTick>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	1ad3      	subs	r3, r2, r3
 8002c0e:	2b64      	cmp	r3, #100	; 0x64
 8002c10:	d901      	bls.n	8002c16 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002c12:	2303      	movs	r3, #3
 8002c14:	e2a0      	b.n	8003158 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c16:	4b88      	ldr	r3, [pc, #544]	; (8002e38 <HAL_RCC_OscConfig+0x504>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d1f0      	bne.n	8002c04 <HAL_RCC_OscConfig+0x2d0>
 8002c22:	e000      	b.n	8002c26 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 0302 	and.w	r3, r3, #2
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d060      	beq.n	8002cf4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002c32:	69bb      	ldr	r3, [r7, #24]
 8002c34:	2b04      	cmp	r3, #4
 8002c36:	d005      	beq.n	8002c44 <HAL_RCC_OscConfig+0x310>
 8002c38:	69bb      	ldr	r3, [r7, #24]
 8002c3a:	2b0c      	cmp	r3, #12
 8002c3c:	d119      	bne.n	8002c72 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	2b02      	cmp	r3, #2
 8002c42:	d116      	bne.n	8002c72 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c44:	4b7c      	ldr	r3, [pc, #496]	; (8002e38 <HAL_RCC_OscConfig+0x504>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d005      	beq.n	8002c5c <HAL_RCC_OscConfig+0x328>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	68db      	ldr	r3, [r3, #12]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d101      	bne.n	8002c5c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e27d      	b.n	8003158 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c5c:	4b76      	ldr	r3, [pc, #472]	; (8002e38 <HAL_RCC_OscConfig+0x504>)
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	691b      	ldr	r3, [r3, #16]
 8002c68:	061b      	lsls	r3, r3, #24
 8002c6a:	4973      	ldr	r1, [pc, #460]	; (8002e38 <HAL_RCC_OscConfig+0x504>)
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c70:	e040      	b.n	8002cf4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	68db      	ldr	r3, [r3, #12]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d023      	beq.n	8002cc2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c7a:	4b6f      	ldr	r3, [pc, #444]	; (8002e38 <HAL_RCC_OscConfig+0x504>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a6e      	ldr	r2, [pc, #440]	; (8002e38 <HAL_RCC_OscConfig+0x504>)
 8002c80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c86:	f7fe f945 	bl	8000f14 <HAL_GetTick>
 8002c8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c8c:	e008      	b.n	8002ca0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c8e:	f7fe f941 	bl	8000f14 <HAL_GetTick>
 8002c92:	4602      	mov	r2, r0
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	1ad3      	subs	r3, r2, r3
 8002c98:	2b02      	cmp	r3, #2
 8002c9a:	d901      	bls.n	8002ca0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002c9c:	2303      	movs	r3, #3
 8002c9e:	e25b      	b.n	8003158 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ca0:	4b65      	ldr	r3, [pc, #404]	; (8002e38 <HAL_RCC_OscConfig+0x504>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d0f0      	beq.n	8002c8e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cac:	4b62      	ldr	r3, [pc, #392]	; (8002e38 <HAL_RCC_OscConfig+0x504>)
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	691b      	ldr	r3, [r3, #16]
 8002cb8:	061b      	lsls	r3, r3, #24
 8002cba:	495f      	ldr	r1, [pc, #380]	; (8002e38 <HAL_RCC_OscConfig+0x504>)
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	604b      	str	r3, [r1, #4]
 8002cc0:	e018      	b.n	8002cf4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cc2:	4b5d      	ldr	r3, [pc, #372]	; (8002e38 <HAL_RCC_OscConfig+0x504>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a5c      	ldr	r2, [pc, #368]	; (8002e38 <HAL_RCC_OscConfig+0x504>)
 8002cc8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ccc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cce:	f7fe f921 	bl	8000f14 <HAL_GetTick>
 8002cd2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002cd4:	e008      	b.n	8002ce8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cd6:	f7fe f91d 	bl	8000f14 <HAL_GetTick>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	1ad3      	subs	r3, r2, r3
 8002ce0:	2b02      	cmp	r3, #2
 8002ce2:	d901      	bls.n	8002ce8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002ce4:	2303      	movs	r3, #3
 8002ce6:	e237      	b.n	8003158 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ce8:	4b53      	ldr	r3, [pc, #332]	; (8002e38 <HAL_RCC_OscConfig+0x504>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d1f0      	bne.n	8002cd6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 0308 	and.w	r3, r3, #8
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d03c      	beq.n	8002d7a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	695b      	ldr	r3, [r3, #20]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d01c      	beq.n	8002d42 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d08:	4b4b      	ldr	r3, [pc, #300]	; (8002e38 <HAL_RCC_OscConfig+0x504>)
 8002d0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d0e:	4a4a      	ldr	r2, [pc, #296]	; (8002e38 <HAL_RCC_OscConfig+0x504>)
 8002d10:	f043 0301 	orr.w	r3, r3, #1
 8002d14:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d18:	f7fe f8fc 	bl	8000f14 <HAL_GetTick>
 8002d1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d1e:	e008      	b.n	8002d32 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d20:	f7fe f8f8 	bl	8000f14 <HAL_GetTick>
 8002d24:	4602      	mov	r2, r0
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	1ad3      	subs	r3, r2, r3
 8002d2a:	2b02      	cmp	r3, #2
 8002d2c:	d901      	bls.n	8002d32 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002d2e:	2303      	movs	r3, #3
 8002d30:	e212      	b.n	8003158 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d32:	4b41      	ldr	r3, [pc, #260]	; (8002e38 <HAL_RCC_OscConfig+0x504>)
 8002d34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d38:	f003 0302 	and.w	r3, r3, #2
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d0ef      	beq.n	8002d20 <HAL_RCC_OscConfig+0x3ec>
 8002d40:	e01b      	b.n	8002d7a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d42:	4b3d      	ldr	r3, [pc, #244]	; (8002e38 <HAL_RCC_OscConfig+0x504>)
 8002d44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d48:	4a3b      	ldr	r2, [pc, #236]	; (8002e38 <HAL_RCC_OscConfig+0x504>)
 8002d4a:	f023 0301 	bic.w	r3, r3, #1
 8002d4e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d52:	f7fe f8df 	bl	8000f14 <HAL_GetTick>
 8002d56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d58:	e008      	b.n	8002d6c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d5a:	f7fe f8db 	bl	8000f14 <HAL_GetTick>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	1ad3      	subs	r3, r2, r3
 8002d64:	2b02      	cmp	r3, #2
 8002d66:	d901      	bls.n	8002d6c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002d68:	2303      	movs	r3, #3
 8002d6a:	e1f5      	b.n	8003158 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d6c:	4b32      	ldr	r3, [pc, #200]	; (8002e38 <HAL_RCC_OscConfig+0x504>)
 8002d6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d72:	f003 0302 	and.w	r3, r3, #2
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d1ef      	bne.n	8002d5a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 0304 	and.w	r3, r3, #4
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	f000 80a6 	beq.w	8002ed4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002d8c:	4b2a      	ldr	r3, [pc, #168]	; (8002e38 <HAL_RCC_OscConfig+0x504>)
 8002d8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d10d      	bne.n	8002db4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d98:	4b27      	ldr	r3, [pc, #156]	; (8002e38 <HAL_RCC_OscConfig+0x504>)
 8002d9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d9c:	4a26      	ldr	r2, [pc, #152]	; (8002e38 <HAL_RCC_OscConfig+0x504>)
 8002d9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002da2:	6593      	str	r3, [r2, #88]	; 0x58
 8002da4:	4b24      	ldr	r3, [pc, #144]	; (8002e38 <HAL_RCC_OscConfig+0x504>)
 8002da6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002da8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dac:	60bb      	str	r3, [r7, #8]
 8002dae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002db0:	2301      	movs	r3, #1
 8002db2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002db4:	4b21      	ldr	r3, [pc, #132]	; (8002e3c <HAL_RCC_OscConfig+0x508>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d118      	bne.n	8002df2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002dc0:	4b1e      	ldr	r3, [pc, #120]	; (8002e3c <HAL_RCC_OscConfig+0x508>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a1d      	ldr	r2, [pc, #116]	; (8002e3c <HAL_RCC_OscConfig+0x508>)
 8002dc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002dcc:	f7fe f8a2 	bl	8000f14 <HAL_GetTick>
 8002dd0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002dd2:	e008      	b.n	8002de6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dd4:	f7fe f89e 	bl	8000f14 <HAL_GetTick>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	2b02      	cmp	r3, #2
 8002de0:	d901      	bls.n	8002de6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002de2:	2303      	movs	r3, #3
 8002de4:	e1b8      	b.n	8003158 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002de6:	4b15      	ldr	r3, [pc, #84]	; (8002e3c <HAL_RCC_OscConfig+0x508>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d0f0      	beq.n	8002dd4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d108      	bne.n	8002e0c <HAL_RCC_OscConfig+0x4d8>
 8002dfa:	4b0f      	ldr	r3, [pc, #60]	; (8002e38 <HAL_RCC_OscConfig+0x504>)
 8002dfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e00:	4a0d      	ldr	r2, [pc, #52]	; (8002e38 <HAL_RCC_OscConfig+0x504>)
 8002e02:	f043 0301 	orr.w	r3, r3, #1
 8002e06:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e0a:	e029      	b.n	8002e60 <HAL_RCC_OscConfig+0x52c>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	2b05      	cmp	r3, #5
 8002e12:	d115      	bne.n	8002e40 <HAL_RCC_OscConfig+0x50c>
 8002e14:	4b08      	ldr	r3, [pc, #32]	; (8002e38 <HAL_RCC_OscConfig+0x504>)
 8002e16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e1a:	4a07      	ldr	r2, [pc, #28]	; (8002e38 <HAL_RCC_OscConfig+0x504>)
 8002e1c:	f043 0304 	orr.w	r3, r3, #4
 8002e20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e24:	4b04      	ldr	r3, [pc, #16]	; (8002e38 <HAL_RCC_OscConfig+0x504>)
 8002e26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e2a:	4a03      	ldr	r2, [pc, #12]	; (8002e38 <HAL_RCC_OscConfig+0x504>)
 8002e2c:	f043 0301 	orr.w	r3, r3, #1
 8002e30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e34:	e014      	b.n	8002e60 <HAL_RCC_OscConfig+0x52c>
 8002e36:	bf00      	nop
 8002e38:	40021000 	.word	0x40021000
 8002e3c:	40007000 	.word	0x40007000
 8002e40:	4b9d      	ldr	r3, [pc, #628]	; (80030b8 <HAL_RCC_OscConfig+0x784>)
 8002e42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e46:	4a9c      	ldr	r2, [pc, #624]	; (80030b8 <HAL_RCC_OscConfig+0x784>)
 8002e48:	f023 0301 	bic.w	r3, r3, #1
 8002e4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e50:	4b99      	ldr	r3, [pc, #612]	; (80030b8 <HAL_RCC_OscConfig+0x784>)
 8002e52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e56:	4a98      	ldr	r2, [pc, #608]	; (80030b8 <HAL_RCC_OscConfig+0x784>)
 8002e58:	f023 0304 	bic.w	r3, r3, #4
 8002e5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d016      	beq.n	8002e96 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e68:	f7fe f854 	bl	8000f14 <HAL_GetTick>
 8002e6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e6e:	e00a      	b.n	8002e86 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e70:	f7fe f850 	bl	8000f14 <HAL_GetTick>
 8002e74:	4602      	mov	r2, r0
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d901      	bls.n	8002e86 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002e82:	2303      	movs	r3, #3
 8002e84:	e168      	b.n	8003158 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e86:	4b8c      	ldr	r3, [pc, #560]	; (80030b8 <HAL_RCC_OscConfig+0x784>)
 8002e88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e8c:	f003 0302 	and.w	r3, r3, #2
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d0ed      	beq.n	8002e70 <HAL_RCC_OscConfig+0x53c>
 8002e94:	e015      	b.n	8002ec2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e96:	f7fe f83d 	bl	8000f14 <HAL_GetTick>
 8002e9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e9c:	e00a      	b.n	8002eb4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e9e:	f7fe f839 	bl	8000f14 <HAL_GetTick>
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	1ad3      	subs	r3, r2, r3
 8002ea8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d901      	bls.n	8002eb4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002eb0:	2303      	movs	r3, #3
 8002eb2:	e151      	b.n	8003158 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002eb4:	4b80      	ldr	r3, [pc, #512]	; (80030b8 <HAL_RCC_OscConfig+0x784>)
 8002eb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eba:	f003 0302 	and.w	r3, r3, #2
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d1ed      	bne.n	8002e9e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ec2:	7ffb      	ldrb	r3, [r7, #31]
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	d105      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ec8:	4b7b      	ldr	r3, [pc, #492]	; (80030b8 <HAL_RCC_OscConfig+0x784>)
 8002eca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ecc:	4a7a      	ldr	r2, [pc, #488]	; (80030b8 <HAL_RCC_OscConfig+0x784>)
 8002ece:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ed2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 0320 	and.w	r3, r3, #32
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d03c      	beq.n	8002f5a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d01c      	beq.n	8002f22 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002ee8:	4b73      	ldr	r3, [pc, #460]	; (80030b8 <HAL_RCC_OscConfig+0x784>)
 8002eea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002eee:	4a72      	ldr	r2, [pc, #456]	; (80030b8 <HAL_RCC_OscConfig+0x784>)
 8002ef0:	f043 0301 	orr.w	r3, r3, #1
 8002ef4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ef8:	f7fe f80c 	bl	8000f14 <HAL_GetTick>
 8002efc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002efe:	e008      	b.n	8002f12 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002f00:	f7fe f808 	bl	8000f14 <HAL_GetTick>
 8002f04:	4602      	mov	r2, r0
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	1ad3      	subs	r3, r2, r3
 8002f0a:	2b02      	cmp	r3, #2
 8002f0c:	d901      	bls.n	8002f12 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	e122      	b.n	8003158 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002f12:	4b69      	ldr	r3, [pc, #420]	; (80030b8 <HAL_RCC_OscConfig+0x784>)
 8002f14:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f18:	f003 0302 	and.w	r3, r3, #2
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d0ef      	beq.n	8002f00 <HAL_RCC_OscConfig+0x5cc>
 8002f20:	e01b      	b.n	8002f5a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002f22:	4b65      	ldr	r3, [pc, #404]	; (80030b8 <HAL_RCC_OscConfig+0x784>)
 8002f24:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f28:	4a63      	ldr	r2, [pc, #396]	; (80030b8 <HAL_RCC_OscConfig+0x784>)
 8002f2a:	f023 0301 	bic.w	r3, r3, #1
 8002f2e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f32:	f7fd ffef 	bl	8000f14 <HAL_GetTick>
 8002f36:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002f38:	e008      	b.n	8002f4c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002f3a:	f7fd ffeb 	bl	8000f14 <HAL_GetTick>
 8002f3e:	4602      	mov	r2, r0
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	1ad3      	subs	r3, r2, r3
 8002f44:	2b02      	cmp	r3, #2
 8002f46:	d901      	bls.n	8002f4c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002f48:	2303      	movs	r3, #3
 8002f4a:	e105      	b.n	8003158 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002f4c:	4b5a      	ldr	r3, [pc, #360]	; (80030b8 <HAL_RCC_OscConfig+0x784>)
 8002f4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f52:	f003 0302 	and.w	r3, r3, #2
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d1ef      	bne.n	8002f3a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	f000 80f9 	beq.w	8003156 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f68:	2b02      	cmp	r3, #2
 8002f6a:	f040 80cf 	bne.w	800310c <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002f6e:	4b52      	ldr	r3, [pc, #328]	; (80030b8 <HAL_RCC_OscConfig+0x784>)
 8002f70:	68db      	ldr	r3, [r3, #12]
 8002f72:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	f003 0203 	and.w	r2, r3, #3
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d12c      	bne.n	8002fdc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f8c:	3b01      	subs	r3, #1
 8002f8e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d123      	bne.n	8002fdc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f9e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d11b      	bne.n	8002fdc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fae:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d113      	bne.n	8002fdc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fbe:	085b      	lsrs	r3, r3, #1
 8002fc0:	3b01      	subs	r3, #1
 8002fc2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d109      	bne.n	8002fdc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd2:	085b      	lsrs	r3, r3, #1
 8002fd4:	3b01      	subs	r3, #1
 8002fd6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d071      	beq.n	80030c0 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002fdc:	69bb      	ldr	r3, [r7, #24]
 8002fde:	2b0c      	cmp	r3, #12
 8002fe0:	d068      	beq.n	80030b4 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002fe2:	4b35      	ldr	r3, [pc, #212]	; (80030b8 <HAL_RCC_OscConfig+0x784>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d105      	bne.n	8002ffa <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002fee:	4b32      	ldr	r3, [pc, #200]	; (80030b8 <HAL_RCC_OscConfig+0x784>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d001      	beq.n	8002ffe <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e0ac      	b.n	8003158 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002ffe:	4b2e      	ldr	r3, [pc, #184]	; (80030b8 <HAL_RCC_OscConfig+0x784>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a2d      	ldr	r2, [pc, #180]	; (80030b8 <HAL_RCC_OscConfig+0x784>)
 8003004:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003008:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800300a:	f7fd ff83 	bl	8000f14 <HAL_GetTick>
 800300e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003010:	e008      	b.n	8003024 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003012:	f7fd ff7f 	bl	8000f14 <HAL_GetTick>
 8003016:	4602      	mov	r2, r0
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	1ad3      	subs	r3, r2, r3
 800301c:	2b02      	cmp	r3, #2
 800301e:	d901      	bls.n	8003024 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8003020:	2303      	movs	r3, #3
 8003022:	e099      	b.n	8003158 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003024:	4b24      	ldr	r3, [pc, #144]	; (80030b8 <HAL_RCC_OscConfig+0x784>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800302c:	2b00      	cmp	r3, #0
 800302e:	d1f0      	bne.n	8003012 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003030:	4b21      	ldr	r3, [pc, #132]	; (80030b8 <HAL_RCC_OscConfig+0x784>)
 8003032:	68da      	ldr	r2, [r3, #12]
 8003034:	4b21      	ldr	r3, [pc, #132]	; (80030bc <HAL_RCC_OscConfig+0x788>)
 8003036:	4013      	ands	r3, r2
 8003038:	687a      	ldr	r2, [r7, #4]
 800303a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800303c:	687a      	ldr	r2, [r7, #4]
 800303e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003040:	3a01      	subs	r2, #1
 8003042:	0112      	lsls	r2, r2, #4
 8003044:	4311      	orrs	r1, r2
 8003046:	687a      	ldr	r2, [r7, #4]
 8003048:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800304a:	0212      	lsls	r2, r2, #8
 800304c:	4311      	orrs	r1, r2
 800304e:	687a      	ldr	r2, [r7, #4]
 8003050:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003052:	0852      	lsrs	r2, r2, #1
 8003054:	3a01      	subs	r2, #1
 8003056:	0552      	lsls	r2, r2, #21
 8003058:	4311      	orrs	r1, r2
 800305a:	687a      	ldr	r2, [r7, #4]
 800305c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800305e:	0852      	lsrs	r2, r2, #1
 8003060:	3a01      	subs	r2, #1
 8003062:	0652      	lsls	r2, r2, #25
 8003064:	4311      	orrs	r1, r2
 8003066:	687a      	ldr	r2, [r7, #4]
 8003068:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800306a:	06d2      	lsls	r2, r2, #27
 800306c:	430a      	orrs	r2, r1
 800306e:	4912      	ldr	r1, [pc, #72]	; (80030b8 <HAL_RCC_OscConfig+0x784>)
 8003070:	4313      	orrs	r3, r2
 8003072:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003074:	4b10      	ldr	r3, [pc, #64]	; (80030b8 <HAL_RCC_OscConfig+0x784>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a0f      	ldr	r2, [pc, #60]	; (80030b8 <HAL_RCC_OscConfig+0x784>)
 800307a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800307e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003080:	4b0d      	ldr	r3, [pc, #52]	; (80030b8 <HAL_RCC_OscConfig+0x784>)
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	4a0c      	ldr	r2, [pc, #48]	; (80030b8 <HAL_RCC_OscConfig+0x784>)
 8003086:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800308a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800308c:	f7fd ff42 	bl	8000f14 <HAL_GetTick>
 8003090:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003092:	e008      	b.n	80030a6 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003094:	f7fd ff3e 	bl	8000f14 <HAL_GetTick>
 8003098:	4602      	mov	r2, r0
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	1ad3      	subs	r3, r2, r3
 800309e:	2b02      	cmp	r3, #2
 80030a0:	d901      	bls.n	80030a6 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80030a2:	2303      	movs	r3, #3
 80030a4:	e058      	b.n	8003158 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030a6:	4b04      	ldr	r3, [pc, #16]	; (80030b8 <HAL_RCC_OscConfig+0x784>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d0f0      	beq.n	8003094 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80030b2:	e050      	b.n	8003156 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	e04f      	b.n	8003158 <HAL_RCC_OscConfig+0x824>
 80030b8:	40021000 	.word	0x40021000
 80030bc:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030c0:	4b27      	ldr	r3, [pc, #156]	; (8003160 <HAL_RCC_OscConfig+0x82c>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d144      	bne.n	8003156 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80030cc:	4b24      	ldr	r3, [pc, #144]	; (8003160 <HAL_RCC_OscConfig+0x82c>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a23      	ldr	r2, [pc, #140]	; (8003160 <HAL_RCC_OscConfig+0x82c>)
 80030d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030d6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80030d8:	4b21      	ldr	r3, [pc, #132]	; (8003160 <HAL_RCC_OscConfig+0x82c>)
 80030da:	68db      	ldr	r3, [r3, #12]
 80030dc:	4a20      	ldr	r2, [pc, #128]	; (8003160 <HAL_RCC_OscConfig+0x82c>)
 80030de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030e2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80030e4:	f7fd ff16 	bl	8000f14 <HAL_GetTick>
 80030e8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030ea:	e008      	b.n	80030fe <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030ec:	f7fd ff12 	bl	8000f14 <HAL_GetTick>
 80030f0:	4602      	mov	r2, r0
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	1ad3      	subs	r3, r2, r3
 80030f6:	2b02      	cmp	r3, #2
 80030f8:	d901      	bls.n	80030fe <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80030fa:	2303      	movs	r3, #3
 80030fc:	e02c      	b.n	8003158 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030fe:	4b18      	ldr	r3, [pc, #96]	; (8003160 <HAL_RCC_OscConfig+0x82c>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003106:	2b00      	cmp	r3, #0
 8003108:	d0f0      	beq.n	80030ec <HAL_RCC_OscConfig+0x7b8>
 800310a:	e024      	b.n	8003156 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800310c:	69bb      	ldr	r3, [r7, #24]
 800310e:	2b0c      	cmp	r3, #12
 8003110:	d01f      	beq.n	8003152 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003112:	4b13      	ldr	r3, [pc, #76]	; (8003160 <HAL_RCC_OscConfig+0x82c>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a12      	ldr	r2, [pc, #72]	; (8003160 <HAL_RCC_OscConfig+0x82c>)
 8003118:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800311c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800311e:	f7fd fef9 	bl	8000f14 <HAL_GetTick>
 8003122:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003124:	e008      	b.n	8003138 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003126:	f7fd fef5 	bl	8000f14 <HAL_GetTick>
 800312a:	4602      	mov	r2, r0
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	1ad3      	subs	r3, r2, r3
 8003130:	2b02      	cmp	r3, #2
 8003132:	d901      	bls.n	8003138 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8003134:	2303      	movs	r3, #3
 8003136:	e00f      	b.n	8003158 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003138:	4b09      	ldr	r3, [pc, #36]	; (8003160 <HAL_RCC_OscConfig+0x82c>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003140:	2b00      	cmp	r3, #0
 8003142:	d1f0      	bne.n	8003126 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003144:	4b06      	ldr	r3, [pc, #24]	; (8003160 <HAL_RCC_OscConfig+0x82c>)
 8003146:	68da      	ldr	r2, [r3, #12]
 8003148:	4905      	ldr	r1, [pc, #20]	; (8003160 <HAL_RCC_OscConfig+0x82c>)
 800314a:	4b06      	ldr	r3, [pc, #24]	; (8003164 <HAL_RCC_OscConfig+0x830>)
 800314c:	4013      	ands	r3, r2
 800314e:	60cb      	str	r3, [r1, #12]
 8003150:	e001      	b.n	8003156 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e000      	b.n	8003158 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8003156:	2300      	movs	r3, #0
}
 8003158:	4618      	mov	r0, r3
 800315a:	3720      	adds	r7, #32
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}
 8003160:	40021000 	.word	0x40021000
 8003164:	feeefffc 	.word	0xfeeefffc

08003168 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b084      	sub	sp, #16
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
 8003170:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d101      	bne.n	800317c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	e0e7      	b.n	800334c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800317c:	4b75      	ldr	r3, [pc, #468]	; (8003354 <HAL_RCC_ClockConfig+0x1ec>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 0307 	and.w	r3, r3, #7
 8003184:	683a      	ldr	r2, [r7, #0]
 8003186:	429a      	cmp	r2, r3
 8003188:	d910      	bls.n	80031ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800318a:	4b72      	ldr	r3, [pc, #456]	; (8003354 <HAL_RCC_ClockConfig+0x1ec>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f023 0207 	bic.w	r2, r3, #7
 8003192:	4970      	ldr	r1, [pc, #448]	; (8003354 <HAL_RCC_ClockConfig+0x1ec>)
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	4313      	orrs	r3, r2
 8003198:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800319a:	4b6e      	ldr	r3, [pc, #440]	; (8003354 <HAL_RCC_ClockConfig+0x1ec>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 0307 	and.w	r3, r3, #7
 80031a2:	683a      	ldr	r2, [r7, #0]
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d001      	beq.n	80031ac <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	e0cf      	b.n	800334c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f003 0302 	and.w	r3, r3, #2
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d010      	beq.n	80031da <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	689a      	ldr	r2, [r3, #8]
 80031bc:	4b66      	ldr	r3, [pc, #408]	; (8003358 <HAL_RCC_ClockConfig+0x1f0>)
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031c4:	429a      	cmp	r2, r3
 80031c6:	d908      	bls.n	80031da <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031c8:	4b63      	ldr	r3, [pc, #396]	; (8003358 <HAL_RCC_ClockConfig+0x1f0>)
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	4960      	ldr	r1, [pc, #384]	; (8003358 <HAL_RCC_ClockConfig+0x1f0>)
 80031d6:	4313      	orrs	r3, r2
 80031d8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 0301 	and.w	r3, r3, #1
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d04c      	beq.n	8003280 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	2b03      	cmp	r3, #3
 80031ec:	d107      	bne.n	80031fe <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031ee:	4b5a      	ldr	r3, [pc, #360]	; (8003358 <HAL_RCC_ClockConfig+0x1f0>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d121      	bne.n	800323e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e0a6      	b.n	800334c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	2b02      	cmp	r3, #2
 8003204:	d107      	bne.n	8003216 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003206:	4b54      	ldr	r3, [pc, #336]	; (8003358 <HAL_RCC_ClockConfig+0x1f0>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800320e:	2b00      	cmp	r3, #0
 8003210:	d115      	bne.n	800323e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e09a      	b.n	800334c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d107      	bne.n	800322e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800321e:	4b4e      	ldr	r3, [pc, #312]	; (8003358 <HAL_RCC_ClockConfig+0x1f0>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 0302 	and.w	r3, r3, #2
 8003226:	2b00      	cmp	r3, #0
 8003228:	d109      	bne.n	800323e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	e08e      	b.n	800334c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800322e:	4b4a      	ldr	r3, [pc, #296]	; (8003358 <HAL_RCC_ClockConfig+0x1f0>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003236:	2b00      	cmp	r3, #0
 8003238:	d101      	bne.n	800323e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e086      	b.n	800334c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800323e:	4b46      	ldr	r3, [pc, #280]	; (8003358 <HAL_RCC_ClockConfig+0x1f0>)
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	f023 0203 	bic.w	r2, r3, #3
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	4943      	ldr	r1, [pc, #268]	; (8003358 <HAL_RCC_ClockConfig+0x1f0>)
 800324c:	4313      	orrs	r3, r2
 800324e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003250:	f7fd fe60 	bl	8000f14 <HAL_GetTick>
 8003254:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003256:	e00a      	b.n	800326e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003258:	f7fd fe5c 	bl	8000f14 <HAL_GetTick>
 800325c:	4602      	mov	r2, r0
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	1ad3      	subs	r3, r2, r3
 8003262:	f241 3288 	movw	r2, #5000	; 0x1388
 8003266:	4293      	cmp	r3, r2
 8003268:	d901      	bls.n	800326e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800326a:	2303      	movs	r3, #3
 800326c:	e06e      	b.n	800334c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800326e:	4b3a      	ldr	r3, [pc, #232]	; (8003358 <HAL_RCC_ClockConfig+0x1f0>)
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	f003 020c 	and.w	r2, r3, #12
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	009b      	lsls	r3, r3, #2
 800327c:	429a      	cmp	r2, r3
 800327e:	d1eb      	bne.n	8003258 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 0302 	and.w	r3, r3, #2
 8003288:	2b00      	cmp	r3, #0
 800328a:	d010      	beq.n	80032ae <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	689a      	ldr	r2, [r3, #8]
 8003290:	4b31      	ldr	r3, [pc, #196]	; (8003358 <HAL_RCC_ClockConfig+0x1f0>)
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003298:	429a      	cmp	r2, r3
 800329a:	d208      	bcs.n	80032ae <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800329c:	4b2e      	ldr	r3, [pc, #184]	; (8003358 <HAL_RCC_ClockConfig+0x1f0>)
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	492b      	ldr	r1, [pc, #172]	; (8003358 <HAL_RCC_ClockConfig+0x1f0>)
 80032aa:	4313      	orrs	r3, r2
 80032ac:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032ae:	4b29      	ldr	r3, [pc, #164]	; (8003354 <HAL_RCC_ClockConfig+0x1ec>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 0307 	and.w	r3, r3, #7
 80032b6:	683a      	ldr	r2, [r7, #0]
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d210      	bcs.n	80032de <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032bc:	4b25      	ldr	r3, [pc, #148]	; (8003354 <HAL_RCC_ClockConfig+0x1ec>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f023 0207 	bic.w	r2, r3, #7
 80032c4:	4923      	ldr	r1, [pc, #140]	; (8003354 <HAL_RCC_ClockConfig+0x1ec>)
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	4313      	orrs	r3, r2
 80032ca:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032cc:	4b21      	ldr	r3, [pc, #132]	; (8003354 <HAL_RCC_ClockConfig+0x1ec>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f003 0307 	and.w	r3, r3, #7
 80032d4:	683a      	ldr	r2, [r7, #0]
 80032d6:	429a      	cmp	r2, r3
 80032d8:	d001      	beq.n	80032de <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e036      	b.n	800334c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 0304 	and.w	r3, r3, #4
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d008      	beq.n	80032fc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032ea:	4b1b      	ldr	r3, [pc, #108]	; (8003358 <HAL_RCC_ClockConfig+0x1f0>)
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	68db      	ldr	r3, [r3, #12]
 80032f6:	4918      	ldr	r1, [pc, #96]	; (8003358 <HAL_RCC_ClockConfig+0x1f0>)
 80032f8:	4313      	orrs	r3, r2
 80032fa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 0308 	and.w	r3, r3, #8
 8003304:	2b00      	cmp	r3, #0
 8003306:	d009      	beq.n	800331c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003308:	4b13      	ldr	r3, [pc, #76]	; (8003358 <HAL_RCC_ClockConfig+0x1f0>)
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	691b      	ldr	r3, [r3, #16]
 8003314:	00db      	lsls	r3, r3, #3
 8003316:	4910      	ldr	r1, [pc, #64]	; (8003358 <HAL_RCC_ClockConfig+0x1f0>)
 8003318:	4313      	orrs	r3, r2
 800331a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800331c:	f000 f824 	bl	8003368 <HAL_RCC_GetSysClockFreq>
 8003320:	4602      	mov	r2, r0
 8003322:	4b0d      	ldr	r3, [pc, #52]	; (8003358 <HAL_RCC_ClockConfig+0x1f0>)
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	091b      	lsrs	r3, r3, #4
 8003328:	f003 030f 	and.w	r3, r3, #15
 800332c:	490b      	ldr	r1, [pc, #44]	; (800335c <HAL_RCC_ClockConfig+0x1f4>)
 800332e:	5ccb      	ldrb	r3, [r1, r3]
 8003330:	f003 031f 	and.w	r3, r3, #31
 8003334:	fa22 f303 	lsr.w	r3, r2, r3
 8003338:	4a09      	ldr	r2, [pc, #36]	; (8003360 <HAL_RCC_ClockConfig+0x1f8>)
 800333a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800333c:	4b09      	ldr	r3, [pc, #36]	; (8003364 <HAL_RCC_ClockConfig+0x1fc>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4618      	mov	r0, r3
 8003342:	f7fd fd97 	bl	8000e74 <HAL_InitTick>
 8003346:	4603      	mov	r3, r0
 8003348:	72fb      	strb	r3, [r7, #11]

  return status;
 800334a:	7afb      	ldrb	r3, [r7, #11]
}
 800334c:	4618      	mov	r0, r3
 800334e:	3710      	adds	r7, #16
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}
 8003354:	40022000 	.word	0x40022000
 8003358:	40021000 	.word	0x40021000
 800335c:	0800b5e0 	.word	0x0800b5e0
 8003360:	20000000 	.word	0x20000000
 8003364:	20000004 	.word	0x20000004

08003368 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003368:	b480      	push	{r7}
 800336a:	b089      	sub	sp, #36	; 0x24
 800336c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800336e:	2300      	movs	r3, #0
 8003370:	61fb      	str	r3, [r7, #28]
 8003372:	2300      	movs	r3, #0
 8003374:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003376:	4b3e      	ldr	r3, [pc, #248]	; (8003470 <HAL_RCC_GetSysClockFreq+0x108>)
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	f003 030c 	and.w	r3, r3, #12
 800337e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003380:	4b3b      	ldr	r3, [pc, #236]	; (8003470 <HAL_RCC_GetSysClockFreq+0x108>)
 8003382:	68db      	ldr	r3, [r3, #12]
 8003384:	f003 0303 	and.w	r3, r3, #3
 8003388:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d005      	beq.n	800339c <HAL_RCC_GetSysClockFreq+0x34>
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	2b0c      	cmp	r3, #12
 8003394:	d121      	bne.n	80033da <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2b01      	cmp	r3, #1
 800339a:	d11e      	bne.n	80033da <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800339c:	4b34      	ldr	r3, [pc, #208]	; (8003470 <HAL_RCC_GetSysClockFreq+0x108>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 0308 	and.w	r3, r3, #8
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d107      	bne.n	80033b8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80033a8:	4b31      	ldr	r3, [pc, #196]	; (8003470 <HAL_RCC_GetSysClockFreq+0x108>)
 80033aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033ae:	0a1b      	lsrs	r3, r3, #8
 80033b0:	f003 030f 	and.w	r3, r3, #15
 80033b4:	61fb      	str	r3, [r7, #28]
 80033b6:	e005      	b.n	80033c4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80033b8:	4b2d      	ldr	r3, [pc, #180]	; (8003470 <HAL_RCC_GetSysClockFreq+0x108>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	091b      	lsrs	r3, r3, #4
 80033be:	f003 030f 	and.w	r3, r3, #15
 80033c2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80033c4:	4a2b      	ldr	r2, [pc, #172]	; (8003474 <HAL_RCC_GetSysClockFreq+0x10c>)
 80033c6:	69fb      	ldr	r3, [r7, #28]
 80033c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033cc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d10d      	bne.n	80033f0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80033d4:	69fb      	ldr	r3, [r7, #28]
 80033d6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80033d8:	e00a      	b.n	80033f0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	2b04      	cmp	r3, #4
 80033de:	d102      	bne.n	80033e6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80033e0:	4b25      	ldr	r3, [pc, #148]	; (8003478 <HAL_RCC_GetSysClockFreq+0x110>)
 80033e2:	61bb      	str	r3, [r7, #24]
 80033e4:	e004      	b.n	80033f0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	2b08      	cmp	r3, #8
 80033ea:	d101      	bne.n	80033f0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80033ec:	4b23      	ldr	r3, [pc, #140]	; (800347c <HAL_RCC_GetSysClockFreq+0x114>)
 80033ee:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	2b0c      	cmp	r3, #12
 80033f4:	d134      	bne.n	8003460 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80033f6:	4b1e      	ldr	r3, [pc, #120]	; (8003470 <HAL_RCC_GetSysClockFreq+0x108>)
 80033f8:	68db      	ldr	r3, [r3, #12]
 80033fa:	f003 0303 	and.w	r3, r3, #3
 80033fe:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	2b02      	cmp	r3, #2
 8003404:	d003      	beq.n	800340e <HAL_RCC_GetSysClockFreq+0xa6>
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	2b03      	cmp	r3, #3
 800340a:	d003      	beq.n	8003414 <HAL_RCC_GetSysClockFreq+0xac>
 800340c:	e005      	b.n	800341a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800340e:	4b1a      	ldr	r3, [pc, #104]	; (8003478 <HAL_RCC_GetSysClockFreq+0x110>)
 8003410:	617b      	str	r3, [r7, #20]
      break;
 8003412:	e005      	b.n	8003420 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003414:	4b19      	ldr	r3, [pc, #100]	; (800347c <HAL_RCC_GetSysClockFreq+0x114>)
 8003416:	617b      	str	r3, [r7, #20]
      break;
 8003418:	e002      	b.n	8003420 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800341a:	69fb      	ldr	r3, [r7, #28]
 800341c:	617b      	str	r3, [r7, #20]
      break;
 800341e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003420:	4b13      	ldr	r3, [pc, #76]	; (8003470 <HAL_RCC_GetSysClockFreq+0x108>)
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	091b      	lsrs	r3, r3, #4
 8003426:	f003 0307 	and.w	r3, r3, #7
 800342a:	3301      	adds	r3, #1
 800342c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800342e:	4b10      	ldr	r3, [pc, #64]	; (8003470 <HAL_RCC_GetSysClockFreq+0x108>)
 8003430:	68db      	ldr	r3, [r3, #12]
 8003432:	0a1b      	lsrs	r3, r3, #8
 8003434:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003438:	697a      	ldr	r2, [r7, #20]
 800343a:	fb03 f202 	mul.w	r2, r3, r2
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	fbb2 f3f3 	udiv	r3, r2, r3
 8003444:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003446:	4b0a      	ldr	r3, [pc, #40]	; (8003470 <HAL_RCC_GetSysClockFreq+0x108>)
 8003448:	68db      	ldr	r3, [r3, #12]
 800344a:	0e5b      	lsrs	r3, r3, #25
 800344c:	f003 0303 	and.w	r3, r3, #3
 8003450:	3301      	adds	r3, #1
 8003452:	005b      	lsls	r3, r3, #1
 8003454:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003456:	697a      	ldr	r2, [r7, #20]
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	fbb2 f3f3 	udiv	r3, r2, r3
 800345e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003460:	69bb      	ldr	r3, [r7, #24]
}
 8003462:	4618      	mov	r0, r3
 8003464:	3724      	adds	r7, #36	; 0x24
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr
 800346e:	bf00      	nop
 8003470:	40021000 	.word	0x40021000
 8003474:	0800b5f8 	.word	0x0800b5f8
 8003478:	00f42400 	.word	0x00f42400
 800347c:	007a1200 	.word	0x007a1200

08003480 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003480:	b480      	push	{r7}
 8003482:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003484:	4b03      	ldr	r3, [pc, #12]	; (8003494 <HAL_RCC_GetHCLKFreq+0x14>)
 8003486:	681b      	ldr	r3, [r3, #0]
}
 8003488:	4618      	mov	r0, r3
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr
 8003492:	bf00      	nop
 8003494:	20000000 	.word	0x20000000

08003498 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800349c:	f7ff fff0 	bl	8003480 <HAL_RCC_GetHCLKFreq>
 80034a0:	4602      	mov	r2, r0
 80034a2:	4b06      	ldr	r3, [pc, #24]	; (80034bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	0a1b      	lsrs	r3, r3, #8
 80034a8:	f003 0307 	and.w	r3, r3, #7
 80034ac:	4904      	ldr	r1, [pc, #16]	; (80034c0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80034ae:	5ccb      	ldrb	r3, [r1, r3]
 80034b0:	f003 031f 	and.w	r3, r3, #31
 80034b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	bd80      	pop	{r7, pc}
 80034bc:	40021000 	.word	0x40021000
 80034c0:	0800b5f0 	.word	0x0800b5f0

080034c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80034c8:	f7ff ffda 	bl	8003480 <HAL_RCC_GetHCLKFreq>
 80034cc:	4602      	mov	r2, r0
 80034ce:	4b06      	ldr	r3, [pc, #24]	; (80034e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	0adb      	lsrs	r3, r3, #11
 80034d4:	f003 0307 	and.w	r3, r3, #7
 80034d8:	4904      	ldr	r1, [pc, #16]	; (80034ec <HAL_RCC_GetPCLK2Freq+0x28>)
 80034da:	5ccb      	ldrb	r3, [r1, r3]
 80034dc:	f003 031f 	and.w	r3, r3, #31
 80034e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	bd80      	pop	{r7, pc}
 80034e8:	40021000 	.word	0x40021000
 80034ec:	0800b5f0 	.word	0x0800b5f0

080034f0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b086      	sub	sp, #24
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80034f8:	2300      	movs	r3, #0
 80034fa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80034fc:	4b2a      	ldr	r3, [pc, #168]	; (80035a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003500:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003504:	2b00      	cmp	r3, #0
 8003506:	d003      	beq.n	8003510 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003508:	f7ff f990 	bl	800282c <HAL_PWREx_GetVoltageRange>
 800350c:	6178      	str	r0, [r7, #20]
 800350e:	e014      	b.n	800353a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003510:	4b25      	ldr	r3, [pc, #148]	; (80035a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003512:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003514:	4a24      	ldr	r2, [pc, #144]	; (80035a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003516:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800351a:	6593      	str	r3, [r2, #88]	; 0x58
 800351c:	4b22      	ldr	r3, [pc, #136]	; (80035a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800351e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003520:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003524:	60fb      	str	r3, [r7, #12]
 8003526:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003528:	f7ff f980 	bl	800282c <HAL_PWREx_GetVoltageRange>
 800352c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800352e:	4b1e      	ldr	r3, [pc, #120]	; (80035a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003530:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003532:	4a1d      	ldr	r2, [pc, #116]	; (80035a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003534:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003538:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003540:	d10b      	bne.n	800355a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2b80      	cmp	r3, #128	; 0x80
 8003546:	d919      	bls.n	800357c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2ba0      	cmp	r3, #160	; 0xa0
 800354c:	d902      	bls.n	8003554 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800354e:	2302      	movs	r3, #2
 8003550:	613b      	str	r3, [r7, #16]
 8003552:	e013      	b.n	800357c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003554:	2301      	movs	r3, #1
 8003556:	613b      	str	r3, [r7, #16]
 8003558:	e010      	b.n	800357c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2b80      	cmp	r3, #128	; 0x80
 800355e:	d902      	bls.n	8003566 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003560:	2303      	movs	r3, #3
 8003562:	613b      	str	r3, [r7, #16]
 8003564:	e00a      	b.n	800357c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2b80      	cmp	r3, #128	; 0x80
 800356a:	d102      	bne.n	8003572 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800356c:	2302      	movs	r3, #2
 800356e:	613b      	str	r3, [r7, #16]
 8003570:	e004      	b.n	800357c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2b70      	cmp	r3, #112	; 0x70
 8003576:	d101      	bne.n	800357c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003578:	2301      	movs	r3, #1
 800357a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800357c:	4b0b      	ldr	r3, [pc, #44]	; (80035ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f023 0207 	bic.w	r2, r3, #7
 8003584:	4909      	ldr	r1, [pc, #36]	; (80035ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	4313      	orrs	r3, r2
 800358a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800358c:	4b07      	ldr	r3, [pc, #28]	; (80035ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 0307 	and.w	r3, r3, #7
 8003594:	693a      	ldr	r2, [r7, #16]
 8003596:	429a      	cmp	r2, r3
 8003598:	d001      	beq.n	800359e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e000      	b.n	80035a0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800359e:	2300      	movs	r3, #0
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	3718      	adds	r7, #24
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}
 80035a8:	40021000 	.word	0x40021000
 80035ac:	40022000 	.word	0x40022000

080035b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b086      	sub	sp, #24
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80035b8:	2300      	movs	r3, #0
 80035ba:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80035bc:	2300      	movs	r3, #0
 80035be:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d041      	beq.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035d0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80035d4:	d02a      	beq.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80035d6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80035da:	d824      	bhi.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80035dc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80035e0:	d008      	beq.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80035e2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80035e6:	d81e      	bhi.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d00a      	beq.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80035ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035f0:	d010      	beq.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80035f2:	e018      	b.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80035f4:	4b86      	ldr	r3, [pc, #536]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035f6:	68db      	ldr	r3, [r3, #12]
 80035f8:	4a85      	ldr	r2, [pc, #532]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035fe:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003600:	e015      	b.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	3304      	adds	r3, #4
 8003606:	2100      	movs	r1, #0
 8003608:	4618      	mov	r0, r3
 800360a:	f000 fadd 	bl	8003bc8 <RCCEx_PLLSAI1_Config>
 800360e:	4603      	mov	r3, r0
 8003610:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003612:	e00c      	b.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	3320      	adds	r3, #32
 8003618:	2100      	movs	r1, #0
 800361a:	4618      	mov	r0, r3
 800361c:	f000 fbc6 	bl	8003dac <RCCEx_PLLSAI2_Config>
 8003620:	4603      	mov	r3, r0
 8003622:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003624:	e003      	b.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	74fb      	strb	r3, [r7, #19]
      break;
 800362a:	e000      	b.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800362c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800362e:	7cfb      	ldrb	r3, [r7, #19]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d10b      	bne.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003634:	4b76      	ldr	r3, [pc, #472]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003636:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800363a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003642:	4973      	ldr	r1, [pc, #460]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003644:	4313      	orrs	r3, r2
 8003646:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800364a:	e001      	b.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800364c:	7cfb      	ldrb	r3, [r7, #19]
 800364e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003658:	2b00      	cmp	r3, #0
 800365a:	d041      	beq.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003660:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003664:	d02a      	beq.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003666:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800366a:	d824      	bhi.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800366c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003670:	d008      	beq.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003672:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003676:	d81e      	bhi.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003678:	2b00      	cmp	r3, #0
 800367a:	d00a      	beq.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800367c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003680:	d010      	beq.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003682:	e018      	b.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003684:	4b62      	ldr	r3, [pc, #392]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003686:	68db      	ldr	r3, [r3, #12]
 8003688:	4a61      	ldr	r2, [pc, #388]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800368a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800368e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003690:	e015      	b.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	3304      	adds	r3, #4
 8003696:	2100      	movs	r1, #0
 8003698:	4618      	mov	r0, r3
 800369a:	f000 fa95 	bl	8003bc8 <RCCEx_PLLSAI1_Config>
 800369e:	4603      	mov	r3, r0
 80036a0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80036a2:	e00c      	b.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	3320      	adds	r3, #32
 80036a8:	2100      	movs	r1, #0
 80036aa:	4618      	mov	r0, r3
 80036ac:	f000 fb7e 	bl	8003dac <RCCEx_PLLSAI2_Config>
 80036b0:	4603      	mov	r3, r0
 80036b2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80036b4:	e003      	b.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	74fb      	strb	r3, [r7, #19]
      break;
 80036ba:	e000      	b.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80036bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036be:	7cfb      	ldrb	r3, [r7, #19]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d10b      	bne.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80036c4:	4b52      	ldr	r3, [pc, #328]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036ca:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036d2:	494f      	ldr	r1, [pc, #316]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036d4:	4313      	orrs	r3, r2
 80036d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80036da:	e001      	b.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036dc:	7cfb      	ldrb	r3, [r7, #19]
 80036de:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	f000 80a0 	beq.w	800382e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036ee:	2300      	movs	r3, #0
 80036f0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80036f2:	4b47      	ldr	r3, [pc, #284]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d101      	bne.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80036fe:	2301      	movs	r3, #1
 8003700:	e000      	b.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003702:	2300      	movs	r3, #0
 8003704:	2b00      	cmp	r3, #0
 8003706:	d00d      	beq.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003708:	4b41      	ldr	r3, [pc, #260]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800370a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800370c:	4a40      	ldr	r2, [pc, #256]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800370e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003712:	6593      	str	r3, [r2, #88]	; 0x58
 8003714:	4b3e      	ldr	r3, [pc, #248]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003716:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003718:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800371c:	60bb      	str	r3, [r7, #8]
 800371e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003720:	2301      	movs	r3, #1
 8003722:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003724:	4b3b      	ldr	r3, [pc, #236]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a3a      	ldr	r2, [pc, #232]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800372a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800372e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003730:	f7fd fbf0 	bl	8000f14 <HAL_GetTick>
 8003734:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003736:	e009      	b.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003738:	f7fd fbec 	bl	8000f14 <HAL_GetTick>
 800373c:	4602      	mov	r2, r0
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	1ad3      	subs	r3, r2, r3
 8003742:	2b02      	cmp	r3, #2
 8003744:	d902      	bls.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003746:	2303      	movs	r3, #3
 8003748:	74fb      	strb	r3, [r7, #19]
        break;
 800374a:	e005      	b.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800374c:	4b31      	ldr	r3, [pc, #196]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003754:	2b00      	cmp	r3, #0
 8003756:	d0ef      	beq.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003758:	7cfb      	ldrb	r3, [r7, #19]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d15c      	bne.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800375e:	4b2c      	ldr	r3, [pc, #176]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003760:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003764:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003768:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d01f      	beq.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003776:	697a      	ldr	r2, [r7, #20]
 8003778:	429a      	cmp	r2, r3
 800377a:	d019      	beq.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800377c:	4b24      	ldr	r3, [pc, #144]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800377e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003782:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003786:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003788:	4b21      	ldr	r3, [pc, #132]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800378a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800378e:	4a20      	ldr	r2, [pc, #128]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003790:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003794:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003798:	4b1d      	ldr	r3, [pc, #116]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800379a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800379e:	4a1c      	ldr	r2, [pc, #112]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80037a8:	4a19      	ldr	r2, [pc, #100]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	f003 0301 	and.w	r3, r3, #1
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d016      	beq.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037ba:	f7fd fbab 	bl	8000f14 <HAL_GetTick>
 80037be:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037c0:	e00b      	b.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037c2:	f7fd fba7 	bl	8000f14 <HAL_GetTick>
 80037c6:	4602      	mov	r2, r0
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	1ad3      	subs	r3, r2, r3
 80037cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d902      	bls.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80037d4:	2303      	movs	r3, #3
 80037d6:	74fb      	strb	r3, [r7, #19]
            break;
 80037d8:	e006      	b.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037da:	4b0d      	ldr	r3, [pc, #52]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037e0:	f003 0302 	and.w	r3, r3, #2
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d0ec      	beq.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80037e8:	7cfb      	ldrb	r3, [r7, #19]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d10c      	bne.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80037ee:	4b08      	ldr	r3, [pc, #32]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037fe:	4904      	ldr	r1, [pc, #16]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003800:	4313      	orrs	r3, r2
 8003802:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003806:	e009      	b.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003808:	7cfb      	ldrb	r3, [r7, #19]
 800380a:	74bb      	strb	r3, [r7, #18]
 800380c:	e006      	b.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800380e:	bf00      	nop
 8003810:	40021000 	.word	0x40021000
 8003814:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003818:	7cfb      	ldrb	r3, [r7, #19]
 800381a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800381c:	7c7b      	ldrb	r3, [r7, #17]
 800381e:	2b01      	cmp	r3, #1
 8003820:	d105      	bne.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003822:	4ba6      	ldr	r3, [pc, #664]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003824:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003826:	4aa5      	ldr	r2, [pc, #660]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003828:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800382c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 0301 	and.w	r3, r3, #1
 8003836:	2b00      	cmp	r3, #0
 8003838:	d00a      	beq.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800383a:	4ba0      	ldr	r3, [pc, #640]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800383c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003840:	f023 0203 	bic.w	r2, r3, #3
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003848:	499c      	ldr	r1, [pc, #624]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800384a:	4313      	orrs	r3, r2
 800384c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f003 0302 	and.w	r3, r3, #2
 8003858:	2b00      	cmp	r3, #0
 800385a:	d00a      	beq.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800385c:	4b97      	ldr	r3, [pc, #604]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800385e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003862:	f023 020c 	bic.w	r2, r3, #12
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800386a:	4994      	ldr	r1, [pc, #592]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800386c:	4313      	orrs	r3, r2
 800386e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f003 0304 	and.w	r3, r3, #4
 800387a:	2b00      	cmp	r3, #0
 800387c:	d00a      	beq.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800387e:	4b8f      	ldr	r3, [pc, #572]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003880:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003884:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388c:	498b      	ldr	r1, [pc, #556]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800388e:	4313      	orrs	r3, r2
 8003890:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 0308 	and.w	r3, r3, #8
 800389c:	2b00      	cmp	r3, #0
 800389e:	d00a      	beq.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80038a0:	4b86      	ldr	r3, [pc, #536]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80038a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038a6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ae:	4983      	ldr	r1, [pc, #524]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80038b0:	4313      	orrs	r3, r2
 80038b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f003 0310 	and.w	r3, r3, #16
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d00a      	beq.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80038c2:	4b7e      	ldr	r3, [pc, #504]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80038c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038d0:	497a      	ldr	r1, [pc, #488]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80038d2:	4313      	orrs	r3, r2
 80038d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f003 0320 	and.w	r3, r3, #32
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d00a      	beq.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80038e4:	4b75      	ldr	r3, [pc, #468]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80038e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038ea:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038f2:	4972      	ldr	r1, [pc, #456]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80038f4:	4313      	orrs	r3, r2
 80038f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003902:	2b00      	cmp	r3, #0
 8003904:	d00a      	beq.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003906:	4b6d      	ldr	r3, [pc, #436]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003908:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800390c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003914:	4969      	ldr	r1, [pc, #420]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003916:	4313      	orrs	r3, r2
 8003918:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003924:	2b00      	cmp	r3, #0
 8003926:	d00a      	beq.n	800393e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003928:	4b64      	ldr	r3, [pc, #400]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800392a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800392e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003936:	4961      	ldr	r1, [pc, #388]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003938:	4313      	orrs	r3, r2
 800393a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003946:	2b00      	cmp	r3, #0
 8003948:	d00a      	beq.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800394a:	4b5c      	ldr	r3, [pc, #368]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800394c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003950:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003958:	4958      	ldr	r1, [pc, #352]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800395a:	4313      	orrs	r3, r2
 800395c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003968:	2b00      	cmp	r3, #0
 800396a:	d00a      	beq.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800396c:	4b53      	ldr	r3, [pc, #332]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800396e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003972:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800397a:	4950      	ldr	r1, [pc, #320]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800397c:	4313      	orrs	r3, r2
 800397e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800398a:	2b00      	cmp	r3, #0
 800398c:	d00a      	beq.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800398e:	4b4b      	ldr	r3, [pc, #300]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003990:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003994:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800399c:	4947      	ldr	r1, [pc, #284]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800399e:	4313      	orrs	r3, r2
 80039a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d00a      	beq.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80039b0:	4b42      	ldr	r3, [pc, #264]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80039b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80039b6:	f023 0203 	bic.w	r2, r3, #3
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039be:	493f      	ldr	r1, [pc, #252]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80039c0:	4313      	orrs	r3, r2
 80039c2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d028      	beq.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80039d2:	4b3a      	ldr	r3, [pc, #232]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80039d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039d8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039e0:	4936      	ldr	r1, [pc, #216]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80039e2:	4313      	orrs	r3, r2
 80039e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80039f0:	d106      	bne.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80039f2:	4b32      	ldr	r3, [pc, #200]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80039f4:	68db      	ldr	r3, [r3, #12]
 80039f6:	4a31      	ldr	r2, [pc, #196]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80039f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80039fc:	60d3      	str	r3, [r2, #12]
 80039fe:	e011      	b.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a04:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a08:	d10c      	bne.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	3304      	adds	r3, #4
 8003a0e:	2101      	movs	r1, #1
 8003a10:	4618      	mov	r0, r3
 8003a12:	f000 f8d9 	bl	8003bc8 <RCCEx_PLLSAI1_Config>
 8003a16:	4603      	mov	r3, r0
 8003a18:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003a1a:	7cfb      	ldrb	r3, [r7, #19]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d001      	beq.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 8003a20:	7cfb      	ldrb	r3, [r7, #19]
 8003a22:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d028      	beq.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003a30:	4b22      	ldr	r3, [pc, #136]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003a32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a36:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a3e:	491f      	ldr	r1, [pc, #124]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003a40:	4313      	orrs	r3, r2
 8003a42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a4a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a4e:	d106      	bne.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a50:	4b1a      	ldr	r3, [pc, #104]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003a52:	68db      	ldr	r3, [r3, #12]
 8003a54:	4a19      	ldr	r2, [pc, #100]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003a56:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a5a:	60d3      	str	r3, [r2, #12]
 8003a5c:	e011      	b.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a62:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a66:	d10c      	bne.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	3304      	adds	r3, #4
 8003a6c:	2101      	movs	r1, #1
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f000 f8aa 	bl	8003bc8 <RCCEx_PLLSAI1_Config>
 8003a74:	4603      	mov	r3, r0
 8003a76:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a78:	7cfb      	ldrb	r3, [r7, #19]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d001      	beq.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 8003a7e:	7cfb      	ldrb	r3, [r7, #19]
 8003a80:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d02a      	beq.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003a8e:	4b0b      	ldr	r3, [pc, #44]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003a90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a94:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a9c:	4907      	ldr	r1, [pc, #28]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003aa8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003aac:	d108      	bne.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003aae:	4b03      	ldr	r3, [pc, #12]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003ab0:	68db      	ldr	r3, [r3, #12]
 8003ab2:	4a02      	ldr	r2, [pc, #8]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003ab4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ab8:	60d3      	str	r3, [r2, #12]
 8003aba:	e013      	b.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x534>
 8003abc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ac4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003ac8:	d10c      	bne.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	3304      	adds	r3, #4
 8003ace:	2101      	movs	r1, #1
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f000 f879 	bl	8003bc8 <RCCEx_PLLSAI1_Config>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ada:	7cfb      	ldrb	r3, [r7, #19]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d001      	beq.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8003ae0:	7cfb      	ldrb	r3, [r7, #19]
 8003ae2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d02f      	beq.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003af0:	4b2c      	ldr	r3, [pc, #176]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003af2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003af6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003afe:	4929      	ldr	r1, [pc, #164]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003b00:	4313      	orrs	r3, r2
 8003b02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b0a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b0e:	d10d      	bne.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	3304      	adds	r3, #4
 8003b14:	2102      	movs	r1, #2
 8003b16:	4618      	mov	r0, r3
 8003b18:	f000 f856 	bl	8003bc8 <RCCEx_PLLSAI1_Config>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b20:	7cfb      	ldrb	r3, [r7, #19]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d014      	beq.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8003b26:	7cfb      	ldrb	r3, [r7, #19]
 8003b28:	74bb      	strb	r3, [r7, #18]
 8003b2a:	e011      	b.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b30:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b34:	d10c      	bne.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	3320      	adds	r3, #32
 8003b3a:	2102      	movs	r1, #2
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f000 f935 	bl	8003dac <RCCEx_PLLSAI2_Config>
 8003b42:	4603      	mov	r3, r0
 8003b44:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b46:	7cfb      	ldrb	r3, [r7, #19]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d001      	beq.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8003b4c:	7cfb      	ldrb	r3, [r7, #19]
 8003b4e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d00b      	beq.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003b5c:	4b11      	ldr	r3, [pc, #68]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003b5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b62:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b6c:	490d      	ldr	r1, [pc, #52]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d00b      	beq.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003b80:	4b08      	ldr	r3, [pc, #32]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003b82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b86:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b90:	4904      	ldr	r1, [pc, #16]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003b92:	4313      	orrs	r3, r2
 8003b94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003b98:	7cbb      	ldrb	r3, [r7, #18]
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3718      	adds	r7, #24
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}
 8003ba2:	bf00      	nop
 8003ba4:	40021000 	.word	0x40021000

08003ba8 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003bac:	4b05      	ldr	r3, [pc, #20]	; (8003bc4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a04      	ldr	r2, [pc, #16]	; (8003bc4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003bb2:	f043 0304 	orr.w	r3, r3, #4
 8003bb6:	6013      	str	r3, [r2, #0]
}
 8003bb8:	bf00      	nop
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc0:	4770      	bx	lr
 8003bc2:	bf00      	nop
 8003bc4:	40021000 	.word	0x40021000

08003bc8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b084      	sub	sp, #16
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003bd6:	4b74      	ldr	r3, [pc, #464]	; (8003da8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bd8:	68db      	ldr	r3, [r3, #12]
 8003bda:	f003 0303 	and.w	r3, r3, #3
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d018      	beq.n	8003c14 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003be2:	4b71      	ldr	r3, [pc, #452]	; (8003da8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003be4:	68db      	ldr	r3, [r3, #12]
 8003be6:	f003 0203 	and.w	r2, r3, #3
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	429a      	cmp	r2, r3
 8003bf0:	d10d      	bne.n	8003c0e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
       ||
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d009      	beq.n	8003c0e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003bfa:	4b6b      	ldr	r3, [pc, #428]	; (8003da8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bfc:	68db      	ldr	r3, [r3, #12]
 8003bfe:	091b      	lsrs	r3, r3, #4
 8003c00:	f003 0307 	and.w	r3, r3, #7
 8003c04:	1c5a      	adds	r2, r3, #1
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	685b      	ldr	r3, [r3, #4]
       ||
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	d047      	beq.n	8003c9e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	73fb      	strb	r3, [r7, #15]
 8003c12:	e044      	b.n	8003c9e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	2b03      	cmp	r3, #3
 8003c1a:	d018      	beq.n	8003c4e <RCCEx_PLLSAI1_Config+0x86>
 8003c1c:	2b03      	cmp	r3, #3
 8003c1e:	d825      	bhi.n	8003c6c <RCCEx_PLLSAI1_Config+0xa4>
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d002      	beq.n	8003c2a <RCCEx_PLLSAI1_Config+0x62>
 8003c24:	2b02      	cmp	r3, #2
 8003c26:	d009      	beq.n	8003c3c <RCCEx_PLLSAI1_Config+0x74>
 8003c28:	e020      	b.n	8003c6c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003c2a:	4b5f      	ldr	r3, [pc, #380]	; (8003da8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f003 0302 	and.w	r3, r3, #2
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d11d      	bne.n	8003c72 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c3a:	e01a      	b.n	8003c72 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003c3c:	4b5a      	ldr	r3, [pc, #360]	; (8003da8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d116      	bne.n	8003c76 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c4c:	e013      	b.n	8003c76 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003c4e:	4b56      	ldr	r3, [pc, #344]	; (8003da8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d10f      	bne.n	8003c7a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003c5a:	4b53      	ldr	r3, [pc, #332]	; (8003da8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d109      	bne.n	8003c7a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003c6a:	e006      	b.n	8003c7a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	73fb      	strb	r3, [r7, #15]
      break;
 8003c70:	e004      	b.n	8003c7c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003c72:	bf00      	nop
 8003c74:	e002      	b.n	8003c7c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003c76:	bf00      	nop
 8003c78:	e000      	b.n	8003c7c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003c7a:	bf00      	nop
    }

    if(status == HAL_OK)
 8003c7c:	7bfb      	ldrb	r3, [r7, #15]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d10d      	bne.n	8003c9e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003c82:	4b49      	ldr	r3, [pc, #292]	; (8003da8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c84:	68db      	ldr	r3, [r3, #12]
 8003c86:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6819      	ldr	r1, [r3, #0]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	3b01      	subs	r3, #1
 8003c94:	011b      	lsls	r3, r3, #4
 8003c96:	430b      	orrs	r3, r1
 8003c98:	4943      	ldr	r1, [pc, #268]	; (8003da8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003c9e:	7bfb      	ldrb	r3, [r7, #15]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d17c      	bne.n	8003d9e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003ca4:	4b40      	ldr	r3, [pc, #256]	; (8003da8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a3f      	ldr	r2, [pc, #252]	; (8003da8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003caa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003cae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cb0:	f7fd f930 	bl	8000f14 <HAL_GetTick>
 8003cb4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003cb6:	e009      	b.n	8003ccc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003cb8:	f7fd f92c 	bl	8000f14 <HAL_GetTick>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	1ad3      	subs	r3, r2, r3
 8003cc2:	2b02      	cmp	r3, #2
 8003cc4:	d902      	bls.n	8003ccc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	73fb      	strb	r3, [r7, #15]
        break;
 8003cca:	e005      	b.n	8003cd8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003ccc:	4b36      	ldr	r3, [pc, #216]	; (8003da8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d1ef      	bne.n	8003cb8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003cd8:	7bfb      	ldrb	r3, [r7, #15]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d15f      	bne.n	8003d9e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d110      	bne.n	8003d06 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ce4:	4b30      	ldr	r3, [pc, #192]	; (8003da8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ce6:	691b      	ldr	r3, [r3, #16]
 8003ce8:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003cec:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003cf0:	687a      	ldr	r2, [r7, #4]
 8003cf2:	6892      	ldr	r2, [r2, #8]
 8003cf4:	0211      	lsls	r1, r2, #8
 8003cf6:	687a      	ldr	r2, [r7, #4]
 8003cf8:	68d2      	ldr	r2, [r2, #12]
 8003cfa:	06d2      	lsls	r2, r2, #27
 8003cfc:	430a      	orrs	r2, r1
 8003cfe:	492a      	ldr	r1, [pc, #168]	; (8003da8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d00:	4313      	orrs	r3, r2
 8003d02:	610b      	str	r3, [r1, #16]
 8003d04:	e027      	b.n	8003d56 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d112      	bne.n	8003d32 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003d0c:	4b26      	ldr	r3, [pc, #152]	; (8003da8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d0e:	691b      	ldr	r3, [r3, #16]
 8003d10:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003d14:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003d18:	687a      	ldr	r2, [r7, #4]
 8003d1a:	6892      	ldr	r2, [r2, #8]
 8003d1c:	0211      	lsls	r1, r2, #8
 8003d1e:	687a      	ldr	r2, [r7, #4]
 8003d20:	6912      	ldr	r2, [r2, #16]
 8003d22:	0852      	lsrs	r2, r2, #1
 8003d24:	3a01      	subs	r2, #1
 8003d26:	0552      	lsls	r2, r2, #21
 8003d28:	430a      	orrs	r2, r1
 8003d2a:	491f      	ldr	r1, [pc, #124]	; (8003da8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	610b      	str	r3, [r1, #16]
 8003d30:	e011      	b.n	8003d56 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003d32:	4b1d      	ldr	r3, [pc, #116]	; (8003da8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d34:	691b      	ldr	r3, [r3, #16]
 8003d36:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003d3a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003d3e:	687a      	ldr	r2, [r7, #4]
 8003d40:	6892      	ldr	r2, [r2, #8]
 8003d42:	0211      	lsls	r1, r2, #8
 8003d44:	687a      	ldr	r2, [r7, #4]
 8003d46:	6952      	ldr	r2, [r2, #20]
 8003d48:	0852      	lsrs	r2, r2, #1
 8003d4a:	3a01      	subs	r2, #1
 8003d4c:	0652      	lsls	r2, r2, #25
 8003d4e:	430a      	orrs	r2, r1
 8003d50:	4915      	ldr	r1, [pc, #84]	; (8003da8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d52:	4313      	orrs	r3, r2
 8003d54:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003d56:	4b14      	ldr	r3, [pc, #80]	; (8003da8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a13      	ldr	r2, [pc, #76]	; (8003da8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d5c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003d60:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d62:	f7fd f8d7 	bl	8000f14 <HAL_GetTick>
 8003d66:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003d68:	e009      	b.n	8003d7e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003d6a:	f7fd f8d3 	bl	8000f14 <HAL_GetTick>
 8003d6e:	4602      	mov	r2, r0
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	1ad3      	subs	r3, r2, r3
 8003d74:	2b02      	cmp	r3, #2
 8003d76:	d902      	bls.n	8003d7e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003d78:	2303      	movs	r3, #3
 8003d7a:	73fb      	strb	r3, [r7, #15]
          break;
 8003d7c:	e005      	b.n	8003d8a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003d7e:	4b0a      	ldr	r3, [pc, #40]	; (8003da8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d0ef      	beq.n	8003d6a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003d8a:	7bfb      	ldrb	r3, [r7, #15]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d106      	bne.n	8003d9e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003d90:	4b05      	ldr	r3, [pc, #20]	; (8003da8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d92:	691a      	ldr	r2, [r3, #16]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	699b      	ldr	r3, [r3, #24]
 8003d98:	4903      	ldr	r1, [pc, #12]	; (8003da8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003d9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	3710      	adds	r7, #16
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}
 8003da8:	40021000 	.word	0x40021000

08003dac <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b084      	sub	sp, #16
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
 8003db4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003db6:	2300      	movs	r3, #0
 8003db8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003dba:	4b69      	ldr	r3, [pc, #420]	; (8003f60 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003dbc:	68db      	ldr	r3, [r3, #12]
 8003dbe:	f003 0303 	and.w	r3, r3, #3
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d018      	beq.n	8003df8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003dc6:	4b66      	ldr	r3, [pc, #408]	; (8003f60 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003dc8:	68db      	ldr	r3, [r3, #12]
 8003dca:	f003 0203 	and.w	r2, r3, #3
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	429a      	cmp	r2, r3
 8003dd4:	d10d      	bne.n	8003df2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
       ||
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d009      	beq.n	8003df2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003dde:	4b60      	ldr	r3, [pc, #384]	; (8003f60 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003de0:	68db      	ldr	r3, [r3, #12]
 8003de2:	091b      	lsrs	r3, r3, #4
 8003de4:	f003 0307 	and.w	r3, r3, #7
 8003de8:	1c5a      	adds	r2, r3, #1
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	685b      	ldr	r3, [r3, #4]
       ||
 8003dee:	429a      	cmp	r2, r3
 8003df0:	d047      	beq.n	8003e82 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	73fb      	strb	r3, [r7, #15]
 8003df6:	e044      	b.n	8003e82 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	2b03      	cmp	r3, #3
 8003dfe:	d018      	beq.n	8003e32 <RCCEx_PLLSAI2_Config+0x86>
 8003e00:	2b03      	cmp	r3, #3
 8003e02:	d825      	bhi.n	8003e50 <RCCEx_PLLSAI2_Config+0xa4>
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	d002      	beq.n	8003e0e <RCCEx_PLLSAI2_Config+0x62>
 8003e08:	2b02      	cmp	r3, #2
 8003e0a:	d009      	beq.n	8003e20 <RCCEx_PLLSAI2_Config+0x74>
 8003e0c:	e020      	b.n	8003e50 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003e0e:	4b54      	ldr	r3, [pc, #336]	; (8003f60 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f003 0302 	and.w	r3, r3, #2
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d11d      	bne.n	8003e56 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e1e:	e01a      	b.n	8003e56 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003e20:	4b4f      	ldr	r3, [pc, #316]	; (8003f60 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d116      	bne.n	8003e5a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e30:	e013      	b.n	8003e5a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003e32:	4b4b      	ldr	r3, [pc, #300]	; (8003f60 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d10f      	bne.n	8003e5e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003e3e:	4b48      	ldr	r3, [pc, #288]	; (8003f60 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d109      	bne.n	8003e5e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003e4e:	e006      	b.n	8003e5e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003e50:	2301      	movs	r3, #1
 8003e52:	73fb      	strb	r3, [r7, #15]
      break;
 8003e54:	e004      	b.n	8003e60 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003e56:	bf00      	nop
 8003e58:	e002      	b.n	8003e60 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003e5a:	bf00      	nop
 8003e5c:	e000      	b.n	8003e60 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003e5e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003e60:	7bfb      	ldrb	r3, [r7, #15]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d10d      	bne.n	8003e82 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003e66:	4b3e      	ldr	r3, [pc, #248]	; (8003f60 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003e68:	68db      	ldr	r3, [r3, #12]
 8003e6a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6819      	ldr	r1, [r3, #0]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	3b01      	subs	r3, #1
 8003e78:	011b      	lsls	r3, r3, #4
 8003e7a:	430b      	orrs	r3, r1
 8003e7c:	4938      	ldr	r1, [pc, #224]	; (8003f60 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003e82:	7bfb      	ldrb	r3, [r7, #15]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d166      	bne.n	8003f56 <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003e88:	4b35      	ldr	r3, [pc, #212]	; (8003f60 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a34      	ldr	r2, [pc, #208]	; (8003f60 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003e8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e92:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e94:	f7fd f83e 	bl	8000f14 <HAL_GetTick>
 8003e98:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003e9a:	e009      	b.n	8003eb0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003e9c:	f7fd f83a 	bl	8000f14 <HAL_GetTick>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	1ad3      	subs	r3, r2, r3
 8003ea6:	2b02      	cmp	r3, #2
 8003ea8:	d902      	bls.n	8003eb0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003eaa:	2303      	movs	r3, #3
 8003eac:	73fb      	strb	r3, [r7, #15]
        break;
 8003eae:	e005      	b.n	8003ebc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003eb0:	4b2b      	ldr	r3, [pc, #172]	; (8003f60 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d1ef      	bne.n	8003e9c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003ebc:	7bfb      	ldrb	r3, [r7, #15]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d149      	bne.n	8003f56 <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d110      	bne.n	8003eea <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003ec8:	4b25      	ldr	r3, [pc, #148]	; (8003f60 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003eca:	695b      	ldr	r3, [r3, #20]
 8003ecc:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003ed0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003ed4:	687a      	ldr	r2, [r7, #4]
 8003ed6:	6892      	ldr	r2, [r2, #8]
 8003ed8:	0211      	lsls	r1, r2, #8
 8003eda:	687a      	ldr	r2, [r7, #4]
 8003edc:	68d2      	ldr	r2, [r2, #12]
 8003ede:	06d2      	lsls	r2, r2, #27
 8003ee0:	430a      	orrs	r2, r1
 8003ee2:	491f      	ldr	r1, [pc, #124]	; (8003f60 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	614b      	str	r3, [r1, #20]
 8003ee8:	e011      	b.n	8003f0e <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003eea:	4b1d      	ldr	r3, [pc, #116]	; (8003f60 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003eec:	695b      	ldr	r3, [r3, #20]
 8003eee:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003ef2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003ef6:	687a      	ldr	r2, [r7, #4]
 8003ef8:	6892      	ldr	r2, [r2, #8]
 8003efa:	0211      	lsls	r1, r2, #8
 8003efc:	687a      	ldr	r2, [r7, #4]
 8003efe:	6912      	ldr	r2, [r2, #16]
 8003f00:	0852      	lsrs	r2, r2, #1
 8003f02:	3a01      	subs	r2, #1
 8003f04:	0652      	lsls	r2, r2, #25
 8003f06:	430a      	orrs	r2, r1
 8003f08:	4915      	ldr	r1, [pc, #84]	; (8003f60 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003f0e:	4b14      	ldr	r3, [pc, #80]	; (8003f60 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a13      	ldr	r2, [pc, #76]	; (8003f60 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003f14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f18:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f1a:	f7fc fffb 	bl	8000f14 <HAL_GetTick>
 8003f1e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003f20:	e009      	b.n	8003f36 <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003f22:	f7fc fff7 	bl	8000f14 <HAL_GetTick>
 8003f26:	4602      	mov	r2, r0
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	1ad3      	subs	r3, r2, r3
 8003f2c:	2b02      	cmp	r3, #2
 8003f2e:	d902      	bls.n	8003f36 <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8003f30:	2303      	movs	r3, #3
 8003f32:	73fb      	strb	r3, [r7, #15]
          break;
 8003f34:	e005      	b.n	8003f42 <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003f36:	4b0a      	ldr	r3, [pc, #40]	; (8003f60 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d0ef      	beq.n	8003f22 <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8003f42:	7bfb      	ldrb	r3, [r7, #15]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d106      	bne.n	8003f56 <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003f48:	4b05      	ldr	r3, [pc, #20]	; (8003f60 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003f4a:	695a      	ldr	r2, [r3, #20]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	695b      	ldr	r3, [r3, #20]
 8003f50:	4903      	ldr	r1, [pc, #12]	; (8003f60 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003f52:	4313      	orrs	r3, r2
 8003f54:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003f56:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	3710      	adds	r7, #16
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}
 8003f60:	40021000 	.word	0x40021000

08003f64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b082      	sub	sp, #8
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d101      	bne.n	8003f76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e049      	b.n	800400a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d106      	bne.n	8003f90 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2200      	movs	r2, #0
 8003f86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	f7fc fed2 	bl	8000d34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2202      	movs	r2, #2
 8003f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	3304      	adds	r3, #4
 8003fa0:	4619      	mov	r1, r3
 8003fa2:	4610      	mov	r0, r2
 8003fa4:	f000 f8fe 	bl	80041a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2201      	movs	r2, #1
 8003fac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2201      	movs	r2, #1
 8003fbc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2201      	movs	r2, #1
 8003fcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2201      	movs	r2, #1
 8003fec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2201      	movs	r2, #1
 8004004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004008:	2300      	movs	r3, #0
}
 800400a:	4618      	mov	r0, r3
 800400c:	3708      	adds	r7, #8
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}

08004012 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004012:	b580      	push	{r7, lr}
 8004014:	b084      	sub	sp, #16
 8004016:	af00      	add	r7, sp, #0
 8004018:	6078      	str	r0, [r7, #4]
 800401a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800401c:	2300      	movs	r3, #0
 800401e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004026:	2b01      	cmp	r3, #1
 8004028:	d101      	bne.n	800402e <HAL_TIM_ConfigClockSource+0x1c>
 800402a:	2302      	movs	r3, #2
 800402c:	e0b6      	b.n	800419c <HAL_TIM_ConfigClockSource+0x18a>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2201      	movs	r2, #1
 8004032:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2202      	movs	r2, #2
 800403a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800404c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004050:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004058:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	68ba      	ldr	r2, [r7, #8]
 8004060:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800406a:	d03e      	beq.n	80040ea <HAL_TIM_ConfigClockSource+0xd8>
 800406c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004070:	f200 8087 	bhi.w	8004182 <HAL_TIM_ConfigClockSource+0x170>
 8004074:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004078:	f000 8086 	beq.w	8004188 <HAL_TIM_ConfigClockSource+0x176>
 800407c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004080:	d87f      	bhi.n	8004182 <HAL_TIM_ConfigClockSource+0x170>
 8004082:	2b70      	cmp	r3, #112	; 0x70
 8004084:	d01a      	beq.n	80040bc <HAL_TIM_ConfigClockSource+0xaa>
 8004086:	2b70      	cmp	r3, #112	; 0x70
 8004088:	d87b      	bhi.n	8004182 <HAL_TIM_ConfigClockSource+0x170>
 800408a:	2b60      	cmp	r3, #96	; 0x60
 800408c:	d050      	beq.n	8004130 <HAL_TIM_ConfigClockSource+0x11e>
 800408e:	2b60      	cmp	r3, #96	; 0x60
 8004090:	d877      	bhi.n	8004182 <HAL_TIM_ConfigClockSource+0x170>
 8004092:	2b50      	cmp	r3, #80	; 0x50
 8004094:	d03c      	beq.n	8004110 <HAL_TIM_ConfigClockSource+0xfe>
 8004096:	2b50      	cmp	r3, #80	; 0x50
 8004098:	d873      	bhi.n	8004182 <HAL_TIM_ConfigClockSource+0x170>
 800409a:	2b40      	cmp	r3, #64	; 0x40
 800409c:	d058      	beq.n	8004150 <HAL_TIM_ConfigClockSource+0x13e>
 800409e:	2b40      	cmp	r3, #64	; 0x40
 80040a0:	d86f      	bhi.n	8004182 <HAL_TIM_ConfigClockSource+0x170>
 80040a2:	2b30      	cmp	r3, #48	; 0x30
 80040a4:	d064      	beq.n	8004170 <HAL_TIM_ConfigClockSource+0x15e>
 80040a6:	2b30      	cmp	r3, #48	; 0x30
 80040a8:	d86b      	bhi.n	8004182 <HAL_TIM_ConfigClockSource+0x170>
 80040aa:	2b20      	cmp	r3, #32
 80040ac:	d060      	beq.n	8004170 <HAL_TIM_ConfigClockSource+0x15e>
 80040ae:	2b20      	cmp	r3, #32
 80040b0:	d867      	bhi.n	8004182 <HAL_TIM_ConfigClockSource+0x170>
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d05c      	beq.n	8004170 <HAL_TIM_ConfigClockSource+0x15e>
 80040b6:	2b10      	cmp	r3, #16
 80040b8:	d05a      	beq.n	8004170 <HAL_TIM_ConfigClockSource+0x15e>
 80040ba:	e062      	b.n	8004182 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80040cc:	f000 f97e 	bl	80043cc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80040de:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	68ba      	ldr	r2, [r7, #8]
 80040e6:	609a      	str	r2, [r3, #8]
      break;
 80040e8:	e04f      	b.n	800418a <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80040fa:	f000 f967 	bl	80043cc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	689a      	ldr	r2, [r3, #8]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800410c:	609a      	str	r2, [r3, #8]
      break;
 800410e:	e03c      	b.n	800418a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800411c:	461a      	mov	r2, r3
 800411e:	f000 f8db 	bl	80042d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	2150      	movs	r1, #80	; 0x50
 8004128:	4618      	mov	r0, r3
 800412a:	f000 f934 	bl	8004396 <TIM_ITRx_SetConfig>
      break;
 800412e:	e02c      	b.n	800418a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800413c:	461a      	mov	r2, r3
 800413e:	f000 f8fa 	bl	8004336 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	2160      	movs	r1, #96	; 0x60
 8004148:	4618      	mov	r0, r3
 800414a:	f000 f924 	bl	8004396 <TIM_ITRx_SetConfig>
      break;
 800414e:	e01c      	b.n	800418a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800415c:	461a      	mov	r2, r3
 800415e:	f000 f8bb 	bl	80042d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	2140      	movs	r1, #64	; 0x40
 8004168:	4618      	mov	r0, r3
 800416a:	f000 f914 	bl	8004396 <TIM_ITRx_SetConfig>
      break;
 800416e:	e00c      	b.n	800418a <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4619      	mov	r1, r3
 800417a:	4610      	mov	r0, r2
 800417c:	f000 f90b 	bl	8004396 <TIM_ITRx_SetConfig>
      break;
 8004180:	e003      	b.n	800418a <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	73fb      	strb	r3, [r7, #15]
      break;
 8004186:	e000      	b.n	800418a <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004188:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2201      	movs	r2, #1
 800418e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2200      	movs	r2, #0
 8004196:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800419a:	7bfb      	ldrb	r3, [r7, #15]
}
 800419c:	4618      	mov	r0, r3
 800419e:	3710      	adds	r7, #16
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}

080041a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b085      	sub	sp, #20
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
 80041ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	4a40      	ldr	r2, [pc, #256]	; (80042b8 <TIM_Base_SetConfig+0x114>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d013      	beq.n	80041e4 <TIM_Base_SetConfig+0x40>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041c2:	d00f      	beq.n	80041e4 <TIM_Base_SetConfig+0x40>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	4a3d      	ldr	r2, [pc, #244]	; (80042bc <TIM_Base_SetConfig+0x118>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d00b      	beq.n	80041e4 <TIM_Base_SetConfig+0x40>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	4a3c      	ldr	r2, [pc, #240]	; (80042c0 <TIM_Base_SetConfig+0x11c>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d007      	beq.n	80041e4 <TIM_Base_SetConfig+0x40>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	4a3b      	ldr	r2, [pc, #236]	; (80042c4 <TIM_Base_SetConfig+0x120>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d003      	beq.n	80041e4 <TIM_Base_SetConfig+0x40>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	4a3a      	ldr	r2, [pc, #232]	; (80042c8 <TIM_Base_SetConfig+0x124>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d108      	bne.n	80041f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	68fa      	ldr	r2, [r7, #12]
 80041f2:	4313      	orrs	r3, r2
 80041f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	4a2f      	ldr	r2, [pc, #188]	; (80042b8 <TIM_Base_SetConfig+0x114>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d01f      	beq.n	800423e <TIM_Base_SetConfig+0x9a>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004204:	d01b      	beq.n	800423e <TIM_Base_SetConfig+0x9a>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	4a2c      	ldr	r2, [pc, #176]	; (80042bc <TIM_Base_SetConfig+0x118>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d017      	beq.n	800423e <TIM_Base_SetConfig+0x9a>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	4a2b      	ldr	r2, [pc, #172]	; (80042c0 <TIM_Base_SetConfig+0x11c>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d013      	beq.n	800423e <TIM_Base_SetConfig+0x9a>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	4a2a      	ldr	r2, [pc, #168]	; (80042c4 <TIM_Base_SetConfig+0x120>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d00f      	beq.n	800423e <TIM_Base_SetConfig+0x9a>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	4a29      	ldr	r2, [pc, #164]	; (80042c8 <TIM_Base_SetConfig+0x124>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d00b      	beq.n	800423e <TIM_Base_SetConfig+0x9a>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	4a28      	ldr	r2, [pc, #160]	; (80042cc <TIM_Base_SetConfig+0x128>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d007      	beq.n	800423e <TIM_Base_SetConfig+0x9a>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	4a27      	ldr	r2, [pc, #156]	; (80042d0 <TIM_Base_SetConfig+0x12c>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d003      	beq.n	800423e <TIM_Base_SetConfig+0x9a>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	4a26      	ldr	r2, [pc, #152]	; (80042d4 <TIM_Base_SetConfig+0x130>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d108      	bne.n	8004250 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004244:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	68db      	ldr	r3, [r3, #12]
 800424a:	68fa      	ldr	r2, [r7, #12]
 800424c:	4313      	orrs	r3, r2
 800424e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	695b      	ldr	r3, [r3, #20]
 800425a:	4313      	orrs	r3, r2
 800425c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	68fa      	ldr	r2, [r7, #12]
 8004262:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	689a      	ldr	r2, [r3, #8]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	4a10      	ldr	r2, [pc, #64]	; (80042b8 <TIM_Base_SetConfig+0x114>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d00f      	beq.n	800429c <TIM_Base_SetConfig+0xf8>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	4a12      	ldr	r2, [pc, #72]	; (80042c8 <TIM_Base_SetConfig+0x124>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d00b      	beq.n	800429c <TIM_Base_SetConfig+0xf8>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	4a11      	ldr	r2, [pc, #68]	; (80042cc <TIM_Base_SetConfig+0x128>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d007      	beq.n	800429c <TIM_Base_SetConfig+0xf8>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	4a10      	ldr	r2, [pc, #64]	; (80042d0 <TIM_Base_SetConfig+0x12c>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d003      	beq.n	800429c <TIM_Base_SetConfig+0xf8>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	4a0f      	ldr	r2, [pc, #60]	; (80042d4 <TIM_Base_SetConfig+0x130>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d103      	bne.n	80042a4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	691a      	ldr	r2, [r3, #16]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2201      	movs	r2, #1
 80042a8:	615a      	str	r2, [r3, #20]
}
 80042aa:	bf00      	nop
 80042ac:	3714      	adds	r7, #20
 80042ae:	46bd      	mov	sp, r7
 80042b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b4:	4770      	bx	lr
 80042b6:	bf00      	nop
 80042b8:	40012c00 	.word	0x40012c00
 80042bc:	40000400 	.word	0x40000400
 80042c0:	40000800 	.word	0x40000800
 80042c4:	40000c00 	.word	0x40000c00
 80042c8:	40013400 	.word	0x40013400
 80042cc:	40014000 	.word	0x40014000
 80042d0:	40014400 	.word	0x40014400
 80042d4:	40014800 	.word	0x40014800

080042d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042d8:	b480      	push	{r7}
 80042da:	b087      	sub	sp, #28
 80042dc:	af00      	add	r7, sp, #0
 80042de:	60f8      	str	r0, [r7, #12]
 80042e0:	60b9      	str	r1, [r7, #8]
 80042e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	6a1b      	ldr	r3, [r3, #32]
 80042e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	6a1b      	ldr	r3, [r3, #32]
 80042ee:	f023 0201 	bic.w	r2, r3, #1
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	699b      	ldr	r3, [r3, #24]
 80042fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004302:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	011b      	lsls	r3, r3, #4
 8004308:	693a      	ldr	r2, [r7, #16]
 800430a:	4313      	orrs	r3, r2
 800430c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	f023 030a 	bic.w	r3, r3, #10
 8004314:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004316:	697a      	ldr	r2, [r7, #20]
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	4313      	orrs	r3, r2
 800431c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	693a      	ldr	r2, [r7, #16]
 8004322:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	697a      	ldr	r2, [r7, #20]
 8004328:	621a      	str	r2, [r3, #32]
}
 800432a:	bf00      	nop
 800432c:	371c      	adds	r7, #28
 800432e:	46bd      	mov	sp, r7
 8004330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004334:	4770      	bx	lr

08004336 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004336:	b480      	push	{r7}
 8004338:	b087      	sub	sp, #28
 800433a:	af00      	add	r7, sp, #0
 800433c:	60f8      	str	r0, [r7, #12]
 800433e:	60b9      	str	r1, [r7, #8]
 8004340:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	6a1b      	ldr	r3, [r3, #32]
 8004346:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	6a1b      	ldr	r3, [r3, #32]
 800434c:	f023 0210 	bic.w	r2, r3, #16
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	699b      	ldr	r3, [r3, #24]
 8004358:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004360:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	031b      	lsls	r3, r3, #12
 8004366:	693a      	ldr	r2, [r7, #16]
 8004368:	4313      	orrs	r3, r2
 800436a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004372:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	011b      	lsls	r3, r3, #4
 8004378:	697a      	ldr	r2, [r7, #20]
 800437a:	4313      	orrs	r3, r2
 800437c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	693a      	ldr	r2, [r7, #16]
 8004382:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	697a      	ldr	r2, [r7, #20]
 8004388:	621a      	str	r2, [r3, #32]
}
 800438a:	bf00      	nop
 800438c:	371c      	adds	r7, #28
 800438e:	46bd      	mov	sp, r7
 8004390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004394:	4770      	bx	lr

08004396 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004396:	b480      	push	{r7}
 8004398:	b085      	sub	sp, #20
 800439a:	af00      	add	r7, sp, #0
 800439c:	6078      	str	r0, [r7, #4]
 800439e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80043ae:	683a      	ldr	r2, [r7, #0]
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	4313      	orrs	r3, r2
 80043b4:	f043 0307 	orr.w	r3, r3, #7
 80043b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	68fa      	ldr	r2, [r7, #12]
 80043be:	609a      	str	r2, [r3, #8]
}
 80043c0:	bf00      	nop
 80043c2:	3714      	adds	r7, #20
 80043c4:	46bd      	mov	sp, r7
 80043c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ca:	4770      	bx	lr

080043cc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b087      	sub	sp, #28
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	60f8      	str	r0, [r7, #12]
 80043d4:	60b9      	str	r1, [r7, #8]
 80043d6:	607a      	str	r2, [r7, #4]
 80043d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80043e6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	021a      	lsls	r2, r3, #8
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	431a      	orrs	r2, r3
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	4313      	orrs	r3, r2
 80043f4:	697a      	ldr	r2, [r7, #20]
 80043f6:	4313      	orrs	r3, r2
 80043f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	697a      	ldr	r2, [r7, #20]
 80043fe:	609a      	str	r2, [r3, #8]
}
 8004400:	bf00      	nop
 8004402:	371c      	adds	r7, #28
 8004404:	46bd      	mov	sp, r7
 8004406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440a:	4770      	bx	lr

0800440c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800440c:	b480      	push	{r7}
 800440e:	b085      	sub	sp, #20
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
 8004414:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800441c:	2b01      	cmp	r3, #1
 800441e:	d101      	bne.n	8004424 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004420:	2302      	movs	r3, #2
 8004422:	e068      	b.n	80044f6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2201      	movs	r2, #1
 8004428:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2202      	movs	r2, #2
 8004430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a2e      	ldr	r2, [pc, #184]	; (8004504 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d004      	beq.n	8004458 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a2d      	ldr	r2, [pc, #180]	; (8004508 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d108      	bne.n	800446a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800445e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	68fa      	ldr	r2, [r7, #12]
 8004466:	4313      	orrs	r3, r2
 8004468:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004470:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	68fa      	ldr	r2, [r7, #12]
 8004478:	4313      	orrs	r3, r2
 800447a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	68fa      	ldr	r2, [r7, #12]
 8004482:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a1e      	ldr	r2, [pc, #120]	; (8004504 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d01d      	beq.n	80044ca <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004496:	d018      	beq.n	80044ca <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a1b      	ldr	r2, [pc, #108]	; (800450c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d013      	beq.n	80044ca <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a1a      	ldr	r2, [pc, #104]	; (8004510 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d00e      	beq.n	80044ca <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a18      	ldr	r2, [pc, #96]	; (8004514 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d009      	beq.n	80044ca <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a13      	ldr	r2, [pc, #76]	; (8004508 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d004      	beq.n	80044ca <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a14      	ldr	r2, [pc, #80]	; (8004518 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d10c      	bne.n	80044e4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	68ba      	ldr	r2, [r7, #8]
 80044d8:	4313      	orrs	r3, r2
 80044da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	68ba      	ldr	r2, [r7, #8]
 80044e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2201      	movs	r2, #1
 80044e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2200      	movs	r2, #0
 80044f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80044f4:	2300      	movs	r3, #0
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	3714      	adds	r7, #20
 80044fa:	46bd      	mov	sp, r7
 80044fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004500:	4770      	bx	lr
 8004502:	bf00      	nop
 8004504:	40012c00 	.word	0x40012c00
 8004508:	40013400 	.word	0x40013400
 800450c:	40000400 	.word	0x40000400
 8004510:	40000800 	.word	0x40000800
 8004514:	40000c00 	.word	0x40000c00
 8004518:	40014000 	.word	0x40014000

0800451c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b082      	sub	sp, #8
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d101      	bne.n	800452e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	e040      	b.n	80045b0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004532:	2b00      	cmp	r3, #0
 8004534:	d106      	bne.n	8004544 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2200      	movs	r2, #0
 800453a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f7fc fb98 	bl	8000c74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2224      	movs	r2, #36	; 0x24
 8004548:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	681a      	ldr	r2, [r3, #0]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f022 0201 	bic.w	r2, r2, #1
 8004558:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800455e:	2b00      	cmp	r3, #0
 8004560:	d002      	beq.n	8004568 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f000 fae0 	bl	8004b28 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004568:	6878      	ldr	r0, [r7, #4]
 800456a:	f000 f825 	bl	80045b8 <UART_SetConfig>
 800456e:	4603      	mov	r3, r0
 8004570:	2b01      	cmp	r3, #1
 8004572:	d101      	bne.n	8004578 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	e01b      	b.n	80045b0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	685a      	ldr	r2, [r3, #4]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004586:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	689a      	ldr	r2, [r3, #8]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004596:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	681a      	ldr	r2, [r3, #0]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f042 0201 	orr.w	r2, r2, #1
 80045a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80045a8:	6878      	ldr	r0, [r7, #4]
 80045aa:	f000 fb5f 	bl	8004c6c <UART_CheckIdleState>
 80045ae:	4603      	mov	r3, r0
}
 80045b0:	4618      	mov	r0, r3
 80045b2:	3708      	adds	r7, #8
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd80      	pop	{r7, pc}

080045b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80045bc:	b08a      	sub	sp, #40	; 0x28
 80045be:	af00      	add	r7, sp, #0
 80045c0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80045c2:	2300      	movs	r3, #0
 80045c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	689a      	ldr	r2, [r3, #8]
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	691b      	ldr	r3, [r3, #16]
 80045d0:	431a      	orrs	r2, r3
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	695b      	ldr	r3, [r3, #20]
 80045d6:	431a      	orrs	r2, r3
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	69db      	ldr	r3, [r3, #28]
 80045dc:	4313      	orrs	r3, r2
 80045de:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	681a      	ldr	r2, [r3, #0]
 80045e6:	4ba4      	ldr	r3, [pc, #656]	; (8004878 <UART_SetConfig+0x2c0>)
 80045e8:	4013      	ands	r3, r2
 80045ea:	68fa      	ldr	r2, [r7, #12]
 80045ec:	6812      	ldr	r2, [r2, #0]
 80045ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80045f0:	430b      	orrs	r3, r1
 80045f2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	68da      	ldr	r2, [r3, #12]
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	430a      	orrs	r2, r1
 8004608:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	699b      	ldr	r3, [r3, #24]
 800460e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a99      	ldr	r2, [pc, #612]	; (800487c <UART_SetConfig+0x2c4>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d004      	beq.n	8004624 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	6a1b      	ldr	r3, [r3, #32]
 800461e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004620:	4313      	orrs	r3, r2
 8004622:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	689b      	ldr	r3, [r3, #8]
 800462a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004634:	430a      	orrs	r2, r1
 8004636:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a90      	ldr	r2, [pc, #576]	; (8004880 <UART_SetConfig+0x2c8>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d126      	bne.n	8004690 <UART_SetConfig+0xd8>
 8004642:	4b90      	ldr	r3, [pc, #576]	; (8004884 <UART_SetConfig+0x2cc>)
 8004644:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004648:	f003 0303 	and.w	r3, r3, #3
 800464c:	2b03      	cmp	r3, #3
 800464e:	d81b      	bhi.n	8004688 <UART_SetConfig+0xd0>
 8004650:	a201      	add	r2, pc, #4	; (adr r2, 8004658 <UART_SetConfig+0xa0>)
 8004652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004656:	bf00      	nop
 8004658:	08004669 	.word	0x08004669
 800465c:	08004679 	.word	0x08004679
 8004660:	08004671 	.word	0x08004671
 8004664:	08004681 	.word	0x08004681
 8004668:	2301      	movs	r3, #1
 800466a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800466e:	e116      	b.n	800489e <UART_SetConfig+0x2e6>
 8004670:	2302      	movs	r3, #2
 8004672:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004676:	e112      	b.n	800489e <UART_SetConfig+0x2e6>
 8004678:	2304      	movs	r3, #4
 800467a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800467e:	e10e      	b.n	800489e <UART_SetConfig+0x2e6>
 8004680:	2308      	movs	r3, #8
 8004682:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004686:	e10a      	b.n	800489e <UART_SetConfig+0x2e6>
 8004688:	2310      	movs	r3, #16
 800468a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800468e:	e106      	b.n	800489e <UART_SetConfig+0x2e6>
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a7c      	ldr	r2, [pc, #496]	; (8004888 <UART_SetConfig+0x2d0>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d138      	bne.n	800470c <UART_SetConfig+0x154>
 800469a:	4b7a      	ldr	r3, [pc, #488]	; (8004884 <UART_SetConfig+0x2cc>)
 800469c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046a0:	f003 030c 	and.w	r3, r3, #12
 80046a4:	2b0c      	cmp	r3, #12
 80046a6:	d82d      	bhi.n	8004704 <UART_SetConfig+0x14c>
 80046a8:	a201      	add	r2, pc, #4	; (adr r2, 80046b0 <UART_SetConfig+0xf8>)
 80046aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046ae:	bf00      	nop
 80046b0:	080046e5 	.word	0x080046e5
 80046b4:	08004705 	.word	0x08004705
 80046b8:	08004705 	.word	0x08004705
 80046bc:	08004705 	.word	0x08004705
 80046c0:	080046f5 	.word	0x080046f5
 80046c4:	08004705 	.word	0x08004705
 80046c8:	08004705 	.word	0x08004705
 80046cc:	08004705 	.word	0x08004705
 80046d0:	080046ed 	.word	0x080046ed
 80046d4:	08004705 	.word	0x08004705
 80046d8:	08004705 	.word	0x08004705
 80046dc:	08004705 	.word	0x08004705
 80046e0:	080046fd 	.word	0x080046fd
 80046e4:	2300      	movs	r3, #0
 80046e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046ea:	e0d8      	b.n	800489e <UART_SetConfig+0x2e6>
 80046ec:	2302      	movs	r3, #2
 80046ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046f2:	e0d4      	b.n	800489e <UART_SetConfig+0x2e6>
 80046f4:	2304      	movs	r3, #4
 80046f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046fa:	e0d0      	b.n	800489e <UART_SetConfig+0x2e6>
 80046fc:	2308      	movs	r3, #8
 80046fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004702:	e0cc      	b.n	800489e <UART_SetConfig+0x2e6>
 8004704:	2310      	movs	r3, #16
 8004706:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800470a:	e0c8      	b.n	800489e <UART_SetConfig+0x2e6>
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a5e      	ldr	r2, [pc, #376]	; (800488c <UART_SetConfig+0x2d4>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d125      	bne.n	8004762 <UART_SetConfig+0x1aa>
 8004716:	4b5b      	ldr	r3, [pc, #364]	; (8004884 <UART_SetConfig+0x2cc>)
 8004718:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800471c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004720:	2b30      	cmp	r3, #48	; 0x30
 8004722:	d016      	beq.n	8004752 <UART_SetConfig+0x19a>
 8004724:	2b30      	cmp	r3, #48	; 0x30
 8004726:	d818      	bhi.n	800475a <UART_SetConfig+0x1a2>
 8004728:	2b20      	cmp	r3, #32
 800472a:	d00a      	beq.n	8004742 <UART_SetConfig+0x18a>
 800472c:	2b20      	cmp	r3, #32
 800472e:	d814      	bhi.n	800475a <UART_SetConfig+0x1a2>
 8004730:	2b00      	cmp	r3, #0
 8004732:	d002      	beq.n	800473a <UART_SetConfig+0x182>
 8004734:	2b10      	cmp	r3, #16
 8004736:	d008      	beq.n	800474a <UART_SetConfig+0x192>
 8004738:	e00f      	b.n	800475a <UART_SetConfig+0x1a2>
 800473a:	2300      	movs	r3, #0
 800473c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004740:	e0ad      	b.n	800489e <UART_SetConfig+0x2e6>
 8004742:	2302      	movs	r3, #2
 8004744:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004748:	e0a9      	b.n	800489e <UART_SetConfig+0x2e6>
 800474a:	2304      	movs	r3, #4
 800474c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004750:	e0a5      	b.n	800489e <UART_SetConfig+0x2e6>
 8004752:	2308      	movs	r3, #8
 8004754:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004758:	e0a1      	b.n	800489e <UART_SetConfig+0x2e6>
 800475a:	2310      	movs	r3, #16
 800475c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004760:	e09d      	b.n	800489e <UART_SetConfig+0x2e6>
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a4a      	ldr	r2, [pc, #296]	; (8004890 <UART_SetConfig+0x2d8>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d125      	bne.n	80047b8 <UART_SetConfig+0x200>
 800476c:	4b45      	ldr	r3, [pc, #276]	; (8004884 <UART_SetConfig+0x2cc>)
 800476e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004772:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004776:	2bc0      	cmp	r3, #192	; 0xc0
 8004778:	d016      	beq.n	80047a8 <UART_SetConfig+0x1f0>
 800477a:	2bc0      	cmp	r3, #192	; 0xc0
 800477c:	d818      	bhi.n	80047b0 <UART_SetConfig+0x1f8>
 800477e:	2b80      	cmp	r3, #128	; 0x80
 8004780:	d00a      	beq.n	8004798 <UART_SetConfig+0x1e0>
 8004782:	2b80      	cmp	r3, #128	; 0x80
 8004784:	d814      	bhi.n	80047b0 <UART_SetConfig+0x1f8>
 8004786:	2b00      	cmp	r3, #0
 8004788:	d002      	beq.n	8004790 <UART_SetConfig+0x1d8>
 800478a:	2b40      	cmp	r3, #64	; 0x40
 800478c:	d008      	beq.n	80047a0 <UART_SetConfig+0x1e8>
 800478e:	e00f      	b.n	80047b0 <UART_SetConfig+0x1f8>
 8004790:	2300      	movs	r3, #0
 8004792:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004796:	e082      	b.n	800489e <UART_SetConfig+0x2e6>
 8004798:	2302      	movs	r3, #2
 800479a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800479e:	e07e      	b.n	800489e <UART_SetConfig+0x2e6>
 80047a0:	2304      	movs	r3, #4
 80047a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047a6:	e07a      	b.n	800489e <UART_SetConfig+0x2e6>
 80047a8:	2308      	movs	r3, #8
 80047aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047ae:	e076      	b.n	800489e <UART_SetConfig+0x2e6>
 80047b0:	2310      	movs	r3, #16
 80047b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047b6:	e072      	b.n	800489e <UART_SetConfig+0x2e6>
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a35      	ldr	r2, [pc, #212]	; (8004894 <UART_SetConfig+0x2dc>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d12a      	bne.n	8004818 <UART_SetConfig+0x260>
 80047c2:	4b30      	ldr	r3, [pc, #192]	; (8004884 <UART_SetConfig+0x2cc>)
 80047c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80047d0:	d01a      	beq.n	8004808 <UART_SetConfig+0x250>
 80047d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80047d6:	d81b      	bhi.n	8004810 <UART_SetConfig+0x258>
 80047d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047dc:	d00c      	beq.n	80047f8 <UART_SetConfig+0x240>
 80047de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047e2:	d815      	bhi.n	8004810 <UART_SetConfig+0x258>
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d003      	beq.n	80047f0 <UART_SetConfig+0x238>
 80047e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047ec:	d008      	beq.n	8004800 <UART_SetConfig+0x248>
 80047ee:	e00f      	b.n	8004810 <UART_SetConfig+0x258>
 80047f0:	2300      	movs	r3, #0
 80047f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047f6:	e052      	b.n	800489e <UART_SetConfig+0x2e6>
 80047f8:	2302      	movs	r3, #2
 80047fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047fe:	e04e      	b.n	800489e <UART_SetConfig+0x2e6>
 8004800:	2304      	movs	r3, #4
 8004802:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004806:	e04a      	b.n	800489e <UART_SetConfig+0x2e6>
 8004808:	2308      	movs	r3, #8
 800480a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800480e:	e046      	b.n	800489e <UART_SetConfig+0x2e6>
 8004810:	2310      	movs	r3, #16
 8004812:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004816:	e042      	b.n	800489e <UART_SetConfig+0x2e6>
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a17      	ldr	r2, [pc, #92]	; (800487c <UART_SetConfig+0x2c4>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d13a      	bne.n	8004898 <UART_SetConfig+0x2e0>
 8004822:	4b18      	ldr	r3, [pc, #96]	; (8004884 <UART_SetConfig+0x2cc>)
 8004824:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004828:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800482c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004830:	d01a      	beq.n	8004868 <UART_SetConfig+0x2b0>
 8004832:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004836:	d81b      	bhi.n	8004870 <UART_SetConfig+0x2b8>
 8004838:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800483c:	d00c      	beq.n	8004858 <UART_SetConfig+0x2a0>
 800483e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004842:	d815      	bhi.n	8004870 <UART_SetConfig+0x2b8>
 8004844:	2b00      	cmp	r3, #0
 8004846:	d003      	beq.n	8004850 <UART_SetConfig+0x298>
 8004848:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800484c:	d008      	beq.n	8004860 <UART_SetConfig+0x2a8>
 800484e:	e00f      	b.n	8004870 <UART_SetConfig+0x2b8>
 8004850:	2300      	movs	r3, #0
 8004852:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004856:	e022      	b.n	800489e <UART_SetConfig+0x2e6>
 8004858:	2302      	movs	r3, #2
 800485a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800485e:	e01e      	b.n	800489e <UART_SetConfig+0x2e6>
 8004860:	2304      	movs	r3, #4
 8004862:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004866:	e01a      	b.n	800489e <UART_SetConfig+0x2e6>
 8004868:	2308      	movs	r3, #8
 800486a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800486e:	e016      	b.n	800489e <UART_SetConfig+0x2e6>
 8004870:	2310      	movs	r3, #16
 8004872:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004876:	e012      	b.n	800489e <UART_SetConfig+0x2e6>
 8004878:	efff69f3 	.word	0xefff69f3
 800487c:	40008000 	.word	0x40008000
 8004880:	40013800 	.word	0x40013800
 8004884:	40021000 	.word	0x40021000
 8004888:	40004400 	.word	0x40004400
 800488c:	40004800 	.word	0x40004800
 8004890:	40004c00 	.word	0x40004c00
 8004894:	40005000 	.word	0x40005000
 8004898:	2310      	movs	r3, #16
 800489a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a9f      	ldr	r2, [pc, #636]	; (8004b20 <UART_SetConfig+0x568>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d17a      	bne.n	800499e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80048a8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80048ac:	2b08      	cmp	r3, #8
 80048ae:	d824      	bhi.n	80048fa <UART_SetConfig+0x342>
 80048b0:	a201      	add	r2, pc, #4	; (adr r2, 80048b8 <UART_SetConfig+0x300>)
 80048b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048b6:	bf00      	nop
 80048b8:	080048dd 	.word	0x080048dd
 80048bc:	080048fb 	.word	0x080048fb
 80048c0:	080048e5 	.word	0x080048e5
 80048c4:	080048fb 	.word	0x080048fb
 80048c8:	080048eb 	.word	0x080048eb
 80048cc:	080048fb 	.word	0x080048fb
 80048d0:	080048fb 	.word	0x080048fb
 80048d4:	080048fb 	.word	0x080048fb
 80048d8:	080048f3 	.word	0x080048f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048dc:	f7fe fddc 	bl	8003498 <HAL_RCC_GetPCLK1Freq>
 80048e0:	61f8      	str	r0, [r7, #28]
        break;
 80048e2:	e010      	b.n	8004906 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048e4:	4b8f      	ldr	r3, [pc, #572]	; (8004b24 <UART_SetConfig+0x56c>)
 80048e6:	61fb      	str	r3, [r7, #28]
        break;
 80048e8:	e00d      	b.n	8004906 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048ea:	f7fe fd3d 	bl	8003368 <HAL_RCC_GetSysClockFreq>
 80048ee:	61f8      	str	r0, [r7, #28]
        break;
 80048f0:	e009      	b.n	8004906 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048f6:	61fb      	str	r3, [r7, #28]
        break;
 80048f8:	e005      	b.n	8004906 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80048fa:	2300      	movs	r3, #0
 80048fc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80048fe:	2301      	movs	r3, #1
 8004900:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004904:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004906:	69fb      	ldr	r3, [r7, #28]
 8004908:	2b00      	cmp	r3, #0
 800490a:	f000 80fb 	beq.w	8004b04 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	685a      	ldr	r2, [r3, #4]
 8004912:	4613      	mov	r3, r2
 8004914:	005b      	lsls	r3, r3, #1
 8004916:	4413      	add	r3, r2
 8004918:	69fa      	ldr	r2, [r7, #28]
 800491a:	429a      	cmp	r2, r3
 800491c:	d305      	bcc.n	800492a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004924:	69fa      	ldr	r2, [r7, #28]
 8004926:	429a      	cmp	r2, r3
 8004928:	d903      	bls.n	8004932 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800492a:	2301      	movs	r3, #1
 800492c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004930:	e0e8      	b.n	8004b04 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004932:	69fb      	ldr	r3, [r7, #28]
 8004934:	2200      	movs	r2, #0
 8004936:	461c      	mov	r4, r3
 8004938:	4615      	mov	r5, r2
 800493a:	f04f 0200 	mov.w	r2, #0
 800493e:	f04f 0300 	mov.w	r3, #0
 8004942:	022b      	lsls	r3, r5, #8
 8004944:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004948:	0222      	lsls	r2, r4, #8
 800494a:	68f9      	ldr	r1, [r7, #12]
 800494c:	6849      	ldr	r1, [r1, #4]
 800494e:	0849      	lsrs	r1, r1, #1
 8004950:	2000      	movs	r0, #0
 8004952:	4688      	mov	r8, r1
 8004954:	4681      	mov	r9, r0
 8004956:	eb12 0a08 	adds.w	sl, r2, r8
 800495a:	eb43 0b09 	adc.w	fp, r3, r9
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	2200      	movs	r2, #0
 8004964:	603b      	str	r3, [r7, #0]
 8004966:	607a      	str	r2, [r7, #4]
 8004968:	e9d7 2300 	ldrd	r2, r3, [r7]
 800496c:	4650      	mov	r0, sl
 800496e:	4659      	mov	r1, fp
 8004970:	f7fb fc3e 	bl	80001f0 <__aeabi_uldivmod>
 8004974:	4602      	mov	r2, r0
 8004976:	460b      	mov	r3, r1
 8004978:	4613      	mov	r3, r2
 800497a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800497c:	69bb      	ldr	r3, [r7, #24]
 800497e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004982:	d308      	bcc.n	8004996 <UART_SetConfig+0x3de>
 8004984:	69bb      	ldr	r3, [r7, #24]
 8004986:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800498a:	d204      	bcs.n	8004996 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	69ba      	ldr	r2, [r7, #24]
 8004992:	60da      	str	r2, [r3, #12]
 8004994:	e0b6      	b.n	8004b04 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004996:	2301      	movs	r3, #1
 8004998:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800499c:	e0b2      	b.n	8004b04 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	69db      	ldr	r3, [r3, #28]
 80049a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049a6:	d15e      	bne.n	8004a66 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80049a8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80049ac:	2b08      	cmp	r3, #8
 80049ae:	d828      	bhi.n	8004a02 <UART_SetConfig+0x44a>
 80049b0:	a201      	add	r2, pc, #4	; (adr r2, 80049b8 <UART_SetConfig+0x400>)
 80049b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049b6:	bf00      	nop
 80049b8:	080049dd 	.word	0x080049dd
 80049bc:	080049e5 	.word	0x080049e5
 80049c0:	080049ed 	.word	0x080049ed
 80049c4:	08004a03 	.word	0x08004a03
 80049c8:	080049f3 	.word	0x080049f3
 80049cc:	08004a03 	.word	0x08004a03
 80049d0:	08004a03 	.word	0x08004a03
 80049d4:	08004a03 	.word	0x08004a03
 80049d8:	080049fb 	.word	0x080049fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049dc:	f7fe fd5c 	bl	8003498 <HAL_RCC_GetPCLK1Freq>
 80049e0:	61f8      	str	r0, [r7, #28]
        break;
 80049e2:	e014      	b.n	8004a0e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80049e4:	f7fe fd6e 	bl	80034c4 <HAL_RCC_GetPCLK2Freq>
 80049e8:	61f8      	str	r0, [r7, #28]
        break;
 80049ea:	e010      	b.n	8004a0e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049ec:	4b4d      	ldr	r3, [pc, #308]	; (8004b24 <UART_SetConfig+0x56c>)
 80049ee:	61fb      	str	r3, [r7, #28]
        break;
 80049f0:	e00d      	b.n	8004a0e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049f2:	f7fe fcb9 	bl	8003368 <HAL_RCC_GetSysClockFreq>
 80049f6:	61f8      	str	r0, [r7, #28]
        break;
 80049f8:	e009      	b.n	8004a0e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049fe:	61fb      	str	r3, [r7, #28]
        break;
 8004a00:	e005      	b.n	8004a0e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004a02:	2300      	movs	r3, #0
 8004a04:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004a0c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004a0e:	69fb      	ldr	r3, [r7, #28]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d077      	beq.n	8004b04 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004a14:	69fb      	ldr	r3, [r7, #28]
 8004a16:	005a      	lsls	r2, r3, #1
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	085b      	lsrs	r3, r3, #1
 8004a1e:	441a      	add	r2, r3
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a28:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a2a:	69bb      	ldr	r3, [r7, #24]
 8004a2c:	2b0f      	cmp	r3, #15
 8004a2e:	d916      	bls.n	8004a5e <UART_SetConfig+0x4a6>
 8004a30:	69bb      	ldr	r3, [r7, #24]
 8004a32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a36:	d212      	bcs.n	8004a5e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004a38:	69bb      	ldr	r3, [r7, #24]
 8004a3a:	b29b      	uxth	r3, r3
 8004a3c:	f023 030f 	bic.w	r3, r3, #15
 8004a40:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004a42:	69bb      	ldr	r3, [r7, #24]
 8004a44:	085b      	lsrs	r3, r3, #1
 8004a46:	b29b      	uxth	r3, r3
 8004a48:	f003 0307 	and.w	r3, r3, #7
 8004a4c:	b29a      	uxth	r2, r3
 8004a4e:	8afb      	ldrh	r3, [r7, #22]
 8004a50:	4313      	orrs	r3, r2
 8004a52:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	8afa      	ldrh	r2, [r7, #22]
 8004a5a:	60da      	str	r2, [r3, #12]
 8004a5c:	e052      	b.n	8004b04 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004a64:	e04e      	b.n	8004b04 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004a66:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004a6a:	2b08      	cmp	r3, #8
 8004a6c:	d827      	bhi.n	8004abe <UART_SetConfig+0x506>
 8004a6e:	a201      	add	r2, pc, #4	; (adr r2, 8004a74 <UART_SetConfig+0x4bc>)
 8004a70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a74:	08004a99 	.word	0x08004a99
 8004a78:	08004aa1 	.word	0x08004aa1
 8004a7c:	08004aa9 	.word	0x08004aa9
 8004a80:	08004abf 	.word	0x08004abf
 8004a84:	08004aaf 	.word	0x08004aaf
 8004a88:	08004abf 	.word	0x08004abf
 8004a8c:	08004abf 	.word	0x08004abf
 8004a90:	08004abf 	.word	0x08004abf
 8004a94:	08004ab7 	.word	0x08004ab7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a98:	f7fe fcfe 	bl	8003498 <HAL_RCC_GetPCLK1Freq>
 8004a9c:	61f8      	str	r0, [r7, #28]
        break;
 8004a9e:	e014      	b.n	8004aca <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004aa0:	f7fe fd10 	bl	80034c4 <HAL_RCC_GetPCLK2Freq>
 8004aa4:	61f8      	str	r0, [r7, #28]
        break;
 8004aa6:	e010      	b.n	8004aca <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004aa8:	4b1e      	ldr	r3, [pc, #120]	; (8004b24 <UART_SetConfig+0x56c>)
 8004aaa:	61fb      	str	r3, [r7, #28]
        break;
 8004aac:	e00d      	b.n	8004aca <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004aae:	f7fe fc5b 	bl	8003368 <HAL_RCC_GetSysClockFreq>
 8004ab2:	61f8      	str	r0, [r7, #28]
        break;
 8004ab4:	e009      	b.n	8004aca <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ab6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004aba:	61fb      	str	r3, [r7, #28]
        break;
 8004abc:	e005      	b.n	8004aca <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004abe:	2300      	movs	r3, #0
 8004ac0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004ac8:	bf00      	nop
    }

    if (pclk != 0U)
 8004aca:	69fb      	ldr	r3, [r7, #28]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d019      	beq.n	8004b04 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	085a      	lsrs	r2, r3, #1
 8004ad6:	69fb      	ldr	r3, [r7, #28]
 8004ad8:	441a      	add	r2, r3
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ae2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ae4:	69bb      	ldr	r3, [r7, #24]
 8004ae6:	2b0f      	cmp	r3, #15
 8004ae8:	d909      	bls.n	8004afe <UART_SetConfig+0x546>
 8004aea:	69bb      	ldr	r3, [r7, #24]
 8004aec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004af0:	d205      	bcs.n	8004afe <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004af2:	69bb      	ldr	r3, [r7, #24]
 8004af4:	b29a      	uxth	r2, r3
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	60da      	str	r2, [r3, #12]
 8004afc:	e002      	b.n	8004b04 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2200      	movs	r2, #0
 8004b08:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004b10:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	3728      	adds	r7, #40	; 0x28
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b1e:	bf00      	nop
 8004b20:	40008000 	.word	0x40008000
 8004b24:	00f42400 	.word	0x00f42400

08004b28 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b083      	sub	sp, #12
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b34:	f003 0308 	and.w	r3, r3, #8
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d00a      	beq.n	8004b52 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	430a      	orrs	r2, r1
 8004b50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b56:	f003 0301 	and.w	r3, r3, #1
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d00a      	beq.n	8004b74 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	430a      	orrs	r2, r1
 8004b72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b78:	f003 0302 	and.w	r3, r3, #2
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d00a      	beq.n	8004b96 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	430a      	orrs	r2, r1
 8004b94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b9a:	f003 0304 	and.w	r3, r3, #4
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d00a      	beq.n	8004bb8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	430a      	orrs	r2, r1
 8004bb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bbc:	f003 0310 	and.w	r3, r3, #16
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d00a      	beq.n	8004bda <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	430a      	orrs	r2, r1
 8004bd8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bde:	f003 0320 	and.w	r3, r3, #32
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d00a      	beq.n	8004bfc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	430a      	orrs	r2, r1
 8004bfa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d01a      	beq.n	8004c3e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	430a      	orrs	r2, r1
 8004c1c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c26:	d10a      	bne.n	8004c3e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	430a      	orrs	r2, r1
 8004c3c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d00a      	beq.n	8004c60 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	430a      	orrs	r2, r1
 8004c5e:	605a      	str	r2, [r3, #4]
  }
}
 8004c60:	bf00      	nop
 8004c62:	370c      	adds	r7, #12
 8004c64:	46bd      	mov	sp, r7
 8004c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6a:	4770      	bx	lr

08004c6c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b098      	sub	sp, #96	; 0x60
 8004c70:	af02      	add	r7, sp, #8
 8004c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2200      	movs	r2, #0
 8004c78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004c7c:	f7fc f94a 	bl	8000f14 <HAL_GetTick>
 8004c80:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f003 0308 	and.w	r3, r3, #8
 8004c8c:	2b08      	cmp	r3, #8
 8004c8e:	d12e      	bne.n	8004cee <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c90:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004c94:	9300      	str	r3, [sp, #0]
 8004c96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c98:	2200      	movs	r2, #0
 8004c9a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f000 f88c 	bl	8004dbc <UART_WaitOnFlagUntilTimeout>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d021      	beq.n	8004cee <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cb2:	e853 3f00 	ldrex	r3, [r3]
 8004cb6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004cb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004cbe:	653b      	str	r3, [r7, #80]	; 0x50
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	461a      	mov	r2, r3
 8004cc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004cc8:	647b      	str	r3, [r7, #68]	; 0x44
 8004cca:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ccc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004cce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004cd0:	e841 2300 	strex	r3, r2, [r1]
 8004cd4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004cd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d1e6      	bne.n	8004caa <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2220      	movs	r2, #32
 8004ce0:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004cea:	2303      	movs	r3, #3
 8004cec:	e062      	b.n	8004db4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f003 0304 	and.w	r3, r3, #4
 8004cf8:	2b04      	cmp	r3, #4
 8004cfa:	d149      	bne.n	8004d90 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004cfc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004d00:	9300      	str	r3, [sp, #0]
 8004d02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d04:	2200      	movs	r2, #0
 8004d06:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004d0a:	6878      	ldr	r0, [r7, #4]
 8004d0c:	f000 f856 	bl	8004dbc <UART_WaitOnFlagUntilTimeout>
 8004d10:	4603      	mov	r3, r0
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d03c      	beq.n	8004d90 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d1e:	e853 3f00 	ldrex	r3, [r3]
 8004d22:	623b      	str	r3, [r7, #32]
   return(result);
 8004d24:	6a3b      	ldr	r3, [r7, #32]
 8004d26:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004d2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	461a      	mov	r2, r3
 8004d32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d34:	633b      	str	r3, [r7, #48]	; 0x30
 8004d36:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d38:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004d3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d3c:	e841 2300 	strex	r3, r2, [r1]
 8004d40:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d1e6      	bne.n	8004d16 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	3308      	adds	r3, #8
 8004d4e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	e853 3f00 	ldrex	r3, [r3]
 8004d56:	60fb      	str	r3, [r7, #12]
   return(result);
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	f023 0301 	bic.w	r3, r3, #1
 8004d5e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	3308      	adds	r3, #8
 8004d66:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d68:	61fa      	str	r2, [r7, #28]
 8004d6a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d6c:	69b9      	ldr	r1, [r7, #24]
 8004d6e:	69fa      	ldr	r2, [r7, #28]
 8004d70:	e841 2300 	strex	r3, r2, [r1]
 8004d74:	617b      	str	r3, [r7, #20]
   return(result);
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d1e5      	bne.n	8004d48 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2220      	movs	r2, #32
 8004d80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2200      	movs	r2, #0
 8004d88:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d8c:	2303      	movs	r3, #3
 8004d8e:	e011      	b.n	8004db4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2220      	movs	r2, #32
 8004d94:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2220      	movs	r2, #32
 8004d9a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2200      	movs	r2, #0
 8004da2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2200      	movs	r2, #0
 8004da8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2200      	movs	r2, #0
 8004dae:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004db2:	2300      	movs	r3, #0
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	3758      	adds	r7, #88	; 0x58
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bd80      	pop	{r7, pc}

08004dbc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b084      	sub	sp, #16
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	60f8      	str	r0, [r7, #12]
 8004dc4:	60b9      	str	r1, [r7, #8]
 8004dc6:	603b      	str	r3, [r7, #0]
 8004dc8:	4613      	mov	r3, r2
 8004dca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004dcc:	e049      	b.n	8004e62 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004dce:	69bb      	ldr	r3, [r7, #24]
 8004dd0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004dd4:	d045      	beq.n	8004e62 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dd6:	f7fc f89d 	bl	8000f14 <HAL_GetTick>
 8004dda:	4602      	mov	r2, r0
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	1ad3      	subs	r3, r2, r3
 8004de0:	69ba      	ldr	r2, [r7, #24]
 8004de2:	429a      	cmp	r2, r3
 8004de4:	d302      	bcc.n	8004dec <UART_WaitOnFlagUntilTimeout+0x30>
 8004de6:	69bb      	ldr	r3, [r7, #24]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d101      	bne.n	8004df0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004dec:	2303      	movs	r3, #3
 8004dee:	e048      	b.n	8004e82 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f003 0304 	and.w	r3, r3, #4
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d031      	beq.n	8004e62 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	69db      	ldr	r3, [r3, #28]
 8004e04:	f003 0308 	and.w	r3, r3, #8
 8004e08:	2b08      	cmp	r3, #8
 8004e0a:	d110      	bne.n	8004e2e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	2208      	movs	r2, #8
 8004e12:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004e14:	68f8      	ldr	r0, [r7, #12]
 8004e16:	f000 f838 	bl	8004e8a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	2208      	movs	r2, #8
 8004e1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	2200      	movs	r2, #0
 8004e26:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	e029      	b.n	8004e82 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	69db      	ldr	r3, [r3, #28]
 8004e34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e3c:	d111      	bne.n	8004e62 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004e46:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004e48:	68f8      	ldr	r0, [r7, #12]
 8004e4a:	f000 f81e 	bl	8004e8a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	2220      	movs	r2, #32
 8004e52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004e5e:	2303      	movs	r3, #3
 8004e60:	e00f      	b.n	8004e82 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	69da      	ldr	r2, [r3, #28]
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	4013      	ands	r3, r2
 8004e6c:	68ba      	ldr	r2, [r7, #8]
 8004e6e:	429a      	cmp	r2, r3
 8004e70:	bf0c      	ite	eq
 8004e72:	2301      	moveq	r3, #1
 8004e74:	2300      	movne	r3, #0
 8004e76:	b2db      	uxtb	r3, r3
 8004e78:	461a      	mov	r2, r3
 8004e7a:	79fb      	ldrb	r3, [r7, #7]
 8004e7c:	429a      	cmp	r2, r3
 8004e7e:	d0a6      	beq.n	8004dce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e80:	2300      	movs	r3, #0
}
 8004e82:	4618      	mov	r0, r3
 8004e84:	3710      	adds	r7, #16
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd80      	pop	{r7, pc}

08004e8a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004e8a:	b480      	push	{r7}
 8004e8c:	b095      	sub	sp, #84	; 0x54
 8004e8e:	af00      	add	r7, sp, #0
 8004e90:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e9a:	e853 3f00 	ldrex	r3, [r3]
 8004e9e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ea2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004ea6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	461a      	mov	r2, r3
 8004eae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004eb0:	643b      	str	r3, [r7, #64]	; 0x40
 8004eb2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eb4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004eb6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004eb8:	e841 2300 	strex	r3, r2, [r1]
 8004ebc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004ebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d1e6      	bne.n	8004e92 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	3308      	adds	r3, #8
 8004eca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ecc:	6a3b      	ldr	r3, [r7, #32]
 8004ece:	e853 3f00 	ldrex	r3, [r3]
 8004ed2:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ed4:	69fb      	ldr	r3, [r7, #28]
 8004ed6:	f023 0301 	bic.w	r3, r3, #1
 8004eda:	64bb      	str	r3, [r7, #72]	; 0x48
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	3308      	adds	r3, #8
 8004ee2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ee4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004ee6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ee8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004eea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004eec:	e841 2300 	strex	r3, r2, [r1]
 8004ef0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d1e5      	bne.n	8004ec4 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004efc:	2b01      	cmp	r3, #1
 8004efe:	d118      	bne.n	8004f32 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	e853 3f00 	ldrex	r3, [r3]
 8004f0c:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	f023 0310 	bic.w	r3, r3, #16
 8004f14:	647b      	str	r3, [r7, #68]	; 0x44
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	461a      	mov	r2, r3
 8004f1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f1e:	61bb      	str	r3, [r7, #24]
 8004f20:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f22:	6979      	ldr	r1, [r7, #20]
 8004f24:	69ba      	ldr	r2, [r7, #24]
 8004f26:	e841 2300 	strex	r3, r2, [r1]
 8004f2a:	613b      	str	r3, [r7, #16]
   return(result);
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d1e6      	bne.n	8004f00 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2220      	movs	r2, #32
 8004f36:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2200      	movs	r2, #0
 8004f44:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004f46:	bf00      	nop
 8004f48:	3754      	adds	r7, #84	; 0x54
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f50:	4770      	bx	lr

08004f52 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004f52:	b084      	sub	sp, #16
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b084      	sub	sp, #16
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
 8004f5c:	f107 001c 	add.w	r0, r7, #28
 8004f60:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	68db      	ldr	r3, [r3, #12]
 8004f68:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8004f70:	6878      	ldr	r0, [r7, #4]
 8004f72:	f001 fa1d 	bl	80063b0 <USB_CoreReset>
 8004f76:	4603      	mov	r3, r0
 8004f78:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8004f7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d106      	bne.n	8004f8e <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f84:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	639a      	str	r2, [r3, #56]	; 0x38
 8004f8c:	e005      	b.n	8004f9a <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f92:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8004f9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	3710      	adds	r7, #16
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004fa6:	b004      	add	sp, #16
 8004fa8:	4770      	bx	lr
	...

08004fac <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004fac:	b480      	push	{r7}
 8004fae:	b087      	sub	sp, #28
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	60f8      	str	r0, [r7, #12]
 8004fb4:	60b9      	str	r1, [r7, #8]
 8004fb6:	4613      	mov	r3, r2
 8004fb8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004fba:	79fb      	ldrb	r3, [r7, #7]
 8004fbc:	2b02      	cmp	r3, #2
 8004fbe:	d165      	bne.n	800508c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	4a3e      	ldr	r2, [pc, #248]	; (80050bc <USB_SetTurnaroundTime+0x110>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d906      	bls.n	8004fd6 <USB_SetTurnaroundTime+0x2a>
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	4a3d      	ldr	r2, [pc, #244]	; (80050c0 <USB_SetTurnaroundTime+0x114>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d202      	bcs.n	8004fd6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004fd0:	230f      	movs	r3, #15
 8004fd2:	617b      	str	r3, [r7, #20]
 8004fd4:	e05c      	b.n	8005090 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	4a39      	ldr	r2, [pc, #228]	; (80050c0 <USB_SetTurnaroundTime+0x114>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d306      	bcc.n	8004fec <USB_SetTurnaroundTime+0x40>
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	4a38      	ldr	r2, [pc, #224]	; (80050c4 <USB_SetTurnaroundTime+0x118>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d202      	bcs.n	8004fec <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004fe6:	230e      	movs	r3, #14
 8004fe8:	617b      	str	r3, [r7, #20]
 8004fea:	e051      	b.n	8005090 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	4a35      	ldr	r2, [pc, #212]	; (80050c4 <USB_SetTurnaroundTime+0x118>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d306      	bcc.n	8005002 <USB_SetTurnaroundTime+0x56>
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	4a34      	ldr	r2, [pc, #208]	; (80050c8 <USB_SetTurnaroundTime+0x11c>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d202      	bcs.n	8005002 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004ffc:	230d      	movs	r3, #13
 8004ffe:	617b      	str	r3, [r7, #20]
 8005000:	e046      	b.n	8005090 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	4a30      	ldr	r2, [pc, #192]	; (80050c8 <USB_SetTurnaroundTime+0x11c>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d306      	bcc.n	8005018 <USB_SetTurnaroundTime+0x6c>
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	4a2f      	ldr	r2, [pc, #188]	; (80050cc <USB_SetTurnaroundTime+0x120>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d802      	bhi.n	8005018 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005012:	230c      	movs	r3, #12
 8005014:	617b      	str	r3, [r7, #20]
 8005016:	e03b      	b.n	8005090 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	4a2c      	ldr	r2, [pc, #176]	; (80050cc <USB_SetTurnaroundTime+0x120>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d906      	bls.n	800502e <USB_SetTurnaroundTime+0x82>
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	4a2b      	ldr	r2, [pc, #172]	; (80050d0 <USB_SetTurnaroundTime+0x124>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d802      	bhi.n	800502e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005028:	230b      	movs	r3, #11
 800502a:	617b      	str	r3, [r7, #20]
 800502c:	e030      	b.n	8005090 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	4a27      	ldr	r2, [pc, #156]	; (80050d0 <USB_SetTurnaroundTime+0x124>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d906      	bls.n	8005044 <USB_SetTurnaroundTime+0x98>
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	4a26      	ldr	r2, [pc, #152]	; (80050d4 <USB_SetTurnaroundTime+0x128>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d802      	bhi.n	8005044 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800503e:	230a      	movs	r3, #10
 8005040:	617b      	str	r3, [r7, #20]
 8005042:	e025      	b.n	8005090 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	4a23      	ldr	r2, [pc, #140]	; (80050d4 <USB_SetTurnaroundTime+0x128>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d906      	bls.n	800505a <USB_SetTurnaroundTime+0xae>
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	4a22      	ldr	r2, [pc, #136]	; (80050d8 <USB_SetTurnaroundTime+0x12c>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d202      	bcs.n	800505a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005054:	2309      	movs	r3, #9
 8005056:	617b      	str	r3, [r7, #20]
 8005058:	e01a      	b.n	8005090 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	4a1e      	ldr	r2, [pc, #120]	; (80050d8 <USB_SetTurnaroundTime+0x12c>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d306      	bcc.n	8005070 <USB_SetTurnaroundTime+0xc4>
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	4a1d      	ldr	r2, [pc, #116]	; (80050dc <USB_SetTurnaroundTime+0x130>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d802      	bhi.n	8005070 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800506a:	2308      	movs	r3, #8
 800506c:	617b      	str	r3, [r7, #20]
 800506e:	e00f      	b.n	8005090 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	4a1a      	ldr	r2, [pc, #104]	; (80050dc <USB_SetTurnaroundTime+0x130>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d906      	bls.n	8005086 <USB_SetTurnaroundTime+0xda>
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	4a19      	ldr	r2, [pc, #100]	; (80050e0 <USB_SetTurnaroundTime+0x134>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d202      	bcs.n	8005086 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005080:	2307      	movs	r3, #7
 8005082:	617b      	str	r3, [r7, #20]
 8005084:	e004      	b.n	8005090 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005086:	2306      	movs	r3, #6
 8005088:	617b      	str	r3, [r7, #20]
 800508a:	e001      	b.n	8005090 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800508c:	2309      	movs	r3, #9
 800508e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	68db      	ldr	r3, [r3, #12]
 8005094:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	68da      	ldr	r2, [r3, #12]
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	029b      	lsls	r3, r3, #10
 80050a4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80050a8:	431a      	orrs	r2, r3
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80050ae:	2300      	movs	r3, #0
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	371c      	adds	r7, #28
 80050b4:	46bd      	mov	sp, r7
 80050b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ba:	4770      	bx	lr
 80050bc:	00d8acbf 	.word	0x00d8acbf
 80050c0:	00e4e1c0 	.word	0x00e4e1c0
 80050c4:	00f42400 	.word	0x00f42400
 80050c8:	01067380 	.word	0x01067380
 80050cc:	011a499f 	.word	0x011a499f
 80050d0:	01312cff 	.word	0x01312cff
 80050d4:	014ca43f 	.word	0x014ca43f
 80050d8:	016e3600 	.word	0x016e3600
 80050dc:	01a6ab1f 	.word	0x01a6ab1f
 80050e0:	01e84800 	.word	0x01e84800

080050e4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b083      	sub	sp, #12
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	689b      	ldr	r3, [r3, #8]
 80050f0:	f043 0201 	orr.w	r2, r3, #1
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80050f8:	2300      	movs	r3, #0
}
 80050fa:	4618      	mov	r0, r3
 80050fc:	370c      	adds	r7, #12
 80050fe:	46bd      	mov	sp, r7
 8005100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005104:	4770      	bx	lr

08005106 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005106:	b480      	push	{r7}
 8005108:	b083      	sub	sp, #12
 800510a:	af00      	add	r7, sp, #0
 800510c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	689b      	ldr	r3, [r3, #8]
 8005112:	f023 0201 	bic.w	r2, r3, #1
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800511a:	2300      	movs	r3, #0
}
 800511c:	4618      	mov	r0, r3
 800511e:	370c      	adds	r7, #12
 8005120:	46bd      	mov	sp, r7
 8005122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005126:	4770      	bx	lr

08005128 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b084      	sub	sp, #16
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
 8005130:	460b      	mov	r3, r1
 8005132:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005134:	2300      	movs	r3, #0
 8005136:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	68db      	ldr	r3, [r3, #12]
 800513c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005144:	78fb      	ldrb	r3, [r7, #3]
 8005146:	2b01      	cmp	r3, #1
 8005148:	d115      	bne.n	8005176 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	68db      	ldr	r3, [r3, #12]
 800514e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005156:	2001      	movs	r0, #1
 8005158:	f7fb fee8 	bl	8000f2c <HAL_Delay>
      ms++;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	3301      	adds	r3, #1
 8005160:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005162:	6878      	ldr	r0, [r7, #4]
 8005164:	f001 f8ab 	bl	80062be <USB_GetMode>
 8005168:	4603      	mov	r3, r0
 800516a:	2b01      	cmp	r3, #1
 800516c:	d01e      	beq.n	80051ac <USB_SetCurrentMode+0x84>
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2b31      	cmp	r3, #49	; 0x31
 8005172:	d9f0      	bls.n	8005156 <USB_SetCurrentMode+0x2e>
 8005174:	e01a      	b.n	80051ac <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005176:	78fb      	ldrb	r3, [r7, #3]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d115      	bne.n	80051a8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	68db      	ldr	r3, [r3, #12]
 8005180:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005188:	2001      	movs	r0, #1
 800518a:	f7fb fecf 	bl	8000f2c <HAL_Delay>
      ms++;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	3301      	adds	r3, #1
 8005192:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005194:	6878      	ldr	r0, [r7, #4]
 8005196:	f001 f892 	bl	80062be <USB_GetMode>
 800519a:	4603      	mov	r3, r0
 800519c:	2b00      	cmp	r3, #0
 800519e:	d005      	beq.n	80051ac <USB_SetCurrentMode+0x84>
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	2b31      	cmp	r3, #49	; 0x31
 80051a4:	d9f0      	bls.n	8005188 <USB_SetCurrentMode+0x60>
 80051a6:	e001      	b.n	80051ac <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80051a8:	2301      	movs	r3, #1
 80051aa:	e005      	b.n	80051b8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	2b32      	cmp	r3, #50	; 0x32
 80051b0:	d101      	bne.n	80051b6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80051b2:	2301      	movs	r3, #1
 80051b4:	e000      	b.n	80051b8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80051b6:	2300      	movs	r3, #0
}
 80051b8:	4618      	mov	r0, r3
 80051ba:	3710      	adds	r7, #16
 80051bc:	46bd      	mov	sp, r7
 80051be:	bd80      	pop	{r7, pc}

080051c0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80051c0:	b084      	sub	sp, #16
 80051c2:	b580      	push	{r7, lr}
 80051c4:	b086      	sub	sp, #24
 80051c6:	af00      	add	r7, sp, #0
 80051c8:	6078      	str	r0, [r7, #4]
 80051ca:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80051ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80051d2:	2300      	movs	r3, #0
 80051d4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80051da:	2300      	movs	r3, #0
 80051dc:	613b      	str	r3, [r7, #16]
 80051de:	e009      	b.n	80051f4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80051e0:	687a      	ldr	r2, [r7, #4]
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	3340      	adds	r3, #64	; 0x40
 80051e6:	009b      	lsls	r3, r3, #2
 80051e8:	4413      	add	r3, r2
 80051ea:	2200      	movs	r2, #0
 80051ec:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80051ee:	693b      	ldr	r3, [r7, #16]
 80051f0:	3301      	adds	r3, #1
 80051f2:	613b      	str	r3, [r7, #16]
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	2b0e      	cmp	r3, #14
 80051f8:	d9f2      	bls.n	80051e0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80051fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d11c      	bne.n	800523a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	68fa      	ldr	r2, [r7, #12]
 800520a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800520e:	f043 0302 	orr.w	r3, r3, #2
 8005212:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005218:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	601a      	str	r2, [r3, #0]
 8005238:	e005      	b.n	8005246 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800523e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800524c:	461a      	mov	r2, r3
 800524e:	2300      	movs	r3, #0
 8005250:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005252:	2103      	movs	r1, #3
 8005254:	6878      	ldr	r0, [r7, #4]
 8005256:	f000 f959 	bl	800550c <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800525a:	2110      	movs	r1, #16
 800525c:	6878      	ldr	r0, [r7, #4]
 800525e:	f000 f8f1 	bl	8005444 <USB_FlushTxFifo>
 8005262:	4603      	mov	r3, r0
 8005264:	2b00      	cmp	r3, #0
 8005266:	d001      	beq.n	800526c <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 8005268:	2301      	movs	r3, #1
 800526a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800526c:	6878      	ldr	r0, [r7, #4]
 800526e:	f000 f91d 	bl	80054ac <USB_FlushRxFifo>
 8005272:	4603      	mov	r3, r0
 8005274:	2b00      	cmp	r3, #0
 8005276:	d001      	beq.n	800527c <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 8005278:	2301      	movs	r3, #1
 800527a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005282:	461a      	mov	r2, r3
 8005284:	2300      	movs	r3, #0
 8005286:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800528e:	461a      	mov	r2, r3
 8005290:	2300      	movs	r3, #0
 8005292:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800529a:	461a      	mov	r2, r3
 800529c:	2300      	movs	r3, #0
 800529e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80052a0:	2300      	movs	r3, #0
 80052a2:	613b      	str	r3, [r7, #16]
 80052a4:	e043      	b.n	800532e <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80052a6:	693b      	ldr	r3, [r7, #16]
 80052a8:	015a      	lsls	r2, r3, #5
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	4413      	add	r3, r2
 80052ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80052b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80052bc:	d118      	bne.n	80052f0 <USB_DevInit+0x130>
    {
      if (i == 0U)
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d10a      	bne.n	80052da <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80052c4:	693b      	ldr	r3, [r7, #16]
 80052c6:	015a      	lsls	r2, r3, #5
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	4413      	add	r3, r2
 80052cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052d0:	461a      	mov	r2, r3
 80052d2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80052d6:	6013      	str	r3, [r2, #0]
 80052d8:	e013      	b.n	8005302 <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80052da:	693b      	ldr	r3, [r7, #16]
 80052dc:	015a      	lsls	r2, r3, #5
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	4413      	add	r3, r2
 80052e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052e6:	461a      	mov	r2, r3
 80052e8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80052ec:	6013      	str	r3, [r2, #0]
 80052ee:	e008      	b.n	8005302 <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80052f0:	693b      	ldr	r3, [r7, #16]
 80052f2:	015a      	lsls	r2, r3, #5
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	4413      	add	r3, r2
 80052f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052fc:	461a      	mov	r2, r3
 80052fe:	2300      	movs	r3, #0
 8005300:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005302:	693b      	ldr	r3, [r7, #16]
 8005304:	015a      	lsls	r2, r3, #5
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	4413      	add	r3, r2
 800530a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800530e:	461a      	mov	r2, r3
 8005310:	2300      	movs	r3, #0
 8005312:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005314:	693b      	ldr	r3, [r7, #16]
 8005316:	015a      	lsls	r2, r3, #5
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	4413      	add	r3, r2
 800531c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005320:	461a      	mov	r2, r3
 8005322:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005326:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005328:	693b      	ldr	r3, [r7, #16]
 800532a:	3301      	adds	r3, #1
 800532c:	613b      	str	r3, [r7, #16]
 800532e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005330:	693a      	ldr	r2, [r7, #16]
 8005332:	429a      	cmp	r2, r3
 8005334:	d3b7      	bcc.n	80052a6 <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005336:	2300      	movs	r3, #0
 8005338:	613b      	str	r3, [r7, #16]
 800533a:	e043      	b.n	80053c4 <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800533c:	693b      	ldr	r3, [r7, #16]
 800533e:	015a      	lsls	r2, r3, #5
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	4413      	add	r3, r2
 8005344:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800534e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005352:	d118      	bne.n	8005386 <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 8005354:	693b      	ldr	r3, [r7, #16]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d10a      	bne.n	8005370 <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800535a:	693b      	ldr	r3, [r7, #16]
 800535c:	015a      	lsls	r2, r3, #5
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	4413      	add	r3, r2
 8005362:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005366:	461a      	mov	r2, r3
 8005368:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800536c:	6013      	str	r3, [r2, #0]
 800536e:	e013      	b.n	8005398 <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	015a      	lsls	r2, r3, #5
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	4413      	add	r3, r2
 8005378:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800537c:	461a      	mov	r2, r3
 800537e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005382:	6013      	str	r3, [r2, #0]
 8005384:	e008      	b.n	8005398 <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005386:	693b      	ldr	r3, [r7, #16]
 8005388:	015a      	lsls	r2, r3, #5
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	4413      	add	r3, r2
 800538e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005392:	461a      	mov	r2, r3
 8005394:	2300      	movs	r3, #0
 8005396:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005398:	693b      	ldr	r3, [r7, #16]
 800539a:	015a      	lsls	r2, r3, #5
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	4413      	add	r3, r2
 80053a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053a4:	461a      	mov	r2, r3
 80053a6:	2300      	movs	r3, #0
 80053a8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	015a      	lsls	r2, r3, #5
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	4413      	add	r3, r2
 80053b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053b6:	461a      	mov	r2, r3
 80053b8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80053bc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	3301      	adds	r3, #1
 80053c2:	613b      	str	r3, [r7, #16]
 80053c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c6:	693a      	ldr	r2, [r7, #16]
 80053c8:	429a      	cmp	r2, r3
 80053ca:	d3b7      	bcc.n	800533c <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053d2:	691b      	ldr	r3, [r3, #16]
 80053d4:	68fa      	ldr	r2, [r7, #12]
 80053d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80053da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80053de:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2200      	movs	r2, #0
 80053e4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80053ec:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	699b      	ldr	r3, [r3, #24]
 80053f2:	f043 0210 	orr.w	r2, r3, #16
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	699a      	ldr	r2, [r3, #24]
 80053fe:	4b10      	ldr	r3, [pc, #64]	; (8005440 <USB_DevInit+0x280>)
 8005400:	4313      	orrs	r3, r2
 8005402:	687a      	ldr	r2, [r7, #4]
 8005404:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005406:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005408:	2b00      	cmp	r3, #0
 800540a:	d005      	beq.n	8005418 <USB_DevInit+0x258>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	699b      	ldr	r3, [r3, #24]
 8005410:	f043 0208 	orr.w	r2, r3, #8
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005418:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800541a:	2b01      	cmp	r3, #1
 800541c:	d107      	bne.n	800542e <USB_DevInit+0x26e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	699b      	ldr	r3, [r3, #24]
 8005422:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005426:	f043 0304 	orr.w	r3, r3, #4
 800542a:	687a      	ldr	r2, [r7, #4]
 800542c:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800542e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005430:	4618      	mov	r0, r3
 8005432:	3718      	adds	r7, #24
 8005434:	46bd      	mov	sp, r7
 8005436:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800543a:	b004      	add	sp, #16
 800543c:	4770      	bx	lr
 800543e:	bf00      	nop
 8005440:	803c3800 	.word	0x803c3800

08005444 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005444:	b480      	push	{r7}
 8005446:	b085      	sub	sp, #20
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
 800544c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800544e:	2300      	movs	r3, #0
 8005450:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	3301      	adds	r3, #1
 8005456:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	4a13      	ldr	r2, [pc, #76]	; (80054a8 <USB_FlushTxFifo+0x64>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d901      	bls.n	8005464 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005460:	2303      	movs	r3, #3
 8005462:	e01b      	b.n	800549c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	691b      	ldr	r3, [r3, #16]
 8005468:	2b00      	cmp	r3, #0
 800546a:	daf2      	bge.n	8005452 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800546c:	2300      	movs	r3, #0
 800546e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	019b      	lsls	r3, r3, #6
 8005474:	f043 0220 	orr.w	r2, r3, #32
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	3301      	adds	r3, #1
 8005480:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	4a08      	ldr	r2, [pc, #32]	; (80054a8 <USB_FlushTxFifo+0x64>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d901      	bls.n	800548e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800548a:	2303      	movs	r3, #3
 800548c:	e006      	b.n	800549c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	691b      	ldr	r3, [r3, #16]
 8005492:	f003 0320 	and.w	r3, r3, #32
 8005496:	2b20      	cmp	r3, #32
 8005498:	d0f0      	beq.n	800547c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800549a:	2300      	movs	r3, #0
}
 800549c:	4618      	mov	r0, r3
 800549e:	3714      	adds	r7, #20
 80054a0:	46bd      	mov	sp, r7
 80054a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a6:	4770      	bx	lr
 80054a8:	00030d40 	.word	0x00030d40

080054ac <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80054ac:	b480      	push	{r7}
 80054ae:	b085      	sub	sp, #20
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80054b4:	2300      	movs	r3, #0
 80054b6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	3301      	adds	r3, #1
 80054bc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	4a11      	ldr	r2, [pc, #68]	; (8005508 <USB_FlushRxFifo+0x5c>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d901      	bls.n	80054ca <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80054c6:	2303      	movs	r3, #3
 80054c8:	e018      	b.n	80054fc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	691b      	ldr	r3, [r3, #16]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	daf2      	bge.n	80054b8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80054d2:	2300      	movs	r3, #0
 80054d4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2210      	movs	r2, #16
 80054da:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	3301      	adds	r3, #1
 80054e0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	4a08      	ldr	r2, [pc, #32]	; (8005508 <USB_FlushRxFifo+0x5c>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d901      	bls.n	80054ee <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80054ea:	2303      	movs	r3, #3
 80054ec:	e006      	b.n	80054fc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	691b      	ldr	r3, [r3, #16]
 80054f2:	f003 0310 	and.w	r3, r3, #16
 80054f6:	2b10      	cmp	r3, #16
 80054f8:	d0f0      	beq.n	80054dc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80054fa:	2300      	movs	r3, #0
}
 80054fc:	4618      	mov	r0, r3
 80054fe:	3714      	adds	r7, #20
 8005500:	46bd      	mov	sp, r7
 8005502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005506:	4770      	bx	lr
 8005508:	00030d40 	.word	0x00030d40

0800550c <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800550c:	b480      	push	{r7}
 800550e:	b085      	sub	sp, #20
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
 8005514:	460b      	mov	r3, r1
 8005516:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005522:	681a      	ldr	r2, [r3, #0]
 8005524:	78fb      	ldrb	r3, [r7, #3]
 8005526:	68f9      	ldr	r1, [r7, #12]
 8005528:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800552c:	4313      	orrs	r3, r2
 800552e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005530:	2300      	movs	r3, #0
}
 8005532:	4618      	mov	r0, r3
 8005534:	3714      	adds	r7, #20
 8005536:	46bd      	mov	sp, r7
 8005538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553c:	4770      	bx	lr

0800553e <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800553e:	b480      	push	{r7}
 8005540:	b087      	sub	sp, #28
 8005542:	af00      	add	r7, sp, #0
 8005544:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800554a:	693b      	ldr	r3, [r7, #16]
 800554c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005550:	689b      	ldr	r3, [r3, #8]
 8005552:	f003 0306 	and.w	r3, r3, #6
 8005556:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	2b02      	cmp	r3, #2
 800555c:	d002      	beq.n	8005564 <USB_GetDevSpeed+0x26>
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2b06      	cmp	r3, #6
 8005562:	d102      	bne.n	800556a <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005564:	2302      	movs	r3, #2
 8005566:	75fb      	strb	r3, [r7, #23]
 8005568:	e001      	b.n	800556e <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 800556a:	230f      	movs	r3, #15
 800556c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800556e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005570:	4618      	mov	r0, r3
 8005572:	371c      	adds	r7, #28
 8005574:	46bd      	mov	sp, r7
 8005576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557a:	4770      	bx	lr

0800557c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800557c:	b480      	push	{r7}
 800557e:	b085      	sub	sp, #20
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
 8005584:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	781b      	ldrb	r3, [r3, #0]
 800558e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	785b      	ldrb	r3, [r3, #1]
 8005594:	2b01      	cmp	r3, #1
 8005596:	d13a      	bne.n	800560e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800559e:	69da      	ldr	r2, [r3, #28]
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	781b      	ldrb	r3, [r3, #0]
 80055a4:	f003 030f 	and.w	r3, r3, #15
 80055a8:	2101      	movs	r1, #1
 80055aa:	fa01 f303 	lsl.w	r3, r1, r3
 80055ae:	b29b      	uxth	r3, r3
 80055b0:	68f9      	ldr	r1, [r7, #12]
 80055b2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80055b6:	4313      	orrs	r3, r2
 80055b8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	015a      	lsls	r2, r3, #5
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	4413      	add	r3, r2
 80055c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d155      	bne.n	800567c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	015a      	lsls	r2, r3, #5
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	4413      	add	r3, r2
 80055d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055dc:	681a      	ldr	r2, [r3, #0]
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	689b      	ldr	r3, [r3, #8]
 80055e2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	791b      	ldrb	r3, [r3, #4]
 80055ea:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80055ec:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	059b      	lsls	r3, r3, #22
 80055f2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80055f4:	4313      	orrs	r3, r2
 80055f6:	68ba      	ldr	r2, [r7, #8]
 80055f8:	0151      	lsls	r1, r2, #5
 80055fa:	68fa      	ldr	r2, [r7, #12]
 80055fc:	440a      	add	r2, r1
 80055fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005602:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005606:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800560a:	6013      	str	r3, [r2, #0]
 800560c:	e036      	b.n	800567c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005614:	69da      	ldr	r2, [r3, #28]
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	781b      	ldrb	r3, [r3, #0]
 800561a:	f003 030f 	and.w	r3, r3, #15
 800561e:	2101      	movs	r1, #1
 8005620:	fa01 f303 	lsl.w	r3, r1, r3
 8005624:	041b      	lsls	r3, r3, #16
 8005626:	68f9      	ldr	r1, [r7, #12]
 8005628:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800562c:	4313      	orrs	r3, r2
 800562e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	015a      	lsls	r2, r3, #5
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	4413      	add	r3, r2
 8005638:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005642:	2b00      	cmp	r3, #0
 8005644:	d11a      	bne.n	800567c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	015a      	lsls	r2, r3, #5
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	4413      	add	r3, r2
 800564e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005652:	681a      	ldr	r2, [r3, #0]
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	689b      	ldr	r3, [r3, #8]
 8005658:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	791b      	ldrb	r3, [r3, #4]
 8005660:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005662:	430b      	orrs	r3, r1
 8005664:	4313      	orrs	r3, r2
 8005666:	68ba      	ldr	r2, [r7, #8]
 8005668:	0151      	lsls	r1, r2, #5
 800566a:	68fa      	ldr	r2, [r7, #12]
 800566c:	440a      	add	r2, r1
 800566e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005672:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005676:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800567a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800567c:	2300      	movs	r3, #0
}
 800567e:	4618      	mov	r0, r3
 8005680:	3714      	adds	r7, #20
 8005682:	46bd      	mov	sp, r7
 8005684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005688:	4770      	bx	lr
	...

0800568c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800568c:	b480      	push	{r7}
 800568e:	b085      	sub	sp, #20
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
 8005694:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	781b      	ldrb	r3, [r3, #0]
 800569e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	785b      	ldrb	r3, [r3, #1]
 80056a4:	2b01      	cmp	r3, #1
 80056a6:	d161      	bne.n	800576c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	015a      	lsls	r2, r3, #5
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	4413      	add	r3, r2
 80056b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80056ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80056be:	d11f      	bne.n	8005700 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	015a      	lsls	r2, r3, #5
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	4413      	add	r3, r2
 80056c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	68ba      	ldr	r2, [r7, #8]
 80056d0:	0151      	lsls	r1, r2, #5
 80056d2:	68fa      	ldr	r2, [r7, #12]
 80056d4:	440a      	add	r2, r1
 80056d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056da:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80056de:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	015a      	lsls	r2, r3, #5
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	4413      	add	r3, r2
 80056e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	68ba      	ldr	r2, [r7, #8]
 80056f0:	0151      	lsls	r1, r2, #5
 80056f2:	68fa      	ldr	r2, [r7, #12]
 80056f4:	440a      	add	r2, r1
 80056f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056fa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80056fe:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005706:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	781b      	ldrb	r3, [r3, #0]
 800570c:	f003 030f 	and.w	r3, r3, #15
 8005710:	2101      	movs	r1, #1
 8005712:	fa01 f303 	lsl.w	r3, r1, r3
 8005716:	b29b      	uxth	r3, r3
 8005718:	43db      	mvns	r3, r3
 800571a:	68f9      	ldr	r1, [r7, #12]
 800571c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005720:	4013      	ands	r3, r2
 8005722:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800572a:	69da      	ldr	r2, [r3, #28]
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	781b      	ldrb	r3, [r3, #0]
 8005730:	f003 030f 	and.w	r3, r3, #15
 8005734:	2101      	movs	r1, #1
 8005736:	fa01 f303 	lsl.w	r3, r1, r3
 800573a:	b29b      	uxth	r3, r3
 800573c:	43db      	mvns	r3, r3
 800573e:	68f9      	ldr	r1, [r7, #12]
 8005740:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005744:	4013      	ands	r3, r2
 8005746:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	015a      	lsls	r2, r3, #5
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	4413      	add	r3, r2
 8005750:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005754:	681a      	ldr	r2, [r3, #0]
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	0159      	lsls	r1, r3, #5
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	440b      	add	r3, r1
 800575e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005762:	4619      	mov	r1, r3
 8005764:	4b35      	ldr	r3, [pc, #212]	; (800583c <USB_DeactivateEndpoint+0x1b0>)
 8005766:	4013      	ands	r3, r2
 8005768:	600b      	str	r3, [r1, #0]
 800576a:	e060      	b.n	800582e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	015a      	lsls	r2, r3, #5
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	4413      	add	r3, r2
 8005774:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800577e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005782:	d11f      	bne.n	80057c4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	015a      	lsls	r2, r3, #5
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	4413      	add	r3, r2
 800578c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	68ba      	ldr	r2, [r7, #8]
 8005794:	0151      	lsls	r1, r2, #5
 8005796:	68fa      	ldr	r2, [r7, #12]
 8005798:	440a      	add	r2, r1
 800579a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800579e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80057a2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	015a      	lsls	r2, r3, #5
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	4413      	add	r3, r2
 80057ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	68ba      	ldr	r2, [r7, #8]
 80057b4:	0151      	lsls	r1, r2, #5
 80057b6:	68fa      	ldr	r2, [r7, #12]
 80057b8:	440a      	add	r2, r1
 80057ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057be:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80057c2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	781b      	ldrb	r3, [r3, #0]
 80057d0:	f003 030f 	and.w	r3, r3, #15
 80057d4:	2101      	movs	r1, #1
 80057d6:	fa01 f303 	lsl.w	r3, r1, r3
 80057da:	041b      	lsls	r3, r3, #16
 80057dc:	43db      	mvns	r3, r3
 80057de:	68f9      	ldr	r1, [r7, #12]
 80057e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80057e4:	4013      	ands	r3, r2
 80057e6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057ee:	69da      	ldr	r2, [r3, #28]
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	781b      	ldrb	r3, [r3, #0]
 80057f4:	f003 030f 	and.w	r3, r3, #15
 80057f8:	2101      	movs	r1, #1
 80057fa:	fa01 f303 	lsl.w	r3, r1, r3
 80057fe:	041b      	lsls	r3, r3, #16
 8005800:	43db      	mvns	r3, r3
 8005802:	68f9      	ldr	r1, [r7, #12]
 8005804:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005808:	4013      	ands	r3, r2
 800580a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	015a      	lsls	r2, r3, #5
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	4413      	add	r3, r2
 8005814:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005818:	681a      	ldr	r2, [r3, #0]
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	0159      	lsls	r1, r3, #5
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	440b      	add	r3, r1
 8005822:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005826:	4619      	mov	r1, r3
 8005828:	4b05      	ldr	r3, [pc, #20]	; (8005840 <USB_DeactivateEndpoint+0x1b4>)
 800582a:	4013      	ands	r3, r2
 800582c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800582e:	2300      	movs	r3, #0
}
 8005830:	4618      	mov	r0, r3
 8005832:	3714      	adds	r7, #20
 8005834:	46bd      	mov	sp, r7
 8005836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583a:	4770      	bx	lr
 800583c:	ec337800 	.word	0xec337800
 8005840:	eff37800 	.word	0xeff37800

08005844 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b086      	sub	sp, #24
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
 800584c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	781b      	ldrb	r3, [r3, #0]
 8005856:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	785b      	ldrb	r3, [r3, #1]
 800585c:	2b01      	cmp	r3, #1
 800585e:	f040 8128 	bne.w	8005ab2 <USB_EPStartXfer+0x26e>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	691b      	ldr	r3, [r3, #16]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d132      	bne.n	80058d0 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800586a:	693b      	ldr	r3, [r7, #16]
 800586c:	015a      	lsls	r2, r3, #5
 800586e:	697b      	ldr	r3, [r7, #20]
 8005870:	4413      	add	r3, r2
 8005872:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005876:	691b      	ldr	r3, [r3, #16]
 8005878:	693a      	ldr	r2, [r7, #16]
 800587a:	0151      	lsls	r1, r2, #5
 800587c:	697a      	ldr	r2, [r7, #20]
 800587e:	440a      	add	r2, r1
 8005880:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005884:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005888:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800588c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	015a      	lsls	r2, r3, #5
 8005892:	697b      	ldr	r3, [r7, #20]
 8005894:	4413      	add	r3, r2
 8005896:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800589a:	691b      	ldr	r3, [r3, #16]
 800589c:	693a      	ldr	r2, [r7, #16]
 800589e:	0151      	lsls	r1, r2, #5
 80058a0:	697a      	ldr	r2, [r7, #20]
 80058a2:	440a      	add	r2, r1
 80058a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058a8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80058ac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80058ae:	693b      	ldr	r3, [r7, #16]
 80058b0:	015a      	lsls	r2, r3, #5
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	4413      	add	r3, r2
 80058b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058ba:	691b      	ldr	r3, [r3, #16]
 80058bc:	693a      	ldr	r2, [r7, #16]
 80058be:	0151      	lsls	r1, r2, #5
 80058c0:	697a      	ldr	r2, [r7, #20]
 80058c2:	440a      	add	r2, r1
 80058c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058c8:	0cdb      	lsrs	r3, r3, #19
 80058ca:	04db      	lsls	r3, r3, #19
 80058cc:	6113      	str	r3, [r2, #16]
 80058ce:	e092      	b.n	80059f6 <USB_EPStartXfer+0x1b2>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	015a      	lsls	r2, r3, #5
 80058d4:	697b      	ldr	r3, [r7, #20]
 80058d6:	4413      	add	r3, r2
 80058d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058dc:	691b      	ldr	r3, [r3, #16]
 80058de:	693a      	ldr	r2, [r7, #16]
 80058e0:	0151      	lsls	r1, r2, #5
 80058e2:	697a      	ldr	r2, [r7, #20]
 80058e4:	440a      	add	r2, r1
 80058e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058ea:	0cdb      	lsrs	r3, r3, #19
 80058ec:	04db      	lsls	r3, r3, #19
 80058ee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80058f0:	693b      	ldr	r3, [r7, #16]
 80058f2:	015a      	lsls	r2, r3, #5
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	4413      	add	r3, r2
 80058f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058fc:	691b      	ldr	r3, [r3, #16]
 80058fe:	693a      	ldr	r2, [r7, #16]
 8005900:	0151      	lsls	r1, r2, #5
 8005902:	697a      	ldr	r2, [r7, #20]
 8005904:	440a      	add	r2, r1
 8005906:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800590a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800590e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005912:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8005914:	693b      	ldr	r3, [r7, #16]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d11a      	bne.n	8005950 <USB_EPStartXfer+0x10c>
      {
        if (ep->xfer_len > ep->maxpacket)
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	691a      	ldr	r2, [r3, #16]
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	689b      	ldr	r3, [r3, #8]
 8005922:	429a      	cmp	r2, r3
 8005924:	d903      	bls.n	800592e <USB_EPStartXfer+0xea>
        {
          ep->xfer_len = ep->maxpacket;
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	689a      	ldr	r2, [r3, #8]
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	015a      	lsls	r2, r3, #5
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	4413      	add	r3, r2
 8005936:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800593a:	691b      	ldr	r3, [r3, #16]
 800593c:	693a      	ldr	r2, [r7, #16]
 800593e:	0151      	lsls	r1, r2, #5
 8005940:	697a      	ldr	r2, [r7, #20]
 8005942:	440a      	add	r2, r1
 8005944:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005948:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800594c:	6113      	str	r3, [r2, #16]
 800594e:	e01b      	b.n	8005988 <USB_EPStartXfer+0x144>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005950:	693b      	ldr	r3, [r7, #16]
 8005952:	015a      	lsls	r2, r3, #5
 8005954:	697b      	ldr	r3, [r7, #20]
 8005956:	4413      	add	r3, r2
 8005958:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800595c:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	6919      	ldr	r1, [r3, #16]
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	689b      	ldr	r3, [r3, #8]
 8005966:	440b      	add	r3, r1
 8005968:	1e59      	subs	r1, r3, #1
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	689b      	ldr	r3, [r3, #8]
 800596e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005972:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005974:	4b8d      	ldr	r3, [pc, #564]	; (8005bac <USB_EPStartXfer+0x368>)
 8005976:	400b      	ands	r3, r1
 8005978:	6939      	ldr	r1, [r7, #16]
 800597a:	0148      	lsls	r0, r1, #5
 800597c:	6979      	ldr	r1, [r7, #20]
 800597e:	4401      	add	r1, r0
 8005980:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005984:	4313      	orrs	r3, r2
 8005986:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005988:	693b      	ldr	r3, [r7, #16]
 800598a:	015a      	lsls	r2, r3, #5
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	4413      	add	r3, r2
 8005990:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005994:	691a      	ldr	r2, [r3, #16]
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	691b      	ldr	r3, [r3, #16]
 800599a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800599e:	6939      	ldr	r1, [r7, #16]
 80059a0:	0148      	lsls	r0, r1, #5
 80059a2:	6979      	ldr	r1, [r7, #20]
 80059a4:	4401      	add	r1, r0
 80059a6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80059aa:	4313      	orrs	r3, r2
 80059ac:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	791b      	ldrb	r3, [r3, #4]
 80059b2:	2b01      	cmp	r3, #1
 80059b4:	d11f      	bne.n	80059f6 <USB_EPStartXfer+0x1b2>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80059b6:	693b      	ldr	r3, [r7, #16]
 80059b8:	015a      	lsls	r2, r3, #5
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	4413      	add	r3, r2
 80059be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059c2:	691b      	ldr	r3, [r3, #16]
 80059c4:	693a      	ldr	r2, [r7, #16]
 80059c6:	0151      	lsls	r1, r2, #5
 80059c8:	697a      	ldr	r2, [r7, #20]
 80059ca:	440a      	add	r2, r1
 80059cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059d0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80059d4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	015a      	lsls	r2, r3, #5
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	4413      	add	r3, r2
 80059de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059e2:	691b      	ldr	r3, [r3, #16]
 80059e4:	693a      	ldr	r2, [r7, #16]
 80059e6:	0151      	lsls	r1, r2, #5
 80059e8:	697a      	ldr	r2, [r7, #20]
 80059ea:	440a      	add	r2, r1
 80059ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059f0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80059f4:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	015a      	lsls	r2, r3, #5
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	4413      	add	r3, r2
 80059fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	693a      	ldr	r2, [r7, #16]
 8005a06:	0151      	lsls	r1, r2, #5
 8005a08:	697a      	ldr	r2, [r7, #20]
 8005a0a:	440a      	add	r2, r1
 8005a0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a10:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005a14:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	791b      	ldrb	r3, [r3, #4]
 8005a1a:	2b01      	cmp	r3, #1
 8005a1c:	d015      	beq.n	8005a4a <USB_EPStartXfer+0x206>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	691b      	ldr	r3, [r3, #16]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	f000 8139 	beq.w	8005c9a <USB_EPStartXfer+0x456>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	781b      	ldrb	r3, [r3, #0]
 8005a34:	f003 030f 	and.w	r3, r3, #15
 8005a38:	2101      	movs	r1, #1
 8005a3a:	fa01 f303 	lsl.w	r3, r1, r3
 8005a3e:	6979      	ldr	r1, [r7, #20]
 8005a40:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a44:	4313      	orrs	r3, r2
 8005a46:	634b      	str	r3, [r1, #52]	; 0x34
 8005a48:	e127      	b.n	8005c9a <USB_EPStartXfer+0x456>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005a4a:	697b      	ldr	r3, [r7, #20]
 8005a4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a50:	689b      	ldr	r3, [r3, #8]
 8005a52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d110      	bne.n	8005a7c <USB_EPStartXfer+0x238>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005a5a:	693b      	ldr	r3, [r7, #16]
 8005a5c:	015a      	lsls	r2, r3, #5
 8005a5e:	697b      	ldr	r3, [r7, #20]
 8005a60:	4413      	add	r3, r2
 8005a62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	693a      	ldr	r2, [r7, #16]
 8005a6a:	0151      	lsls	r1, r2, #5
 8005a6c:	697a      	ldr	r2, [r7, #20]
 8005a6e:	440a      	add	r2, r1
 8005a70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a74:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005a78:	6013      	str	r3, [r2, #0]
 8005a7a:	e00f      	b.n	8005a9c <USB_EPStartXfer+0x258>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005a7c:	693b      	ldr	r3, [r7, #16]
 8005a7e:	015a      	lsls	r2, r3, #5
 8005a80:	697b      	ldr	r3, [r7, #20]
 8005a82:	4413      	add	r3, r2
 8005a84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	693a      	ldr	r2, [r7, #16]
 8005a8c:	0151      	lsls	r1, r2, #5
 8005a8e:	697a      	ldr	r2, [r7, #20]
 8005a90:	440a      	add	r2, r1
 8005a92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a9a:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	68d9      	ldr	r1, [r3, #12]
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	781a      	ldrb	r2, [r3, #0]
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	691b      	ldr	r3, [r3, #16]
 8005aa8:	b29b      	uxth	r3, r3
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f000 f9a6 	bl	8005dfc <USB_WritePacket>
 8005ab0:	e0f3      	b.n	8005c9a <USB_EPStartXfer+0x456>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	015a      	lsls	r2, r3, #5
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	4413      	add	r3, r2
 8005aba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005abe:	691b      	ldr	r3, [r3, #16]
 8005ac0:	693a      	ldr	r2, [r7, #16]
 8005ac2:	0151      	lsls	r1, r2, #5
 8005ac4:	697a      	ldr	r2, [r7, #20]
 8005ac6:	440a      	add	r2, r1
 8005ac8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005acc:	0cdb      	lsrs	r3, r3, #19
 8005ace:	04db      	lsls	r3, r3, #19
 8005ad0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005ad2:	693b      	ldr	r3, [r7, #16]
 8005ad4:	015a      	lsls	r2, r3, #5
 8005ad6:	697b      	ldr	r3, [r7, #20]
 8005ad8:	4413      	add	r3, r2
 8005ada:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ade:	691b      	ldr	r3, [r3, #16]
 8005ae0:	693a      	ldr	r2, [r7, #16]
 8005ae2:	0151      	lsls	r1, r2, #5
 8005ae4:	697a      	ldr	r2, [r7, #20]
 8005ae6:	440a      	add	r2, r1
 8005ae8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005aec:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005af0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005af4:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8005af6:	693b      	ldr	r3, [r7, #16]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d12f      	bne.n	8005b5c <USB_EPStartXfer+0x318>
    {
      if (ep->xfer_len > 0U)
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	691b      	ldr	r3, [r3, #16]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d003      	beq.n	8005b0c <USB_EPStartXfer+0x2c8>
      {
        ep->xfer_len = ep->maxpacket;
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	689a      	ldr	r2, [r3, #8]
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	689a      	ldr	r2, [r3, #8]
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005b14:	693b      	ldr	r3, [r7, #16]
 8005b16:	015a      	lsls	r2, r3, #5
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	4413      	add	r3, r2
 8005b1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b20:	691a      	ldr	r2, [r3, #16]
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	6a1b      	ldr	r3, [r3, #32]
 8005b26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b2a:	6939      	ldr	r1, [r7, #16]
 8005b2c:	0148      	lsls	r0, r1, #5
 8005b2e:	6979      	ldr	r1, [r7, #20]
 8005b30:	4401      	add	r1, r0
 8005b32:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005b36:	4313      	orrs	r3, r2
 8005b38:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005b3a:	693b      	ldr	r3, [r7, #16]
 8005b3c:	015a      	lsls	r2, r3, #5
 8005b3e:	697b      	ldr	r3, [r7, #20]
 8005b40:	4413      	add	r3, r2
 8005b42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b46:	691b      	ldr	r3, [r3, #16]
 8005b48:	693a      	ldr	r2, [r7, #16]
 8005b4a:	0151      	lsls	r1, r2, #5
 8005b4c:	697a      	ldr	r2, [r7, #20]
 8005b4e:	440a      	add	r2, r1
 8005b50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b54:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005b58:	6113      	str	r3, [r2, #16]
 8005b5a:	e061      	b.n	8005c20 <USB_EPStartXfer+0x3dc>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	691b      	ldr	r3, [r3, #16]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d125      	bne.n	8005bb0 <USB_EPStartXfer+0x36c>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005b64:	693b      	ldr	r3, [r7, #16]
 8005b66:	015a      	lsls	r2, r3, #5
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	4413      	add	r3, r2
 8005b6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b70:	691a      	ldr	r2, [r3, #16]
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	689b      	ldr	r3, [r3, #8]
 8005b76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b7a:	6939      	ldr	r1, [r7, #16]
 8005b7c:	0148      	lsls	r0, r1, #5
 8005b7e:	6979      	ldr	r1, [r7, #20]
 8005b80:	4401      	add	r1, r0
 8005b82:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005b86:	4313      	orrs	r3, r2
 8005b88:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005b8a:	693b      	ldr	r3, [r7, #16]
 8005b8c:	015a      	lsls	r2, r3, #5
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	4413      	add	r3, r2
 8005b92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b96:	691b      	ldr	r3, [r3, #16]
 8005b98:	693a      	ldr	r2, [r7, #16]
 8005b9a:	0151      	lsls	r1, r2, #5
 8005b9c:	697a      	ldr	r2, [r7, #20]
 8005b9e:	440a      	add	r2, r1
 8005ba0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ba4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005ba8:	6113      	str	r3, [r2, #16]
 8005baa:	e039      	b.n	8005c20 <USB_EPStartXfer+0x3dc>
 8005bac:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	691a      	ldr	r2, [r3, #16]
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	689b      	ldr	r3, [r3, #8]
 8005bb8:	4413      	add	r3, r2
 8005bba:	1e5a      	subs	r2, r3, #1
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	689b      	ldr	r3, [r3, #8]
 8005bc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bc4:	81fb      	strh	r3, [r7, #14]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	689b      	ldr	r3, [r3, #8]
 8005bca:	89fa      	ldrh	r2, [r7, #14]
 8005bcc:	fb03 f202 	mul.w	r2, r3, r2
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005bd4:	693b      	ldr	r3, [r7, #16]
 8005bd6:	015a      	lsls	r2, r3, #5
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	4413      	add	r3, r2
 8005bdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005be0:	691a      	ldr	r2, [r3, #16]
 8005be2:	89fb      	ldrh	r3, [r7, #14]
 8005be4:	04d9      	lsls	r1, r3, #19
 8005be6:	4b2f      	ldr	r3, [pc, #188]	; (8005ca4 <USB_EPStartXfer+0x460>)
 8005be8:	400b      	ands	r3, r1
 8005bea:	6939      	ldr	r1, [r7, #16]
 8005bec:	0148      	lsls	r0, r1, #5
 8005bee:	6979      	ldr	r1, [r7, #20]
 8005bf0:	4401      	add	r1, r0
 8005bf2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005bfa:	693b      	ldr	r3, [r7, #16]
 8005bfc:	015a      	lsls	r2, r3, #5
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	4413      	add	r3, r2
 8005c02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c06:	691a      	ldr	r2, [r3, #16]
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	6a1b      	ldr	r3, [r3, #32]
 8005c0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c10:	6939      	ldr	r1, [r7, #16]
 8005c12:	0148      	lsls	r0, r1, #5
 8005c14:	6979      	ldr	r1, [r7, #20]
 8005c16:	4401      	add	r1, r0
 8005c18:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005c1c:	4313      	orrs	r3, r2
 8005c1e:	610b      	str	r3, [r1, #16]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	791b      	ldrb	r3, [r3, #4]
 8005c24:	2b01      	cmp	r3, #1
 8005c26:	d128      	bne.n	8005c7a <USB_EPStartXfer+0x436>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c2e:	689b      	ldr	r3, [r3, #8]
 8005c30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d110      	bne.n	8005c5a <USB_EPStartXfer+0x416>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005c38:	693b      	ldr	r3, [r7, #16]
 8005c3a:	015a      	lsls	r2, r3, #5
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	4413      	add	r3, r2
 8005c40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	693a      	ldr	r2, [r7, #16]
 8005c48:	0151      	lsls	r1, r2, #5
 8005c4a:	697a      	ldr	r2, [r7, #20]
 8005c4c:	440a      	add	r2, r1
 8005c4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c52:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005c56:	6013      	str	r3, [r2, #0]
 8005c58:	e00f      	b.n	8005c7a <USB_EPStartXfer+0x436>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005c5a:	693b      	ldr	r3, [r7, #16]
 8005c5c:	015a      	lsls	r2, r3, #5
 8005c5e:	697b      	ldr	r3, [r7, #20]
 8005c60:	4413      	add	r3, r2
 8005c62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	693a      	ldr	r2, [r7, #16]
 8005c6a:	0151      	lsls	r1, r2, #5
 8005c6c:	697a      	ldr	r2, [r7, #20]
 8005c6e:	440a      	add	r2, r1
 8005c70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c78:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	015a      	lsls	r2, r3, #5
 8005c7e:	697b      	ldr	r3, [r7, #20]
 8005c80:	4413      	add	r3, r2
 8005c82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	693a      	ldr	r2, [r7, #16]
 8005c8a:	0151      	lsls	r1, r2, #5
 8005c8c:	697a      	ldr	r2, [r7, #20]
 8005c8e:	440a      	add	r2, r1
 8005c90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c94:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005c98:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005c9a:	2300      	movs	r3, #0
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	3718      	adds	r7, #24
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bd80      	pop	{r7, pc}
 8005ca4:	1ff80000 	.word	0x1ff80000

08005ca8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b087      	sub	sp, #28
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
 8005cb0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	785b      	ldrb	r3, [r3, #1]
 8005cc2:	2b01      	cmp	r3, #1
 8005cc4:	d14a      	bne.n	8005d5c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	781b      	ldrb	r3, [r3, #0]
 8005cca:	015a      	lsls	r2, r3, #5
 8005ccc:	693b      	ldr	r3, [r7, #16]
 8005cce:	4413      	add	r3, r2
 8005cd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005cda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005cde:	f040 8086 	bne.w	8005dee <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	781b      	ldrb	r3, [r3, #0]
 8005ce6:	015a      	lsls	r2, r3, #5
 8005ce8:	693b      	ldr	r3, [r7, #16]
 8005cea:	4413      	add	r3, r2
 8005cec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	683a      	ldr	r2, [r7, #0]
 8005cf4:	7812      	ldrb	r2, [r2, #0]
 8005cf6:	0151      	lsls	r1, r2, #5
 8005cf8:	693a      	ldr	r2, [r7, #16]
 8005cfa:	440a      	add	r2, r1
 8005cfc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d00:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005d04:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	781b      	ldrb	r3, [r3, #0]
 8005d0a:	015a      	lsls	r2, r3, #5
 8005d0c:	693b      	ldr	r3, [r7, #16]
 8005d0e:	4413      	add	r3, r2
 8005d10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	683a      	ldr	r2, [r7, #0]
 8005d18:	7812      	ldrb	r2, [r2, #0]
 8005d1a:	0151      	lsls	r1, r2, #5
 8005d1c:	693a      	ldr	r2, [r7, #16]
 8005d1e:	440a      	add	r2, r1
 8005d20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d24:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005d28:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	3301      	adds	r3, #1
 8005d2e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	f242 7210 	movw	r2, #10000	; 0x2710
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d902      	bls.n	8005d40 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	75fb      	strb	r3, [r7, #23]
          break;
 8005d3e:	e056      	b.n	8005dee <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	781b      	ldrb	r3, [r3, #0]
 8005d44:	015a      	lsls	r2, r3, #5
 8005d46:	693b      	ldr	r3, [r7, #16]
 8005d48:	4413      	add	r3, r2
 8005d4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d54:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d58:	d0e7      	beq.n	8005d2a <USB_EPStopXfer+0x82>
 8005d5a:	e048      	b.n	8005dee <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	781b      	ldrb	r3, [r3, #0]
 8005d60:	015a      	lsls	r2, r3, #5
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	4413      	add	r3, r2
 8005d66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d70:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d74:	d13b      	bne.n	8005dee <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	781b      	ldrb	r3, [r3, #0]
 8005d7a:	015a      	lsls	r2, r3, #5
 8005d7c:	693b      	ldr	r3, [r7, #16]
 8005d7e:	4413      	add	r3, r2
 8005d80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	683a      	ldr	r2, [r7, #0]
 8005d88:	7812      	ldrb	r2, [r2, #0]
 8005d8a:	0151      	lsls	r1, r2, #5
 8005d8c:	693a      	ldr	r2, [r7, #16]
 8005d8e:	440a      	add	r2, r1
 8005d90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d94:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005d98:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	781b      	ldrb	r3, [r3, #0]
 8005d9e:	015a      	lsls	r2, r3, #5
 8005da0:	693b      	ldr	r3, [r7, #16]
 8005da2:	4413      	add	r3, r2
 8005da4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	683a      	ldr	r2, [r7, #0]
 8005dac:	7812      	ldrb	r2, [r2, #0]
 8005dae:	0151      	lsls	r1, r2, #5
 8005db0:	693a      	ldr	r2, [r7, #16]
 8005db2:	440a      	add	r2, r1
 8005db4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005db8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005dbc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	3301      	adds	r3, #1
 8005dc2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	f242 7210 	movw	r2, #10000	; 0x2710
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d902      	bls.n	8005dd4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005dce:	2301      	movs	r3, #1
 8005dd0:	75fb      	strb	r3, [r7, #23]
          break;
 8005dd2:	e00c      	b.n	8005dee <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	781b      	ldrb	r3, [r3, #0]
 8005dd8:	015a      	lsls	r2, r3, #5
 8005dda:	693b      	ldr	r3, [r7, #16]
 8005ddc:	4413      	add	r3, r2
 8005dde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005de8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005dec:	d0e7      	beq.n	8005dbe <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005dee:	7dfb      	ldrb	r3, [r7, #23]
}
 8005df0:	4618      	mov	r0, r3
 8005df2:	371c      	adds	r7, #28
 8005df4:	46bd      	mov	sp, r7
 8005df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfa:	4770      	bx	lr

08005dfc <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b089      	sub	sp, #36	; 0x24
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	60f8      	str	r0, [r7, #12]
 8005e04:	60b9      	str	r1, [r7, #8]
 8005e06:	4611      	mov	r1, r2
 8005e08:	461a      	mov	r2, r3
 8005e0a:	460b      	mov	r3, r1
 8005e0c:	71fb      	strb	r3, [r7, #7]
 8005e0e:	4613      	mov	r3, r2
 8005e10:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8005e1a:	88bb      	ldrh	r3, [r7, #4]
 8005e1c:	3303      	adds	r3, #3
 8005e1e:	089b      	lsrs	r3, r3, #2
 8005e20:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8005e22:	2300      	movs	r3, #0
 8005e24:	61bb      	str	r3, [r7, #24]
 8005e26:	e018      	b.n	8005e5a <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005e28:	79fb      	ldrb	r3, [r7, #7]
 8005e2a:	031a      	lsls	r2, r3, #12
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	4413      	add	r3, r2
 8005e30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e34:	461a      	mov	r2, r3
 8005e36:	69fb      	ldr	r3, [r7, #28]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	6013      	str	r3, [r2, #0]
    pSrc++;
 8005e3c:	69fb      	ldr	r3, [r7, #28]
 8005e3e:	3301      	adds	r3, #1
 8005e40:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8005e42:	69fb      	ldr	r3, [r7, #28]
 8005e44:	3301      	adds	r3, #1
 8005e46:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8005e48:	69fb      	ldr	r3, [r7, #28]
 8005e4a:	3301      	adds	r3, #1
 8005e4c:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8005e4e:	69fb      	ldr	r3, [r7, #28]
 8005e50:	3301      	adds	r3, #1
 8005e52:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005e54:	69bb      	ldr	r3, [r7, #24]
 8005e56:	3301      	adds	r3, #1
 8005e58:	61bb      	str	r3, [r7, #24]
 8005e5a:	69ba      	ldr	r2, [r7, #24]
 8005e5c:	693b      	ldr	r3, [r7, #16]
 8005e5e:	429a      	cmp	r2, r3
 8005e60:	d3e2      	bcc.n	8005e28 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8005e62:	2300      	movs	r3, #0
}
 8005e64:	4618      	mov	r0, r3
 8005e66:	3724      	adds	r7, #36	; 0x24
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6e:	4770      	bx	lr

08005e70 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005e70:	b480      	push	{r7}
 8005e72:	b08b      	sub	sp, #44	; 0x2c
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	60f8      	str	r0, [r7, #12]
 8005e78:	60b9      	str	r1, [r7, #8]
 8005e7a:	4613      	mov	r3, r2
 8005e7c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005e86:	88fb      	ldrh	r3, [r7, #6]
 8005e88:	089b      	lsrs	r3, r3, #2
 8005e8a:	b29b      	uxth	r3, r3
 8005e8c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005e8e:	88fb      	ldrh	r3, [r7, #6]
 8005e90:	f003 0303 	and.w	r3, r3, #3
 8005e94:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005e96:	2300      	movs	r3, #0
 8005e98:	623b      	str	r3, [r7, #32]
 8005e9a:	e014      	b.n	8005ec6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005e9c:	69bb      	ldr	r3, [r7, #24]
 8005e9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ea2:	681a      	ldr	r2, [r3, #0]
 8005ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea6:	601a      	str	r2, [r3, #0]
    pDest++;
 8005ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eaa:	3301      	adds	r3, #1
 8005eac:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb0:	3301      	adds	r3, #1
 8005eb2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb6:	3301      	adds	r3, #1
 8005eb8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ebc:	3301      	adds	r3, #1
 8005ebe:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005ec0:	6a3b      	ldr	r3, [r7, #32]
 8005ec2:	3301      	adds	r3, #1
 8005ec4:	623b      	str	r3, [r7, #32]
 8005ec6:	6a3a      	ldr	r2, [r7, #32]
 8005ec8:	697b      	ldr	r3, [r7, #20]
 8005eca:	429a      	cmp	r2, r3
 8005ecc:	d3e6      	bcc.n	8005e9c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005ece:	8bfb      	ldrh	r3, [r7, #30]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d01e      	beq.n	8005f12 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005ed8:	69bb      	ldr	r3, [r7, #24]
 8005eda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ede:	461a      	mov	r2, r3
 8005ee0:	f107 0310 	add.w	r3, r7, #16
 8005ee4:	6812      	ldr	r2, [r2, #0]
 8005ee6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005ee8:	693a      	ldr	r2, [r7, #16]
 8005eea:	6a3b      	ldr	r3, [r7, #32]
 8005eec:	b2db      	uxtb	r3, r3
 8005eee:	00db      	lsls	r3, r3, #3
 8005ef0:	fa22 f303 	lsr.w	r3, r2, r3
 8005ef4:	b2da      	uxtb	r2, r3
 8005ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef8:	701a      	strb	r2, [r3, #0]
      i++;
 8005efa:	6a3b      	ldr	r3, [r7, #32]
 8005efc:	3301      	adds	r3, #1
 8005efe:	623b      	str	r3, [r7, #32]
      pDest++;
 8005f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f02:	3301      	adds	r3, #1
 8005f04:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005f06:	8bfb      	ldrh	r3, [r7, #30]
 8005f08:	3b01      	subs	r3, #1
 8005f0a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005f0c:	8bfb      	ldrh	r3, [r7, #30]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d1ea      	bne.n	8005ee8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005f14:	4618      	mov	r0, r3
 8005f16:	372c      	adds	r7, #44	; 0x2c
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1e:	4770      	bx	lr

08005f20 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005f20:	b480      	push	{r7}
 8005f22:	b085      	sub	sp, #20
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
 8005f28:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	781b      	ldrb	r3, [r3, #0]
 8005f32:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	785b      	ldrb	r3, [r3, #1]
 8005f38:	2b01      	cmp	r3, #1
 8005f3a:	d12c      	bne.n	8005f96 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	015a      	lsls	r2, r3, #5
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	4413      	add	r3, r2
 8005f44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	db12      	blt.n	8005f74 <USB_EPSetStall+0x54>
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d00f      	beq.n	8005f74 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	015a      	lsls	r2, r3, #5
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	4413      	add	r3, r2
 8005f5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	68ba      	ldr	r2, [r7, #8]
 8005f64:	0151      	lsls	r1, r2, #5
 8005f66:	68fa      	ldr	r2, [r7, #12]
 8005f68:	440a      	add	r2, r1
 8005f6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f6e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005f72:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	015a      	lsls	r2, r3, #5
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	4413      	add	r3, r2
 8005f7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	68ba      	ldr	r2, [r7, #8]
 8005f84:	0151      	lsls	r1, r2, #5
 8005f86:	68fa      	ldr	r2, [r7, #12]
 8005f88:	440a      	add	r2, r1
 8005f8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f8e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005f92:	6013      	str	r3, [r2, #0]
 8005f94:	e02b      	b.n	8005fee <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	015a      	lsls	r2, r3, #5
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	4413      	add	r3, r2
 8005f9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	db12      	blt.n	8005fce <USB_EPSetStall+0xae>
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d00f      	beq.n	8005fce <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	015a      	lsls	r2, r3, #5
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	4413      	add	r3, r2
 8005fb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	68ba      	ldr	r2, [r7, #8]
 8005fbe:	0151      	lsls	r1, r2, #5
 8005fc0:	68fa      	ldr	r2, [r7, #12]
 8005fc2:	440a      	add	r2, r1
 8005fc4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fc8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005fcc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	015a      	lsls	r2, r3, #5
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	4413      	add	r3, r2
 8005fd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	68ba      	ldr	r2, [r7, #8]
 8005fde:	0151      	lsls	r1, r2, #5
 8005fe0:	68fa      	ldr	r2, [r7, #12]
 8005fe2:	440a      	add	r2, r1
 8005fe4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fe8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005fec:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005fee:	2300      	movs	r3, #0
}
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	3714      	adds	r7, #20
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffa:	4770      	bx	lr

08005ffc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	b085      	sub	sp, #20
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
 8006004:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	781b      	ldrb	r3, [r3, #0]
 800600e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	785b      	ldrb	r3, [r3, #1]
 8006014:	2b01      	cmp	r3, #1
 8006016:	d128      	bne.n	800606a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	015a      	lsls	r2, r3, #5
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	4413      	add	r3, r2
 8006020:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	68ba      	ldr	r2, [r7, #8]
 8006028:	0151      	lsls	r1, r2, #5
 800602a:	68fa      	ldr	r2, [r7, #12]
 800602c:	440a      	add	r2, r1
 800602e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006032:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006036:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	791b      	ldrb	r3, [r3, #4]
 800603c:	2b03      	cmp	r3, #3
 800603e:	d003      	beq.n	8006048 <USB_EPClearStall+0x4c>
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	791b      	ldrb	r3, [r3, #4]
 8006044:	2b02      	cmp	r3, #2
 8006046:	d138      	bne.n	80060ba <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	015a      	lsls	r2, r3, #5
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	4413      	add	r3, r2
 8006050:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	68ba      	ldr	r2, [r7, #8]
 8006058:	0151      	lsls	r1, r2, #5
 800605a:	68fa      	ldr	r2, [r7, #12]
 800605c:	440a      	add	r2, r1
 800605e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006062:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006066:	6013      	str	r3, [r2, #0]
 8006068:	e027      	b.n	80060ba <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	015a      	lsls	r2, r3, #5
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	4413      	add	r3, r2
 8006072:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	68ba      	ldr	r2, [r7, #8]
 800607a:	0151      	lsls	r1, r2, #5
 800607c:	68fa      	ldr	r2, [r7, #12]
 800607e:	440a      	add	r2, r1
 8006080:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006084:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006088:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	791b      	ldrb	r3, [r3, #4]
 800608e:	2b03      	cmp	r3, #3
 8006090:	d003      	beq.n	800609a <USB_EPClearStall+0x9e>
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	791b      	ldrb	r3, [r3, #4]
 8006096:	2b02      	cmp	r3, #2
 8006098:	d10f      	bne.n	80060ba <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	015a      	lsls	r2, r3, #5
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	4413      	add	r3, r2
 80060a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	68ba      	ldr	r2, [r7, #8]
 80060aa:	0151      	lsls	r1, r2, #5
 80060ac:	68fa      	ldr	r2, [r7, #12]
 80060ae:	440a      	add	r2, r1
 80060b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060b8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80060ba:	2300      	movs	r3, #0
}
 80060bc:	4618      	mov	r0, r3
 80060be:	3714      	adds	r7, #20
 80060c0:	46bd      	mov	sp, r7
 80060c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c6:	4770      	bx	lr

080060c8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80060c8:	b480      	push	{r7}
 80060ca:	b085      	sub	sp, #20
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
 80060d0:	460b      	mov	r3, r1
 80060d2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	68fa      	ldr	r2, [r7, #12]
 80060e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80060e6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80060ea:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060f2:	681a      	ldr	r2, [r3, #0]
 80060f4:	78fb      	ldrb	r3, [r7, #3]
 80060f6:	011b      	lsls	r3, r3, #4
 80060f8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80060fc:	68f9      	ldr	r1, [r7, #12]
 80060fe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006102:	4313      	orrs	r3, r2
 8006104:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006106:	2300      	movs	r3, #0
}
 8006108:	4618      	mov	r0, r3
 800610a:	3714      	adds	r7, #20
 800610c:	46bd      	mov	sp, r7
 800610e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006112:	4770      	bx	lr

08006114 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006114:	b480      	push	{r7}
 8006116:	b085      	sub	sp, #20
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	68fa      	ldr	r2, [r7, #12]
 800612a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800612e:	f023 0303 	bic.w	r3, r3, #3
 8006132:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800613a:	685b      	ldr	r3, [r3, #4]
 800613c:	68fa      	ldr	r2, [r7, #12]
 800613e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006142:	f023 0302 	bic.w	r3, r3, #2
 8006146:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006148:	2300      	movs	r3, #0
}
 800614a:	4618      	mov	r0, r3
 800614c:	3714      	adds	r7, #20
 800614e:	46bd      	mov	sp, r7
 8006150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006154:	4770      	bx	lr

08006156 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006156:	b480      	push	{r7}
 8006158:	b085      	sub	sp, #20
 800615a:	af00      	add	r7, sp, #0
 800615c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	68fa      	ldr	r2, [r7, #12]
 800616c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006170:	f023 0303 	bic.w	r3, r3, #3
 8006174:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800617c:	685b      	ldr	r3, [r3, #4]
 800617e:	68fa      	ldr	r2, [r7, #12]
 8006180:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006184:	f043 0302 	orr.w	r3, r3, #2
 8006188:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800618a:	2300      	movs	r3, #0
}
 800618c:	4618      	mov	r0, r3
 800618e:	3714      	adds	r7, #20
 8006190:	46bd      	mov	sp, r7
 8006192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006196:	4770      	bx	lr

08006198 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006198:	b480      	push	{r7}
 800619a:	b085      	sub	sp, #20
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	695b      	ldr	r3, [r3, #20]
 80061a4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	699b      	ldr	r3, [r3, #24]
 80061aa:	68fa      	ldr	r2, [r7, #12]
 80061ac:	4013      	ands	r3, r2
 80061ae:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80061b0:	68fb      	ldr	r3, [r7, #12]
}
 80061b2:	4618      	mov	r0, r3
 80061b4:	3714      	adds	r7, #20
 80061b6:	46bd      	mov	sp, r7
 80061b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061bc:	4770      	bx	lr

080061be <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80061be:	b480      	push	{r7}
 80061c0:	b085      	sub	sp, #20
 80061c2:	af00      	add	r7, sp, #0
 80061c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061d0:	699b      	ldr	r3, [r3, #24]
 80061d2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061da:	69db      	ldr	r3, [r3, #28]
 80061dc:	68ba      	ldr	r2, [r7, #8]
 80061de:	4013      	ands	r3, r2
 80061e0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	0c1b      	lsrs	r3, r3, #16
}
 80061e6:	4618      	mov	r0, r3
 80061e8:	3714      	adds	r7, #20
 80061ea:	46bd      	mov	sp, r7
 80061ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f0:	4770      	bx	lr

080061f2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80061f2:	b480      	push	{r7}
 80061f4:	b085      	sub	sp, #20
 80061f6:	af00      	add	r7, sp, #0
 80061f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006204:	699b      	ldr	r3, [r3, #24]
 8006206:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800620e:	69db      	ldr	r3, [r3, #28]
 8006210:	68ba      	ldr	r2, [r7, #8]
 8006212:	4013      	ands	r3, r2
 8006214:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	b29b      	uxth	r3, r3
}
 800621a:	4618      	mov	r0, r3
 800621c:	3714      	adds	r7, #20
 800621e:	46bd      	mov	sp, r7
 8006220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006224:	4770      	bx	lr

08006226 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006226:	b480      	push	{r7}
 8006228:	b085      	sub	sp, #20
 800622a:	af00      	add	r7, sp, #0
 800622c:	6078      	str	r0, [r7, #4]
 800622e:	460b      	mov	r3, r1
 8006230:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006236:	78fb      	ldrb	r3, [r7, #3]
 8006238:	015a      	lsls	r2, r3, #5
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	4413      	add	r3, r2
 800623e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006242:	689b      	ldr	r3, [r3, #8]
 8006244:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800624c:	695b      	ldr	r3, [r3, #20]
 800624e:	68ba      	ldr	r2, [r7, #8]
 8006250:	4013      	ands	r3, r2
 8006252:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006254:	68bb      	ldr	r3, [r7, #8]
}
 8006256:	4618      	mov	r0, r3
 8006258:	3714      	adds	r7, #20
 800625a:	46bd      	mov	sp, r7
 800625c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006260:	4770      	bx	lr

08006262 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006262:	b480      	push	{r7}
 8006264:	b087      	sub	sp, #28
 8006266:	af00      	add	r7, sp, #0
 8006268:	6078      	str	r0, [r7, #4]
 800626a:	460b      	mov	r3, r1
 800626c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006272:	697b      	ldr	r3, [r7, #20]
 8006274:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006278:	691b      	ldr	r3, [r3, #16]
 800627a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800627c:	697b      	ldr	r3, [r7, #20]
 800627e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006282:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006284:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006286:	78fb      	ldrb	r3, [r7, #3]
 8006288:	f003 030f 	and.w	r3, r3, #15
 800628c:	68fa      	ldr	r2, [r7, #12]
 800628e:	fa22 f303 	lsr.w	r3, r2, r3
 8006292:	01db      	lsls	r3, r3, #7
 8006294:	b2db      	uxtb	r3, r3
 8006296:	693a      	ldr	r2, [r7, #16]
 8006298:	4313      	orrs	r3, r2
 800629a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800629c:	78fb      	ldrb	r3, [r7, #3]
 800629e:	015a      	lsls	r2, r3, #5
 80062a0:	697b      	ldr	r3, [r7, #20]
 80062a2:	4413      	add	r3, r2
 80062a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062a8:	689b      	ldr	r3, [r3, #8]
 80062aa:	693a      	ldr	r2, [r7, #16]
 80062ac:	4013      	ands	r3, r2
 80062ae:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80062b0:	68bb      	ldr	r3, [r7, #8]
}
 80062b2:	4618      	mov	r0, r3
 80062b4:	371c      	adds	r7, #28
 80062b6:	46bd      	mov	sp, r7
 80062b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062bc:	4770      	bx	lr

080062be <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80062be:	b480      	push	{r7}
 80062c0:	b083      	sub	sp, #12
 80062c2:	af00      	add	r7, sp, #0
 80062c4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	695b      	ldr	r3, [r3, #20]
 80062ca:	f003 0301 	and.w	r3, r3, #1
}
 80062ce:	4618      	mov	r0, r3
 80062d0:	370c      	adds	r7, #12
 80062d2:	46bd      	mov	sp, r7
 80062d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d8:	4770      	bx	lr

080062da <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80062da:	b480      	push	{r7}
 80062dc:	b085      	sub	sp, #20
 80062de:	af00      	add	r7, sp, #0
 80062e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	68fa      	ldr	r2, [r7, #12]
 80062f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062f4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80062f8:	f023 0307 	bic.w	r3, r3, #7
 80062fc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006304:	685b      	ldr	r3, [r3, #4]
 8006306:	68fa      	ldr	r2, [r7, #12]
 8006308:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800630c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006310:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006312:	2300      	movs	r3, #0
}
 8006314:	4618      	mov	r0, r3
 8006316:	3714      	adds	r7, #20
 8006318:	46bd      	mov	sp, r7
 800631a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631e:	4770      	bx	lr

08006320 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 8006320:	b480      	push	{r7}
 8006322:	b085      	sub	sp, #20
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
 8006328:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	333c      	adds	r3, #60	; 0x3c
 8006332:	3304      	adds	r3, #4
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	4a1c      	ldr	r2, [pc, #112]	; (80063ac <USB_EP0_OutStart+0x8c>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d90a      	bls.n	8006356 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800634c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006350:	d101      	bne.n	8006356 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 8006352:	2300      	movs	r3, #0
 8006354:	e024      	b.n	80063a0 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800635c:	461a      	mov	r2, r3
 800635e:	2300      	movs	r3, #0
 8006360:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006368:	691b      	ldr	r3, [r3, #16]
 800636a:	68fa      	ldr	r2, [r7, #12]
 800636c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006370:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006374:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800637c:	691b      	ldr	r3, [r3, #16]
 800637e:	68fa      	ldr	r2, [r7, #12]
 8006380:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006384:	f043 0318 	orr.w	r3, r3, #24
 8006388:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006390:	691b      	ldr	r3, [r3, #16]
 8006392:	68fa      	ldr	r2, [r7, #12]
 8006394:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006398:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800639c:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 800639e:	2300      	movs	r3, #0
}
 80063a0:	4618      	mov	r0, r3
 80063a2:	3714      	adds	r7, #20
 80063a4:	46bd      	mov	sp, r7
 80063a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063aa:	4770      	bx	lr
 80063ac:	4f54300a 	.word	0x4f54300a

080063b0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80063b0:	b480      	push	{r7}
 80063b2:	b085      	sub	sp, #20
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80063b8:	2300      	movs	r3, #0
 80063ba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	3301      	adds	r3, #1
 80063c0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	4a13      	ldr	r2, [pc, #76]	; (8006414 <USB_CoreReset+0x64>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d901      	bls.n	80063ce <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80063ca:	2303      	movs	r3, #3
 80063cc:	e01b      	b.n	8006406 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	691b      	ldr	r3, [r3, #16]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	daf2      	bge.n	80063bc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80063d6:	2300      	movs	r3, #0
 80063d8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	691b      	ldr	r3, [r3, #16]
 80063de:	f043 0201 	orr.w	r2, r3, #1
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	3301      	adds	r3, #1
 80063ea:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	4a09      	ldr	r2, [pc, #36]	; (8006414 <USB_CoreReset+0x64>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d901      	bls.n	80063f8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80063f4:	2303      	movs	r3, #3
 80063f6:	e006      	b.n	8006406 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	691b      	ldr	r3, [r3, #16]
 80063fc:	f003 0301 	and.w	r3, r3, #1
 8006400:	2b01      	cmp	r3, #1
 8006402:	d0f0      	beq.n	80063e6 <USB_CoreReset+0x36>

  return HAL_OK;
 8006404:	2300      	movs	r3, #0
}
 8006406:	4618      	mov	r0, r3
 8006408:	3714      	adds	r7, #20
 800640a:	46bd      	mov	sp, r7
 800640c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006410:	4770      	bx	lr
 8006412:	bf00      	nop
 8006414:	00030d40 	.word	0x00030d40

08006418 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b084      	sub	sp, #16
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
 8006420:	460b      	mov	r3, r1
 8006422:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8006424:	2010      	movs	r0, #16
 8006426:	f005 f815 	bl	800b454 <USBD_static_malloc>
 800642a:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d109      	bne.n	8006446 <USBD_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	32b0      	adds	r2, #176	; 0xb0
 800643c:	2100      	movs	r1, #0
 800643e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006442:	2302      	movs	r3, #2
 8006444:	e048      	b.n	80064d8 <USBD_HID_Init+0xc0>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	32b0      	adds	r2, #176	; 0xb0
 8006450:	68f9      	ldr	r1, [r7, #12]
 8006452:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	32b0      	adds	r2, #176	; 0xb0
 8006460:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	7c1b      	ldrb	r3, [r3, #16]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d10d      	bne.n	800648e <USBD_HID_Init+0x76>
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 8006472:	4b1b      	ldr	r3, [pc, #108]	; (80064e0 <USBD_HID_Init+0xc8>)
 8006474:	781b      	ldrb	r3, [r3, #0]
 8006476:	f003 020f 	and.w	r2, r3, #15
 800647a:	6879      	ldr	r1, [r7, #4]
 800647c:	4613      	mov	r3, r2
 800647e:	009b      	lsls	r3, r3, #2
 8006480:	4413      	add	r3, r2
 8006482:	009b      	lsls	r3, r3, #2
 8006484:	440b      	add	r3, r1
 8006486:	3326      	adds	r3, #38	; 0x26
 8006488:	2207      	movs	r2, #7
 800648a:	801a      	strh	r2, [r3, #0]
 800648c:	e00c      	b.n	80064a8 <USBD_HID_Init+0x90>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 800648e:	4b14      	ldr	r3, [pc, #80]	; (80064e0 <USBD_HID_Init+0xc8>)
 8006490:	781b      	ldrb	r3, [r3, #0]
 8006492:	f003 020f 	and.w	r2, r3, #15
 8006496:	6879      	ldr	r1, [r7, #4]
 8006498:	4613      	mov	r3, r2
 800649a:	009b      	lsls	r3, r3, #2
 800649c:	4413      	add	r3, r2
 800649e:	009b      	lsls	r3, r3, #2
 80064a0:	440b      	add	r3, r1
 80064a2:	3326      	adds	r3, #38	; 0x26
 80064a4:	220a      	movs	r2, #10
 80064a6:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 80064a8:	4b0d      	ldr	r3, [pc, #52]	; (80064e0 <USBD_HID_Init+0xc8>)
 80064aa:	7819      	ldrb	r1, [r3, #0]
 80064ac:	2304      	movs	r3, #4
 80064ae:	2203      	movs	r2, #3
 80064b0:	6878      	ldr	r0, [r7, #4]
 80064b2:	f004 fdcf 	bl	800b054 <USBD_LL_OpenEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 80064b6:	4b0a      	ldr	r3, [pc, #40]	; (80064e0 <USBD_HID_Init+0xc8>)
 80064b8:	781b      	ldrb	r3, [r3, #0]
 80064ba:	f003 020f 	and.w	r2, r3, #15
 80064be:	6879      	ldr	r1, [r7, #4]
 80064c0:	4613      	mov	r3, r2
 80064c2:	009b      	lsls	r3, r3, #2
 80064c4:	4413      	add	r3, r2
 80064c6:	009b      	lsls	r3, r3, #2
 80064c8:	440b      	add	r3, r1
 80064ca:	3324      	adds	r3, #36	; 0x24
 80064cc:	2201      	movs	r2, #1
 80064ce:	801a      	strh	r2, [r3, #0]

  hhid->state = USBD_HID_IDLE;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	2200      	movs	r2, #0
 80064d4:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 80064d6:	2300      	movs	r3, #0
}
 80064d8:	4618      	mov	r0, r3
 80064da:	3710      	adds	r7, #16
 80064dc:	46bd      	mov	sp, r7
 80064de:	bd80      	pop	{r7, pc}
 80064e0:	200000ca 	.word	0x200000ca

080064e4 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b082      	sub	sp, #8
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
 80064ec:	460b      	mov	r3, r1
 80064ee:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 80064f0:	4b1f      	ldr	r3, [pc, #124]	; (8006570 <USBD_HID_DeInit+0x8c>)
 80064f2:	781b      	ldrb	r3, [r3, #0]
 80064f4:	4619      	mov	r1, r3
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	f004 fdea 	bl	800b0d0 <USBD_LL_CloseEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 80064fc:	4b1c      	ldr	r3, [pc, #112]	; (8006570 <USBD_HID_DeInit+0x8c>)
 80064fe:	781b      	ldrb	r3, [r3, #0]
 8006500:	f003 020f 	and.w	r2, r3, #15
 8006504:	6879      	ldr	r1, [r7, #4]
 8006506:	4613      	mov	r3, r2
 8006508:	009b      	lsls	r3, r3, #2
 800650a:	4413      	add	r3, r2
 800650c:	009b      	lsls	r3, r3, #2
 800650e:	440b      	add	r3, r1
 8006510:	3324      	adds	r3, #36	; 0x24
 8006512:	2200      	movs	r2, #0
 8006514:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 8006516:	4b16      	ldr	r3, [pc, #88]	; (8006570 <USBD_HID_DeInit+0x8c>)
 8006518:	781b      	ldrb	r3, [r3, #0]
 800651a:	f003 020f 	and.w	r2, r3, #15
 800651e:	6879      	ldr	r1, [r7, #4]
 8006520:	4613      	mov	r3, r2
 8006522:	009b      	lsls	r3, r3, #2
 8006524:	4413      	add	r3, r2
 8006526:	009b      	lsls	r3, r3, #2
 8006528:	440b      	add	r3, r1
 800652a:	3326      	adds	r3, #38	; 0x26
 800652c:	2200      	movs	r2, #0
 800652e:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	32b0      	adds	r2, #176	; 0xb0
 800653a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d011      	beq.n	8006566 <USBD_HID_DeInit+0x82>
  {
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	32b0      	adds	r2, #176	; 0xb0
 800654c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006550:	4618      	mov	r0, r3
 8006552:	f004 ff8d 	bl	800b470 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	32b0      	adds	r2, #176	; 0xb0
 8006560:	2100      	movs	r1, #0
 8006562:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)USBD_OK;
 8006566:	2300      	movs	r3, #0
}
 8006568:	4618      	mov	r0, r3
 800656a:	3708      	adds	r7, #8
 800656c:	46bd      	mov	sp, r7
 800656e:	bd80      	pop	{r7, pc}
 8006570:	200000ca 	.word	0x200000ca

08006574 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b086      	sub	sp, #24
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
 800657c:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	32b0      	adds	r2, #176	; 0xb0
 8006588:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800658c:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800658e:	2300      	movs	r3, #0
 8006590:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8006592:	2300      	movs	r3, #0
 8006594:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d101      	bne.n	80065a0 <USBD_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 800659c:	2303      	movs	r3, #3
 800659e:	e0e8      	b.n	8006772 <USBD_HID_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	781b      	ldrb	r3, [r3, #0]
 80065a4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d046      	beq.n	800663a <USBD_HID_Setup+0xc6>
 80065ac:	2b20      	cmp	r3, #32
 80065ae:	f040 80d8 	bne.w	8006762 <USBD_HID_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	785b      	ldrb	r3, [r3, #1]
 80065b6:	3b02      	subs	r3, #2
 80065b8:	2b09      	cmp	r3, #9
 80065ba:	d836      	bhi.n	800662a <USBD_HID_Setup+0xb6>
 80065bc:	a201      	add	r2, pc, #4	; (adr r2, 80065c4 <USBD_HID_Setup+0x50>)
 80065be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065c2:	bf00      	nop
 80065c4:	0800661b 	.word	0x0800661b
 80065c8:	080065fb 	.word	0x080065fb
 80065cc:	0800662b 	.word	0x0800662b
 80065d0:	0800662b 	.word	0x0800662b
 80065d4:	0800662b 	.word	0x0800662b
 80065d8:	0800662b 	.word	0x0800662b
 80065dc:	0800662b 	.word	0x0800662b
 80065e0:	0800662b 	.word	0x0800662b
 80065e4:	08006609 	.word	0x08006609
 80065e8:	080065ed 	.word	0x080065ed
      {
        case USBD_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	885b      	ldrh	r3, [r3, #2]
 80065f0:	b2db      	uxtb	r3, r3
 80065f2:	461a      	mov	r2, r3
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	601a      	str	r2, [r3, #0]
          break;
 80065f8:	e01e      	b.n	8006638 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	2201      	movs	r2, #1
 80065fe:	4619      	mov	r1, r3
 8006600:	6878      	ldr	r0, [r7, #4]
 8006602:	f001 fbd5 	bl	8007db0 <USBD_CtlSendData>
          break;
 8006606:	e017      	b.n	8006638 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	885b      	ldrh	r3, [r3, #2]
 800660c:	0a1b      	lsrs	r3, r3, #8
 800660e:	b29b      	uxth	r3, r3
 8006610:	b2db      	uxtb	r3, r3
 8006612:	461a      	mov	r2, r3
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	605a      	str	r2, [r3, #4]
          break;
 8006618:	e00e      	b.n	8006638 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	3304      	adds	r3, #4
 800661e:	2201      	movs	r2, #1
 8006620:	4619      	mov	r1, r3
 8006622:	6878      	ldr	r0, [r7, #4]
 8006624:	f001 fbc4 	bl	8007db0 <USBD_CtlSendData>
          break;
 8006628:	e006      	b.n	8006638 <USBD_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800662a:	6839      	ldr	r1, [r7, #0]
 800662c:	6878      	ldr	r0, [r7, #4]
 800662e:	f001 fb4e 	bl	8007cce <USBD_CtlError>
          ret = USBD_FAIL;
 8006632:	2303      	movs	r3, #3
 8006634:	75fb      	strb	r3, [r7, #23]
          break;
 8006636:	bf00      	nop
      }
      break;
 8006638:	e09a      	b.n	8006770 <USBD_HID_Setup+0x1fc>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	785b      	ldrb	r3, [r3, #1]
 800663e:	2b0b      	cmp	r3, #11
 8006640:	f200 8086 	bhi.w	8006750 <USBD_HID_Setup+0x1dc>
 8006644:	a201      	add	r2, pc, #4	; (adr r2, 800664c <USBD_HID_Setup+0xd8>)
 8006646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800664a:	bf00      	nop
 800664c:	0800667d 	.word	0x0800667d
 8006650:	0800675f 	.word	0x0800675f
 8006654:	08006751 	.word	0x08006751
 8006658:	08006751 	.word	0x08006751
 800665c:	08006751 	.word	0x08006751
 8006660:	08006751 	.word	0x08006751
 8006664:	080066a7 	.word	0x080066a7
 8006668:	08006751 	.word	0x08006751
 800666c:	08006751 	.word	0x08006751
 8006670:	08006751 	.word	0x08006751
 8006674:	080066ff 	.word	0x080066ff
 8006678:	08006729 	.word	0x08006729
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006682:	b2db      	uxtb	r3, r3
 8006684:	2b03      	cmp	r3, #3
 8006686:	d107      	bne.n	8006698 <USBD_HID_Setup+0x124>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006688:	f107 030a 	add.w	r3, r7, #10
 800668c:	2202      	movs	r2, #2
 800668e:	4619      	mov	r1, r3
 8006690:	6878      	ldr	r0, [r7, #4]
 8006692:	f001 fb8d 	bl	8007db0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006696:	e063      	b.n	8006760 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8006698:	6839      	ldr	r1, [r7, #0]
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	f001 fb17 	bl	8007cce <USBD_CtlError>
            ret = USBD_FAIL;
 80066a0:	2303      	movs	r3, #3
 80066a2:	75fb      	strb	r3, [r7, #23]
          break;
 80066a4:	e05c      	b.n	8006760 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	885b      	ldrh	r3, [r3, #2]
 80066aa:	0a1b      	lsrs	r3, r3, #8
 80066ac:	b29b      	uxth	r3, r3
 80066ae:	2b22      	cmp	r3, #34	; 0x22
 80066b0:	d108      	bne.n	80066c4 <USBD_HID_Setup+0x150>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	88db      	ldrh	r3, [r3, #6]
 80066b6:	2b4a      	cmp	r3, #74	; 0x4a
 80066b8:	bf28      	it	cs
 80066ba:	234a      	movcs	r3, #74	; 0x4a
 80066bc:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 80066be:	4b2f      	ldr	r3, [pc, #188]	; (800677c <USBD_HID_Setup+0x208>)
 80066c0:	613b      	str	r3, [r7, #16]
 80066c2:	e015      	b.n	80066f0 <USBD_HID_Setup+0x17c>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	885b      	ldrh	r3, [r3, #2]
 80066c8:	0a1b      	lsrs	r3, r3, #8
 80066ca:	b29b      	uxth	r3, r3
 80066cc:	2b21      	cmp	r3, #33	; 0x21
 80066ce:	d108      	bne.n	80066e2 <USBD_HID_Setup+0x16e>
          {
            pbuf = USBD_HID_Desc;
 80066d0:	4b2b      	ldr	r3, [pc, #172]	; (8006780 <USBD_HID_Setup+0x20c>)
 80066d2:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	88db      	ldrh	r3, [r3, #6]
 80066d8:	2b09      	cmp	r3, #9
 80066da:	bf28      	it	cs
 80066dc:	2309      	movcs	r3, #9
 80066de:	82bb      	strh	r3, [r7, #20]
 80066e0:	e006      	b.n	80066f0 <USBD_HID_Setup+0x17c>
          }
          else
          {
            USBD_CtlError(pdev, req);
 80066e2:	6839      	ldr	r1, [r7, #0]
 80066e4:	6878      	ldr	r0, [r7, #4]
 80066e6:	f001 faf2 	bl	8007cce <USBD_CtlError>
            ret = USBD_FAIL;
 80066ea:	2303      	movs	r3, #3
 80066ec:	75fb      	strb	r3, [r7, #23]
            break;
 80066ee:	e037      	b.n	8006760 <USBD_HID_Setup+0x1ec>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 80066f0:	8abb      	ldrh	r3, [r7, #20]
 80066f2:	461a      	mov	r2, r3
 80066f4:	6939      	ldr	r1, [r7, #16]
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	f001 fb5a 	bl	8007db0 <USBD_CtlSendData>
          break;
 80066fc:	e030      	b.n	8006760 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006704:	b2db      	uxtb	r3, r3
 8006706:	2b03      	cmp	r3, #3
 8006708:	d107      	bne.n	800671a <USBD_HID_Setup+0x1a6>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	3308      	adds	r3, #8
 800670e:	2201      	movs	r2, #1
 8006710:	4619      	mov	r1, r3
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	f001 fb4c 	bl	8007db0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006718:	e022      	b.n	8006760 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 800671a:	6839      	ldr	r1, [r7, #0]
 800671c:	6878      	ldr	r0, [r7, #4]
 800671e:	f001 fad6 	bl	8007cce <USBD_CtlError>
            ret = USBD_FAIL;
 8006722:	2303      	movs	r3, #3
 8006724:	75fb      	strb	r3, [r7, #23]
          break;
 8006726:	e01b      	b.n	8006760 <USBD_HID_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800672e:	b2db      	uxtb	r3, r3
 8006730:	2b03      	cmp	r3, #3
 8006732:	d106      	bne.n	8006742 <USBD_HID_Setup+0x1ce>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	885b      	ldrh	r3, [r3, #2]
 8006738:	b2db      	uxtb	r3, r3
 800673a:	461a      	mov	r2, r3
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006740:	e00e      	b.n	8006760 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8006742:	6839      	ldr	r1, [r7, #0]
 8006744:	6878      	ldr	r0, [r7, #4]
 8006746:	f001 fac2 	bl	8007cce <USBD_CtlError>
            ret = USBD_FAIL;
 800674a:	2303      	movs	r3, #3
 800674c:	75fb      	strb	r3, [r7, #23]
          break;
 800674e:	e007      	b.n	8006760 <USBD_HID_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006750:	6839      	ldr	r1, [r7, #0]
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	f001 fabb 	bl	8007cce <USBD_CtlError>
          ret = USBD_FAIL;
 8006758:	2303      	movs	r3, #3
 800675a:	75fb      	strb	r3, [r7, #23]
          break;
 800675c:	e000      	b.n	8006760 <USBD_HID_Setup+0x1ec>
          break;
 800675e:	bf00      	nop
      }
      break;
 8006760:	e006      	b.n	8006770 <USBD_HID_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 8006762:	6839      	ldr	r1, [r7, #0]
 8006764:	6878      	ldr	r0, [r7, #4]
 8006766:	f001 fab2 	bl	8007cce <USBD_CtlError>
      ret = USBD_FAIL;
 800676a:	2303      	movs	r3, #3
 800676c:	75fb      	strb	r3, [r7, #23]
      break;
 800676e:	bf00      	nop
  }

  return (uint8_t)ret;
 8006770:	7dfb      	ldrb	r3, [r7, #23]
}
 8006772:	4618      	mov	r0, r3
 8006774:	3718      	adds	r7, #24
 8006776:	46bd      	mov	sp, r7
 8006778:	bd80      	pop	{r7, pc}
 800677a:	bf00      	nop
 800677c:	20000080 	.word	0x20000080
 8006780:	20000068 	.word	0x20000068

08006784 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b084      	sub	sp, #16
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 800678c:	2181      	movs	r1, #129	; 0x81
 800678e:	4809      	ldr	r0, [pc, #36]	; (80067b4 <USBD_HID_GetFSCfgDesc+0x30>)
 8006790:	f000 fc3b 	bl	800700a <USBD_GetEpDesc>
 8006794:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d002      	beq.n	80067a2 <USBD_HID_GetFSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	220a      	movs	r2, #10
 80067a0:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2222      	movs	r2, #34	; 0x22
 80067a6:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 80067a8:	4b02      	ldr	r3, [pc, #8]	; (80067b4 <USBD_HID_GetFSCfgDesc+0x30>)
}
 80067aa:	4618      	mov	r0, r3
 80067ac:	3710      	adds	r7, #16
 80067ae:	46bd      	mov	sp, r7
 80067b0:	bd80      	pop	{r7, pc}
 80067b2:	bf00      	nop
 80067b4:	20000044 	.word	0x20000044

080067b8 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b084      	sub	sp, #16
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 80067c0:	2181      	movs	r1, #129	; 0x81
 80067c2:	4809      	ldr	r0, [pc, #36]	; (80067e8 <USBD_HID_GetHSCfgDesc+0x30>)
 80067c4:	f000 fc21 	bl	800700a <USBD_GetEpDesc>
 80067c8:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d002      	beq.n	80067d6 <USBD_HID_GetHSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_HS_BINTERVAL;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	2207      	movs	r2, #7
 80067d4:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2222      	movs	r2, #34	; 0x22
 80067da:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 80067dc:	4b02      	ldr	r3, [pc, #8]	; (80067e8 <USBD_HID_GetHSCfgDesc+0x30>)
}
 80067de:	4618      	mov	r0, r3
 80067e0:	3710      	adds	r7, #16
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bd80      	pop	{r7, pc}
 80067e6:	bf00      	nop
 80067e8:	20000044 	.word	0x20000044

080067ec <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b084      	sub	sp, #16
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 80067f4:	2181      	movs	r1, #129	; 0x81
 80067f6:	4809      	ldr	r0, [pc, #36]	; (800681c <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
 80067f8:	f000 fc07 	bl	800700a <USBD_GetEpDesc>
 80067fc:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d002      	beq.n	800680a <USBD_HID_GetOtherSpeedCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	220a      	movs	r2, #10
 8006808:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2222      	movs	r2, #34	; 0x22
 800680e:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8006810:	4b02      	ldr	r3, [pc, #8]	; (800681c <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
}
 8006812:	4618      	mov	r0, r3
 8006814:	3710      	adds	r7, #16
 8006816:	46bd      	mov	sp, r7
 8006818:	bd80      	pop	{r7, pc}
 800681a:	bf00      	nop
 800681c:	20000044 	.word	0x20000044

08006820 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006820:	b480      	push	{r7}
 8006822:	b083      	sub	sp, #12
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
 8006828:	460b      	mov	r3, r1
 800682a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = USBD_HID_IDLE;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	32b0      	adds	r2, #176	; 0xb0
 8006836:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800683a:	2200      	movs	r2, #0
 800683c:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 800683e:	2300      	movs	r3, #0
}
 8006840:	4618      	mov	r0, r3
 8006842:	370c      	adds	r7, #12
 8006844:	46bd      	mov	sp, r7
 8006846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684a:	4770      	bx	lr

0800684c <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 800684c:	b480      	push	{r7}
 800684e:	b083      	sub	sp, #12
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	220a      	movs	r2, #10
 8006858:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 800685a:	4b03      	ldr	r3, [pc, #12]	; (8006868 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 800685c:	4618      	mov	r0, r3
 800685e:	370c      	adds	r7, #12
 8006860:	46bd      	mov	sp, r7
 8006862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006866:	4770      	bx	lr
 8006868:	20000074 	.word	0x20000074

0800686c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b086      	sub	sp, #24
 8006870:	af00      	add	r7, sp, #0
 8006872:	60f8      	str	r0, [r7, #12]
 8006874:	60b9      	str	r1, [r7, #8]
 8006876:	4613      	mov	r3, r2
 8006878:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d101      	bne.n	8006884 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006880:	2303      	movs	r3, #3
 8006882:	e01f      	b.n	80068c4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	2200      	movs	r2, #0
 8006888:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	2200      	movs	r2, #0
 8006890:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	2200      	movs	r2, #0
 8006898:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d003      	beq.n	80068aa <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	68ba      	ldr	r2, [r7, #8]
 80068a6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	2201      	movs	r2, #1
 80068ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	79fa      	ldrb	r2, [r7, #7]
 80068b6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80068b8:	68f8      	ldr	r0, [r7, #12]
 80068ba:	f004 fb4d 	bl	800af58 <USBD_LL_Init>
 80068be:	4603      	mov	r3, r0
 80068c0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80068c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80068c4:	4618      	mov	r0, r3
 80068c6:	3718      	adds	r7, #24
 80068c8:	46bd      	mov	sp, r7
 80068ca:	bd80      	pop	{r7, pc}

080068cc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b084      	sub	sp, #16
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
 80068d4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80068d6:	2300      	movs	r3, #0
 80068d8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d101      	bne.n	80068e4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80068e0:	2303      	movs	r3, #3
 80068e2:	e025      	b.n	8006930 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	683a      	ldr	r2, [r7, #0]
 80068e8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	32ae      	adds	r2, #174	; 0xae
 80068f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d00f      	beq.n	8006920 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	32ae      	adds	r2, #174	; 0xae
 800690a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800690e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006910:	f107 020e 	add.w	r2, r7, #14
 8006914:	4610      	mov	r0, r2
 8006916:	4798      	blx	r3
 8006918:	4602      	mov	r2, r0
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8006926:	1c5a      	adds	r2, r3, #1
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800692e:	2300      	movs	r3, #0
}
 8006930:	4618      	mov	r0, r3
 8006932:	3710      	adds	r7, #16
 8006934:	46bd      	mov	sp, r7
 8006936:	bd80      	pop	{r7, pc}

08006938 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b082      	sub	sp, #8
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006940:	6878      	ldr	r0, [r7, #4]
 8006942:	f004 fb55 	bl	800aff0 <USBD_LL_Start>
 8006946:	4603      	mov	r3, r0
}
 8006948:	4618      	mov	r0, r3
 800694a:	3708      	adds	r7, #8
 800694c:	46bd      	mov	sp, r7
 800694e:	bd80      	pop	{r7, pc}

08006950 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006950:	b480      	push	{r7}
 8006952:	b083      	sub	sp, #12
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006958:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800695a:	4618      	mov	r0, r3
 800695c:	370c      	adds	r7, #12
 800695e:	46bd      	mov	sp, r7
 8006960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006964:	4770      	bx	lr

08006966 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006966:	b580      	push	{r7, lr}
 8006968:	b084      	sub	sp, #16
 800696a:	af00      	add	r7, sp, #0
 800696c:	6078      	str	r0, [r7, #4]
 800696e:	460b      	mov	r3, r1
 8006970:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006972:	2300      	movs	r3, #0
 8006974:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800697c:	2b00      	cmp	r3, #0
 800697e:	d009      	beq.n	8006994 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	78fa      	ldrb	r2, [r7, #3]
 800698a:	4611      	mov	r1, r2
 800698c:	6878      	ldr	r0, [r7, #4]
 800698e:	4798      	blx	r3
 8006990:	4603      	mov	r3, r0
 8006992:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006994:	7bfb      	ldrb	r3, [r7, #15]
}
 8006996:	4618      	mov	r0, r3
 8006998:	3710      	adds	r7, #16
 800699a:	46bd      	mov	sp, r7
 800699c:	bd80      	pop	{r7, pc}

0800699e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800699e:	b580      	push	{r7, lr}
 80069a0:	b084      	sub	sp, #16
 80069a2:	af00      	add	r7, sp, #0
 80069a4:	6078      	str	r0, [r7, #4]
 80069a6:	460b      	mov	r3, r1
 80069a8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80069aa:	2300      	movs	r3, #0
 80069ac:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069b4:	685b      	ldr	r3, [r3, #4]
 80069b6:	78fa      	ldrb	r2, [r7, #3]
 80069b8:	4611      	mov	r1, r2
 80069ba:	6878      	ldr	r0, [r7, #4]
 80069bc:	4798      	blx	r3
 80069be:	4603      	mov	r3, r0
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d001      	beq.n	80069c8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80069c4:	2303      	movs	r3, #3
 80069c6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80069c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80069ca:	4618      	mov	r0, r3
 80069cc:	3710      	adds	r7, #16
 80069ce:	46bd      	mov	sp, r7
 80069d0:	bd80      	pop	{r7, pc}

080069d2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80069d2:	b580      	push	{r7, lr}
 80069d4:	b084      	sub	sp, #16
 80069d6:	af00      	add	r7, sp, #0
 80069d8:	6078      	str	r0, [r7, #4]
 80069da:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80069e2:	6839      	ldr	r1, [r7, #0]
 80069e4:	4618      	mov	r0, r3
 80069e6:	f001 f938 	bl	8007c5a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2201      	movs	r2, #1
 80069ee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80069f8:	461a      	mov	r2, r3
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006a06:	f003 031f 	and.w	r3, r3, #31
 8006a0a:	2b02      	cmp	r3, #2
 8006a0c:	d01a      	beq.n	8006a44 <USBD_LL_SetupStage+0x72>
 8006a0e:	2b02      	cmp	r3, #2
 8006a10:	d822      	bhi.n	8006a58 <USBD_LL_SetupStage+0x86>
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d002      	beq.n	8006a1c <USBD_LL_SetupStage+0x4a>
 8006a16:	2b01      	cmp	r3, #1
 8006a18:	d00a      	beq.n	8006a30 <USBD_LL_SetupStage+0x5e>
 8006a1a:	e01d      	b.n	8006a58 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006a22:	4619      	mov	r1, r3
 8006a24:	6878      	ldr	r0, [r7, #4]
 8006a26:	f000 fb65 	bl	80070f4 <USBD_StdDevReq>
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	73fb      	strb	r3, [r7, #15]
      break;
 8006a2e:	e020      	b.n	8006a72 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006a36:	4619      	mov	r1, r3
 8006a38:	6878      	ldr	r0, [r7, #4]
 8006a3a:	f000 fbcd 	bl	80071d8 <USBD_StdItfReq>
 8006a3e:	4603      	mov	r3, r0
 8006a40:	73fb      	strb	r3, [r7, #15]
      break;
 8006a42:	e016      	b.n	8006a72 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006a4a:	4619      	mov	r1, r3
 8006a4c:	6878      	ldr	r0, [r7, #4]
 8006a4e:	f000 fc2f 	bl	80072b0 <USBD_StdEPReq>
 8006a52:	4603      	mov	r3, r0
 8006a54:	73fb      	strb	r3, [r7, #15]
      break;
 8006a56:	e00c      	b.n	8006a72 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006a5e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006a62:	b2db      	uxtb	r3, r3
 8006a64:	4619      	mov	r1, r3
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f004 fb68 	bl	800b13c <USBD_LL_StallEP>
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	73fb      	strb	r3, [r7, #15]
      break;
 8006a70:	bf00      	nop
  }

  return ret;
 8006a72:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a74:	4618      	mov	r0, r3
 8006a76:	3710      	adds	r7, #16
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	bd80      	pop	{r7, pc}

08006a7c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b086      	sub	sp, #24
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	60f8      	str	r0, [r7, #12]
 8006a84:	460b      	mov	r3, r1
 8006a86:	607a      	str	r2, [r7, #4]
 8006a88:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006a8e:	7afb      	ldrb	r3, [r7, #11]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d16e      	bne.n	8006b72 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006a9a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006aa2:	2b03      	cmp	r3, #3
 8006aa4:	f040 8098 	bne.w	8006bd8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006aa8:	693b      	ldr	r3, [r7, #16]
 8006aaa:	689a      	ldr	r2, [r3, #8]
 8006aac:	693b      	ldr	r3, [r7, #16]
 8006aae:	68db      	ldr	r3, [r3, #12]
 8006ab0:	429a      	cmp	r2, r3
 8006ab2:	d913      	bls.n	8006adc <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006ab4:	693b      	ldr	r3, [r7, #16]
 8006ab6:	689a      	ldr	r2, [r3, #8]
 8006ab8:	693b      	ldr	r3, [r7, #16]
 8006aba:	68db      	ldr	r3, [r3, #12]
 8006abc:	1ad2      	subs	r2, r2, r3
 8006abe:	693b      	ldr	r3, [r7, #16]
 8006ac0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006ac2:	693b      	ldr	r3, [r7, #16]
 8006ac4:	68da      	ldr	r2, [r3, #12]
 8006ac6:	693b      	ldr	r3, [r7, #16]
 8006ac8:	689b      	ldr	r3, [r3, #8]
 8006aca:	4293      	cmp	r3, r2
 8006acc:	bf28      	it	cs
 8006ace:	4613      	movcs	r3, r2
 8006ad0:	461a      	mov	r2, r3
 8006ad2:	6879      	ldr	r1, [r7, #4]
 8006ad4:	68f8      	ldr	r0, [r7, #12]
 8006ad6:	f001 f997 	bl	8007e08 <USBD_CtlContinueRx>
 8006ada:	e07d      	b.n	8006bd8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006ae2:	f003 031f 	and.w	r3, r3, #31
 8006ae6:	2b02      	cmp	r3, #2
 8006ae8:	d014      	beq.n	8006b14 <USBD_LL_DataOutStage+0x98>
 8006aea:	2b02      	cmp	r3, #2
 8006aec:	d81d      	bhi.n	8006b2a <USBD_LL_DataOutStage+0xae>
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d002      	beq.n	8006af8 <USBD_LL_DataOutStage+0x7c>
 8006af2:	2b01      	cmp	r3, #1
 8006af4:	d003      	beq.n	8006afe <USBD_LL_DataOutStage+0x82>
 8006af6:	e018      	b.n	8006b2a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006af8:	2300      	movs	r3, #0
 8006afa:	75bb      	strb	r3, [r7, #22]
            break;
 8006afc:	e018      	b.n	8006b30 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006b04:	b2db      	uxtb	r3, r3
 8006b06:	4619      	mov	r1, r3
 8006b08:	68f8      	ldr	r0, [r7, #12]
 8006b0a:	f000 fa64 	bl	8006fd6 <USBD_CoreFindIF>
 8006b0e:	4603      	mov	r3, r0
 8006b10:	75bb      	strb	r3, [r7, #22]
            break;
 8006b12:	e00d      	b.n	8006b30 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006b1a:	b2db      	uxtb	r3, r3
 8006b1c:	4619      	mov	r1, r3
 8006b1e:	68f8      	ldr	r0, [r7, #12]
 8006b20:	f000 fa66 	bl	8006ff0 <USBD_CoreFindEP>
 8006b24:	4603      	mov	r3, r0
 8006b26:	75bb      	strb	r3, [r7, #22]
            break;
 8006b28:	e002      	b.n	8006b30 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	75bb      	strb	r3, [r7, #22]
            break;
 8006b2e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006b30:	7dbb      	ldrb	r3, [r7, #22]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d119      	bne.n	8006b6a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b3c:	b2db      	uxtb	r3, r3
 8006b3e:	2b03      	cmp	r3, #3
 8006b40:	d113      	bne.n	8006b6a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006b42:	7dba      	ldrb	r2, [r7, #22]
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	32ae      	adds	r2, #174	; 0xae
 8006b48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b4c:	691b      	ldr	r3, [r3, #16]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d00b      	beq.n	8006b6a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006b52:	7dba      	ldrb	r2, [r7, #22]
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006b5a:	7dba      	ldrb	r2, [r7, #22]
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	32ae      	adds	r2, #174	; 0xae
 8006b60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b64:	691b      	ldr	r3, [r3, #16]
 8006b66:	68f8      	ldr	r0, [r7, #12]
 8006b68:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006b6a:	68f8      	ldr	r0, [r7, #12]
 8006b6c:	f001 f95d 	bl	8007e2a <USBD_CtlSendStatus>
 8006b70:	e032      	b.n	8006bd8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006b72:	7afb      	ldrb	r3, [r7, #11]
 8006b74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b78:	b2db      	uxtb	r3, r3
 8006b7a:	4619      	mov	r1, r3
 8006b7c:	68f8      	ldr	r0, [r7, #12]
 8006b7e:	f000 fa37 	bl	8006ff0 <USBD_CoreFindEP>
 8006b82:	4603      	mov	r3, r0
 8006b84:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006b86:	7dbb      	ldrb	r3, [r7, #22]
 8006b88:	2bff      	cmp	r3, #255	; 0xff
 8006b8a:	d025      	beq.n	8006bd8 <USBD_LL_DataOutStage+0x15c>
 8006b8c:	7dbb      	ldrb	r3, [r7, #22]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d122      	bne.n	8006bd8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b98:	b2db      	uxtb	r3, r3
 8006b9a:	2b03      	cmp	r3, #3
 8006b9c:	d117      	bne.n	8006bce <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006b9e:	7dba      	ldrb	r2, [r7, #22]
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	32ae      	adds	r2, #174	; 0xae
 8006ba4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ba8:	699b      	ldr	r3, [r3, #24]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d00f      	beq.n	8006bce <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006bae:	7dba      	ldrb	r2, [r7, #22]
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006bb6:	7dba      	ldrb	r2, [r7, #22]
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	32ae      	adds	r2, #174	; 0xae
 8006bbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bc0:	699b      	ldr	r3, [r3, #24]
 8006bc2:	7afa      	ldrb	r2, [r7, #11]
 8006bc4:	4611      	mov	r1, r2
 8006bc6:	68f8      	ldr	r0, [r7, #12]
 8006bc8:	4798      	blx	r3
 8006bca:	4603      	mov	r3, r0
 8006bcc:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006bce:	7dfb      	ldrb	r3, [r7, #23]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d001      	beq.n	8006bd8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006bd4:	7dfb      	ldrb	r3, [r7, #23]
 8006bd6:	e000      	b.n	8006bda <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006bd8:	2300      	movs	r3, #0
}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	3718      	adds	r7, #24
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd80      	pop	{r7, pc}

08006be2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006be2:	b580      	push	{r7, lr}
 8006be4:	b086      	sub	sp, #24
 8006be6:	af00      	add	r7, sp, #0
 8006be8:	60f8      	str	r0, [r7, #12]
 8006bea:	460b      	mov	r3, r1
 8006bec:	607a      	str	r2, [r7, #4]
 8006bee:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006bf0:	7afb      	ldrb	r3, [r7, #11]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d16f      	bne.n	8006cd6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	3314      	adds	r3, #20
 8006bfa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006c02:	2b02      	cmp	r3, #2
 8006c04:	d15a      	bne.n	8006cbc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006c06:	693b      	ldr	r3, [r7, #16]
 8006c08:	689a      	ldr	r2, [r3, #8]
 8006c0a:	693b      	ldr	r3, [r7, #16]
 8006c0c:	68db      	ldr	r3, [r3, #12]
 8006c0e:	429a      	cmp	r2, r3
 8006c10:	d914      	bls.n	8006c3c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006c12:	693b      	ldr	r3, [r7, #16]
 8006c14:	689a      	ldr	r2, [r3, #8]
 8006c16:	693b      	ldr	r3, [r7, #16]
 8006c18:	68db      	ldr	r3, [r3, #12]
 8006c1a:	1ad2      	subs	r2, r2, r3
 8006c1c:	693b      	ldr	r3, [r7, #16]
 8006c1e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006c20:	693b      	ldr	r3, [r7, #16]
 8006c22:	689b      	ldr	r3, [r3, #8]
 8006c24:	461a      	mov	r2, r3
 8006c26:	6879      	ldr	r1, [r7, #4]
 8006c28:	68f8      	ldr	r0, [r7, #12]
 8006c2a:	f001 f8dc 	bl	8007de6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006c2e:	2300      	movs	r3, #0
 8006c30:	2200      	movs	r2, #0
 8006c32:	2100      	movs	r1, #0
 8006c34:	68f8      	ldr	r0, [r7, #12]
 8006c36:	f004 fb87 	bl	800b348 <USBD_LL_PrepareReceive>
 8006c3a:	e03f      	b.n	8006cbc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006c3c:	693b      	ldr	r3, [r7, #16]
 8006c3e:	68da      	ldr	r2, [r3, #12]
 8006c40:	693b      	ldr	r3, [r7, #16]
 8006c42:	689b      	ldr	r3, [r3, #8]
 8006c44:	429a      	cmp	r2, r3
 8006c46:	d11c      	bne.n	8006c82 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006c48:	693b      	ldr	r3, [r7, #16]
 8006c4a:	685a      	ldr	r2, [r3, #4]
 8006c4c:	693b      	ldr	r3, [r7, #16]
 8006c4e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006c50:	429a      	cmp	r2, r3
 8006c52:	d316      	bcc.n	8006c82 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006c54:	693b      	ldr	r3, [r7, #16]
 8006c56:	685a      	ldr	r2, [r3, #4]
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006c5e:	429a      	cmp	r2, r3
 8006c60:	d20f      	bcs.n	8006c82 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006c62:	2200      	movs	r2, #0
 8006c64:	2100      	movs	r1, #0
 8006c66:	68f8      	ldr	r0, [r7, #12]
 8006c68:	f001 f8bd 	bl	8007de6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006c74:	2300      	movs	r3, #0
 8006c76:	2200      	movs	r2, #0
 8006c78:	2100      	movs	r1, #0
 8006c7a:	68f8      	ldr	r0, [r7, #12]
 8006c7c:	f004 fb64 	bl	800b348 <USBD_LL_PrepareReceive>
 8006c80:	e01c      	b.n	8006cbc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c88:	b2db      	uxtb	r3, r3
 8006c8a:	2b03      	cmp	r3, #3
 8006c8c:	d10f      	bne.n	8006cae <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c94:	68db      	ldr	r3, [r3, #12]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d009      	beq.n	8006cae <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ca8:	68db      	ldr	r3, [r3, #12]
 8006caa:	68f8      	ldr	r0, [r7, #12]
 8006cac:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006cae:	2180      	movs	r1, #128	; 0x80
 8006cb0:	68f8      	ldr	r0, [r7, #12]
 8006cb2:	f004 fa43 	bl	800b13c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006cb6:	68f8      	ldr	r0, [r7, #12]
 8006cb8:	f001 f8ca 	bl	8007e50 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d03a      	beq.n	8006d3c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006cc6:	68f8      	ldr	r0, [r7, #12]
 8006cc8:	f7ff fe42 	bl	8006950 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	2200      	movs	r2, #0
 8006cd0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006cd4:	e032      	b.n	8006d3c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006cd6:	7afb      	ldrb	r3, [r7, #11]
 8006cd8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006cdc:	b2db      	uxtb	r3, r3
 8006cde:	4619      	mov	r1, r3
 8006ce0:	68f8      	ldr	r0, [r7, #12]
 8006ce2:	f000 f985 	bl	8006ff0 <USBD_CoreFindEP>
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006cea:	7dfb      	ldrb	r3, [r7, #23]
 8006cec:	2bff      	cmp	r3, #255	; 0xff
 8006cee:	d025      	beq.n	8006d3c <USBD_LL_DataInStage+0x15a>
 8006cf0:	7dfb      	ldrb	r3, [r7, #23]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d122      	bne.n	8006d3c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cfc:	b2db      	uxtb	r3, r3
 8006cfe:	2b03      	cmp	r3, #3
 8006d00:	d11c      	bne.n	8006d3c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006d02:	7dfa      	ldrb	r2, [r7, #23]
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	32ae      	adds	r2, #174	; 0xae
 8006d08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d0c:	695b      	ldr	r3, [r3, #20]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d014      	beq.n	8006d3c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006d12:	7dfa      	ldrb	r2, [r7, #23]
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006d1a:	7dfa      	ldrb	r2, [r7, #23]
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	32ae      	adds	r2, #174	; 0xae
 8006d20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d24:	695b      	ldr	r3, [r3, #20]
 8006d26:	7afa      	ldrb	r2, [r7, #11]
 8006d28:	4611      	mov	r1, r2
 8006d2a:	68f8      	ldr	r0, [r7, #12]
 8006d2c:	4798      	blx	r3
 8006d2e:	4603      	mov	r3, r0
 8006d30:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006d32:	7dbb      	ldrb	r3, [r7, #22]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d001      	beq.n	8006d3c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006d38:	7dbb      	ldrb	r3, [r7, #22]
 8006d3a:	e000      	b.n	8006d3e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006d3c:	2300      	movs	r3, #0
}
 8006d3e:	4618      	mov	r0, r3
 8006d40:	3718      	adds	r7, #24
 8006d42:	46bd      	mov	sp, r7
 8006d44:	bd80      	pop	{r7, pc}

08006d46 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006d46:	b580      	push	{r7, lr}
 8006d48:	b084      	sub	sp, #16
 8006d4a:	af00      	add	r7, sp, #0
 8006d4c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006d4e:	2300      	movs	r3, #0
 8006d50:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2201      	movs	r2, #1
 8006d56:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2200      	movs	r2, #0
 8006d66:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2200      	movs	r2, #0
 8006d74:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d014      	beq.n	8006dac <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d88:	685b      	ldr	r3, [r3, #4]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d00e      	beq.n	8006dac <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d94:	685b      	ldr	r3, [r3, #4]
 8006d96:	687a      	ldr	r2, [r7, #4]
 8006d98:	6852      	ldr	r2, [r2, #4]
 8006d9a:	b2d2      	uxtb	r2, r2
 8006d9c:	4611      	mov	r1, r2
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	4798      	blx	r3
 8006da2:	4603      	mov	r3, r0
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d001      	beq.n	8006dac <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006da8:	2303      	movs	r3, #3
 8006daa:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006dac:	2340      	movs	r3, #64	; 0x40
 8006dae:	2200      	movs	r2, #0
 8006db0:	2100      	movs	r1, #0
 8006db2:	6878      	ldr	r0, [r7, #4]
 8006db4:	f004 f94e 	bl	800b054 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2201      	movs	r2, #1
 8006dbc:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2240      	movs	r2, #64	; 0x40
 8006dc4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006dc8:	2340      	movs	r3, #64	; 0x40
 8006dca:	2200      	movs	r2, #0
 8006dcc:	2180      	movs	r1, #128	; 0x80
 8006dce:	6878      	ldr	r0, [r7, #4]
 8006dd0:	f004 f940 	bl	800b054 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2201      	movs	r2, #1
 8006dd8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2240      	movs	r2, #64	; 0x40
 8006dde:	621a      	str	r2, [r3, #32]

  return ret;
 8006de0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006de2:	4618      	mov	r0, r3
 8006de4:	3710      	adds	r7, #16
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bd80      	pop	{r7, pc}

08006dea <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006dea:	b480      	push	{r7}
 8006dec:	b083      	sub	sp, #12
 8006dee:	af00      	add	r7, sp, #0
 8006df0:	6078      	str	r0, [r7, #4]
 8006df2:	460b      	mov	r3, r1
 8006df4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	78fa      	ldrb	r2, [r7, #3]
 8006dfa:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006dfc:	2300      	movs	r3, #0
}
 8006dfe:	4618      	mov	r0, r3
 8006e00:	370c      	adds	r7, #12
 8006e02:	46bd      	mov	sp, r7
 8006e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e08:	4770      	bx	lr

08006e0a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006e0a:	b480      	push	{r7}
 8006e0c:	b083      	sub	sp, #12
 8006e0e:	af00      	add	r7, sp, #0
 8006e10:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e18:	b2db      	uxtb	r3, r3
 8006e1a:	2b04      	cmp	r3, #4
 8006e1c:	d006      	beq.n	8006e2c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e24:	b2da      	uxtb	r2, r3
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2204      	movs	r2, #4
 8006e30:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006e34:	2300      	movs	r3, #0
}
 8006e36:	4618      	mov	r0, r3
 8006e38:	370c      	adds	r7, #12
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e40:	4770      	bx	lr

08006e42 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006e42:	b480      	push	{r7}
 8006e44:	b083      	sub	sp, #12
 8006e46:	af00      	add	r7, sp, #0
 8006e48:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e50:	b2db      	uxtb	r3, r3
 8006e52:	2b04      	cmp	r3, #4
 8006e54:	d106      	bne.n	8006e64 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006e5c:	b2da      	uxtb	r2, r3
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006e64:	2300      	movs	r3, #0
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	370c      	adds	r7, #12
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e70:	4770      	bx	lr

08006e72 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006e72:	b580      	push	{r7, lr}
 8006e74:	b082      	sub	sp, #8
 8006e76:	af00      	add	r7, sp, #0
 8006e78:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e80:	b2db      	uxtb	r3, r3
 8006e82:	2b03      	cmp	r3, #3
 8006e84:	d110      	bne.n	8006ea8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d00b      	beq.n	8006ea8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e96:	69db      	ldr	r3, [r3, #28]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d005      	beq.n	8006ea8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ea2:	69db      	ldr	r3, [r3, #28]
 8006ea4:	6878      	ldr	r0, [r7, #4]
 8006ea6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006ea8:	2300      	movs	r3, #0
}
 8006eaa:	4618      	mov	r0, r3
 8006eac:	3708      	adds	r7, #8
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	bd80      	pop	{r7, pc}

08006eb2 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006eb2:	b580      	push	{r7, lr}
 8006eb4:	b082      	sub	sp, #8
 8006eb6:	af00      	add	r7, sp, #0
 8006eb8:	6078      	str	r0, [r7, #4]
 8006eba:	460b      	mov	r3, r1
 8006ebc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	32ae      	adds	r2, #174	; 0xae
 8006ec8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d101      	bne.n	8006ed4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006ed0:	2303      	movs	r3, #3
 8006ed2:	e01c      	b.n	8006f0e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006eda:	b2db      	uxtb	r3, r3
 8006edc:	2b03      	cmp	r3, #3
 8006ede:	d115      	bne.n	8006f0c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	32ae      	adds	r2, #174	; 0xae
 8006eea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006eee:	6a1b      	ldr	r3, [r3, #32]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d00b      	beq.n	8006f0c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	32ae      	adds	r2, #174	; 0xae
 8006efe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f02:	6a1b      	ldr	r3, [r3, #32]
 8006f04:	78fa      	ldrb	r2, [r7, #3]
 8006f06:	4611      	mov	r1, r2
 8006f08:	6878      	ldr	r0, [r7, #4]
 8006f0a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006f0c:	2300      	movs	r3, #0
}
 8006f0e:	4618      	mov	r0, r3
 8006f10:	3708      	adds	r7, #8
 8006f12:	46bd      	mov	sp, r7
 8006f14:	bd80      	pop	{r7, pc}

08006f16 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006f16:	b580      	push	{r7, lr}
 8006f18:	b082      	sub	sp, #8
 8006f1a:	af00      	add	r7, sp, #0
 8006f1c:	6078      	str	r0, [r7, #4]
 8006f1e:	460b      	mov	r3, r1
 8006f20:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	32ae      	adds	r2, #174	; 0xae
 8006f2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d101      	bne.n	8006f38 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006f34:	2303      	movs	r3, #3
 8006f36:	e01c      	b.n	8006f72 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f3e:	b2db      	uxtb	r3, r3
 8006f40:	2b03      	cmp	r3, #3
 8006f42:	d115      	bne.n	8006f70 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	32ae      	adds	r2, #174	; 0xae
 8006f4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d00b      	beq.n	8006f70 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	32ae      	adds	r2, #174	; 0xae
 8006f62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f68:	78fa      	ldrb	r2, [r7, #3]
 8006f6a:	4611      	mov	r1, r2
 8006f6c:	6878      	ldr	r0, [r7, #4]
 8006f6e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006f70:	2300      	movs	r3, #0
}
 8006f72:	4618      	mov	r0, r3
 8006f74:	3708      	adds	r7, #8
 8006f76:	46bd      	mov	sp, r7
 8006f78:	bd80      	pop	{r7, pc}

08006f7a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006f7a:	b480      	push	{r7}
 8006f7c:	b083      	sub	sp, #12
 8006f7e:	af00      	add	r7, sp, #0
 8006f80:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006f82:	2300      	movs	r3, #0
}
 8006f84:	4618      	mov	r0, r3
 8006f86:	370c      	adds	r7, #12
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8e:	4770      	bx	lr

08006f90 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b084      	sub	sp, #16
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006f98:	2300      	movs	r3, #0
 8006f9a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2201      	movs	r2, #1
 8006fa0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d00e      	beq.n	8006fcc <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fb4:	685b      	ldr	r3, [r3, #4]
 8006fb6:	687a      	ldr	r2, [r7, #4]
 8006fb8:	6852      	ldr	r2, [r2, #4]
 8006fba:	b2d2      	uxtb	r2, r2
 8006fbc:	4611      	mov	r1, r2
 8006fbe:	6878      	ldr	r0, [r7, #4]
 8006fc0:	4798      	blx	r3
 8006fc2:	4603      	mov	r3, r0
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d001      	beq.n	8006fcc <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006fc8:	2303      	movs	r3, #3
 8006fca:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006fcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fce:	4618      	mov	r0, r3
 8006fd0:	3710      	adds	r7, #16
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bd80      	pop	{r7, pc}

08006fd6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006fd6:	b480      	push	{r7}
 8006fd8:	b083      	sub	sp, #12
 8006fda:	af00      	add	r7, sp, #0
 8006fdc:	6078      	str	r0, [r7, #4]
 8006fde:	460b      	mov	r3, r1
 8006fe0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006fe2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	370c      	adds	r7, #12
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fee:	4770      	bx	lr

08006ff0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006ff0:	b480      	push	{r7}
 8006ff2:	b083      	sub	sp, #12
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
 8006ff8:	460b      	mov	r3, r1
 8006ffa:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006ffc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006ffe:	4618      	mov	r0, r3
 8007000:	370c      	adds	r7, #12
 8007002:	46bd      	mov	sp, r7
 8007004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007008:	4770      	bx	lr

0800700a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800700a:	b580      	push	{r7, lr}
 800700c:	b086      	sub	sp, #24
 800700e:	af00      	add	r7, sp, #0
 8007010:	6078      	str	r0, [r7, #4]
 8007012:	460b      	mov	r3, r1
 8007014:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800701e:	2300      	movs	r3, #0
 8007020:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	885b      	ldrh	r3, [r3, #2]
 8007026:	b29a      	uxth	r2, r3
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	781b      	ldrb	r3, [r3, #0]
 800702c:	b29b      	uxth	r3, r3
 800702e:	429a      	cmp	r2, r3
 8007030:	d920      	bls.n	8007074 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	781b      	ldrb	r3, [r3, #0]
 8007036:	b29b      	uxth	r3, r3
 8007038:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800703a:	e013      	b.n	8007064 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800703c:	f107 030a 	add.w	r3, r7, #10
 8007040:	4619      	mov	r1, r3
 8007042:	6978      	ldr	r0, [r7, #20]
 8007044:	f000 f81b 	bl	800707e <USBD_GetNextDesc>
 8007048:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800704a:	697b      	ldr	r3, [r7, #20]
 800704c:	785b      	ldrb	r3, [r3, #1]
 800704e:	2b05      	cmp	r3, #5
 8007050:	d108      	bne.n	8007064 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007052:	697b      	ldr	r3, [r7, #20]
 8007054:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007056:	693b      	ldr	r3, [r7, #16]
 8007058:	789b      	ldrb	r3, [r3, #2]
 800705a:	78fa      	ldrb	r2, [r7, #3]
 800705c:	429a      	cmp	r2, r3
 800705e:	d008      	beq.n	8007072 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007060:	2300      	movs	r3, #0
 8007062:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	885b      	ldrh	r3, [r3, #2]
 8007068:	b29a      	uxth	r2, r3
 800706a:	897b      	ldrh	r3, [r7, #10]
 800706c:	429a      	cmp	r2, r3
 800706e:	d8e5      	bhi.n	800703c <USBD_GetEpDesc+0x32>
 8007070:	e000      	b.n	8007074 <USBD_GetEpDesc+0x6a>
          break;
 8007072:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007074:	693b      	ldr	r3, [r7, #16]
}
 8007076:	4618      	mov	r0, r3
 8007078:	3718      	adds	r7, #24
 800707a:	46bd      	mov	sp, r7
 800707c:	bd80      	pop	{r7, pc}

0800707e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800707e:	b480      	push	{r7}
 8007080:	b085      	sub	sp, #20
 8007082:	af00      	add	r7, sp, #0
 8007084:	6078      	str	r0, [r7, #4]
 8007086:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	881a      	ldrh	r2, [r3, #0]
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	781b      	ldrb	r3, [r3, #0]
 8007094:	b29b      	uxth	r3, r3
 8007096:	4413      	add	r3, r2
 8007098:	b29a      	uxth	r2, r3
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	781b      	ldrb	r3, [r3, #0]
 80070a2:	461a      	mov	r2, r3
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	4413      	add	r3, r2
 80070a8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80070aa:	68fb      	ldr	r3, [r7, #12]
}
 80070ac:	4618      	mov	r0, r3
 80070ae:	3714      	adds	r7, #20
 80070b0:	46bd      	mov	sp, r7
 80070b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b6:	4770      	bx	lr

080070b8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80070b8:	b480      	push	{r7}
 80070ba:	b087      	sub	sp, #28
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80070c4:	697b      	ldr	r3, [r7, #20]
 80070c6:	781b      	ldrb	r3, [r3, #0]
 80070c8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80070ca:	697b      	ldr	r3, [r7, #20]
 80070cc:	3301      	adds	r3, #1
 80070ce:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80070d0:	697b      	ldr	r3, [r7, #20]
 80070d2:	781b      	ldrb	r3, [r3, #0]
 80070d4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80070d6:	8a3b      	ldrh	r3, [r7, #16]
 80070d8:	021b      	lsls	r3, r3, #8
 80070da:	b21a      	sxth	r2, r3
 80070dc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80070e0:	4313      	orrs	r3, r2
 80070e2:	b21b      	sxth	r3, r3
 80070e4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80070e6:	89fb      	ldrh	r3, [r7, #14]
}
 80070e8:	4618      	mov	r0, r3
 80070ea:	371c      	adds	r7, #28
 80070ec:	46bd      	mov	sp, r7
 80070ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f2:	4770      	bx	lr

080070f4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b084      	sub	sp, #16
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
 80070fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80070fe:	2300      	movs	r3, #0
 8007100:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	781b      	ldrb	r3, [r3, #0]
 8007106:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800710a:	2b40      	cmp	r3, #64	; 0x40
 800710c:	d005      	beq.n	800711a <USBD_StdDevReq+0x26>
 800710e:	2b40      	cmp	r3, #64	; 0x40
 8007110:	d857      	bhi.n	80071c2 <USBD_StdDevReq+0xce>
 8007112:	2b00      	cmp	r3, #0
 8007114:	d00f      	beq.n	8007136 <USBD_StdDevReq+0x42>
 8007116:	2b20      	cmp	r3, #32
 8007118:	d153      	bne.n	80071c2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	32ae      	adds	r2, #174	; 0xae
 8007124:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007128:	689b      	ldr	r3, [r3, #8]
 800712a:	6839      	ldr	r1, [r7, #0]
 800712c:	6878      	ldr	r0, [r7, #4]
 800712e:	4798      	blx	r3
 8007130:	4603      	mov	r3, r0
 8007132:	73fb      	strb	r3, [r7, #15]
      break;
 8007134:	e04a      	b.n	80071cc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	785b      	ldrb	r3, [r3, #1]
 800713a:	2b09      	cmp	r3, #9
 800713c:	d83b      	bhi.n	80071b6 <USBD_StdDevReq+0xc2>
 800713e:	a201      	add	r2, pc, #4	; (adr r2, 8007144 <USBD_StdDevReq+0x50>)
 8007140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007144:	08007199 	.word	0x08007199
 8007148:	080071ad 	.word	0x080071ad
 800714c:	080071b7 	.word	0x080071b7
 8007150:	080071a3 	.word	0x080071a3
 8007154:	080071b7 	.word	0x080071b7
 8007158:	08007177 	.word	0x08007177
 800715c:	0800716d 	.word	0x0800716d
 8007160:	080071b7 	.word	0x080071b7
 8007164:	0800718f 	.word	0x0800718f
 8007168:	08007181 	.word	0x08007181
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800716c:	6839      	ldr	r1, [r7, #0]
 800716e:	6878      	ldr	r0, [r7, #4]
 8007170:	f000 fa3c 	bl	80075ec <USBD_GetDescriptor>
          break;
 8007174:	e024      	b.n	80071c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007176:	6839      	ldr	r1, [r7, #0]
 8007178:	6878      	ldr	r0, [r7, #4]
 800717a:	f000 fbcb 	bl	8007914 <USBD_SetAddress>
          break;
 800717e:	e01f      	b.n	80071c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007180:	6839      	ldr	r1, [r7, #0]
 8007182:	6878      	ldr	r0, [r7, #4]
 8007184:	f000 fc0a 	bl	800799c <USBD_SetConfig>
 8007188:	4603      	mov	r3, r0
 800718a:	73fb      	strb	r3, [r7, #15]
          break;
 800718c:	e018      	b.n	80071c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800718e:	6839      	ldr	r1, [r7, #0]
 8007190:	6878      	ldr	r0, [r7, #4]
 8007192:	f000 fcad 	bl	8007af0 <USBD_GetConfig>
          break;
 8007196:	e013      	b.n	80071c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007198:	6839      	ldr	r1, [r7, #0]
 800719a:	6878      	ldr	r0, [r7, #4]
 800719c:	f000 fcde 	bl	8007b5c <USBD_GetStatus>
          break;
 80071a0:	e00e      	b.n	80071c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80071a2:	6839      	ldr	r1, [r7, #0]
 80071a4:	6878      	ldr	r0, [r7, #4]
 80071a6:	f000 fd0d 	bl	8007bc4 <USBD_SetFeature>
          break;
 80071aa:	e009      	b.n	80071c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80071ac:	6839      	ldr	r1, [r7, #0]
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f000 fd31 	bl	8007c16 <USBD_ClrFeature>
          break;
 80071b4:	e004      	b.n	80071c0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80071b6:	6839      	ldr	r1, [r7, #0]
 80071b8:	6878      	ldr	r0, [r7, #4]
 80071ba:	f000 fd88 	bl	8007cce <USBD_CtlError>
          break;
 80071be:	bf00      	nop
      }
      break;
 80071c0:	e004      	b.n	80071cc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80071c2:	6839      	ldr	r1, [r7, #0]
 80071c4:	6878      	ldr	r0, [r7, #4]
 80071c6:	f000 fd82 	bl	8007cce <USBD_CtlError>
      break;
 80071ca:	bf00      	nop
  }

  return ret;
 80071cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80071ce:	4618      	mov	r0, r3
 80071d0:	3710      	adds	r7, #16
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bd80      	pop	{r7, pc}
 80071d6:	bf00      	nop

080071d8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b084      	sub	sp, #16
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
 80071e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80071e2:	2300      	movs	r3, #0
 80071e4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	781b      	ldrb	r3, [r3, #0]
 80071ea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80071ee:	2b40      	cmp	r3, #64	; 0x40
 80071f0:	d005      	beq.n	80071fe <USBD_StdItfReq+0x26>
 80071f2:	2b40      	cmp	r3, #64	; 0x40
 80071f4:	d852      	bhi.n	800729c <USBD_StdItfReq+0xc4>
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d001      	beq.n	80071fe <USBD_StdItfReq+0x26>
 80071fa:	2b20      	cmp	r3, #32
 80071fc:	d14e      	bne.n	800729c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007204:	b2db      	uxtb	r3, r3
 8007206:	3b01      	subs	r3, #1
 8007208:	2b02      	cmp	r3, #2
 800720a:	d840      	bhi.n	800728e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	889b      	ldrh	r3, [r3, #4]
 8007210:	b2db      	uxtb	r3, r3
 8007212:	2b01      	cmp	r3, #1
 8007214:	d836      	bhi.n	8007284 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	889b      	ldrh	r3, [r3, #4]
 800721a:	b2db      	uxtb	r3, r3
 800721c:	4619      	mov	r1, r3
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	f7ff fed9 	bl	8006fd6 <USBD_CoreFindIF>
 8007224:	4603      	mov	r3, r0
 8007226:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007228:	7bbb      	ldrb	r3, [r7, #14]
 800722a:	2bff      	cmp	r3, #255	; 0xff
 800722c:	d01d      	beq.n	800726a <USBD_StdItfReq+0x92>
 800722e:	7bbb      	ldrb	r3, [r7, #14]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d11a      	bne.n	800726a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007234:	7bba      	ldrb	r2, [r7, #14]
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	32ae      	adds	r2, #174	; 0xae
 800723a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800723e:	689b      	ldr	r3, [r3, #8]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d00f      	beq.n	8007264 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007244:	7bba      	ldrb	r2, [r7, #14]
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800724c:	7bba      	ldrb	r2, [r7, #14]
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	32ae      	adds	r2, #174	; 0xae
 8007252:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007256:	689b      	ldr	r3, [r3, #8]
 8007258:	6839      	ldr	r1, [r7, #0]
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	4798      	blx	r3
 800725e:	4603      	mov	r3, r0
 8007260:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007262:	e004      	b.n	800726e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007264:	2303      	movs	r3, #3
 8007266:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007268:	e001      	b.n	800726e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800726a:	2303      	movs	r3, #3
 800726c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	88db      	ldrh	r3, [r3, #6]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d110      	bne.n	8007298 <USBD_StdItfReq+0xc0>
 8007276:	7bfb      	ldrb	r3, [r7, #15]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d10d      	bne.n	8007298 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800727c:	6878      	ldr	r0, [r7, #4]
 800727e:	f000 fdd4 	bl	8007e2a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007282:	e009      	b.n	8007298 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007284:	6839      	ldr	r1, [r7, #0]
 8007286:	6878      	ldr	r0, [r7, #4]
 8007288:	f000 fd21 	bl	8007cce <USBD_CtlError>
          break;
 800728c:	e004      	b.n	8007298 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800728e:	6839      	ldr	r1, [r7, #0]
 8007290:	6878      	ldr	r0, [r7, #4]
 8007292:	f000 fd1c 	bl	8007cce <USBD_CtlError>
          break;
 8007296:	e000      	b.n	800729a <USBD_StdItfReq+0xc2>
          break;
 8007298:	bf00      	nop
      }
      break;
 800729a:	e004      	b.n	80072a6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800729c:	6839      	ldr	r1, [r7, #0]
 800729e:	6878      	ldr	r0, [r7, #4]
 80072a0:	f000 fd15 	bl	8007cce <USBD_CtlError>
      break;
 80072a4:	bf00      	nop
  }

  return ret;
 80072a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80072a8:	4618      	mov	r0, r3
 80072aa:	3710      	adds	r7, #16
 80072ac:	46bd      	mov	sp, r7
 80072ae:	bd80      	pop	{r7, pc}

080072b0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b084      	sub	sp, #16
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
 80072b8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80072ba:	2300      	movs	r3, #0
 80072bc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	889b      	ldrh	r3, [r3, #4]
 80072c2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	781b      	ldrb	r3, [r3, #0]
 80072c8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80072cc:	2b40      	cmp	r3, #64	; 0x40
 80072ce:	d007      	beq.n	80072e0 <USBD_StdEPReq+0x30>
 80072d0:	2b40      	cmp	r3, #64	; 0x40
 80072d2:	f200 817f 	bhi.w	80075d4 <USBD_StdEPReq+0x324>
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d02a      	beq.n	8007330 <USBD_StdEPReq+0x80>
 80072da:	2b20      	cmp	r3, #32
 80072dc:	f040 817a 	bne.w	80075d4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80072e0:	7bbb      	ldrb	r3, [r7, #14]
 80072e2:	4619      	mov	r1, r3
 80072e4:	6878      	ldr	r0, [r7, #4]
 80072e6:	f7ff fe83 	bl	8006ff0 <USBD_CoreFindEP>
 80072ea:	4603      	mov	r3, r0
 80072ec:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80072ee:	7b7b      	ldrb	r3, [r7, #13]
 80072f0:	2bff      	cmp	r3, #255	; 0xff
 80072f2:	f000 8174 	beq.w	80075de <USBD_StdEPReq+0x32e>
 80072f6:	7b7b      	ldrb	r3, [r7, #13]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	f040 8170 	bne.w	80075de <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80072fe:	7b7a      	ldrb	r2, [r7, #13]
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007306:	7b7a      	ldrb	r2, [r7, #13]
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	32ae      	adds	r2, #174	; 0xae
 800730c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007310:	689b      	ldr	r3, [r3, #8]
 8007312:	2b00      	cmp	r3, #0
 8007314:	f000 8163 	beq.w	80075de <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007318:	7b7a      	ldrb	r2, [r7, #13]
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	32ae      	adds	r2, #174	; 0xae
 800731e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007322:	689b      	ldr	r3, [r3, #8]
 8007324:	6839      	ldr	r1, [r7, #0]
 8007326:	6878      	ldr	r0, [r7, #4]
 8007328:	4798      	blx	r3
 800732a:	4603      	mov	r3, r0
 800732c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800732e:	e156      	b.n	80075de <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	785b      	ldrb	r3, [r3, #1]
 8007334:	2b03      	cmp	r3, #3
 8007336:	d008      	beq.n	800734a <USBD_StdEPReq+0x9a>
 8007338:	2b03      	cmp	r3, #3
 800733a:	f300 8145 	bgt.w	80075c8 <USBD_StdEPReq+0x318>
 800733e:	2b00      	cmp	r3, #0
 8007340:	f000 809b 	beq.w	800747a <USBD_StdEPReq+0x1ca>
 8007344:	2b01      	cmp	r3, #1
 8007346:	d03c      	beq.n	80073c2 <USBD_StdEPReq+0x112>
 8007348:	e13e      	b.n	80075c8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007350:	b2db      	uxtb	r3, r3
 8007352:	2b02      	cmp	r3, #2
 8007354:	d002      	beq.n	800735c <USBD_StdEPReq+0xac>
 8007356:	2b03      	cmp	r3, #3
 8007358:	d016      	beq.n	8007388 <USBD_StdEPReq+0xd8>
 800735a:	e02c      	b.n	80073b6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800735c:	7bbb      	ldrb	r3, [r7, #14]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d00d      	beq.n	800737e <USBD_StdEPReq+0xce>
 8007362:	7bbb      	ldrb	r3, [r7, #14]
 8007364:	2b80      	cmp	r3, #128	; 0x80
 8007366:	d00a      	beq.n	800737e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007368:	7bbb      	ldrb	r3, [r7, #14]
 800736a:	4619      	mov	r1, r3
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	f003 fee5 	bl	800b13c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007372:	2180      	movs	r1, #128	; 0x80
 8007374:	6878      	ldr	r0, [r7, #4]
 8007376:	f003 fee1 	bl	800b13c <USBD_LL_StallEP>
 800737a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800737c:	e020      	b.n	80073c0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800737e:	6839      	ldr	r1, [r7, #0]
 8007380:	6878      	ldr	r0, [r7, #4]
 8007382:	f000 fca4 	bl	8007cce <USBD_CtlError>
              break;
 8007386:	e01b      	b.n	80073c0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	885b      	ldrh	r3, [r3, #2]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d10e      	bne.n	80073ae <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007390:	7bbb      	ldrb	r3, [r7, #14]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d00b      	beq.n	80073ae <USBD_StdEPReq+0xfe>
 8007396:	7bbb      	ldrb	r3, [r7, #14]
 8007398:	2b80      	cmp	r3, #128	; 0x80
 800739a:	d008      	beq.n	80073ae <USBD_StdEPReq+0xfe>
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	88db      	ldrh	r3, [r3, #6]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d104      	bne.n	80073ae <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80073a4:	7bbb      	ldrb	r3, [r7, #14]
 80073a6:	4619      	mov	r1, r3
 80073a8:	6878      	ldr	r0, [r7, #4]
 80073aa:	f003 fec7 	bl	800b13c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80073ae:	6878      	ldr	r0, [r7, #4]
 80073b0:	f000 fd3b 	bl	8007e2a <USBD_CtlSendStatus>

              break;
 80073b4:	e004      	b.n	80073c0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80073b6:	6839      	ldr	r1, [r7, #0]
 80073b8:	6878      	ldr	r0, [r7, #4]
 80073ba:	f000 fc88 	bl	8007cce <USBD_CtlError>
              break;
 80073be:	bf00      	nop
          }
          break;
 80073c0:	e107      	b.n	80075d2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073c8:	b2db      	uxtb	r3, r3
 80073ca:	2b02      	cmp	r3, #2
 80073cc:	d002      	beq.n	80073d4 <USBD_StdEPReq+0x124>
 80073ce:	2b03      	cmp	r3, #3
 80073d0:	d016      	beq.n	8007400 <USBD_StdEPReq+0x150>
 80073d2:	e04b      	b.n	800746c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80073d4:	7bbb      	ldrb	r3, [r7, #14]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d00d      	beq.n	80073f6 <USBD_StdEPReq+0x146>
 80073da:	7bbb      	ldrb	r3, [r7, #14]
 80073dc:	2b80      	cmp	r3, #128	; 0x80
 80073de:	d00a      	beq.n	80073f6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80073e0:	7bbb      	ldrb	r3, [r7, #14]
 80073e2:	4619      	mov	r1, r3
 80073e4:	6878      	ldr	r0, [r7, #4]
 80073e6:	f003 fea9 	bl	800b13c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80073ea:	2180      	movs	r1, #128	; 0x80
 80073ec:	6878      	ldr	r0, [r7, #4]
 80073ee:	f003 fea5 	bl	800b13c <USBD_LL_StallEP>
 80073f2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80073f4:	e040      	b.n	8007478 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80073f6:	6839      	ldr	r1, [r7, #0]
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	f000 fc68 	bl	8007cce <USBD_CtlError>
              break;
 80073fe:	e03b      	b.n	8007478 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	885b      	ldrh	r3, [r3, #2]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d136      	bne.n	8007476 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007408:	7bbb      	ldrb	r3, [r7, #14]
 800740a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800740e:	2b00      	cmp	r3, #0
 8007410:	d004      	beq.n	800741c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007412:	7bbb      	ldrb	r3, [r7, #14]
 8007414:	4619      	mov	r1, r3
 8007416:	6878      	ldr	r0, [r7, #4]
 8007418:	f003 fec6 	bl	800b1a8 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800741c:	6878      	ldr	r0, [r7, #4]
 800741e:	f000 fd04 	bl	8007e2a <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007422:	7bbb      	ldrb	r3, [r7, #14]
 8007424:	4619      	mov	r1, r3
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	f7ff fde2 	bl	8006ff0 <USBD_CoreFindEP>
 800742c:	4603      	mov	r3, r0
 800742e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007430:	7b7b      	ldrb	r3, [r7, #13]
 8007432:	2bff      	cmp	r3, #255	; 0xff
 8007434:	d01f      	beq.n	8007476 <USBD_StdEPReq+0x1c6>
 8007436:	7b7b      	ldrb	r3, [r7, #13]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d11c      	bne.n	8007476 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800743c:	7b7a      	ldrb	r2, [r7, #13]
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007444:	7b7a      	ldrb	r2, [r7, #13]
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	32ae      	adds	r2, #174	; 0xae
 800744a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800744e:	689b      	ldr	r3, [r3, #8]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d010      	beq.n	8007476 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007454:	7b7a      	ldrb	r2, [r7, #13]
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	32ae      	adds	r2, #174	; 0xae
 800745a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800745e:	689b      	ldr	r3, [r3, #8]
 8007460:	6839      	ldr	r1, [r7, #0]
 8007462:	6878      	ldr	r0, [r7, #4]
 8007464:	4798      	blx	r3
 8007466:	4603      	mov	r3, r0
 8007468:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800746a:	e004      	b.n	8007476 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800746c:	6839      	ldr	r1, [r7, #0]
 800746e:	6878      	ldr	r0, [r7, #4]
 8007470:	f000 fc2d 	bl	8007cce <USBD_CtlError>
              break;
 8007474:	e000      	b.n	8007478 <USBD_StdEPReq+0x1c8>
              break;
 8007476:	bf00      	nop
          }
          break;
 8007478:	e0ab      	b.n	80075d2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007480:	b2db      	uxtb	r3, r3
 8007482:	2b02      	cmp	r3, #2
 8007484:	d002      	beq.n	800748c <USBD_StdEPReq+0x1dc>
 8007486:	2b03      	cmp	r3, #3
 8007488:	d032      	beq.n	80074f0 <USBD_StdEPReq+0x240>
 800748a:	e097      	b.n	80075bc <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800748c:	7bbb      	ldrb	r3, [r7, #14]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d007      	beq.n	80074a2 <USBD_StdEPReq+0x1f2>
 8007492:	7bbb      	ldrb	r3, [r7, #14]
 8007494:	2b80      	cmp	r3, #128	; 0x80
 8007496:	d004      	beq.n	80074a2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007498:	6839      	ldr	r1, [r7, #0]
 800749a:	6878      	ldr	r0, [r7, #4]
 800749c:	f000 fc17 	bl	8007cce <USBD_CtlError>
                break;
 80074a0:	e091      	b.n	80075c6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80074a2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	da0b      	bge.n	80074c2 <USBD_StdEPReq+0x212>
 80074aa:	7bbb      	ldrb	r3, [r7, #14]
 80074ac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80074b0:	4613      	mov	r3, r2
 80074b2:	009b      	lsls	r3, r3, #2
 80074b4:	4413      	add	r3, r2
 80074b6:	009b      	lsls	r3, r3, #2
 80074b8:	3310      	adds	r3, #16
 80074ba:	687a      	ldr	r2, [r7, #4]
 80074bc:	4413      	add	r3, r2
 80074be:	3304      	adds	r3, #4
 80074c0:	e00b      	b.n	80074da <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80074c2:	7bbb      	ldrb	r3, [r7, #14]
 80074c4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80074c8:	4613      	mov	r3, r2
 80074ca:	009b      	lsls	r3, r3, #2
 80074cc:	4413      	add	r3, r2
 80074ce:	009b      	lsls	r3, r3, #2
 80074d0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80074d4:	687a      	ldr	r2, [r7, #4]
 80074d6:	4413      	add	r3, r2
 80074d8:	3304      	adds	r3, #4
 80074da:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80074dc:	68bb      	ldr	r3, [r7, #8]
 80074de:	2200      	movs	r2, #0
 80074e0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80074e2:	68bb      	ldr	r3, [r7, #8]
 80074e4:	2202      	movs	r2, #2
 80074e6:	4619      	mov	r1, r3
 80074e8:	6878      	ldr	r0, [r7, #4]
 80074ea:	f000 fc61 	bl	8007db0 <USBD_CtlSendData>
              break;
 80074ee:	e06a      	b.n	80075c6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80074f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	da11      	bge.n	800751c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80074f8:	7bbb      	ldrb	r3, [r7, #14]
 80074fa:	f003 020f 	and.w	r2, r3, #15
 80074fe:	6879      	ldr	r1, [r7, #4]
 8007500:	4613      	mov	r3, r2
 8007502:	009b      	lsls	r3, r3, #2
 8007504:	4413      	add	r3, r2
 8007506:	009b      	lsls	r3, r3, #2
 8007508:	440b      	add	r3, r1
 800750a:	3324      	adds	r3, #36	; 0x24
 800750c:	881b      	ldrh	r3, [r3, #0]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d117      	bne.n	8007542 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007512:	6839      	ldr	r1, [r7, #0]
 8007514:	6878      	ldr	r0, [r7, #4]
 8007516:	f000 fbda 	bl	8007cce <USBD_CtlError>
                  break;
 800751a:	e054      	b.n	80075c6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800751c:	7bbb      	ldrb	r3, [r7, #14]
 800751e:	f003 020f 	and.w	r2, r3, #15
 8007522:	6879      	ldr	r1, [r7, #4]
 8007524:	4613      	mov	r3, r2
 8007526:	009b      	lsls	r3, r3, #2
 8007528:	4413      	add	r3, r2
 800752a:	009b      	lsls	r3, r3, #2
 800752c:	440b      	add	r3, r1
 800752e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007532:	881b      	ldrh	r3, [r3, #0]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d104      	bne.n	8007542 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007538:	6839      	ldr	r1, [r7, #0]
 800753a:	6878      	ldr	r0, [r7, #4]
 800753c:	f000 fbc7 	bl	8007cce <USBD_CtlError>
                  break;
 8007540:	e041      	b.n	80075c6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007542:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007546:	2b00      	cmp	r3, #0
 8007548:	da0b      	bge.n	8007562 <USBD_StdEPReq+0x2b2>
 800754a:	7bbb      	ldrb	r3, [r7, #14]
 800754c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007550:	4613      	mov	r3, r2
 8007552:	009b      	lsls	r3, r3, #2
 8007554:	4413      	add	r3, r2
 8007556:	009b      	lsls	r3, r3, #2
 8007558:	3310      	adds	r3, #16
 800755a:	687a      	ldr	r2, [r7, #4]
 800755c:	4413      	add	r3, r2
 800755e:	3304      	adds	r3, #4
 8007560:	e00b      	b.n	800757a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007562:	7bbb      	ldrb	r3, [r7, #14]
 8007564:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007568:	4613      	mov	r3, r2
 800756a:	009b      	lsls	r3, r3, #2
 800756c:	4413      	add	r3, r2
 800756e:	009b      	lsls	r3, r3, #2
 8007570:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007574:	687a      	ldr	r2, [r7, #4]
 8007576:	4413      	add	r3, r2
 8007578:	3304      	adds	r3, #4
 800757a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800757c:	7bbb      	ldrb	r3, [r7, #14]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d002      	beq.n	8007588 <USBD_StdEPReq+0x2d8>
 8007582:	7bbb      	ldrb	r3, [r7, #14]
 8007584:	2b80      	cmp	r3, #128	; 0x80
 8007586:	d103      	bne.n	8007590 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007588:	68bb      	ldr	r3, [r7, #8]
 800758a:	2200      	movs	r2, #0
 800758c:	601a      	str	r2, [r3, #0]
 800758e:	e00e      	b.n	80075ae <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007590:	7bbb      	ldrb	r3, [r7, #14]
 8007592:	4619      	mov	r1, r3
 8007594:	6878      	ldr	r0, [r7, #4]
 8007596:	f003 fe3d 	bl	800b214 <USBD_LL_IsStallEP>
 800759a:	4603      	mov	r3, r0
 800759c:	2b00      	cmp	r3, #0
 800759e:	d003      	beq.n	80075a8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	2201      	movs	r2, #1
 80075a4:	601a      	str	r2, [r3, #0]
 80075a6:	e002      	b.n	80075ae <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80075a8:	68bb      	ldr	r3, [r7, #8]
 80075aa:	2200      	movs	r2, #0
 80075ac:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80075ae:	68bb      	ldr	r3, [r7, #8]
 80075b0:	2202      	movs	r2, #2
 80075b2:	4619      	mov	r1, r3
 80075b4:	6878      	ldr	r0, [r7, #4]
 80075b6:	f000 fbfb 	bl	8007db0 <USBD_CtlSendData>
              break;
 80075ba:	e004      	b.n	80075c6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80075bc:	6839      	ldr	r1, [r7, #0]
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	f000 fb85 	bl	8007cce <USBD_CtlError>
              break;
 80075c4:	bf00      	nop
          }
          break;
 80075c6:	e004      	b.n	80075d2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80075c8:	6839      	ldr	r1, [r7, #0]
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	f000 fb7f 	bl	8007cce <USBD_CtlError>
          break;
 80075d0:	bf00      	nop
      }
      break;
 80075d2:	e005      	b.n	80075e0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80075d4:	6839      	ldr	r1, [r7, #0]
 80075d6:	6878      	ldr	r0, [r7, #4]
 80075d8:	f000 fb79 	bl	8007cce <USBD_CtlError>
      break;
 80075dc:	e000      	b.n	80075e0 <USBD_StdEPReq+0x330>
      break;
 80075de:	bf00      	nop
  }

  return ret;
 80075e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80075e2:	4618      	mov	r0, r3
 80075e4:	3710      	adds	r7, #16
 80075e6:	46bd      	mov	sp, r7
 80075e8:	bd80      	pop	{r7, pc}
	...

080075ec <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b084      	sub	sp, #16
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
 80075f4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80075f6:	2300      	movs	r3, #0
 80075f8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80075fa:	2300      	movs	r3, #0
 80075fc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80075fe:	2300      	movs	r3, #0
 8007600:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	885b      	ldrh	r3, [r3, #2]
 8007606:	0a1b      	lsrs	r3, r3, #8
 8007608:	b29b      	uxth	r3, r3
 800760a:	3b01      	subs	r3, #1
 800760c:	2b0e      	cmp	r3, #14
 800760e:	f200 8152 	bhi.w	80078b6 <USBD_GetDescriptor+0x2ca>
 8007612:	a201      	add	r2, pc, #4	; (adr r2, 8007618 <USBD_GetDescriptor+0x2c>)
 8007614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007618:	08007689 	.word	0x08007689
 800761c:	080076a1 	.word	0x080076a1
 8007620:	080076e1 	.word	0x080076e1
 8007624:	080078b7 	.word	0x080078b7
 8007628:	080078b7 	.word	0x080078b7
 800762c:	08007857 	.word	0x08007857
 8007630:	08007883 	.word	0x08007883
 8007634:	080078b7 	.word	0x080078b7
 8007638:	080078b7 	.word	0x080078b7
 800763c:	080078b7 	.word	0x080078b7
 8007640:	080078b7 	.word	0x080078b7
 8007644:	080078b7 	.word	0x080078b7
 8007648:	080078b7 	.word	0x080078b7
 800764c:	080078b7 	.word	0x080078b7
 8007650:	08007655 	.word	0x08007655
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800765a:	69db      	ldr	r3, [r3, #28]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d00b      	beq.n	8007678 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007666:	69db      	ldr	r3, [r3, #28]
 8007668:	687a      	ldr	r2, [r7, #4]
 800766a:	7c12      	ldrb	r2, [r2, #16]
 800766c:	f107 0108 	add.w	r1, r7, #8
 8007670:	4610      	mov	r0, r2
 8007672:	4798      	blx	r3
 8007674:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007676:	e126      	b.n	80078c6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007678:	6839      	ldr	r1, [r7, #0]
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	f000 fb27 	bl	8007cce <USBD_CtlError>
        err++;
 8007680:	7afb      	ldrb	r3, [r7, #11]
 8007682:	3301      	adds	r3, #1
 8007684:	72fb      	strb	r3, [r7, #11]
      break;
 8007686:	e11e      	b.n	80078c6 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	687a      	ldr	r2, [r7, #4]
 8007692:	7c12      	ldrb	r2, [r2, #16]
 8007694:	f107 0108 	add.w	r1, r7, #8
 8007698:	4610      	mov	r0, r2
 800769a:	4798      	blx	r3
 800769c:	60f8      	str	r0, [r7, #12]
      break;
 800769e:	e112      	b.n	80078c6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	7c1b      	ldrb	r3, [r3, #16]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d10d      	bne.n	80076c4 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076b0:	f107 0208 	add.w	r2, r7, #8
 80076b4:	4610      	mov	r0, r2
 80076b6:	4798      	blx	r3
 80076b8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	3301      	adds	r3, #1
 80076be:	2202      	movs	r2, #2
 80076c0:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80076c2:	e100      	b.n	80078c6 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076cc:	f107 0208 	add.w	r2, r7, #8
 80076d0:	4610      	mov	r0, r2
 80076d2:	4798      	blx	r3
 80076d4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	3301      	adds	r3, #1
 80076da:	2202      	movs	r2, #2
 80076dc:	701a      	strb	r2, [r3, #0]
      break;
 80076de:	e0f2      	b.n	80078c6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	885b      	ldrh	r3, [r3, #2]
 80076e4:	b2db      	uxtb	r3, r3
 80076e6:	2b05      	cmp	r3, #5
 80076e8:	f200 80ac 	bhi.w	8007844 <USBD_GetDescriptor+0x258>
 80076ec:	a201      	add	r2, pc, #4	; (adr r2, 80076f4 <USBD_GetDescriptor+0x108>)
 80076ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076f2:	bf00      	nop
 80076f4:	0800770d 	.word	0x0800770d
 80076f8:	08007741 	.word	0x08007741
 80076fc:	08007775 	.word	0x08007775
 8007700:	080077a9 	.word	0x080077a9
 8007704:	080077dd 	.word	0x080077dd
 8007708:	08007811 	.word	0x08007811
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007712:	685b      	ldr	r3, [r3, #4]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d00b      	beq.n	8007730 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800771e:	685b      	ldr	r3, [r3, #4]
 8007720:	687a      	ldr	r2, [r7, #4]
 8007722:	7c12      	ldrb	r2, [r2, #16]
 8007724:	f107 0108 	add.w	r1, r7, #8
 8007728:	4610      	mov	r0, r2
 800772a:	4798      	blx	r3
 800772c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800772e:	e091      	b.n	8007854 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007730:	6839      	ldr	r1, [r7, #0]
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	f000 facb 	bl	8007cce <USBD_CtlError>
            err++;
 8007738:	7afb      	ldrb	r3, [r7, #11]
 800773a:	3301      	adds	r3, #1
 800773c:	72fb      	strb	r3, [r7, #11]
          break;
 800773e:	e089      	b.n	8007854 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007746:	689b      	ldr	r3, [r3, #8]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d00b      	beq.n	8007764 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007752:	689b      	ldr	r3, [r3, #8]
 8007754:	687a      	ldr	r2, [r7, #4]
 8007756:	7c12      	ldrb	r2, [r2, #16]
 8007758:	f107 0108 	add.w	r1, r7, #8
 800775c:	4610      	mov	r0, r2
 800775e:	4798      	blx	r3
 8007760:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007762:	e077      	b.n	8007854 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007764:	6839      	ldr	r1, [r7, #0]
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	f000 fab1 	bl	8007cce <USBD_CtlError>
            err++;
 800776c:	7afb      	ldrb	r3, [r7, #11]
 800776e:	3301      	adds	r3, #1
 8007770:	72fb      	strb	r3, [r7, #11]
          break;
 8007772:	e06f      	b.n	8007854 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800777a:	68db      	ldr	r3, [r3, #12]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d00b      	beq.n	8007798 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007786:	68db      	ldr	r3, [r3, #12]
 8007788:	687a      	ldr	r2, [r7, #4]
 800778a:	7c12      	ldrb	r2, [r2, #16]
 800778c:	f107 0108 	add.w	r1, r7, #8
 8007790:	4610      	mov	r0, r2
 8007792:	4798      	blx	r3
 8007794:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007796:	e05d      	b.n	8007854 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007798:	6839      	ldr	r1, [r7, #0]
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	f000 fa97 	bl	8007cce <USBD_CtlError>
            err++;
 80077a0:	7afb      	ldrb	r3, [r7, #11]
 80077a2:	3301      	adds	r3, #1
 80077a4:	72fb      	strb	r3, [r7, #11]
          break;
 80077a6:	e055      	b.n	8007854 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077ae:	691b      	ldr	r3, [r3, #16]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d00b      	beq.n	80077cc <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077ba:	691b      	ldr	r3, [r3, #16]
 80077bc:	687a      	ldr	r2, [r7, #4]
 80077be:	7c12      	ldrb	r2, [r2, #16]
 80077c0:	f107 0108 	add.w	r1, r7, #8
 80077c4:	4610      	mov	r0, r2
 80077c6:	4798      	blx	r3
 80077c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80077ca:	e043      	b.n	8007854 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80077cc:	6839      	ldr	r1, [r7, #0]
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	f000 fa7d 	bl	8007cce <USBD_CtlError>
            err++;
 80077d4:	7afb      	ldrb	r3, [r7, #11]
 80077d6:	3301      	adds	r3, #1
 80077d8:	72fb      	strb	r3, [r7, #11]
          break;
 80077da:	e03b      	b.n	8007854 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077e2:	695b      	ldr	r3, [r3, #20]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d00b      	beq.n	8007800 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077ee:	695b      	ldr	r3, [r3, #20]
 80077f0:	687a      	ldr	r2, [r7, #4]
 80077f2:	7c12      	ldrb	r2, [r2, #16]
 80077f4:	f107 0108 	add.w	r1, r7, #8
 80077f8:	4610      	mov	r0, r2
 80077fa:	4798      	blx	r3
 80077fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80077fe:	e029      	b.n	8007854 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007800:	6839      	ldr	r1, [r7, #0]
 8007802:	6878      	ldr	r0, [r7, #4]
 8007804:	f000 fa63 	bl	8007cce <USBD_CtlError>
            err++;
 8007808:	7afb      	ldrb	r3, [r7, #11]
 800780a:	3301      	adds	r3, #1
 800780c:	72fb      	strb	r3, [r7, #11]
          break;
 800780e:	e021      	b.n	8007854 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007816:	699b      	ldr	r3, [r3, #24]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d00b      	beq.n	8007834 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007822:	699b      	ldr	r3, [r3, #24]
 8007824:	687a      	ldr	r2, [r7, #4]
 8007826:	7c12      	ldrb	r2, [r2, #16]
 8007828:	f107 0108 	add.w	r1, r7, #8
 800782c:	4610      	mov	r0, r2
 800782e:	4798      	blx	r3
 8007830:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007832:	e00f      	b.n	8007854 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007834:	6839      	ldr	r1, [r7, #0]
 8007836:	6878      	ldr	r0, [r7, #4]
 8007838:	f000 fa49 	bl	8007cce <USBD_CtlError>
            err++;
 800783c:	7afb      	ldrb	r3, [r7, #11]
 800783e:	3301      	adds	r3, #1
 8007840:	72fb      	strb	r3, [r7, #11]
          break;
 8007842:	e007      	b.n	8007854 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007844:	6839      	ldr	r1, [r7, #0]
 8007846:	6878      	ldr	r0, [r7, #4]
 8007848:	f000 fa41 	bl	8007cce <USBD_CtlError>
          err++;
 800784c:	7afb      	ldrb	r3, [r7, #11]
 800784e:	3301      	adds	r3, #1
 8007850:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007852:	bf00      	nop
      }
      break;
 8007854:	e037      	b.n	80078c6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	7c1b      	ldrb	r3, [r3, #16]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d109      	bne.n	8007872 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007864:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007866:	f107 0208 	add.w	r2, r7, #8
 800786a:	4610      	mov	r0, r2
 800786c:	4798      	blx	r3
 800786e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007870:	e029      	b.n	80078c6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007872:	6839      	ldr	r1, [r7, #0]
 8007874:	6878      	ldr	r0, [r7, #4]
 8007876:	f000 fa2a 	bl	8007cce <USBD_CtlError>
        err++;
 800787a:	7afb      	ldrb	r3, [r7, #11]
 800787c:	3301      	adds	r3, #1
 800787e:	72fb      	strb	r3, [r7, #11]
      break;
 8007880:	e021      	b.n	80078c6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	7c1b      	ldrb	r3, [r3, #16]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d10d      	bne.n	80078a6 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007892:	f107 0208 	add.w	r2, r7, #8
 8007896:	4610      	mov	r0, r2
 8007898:	4798      	blx	r3
 800789a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	3301      	adds	r3, #1
 80078a0:	2207      	movs	r2, #7
 80078a2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80078a4:	e00f      	b.n	80078c6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80078a6:	6839      	ldr	r1, [r7, #0]
 80078a8:	6878      	ldr	r0, [r7, #4]
 80078aa:	f000 fa10 	bl	8007cce <USBD_CtlError>
        err++;
 80078ae:	7afb      	ldrb	r3, [r7, #11]
 80078b0:	3301      	adds	r3, #1
 80078b2:	72fb      	strb	r3, [r7, #11]
      break;
 80078b4:	e007      	b.n	80078c6 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80078b6:	6839      	ldr	r1, [r7, #0]
 80078b8:	6878      	ldr	r0, [r7, #4]
 80078ba:	f000 fa08 	bl	8007cce <USBD_CtlError>
      err++;
 80078be:	7afb      	ldrb	r3, [r7, #11]
 80078c0:	3301      	adds	r3, #1
 80078c2:	72fb      	strb	r3, [r7, #11]
      break;
 80078c4:	bf00      	nop
  }

  if (err != 0U)
 80078c6:	7afb      	ldrb	r3, [r7, #11]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d11e      	bne.n	800790a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	88db      	ldrh	r3, [r3, #6]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d016      	beq.n	8007902 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80078d4:	893b      	ldrh	r3, [r7, #8]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d00e      	beq.n	80078f8 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	88da      	ldrh	r2, [r3, #6]
 80078de:	893b      	ldrh	r3, [r7, #8]
 80078e0:	4293      	cmp	r3, r2
 80078e2:	bf28      	it	cs
 80078e4:	4613      	movcs	r3, r2
 80078e6:	b29b      	uxth	r3, r3
 80078e8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80078ea:	893b      	ldrh	r3, [r7, #8]
 80078ec:	461a      	mov	r2, r3
 80078ee:	68f9      	ldr	r1, [r7, #12]
 80078f0:	6878      	ldr	r0, [r7, #4]
 80078f2:	f000 fa5d 	bl	8007db0 <USBD_CtlSendData>
 80078f6:	e009      	b.n	800790c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80078f8:	6839      	ldr	r1, [r7, #0]
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	f000 f9e7 	bl	8007cce <USBD_CtlError>
 8007900:	e004      	b.n	800790c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007902:	6878      	ldr	r0, [r7, #4]
 8007904:	f000 fa91 	bl	8007e2a <USBD_CtlSendStatus>
 8007908:	e000      	b.n	800790c <USBD_GetDescriptor+0x320>
    return;
 800790a:	bf00      	nop
  }
}
 800790c:	3710      	adds	r7, #16
 800790e:	46bd      	mov	sp, r7
 8007910:	bd80      	pop	{r7, pc}
 8007912:	bf00      	nop

08007914 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b084      	sub	sp, #16
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
 800791c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	889b      	ldrh	r3, [r3, #4]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d131      	bne.n	800798a <USBD_SetAddress+0x76>
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	88db      	ldrh	r3, [r3, #6]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d12d      	bne.n	800798a <USBD_SetAddress+0x76>
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	885b      	ldrh	r3, [r3, #2]
 8007932:	2b7f      	cmp	r3, #127	; 0x7f
 8007934:	d829      	bhi.n	800798a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	885b      	ldrh	r3, [r3, #2]
 800793a:	b2db      	uxtb	r3, r3
 800793c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007940:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007948:	b2db      	uxtb	r3, r3
 800794a:	2b03      	cmp	r3, #3
 800794c:	d104      	bne.n	8007958 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800794e:	6839      	ldr	r1, [r7, #0]
 8007950:	6878      	ldr	r0, [r7, #4]
 8007952:	f000 f9bc 	bl	8007cce <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007956:	e01d      	b.n	8007994 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	7bfa      	ldrb	r2, [r7, #15]
 800795c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007960:	7bfb      	ldrb	r3, [r7, #15]
 8007962:	4619      	mov	r1, r3
 8007964:	6878      	ldr	r0, [r7, #4]
 8007966:	f003 fc81 	bl	800b26c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	f000 fa5d 	bl	8007e2a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007970:	7bfb      	ldrb	r3, [r7, #15]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d004      	beq.n	8007980 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2202      	movs	r2, #2
 800797a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800797e:	e009      	b.n	8007994 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2201      	movs	r2, #1
 8007984:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007988:	e004      	b.n	8007994 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800798a:	6839      	ldr	r1, [r7, #0]
 800798c:	6878      	ldr	r0, [r7, #4]
 800798e:	f000 f99e 	bl	8007cce <USBD_CtlError>
  }
}
 8007992:	bf00      	nop
 8007994:	bf00      	nop
 8007996:	3710      	adds	r7, #16
 8007998:	46bd      	mov	sp, r7
 800799a:	bd80      	pop	{r7, pc}

0800799c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b084      	sub	sp, #16
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
 80079a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80079a6:	2300      	movs	r3, #0
 80079a8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	885b      	ldrh	r3, [r3, #2]
 80079ae:	b2da      	uxtb	r2, r3
 80079b0:	4b4e      	ldr	r3, [pc, #312]	; (8007aec <USBD_SetConfig+0x150>)
 80079b2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80079b4:	4b4d      	ldr	r3, [pc, #308]	; (8007aec <USBD_SetConfig+0x150>)
 80079b6:	781b      	ldrb	r3, [r3, #0]
 80079b8:	2b01      	cmp	r3, #1
 80079ba:	d905      	bls.n	80079c8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80079bc:	6839      	ldr	r1, [r7, #0]
 80079be:	6878      	ldr	r0, [r7, #4]
 80079c0:	f000 f985 	bl	8007cce <USBD_CtlError>
    return USBD_FAIL;
 80079c4:	2303      	movs	r3, #3
 80079c6:	e08c      	b.n	8007ae2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079ce:	b2db      	uxtb	r3, r3
 80079d0:	2b02      	cmp	r3, #2
 80079d2:	d002      	beq.n	80079da <USBD_SetConfig+0x3e>
 80079d4:	2b03      	cmp	r3, #3
 80079d6:	d029      	beq.n	8007a2c <USBD_SetConfig+0x90>
 80079d8:	e075      	b.n	8007ac6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80079da:	4b44      	ldr	r3, [pc, #272]	; (8007aec <USBD_SetConfig+0x150>)
 80079dc:	781b      	ldrb	r3, [r3, #0]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d020      	beq.n	8007a24 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80079e2:	4b42      	ldr	r3, [pc, #264]	; (8007aec <USBD_SetConfig+0x150>)
 80079e4:	781b      	ldrb	r3, [r3, #0]
 80079e6:	461a      	mov	r2, r3
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80079ec:	4b3f      	ldr	r3, [pc, #252]	; (8007aec <USBD_SetConfig+0x150>)
 80079ee:	781b      	ldrb	r3, [r3, #0]
 80079f0:	4619      	mov	r1, r3
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	f7fe ffb7 	bl	8006966 <USBD_SetClassConfig>
 80079f8:	4603      	mov	r3, r0
 80079fa:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80079fc:	7bfb      	ldrb	r3, [r7, #15]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d008      	beq.n	8007a14 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007a02:	6839      	ldr	r1, [r7, #0]
 8007a04:	6878      	ldr	r0, [r7, #4]
 8007a06:	f000 f962 	bl	8007cce <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2202      	movs	r2, #2
 8007a0e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007a12:	e065      	b.n	8007ae0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007a14:	6878      	ldr	r0, [r7, #4]
 8007a16:	f000 fa08 	bl	8007e2a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	2203      	movs	r2, #3
 8007a1e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007a22:	e05d      	b.n	8007ae0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007a24:	6878      	ldr	r0, [r7, #4]
 8007a26:	f000 fa00 	bl	8007e2a <USBD_CtlSendStatus>
      break;
 8007a2a:	e059      	b.n	8007ae0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007a2c:	4b2f      	ldr	r3, [pc, #188]	; (8007aec <USBD_SetConfig+0x150>)
 8007a2e:	781b      	ldrb	r3, [r3, #0]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d112      	bne.n	8007a5a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2202      	movs	r2, #2
 8007a38:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007a3c:	4b2b      	ldr	r3, [pc, #172]	; (8007aec <USBD_SetConfig+0x150>)
 8007a3e:	781b      	ldrb	r3, [r3, #0]
 8007a40:	461a      	mov	r2, r3
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007a46:	4b29      	ldr	r3, [pc, #164]	; (8007aec <USBD_SetConfig+0x150>)
 8007a48:	781b      	ldrb	r3, [r3, #0]
 8007a4a:	4619      	mov	r1, r3
 8007a4c:	6878      	ldr	r0, [r7, #4]
 8007a4e:	f7fe ffa6 	bl	800699e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007a52:	6878      	ldr	r0, [r7, #4]
 8007a54:	f000 f9e9 	bl	8007e2a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007a58:	e042      	b.n	8007ae0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007a5a:	4b24      	ldr	r3, [pc, #144]	; (8007aec <USBD_SetConfig+0x150>)
 8007a5c:	781b      	ldrb	r3, [r3, #0]
 8007a5e:	461a      	mov	r2, r3
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	685b      	ldr	r3, [r3, #4]
 8007a64:	429a      	cmp	r2, r3
 8007a66:	d02a      	beq.n	8007abe <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	685b      	ldr	r3, [r3, #4]
 8007a6c:	b2db      	uxtb	r3, r3
 8007a6e:	4619      	mov	r1, r3
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	f7fe ff94 	bl	800699e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007a76:	4b1d      	ldr	r3, [pc, #116]	; (8007aec <USBD_SetConfig+0x150>)
 8007a78:	781b      	ldrb	r3, [r3, #0]
 8007a7a:	461a      	mov	r2, r3
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007a80:	4b1a      	ldr	r3, [pc, #104]	; (8007aec <USBD_SetConfig+0x150>)
 8007a82:	781b      	ldrb	r3, [r3, #0]
 8007a84:	4619      	mov	r1, r3
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	f7fe ff6d 	bl	8006966 <USBD_SetClassConfig>
 8007a8c:	4603      	mov	r3, r0
 8007a8e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007a90:	7bfb      	ldrb	r3, [r7, #15]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d00f      	beq.n	8007ab6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007a96:	6839      	ldr	r1, [r7, #0]
 8007a98:	6878      	ldr	r0, [r7, #4]
 8007a9a:	f000 f918 	bl	8007cce <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	685b      	ldr	r3, [r3, #4]
 8007aa2:	b2db      	uxtb	r3, r3
 8007aa4:	4619      	mov	r1, r3
 8007aa6:	6878      	ldr	r0, [r7, #4]
 8007aa8:	f7fe ff79 	bl	800699e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2202      	movs	r2, #2
 8007ab0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007ab4:	e014      	b.n	8007ae0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	f000 f9b7 	bl	8007e2a <USBD_CtlSendStatus>
      break;
 8007abc:	e010      	b.n	8007ae0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007abe:	6878      	ldr	r0, [r7, #4]
 8007ac0:	f000 f9b3 	bl	8007e2a <USBD_CtlSendStatus>
      break;
 8007ac4:	e00c      	b.n	8007ae0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007ac6:	6839      	ldr	r1, [r7, #0]
 8007ac8:	6878      	ldr	r0, [r7, #4]
 8007aca:	f000 f900 	bl	8007cce <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007ace:	4b07      	ldr	r3, [pc, #28]	; (8007aec <USBD_SetConfig+0x150>)
 8007ad0:	781b      	ldrb	r3, [r3, #0]
 8007ad2:	4619      	mov	r1, r3
 8007ad4:	6878      	ldr	r0, [r7, #4]
 8007ad6:	f7fe ff62 	bl	800699e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007ada:	2303      	movs	r3, #3
 8007adc:	73fb      	strb	r3, [r7, #15]
      break;
 8007ade:	bf00      	nop
  }

  return ret;
 8007ae0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	3710      	adds	r7, #16
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	bd80      	pop	{r7, pc}
 8007aea:	bf00      	nop
 8007aec:	2000022c 	.word	0x2000022c

08007af0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b082      	sub	sp, #8
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
 8007af8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	88db      	ldrh	r3, [r3, #6]
 8007afe:	2b01      	cmp	r3, #1
 8007b00:	d004      	beq.n	8007b0c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007b02:	6839      	ldr	r1, [r7, #0]
 8007b04:	6878      	ldr	r0, [r7, #4]
 8007b06:	f000 f8e2 	bl	8007cce <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007b0a:	e023      	b.n	8007b54 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b12:	b2db      	uxtb	r3, r3
 8007b14:	2b02      	cmp	r3, #2
 8007b16:	dc02      	bgt.n	8007b1e <USBD_GetConfig+0x2e>
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	dc03      	bgt.n	8007b24 <USBD_GetConfig+0x34>
 8007b1c:	e015      	b.n	8007b4a <USBD_GetConfig+0x5a>
 8007b1e:	2b03      	cmp	r3, #3
 8007b20:	d00b      	beq.n	8007b3a <USBD_GetConfig+0x4a>
 8007b22:	e012      	b.n	8007b4a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2200      	movs	r2, #0
 8007b28:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	3308      	adds	r3, #8
 8007b2e:	2201      	movs	r2, #1
 8007b30:	4619      	mov	r1, r3
 8007b32:	6878      	ldr	r0, [r7, #4]
 8007b34:	f000 f93c 	bl	8007db0 <USBD_CtlSendData>
        break;
 8007b38:	e00c      	b.n	8007b54 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	3304      	adds	r3, #4
 8007b3e:	2201      	movs	r2, #1
 8007b40:	4619      	mov	r1, r3
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	f000 f934 	bl	8007db0 <USBD_CtlSendData>
        break;
 8007b48:	e004      	b.n	8007b54 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007b4a:	6839      	ldr	r1, [r7, #0]
 8007b4c:	6878      	ldr	r0, [r7, #4]
 8007b4e:	f000 f8be 	bl	8007cce <USBD_CtlError>
        break;
 8007b52:	bf00      	nop
}
 8007b54:	bf00      	nop
 8007b56:	3708      	adds	r7, #8
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	bd80      	pop	{r7, pc}

08007b5c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b082      	sub	sp, #8
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
 8007b64:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b6c:	b2db      	uxtb	r3, r3
 8007b6e:	3b01      	subs	r3, #1
 8007b70:	2b02      	cmp	r3, #2
 8007b72:	d81e      	bhi.n	8007bb2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	88db      	ldrh	r3, [r3, #6]
 8007b78:	2b02      	cmp	r3, #2
 8007b7a:	d004      	beq.n	8007b86 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007b7c:	6839      	ldr	r1, [r7, #0]
 8007b7e:	6878      	ldr	r0, [r7, #4]
 8007b80:	f000 f8a5 	bl	8007cce <USBD_CtlError>
        break;
 8007b84:	e01a      	b.n	8007bbc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2201      	movs	r2, #1
 8007b8a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d005      	beq.n	8007ba2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	68db      	ldr	r3, [r3, #12]
 8007b9a:	f043 0202 	orr.w	r2, r3, #2
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	330c      	adds	r3, #12
 8007ba6:	2202      	movs	r2, #2
 8007ba8:	4619      	mov	r1, r3
 8007baa:	6878      	ldr	r0, [r7, #4]
 8007bac:	f000 f900 	bl	8007db0 <USBD_CtlSendData>
      break;
 8007bb0:	e004      	b.n	8007bbc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007bb2:	6839      	ldr	r1, [r7, #0]
 8007bb4:	6878      	ldr	r0, [r7, #4]
 8007bb6:	f000 f88a 	bl	8007cce <USBD_CtlError>
      break;
 8007bba:	bf00      	nop
  }
}
 8007bbc:	bf00      	nop
 8007bbe:	3708      	adds	r7, #8
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	bd80      	pop	{r7, pc}

08007bc4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b082      	sub	sp, #8
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
 8007bcc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	885b      	ldrh	r3, [r3, #2]
 8007bd2:	2b01      	cmp	r3, #1
 8007bd4:	d107      	bne.n	8007be6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2201      	movs	r2, #1
 8007bda:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007bde:	6878      	ldr	r0, [r7, #4]
 8007be0:	f000 f923 	bl	8007e2a <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007be4:	e013      	b.n	8007c0e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	885b      	ldrh	r3, [r3, #2]
 8007bea:	2b02      	cmp	r3, #2
 8007bec:	d10b      	bne.n	8007c06 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8007bee:	683b      	ldr	r3, [r7, #0]
 8007bf0:	889b      	ldrh	r3, [r3, #4]
 8007bf2:	0a1b      	lsrs	r3, r3, #8
 8007bf4:	b29b      	uxth	r3, r3
 8007bf6:	b2da      	uxtb	r2, r3
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007bfe:	6878      	ldr	r0, [r7, #4]
 8007c00:	f000 f913 	bl	8007e2a <USBD_CtlSendStatus>
}
 8007c04:	e003      	b.n	8007c0e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007c06:	6839      	ldr	r1, [r7, #0]
 8007c08:	6878      	ldr	r0, [r7, #4]
 8007c0a:	f000 f860 	bl	8007cce <USBD_CtlError>
}
 8007c0e:	bf00      	nop
 8007c10:	3708      	adds	r7, #8
 8007c12:	46bd      	mov	sp, r7
 8007c14:	bd80      	pop	{r7, pc}

08007c16 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c16:	b580      	push	{r7, lr}
 8007c18:	b082      	sub	sp, #8
 8007c1a:	af00      	add	r7, sp, #0
 8007c1c:	6078      	str	r0, [r7, #4]
 8007c1e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c26:	b2db      	uxtb	r3, r3
 8007c28:	3b01      	subs	r3, #1
 8007c2a:	2b02      	cmp	r3, #2
 8007c2c:	d80b      	bhi.n	8007c46 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	885b      	ldrh	r3, [r3, #2]
 8007c32:	2b01      	cmp	r3, #1
 8007c34:	d10c      	bne.n	8007c50 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	2200      	movs	r2, #0
 8007c3a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007c3e:	6878      	ldr	r0, [r7, #4]
 8007c40:	f000 f8f3 	bl	8007e2a <USBD_CtlSendStatus>
      }
      break;
 8007c44:	e004      	b.n	8007c50 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007c46:	6839      	ldr	r1, [r7, #0]
 8007c48:	6878      	ldr	r0, [r7, #4]
 8007c4a:	f000 f840 	bl	8007cce <USBD_CtlError>
      break;
 8007c4e:	e000      	b.n	8007c52 <USBD_ClrFeature+0x3c>
      break;
 8007c50:	bf00      	nop
  }
}
 8007c52:	bf00      	nop
 8007c54:	3708      	adds	r7, #8
 8007c56:	46bd      	mov	sp, r7
 8007c58:	bd80      	pop	{r7, pc}

08007c5a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007c5a:	b580      	push	{r7, lr}
 8007c5c:	b084      	sub	sp, #16
 8007c5e:	af00      	add	r7, sp, #0
 8007c60:	6078      	str	r0, [r7, #4]
 8007c62:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	781a      	ldrb	r2, [r3, #0]
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	3301      	adds	r3, #1
 8007c74:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	781a      	ldrb	r2, [r3, #0]
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	3301      	adds	r3, #1
 8007c82:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007c84:	68f8      	ldr	r0, [r7, #12]
 8007c86:	f7ff fa17 	bl	80070b8 <SWAPBYTE>
 8007c8a:	4603      	mov	r3, r0
 8007c8c:	461a      	mov	r2, r3
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	3301      	adds	r3, #1
 8007c96:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	3301      	adds	r3, #1
 8007c9c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007c9e:	68f8      	ldr	r0, [r7, #12]
 8007ca0:	f7ff fa0a 	bl	80070b8 <SWAPBYTE>
 8007ca4:	4603      	mov	r3, r0
 8007ca6:	461a      	mov	r2, r3
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	3301      	adds	r3, #1
 8007cb0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	3301      	adds	r3, #1
 8007cb6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007cb8:	68f8      	ldr	r0, [r7, #12]
 8007cba:	f7ff f9fd 	bl	80070b8 <SWAPBYTE>
 8007cbe:	4603      	mov	r3, r0
 8007cc0:	461a      	mov	r2, r3
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	80da      	strh	r2, [r3, #6]
}
 8007cc6:	bf00      	nop
 8007cc8:	3710      	adds	r7, #16
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	bd80      	pop	{r7, pc}

08007cce <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007cce:	b580      	push	{r7, lr}
 8007cd0:	b082      	sub	sp, #8
 8007cd2:	af00      	add	r7, sp, #0
 8007cd4:	6078      	str	r0, [r7, #4]
 8007cd6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007cd8:	2180      	movs	r1, #128	; 0x80
 8007cda:	6878      	ldr	r0, [r7, #4]
 8007cdc:	f003 fa2e 	bl	800b13c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007ce0:	2100      	movs	r1, #0
 8007ce2:	6878      	ldr	r0, [r7, #4]
 8007ce4:	f003 fa2a 	bl	800b13c <USBD_LL_StallEP>
}
 8007ce8:	bf00      	nop
 8007cea:	3708      	adds	r7, #8
 8007cec:	46bd      	mov	sp, r7
 8007cee:	bd80      	pop	{r7, pc}

08007cf0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b086      	sub	sp, #24
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	60f8      	str	r0, [r7, #12]
 8007cf8:	60b9      	str	r1, [r7, #8]
 8007cfa:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d036      	beq.n	8007d74 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007d0a:	6938      	ldr	r0, [r7, #16]
 8007d0c:	f000 f836 	bl	8007d7c <USBD_GetLen>
 8007d10:	4603      	mov	r3, r0
 8007d12:	3301      	adds	r3, #1
 8007d14:	b29b      	uxth	r3, r3
 8007d16:	005b      	lsls	r3, r3, #1
 8007d18:	b29a      	uxth	r2, r3
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007d1e:	7dfb      	ldrb	r3, [r7, #23]
 8007d20:	68ba      	ldr	r2, [r7, #8]
 8007d22:	4413      	add	r3, r2
 8007d24:	687a      	ldr	r2, [r7, #4]
 8007d26:	7812      	ldrb	r2, [r2, #0]
 8007d28:	701a      	strb	r2, [r3, #0]
  idx++;
 8007d2a:	7dfb      	ldrb	r3, [r7, #23]
 8007d2c:	3301      	adds	r3, #1
 8007d2e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007d30:	7dfb      	ldrb	r3, [r7, #23]
 8007d32:	68ba      	ldr	r2, [r7, #8]
 8007d34:	4413      	add	r3, r2
 8007d36:	2203      	movs	r2, #3
 8007d38:	701a      	strb	r2, [r3, #0]
  idx++;
 8007d3a:	7dfb      	ldrb	r3, [r7, #23]
 8007d3c:	3301      	adds	r3, #1
 8007d3e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007d40:	e013      	b.n	8007d6a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007d42:	7dfb      	ldrb	r3, [r7, #23]
 8007d44:	68ba      	ldr	r2, [r7, #8]
 8007d46:	4413      	add	r3, r2
 8007d48:	693a      	ldr	r2, [r7, #16]
 8007d4a:	7812      	ldrb	r2, [r2, #0]
 8007d4c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007d4e:	693b      	ldr	r3, [r7, #16]
 8007d50:	3301      	adds	r3, #1
 8007d52:	613b      	str	r3, [r7, #16]
    idx++;
 8007d54:	7dfb      	ldrb	r3, [r7, #23]
 8007d56:	3301      	adds	r3, #1
 8007d58:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007d5a:	7dfb      	ldrb	r3, [r7, #23]
 8007d5c:	68ba      	ldr	r2, [r7, #8]
 8007d5e:	4413      	add	r3, r2
 8007d60:	2200      	movs	r2, #0
 8007d62:	701a      	strb	r2, [r3, #0]
    idx++;
 8007d64:	7dfb      	ldrb	r3, [r7, #23]
 8007d66:	3301      	adds	r3, #1
 8007d68:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007d6a:	693b      	ldr	r3, [r7, #16]
 8007d6c:	781b      	ldrb	r3, [r3, #0]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d1e7      	bne.n	8007d42 <USBD_GetString+0x52>
 8007d72:	e000      	b.n	8007d76 <USBD_GetString+0x86>
    return;
 8007d74:	bf00      	nop
  }
}
 8007d76:	3718      	adds	r7, #24
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	bd80      	pop	{r7, pc}

08007d7c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007d7c:	b480      	push	{r7}
 8007d7e:	b085      	sub	sp, #20
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007d84:	2300      	movs	r3, #0
 8007d86:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007d8c:	e005      	b.n	8007d9a <USBD_GetLen+0x1e>
  {
    len++;
 8007d8e:	7bfb      	ldrb	r3, [r7, #15]
 8007d90:	3301      	adds	r3, #1
 8007d92:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007d94:	68bb      	ldr	r3, [r7, #8]
 8007d96:	3301      	adds	r3, #1
 8007d98:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007d9a:	68bb      	ldr	r3, [r7, #8]
 8007d9c:	781b      	ldrb	r3, [r3, #0]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d1f5      	bne.n	8007d8e <USBD_GetLen+0x12>
  }

  return len;
 8007da2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007da4:	4618      	mov	r0, r3
 8007da6:	3714      	adds	r7, #20
 8007da8:	46bd      	mov	sp, r7
 8007daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dae:	4770      	bx	lr

08007db0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b084      	sub	sp, #16
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	60f8      	str	r0, [r7, #12]
 8007db8:	60b9      	str	r1, [r7, #8]
 8007dba:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	2202      	movs	r2, #2
 8007dc0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	687a      	ldr	r2, [r7, #4]
 8007dc8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	687a      	ldr	r2, [r7, #4]
 8007dce:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	68ba      	ldr	r2, [r7, #8]
 8007dd4:	2100      	movs	r1, #0
 8007dd6:	68f8      	ldr	r0, [r7, #12]
 8007dd8:	f003 fa7e 	bl	800b2d8 <USBD_LL_Transmit>

  return USBD_OK;
 8007ddc:	2300      	movs	r3, #0
}
 8007dde:	4618      	mov	r0, r3
 8007de0:	3710      	adds	r7, #16
 8007de2:	46bd      	mov	sp, r7
 8007de4:	bd80      	pop	{r7, pc}

08007de6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007de6:	b580      	push	{r7, lr}
 8007de8:	b084      	sub	sp, #16
 8007dea:	af00      	add	r7, sp, #0
 8007dec:	60f8      	str	r0, [r7, #12]
 8007dee:	60b9      	str	r1, [r7, #8]
 8007df0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	68ba      	ldr	r2, [r7, #8]
 8007df6:	2100      	movs	r1, #0
 8007df8:	68f8      	ldr	r0, [r7, #12]
 8007dfa:	f003 fa6d 	bl	800b2d8 <USBD_LL_Transmit>

  return USBD_OK;
 8007dfe:	2300      	movs	r3, #0
}
 8007e00:	4618      	mov	r0, r3
 8007e02:	3710      	adds	r7, #16
 8007e04:	46bd      	mov	sp, r7
 8007e06:	bd80      	pop	{r7, pc}

08007e08 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b084      	sub	sp, #16
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	60f8      	str	r0, [r7, #12]
 8007e10:	60b9      	str	r1, [r7, #8]
 8007e12:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	68ba      	ldr	r2, [r7, #8]
 8007e18:	2100      	movs	r1, #0
 8007e1a:	68f8      	ldr	r0, [r7, #12]
 8007e1c:	f003 fa94 	bl	800b348 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007e20:	2300      	movs	r3, #0
}
 8007e22:	4618      	mov	r0, r3
 8007e24:	3710      	adds	r7, #16
 8007e26:	46bd      	mov	sp, r7
 8007e28:	bd80      	pop	{r7, pc}

08007e2a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007e2a:	b580      	push	{r7, lr}
 8007e2c:	b082      	sub	sp, #8
 8007e2e:	af00      	add	r7, sp, #0
 8007e30:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2204      	movs	r2, #4
 8007e36:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	2100      	movs	r1, #0
 8007e40:	6878      	ldr	r0, [r7, #4]
 8007e42:	f003 fa49 	bl	800b2d8 <USBD_LL_Transmit>

  return USBD_OK;
 8007e46:	2300      	movs	r3, #0
}
 8007e48:	4618      	mov	r0, r3
 8007e4a:	3708      	adds	r7, #8
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	bd80      	pop	{r7, pc}

08007e50 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b082      	sub	sp, #8
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2205      	movs	r2, #5
 8007e5c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007e60:	2300      	movs	r3, #0
 8007e62:	2200      	movs	r2, #0
 8007e64:	2100      	movs	r1, #0
 8007e66:	6878      	ldr	r0, [r7, #4]
 8007e68:	f003 fa6e 	bl	800b348 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007e6c:	2300      	movs	r3, #0
}
 8007e6e:	4618      	mov	r0, r3
 8007e70:	3708      	adds	r7, #8
 8007e72:	46bd      	mov	sp, r7
 8007e74:	bd80      	pop	{r7, pc}
	...

08007e78 <__NVIC_SetPriority>:
{
 8007e78:	b480      	push	{r7}
 8007e7a:	b083      	sub	sp, #12
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	4603      	mov	r3, r0
 8007e80:	6039      	str	r1, [r7, #0]
 8007e82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007e84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	db0a      	blt.n	8007ea2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	b2da      	uxtb	r2, r3
 8007e90:	490c      	ldr	r1, [pc, #48]	; (8007ec4 <__NVIC_SetPriority+0x4c>)
 8007e92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e96:	0112      	lsls	r2, r2, #4
 8007e98:	b2d2      	uxtb	r2, r2
 8007e9a:	440b      	add	r3, r1
 8007e9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007ea0:	e00a      	b.n	8007eb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	b2da      	uxtb	r2, r3
 8007ea6:	4908      	ldr	r1, [pc, #32]	; (8007ec8 <__NVIC_SetPriority+0x50>)
 8007ea8:	79fb      	ldrb	r3, [r7, #7]
 8007eaa:	f003 030f 	and.w	r3, r3, #15
 8007eae:	3b04      	subs	r3, #4
 8007eb0:	0112      	lsls	r2, r2, #4
 8007eb2:	b2d2      	uxtb	r2, r2
 8007eb4:	440b      	add	r3, r1
 8007eb6:	761a      	strb	r2, [r3, #24]
}
 8007eb8:	bf00      	nop
 8007eba:	370c      	adds	r7, #12
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec2:	4770      	bx	lr
 8007ec4:	e000e100 	.word	0xe000e100
 8007ec8:	e000ed00 	.word	0xe000ed00

08007ecc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007ed0:	2100      	movs	r1, #0
 8007ed2:	f06f 0004 	mvn.w	r0, #4
 8007ed6:	f7ff ffcf 	bl	8007e78 <__NVIC_SetPriority>
#endif
}
 8007eda:	bf00      	nop
 8007edc:	bd80      	pop	{r7, pc}
	...

08007ee0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007ee0:	b480      	push	{r7}
 8007ee2:	b083      	sub	sp, #12
 8007ee4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007ee6:	f3ef 8305 	mrs	r3, IPSR
 8007eea:	603b      	str	r3, [r7, #0]
  return(result);
 8007eec:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d003      	beq.n	8007efa <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007ef2:	f06f 0305 	mvn.w	r3, #5
 8007ef6:	607b      	str	r3, [r7, #4]
 8007ef8:	e00c      	b.n	8007f14 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007efa:	4b0a      	ldr	r3, [pc, #40]	; (8007f24 <osKernelInitialize+0x44>)
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d105      	bne.n	8007f0e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007f02:	4b08      	ldr	r3, [pc, #32]	; (8007f24 <osKernelInitialize+0x44>)
 8007f04:	2201      	movs	r2, #1
 8007f06:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007f08:	2300      	movs	r3, #0
 8007f0a:	607b      	str	r3, [r7, #4]
 8007f0c:	e002      	b.n	8007f14 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007f0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007f12:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007f14:	687b      	ldr	r3, [r7, #4]
}
 8007f16:	4618      	mov	r0, r3
 8007f18:	370c      	adds	r7, #12
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f20:	4770      	bx	lr
 8007f22:	bf00      	nop
 8007f24:	20000230 	.word	0x20000230

08007f28 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b082      	sub	sp, #8
 8007f2c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007f2e:	f3ef 8305 	mrs	r3, IPSR
 8007f32:	603b      	str	r3, [r7, #0]
  return(result);
 8007f34:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d003      	beq.n	8007f42 <osKernelStart+0x1a>
    stat = osErrorISR;
 8007f3a:	f06f 0305 	mvn.w	r3, #5
 8007f3e:	607b      	str	r3, [r7, #4]
 8007f40:	e010      	b.n	8007f64 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007f42:	4b0b      	ldr	r3, [pc, #44]	; (8007f70 <osKernelStart+0x48>)
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	2b01      	cmp	r3, #1
 8007f48:	d109      	bne.n	8007f5e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007f4a:	f7ff ffbf 	bl	8007ecc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007f4e:	4b08      	ldr	r3, [pc, #32]	; (8007f70 <osKernelStart+0x48>)
 8007f50:	2202      	movs	r2, #2
 8007f52:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007f54:	f001 f866 	bl	8009024 <vTaskStartScheduler>
      stat = osOK;
 8007f58:	2300      	movs	r3, #0
 8007f5a:	607b      	str	r3, [r7, #4]
 8007f5c:	e002      	b.n	8007f64 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007f5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007f62:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007f64:	687b      	ldr	r3, [r7, #4]
}
 8007f66:	4618      	mov	r0, r3
 8007f68:	3708      	adds	r7, #8
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	bd80      	pop	{r7, pc}
 8007f6e:	bf00      	nop
 8007f70:	20000230 	.word	0x20000230

08007f74 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b08e      	sub	sp, #56	; 0x38
 8007f78:	af04      	add	r7, sp, #16
 8007f7a:	60f8      	str	r0, [r7, #12]
 8007f7c:	60b9      	str	r1, [r7, #8]
 8007f7e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007f80:	2300      	movs	r3, #0
 8007f82:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007f84:	f3ef 8305 	mrs	r3, IPSR
 8007f88:	617b      	str	r3, [r7, #20]
  return(result);
 8007f8a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d17e      	bne.n	800808e <osThreadNew+0x11a>
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d07b      	beq.n	800808e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007f96:	2380      	movs	r3, #128	; 0x80
 8007f98:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007f9a:	2318      	movs	r3, #24
 8007f9c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8007fa2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007fa6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d045      	beq.n	800803a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d002      	beq.n	8007fbc <osThreadNew+0x48>
        name = attr->name;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	699b      	ldr	r3, [r3, #24]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d002      	beq.n	8007fca <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	699b      	ldr	r3, [r3, #24]
 8007fc8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007fca:	69fb      	ldr	r3, [r7, #28]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d008      	beq.n	8007fe2 <osThreadNew+0x6e>
 8007fd0:	69fb      	ldr	r3, [r7, #28]
 8007fd2:	2b38      	cmp	r3, #56	; 0x38
 8007fd4:	d805      	bhi.n	8007fe2 <osThreadNew+0x6e>
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	685b      	ldr	r3, [r3, #4]
 8007fda:	f003 0301 	and.w	r3, r3, #1
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d001      	beq.n	8007fe6 <osThreadNew+0x72>
        return (NULL);
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	e054      	b.n	8008090 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	695b      	ldr	r3, [r3, #20]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d003      	beq.n	8007ff6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	695b      	ldr	r3, [r3, #20]
 8007ff2:	089b      	lsrs	r3, r3, #2
 8007ff4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	689b      	ldr	r3, [r3, #8]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d00e      	beq.n	800801c <osThreadNew+0xa8>
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	68db      	ldr	r3, [r3, #12]
 8008002:	2b5b      	cmp	r3, #91	; 0x5b
 8008004:	d90a      	bls.n	800801c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800800a:	2b00      	cmp	r3, #0
 800800c:	d006      	beq.n	800801c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	695b      	ldr	r3, [r3, #20]
 8008012:	2b00      	cmp	r3, #0
 8008014:	d002      	beq.n	800801c <osThreadNew+0xa8>
        mem = 1;
 8008016:	2301      	movs	r3, #1
 8008018:	61bb      	str	r3, [r7, #24]
 800801a:	e010      	b.n	800803e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	689b      	ldr	r3, [r3, #8]
 8008020:	2b00      	cmp	r3, #0
 8008022:	d10c      	bne.n	800803e <osThreadNew+0xca>
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	68db      	ldr	r3, [r3, #12]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d108      	bne.n	800803e <osThreadNew+0xca>
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	691b      	ldr	r3, [r3, #16]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d104      	bne.n	800803e <osThreadNew+0xca>
          mem = 0;
 8008034:	2300      	movs	r3, #0
 8008036:	61bb      	str	r3, [r7, #24]
 8008038:	e001      	b.n	800803e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800803a:	2300      	movs	r3, #0
 800803c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800803e:	69bb      	ldr	r3, [r7, #24]
 8008040:	2b01      	cmp	r3, #1
 8008042:	d110      	bne.n	8008066 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008048:	687a      	ldr	r2, [r7, #4]
 800804a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800804c:	9202      	str	r2, [sp, #8]
 800804e:	9301      	str	r3, [sp, #4]
 8008050:	69fb      	ldr	r3, [r7, #28]
 8008052:	9300      	str	r3, [sp, #0]
 8008054:	68bb      	ldr	r3, [r7, #8]
 8008056:	6a3a      	ldr	r2, [r7, #32]
 8008058:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800805a:	68f8      	ldr	r0, [r7, #12]
 800805c:	f000 fe0c 	bl	8008c78 <xTaskCreateStatic>
 8008060:	4603      	mov	r3, r0
 8008062:	613b      	str	r3, [r7, #16]
 8008064:	e013      	b.n	800808e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8008066:	69bb      	ldr	r3, [r7, #24]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d110      	bne.n	800808e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800806c:	6a3b      	ldr	r3, [r7, #32]
 800806e:	b29a      	uxth	r2, r3
 8008070:	f107 0310 	add.w	r3, r7, #16
 8008074:	9301      	str	r3, [sp, #4]
 8008076:	69fb      	ldr	r3, [r7, #28]
 8008078:	9300      	str	r3, [sp, #0]
 800807a:	68bb      	ldr	r3, [r7, #8]
 800807c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800807e:	68f8      	ldr	r0, [r7, #12]
 8008080:	f000 fe57 	bl	8008d32 <xTaskCreate>
 8008084:	4603      	mov	r3, r0
 8008086:	2b01      	cmp	r3, #1
 8008088:	d001      	beq.n	800808e <osThreadNew+0x11a>
            hTask = NULL;
 800808a:	2300      	movs	r3, #0
 800808c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800808e:	693b      	ldr	r3, [r7, #16]
}
 8008090:	4618      	mov	r0, r3
 8008092:	3728      	adds	r7, #40	; 0x28
 8008094:	46bd      	mov	sp, r7
 8008096:	bd80      	pop	{r7, pc}

08008098 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008098:	b580      	push	{r7, lr}
 800809a:	b084      	sub	sp, #16
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80080a0:	f3ef 8305 	mrs	r3, IPSR
 80080a4:	60bb      	str	r3, [r7, #8]
  return(result);
 80080a6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d003      	beq.n	80080b4 <osDelay+0x1c>
    stat = osErrorISR;
 80080ac:	f06f 0305 	mvn.w	r3, #5
 80080b0:	60fb      	str	r3, [r7, #12]
 80080b2:	e007      	b.n	80080c4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80080b4:	2300      	movs	r3, #0
 80080b6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d002      	beq.n	80080c4 <osDelay+0x2c>
      vTaskDelay(ticks);
 80080be:	6878      	ldr	r0, [r7, #4]
 80080c0:	f000 ff7c 	bl	8008fbc <vTaskDelay>
    }
  }

  return (stat);
 80080c4:	68fb      	ldr	r3, [r7, #12]
}
 80080c6:	4618      	mov	r0, r3
 80080c8:	3710      	adds	r7, #16
 80080ca:	46bd      	mov	sp, r7
 80080cc:	bd80      	pop	{r7, pc}
	...

080080d0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80080d0:	b480      	push	{r7}
 80080d2:	b085      	sub	sp, #20
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	60f8      	str	r0, [r7, #12]
 80080d8:	60b9      	str	r1, [r7, #8]
 80080da:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	4a07      	ldr	r2, [pc, #28]	; (80080fc <vApplicationGetIdleTaskMemory+0x2c>)
 80080e0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80080e2:	68bb      	ldr	r3, [r7, #8]
 80080e4:	4a06      	ldr	r2, [pc, #24]	; (8008100 <vApplicationGetIdleTaskMemory+0x30>)
 80080e6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2280      	movs	r2, #128	; 0x80
 80080ec:	601a      	str	r2, [r3, #0]
}
 80080ee:	bf00      	nop
 80080f0:	3714      	adds	r7, #20
 80080f2:	46bd      	mov	sp, r7
 80080f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f8:	4770      	bx	lr
 80080fa:	bf00      	nop
 80080fc:	20000234 	.word	0x20000234
 8008100:	20000290 	.word	0x20000290

08008104 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008104:	b480      	push	{r7}
 8008106:	b085      	sub	sp, #20
 8008108:	af00      	add	r7, sp, #0
 800810a:	60f8      	str	r0, [r7, #12]
 800810c:	60b9      	str	r1, [r7, #8]
 800810e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	4a07      	ldr	r2, [pc, #28]	; (8008130 <vApplicationGetTimerTaskMemory+0x2c>)
 8008114:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008116:	68bb      	ldr	r3, [r7, #8]
 8008118:	4a06      	ldr	r2, [pc, #24]	; (8008134 <vApplicationGetTimerTaskMemory+0x30>)
 800811a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008122:	601a      	str	r2, [r3, #0]
}
 8008124:	bf00      	nop
 8008126:	3714      	adds	r7, #20
 8008128:	46bd      	mov	sp, r7
 800812a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812e:	4770      	bx	lr
 8008130:	20000490 	.word	0x20000490
 8008134:	200004ec 	.word	0x200004ec

08008138 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008138:	b480      	push	{r7}
 800813a:	b083      	sub	sp, #12
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	f103 0208 	add.w	r2, r3, #8
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008150:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	f103 0208 	add.w	r2, r3, #8
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	f103 0208 	add.w	r2, r3, #8
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2200      	movs	r2, #0
 800816a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800816c:	bf00      	nop
 800816e:	370c      	adds	r7, #12
 8008170:	46bd      	mov	sp, r7
 8008172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008176:	4770      	bx	lr

08008178 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008178:	b480      	push	{r7}
 800817a:	b083      	sub	sp, #12
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2200      	movs	r2, #0
 8008184:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008186:	bf00      	nop
 8008188:	370c      	adds	r7, #12
 800818a:	46bd      	mov	sp, r7
 800818c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008190:	4770      	bx	lr

08008192 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008192:	b480      	push	{r7}
 8008194:	b085      	sub	sp, #20
 8008196:	af00      	add	r7, sp, #0
 8008198:	6078      	str	r0, [r7, #4]
 800819a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	685b      	ldr	r3, [r3, #4]
 80081a0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	68fa      	ldr	r2, [r7, #12]
 80081a6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	689a      	ldr	r2, [r3, #8]
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	689b      	ldr	r3, [r3, #8]
 80081b4:	683a      	ldr	r2, [r7, #0]
 80081b6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	683a      	ldr	r2, [r7, #0]
 80081bc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80081be:	683b      	ldr	r3, [r7, #0]
 80081c0:	687a      	ldr	r2, [r7, #4]
 80081c2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	1c5a      	adds	r2, r3, #1
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	601a      	str	r2, [r3, #0]
}
 80081ce:	bf00      	nop
 80081d0:	3714      	adds	r7, #20
 80081d2:	46bd      	mov	sp, r7
 80081d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d8:	4770      	bx	lr

080081da <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80081da:	b480      	push	{r7}
 80081dc:	b085      	sub	sp, #20
 80081de:	af00      	add	r7, sp, #0
 80081e0:	6078      	str	r0, [r7, #4]
 80081e2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80081ea:	68bb      	ldr	r3, [r7, #8]
 80081ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80081f0:	d103      	bne.n	80081fa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	691b      	ldr	r3, [r3, #16]
 80081f6:	60fb      	str	r3, [r7, #12]
 80081f8:	e00c      	b.n	8008214 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	3308      	adds	r3, #8
 80081fe:	60fb      	str	r3, [r7, #12]
 8008200:	e002      	b.n	8008208 <vListInsert+0x2e>
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	685b      	ldr	r3, [r3, #4]
 8008206:	60fb      	str	r3, [r7, #12]
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	685b      	ldr	r3, [r3, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	68ba      	ldr	r2, [r7, #8]
 8008210:	429a      	cmp	r2, r3
 8008212:	d2f6      	bcs.n	8008202 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	685a      	ldr	r2, [r3, #4]
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800821c:	683b      	ldr	r3, [r7, #0]
 800821e:	685b      	ldr	r3, [r3, #4]
 8008220:	683a      	ldr	r2, [r7, #0]
 8008222:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	68fa      	ldr	r2, [r7, #12]
 8008228:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	683a      	ldr	r2, [r7, #0]
 800822e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	687a      	ldr	r2, [r7, #4]
 8008234:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	1c5a      	adds	r2, r3, #1
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	601a      	str	r2, [r3, #0]
}
 8008240:	bf00      	nop
 8008242:	3714      	adds	r7, #20
 8008244:	46bd      	mov	sp, r7
 8008246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824a:	4770      	bx	lr

0800824c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800824c:	b480      	push	{r7}
 800824e:	b085      	sub	sp, #20
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	691b      	ldr	r3, [r3, #16]
 8008258:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	685b      	ldr	r3, [r3, #4]
 800825e:	687a      	ldr	r2, [r7, #4]
 8008260:	6892      	ldr	r2, [r2, #8]
 8008262:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	689b      	ldr	r3, [r3, #8]
 8008268:	687a      	ldr	r2, [r7, #4]
 800826a:	6852      	ldr	r2, [r2, #4]
 800826c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	685b      	ldr	r3, [r3, #4]
 8008272:	687a      	ldr	r2, [r7, #4]
 8008274:	429a      	cmp	r2, r3
 8008276:	d103      	bne.n	8008280 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	689a      	ldr	r2, [r3, #8]
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2200      	movs	r2, #0
 8008284:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	1e5a      	subs	r2, r3, #1
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	681b      	ldr	r3, [r3, #0]
}
 8008294:	4618      	mov	r0, r3
 8008296:	3714      	adds	r7, #20
 8008298:	46bd      	mov	sp, r7
 800829a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829e:	4770      	bx	lr

080082a0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b084      	sub	sp, #16
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
 80082a8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d10a      	bne.n	80082ca <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80082b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082b8:	f383 8811 	msr	BASEPRI, r3
 80082bc:	f3bf 8f6f 	isb	sy
 80082c0:	f3bf 8f4f 	dsb	sy
 80082c4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80082c6:	bf00      	nop
 80082c8:	e7fe      	b.n	80082c8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80082ca:	f002 f84b 	bl	800a364 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	681a      	ldr	r2, [r3, #0]
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082d6:	68f9      	ldr	r1, [r7, #12]
 80082d8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80082da:	fb01 f303 	mul.w	r3, r1, r3
 80082de:	441a      	add	r2, r3
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	2200      	movs	r2, #0
 80082e8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	681a      	ldr	r2, [r3, #0]
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	681a      	ldr	r2, [r3, #0]
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082fa:	3b01      	subs	r3, #1
 80082fc:	68f9      	ldr	r1, [r7, #12]
 80082fe:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008300:	fb01 f303 	mul.w	r3, r1, r3
 8008304:	441a      	add	r2, r3
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	22ff      	movs	r2, #255	; 0xff
 800830e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	22ff      	movs	r2, #255	; 0xff
 8008316:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d114      	bne.n	800834a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	691b      	ldr	r3, [r3, #16]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d01a      	beq.n	800835e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	3310      	adds	r3, #16
 800832c:	4618      	mov	r0, r3
 800832e:	f001 f903 	bl	8009538 <xTaskRemoveFromEventList>
 8008332:	4603      	mov	r3, r0
 8008334:	2b00      	cmp	r3, #0
 8008336:	d012      	beq.n	800835e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008338:	4b0c      	ldr	r3, [pc, #48]	; (800836c <xQueueGenericReset+0xcc>)
 800833a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800833e:	601a      	str	r2, [r3, #0]
 8008340:	f3bf 8f4f 	dsb	sy
 8008344:	f3bf 8f6f 	isb	sy
 8008348:	e009      	b.n	800835e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	3310      	adds	r3, #16
 800834e:	4618      	mov	r0, r3
 8008350:	f7ff fef2 	bl	8008138 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	3324      	adds	r3, #36	; 0x24
 8008358:	4618      	mov	r0, r3
 800835a:	f7ff feed 	bl	8008138 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800835e:	f002 f831 	bl	800a3c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008362:	2301      	movs	r3, #1
}
 8008364:	4618      	mov	r0, r3
 8008366:	3710      	adds	r7, #16
 8008368:	46bd      	mov	sp, r7
 800836a:	bd80      	pop	{r7, pc}
 800836c:	e000ed04 	.word	0xe000ed04

08008370 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008370:	b580      	push	{r7, lr}
 8008372:	b08e      	sub	sp, #56	; 0x38
 8008374:	af02      	add	r7, sp, #8
 8008376:	60f8      	str	r0, [r7, #12]
 8008378:	60b9      	str	r1, [r7, #8]
 800837a:	607a      	str	r2, [r7, #4]
 800837c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d10a      	bne.n	800839a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008388:	f383 8811 	msr	BASEPRI, r3
 800838c:	f3bf 8f6f 	isb	sy
 8008390:	f3bf 8f4f 	dsb	sy
 8008394:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008396:	bf00      	nop
 8008398:	e7fe      	b.n	8008398 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800839a:	683b      	ldr	r3, [r7, #0]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d10a      	bne.n	80083b6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80083a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083a4:	f383 8811 	msr	BASEPRI, r3
 80083a8:	f3bf 8f6f 	isb	sy
 80083ac:	f3bf 8f4f 	dsb	sy
 80083b0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80083b2:	bf00      	nop
 80083b4:	e7fe      	b.n	80083b4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d002      	beq.n	80083c2 <xQueueGenericCreateStatic+0x52>
 80083bc:	68bb      	ldr	r3, [r7, #8]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d001      	beq.n	80083c6 <xQueueGenericCreateStatic+0x56>
 80083c2:	2301      	movs	r3, #1
 80083c4:	e000      	b.n	80083c8 <xQueueGenericCreateStatic+0x58>
 80083c6:	2300      	movs	r3, #0
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d10a      	bne.n	80083e2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80083cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083d0:	f383 8811 	msr	BASEPRI, r3
 80083d4:	f3bf 8f6f 	isb	sy
 80083d8:	f3bf 8f4f 	dsb	sy
 80083dc:	623b      	str	r3, [r7, #32]
}
 80083de:	bf00      	nop
 80083e0:	e7fe      	b.n	80083e0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d102      	bne.n	80083ee <xQueueGenericCreateStatic+0x7e>
 80083e8:	68bb      	ldr	r3, [r7, #8]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d101      	bne.n	80083f2 <xQueueGenericCreateStatic+0x82>
 80083ee:	2301      	movs	r3, #1
 80083f0:	e000      	b.n	80083f4 <xQueueGenericCreateStatic+0x84>
 80083f2:	2300      	movs	r3, #0
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d10a      	bne.n	800840e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80083f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083fc:	f383 8811 	msr	BASEPRI, r3
 8008400:	f3bf 8f6f 	isb	sy
 8008404:	f3bf 8f4f 	dsb	sy
 8008408:	61fb      	str	r3, [r7, #28]
}
 800840a:	bf00      	nop
 800840c:	e7fe      	b.n	800840c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800840e:	2350      	movs	r3, #80	; 0x50
 8008410:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008412:	697b      	ldr	r3, [r7, #20]
 8008414:	2b50      	cmp	r3, #80	; 0x50
 8008416:	d00a      	beq.n	800842e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800841c:	f383 8811 	msr	BASEPRI, r3
 8008420:	f3bf 8f6f 	isb	sy
 8008424:	f3bf 8f4f 	dsb	sy
 8008428:	61bb      	str	r3, [r7, #24]
}
 800842a:	bf00      	nop
 800842c:	e7fe      	b.n	800842c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800842e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008436:	2b00      	cmp	r3, #0
 8008438:	d00d      	beq.n	8008456 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800843a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800843c:	2201      	movs	r2, #1
 800843e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008442:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008448:	9300      	str	r3, [sp, #0]
 800844a:	4613      	mov	r3, r2
 800844c:	687a      	ldr	r2, [r7, #4]
 800844e:	68b9      	ldr	r1, [r7, #8]
 8008450:	68f8      	ldr	r0, [r7, #12]
 8008452:	f000 f805 	bl	8008460 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008458:	4618      	mov	r0, r3
 800845a:	3730      	adds	r7, #48	; 0x30
 800845c:	46bd      	mov	sp, r7
 800845e:	bd80      	pop	{r7, pc}

08008460 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008460:	b580      	push	{r7, lr}
 8008462:	b084      	sub	sp, #16
 8008464:	af00      	add	r7, sp, #0
 8008466:	60f8      	str	r0, [r7, #12]
 8008468:	60b9      	str	r1, [r7, #8]
 800846a:	607a      	str	r2, [r7, #4]
 800846c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800846e:	68bb      	ldr	r3, [r7, #8]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d103      	bne.n	800847c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008474:	69bb      	ldr	r3, [r7, #24]
 8008476:	69ba      	ldr	r2, [r7, #24]
 8008478:	601a      	str	r2, [r3, #0]
 800847a:	e002      	b.n	8008482 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800847c:	69bb      	ldr	r3, [r7, #24]
 800847e:	687a      	ldr	r2, [r7, #4]
 8008480:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008482:	69bb      	ldr	r3, [r7, #24]
 8008484:	68fa      	ldr	r2, [r7, #12]
 8008486:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008488:	69bb      	ldr	r3, [r7, #24]
 800848a:	68ba      	ldr	r2, [r7, #8]
 800848c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800848e:	2101      	movs	r1, #1
 8008490:	69b8      	ldr	r0, [r7, #24]
 8008492:	f7ff ff05 	bl	80082a0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008496:	69bb      	ldr	r3, [r7, #24]
 8008498:	78fa      	ldrb	r2, [r7, #3]
 800849a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800849e:	bf00      	nop
 80084a0:	3710      	adds	r7, #16
 80084a2:	46bd      	mov	sp, r7
 80084a4:	bd80      	pop	{r7, pc}
	...

080084a8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b08e      	sub	sp, #56	; 0x38
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	60f8      	str	r0, [r7, #12]
 80084b0:	60b9      	str	r1, [r7, #8]
 80084b2:	607a      	str	r2, [r7, #4]
 80084b4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80084b6:	2300      	movs	r3, #0
 80084b8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80084be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d10a      	bne.n	80084da <xQueueGenericSend+0x32>
	__asm volatile
 80084c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084c8:	f383 8811 	msr	BASEPRI, r3
 80084cc:	f3bf 8f6f 	isb	sy
 80084d0:	f3bf 8f4f 	dsb	sy
 80084d4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80084d6:	bf00      	nop
 80084d8:	e7fe      	b.n	80084d8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80084da:	68bb      	ldr	r3, [r7, #8]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d103      	bne.n	80084e8 <xQueueGenericSend+0x40>
 80084e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d101      	bne.n	80084ec <xQueueGenericSend+0x44>
 80084e8:	2301      	movs	r3, #1
 80084ea:	e000      	b.n	80084ee <xQueueGenericSend+0x46>
 80084ec:	2300      	movs	r3, #0
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d10a      	bne.n	8008508 <xQueueGenericSend+0x60>
	__asm volatile
 80084f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084f6:	f383 8811 	msr	BASEPRI, r3
 80084fa:	f3bf 8f6f 	isb	sy
 80084fe:	f3bf 8f4f 	dsb	sy
 8008502:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008504:	bf00      	nop
 8008506:	e7fe      	b.n	8008506 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	2b02      	cmp	r3, #2
 800850c:	d103      	bne.n	8008516 <xQueueGenericSend+0x6e>
 800850e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008510:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008512:	2b01      	cmp	r3, #1
 8008514:	d101      	bne.n	800851a <xQueueGenericSend+0x72>
 8008516:	2301      	movs	r3, #1
 8008518:	e000      	b.n	800851c <xQueueGenericSend+0x74>
 800851a:	2300      	movs	r3, #0
 800851c:	2b00      	cmp	r3, #0
 800851e:	d10a      	bne.n	8008536 <xQueueGenericSend+0x8e>
	__asm volatile
 8008520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008524:	f383 8811 	msr	BASEPRI, r3
 8008528:	f3bf 8f6f 	isb	sy
 800852c:	f3bf 8f4f 	dsb	sy
 8008530:	623b      	str	r3, [r7, #32]
}
 8008532:	bf00      	nop
 8008534:	e7fe      	b.n	8008534 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008536:	f001 f9bd 	bl	80098b4 <xTaskGetSchedulerState>
 800853a:	4603      	mov	r3, r0
 800853c:	2b00      	cmp	r3, #0
 800853e:	d102      	bne.n	8008546 <xQueueGenericSend+0x9e>
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d101      	bne.n	800854a <xQueueGenericSend+0xa2>
 8008546:	2301      	movs	r3, #1
 8008548:	e000      	b.n	800854c <xQueueGenericSend+0xa4>
 800854a:	2300      	movs	r3, #0
 800854c:	2b00      	cmp	r3, #0
 800854e:	d10a      	bne.n	8008566 <xQueueGenericSend+0xbe>
	__asm volatile
 8008550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008554:	f383 8811 	msr	BASEPRI, r3
 8008558:	f3bf 8f6f 	isb	sy
 800855c:	f3bf 8f4f 	dsb	sy
 8008560:	61fb      	str	r3, [r7, #28]
}
 8008562:	bf00      	nop
 8008564:	e7fe      	b.n	8008564 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008566:	f001 fefd 	bl	800a364 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800856a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800856c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800856e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008570:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008572:	429a      	cmp	r2, r3
 8008574:	d302      	bcc.n	800857c <xQueueGenericSend+0xd4>
 8008576:	683b      	ldr	r3, [r7, #0]
 8008578:	2b02      	cmp	r3, #2
 800857a:	d129      	bne.n	80085d0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800857c:	683a      	ldr	r2, [r7, #0]
 800857e:	68b9      	ldr	r1, [r7, #8]
 8008580:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008582:	f000 fa0b 	bl	800899c <prvCopyDataToQueue>
 8008586:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800858a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800858c:	2b00      	cmp	r3, #0
 800858e:	d010      	beq.n	80085b2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008592:	3324      	adds	r3, #36	; 0x24
 8008594:	4618      	mov	r0, r3
 8008596:	f000 ffcf 	bl	8009538 <xTaskRemoveFromEventList>
 800859a:	4603      	mov	r3, r0
 800859c:	2b00      	cmp	r3, #0
 800859e:	d013      	beq.n	80085c8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80085a0:	4b3f      	ldr	r3, [pc, #252]	; (80086a0 <xQueueGenericSend+0x1f8>)
 80085a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085a6:	601a      	str	r2, [r3, #0]
 80085a8:	f3bf 8f4f 	dsb	sy
 80085ac:	f3bf 8f6f 	isb	sy
 80085b0:	e00a      	b.n	80085c8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80085b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d007      	beq.n	80085c8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80085b8:	4b39      	ldr	r3, [pc, #228]	; (80086a0 <xQueueGenericSend+0x1f8>)
 80085ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085be:	601a      	str	r2, [r3, #0]
 80085c0:	f3bf 8f4f 	dsb	sy
 80085c4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80085c8:	f001 fefc 	bl	800a3c4 <vPortExitCritical>
				return pdPASS;
 80085cc:	2301      	movs	r3, #1
 80085ce:	e063      	b.n	8008698 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d103      	bne.n	80085de <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80085d6:	f001 fef5 	bl	800a3c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80085da:	2300      	movs	r3, #0
 80085dc:	e05c      	b.n	8008698 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80085de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d106      	bne.n	80085f2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80085e4:	f107 0314 	add.w	r3, r7, #20
 80085e8:	4618      	mov	r0, r3
 80085ea:	f001 f809 	bl	8009600 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80085ee:	2301      	movs	r3, #1
 80085f0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80085f2:	f001 fee7 	bl	800a3c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80085f6:	f000 fd7b 	bl	80090f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80085fa:	f001 feb3 	bl	800a364 <vPortEnterCritical>
 80085fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008600:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008604:	b25b      	sxtb	r3, r3
 8008606:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800860a:	d103      	bne.n	8008614 <xQueueGenericSend+0x16c>
 800860c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800860e:	2200      	movs	r2, #0
 8008610:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008616:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800861a:	b25b      	sxtb	r3, r3
 800861c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008620:	d103      	bne.n	800862a <xQueueGenericSend+0x182>
 8008622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008624:	2200      	movs	r2, #0
 8008626:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800862a:	f001 fecb 	bl	800a3c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800862e:	1d3a      	adds	r2, r7, #4
 8008630:	f107 0314 	add.w	r3, r7, #20
 8008634:	4611      	mov	r1, r2
 8008636:	4618      	mov	r0, r3
 8008638:	f000 fff8 	bl	800962c <xTaskCheckForTimeOut>
 800863c:	4603      	mov	r3, r0
 800863e:	2b00      	cmp	r3, #0
 8008640:	d124      	bne.n	800868c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008642:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008644:	f000 faa2 	bl	8008b8c <prvIsQueueFull>
 8008648:	4603      	mov	r3, r0
 800864a:	2b00      	cmp	r3, #0
 800864c:	d018      	beq.n	8008680 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800864e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008650:	3310      	adds	r3, #16
 8008652:	687a      	ldr	r2, [r7, #4]
 8008654:	4611      	mov	r1, r2
 8008656:	4618      	mov	r0, r3
 8008658:	f000 ff1e 	bl	8009498 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800865c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800865e:	f000 fa2d 	bl	8008abc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008662:	f000 fd53 	bl	800910c <xTaskResumeAll>
 8008666:	4603      	mov	r3, r0
 8008668:	2b00      	cmp	r3, #0
 800866a:	f47f af7c 	bne.w	8008566 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800866e:	4b0c      	ldr	r3, [pc, #48]	; (80086a0 <xQueueGenericSend+0x1f8>)
 8008670:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008674:	601a      	str	r2, [r3, #0]
 8008676:	f3bf 8f4f 	dsb	sy
 800867a:	f3bf 8f6f 	isb	sy
 800867e:	e772      	b.n	8008566 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008680:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008682:	f000 fa1b 	bl	8008abc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008686:	f000 fd41 	bl	800910c <xTaskResumeAll>
 800868a:	e76c      	b.n	8008566 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800868c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800868e:	f000 fa15 	bl	8008abc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008692:	f000 fd3b 	bl	800910c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008696:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008698:	4618      	mov	r0, r3
 800869a:	3738      	adds	r7, #56	; 0x38
 800869c:	46bd      	mov	sp, r7
 800869e:	bd80      	pop	{r7, pc}
 80086a0:	e000ed04 	.word	0xe000ed04

080086a4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b090      	sub	sp, #64	; 0x40
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	60f8      	str	r0, [r7, #12]
 80086ac:	60b9      	str	r1, [r7, #8]
 80086ae:	607a      	str	r2, [r7, #4]
 80086b0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80086b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d10a      	bne.n	80086d2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80086bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086c0:	f383 8811 	msr	BASEPRI, r3
 80086c4:	f3bf 8f6f 	isb	sy
 80086c8:	f3bf 8f4f 	dsb	sy
 80086cc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80086ce:	bf00      	nop
 80086d0:	e7fe      	b.n	80086d0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80086d2:	68bb      	ldr	r3, [r7, #8]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d103      	bne.n	80086e0 <xQueueGenericSendFromISR+0x3c>
 80086d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d101      	bne.n	80086e4 <xQueueGenericSendFromISR+0x40>
 80086e0:	2301      	movs	r3, #1
 80086e2:	e000      	b.n	80086e6 <xQueueGenericSendFromISR+0x42>
 80086e4:	2300      	movs	r3, #0
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d10a      	bne.n	8008700 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80086ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086ee:	f383 8811 	msr	BASEPRI, r3
 80086f2:	f3bf 8f6f 	isb	sy
 80086f6:	f3bf 8f4f 	dsb	sy
 80086fa:	627b      	str	r3, [r7, #36]	; 0x24
}
 80086fc:	bf00      	nop
 80086fe:	e7fe      	b.n	80086fe <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008700:	683b      	ldr	r3, [r7, #0]
 8008702:	2b02      	cmp	r3, #2
 8008704:	d103      	bne.n	800870e <xQueueGenericSendFromISR+0x6a>
 8008706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008708:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800870a:	2b01      	cmp	r3, #1
 800870c:	d101      	bne.n	8008712 <xQueueGenericSendFromISR+0x6e>
 800870e:	2301      	movs	r3, #1
 8008710:	e000      	b.n	8008714 <xQueueGenericSendFromISR+0x70>
 8008712:	2300      	movs	r3, #0
 8008714:	2b00      	cmp	r3, #0
 8008716:	d10a      	bne.n	800872e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800871c:	f383 8811 	msr	BASEPRI, r3
 8008720:	f3bf 8f6f 	isb	sy
 8008724:	f3bf 8f4f 	dsb	sy
 8008728:	623b      	str	r3, [r7, #32]
}
 800872a:	bf00      	nop
 800872c:	e7fe      	b.n	800872c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800872e:	f001 fefb 	bl	800a528 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008732:	f3ef 8211 	mrs	r2, BASEPRI
 8008736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800873a:	f383 8811 	msr	BASEPRI, r3
 800873e:	f3bf 8f6f 	isb	sy
 8008742:	f3bf 8f4f 	dsb	sy
 8008746:	61fa      	str	r2, [r7, #28]
 8008748:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800874a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800874c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800874e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008750:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008754:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008756:	429a      	cmp	r2, r3
 8008758:	d302      	bcc.n	8008760 <xQueueGenericSendFromISR+0xbc>
 800875a:	683b      	ldr	r3, [r7, #0]
 800875c:	2b02      	cmp	r3, #2
 800875e:	d12f      	bne.n	80087c0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008762:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008766:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800876a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800876c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800876e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008770:	683a      	ldr	r2, [r7, #0]
 8008772:	68b9      	ldr	r1, [r7, #8]
 8008774:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008776:	f000 f911 	bl	800899c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800877a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800877e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008782:	d112      	bne.n	80087aa <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008788:	2b00      	cmp	r3, #0
 800878a:	d016      	beq.n	80087ba <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800878c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800878e:	3324      	adds	r3, #36	; 0x24
 8008790:	4618      	mov	r0, r3
 8008792:	f000 fed1 	bl	8009538 <xTaskRemoveFromEventList>
 8008796:	4603      	mov	r3, r0
 8008798:	2b00      	cmp	r3, #0
 800879a:	d00e      	beq.n	80087ba <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d00b      	beq.n	80087ba <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	2201      	movs	r2, #1
 80087a6:	601a      	str	r2, [r3, #0]
 80087a8:	e007      	b.n	80087ba <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80087aa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80087ae:	3301      	adds	r3, #1
 80087b0:	b2db      	uxtb	r3, r3
 80087b2:	b25a      	sxtb	r2, r3
 80087b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80087ba:	2301      	movs	r3, #1
 80087bc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80087be:	e001      	b.n	80087c4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80087c0:	2300      	movs	r3, #0
 80087c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80087c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087c6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80087c8:	697b      	ldr	r3, [r7, #20]
 80087ca:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80087ce:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80087d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80087d2:	4618      	mov	r0, r3
 80087d4:	3740      	adds	r7, #64	; 0x40
 80087d6:	46bd      	mov	sp, r7
 80087d8:	bd80      	pop	{r7, pc}
	...

080087dc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	b08c      	sub	sp, #48	; 0x30
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	60f8      	str	r0, [r7, #12]
 80087e4:	60b9      	str	r1, [r7, #8]
 80087e6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80087e8:	2300      	movs	r3, #0
 80087ea:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80087f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d10a      	bne.n	800880c <xQueueReceive+0x30>
	__asm volatile
 80087f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087fa:	f383 8811 	msr	BASEPRI, r3
 80087fe:	f3bf 8f6f 	isb	sy
 8008802:	f3bf 8f4f 	dsb	sy
 8008806:	623b      	str	r3, [r7, #32]
}
 8008808:	bf00      	nop
 800880a:	e7fe      	b.n	800880a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800880c:	68bb      	ldr	r3, [r7, #8]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d103      	bne.n	800881a <xQueueReceive+0x3e>
 8008812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008816:	2b00      	cmp	r3, #0
 8008818:	d101      	bne.n	800881e <xQueueReceive+0x42>
 800881a:	2301      	movs	r3, #1
 800881c:	e000      	b.n	8008820 <xQueueReceive+0x44>
 800881e:	2300      	movs	r3, #0
 8008820:	2b00      	cmp	r3, #0
 8008822:	d10a      	bne.n	800883a <xQueueReceive+0x5e>
	__asm volatile
 8008824:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008828:	f383 8811 	msr	BASEPRI, r3
 800882c:	f3bf 8f6f 	isb	sy
 8008830:	f3bf 8f4f 	dsb	sy
 8008834:	61fb      	str	r3, [r7, #28]
}
 8008836:	bf00      	nop
 8008838:	e7fe      	b.n	8008838 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800883a:	f001 f83b 	bl	80098b4 <xTaskGetSchedulerState>
 800883e:	4603      	mov	r3, r0
 8008840:	2b00      	cmp	r3, #0
 8008842:	d102      	bne.n	800884a <xQueueReceive+0x6e>
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2b00      	cmp	r3, #0
 8008848:	d101      	bne.n	800884e <xQueueReceive+0x72>
 800884a:	2301      	movs	r3, #1
 800884c:	e000      	b.n	8008850 <xQueueReceive+0x74>
 800884e:	2300      	movs	r3, #0
 8008850:	2b00      	cmp	r3, #0
 8008852:	d10a      	bne.n	800886a <xQueueReceive+0x8e>
	__asm volatile
 8008854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008858:	f383 8811 	msr	BASEPRI, r3
 800885c:	f3bf 8f6f 	isb	sy
 8008860:	f3bf 8f4f 	dsb	sy
 8008864:	61bb      	str	r3, [r7, #24]
}
 8008866:	bf00      	nop
 8008868:	e7fe      	b.n	8008868 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800886a:	f001 fd7b 	bl	800a364 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800886e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008872:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008876:	2b00      	cmp	r3, #0
 8008878:	d01f      	beq.n	80088ba <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800887a:	68b9      	ldr	r1, [r7, #8]
 800887c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800887e:	f000 f8f7 	bl	8008a70 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008884:	1e5a      	subs	r2, r3, #1
 8008886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008888:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800888a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800888c:	691b      	ldr	r3, [r3, #16]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d00f      	beq.n	80088b2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008894:	3310      	adds	r3, #16
 8008896:	4618      	mov	r0, r3
 8008898:	f000 fe4e 	bl	8009538 <xTaskRemoveFromEventList>
 800889c:	4603      	mov	r3, r0
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d007      	beq.n	80088b2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80088a2:	4b3d      	ldr	r3, [pc, #244]	; (8008998 <xQueueReceive+0x1bc>)
 80088a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80088a8:	601a      	str	r2, [r3, #0]
 80088aa:	f3bf 8f4f 	dsb	sy
 80088ae:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80088b2:	f001 fd87 	bl	800a3c4 <vPortExitCritical>
				return pdPASS;
 80088b6:	2301      	movs	r3, #1
 80088b8:	e069      	b.n	800898e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d103      	bne.n	80088c8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80088c0:	f001 fd80 	bl	800a3c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80088c4:	2300      	movs	r3, #0
 80088c6:	e062      	b.n	800898e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80088c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d106      	bne.n	80088dc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80088ce:	f107 0310 	add.w	r3, r7, #16
 80088d2:	4618      	mov	r0, r3
 80088d4:	f000 fe94 	bl	8009600 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80088d8:	2301      	movs	r3, #1
 80088da:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80088dc:	f001 fd72 	bl	800a3c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80088e0:	f000 fc06 	bl	80090f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80088e4:	f001 fd3e 	bl	800a364 <vPortEnterCritical>
 80088e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088ea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80088ee:	b25b      	sxtb	r3, r3
 80088f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80088f4:	d103      	bne.n	80088fe <xQueueReceive+0x122>
 80088f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088f8:	2200      	movs	r2, #0
 80088fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80088fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008900:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008904:	b25b      	sxtb	r3, r3
 8008906:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800890a:	d103      	bne.n	8008914 <xQueueReceive+0x138>
 800890c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800890e:	2200      	movs	r2, #0
 8008910:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008914:	f001 fd56 	bl	800a3c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008918:	1d3a      	adds	r2, r7, #4
 800891a:	f107 0310 	add.w	r3, r7, #16
 800891e:	4611      	mov	r1, r2
 8008920:	4618      	mov	r0, r3
 8008922:	f000 fe83 	bl	800962c <xTaskCheckForTimeOut>
 8008926:	4603      	mov	r3, r0
 8008928:	2b00      	cmp	r3, #0
 800892a:	d123      	bne.n	8008974 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800892c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800892e:	f000 f917 	bl	8008b60 <prvIsQueueEmpty>
 8008932:	4603      	mov	r3, r0
 8008934:	2b00      	cmp	r3, #0
 8008936:	d017      	beq.n	8008968 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800893a:	3324      	adds	r3, #36	; 0x24
 800893c:	687a      	ldr	r2, [r7, #4]
 800893e:	4611      	mov	r1, r2
 8008940:	4618      	mov	r0, r3
 8008942:	f000 fda9 	bl	8009498 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008946:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008948:	f000 f8b8 	bl	8008abc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800894c:	f000 fbde 	bl	800910c <xTaskResumeAll>
 8008950:	4603      	mov	r3, r0
 8008952:	2b00      	cmp	r3, #0
 8008954:	d189      	bne.n	800886a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8008956:	4b10      	ldr	r3, [pc, #64]	; (8008998 <xQueueReceive+0x1bc>)
 8008958:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800895c:	601a      	str	r2, [r3, #0]
 800895e:	f3bf 8f4f 	dsb	sy
 8008962:	f3bf 8f6f 	isb	sy
 8008966:	e780      	b.n	800886a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008968:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800896a:	f000 f8a7 	bl	8008abc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800896e:	f000 fbcd 	bl	800910c <xTaskResumeAll>
 8008972:	e77a      	b.n	800886a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008974:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008976:	f000 f8a1 	bl	8008abc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800897a:	f000 fbc7 	bl	800910c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800897e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008980:	f000 f8ee 	bl	8008b60 <prvIsQueueEmpty>
 8008984:	4603      	mov	r3, r0
 8008986:	2b00      	cmp	r3, #0
 8008988:	f43f af6f 	beq.w	800886a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800898c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800898e:	4618      	mov	r0, r3
 8008990:	3730      	adds	r7, #48	; 0x30
 8008992:	46bd      	mov	sp, r7
 8008994:	bd80      	pop	{r7, pc}
 8008996:	bf00      	nop
 8008998:	e000ed04 	.word	0xe000ed04

0800899c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800899c:	b580      	push	{r7, lr}
 800899e:	b086      	sub	sp, #24
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	60f8      	str	r0, [r7, #12]
 80089a4:	60b9      	str	r1, [r7, #8]
 80089a6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80089a8:	2300      	movs	r3, #0
 80089aa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089b0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d10d      	bne.n	80089d6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d14d      	bne.n	8008a5e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	689b      	ldr	r3, [r3, #8]
 80089c6:	4618      	mov	r0, r3
 80089c8:	f000 ff92 	bl	80098f0 <xTaskPriorityDisinherit>
 80089cc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	2200      	movs	r2, #0
 80089d2:	609a      	str	r2, [r3, #8]
 80089d4:	e043      	b.n	8008a5e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d119      	bne.n	8008a10 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	6858      	ldr	r0, [r3, #4]
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089e4:	461a      	mov	r2, r3
 80089e6:	68b9      	ldr	r1, [r7, #8]
 80089e8:	f002 fd7e 	bl	800b4e8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	685a      	ldr	r2, [r3, #4]
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089f4:	441a      	add	r2, r3
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	685a      	ldr	r2, [r3, #4]
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	689b      	ldr	r3, [r3, #8]
 8008a02:	429a      	cmp	r2, r3
 8008a04:	d32b      	bcc.n	8008a5e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	681a      	ldr	r2, [r3, #0]
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	605a      	str	r2, [r3, #4]
 8008a0e:	e026      	b.n	8008a5e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	68d8      	ldr	r0, [r3, #12]
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a18:	461a      	mov	r2, r3
 8008a1a:	68b9      	ldr	r1, [r7, #8]
 8008a1c:	f002 fd64 	bl	800b4e8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	68da      	ldr	r2, [r3, #12]
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a28:	425b      	negs	r3, r3
 8008a2a:	441a      	add	r2, r3
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	68da      	ldr	r2, [r3, #12]
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	429a      	cmp	r2, r3
 8008a3a:	d207      	bcs.n	8008a4c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	689a      	ldr	r2, [r3, #8]
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a44:	425b      	negs	r3, r3
 8008a46:	441a      	add	r2, r3
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2b02      	cmp	r3, #2
 8008a50:	d105      	bne.n	8008a5e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008a52:	693b      	ldr	r3, [r7, #16]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d002      	beq.n	8008a5e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008a58:	693b      	ldr	r3, [r7, #16]
 8008a5a:	3b01      	subs	r3, #1
 8008a5c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008a5e:	693b      	ldr	r3, [r7, #16]
 8008a60:	1c5a      	adds	r2, r3, #1
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008a66:	697b      	ldr	r3, [r7, #20]
}
 8008a68:	4618      	mov	r0, r3
 8008a6a:	3718      	adds	r7, #24
 8008a6c:	46bd      	mov	sp, r7
 8008a6e:	bd80      	pop	{r7, pc}

08008a70 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b082      	sub	sp, #8
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
 8008a78:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d018      	beq.n	8008ab4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	68da      	ldr	r2, [r3, #12]
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a8a:	441a      	add	r2, r3
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	68da      	ldr	r2, [r3, #12]
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	689b      	ldr	r3, [r3, #8]
 8008a98:	429a      	cmp	r2, r3
 8008a9a:	d303      	bcc.n	8008aa4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681a      	ldr	r2, [r3, #0]
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	68d9      	ldr	r1, [r3, #12]
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008aac:	461a      	mov	r2, r3
 8008aae:	6838      	ldr	r0, [r7, #0]
 8008ab0:	f002 fd1a 	bl	800b4e8 <memcpy>
	}
}
 8008ab4:	bf00      	nop
 8008ab6:	3708      	adds	r7, #8
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	bd80      	pop	{r7, pc}

08008abc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b084      	sub	sp, #16
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008ac4:	f001 fc4e 	bl	800a364 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008ace:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008ad0:	e011      	b.n	8008af6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d012      	beq.n	8008b00 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	3324      	adds	r3, #36	; 0x24
 8008ade:	4618      	mov	r0, r3
 8008ae0:	f000 fd2a 	bl	8009538 <xTaskRemoveFromEventList>
 8008ae4:	4603      	mov	r3, r0
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d001      	beq.n	8008aee <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008aea:	f000 fe01 	bl	80096f0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008aee:	7bfb      	ldrb	r3, [r7, #15]
 8008af0:	3b01      	subs	r3, #1
 8008af2:	b2db      	uxtb	r3, r3
 8008af4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008af6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	dce9      	bgt.n	8008ad2 <prvUnlockQueue+0x16>
 8008afe:	e000      	b.n	8008b02 <prvUnlockQueue+0x46>
					break;
 8008b00:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	22ff      	movs	r2, #255	; 0xff
 8008b06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008b0a:	f001 fc5b 	bl	800a3c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008b0e:	f001 fc29 	bl	800a364 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008b18:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008b1a:	e011      	b.n	8008b40 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	691b      	ldr	r3, [r3, #16]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d012      	beq.n	8008b4a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	3310      	adds	r3, #16
 8008b28:	4618      	mov	r0, r3
 8008b2a:	f000 fd05 	bl	8009538 <xTaskRemoveFromEventList>
 8008b2e:	4603      	mov	r3, r0
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d001      	beq.n	8008b38 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008b34:	f000 fddc 	bl	80096f0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008b38:	7bbb      	ldrb	r3, [r7, #14]
 8008b3a:	3b01      	subs	r3, #1
 8008b3c:	b2db      	uxtb	r3, r3
 8008b3e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008b40:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	dce9      	bgt.n	8008b1c <prvUnlockQueue+0x60>
 8008b48:	e000      	b.n	8008b4c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008b4a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	22ff      	movs	r2, #255	; 0xff
 8008b50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008b54:	f001 fc36 	bl	800a3c4 <vPortExitCritical>
}
 8008b58:	bf00      	nop
 8008b5a:	3710      	adds	r7, #16
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	bd80      	pop	{r7, pc}

08008b60 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b084      	sub	sp, #16
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008b68:	f001 fbfc 	bl	800a364 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d102      	bne.n	8008b7a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008b74:	2301      	movs	r3, #1
 8008b76:	60fb      	str	r3, [r7, #12]
 8008b78:	e001      	b.n	8008b7e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008b7e:	f001 fc21 	bl	800a3c4 <vPortExitCritical>

	return xReturn;
 8008b82:	68fb      	ldr	r3, [r7, #12]
}
 8008b84:	4618      	mov	r0, r3
 8008b86:	3710      	adds	r7, #16
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	bd80      	pop	{r7, pc}

08008b8c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b084      	sub	sp, #16
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008b94:	f001 fbe6 	bl	800a364 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ba0:	429a      	cmp	r2, r3
 8008ba2:	d102      	bne.n	8008baa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008ba4:	2301      	movs	r3, #1
 8008ba6:	60fb      	str	r3, [r7, #12]
 8008ba8:	e001      	b.n	8008bae <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008baa:	2300      	movs	r3, #0
 8008bac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008bae:	f001 fc09 	bl	800a3c4 <vPortExitCritical>

	return xReturn;
 8008bb2:	68fb      	ldr	r3, [r7, #12]
}
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	3710      	adds	r7, #16
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	bd80      	pop	{r7, pc}

08008bbc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008bbc:	b480      	push	{r7}
 8008bbe:	b085      	sub	sp, #20
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
 8008bc4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	60fb      	str	r3, [r7, #12]
 8008bca:	e014      	b.n	8008bf6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008bcc:	4a0f      	ldr	r2, [pc, #60]	; (8008c0c <vQueueAddToRegistry+0x50>)
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d10b      	bne.n	8008bf0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008bd8:	490c      	ldr	r1, [pc, #48]	; (8008c0c <vQueueAddToRegistry+0x50>)
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	683a      	ldr	r2, [r7, #0]
 8008bde:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008be2:	4a0a      	ldr	r2, [pc, #40]	; (8008c0c <vQueueAddToRegistry+0x50>)
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	00db      	lsls	r3, r3, #3
 8008be8:	4413      	add	r3, r2
 8008bea:	687a      	ldr	r2, [r7, #4]
 8008bec:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008bee:	e006      	b.n	8008bfe <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	3301      	adds	r3, #1
 8008bf4:	60fb      	str	r3, [r7, #12]
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	2b07      	cmp	r3, #7
 8008bfa:	d9e7      	bls.n	8008bcc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008bfc:	bf00      	nop
 8008bfe:	bf00      	nop
 8008c00:	3714      	adds	r7, #20
 8008c02:	46bd      	mov	sp, r7
 8008c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c08:	4770      	bx	lr
 8008c0a:	bf00      	nop
 8008c0c:	200008ec 	.word	0x200008ec

08008c10 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b086      	sub	sp, #24
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	60f8      	str	r0, [r7, #12]
 8008c18:	60b9      	str	r1, [r7, #8]
 8008c1a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008c20:	f001 fba0 	bl	800a364 <vPortEnterCritical>
 8008c24:	697b      	ldr	r3, [r7, #20]
 8008c26:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008c2a:	b25b      	sxtb	r3, r3
 8008c2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008c30:	d103      	bne.n	8008c3a <vQueueWaitForMessageRestricted+0x2a>
 8008c32:	697b      	ldr	r3, [r7, #20]
 8008c34:	2200      	movs	r2, #0
 8008c36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008c3a:	697b      	ldr	r3, [r7, #20]
 8008c3c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008c40:	b25b      	sxtb	r3, r3
 8008c42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008c46:	d103      	bne.n	8008c50 <vQueueWaitForMessageRestricted+0x40>
 8008c48:	697b      	ldr	r3, [r7, #20]
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008c50:	f001 fbb8 	bl	800a3c4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008c54:	697b      	ldr	r3, [r7, #20]
 8008c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d106      	bne.n	8008c6a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008c5c:	697b      	ldr	r3, [r7, #20]
 8008c5e:	3324      	adds	r3, #36	; 0x24
 8008c60:	687a      	ldr	r2, [r7, #4]
 8008c62:	68b9      	ldr	r1, [r7, #8]
 8008c64:	4618      	mov	r0, r3
 8008c66:	f000 fc3b 	bl	80094e0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008c6a:	6978      	ldr	r0, [r7, #20]
 8008c6c:	f7ff ff26 	bl	8008abc <prvUnlockQueue>
	}
 8008c70:	bf00      	nop
 8008c72:	3718      	adds	r7, #24
 8008c74:	46bd      	mov	sp, r7
 8008c76:	bd80      	pop	{r7, pc}

08008c78 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b08e      	sub	sp, #56	; 0x38
 8008c7c:	af04      	add	r7, sp, #16
 8008c7e:	60f8      	str	r0, [r7, #12]
 8008c80:	60b9      	str	r1, [r7, #8]
 8008c82:	607a      	str	r2, [r7, #4]
 8008c84:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008c86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d10a      	bne.n	8008ca2 <xTaskCreateStatic+0x2a>
	__asm volatile
 8008c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c90:	f383 8811 	msr	BASEPRI, r3
 8008c94:	f3bf 8f6f 	isb	sy
 8008c98:	f3bf 8f4f 	dsb	sy
 8008c9c:	623b      	str	r3, [r7, #32]
}
 8008c9e:	bf00      	nop
 8008ca0:	e7fe      	b.n	8008ca0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008ca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d10a      	bne.n	8008cbe <xTaskCreateStatic+0x46>
	__asm volatile
 8008ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cac:	f383 8811 	msr	BASEPRI, r3
 8008cb0:	f3bf 8f6f 	isb	sy
 8008cb4:	f3bf 8f4f 	dsb	sy
 8008cb8:	61fb      	str	r3, [r7, #28]
}
 8008cba:	bf00      	nop
 8008cbc:	e7fe      	b.n	8008cbc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008cbe:	235c      	movs	r3, #92	; 0x5c
 8008cc0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008cc2:	693b      	ldr	r3, [r7, #16]
 8008cc4:	2b5c      	cmp	r3, #92	; 0x5c
 8008cc6:	d00a      	beq.n	8008cde <xTaskCreateStatic+0x66>
	__asm volatile
 8008cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ccc:	f383 8811 	msr	BASEPRI, r3
 8008cd0:	f3bf 8f6f 	isb	sy
 8008cd4:	f3bf 8f4f 	dsb	sy
 8008cd8:	61bb      	str	r3, [r7, #24]
}
 8008cda:	bf00      	nop
 8008cdc:	e7fe      	b.n	8008cdc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008cde:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d01e      	beq.n	8008d24 <xTaskCreateStatic+0xac>
 8008ce6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d01b      	beq.n	8008d24 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008cec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cee:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cf2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008cf4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cf8:	2202      	movs	r2, #2
 8008cfa:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008cfe:	2300      	movs	r3, #0
 8008d00:	9303      	str	r3, [sp, #12]
 8008d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d04:	9302      	str	r3, [sp, #8]
 8008d06:	f107 0314 	add.w	r3, r7, #20
 8008d0a:	9301      	str	r3, [sp, #4]
 8008d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d0e:	9300      	str	r3, [sp, #0]
 8008d10:	683b      	ldr	r3, [r7, #0]
 8008d12:	687a      	ldr	r2, [r7, #4]
 8008d14:	68b9      	ldr	r1, [r7, #8]
 8008d16:	68f8      	ldr	r0, [r7, #12]
 8008d18:	f000 f850 	bl	8008dbc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008d1c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008d1e:	f000 f8dd 	bl	8008edc <prvAddNewTaskToReadyList>
 8008d22:	e001      	b.n	8008d28 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008d24:	2300      	movs	r3, #0
 8008d26:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008d28:	697b      	ldr	r3, [r7, #20]
	}
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	3728      	adds	r7, #40	; 0x28
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	bd80      	pop	{r7, pc}

08008d32 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008d32:	b580      	push	{r7, lr}
 8008d34:	b08c      	sub	sp, #48	; 0x30
 8008d36:	af04      	add	r7, sp, #16
 8008d38:	60f8      	str	r0, [r7, #12]
 8008d3a:	60b9      	str	r1, [r7, #8]
 8008d3c:	603b      	str	r3, [r7, #0]
 8008d3e:	4613      	mov	r3, r2
 8008d40:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008d42:	88fb      	ldrh	r3, [r7, #6]
 8008d44:	009b      	lsls	r3, r3, #2
 8008d46:	4618      	mov	r0, r3
 8008d48:	f001 fc2e 	bl	800a5a8 <pvPortMalloc>
 8008d4c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008d4e:	697b      	ldr	r3, [r7, #20]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d00e      	beq.n	8008d72 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008d54:	205c      	movs	r0, #92	; 0x5c
 8008d56:	f001 fc27 	bl	800a5a8 <pvPortMalloc>
 8008d5a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008d5c:	69fb      	ldr	r3, [r7, #28]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d003      	beq.n	8008d6a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008d62:	69fb      	ldr	r3, [r7, #28]
 8008d64:	697a      	ldr	r2, [r7, #20]
 8008d66:	631a      	str	r2, [r3, #48]	; 0x30
 8008d68:	e005      	b.n	8008d76 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008d6a:	6978      	ldr	r0, [r7, #20]
 8008d6c:	f001 fce8 	bl	800a740 <vPortFree>
 8008d70:	e001      	b.n	8008d76 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008d72:	2300      	movs	r3, #0
 8008d74:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008d76:	69fb      	ldr	r3, [r7, #28]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d017      	beq.n	8008dac <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008d7c:	69fb      	ldr	r3, [r7, #28]
 8008d7e:	2200      	movs	r2, #0
 8008d80:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008d84:	88fa      	ldrh	r2, [r7, #6]
 8008d86:	2300      	movs	r3, #0
 8008d88:	9303      	str	r3, [sp, #12]
 8008d8a:	69fb      	ldr	r3, [r7, #28]
 8008d8c:	9302      	str	r3, [sp, #8]
 8008d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d90:	9301      	str	r3, [sp, #4]
 8008d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d94:	9300      	str	r3, [sp, #0]
 8008d96:	683b      	ldr	r3, [r7, #0]
 8008d98:	68b9      	ldr	r1, [r7, #8]
 8008d9a:	68f8      	ldr	r0, [r7, #12]
 8008d9c:	f000 f80e 	bl	8008dbc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008da0:	69f8      	ldr	r0, [r7, #28]
 8008da2:	f000 f89b 	bl	8008edc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008da6:	2301      	movs	r3, #1
 8008da8:	61bb      	str	r3, [r7, #24]
 8008daa:	e002      	b.n	8008db2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008dac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008db0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008db2:	69bb      	ldr	r3, [r7, #24]
	}
 8008db4:	4618      	mov	r0, r3
 8008db6:	3720      	adds	r7, #32
 8008db8:	46bd      	mov	sp, r7
 8008dba:	bd80      	pop	{r7, pc}

08008dbc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b088      	sub	sp, #32
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	60f8      	str	r0, [r7, #12]
 8008dc4:	60b9      	str	r1, [r7, #8]
 8008dc6:	607a      	str	r2, [r7, #4]
 8008dc8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dcc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	009b      	lsls	r3, r3, #2
 8008dd2:	461a      	mov	r2, r3
 8008dd4:	21a5      	movs	r1, #165	; 0xa5
 8008dd6:	f002 fb5b 	bl	800b490 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ddc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008de4:	3b01      	subs	r3, #1
 8008de6:	009b      	lsls	r3, r3, #2
 8008de8:	4413      	add	r3, r2
 8008dea:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008dec:	69bb      	ldr	r3, [r7, #24]
 8008dee:	f023 0307 	bic.w	r3, r3, #7
 8008df2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008df4:	69bb      	ldr	r3, [r7, #24]
 8008df6:	f003 0307 	and.w	r3, r3, #7
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d00a      	beq.n	8008e14 <prvInitialiseNewTask+0x58>
	__asm volatile
 8008dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e02:	f383 8811 	msr	BASEPRI, r3
 8008e06:	f3bf 8f6f 	isb	sy
 8008e0a:	f3bf 8f4f 	dsb	sy
 8008e0e:	617b      	str	r3, [r7, #20]
}
 8008e10:	bf00      	nop
 8008e12:	e7fe      	b.n	8008e12 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008e14:	68bb      	ldr	r3, [r7, #8]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d01f      	beq.n	8008e5a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	61fb      	str	r3, [r7, #28]
 8008e1e:	e012      	b.n	8008e46 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008e20:	68ba      	ldr	r2, [r7, #8]
 8008e22:	69fb      	ldr	r3, [r7, #28]
 8008e24:	4413      	add	r3, r2
 8008e26:	7819      	ldrb	r1, [r3, #0]
 8008e28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e2a:	69fb      	ldr	r3, [r7, #28]
 8008e2c:	4413      	add	r3, r2
 8008e2e:	3334      	adds	r3, #52	; 0x34
 8008e30:	460a      	mov	r2, r1
 8008e32:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008e34:	68ba      	ldr	r2, [r7, #8]
 8008e36:	69fb      	ldr	r3, [r7, #28]
 8008e38:	4413      	add	r3, r2
 8008e3a:	781b      	ldrb	r3, [r3, #0]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d006      	beq.n	8008e4e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008e40:	69fb      	ldr	r3, [r7, #28]
 8008e42:	3301      	adds	r3, #1
 8008e44:	61fb      	str	r3, [r7, #28]
 8008e46:	69fb      	ldr	r3, [r7, #28]
 8008e48:	2b0f      	cmp	r3, #15
 8008e4a:	d9e9      	bls.n	8008e20 <prvInitialiseNewTask+0x64>
 8008e4c:	e000      	b.n	8008e50 <prvInitialiseNewTask+0x94>
			{
				break;
 8008e4e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e52:	2200      	movs	r2, #0
 8008e54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008e58:	e003      	b.n	8008e62 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e5c:	2200      	movs	r2, #0
 8008e5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e64:	2b37      	cmp	r3, #55	; 0x37
 8008e66:	d901      	bls.n	8008e6c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008e68:	2337      	movs	r3, #55	; 0x37
 8008e6a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008e70:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008e76:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e80:	3304      	adds	r3, #4
 8008e82:	4618      	mov	r0, r3
 8008e84:	f7ff f978 	bl	8008178 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e8a:	3318      	adds	r3, #24
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	f7ff f973 	bl	8008178 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e96:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e9a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ea0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ea4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ea6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eaa:	2200      	movs	r2, #0
 8008eac:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008eb6:	683a      	ldr	r2, [r7, #0]
 8008eb8:	68f9      	ldr	r1, [r7, #12]
 8008eba:	69b8      	ldr	r0, [r7, #24]
 8008ebc:	f001 f928 	bl	800a110 <pxPortInitialiseStack>
 8008ec0:	4602      	mov	r2, r0
 8008ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ec4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d002      	beq.n	8008ed2 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008ecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ece:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ed0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008ed2:	bf00      	nop
 8008ed4:	3720      	adds	r7, #32
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	bd80      	pop	{r7, pc}
	...

08008edc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008edc:	b580      	push	{r7, lr}
 8008ede:	b082      	sub	sp, #8
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008ee4:	f001 fa3e 	bl	800a364 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008ee8:	4b2d      	ldr	r3, [pc, #180]	; (8008fa0 <prvAddNewTaskToReadyList+0xc4>)
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	3301      	adds	r3, #1
 8008eee:	4a2c      	ldr	r2, [pc, #176]	; (8008fa0 <prvAddNewTaskToReadyList+0xc4>)
 8008ef0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008ef2:	4b2c      	ldr	r3, [pc, #176]	; (8008fa4 <prvAddNewTaskToReadyList+0xc8>)
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d109      	bne.n	8008f0e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008efa:	4a2a      	ldr	r2, [pc, #168]	; (8008fa4 <prvAddNewTaskToReadyList+0xc8>)
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008f00:	4b27      	ldr	r3, [pc, #156]	; (8008fa0 <prvAddNewTaskToReadyList+0xc4>)
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	2b01      	cmp	r3, #1
 8008f06:	d110      	bne.n	8008f2a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008f08:	f000 fc16 	bl	8009738 <prvInitialiseTaskLists>
 8008f0c:	e00d      	b.n	8008f2a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008f0e:	4b26      	ldr	r3, [pc, #152]	; (8008fa8 <prvAddNewTaskToReadyList+0xcc>)
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d109      	bne.n	8008f2a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008f16:	4b23      	ldr	r3, [pc, #140]	; (8008fa4 <prvAddNewTaskToReadyList+0xc8>)
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f20:	429a      	cmp	r2, r3
 8008f22:	d802      	bhi.n	8008f2a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008f24:	4a1f      	ldr	r2, [pc, #124]	; (8008fa4 <prvAddNewTaskToReadyList+0xc8>)
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008f2a:	4b20      	ldr	r3, [pc, #128]	; (8008fac <prvAddNewTaskToReadyList+0xd0>)
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	3301      	adds	r3, #1
 8008f30:	4a1e      	ldr	r2, [pc, #120]	; (8008fac <prvAddNewTaskToReadyList+0xd0>)
 8008f32:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008f34:	4b1d      	ldr	r3, [pc, #116]	; (8008fac <prvAddNewTaskToReadyList+0xd0>)
 8008f36:	681a      	ldr	r2, [r3, #0]
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f40:	4b1b      	ldr	r3, [pc, #108]	; (8008fb0 <prvAddNewTaskToReadyList+0xd4>)
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	429a      	cmp	r2, r3
 8008f46:	d903      	bls.n	8008f50 <prvAddNewTaskToReadyList+0x74>
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f4c:	4a18      	ldr	r2, [pc, #96]	; (8008fb0 <prvAddNewTaskToReadyList+0xd4>)
 8008f4e:	6013      	str	r3, [r2, #0]
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f54:	4613      	mov	r3, r2
 8008f56:	009b      	lsls	r3, r3, #2
 8008f58:	4413      	add	r3, r2
 8008f5a:	009b      	lsls	r3, r3, #2
 8008f5c:	4a15      	ldr	r2, [pc, #84]	; (8008fb4 <prvAddNewTaskToReadyList+0xd8>)
 8008f5e:	441a      	add	r2, r3
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	3304      	adds	r3, #4
 8008f64:	4619      	mov	r1, r3
 8008f66:	4610      	mov	r0, r2
 8008f68:	f7ff f913 	bl	8008192 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008f6c:	f001 fa2a 	bl	800a3c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008f70:	4b0d      	ldr	r3, [pc, #52]	; (8008fa8 <prvAddNewTaskToReadyList+0xcc>)
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d00e      	beq.n	8008f96 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008f78:	4b0a      	ldr	r3, [pc, #40]	; (8008fa4 <prvAddNewTaskToReadyList+0xc8>)
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f82:	429a      	cmp	r2, r3
 8008f84:	d207      	bcs.n	8008f96 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008f86:	4b0c      	ldr	r3, [pc, #48]	; (8008fb8 <prvAddNewTaskToReadyList+0xdc>)
 8008f88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f8c:	601a      	str	r2, [r3, #0]
 8008f8e:	f3bf 8f4f 	dsb	sy
 8008f92:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008f96:	bf00      	nop
 8008f98:	3708      	adds	r7, #8
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	bd80      	pop	{r7, pc}
 8008f9e:	bf00      	nop
 8008fa0:	20000e00 	.word	0x20000e00
 8008fa4:	2000092c 	.word	0x2000092c
 8008fa8:	20000e0c 	.word	0x20000e0c
 8008fac:	20000e1c 	.word	0x20000e1c
 8008fb0:	20000e08 	.word	0x20000e08
 8008fb4:	20000930 	.word	0x20000930
 8008fb8:	e000ed04 	.word	0xe000ed04

08008fbc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	b084      	sub	sp, #16
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d017      	beq.n	8008ffe <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008fce:	4b13      	ldr	r3, [pc, #76]	; (800901c <vTaskDelay+0x60>)
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d00a      	beq.n	8008fec <vTaskDelay+0x30>
	__asm volatile
 8008fd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fda:	f383 8811 	msr	BASEPRI, r3
 8008fde:	f3bf 8f6f 	isb	sy
 8008fe2:	f3bf 8f4f 	dsb	sy
 8008fe6:	60bb      	str	r3, [r7, #8]
}
 8008fe8:	bf00      	nop
 8008fea:	e7fe      	b.n	8008fea <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008fec:	f000 f880 	bl	80090f0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008ff0:	2100      	movs	r1, #0
 8008ff2:	6878      	ldr	r0, [r7, #4]
 8008ff4:	f000 fcea 	bl	80099cc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008ff8:	f000 f888 	bl	800910c <xTaskResumeAll>
 8008ffc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d107      	bne.n	8009014 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009004:	4b06      	ldr	r3, [pc, #24]	; (8009020 <vTaskDelay+0x64>)
 8009006:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800900a:	601a      	str	r2, [r3, #0]
 800900c:	f3bf 8f4f 	dsb	sy
 8009010:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009014:	bf00      	nop
 8009016:	3710      	adds	r7, #16
 8009018:	46bd      	mov	sp, r7
 800901a:	bd80      	pop	{r7, pc}
 800901c:	20000e28 	.word	0x20000e28
 8009020:	e000ed04 	.word	0xe000ed04

08009024 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009024:	b580      	push	{r7, lr}
 8009026:	b08a      	sub	sp, #40	; 0x28
 8009028:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800902a:	2300      	movs	r3, #0
 800902c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800902e:	2300      	movs	r3, #0
 8009030:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009032:	463a      	mov	r2, r7
 8009034:	1d39      	adds	r1, r7, #4
 8009036:	f107 0308 	add.w	r3, r7, #8
 800903a:	4618      	mov	r0, r3
 800903c:	f7ff f848 	bl	80080d0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009040:	6839      	ldr	r1, [r7, #0]
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	68ba      	ldr	r2, [r7, #8]
 8009046:	9202      	str	r2, [sp, #8]
 8009048:	9301      	str	r3, [sp, #4]
 800904a:	2300      	movs	r3, #0
 800904c:	9300      	str	r3, [sp, #0]
 800904e:	2300      	movs	r3, #0
 8009050:	460a      	mov	r2, r1
 8009052:	4921      	ldr	r1, [pc, #132]	; (80090d8 <vTaskStartScheduler+0xb4>)
 8009054:	4821      	ldr	r0, [pc, #132]	; (80090dc <vTaskStartScheduler+0xb8>)
 8009056:	f7ff fe0f 	bl	8008c78 <xTaskCreateStatic>
 800905a:	4603      	mov	r3, r0
 800905c:	4a20      	ldr	r2, [pc, #128]	; (80090e0 <vTaskStartScheduler+0xbc>)
 800905e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009060:	4b1f      	ldr	r3, [pc, #124]	; (80090e0 <vTaskStartScheduler+0xbc>)
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d002      	beq.n	800906e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009068:	2301      	movs	r3, #1
 800906a:	617b      	str	r3, [r7, #20]
 800906c:	e001      	b.n	8009072 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800906e:	2300      	movs	r3, #0
 8009070:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009072:	697b      	ldr	r3, [r7, #20]
 8009074:	2b01      	cmp	r3, #1
 8009076:	d102      	bne.n	800907e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009078:	f000 fcfc 	bl	8009a74 <xTimerCreateTimerTask>
 800907c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800907e:	697b      	ldr	r3, [r7, #20]
 8009080:	2b01      	cmp	r3, #1
 8009082:	d116      	bne.n	80090b2 <vTaskStartScheduler+0x8e>
	__asm volatile
 8009084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009088:	f383 8811 	msr	BASEPRI, r3
 800908c:	f3bf 8f6f 	isb	sy
 8009090:	f3bf 8f4f 	dsb	sy
 8009094:	613b      	str	r3, [r7, #16]
}
 8009096:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009098:	4b12      	ldr	r3, [pc, #72]	; (80090e4 <vTaskStartScheduler+0xc0>)
 800909a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800909e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80090a0:	4b11      	ldr	r3, [pc, #68]	; (80090e8 <vTaskStartScheduler+0xc4>)
 80090a2:	2201      	movs	r2, #1
 80090a4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80090a6:	4b11      	ldr	r3, [pc, #68]	; (80090ec <vTaskStartScheduler+0xc8>)
 80090a8:	2200      	movs	r2, #0
 80090aa:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80090ac:	f001 f8b8 	bl	800a220 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80090b0:	e00e      	b.n	80090d0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80090b2:	697b      	ldr	r3, [r7, #20]
 80090b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80090b8:	d10a      	bne.n	80090d0 <vTaskStartScheduler+0xac>
	__asm volatile
 80090ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090be:	f383 8811 	msr	BASEPRI, r3
 80090c2:	f3bf 8f6f 	isb	sy
 80090c6:	f3bf 8f4f 	dsb	sy
 80090ca:	60fb      	str	r3, [r7, #12]
}
 80090cc:	bf00      	nop
 80090ce:	e7fe      	b.n	80090ce <vTaskStartScheduler+0xaa>
}
 80090d0:	bf00      	nop
 80090d2:	3718      	adds	r7, #24
 80090d4:	46bd      	mov	sp, r7
 80090d6:	bd80      	pop	{r7, pc}
 80090d8:	0800b538 	.word	0x0800b538
 80090dc:	08009709 	.word	0x08009709
 80090e0:	20000e24 	.word	0x20000e24
 80090e4:	20000e20 	.word	0x20000e20
 80090e8:	20000e0c 	.word	0x20000e0c
 80090ec:	20000e04 	.word	0x20000e04

080090f0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80090f0:	b480      	push	{r7}
 80090f2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80090f4:	4b04      	ldr	r3, [pc, #16]	; (8009108 <vTaskSuspendAll+0x18>)
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	3301      	adds	r3, #1
 80090fa:	4a03      	ldr	r2, [pc, #12]	; (8009108 <vTaskSuspendAll+0x18>)
 80090fc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80090fe:	bf00      	nop
 8009100:	46bd      	mov	sp, r7
 8009102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009106:	4770      	bx	lr
 8009108:	20000e28 	.word	0x20000e28

0800910c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800910c:	b580      	push	{r7, lr}
 800910e:	b084      	sub	sp, #16
 8009110:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009112:	2300      	movs	r3, #0
 8009114:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009116:	2300      	movs	r3, #0
 8009118:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800911a:	4b42      	ldr	r3, [pc, #264]	; (8009224 <xTaskResumeAll+0x118>)
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	2b00      	cmp	r3, #0
 8009120:	d10a      	bne.n	8009138 <xTaskResumeAll+0x2c>
	__asm volatile
 8009122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009126:	f383 8811 	msr	BASEPRI, r3
 800912a:	f3bf 8f6f 	isb	sy
 800912e:	f3bf 8f4f 	dsb	sy
 8009132:	603b      	str	r3, [r7, #0]
}
 8009134:	bf00      	nop
 8009136:	e7fe      	b.n	8009136 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009138:	f001 f914 	bl	800a364 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800913c:	4b39      	ldr	r3, [pc, #228]	; (8009224 <xTaskResumeAll+0x118>)
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	3b01      	subs	r3, #1
 8009142:	4a38      	ldr	r2, [pc, #224]	; (8009224 <xTaskResumeAll+0x118>)
 8009144:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009146:	4b37      	ldr	r3, [pc, #220]	; (8009224 <xTaskResumeAll+0x118>)
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	2b00      	cmp	r3, #0
 800914c:	d162      	bne.n	8009214 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800914e:	4b36      	ldr	r3, [pc, #216]	; (8009228 <xTaskResumeAll+0x11c>)
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d05e      	beq.n	8009214 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009156:	e02f      	b.n	80091b8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009158:	4b34      	ldr	r3, [pc, #208]	; (800922c <xTaskResumeAll+0x120>)
 800915a:	68db      	ldr	r3, [r3, #12]
 800915c:	68db      	ldr	r3, [r3, #12]
 800915e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	3318      	adds	r3, #24
 8009164:	4618      	mov	r0, r3
 8009166:	f7ff f871 	bl	800824c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	3304      	adds	r3, #4
 800916e:	4618      	mov	r0, r3
 8009170:	f7ff f86c 	bl	800824c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009178:	4b2d      	ldr	r3, [pc, #180]	; (8009230 <xTaskResumeAll+0x124>)
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	429a      	cmp	r2, r3
 800917e:	d903      	bls.n	8009188 <xTaskResumeAll+0x7c>
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009184:	4a2a      	ldr	r2, [pc, #168]	; (8009230 <xTaskResumeAll+0x124>)
 8009186:	6013      	str	r3, [r2, #0]
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800918c:	4613      	mov	r3, r2
 800918e:	009b      	lsls	r3, r3, #2
 8009190:	4413      	add	r3, r2
 8009192:	009b      	lsls	r3, r3, #2
 8009194:	4a27      	ldr	r2, [pc, #156]	; (8009234 <xTaskResumeAll+0x128>)
 8009196:	441a      	add	r2, r3
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	3304      	adds	r3, #4
 800919c:	4619      	mov	r1, r3
 800919e:	4610      	mov	r0, r2
 80091a0:	f7fe fff7 	bl	8008192 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091a8:	4b23      	ldr	r3, [pc, #140]	; (8009238 <xTaskResumeAll+0x12c>)
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091ae:	429a      	cmp	r2, r3
 80091b0:	d302      	bcc.n	80091b8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80091b2:	4b22      	ldr	r3, [pc, #136]	; (800923c <xTaskResumeAll+0x130>)
 80091b4:	2201      	movs	r2, #1
 80091b6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80091b8:	4b1c      	ldr	r3, [pc, #112]	; (800922c <xTaskResumeAll+0x120>)
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d1cb      	bne.n	8009158 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d001      	beq.n	80091ca <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80091c6:	f000 fb55 	bl	8009874 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80091ca:	4b1d      	ldr	r3, [pc, #116]	; (8009240 <xTaskResumeAll+0x134>)
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d010      	beq.n	80091f8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80091d6:	f000 f847 	bl	8009268 <xTaskIncrementTick>
 80091da:	4603      	mov	r3, r0
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d002      	beq.n	80091e6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80091e0:	4b16      	ldr	r3, [pc, #88]	; (800923c <xTaskResumeAll+0x130>)
 80091e2:	2201      	movs	r2, #1
 80091e4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	3b01      	subs	r3, #1
 80091ea:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d1f1      	bne.n	80091d6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80091f2:	4b13      	ldr	r3, [pc, #76]	; (8009240 <xTaskResumeAll+0x134>)
 80091f4:	2200      	movs	r2, #0
 80091f6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80091f8:	4b10      	ldr	r3, [pc, #64]	; (800923c <xTaskResumeAll+0x130>)
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d009      	beq.n	8009214 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009200:	2301      	movs	r3, #1
 8009202:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009204:	4b0f      	ldr	r3, [pc, #60]	; (8009244 <xTaskResumeAll+0x138>)
 8009206:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800920a:	601a      	str	r2, [r3, #0]
 800920c:	f3bf 8f4f 	dsb	sy
 8009210:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009214:	f001 f8d6 	bl	800a3c4 <vPortExitCritical>

	return xAlreadyYielded;
 8009218:	68bb      	ldr	r3, [r7, #8]
}
 800921a:	4618      	mov	r0, r3
 800921c:	3710      	adds	r7, #16
 800921e:	46bd      	mov	sp, r7
 8009220:	bd80      	pop	{r7, pc}
 8009222:	bf00      	nop
 8009224:	20000e28 	.word	0x20000e28
 8009228:	20000e00 	.word	0x20000e00
 800922c:	20000dc0 	.word	0x20000dc0
 8009230:	20000e08 	.word	0x20000e08
 8009234:	20000930 	.word	0x20000930
 8009238:	2000092c 	.word	0x2000092c
 800923c:	20000e14 	.word	0x20000e14
 8009240:	20000e10 	.word	0x20000e10
 8009244:	e000ed04 	.word	0xe000ed04

08009248 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009248:	b480      	push	{r7}
 800924a:	b083      	sub	sp, #12
 800924c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800924e:	4b05      	ldr	r3, [pc, #20]	; (8009264 <xTaskGetTickCount+0x1c>)
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009254:	687b      	ldr	r3, [r7, #4]
}
 8009256:	4618      	mov	r0, r3
 8009258:	370c      	adds	r7, #12
 800925a:	46bd      	mov	sp, r7
 800925c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009260:	4770      	bx	lr
 8009262:	bf00      	nop
 8009264:	20000e04 	.word	0x20000e04

08009268 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009268:	b580      	push	{r7, lr}
 800926a:	b086      	sub	sp, #24
 800926c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800926e:	2300      	movs	r3, #0
 8009270:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009272:	4b4f      	ldr	r3, [pc, #316]	; (80093b0 <xTaskIncrementTick+0x148>)
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	2b00      	cmp	r3, #0
 8009278:	f040 808f 	bne.w	800939a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800927c:	4b4d      	ldr	r3, [pc, #308]	; (80093b4 <xTaskIncrementTick+0x14c>)
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	3301      	adds	r3, #1
 8009282:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009284:	4a4b      	ldr	r2, [pc, #300]	; (80093b4 <xTaskIncrementTick+0x14c>)
 8009286:	693b      	ldr	r3, [r7, #16]
 8009288:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800928a:	693b      	ldr	r3, [r7, #16]
 800928c:	2b00      	cmp	r3, #0
 800928e:	d120      	bne.n	80092d2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009290:	4b49      	ldr	r3, [pc, #292]	; (80093b8 <xTaskIncrementTick+0x150>)
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d00a      	beq.n	80092b0 <xTaskIncrementTick+0x48>
	__asm volatile
 800929a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800929e:	f383 8811 	msr	BASEPRI, r3
 80092a2:	f3bf 8f6f 	isb	sy
 80092a6:	f3bf 8f4f 	dsb	sy
 80092aa:	603b      	str	r3, [r7, #0]
}
 80092ac:	bf00      	nop
 80092ae:	e7fe      	b.n	80092ae <xTaskIncrementTick+0x46>
 80092b0:	4b41      	ldr	r3, [pc, #260]	; (80093b8 <xTaskIncrementTick+0x150>)
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	60fb      	str	r3, [r7, #12]
 80092b6:	4b41      	ldr	r3, [pc, #260]	; (80093bc <xTaskIncrementTick+0x154>)
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	4a3f      	ldr	r2, [pc, #252]	; (80093b8 <xTaskIncrementTick+0x150>)
 80092bc:	6013      	str	r3, [r2, #0]
 80092be:	4a3f      	ldr	r2, [pc, #252]	; (80093bc <xTaskIncrementTick+0x154>)
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	6013      	str	r3, [r2, #0]
 80092c4:	4b3e      	ldr	r3, [pc, #248]	; (80093c0 <xTaskIncrementTick+0x158>)
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	3301      	adds	r3, #1
 80092ca:	4a3d      	ldr	r2, [pc, #244]	; (80093c0 <xTaskIncrementTick+0x158>)
 80092cc:	6013      	str	r3, [r2, #0]
 80092ce:	f000 fad1 	bl	8009874 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80092d2:	4b3c      	ldr	r3, [pc, #240]	; (80093c4 <xTaskIncrementTick+0x15c>)
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	693a      	ldr	r2, [r7, #16]
 80092d8:	429a      	cmp	r2, r3
 80092da:	d349      	bcc.n	8009370 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80092dc:	4b36      	ldr	r3, [pc, #216]	; (80093b8 <xTaskIncrementTick+0x150>)
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d104      	bne.n	80092f0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80092e6:	4b37      	ldr	r3, [pc, #220]	; (80093c4 <xTaskIncrementTick+0x15c>)
 80092e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80092ec:	601a      	str	r2, [r3, #0]
					break;
 80092ee:	e03f      	b.n	8009370 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80092f0:	4b31      	ldr	r3, [pc, #196]	; (80093b8 <xTaskIncrementTick+0x150>)
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	68db      	ldr	r3, [r3, #12]
 80092f6:	68db      	ldr	r3, [r3, #12]
 80092f8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80092fa:	68bb      	ldr	r3, [r7, #8]
 80092fc:	685b      	ldr	r3, [r3, #4]
 80092fe:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009300:	693a      	ldr	r2, [r7, #16]
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	429a      	cmp	r2, r3
 8009306:	d203      	bcs.n	8009310 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009308:	4a2e      	ldr	r2, [pc, #184]	; (80093c4 <xTaskIncrementTick+0x15c>)
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800930e:	e02f      	b.n	8009370 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009310:	68bb      	ldr	r3, [r7, #8]
 8009312:	3304      	adds	r3, #4
 8009314:	4618      	mov	r0, r3
 8009316:	f7fe ff99 	bl	800824c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800931a:	68bb      	ldr	r3, [r7, #8]
 800931c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800931e:	2b00      	cmp	r3, #0
 8009320:	d004      	beq.n	800932c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009322:	68bb      	ldr	r3, [r7, #8]
 8009324:	3318      	adds	r3, #24
 8009326:	4618      	mov	r0, r3
 8009328:	f7fe ff90 	bl	800824c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800932c:	68bb      	ldr	r3, [r7, #8]
 800932e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009330:	4b25      	ldr	r3, [pc, #148]	; (80093c8 <xTaskIncrementTick+0x160>)
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	429a      	cmp	r2, r3
 8009336:	d903      	bls.n	8009340 <xTaskIncrementTick+0xd8>
 8009338:	68bb      	ldr	r3, [r7, #8]
 800933a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800933c:	4a22      	ldr	r2, [pc, #136]	; (80093c8 <xTaskIncrementTick+0x160>)
 800933e:	6013      	str	r3, [r2, #0]
 8009340:	68bb      	ldr	r3, [r7, #8]
 8009342:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009344:	4613      	mov	r3, r2
 8009346:	009b      	lsls	r3, r3, #2
 8009348:	4413      	add	r3, r2
 800934a:	009b      	lsls	r3, r3, #2
 800934c:	4a1f      	ldr	r2, [pc, #124]	; (80093cc <xTaskIncrementTick+0x164>)
 800934e:	441a      	add	r2, r3
 8009350:	68bb      	ldr	r3, [r7, #8]
 8009352:	3304      	adds	r3, #4
 8009354:	4619      	mov	r1, r3
 8009356:	4610      	mov	r0, r2
 8009358:	f7fe ff1b 	bl	8008192 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800935c:	68bb      	ldr	r3, [r7, #8]
 800935e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009360:	4b1b      	ldr	r3, [pc, #108]	; (80093d0 <xTaskIncrementTick+0x168>)
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009366:	429a      	cmp	r2, r3
 8009368:	d3b8      	bcc.n	80092dc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800936a:	2301      	movs	r3, #1
 800936c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800936e:	e7b5      	b.n	80092dc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009370:	4b17      	ldr	r3, [pc, #92]	; (80093d0 <xTaskIncrementTick+0x168>)
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009376:	4915      	ldr	r1, [pc, #84]	; (80093cc <xTaskIncrementTick+0x164>)
 8009378:	4613      	mov	r3, r2
 800937a:	009b      	lsls	r3, r3, #2
 800937c:	4413      	add	r3, r2
 800937e:	009b      	lsls	r3, r3, #2
 8009380:	440b      	add	r3, r1
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	2b01      	cmp	r3, #1
 8009386:	d901      	bls.n	800938c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009388:	2301      	movs	r3, #1
 800938a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800938c:	4b11      	ldr	r3, [pc, #68]	; (80093d4 <xTaskIncrementTick+0x16c>)
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	2b00      	cmp	r3, #0
 8009392:	d007      	beq.n	80093a4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009394:	2301      	movs	r3, #1
 8009396:	617b      	str	r3, [r7, #20]
 8009398:	e004      	b.n	80093a4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800939a:	4b0f      	ldr	r3, [pc, #60]	; (80093d8 <xTaskIncrementTick+0x170>)
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	3301      	adds	r3, #1
 80093a0:	4a0d      	ldr	r2, [pc, #52]	; (80093d8 <xTaskIncrementTick+0x170>)
 80093a2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80093a4:	697b      	ldr	r3, [r7, #20]
}
 80093a6:	4618      	mov	r0, r3
 80093a8:	3718      	adds	r7, #24
 80093aa:	46bd      	mov	sp, r7
 80093ac:	bd80      	pop	{r7, pc}
 80093ae:	bf00      	nop
 80093b0:	20000e28 	.word	0x20000e28
 80093b4:	20000e04 	.word	0x20000e04
 80093b8:	20000db8 	.word	0x20000db8
 80093bc:	20000dbc 	.word	0x20000dbc
 80093c0:	20000e18 	.word	0x20000e18
 80093c4:	20000e20 	.word	0x20000e20
 80093c8:	20000e08 	.word	0x20000e08
 80093cc:	20000930 	.word	0x20000930
 80093d0:	2000092c 	.word	0x2000092c
 80093d4:	20000e14 	.word	0x20000e14
 80093d8:	20000e10 	.word	0x20000e10

080093dc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80093dc:	b480      	push	{r7}
 80093de:	b085      	sub	sp, #20
 80093e0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80093e2:	4b28      	ldr	r3, [pc, #160]	; (8009484 <vTaskSwitchContext+0xa8>)
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d003      	beq.n	80093f2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80093ea:	4b27      	ldr	r3, [pc, #156]	; (8009488 <vTaskSwitchContext+0xac>)
 80093ec:	2201      	movs	r2, #1
 80093ee:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80093f0:	e041      	b.n	8009476 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80093f2:	4b25      	ldr	r3, [pc, #148]	; (8009488 <vTaskSwitchContext+0xac>)
 80093f4:	2200      	movs	r2, #0
 80093f6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80093f8:	4b24      	ldr	r3, [pc, #144]	; (800948c <vTaskSwitchContext+0xb0>)
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	60fb      	str	r3, [r7, #12]
 80093fe:	e010      	b.n	8009422 <vTaskSwitchContext+0x46>
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	2b00      	cmp	r3, #0
 8009404:	d10a      	bne.n	800941c <vTaskSwitchContext+0x40>
	__asm volatile
 8009406:	f04f 0350 	mov.w	r3, #80	; 0x50
 800940a:	f383 8811 	msr	BASEPRI, r3
 800940e:	f3bf 8f6f 	isb	sy
 8009412:	f3bf 8f4f 	dsb	sy
 8009416:	607b      	str	r3, [r7, #4]
}
 8009418:	bf00      	nop
 800941a:	e7fe      	b.n	800941a <vTaskSwitchContext+0x3e>
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	3b01      	subs	r3, #1
 8009420:	60fb      	str	r3, [r7, #12]
 8009422:	491b      	ldr	r1, [pc, #108]	; (8009490 <vTaskSwitchContext+0xb4>)
 8009424:	68fa      	ldr	r2, [r7, #12]
 8009426:	4613      	mov	r3, r2
 8009428:	009b      	lsls	r3, r3, #2
 800942a:	4413      	add	r3, r2
 800942c:	009b      	lsls	r3, r3, #2
 800942e:	440b      	add	r3, r1
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	2b00      	cmp	r3, #0
 8009434:	d0e4      	beq.n	8009400 <vTaskSwitchContext+0x24>
 8009436:	68fa      	ldr	r2, [r7, #12]
 8009438:	4613      	mov	r3, r2
 800943a:	009b      	lsls	r3, r3, #2
 800943c:	4413      	add	r3, r2
 800943e:	009b      	lsls	r3, r3, #2
 8009440:	4a13      	ldr	r2, [pc, #76]	; (8009490 <vTaskSwitchContext+0xb4>)
 8009442:	4413      	add	r3, r2
 8009444:	60bb      	str	r3, [r7, #8]
 8009446:	68bb      	ldr	r3, [r7, #8]
 8009448:	685b      	ldr	r3, [r3, #4]
 800944a:	685a      	ldr	r2, [r3, #4]
 800944c:	68bb      	ldr	r3, [r7, #8]
 800944e:	605a      	str	r2, [r3, #4]
 8009450:	68bb      	ldr	r3, [r7, #8]
 8009452:	685a      	ldr	r2, [r3, #4]
 8009454:	68bb      	ldr	r3, [r7, #8]
 8009456:	3308      	adds	r3, #8
 8009458:	429a      	cmp	r2, r3
 800945a:	d104      	bne.n	8009466 <vTaskSwitchContext+0x8a>
 800945c:	68bb      	ldr	r3, [r7, #8]
 800945e:	685b      	ldr	r3, [r3, #4]
 8009460:	685a      	ldr	r2, [r3, #4]
 8009462:	68bb      	ldr	r3, [r7, #8]
 8009464:	605a      	str	r2, [r3, #4]
 8009466:	68bb      	ldr	r3, [r7, #8]
 8009468:	685b      	ldr	r3, [r3, #4]
 800946a:	68db      	ldr	r3, [r3, #12]
 800946c:	4a09      	ldr	r2, [pc, #36]	; (8009494 <vTaskSwitchContext+0xb8>)
 800946e:	6013      	str	r3, [r2, #0]
 8009470:	4a06      	ldr	r2, [pc, #24]	; (800948c <vTaskSwitchContext+0xb0>)
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	6013      	str	r3, [r2, #0]
}
 8009476:	bf00      	nop
 8009478:	3714      	adds	r7, #20
 800947a:	46bd      	mov	sp, r7
 800947c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009480:	4770      	bx	lr
 8009482:	bf00      	nop
 8009484:	20000e28 	.word	0x20000e28
 8009488:	20000e14 	.word	0x20000e14
 800948c:	20000e08 	.word	0x20000e08
 8009490:	20000930 	.word	0x20000930
 8009494:	2000092c 	.word	0x2000092c

08009498 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009498:	b580      	push	{r7, lr}
 800949a:	b084      	sub	sp, #16
 800949c:	af00      	add	r7, sp, #0
 800949e:	6078      	str	r0, [r7, #4]
 80094a0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d10a      	bne.n	80094be <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80094a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094ac:	f383 8811 	msr	BASEPRI, r3
 80094b0:	f3bf 8f6f 	isb	sy
 80094b4:	f3bf 8f4f 	dsb	sy
 80094b8:	60fb      	str	r3, [r7, #12]
}
 80094ba:	bf00      	nop
 80094bc:	e7fe      	b.n	80094bc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80094be:	4b07      	ldr	r3, [pc, #28]	; (80094dc <vTaskPlaceOnEventList+0x44>)
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	3318      	adds	r3, #24
 80094c4:	4619      	mov	r1, r3
 80094c6:	6878      	ldr	r0, [r7, #4]
 80094c8:	f7fe fe87 	bl	80081da <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80094cc:	2101      	movs	r1, #1
 80094ce:	6838      	ldr	r0, [r7, #0]
 80094d0:	f000 fa7c 	bl	80099cc <prvAddCurrentTaskToDelayedList>
}
 80094d4:	bf00      	nop
 80094d6:	3710      	adds	r7, #16
 80094d8:	46bd      	mov	sp, r7
 80094da:	bd80      	pop	{r7, pc}
 80094dc:	2000092c 	.word	0x2000092c

080094e0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80094e0:	b580      	push	{r7, lr}
 80094e2:	b086      	sub	sp, #24
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	60f8      	str	r0, [r7, #12]
 80094e8:	60b9      	str	r1, [r7, #8]
 80094ea:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d10a      	bne.n	8009508 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80094f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094f6:	f383 8811 	msr	BASEPRI, r3
 80094fa:	f3bf 8f6f 	isb	sy
 80094fe:	f3bf 8f4f 	dsb	sy
 8009502:	617b      	str	r3, [r7, #20]
}
 8009504:	bf00      	nop
 8009506:	e7fe      	b.n	8009506 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009508:	4b0a      	ldr	r3, [pc, #40]	; (8009534 <vTaskPlaceOnEventListRestricted+0x54>)
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	3318      	adds	r3, #24
 800950e:	4619      	mov	r1, r3
 8009510:	68f8      	ldr	r0, [r7, #12]
 8009512:	f7fe fe3e 	bl	8008192 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	2b00      	cmp	r3, #0
 800951a:	d002      	beq.n	8009522 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800951c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009520:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009522:	6879      	ldr	r1, [r7, #4]
 8009524:	68b8      	ldr	r0, [r7, #8]
 8009526:	f000 fa51 	bl	80099cc <prvAddCurrentTaskToDelayedList>
	}
 800952a:	bf00      	nop
 800952c:	3718      	adds	r7, #24
 800952e:	46bd      	mov	sp, r7
 8009530:	bd80      	pop	{r7, pc}
 8009532:	bf00      	nop
 8009534:	2000092c 	.word	0x2000092c

08009538 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009538:	b580      	push	{r7, lr}
 800953a:	b086      	sub	sp, #24
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	68db      	ldr	r3, [r3, #12]
 8009544:	68db      	ldr	r3, [r3, #12]
 8009546:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009548:	693b      	ldr	r3, [r7, #16]
 800954a:	2b00      	cmp	r3, #0
 800954c:	d10a      	bne.n	8009564 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800954e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009552:	f383 8811 	msr	BASEPRI, r3
 8009556:	f3bf 8f6f 	isb	sy
 800955a:	f3bf 8f4f 	dsb	sy
 800955e:	60fb      	str	r3, [r7, #12]
}
 8009560:	bf00      	nop
 8009562:	e7fe      	b.n	8009562 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009564:	693b      	ldr	r3, [r7, #16]
 8009566:	3318      	adds	r3, #24
 8009568:	4618      	mov	r0, r3
 800956a:	f7fe fe6f 	bl	800824c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800956e:	4b1e      	ldr	r3, [pc, #120]	; (80095e8 <xTaskRemoveFromEventList+0xb0>)
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	2b00      	cmp	r3, #0
 8009574:	d11d      	bne.n	80095b2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009576:	693b      	ldr	r3, [r7, #16]
 8009578:	3304      	adds	r3, #4
 800957a:	4618      	mov	r0, r3
 800957c:	f7fe fe66 	bl	800824c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009580:	693b      	ldr	r3, [r7, #16]
 8009582:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009584:	4b19      	ldr	r3, [pc, #100]	; (80095ec <xTaskRemoveFromEventList+0xb4>)
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	429a      	cmp	r2, r3
 800958a:	d903      	bls.n	8009594 <xTaskRemoveFromEventList+0x5c>
 800958c:	693b      	ldr	r3, [r7, #16]
 800958e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009590:	4a16      	ldr	r2, [pc, #88]	; (80095ec <xTaskRemoveFromEventList+0xb4>)
 8009592:	6013      	str	r3, [r2, #0]
 8009594:	693b      	ldr	r3, [r7, #16]
 8009596:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009598:	4613      	mov	r3, r2
 800959a:	009b      	lsls	r3, r3, #2
 800959c:	4413      	add	r3, r2
 800959e:	009b      	lsls	r3, r3, #2
 80095a0:	4a13      	ldr	r2, [pc, #76]	; (80095f0 <xTaskRemoveFromEventList+0xb8>)
 80095a2:	441a      	add	r2, r3
 80095a4:	693b      	ldr	r3, [r7, #16]
 80095a6:	3304      	adds	r3, #4
 80095a8:	4619      	mov	r1, r3
 80095aa:	4610      	mov	r0, r2
 80095ac:	f7fe fdf1 	bl	8008192 <vListInsertEnd>
 80095b0:	e005      	b.n	80095be <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80095b2:	693b      	ldr	r3, [r7, #16]
 80095b4:	3318      	adds	r3, #24
 80095b6:	4619      	mov	r1, r3
 80095b8:	480e      	ldr	r0, [pc, #56]	; (80095f4 <xTaskRemoveFromEventList+0xbc>)
 80095ba:	f7fe fdea 	bl	8008192 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80095be:	693b      	ldr	r3, [r7, #16]
 80095c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095c2:	4b0d      	ldr	r3, [pc, #52]	; (80095f8 <xTaskRemoveFromEventList+0xc0>)
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095c8:	429a      	cmp	r2, r3
 80095ca:	d905      	bls.n	80095d8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80095cc:	2301      	movs	r3, #1
 80095ce:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80095d0:	4b0a      	ldr	r3, [pc, #40]	; (80095fc <xTaskRemoveFromEventList+0xc4>)
 80095d2:	2201      	movs	r2, #1
 80095d4:	601a      	str	r2, [r3, #0]
 80095d6:	e001      	b.n	80095dc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80095d8:	2300      	movs	r3, #0
 80095da:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80095dc:	697b      	ldr	r3, [r7, #20]
}
 80095de:	4618      	mov	r0, r3
 80095e0:	3718      	adds	r7, #24
 80095e2:	46bd      	mov	sp, r7
 80095e4:	bd80      	pop	{r7, pc}
 80095e6:	bf00      	nop
 80095e8:	20000e28 	.word	0x20000e28
 80095ec:	20000e08 	.word	0x20000e08
 80095f0:	20000930 	.word	0x20000930
 80095f4:	20000dc0 	.word	0x20000dc0
 80095f8:	2000092c 	.word	0x2000092c
 80095fc:	20000e14 	.word	0x20000e14

08009600 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009600:	b480      	push	{r7}
 8009602:	b083      	sub	sp, #12
 8009604:	af00      	add	r7, sp, #0
 8009606:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009608:	4b06      	ldr	r3, [pc, #24]	; (8009624 <vTaskInternalSetTimeOutState+0x24>)
 800960a:	681a      	ldr	r2, [r3, #0]
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009610:	4b05      	ldr	r3, [pc, #20]	; (8009628 <vTaskInternalSetTimeOutState+0x28>)
 8009612:	681a      	ldr	r2, [r3, #0]
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	605a      	str	r2, [r3, #4]
}
 8009618:	bf00      	nop
 800961a:	370c      	adds	r7, #12
 800961c:	46bd      	mov	sp, r7
 800961e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009622:	4770      	bx	lr
 8009624:	20000e18 	.word	0x20000e18
 8009628:	20000e04 	.word	0x20000e04

0800962c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800962c:	b580      	push	{r7, lr}
 800962e:	b088      	sub	sp, #32
 8009630:	af00      	add	r7, sp, #0
 8009632:	6078      	str	r0, [r7, #4]
 8009634:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d10a      	bne.n	8009652 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800963c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009640:	f383 8811 	msr	BASEPRI, r3
 8009644:	f3bf 8f6f 	isb	sy
 8009648:	f3bf 8f4f 	dsb	sy
 800964c:	613b      	str	r3, [r7, #16]
}
 800964e:	bf00      	nop
 8009650:	e7fe      	b.n	8009650 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009652:	683b      	ldr	r3, [r7, #0]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d10a      	bne.n	800966e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800965c:	f383 8811 	msr	BASEPRI, r3
 8009660:	f3bf 8f6f 	isb	sy
 8009664:	f3bf 8f4f 	dsb	sy
 8009668:	60fb      	str	r3, [r7, #12]
}
 800966a:	bf00      	nop
 800966c:	e7fe      	b.n	800966c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800966e:	f000 fe79 	bl	800a364 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009672:	4b1d      	ldr	r3, [pc, #116]	; (80096e8 <xTaskCheckForTimeOut+0xbc>)
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	685b      	ldr	r3, [r3, #4]
 800967c:	69ba      	ldr	r2, [r7, #24]
 800967e:	1ad3      	subs	r3, r2, r3
 8009680:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009682:	683b      	ldr	r3, [r7, #0]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800968a:	d102      	bne.n	8009692 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800968c:	2300      	movs	r3, #0
 800968e:	61fb      	str	r3, [r7, #28]
 8009690:	e023      	b.n	80096da <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681a      	ldr	r2, [r3, #0]
 8009696:	4b15      	ldr	r3, [pc, #84]	; (80096ec <xTaskCheckForTimeOut+0xc0>)
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	429a      	cmp	r2, r3
 800969c:	d007      	beq.n	80096ae <xTaskCheckForTimeOut+0x82>
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	685b      	ldr	r3, [r3, #4]
 80096a2:	69ba      	ldr	r2, [r7, #24]
 80096a4:	429a      	cmp	r2, r3
 80096a6:	d302      	bcc.n	80096ae <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80096a8:	2301      	movs	r3, #1
 80096aa:	61fb      	str	r3, [r7, #28]
 80096ac:	e015      	b.n	80096da <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80096ae:	683b      	ldr	r3, [r7, #0]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	697a      	ldr	r2, [r7, #20]
 80096b4:	429a      	cmp	r2, r3
 80096b6:	d20b      	bcs.n	80096d0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80096b8:	683b      	ldr	r3, [r7, #0]
 80096ba:	681a      	ldr	r2, [r3, #0]
 80096bc:	697b      	ldr	r3, [r7, #20]
 80096be:	1ad2      	subs	r2, r2, r3
 80096c0:	683b      	ldr	r3, [r7, #0]
 80096c2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80096c4:	6878      	ldr	r0, [r7, #4]
 80096c6:	f7ff ff9b 	bl	8009600 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80096ca:	2300      	movs	r3, #0
 80096cc:	61fb      	str	r3, [r7, #28]
 80096ce:	e004      	b.n	80096da <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80096d0:	683b      	ldr	r3, [r7, #0]
 80096d2:	2200      	movs	r2, #0
 80096d4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80096d6:	2301      	movs	r3, #1
 80096d8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80096da:	f000 fe73 	bl	800a3c4 <vPortExitCritical>

	return xReturn;
 80096de:	69fb      	ldr	r3, [r7, #28]
}
 80096e0:	4618      	mov	r0, r3
 80096e2:	3720      	adds	r7, #32
 80096e4:	46bd      	mov	sp, r7
 80096e6:	bd80      	pop	{r7, pc}
 80096e8:	20000e04 	.word	0x20000e04
 80096ec:	20000e18 	.word	0x20000e18

080096f0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80096f0:	b480      	push	{r7}
 80096f2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80096f4:	4b03      	ldr	r3, [pc, #12]	; (8009704 <vTaskMissedYield+0x14>)
 80096f6:	2201      	movs	r2, #1
 80096f8:	601a      	str	r2, [r3, #0]
}
 80096fa:	bf00      	nop
 80096fc:	46bd      	mov	sp, r7
 80096fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009702:	4770      	bx	lr
 8009704:	20000e14 	.word	0x20000e14

08009708 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009708:	b580      	push	{r7, lr}
 800970a:	b082      	sub	sp, #8
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009710:	f000 f852 	bl	80097b8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009714:	4b06      	ldr	r3, [pc, #24]	; (8009730 <prvIdleTask+0x28>)
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	2b01      	cmp	r3, #1
 800971a:	d9f9      	bls.n	8009710 <prvIdleTask+0x8>
			{
				taskYIELD();
 800971c:	4b05      	ldr	r3, [pc, #20]	; (8009734 <prvIdleTask+0x2c>)
 800971e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009722:	601a      	str	r2, [r3, #0]
 8009724:	f3bf 8f4f 	dsb	sy
 8009728:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800972c:	e7f0      	b.n	8009710 <prvIdleTask+0x8>
 800972e:	bf00      	nop
 8009730:	20000930 	.word	0x20000930
 8009734:	e000ed04 	.word	0xe000ed04

08009738 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009738:	b580      	push	{r7, lr}
 800973a:	b082      	sub	sp, #8
 800973c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800973e:	2300      	movs	r3, #0
 8009740:	607b      	str	r3, [r7, #4]
 8009742:	e00c      	b.n	800975e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009744:	687a      	ldr	r2, [r7, #4]
 8009746:	4613      	mov	r3, r2
 8009748:	009b      	lsls	r3, r3, #2
 800974a:	4413      	add	r3, r2
 800974c:	009b      	lsls	r3, r3, #2
 800974e:	4a12      	ldr	r2, [pc, #72]	; (8009798 <prvInitialiseTaskLists+0x60>)
 8009750:	4413      	add	r3, r2
 8009752:	4618      	mov	r0, r3
 8009754:	f7fe fcf0 	bl	8008138 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	3301      	adds	r3, #1
 800975c:	607b      	str	r3, [r7, #4]
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	2b37      	cmp	r3, #55	; 0x37
 8009762:	d9ef      	bls.n	8009744 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009764:	480d      	ldr	r0, [pc, #52]	; (800979c <prvInitialiseTaskLists+0x64>)
 8009766:	f7fe fce7 	bl	8008138 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800976a:	480d      	ldr	r0, [pc, #52]	; (80097a0 <prvInitialiseTaskLists+0x68>)
 800976c:	f7fe fce4 	bl	8008138 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009770:	480c      	ldr	r0, [pc, #48]	; (80097a4 <prvInitialiseTaskLists+0x6c>)
 8009772:	f7fe fce1 	bl	8008138 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009776:	480c      	ldr	r0, [pc, #48]	; (80097a8 <prvInitialiseTaskLists+0x70>)
 8009778:	f7fe fcde 	bl	8008138 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800977c:	480b      	ldr	r0, [pc, #44]	; (80097ac <prvInitialiseTaskLists+0x74>)
 800977e:	f7fe fcdb 	bl	8008138 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009782:	4b0b      	ldr	r3, [pc, #44]	; (80097b0 <prvInitialiseTaskLists+0x78>)
 8009784:	4a05      	ldr	r2, [pc, #20]	; (800979c <prvInitialiseTaskLists+0x64>)
 8009786:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009788:	4b0a      	ldr	r3, [pc, #40]	; (80097b4 <prvInitialiseTaskLists+0x7c>)
 800978a:	4a05      	ldr	r2, [pc, #20]	; (80097a0 <prvInitialiseTaskLists+0x68>)
 800978c:	601a      	str	r2, [r3, #0]
}
 800978e:	bf00      	nop
 8009790:	3708      	adds	r7, #8
 8009792:	46bd      	mov	sp, r7
 8009794:	bd80      	pop	{r7, pc}
 8009796:	bf00      	nop
 8009798:	20000930 	.word	0x20000930
 800979c:	20000d90 	.word	0x20000d90
 80097a0:	20000da4 	.word	0x20000da4
 80097a4:	20000dc0 	.word	0x20000dc0
 80097a8:	20000dd4 	.word	0x20000dd4
 80097ac:	20000dec 	.word	0x20000dec
 80097b0:	20000db8 	.word	0x20000db8
 80097b4:	20000dbc 	.word	0x20000dbc

080097b8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80097b8:	b580      	push	{r7, lr}
 80097ba:	b082      	sub	sp, #8
 80097bc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80097be:	e019      	b.n	80097f4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80097c0:	f000 fdd0 	bl	800a364 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80097c4:	4b10      	ldr	r3, [pc, #64]	; (8009808 <prvCheckTasksWaitingTermination+0x50>)
 80097c6:	68db      	ldr	r3, [r3, #12]
 80097c8:	68db      	ldr	r3, [r3, #12]
 80097ca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	3304      	adds	r3, #4
 80097d0:	4618      	mov	r0, r3
 80097d2:	f7fe fd3b 	bl	800824c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80097d6:	4b0d      	ldr	r3, [pc, #52]	; (800980c <prvCheckTasksWaitingTermination+0x54>)
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	3b01      	subs	r3, #1
 80097dc:	4a0b      	ldr	r2, [pc, #44]	; (800980c <prvCheckTasksWaitingTermination+0x54>)
 80097de:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80097e0:	4b0b      	ldr	r3, [pc, #44]	; (8009810 <prvCheckTasksWaitingTermination+0x58>)
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	3b01      	subs	r3, #1
 80097e6:	4a0a      	ldr	r2, [pc, #40]	; (8009810 <prvCheckTasksWaitingTermination+0x58>)
 80097e8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80097ea:	f000 fdeb 	bl	800a3c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80097ee:	6878      	ldr	r0, [r7, #4]
 80097f0:	f000 f810 	bl	8009814 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80097f4:	4b06      	ldr	r3, [pc, #24]	; (8009810 <prvCheckTasksWaitingTermination+0x58>)
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d1e1      	bne.n	80097c0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80097fc:	bf00      	nop
 80097fe:	bf00      	nop
 8009800:	3708      	adds	r7, #8
 8009802:	46bd      	mov	sp, r7
 8009804:	bd80      	pop	{r7, pc}
 8009806:	bf00      	nop
 8009808:	20000dd4 	.word	0x20000dd4
 800980c:	20000e00 	.word	0x20000e00
 8009810:	20000de8 	.word	0x20000de8

08009814 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009814:	b580      	push	{r7, lr}
 8009816:	b084      	sub	sp, #16
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009822:	2b00      	cmp	r3, #0
 8009824:	d108      	bne.n	8009838 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800982a:	4618      	mov	r0, r3
 800982c:	f000 ff88 	bl	800a740 <vPortFree>
				vPortFree( pxTCB );
 8009830:	6878      	ldr	r0, [r7, #4]
 8009832:	f000 ff85 	bl	800a740 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009836:	e018      	b.n	800986a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800983e:	2b01      	cmp	r3, #1
 8009840:	d103      	bne.n	800984a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009842:	6878      	ldr	r0, [r7, #4]
 8009844:	f000 ff7c 	bl	800a740 <vPortFree>
	}
 8009848:	e00f      	b.n	800986a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009850:	2b02      	cmp	r3, #2
 8009852:	d00a      	beq.n	800986a <prvDeleteTCB+0x56>
	__asm volatile
 8009854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009858:	f383 8811 	msr	BASEPRI, r3
 800985c:	f3bf 8f6f 	isb	sy
 8009860:	f3bf 8f4f 	dsb	sy
 8009864:	60fb      	str	r3, [r7, #12]
}
 8009866:	bf00      	nop
 8009868:	e7fe      	b.n	8009868 <prvDeleteTCB+0x54>
	}
 800986a:	bf00      	nop
 800986c:	3710      	adds	r7, #16
 800986e:	46bd      	mov	sp, r7
 8009870:	bd80      	pop	{r7, pc}
	...

08009874 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009874:	b480      	push	{r7}
 8009876:	b083      	sub	sp, #12
 8009878:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800987a:	4b0c      	ldr	r3, [pc, #48]	; (80098ac <prvResetNextTaskUnblockTime+0x38>)
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	2b00      	cmp	r3, #0
 8009882:	d104      	bne.n	800988e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009884:	4b0a      	ldr	r3, [pc, #40]	; (80098b0 <prvResetNextTaskUnblockTime+0x3c>)
 8009886:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800988a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800988c:	e008      	b.n	80098a0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800988e:	4b07      	ldr	r3, [pc, #28]	; (80098ac <prvResetNextTaskUnblockTime+0x38>)
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	68db      	ldr	r3, [r3, #12]
 8009894:	68db      	ldr	r3, [r3, #12]
 8009896:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	685b      	ldr	r3, [r3, #4]
 800989c:	4a04      	ldr	r2, [pc, #16]	; (80098b0 <prvResetNextTaskUnblockTime+0x3c>)
 800989e:	6013      	str	r3, [r2, #0]
}
 80098a0:	bf00      	nop
 80098a2:	370c      	adds	r7, #12
 80098a4:	46bd      	mov	sp, r7
 80098a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098aa:	4770      	bx	lr
 80098ac:	20000db8 	.word	0x20000db8
 80098b0:	20000e20 	.word	0x20000e20

080098b4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80098b4:	b480      	push	{r7}
 80098b6:	b083      	sub	sp, #12
 80098b8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80098ba:	4b0b      	ldr	r3, [pc, #44]	; (80098e8 <xTaskGetSchedulerState+0x34>)
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d102      	bne.n	80098c8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80098c2:	2301      	movs	r3, #1
 80098c4:	607b      	str	r3, [r7, #4]
 80098c6:	e008      	b.n	80098da <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80098c8:	4b08      	ldr	r3, [pc, #32]	; (80098ec <xTaskGetSchedulerState+0x38>)
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d102      	bne.n	80098d6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80098d0:	2302      	movs	r3, #2
 80098d2:	607b      	str	r3, [r7, #4]
 80098d4:	e001      	b.n	80098da <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80098d6:	2300      	movs	r3, #0
 80098d8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80098da:	687b      	ldr	r3, [r7, #4]
	}
 80098dc:	4618      	mov	r0, r3
 80098de:	370c      	adds	r7, #12
 80098e0:	46bd      	mov	sp, r7
 80098e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e6:	4770      	bx	lr
 80098e8:	20000e0c 	.word	0x20000e0c
 80098ec:	20000e28 	.word	0x20000e28

080098f0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80098f0:	b580      	push	{r7, lr}
 80098f2:	b086      	sub	sp, #24
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80098fc:	2300      	movs	r3, #0
 80098fe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	2b00      	cmp	r3, #0
 8009904:	d056      	beq.n	80099b4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009906:	4b2e      	ldr	r3, [pc, #184]	; (80099c0 <xTaskPriorityDisinherit+0xd0>)
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	693a      	ldr	r2, [r7, #16]
 800990c:	429a      	cmp	r2, r3
 800990e:	d00a      	beq.n	8009926 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009914:	f383 8811 	msr	BASEPRI, r3
 8009918:	f3bf 8f6f 	isb	sy
 800991c:	f3bf 8f4f 	dsb	sy
 8009920:	60fb      	str	r3, [r7, #12]
}
 8009922:	bf00      	nop
 8009924:	e7fe      	b.n	8009924 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009926:	693b      	ldr	r3, [r7, #16]
 8009928:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800992a:	2b00      	cmp	r3, #0
 800992c:	d10a      	bne.n	8009944 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800992e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009932:	f383 8811 	msr	BASEPRI, r3
 8009936:	f3bf 8f6f 	isb	sy
 800993a:	f3bf 8f4f 	dsb	sy
 800993e:	60bb      	str	r3, [r7, #8]
}
 8009940:	bf00      	nop
 8009942:	e7fe      	b.n	8009942 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009944:	693b      	ldr	r3, [r7, #16]
 8009946:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009948:	1e5a      	subs	r2, r3, #1
 800994a:	693b      	ldr	r3, [r7, #16]
 800994c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800994e:	693b      	ldr	r3, [r7, #16]
 8009950:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009952:	693b      	ldr	r3, [r7, #16]
 8009954:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009956:	429a      	cmp	r2, r3
 8009958:	d02c      	beq.n	80099b4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800995a:	693b      	ldr	r3, [r7, #16]
 800995c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800995e:	2b00      	cmp	r3, #0
 8009960:	d128      	bne.n	80099b4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009962:	693b      	ldr	r3, [r7, #16]
 8009964:	3304      	adds	r3, #4
 8009966:	4618      	mov	r0, r3
 8009968:	f7fe fc70 	bl	800824c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800996c:	693b      	ldr	r3, [r7, #16]
 800996e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009970:	693b      	ldr	r3, [r7, #16]
 8009972:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009974:	693b      	ldr	r3, [r7, #16]
 8009976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009978:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800997c:	693b      	ldr	r3, [r7, #16]
 800997e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009980:	693b      	ldr	r3, [r7, #16]
 8009982:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009984:	4b0f      	ldr	r3, [pc, #60]	; (80099c4 <xTaskPriorityDisinherit+0xd4>)
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	429a      	cmp	r2, r3
 800998a:	d903      	bls.n	8009994 <xTaskPriorityDisinherit+0xa4>
 800998c:	693b      	ldr	r3, [r7, #16]
 800998e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009990:	4a0c      	ldr	r2, [pc, #48]	; (80099c4 <xTaskPriorityDisinherit+0xd4>)
 8009992:	6013      	str	r3, [r2, #0]
 8009994:	693b      	ldr	r3, [r7, #16]
 8009996:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009998:	4613      	mov	r3, r2
 800999a:	009b      	lsls	r3, r3, #2
 800999c:	4413      	add	r3, r2
 800999e:	009b      	lsls	r3, r3, #2
 80099a0:	4a09      	ldr	r2, [pc, #36]	; (80099c8 <xTaskPriorityDisinherit+0xd8>)
 80099a2:	441a      	add	r2, r3
 80099a4:	693b      	ldr	r3, [r7, #16]
 80099a6:	3304      	adds	r3, #4
 80099a8:	4619      	mov	r1, r3
 80099aa:	4610      	mov	r0, r2
 80099ac:	f7fe fbf1 	bl	8008192 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80099b0:	2301      	movs	r3, #1
 80099b2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80099b4:	697b      	ldr	r3, [r7, #20]
	}
 80099b6:	4618      	mov	r0, r3
 80099b8:	3718      	adds	r7, #24
 80099ba:	46bd      	mov	sp, r7
 80099bc:	bd80      	pop	{r7, pc}
 80099be:	bf00      	nop
 80099c0:	2000092c 	.word	0x2000092c
 80099c4:	20000e08 	.word	0x20000e08
 80099c8:	20000930 	.word	0x20000930

080099cc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80099cc:	b580      	push	{r7, lr}
 80099ce:	b084      	sub	sp, #16
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	6078      	str	r0, [r7, #4]
 80099d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80099d6:	4b21      	ldr	r3, [pc, #132]	; (8009a5c <prvAddCurrentTaskToDelayedList+0x90>)
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80099dc:	4b20      	ldr	r3, [pc, #128]	; (8009a60 <prvAddCurrentTaskToDelayedList+0x94>)
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	3304      	adds	r3, #4
 80099e2:	4618      	mov	r0, r3
 80099e4:	f7fe fc32 	bl	800824c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80099ee:	d10a      	bne.n	8009a06 <prvAddCurrentTaskToDelayedList+0x3a>
 80099f0:	683b      	ldr	r3, [r7, #0]
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d007      	beq.n	8009a06 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80099f6:	4b1a      	ldr	r3, [pc, #104]	; (8009a60 <prvAddCurrentTaskToDelayedList+0x94>)
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	3304      	adds	r3, #4
 80099fc:	4619      	mov	r1, r3
 80099fe:	4819      	ldr	r0, [pc, #100]	; (8009a64 <prvAddCurrentTaskToDelayedList+0x98>)
 8009a00:	f7fe fbc7 	bl	8008192 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009a04:	e026      	b.n	8009a54 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009a06:	68fa      	ldr	r2, [r7, #12]
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	4413      	add	r3, r2
 8009a0c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009a0e:	4b14      	ldr	r3, [pc, #80]	; (8009a60 <prvAddCurrentTaskToDelayedList+0x94>)
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	68ba      	ldr	r2, [r7, #8]
 8009a14:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009a16:	68ba      	ldr	r2, [r7, #8]
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	429a      	cmp	r2, r3
 8009a1c:	d209      	bcs.n	8009a32 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009a1e:	4b12      	ldr	r3, [pc, #72]	; (8009a68 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009a20:	681a      	ldr	r2, [r3, #0]
 8009a22:	4b0f      	ldr	r3, [pc, #60]	; (8009a60 <prvAddCurrentTaskToDelayedList+0x94>)
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	3304      	adds	r3, #4
 8009a28:	4619      	mov	r1, r3
 8009a2a:	4610      	mov	r0, r2
 8009a2c:	f7fe fbd5 	bl	80081da <vListInsert>
}
 8009a30:	e010      	b.n	8009a54 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009a32:	4b0e      	ldr	r3, [pc, #56]	; (8009a6c <prvAddCurrentTaskToDelayedList+0xa0>)
 8009a34:	681a      	ldr	r2, [r3, #0]
 8009a36:	4b0a      	ldr	r3, [pc, #40]	; (8009a60 <prvAddCurrentTaskToDelayedList+0x94>)
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	3304      	adds	r3, #4
 8009a3c:	4619      	mov	r1, r3
 8009a3e:	4610      	mov	r0, r2
 8009a40:	f7fe fbcb 	bl	80081da <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009a44:	4b0a      	ldr	r3, [pc, #40]	; (8009a70 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	68ba      	ldr	r2, [r7, #8]
 8009a4a:	429a      	cmp	r2, r3
 8009a4c:	d202      	bcs.n	8009a54 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009a4e:	4a08      	ldr	r2, [pc, #32]	; (8009a70 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009a50:	68bb      	ldr	r3, [r7, #8]
 8009a52:	6013      	str	r3, [r2, #0]
}
 8009a54:	bf00      	nop
 8009a56:	3710      	adds	r7, #16
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	bd80      	pop	{r7, pc}
 8009a5c:	20000e04 	.word	0x20000e04
 8009a60:	2000092c 	.word	0x2000092c
 8009a64:	20000dec 	.word	0x20000dec
 8009a68:	20000dbc 	.word	0x20000dbc
 8009a6c:	20000db8 	.word	0x20000db8
 8009a70:	20000e20 	.word	0x20000e20

08009a74 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009a74:	b580      	push	{r7, lr}
 8009a76:	b08a      	sub	sp, #40	; 0x28
 8009a78:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009a7e:	f000 fb07 	bl	800a090 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009a82:	4b1c      	ldr	r3, [pc, #112]	; (8009af4 <xTimerCreateTimerTask+0x80>)
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d021      	beq.n	8009ace <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009a8e:	2300      	movs	r3, #0
 8009a90:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009a92:	1d3a      	adds	r2, r7, #4
 8009a94:	f107 0108 	add.w	r1, r7, #8
 8009a98:	f107 030c 	add.w	r3, r7, #12
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	f7fe fb31 	bl	8008104 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009aa2:	6879      	ldr	r1, [r7, #4]
 8009aa4:	68bb      	ldr	r3, [r7, #8]
 8009aa6:	68fa      	ldr	r2, [r7, #12]
 8009aa8:	9202      	str	r2, [sp, #8]
 8009aaa:	9301      	str	r3, [sp, #4]
 8009aac:	2302      	movs	r3, #2
 8009aae:	9300      	str	r3, [sp, #0]
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	460a      	mov	r2, r1
 8009ab4:	4910      	ldr	r1, [pc, #64]	; (8009af8 <xTimerCreateTimerTask+0x84>)
 8009ab6:	4811      	ldr	r0, [pc, #68]	; (8009afc <xTimerCreateTimerTask+0x88>)
 8009ab8:	f7ff f8de 	bl	8008c78 <xTaskCreateStatic>
 8009abc:	4603      	mov	r3, r0
 8009abe:	4a10      	ldr	r2, [pc, #64]	; (8009b00 <xTimerCreateTimerTask+0x8c>)
 8009ac0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009ac2:	4b0f      	ldr	r3, [pc, #60]	; (8009b00 <xTimerCreateTimerTask+0x8c>)
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d001      	beq.n	8009ace <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009aca:	2301      	movs	r3, #1
 8009acc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009ace:	697b      	ldr	r3, [r7, #20]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d10a      	bne.n	8009aea <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ad8:	f383 8811 	msr	BASEPRI, r3
 8009adc:	f3bf 8f6f 	isb	sy
 8009ae0:	f3bf 8f4f 	dsb	sy
 8009ae4:	613b      	str	r3, [r7, #16]
}
 8009ae6:	bf00      	nop
 8009ae8:	e7fe      	b.n	8009ae8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009aea:	697b      	ldr	r3, [r7, #20]
}
 8009aec:	4618      	mov	r0, r3
 8009aee:	3718      	adds	r7, #24
 8009af0:	46bd      	mov	sp, r7
 8009af2:	bd80      	pop	{r7, pc}
 8009af4:	20000e5c 	.word	0x20000e5c
 8009af8:	0800b540 	.word	0x0800b540
 8009afc:	08009c39 	.word	0x08009c39
 8009b00:	20000e60 	.word	0x20000e60

08009b04 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009b04:	b580      	push	{r7, lr}
 8009b06:	b08a      	sub	sp, #40	; 0x28
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	60f8      	str	r0, [r7, #12]
 8009b0c:	60b9      	str	r1, [r7, #8]
 8009b0e:	607a      	str	r2, [r7, #4]
 8009b10:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009b12:	2300      	movs	r3, #0
 8009b14:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d10a      	bne.n	8009b32 <xTimerGenericCommand+0x2e>
	__asm volatile
 8009b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b20:	f383 8811 	msr	BASEPRI, r3
 8009b24:	f3bf 8f6f 	isb	sy
 8009b28:	f3bf 8f4f 	dsb	sy
 8009b2c:	623b      	str	r3, [r7, #32]
}
 8009b2e:	bf00      	nop
 8009b30:	e7fe      	b.n	8009b30 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009b32:	4b1a      	ldr	r3, [pc, #104]	; (8009b9c <xTimerGenericCommand+0x98>)
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d02a      	beq.n	8009b90 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009b3a:	68bb      	ldr	r3, [r7, #8]
 8009b3c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009b46:	68bb      	ldr	r3, [r7, #8]
 8009b48:	2b05      	cmp	r3, #5
 8009b4a:	dc18      	bgt.n	8009b7e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009b4c:	f7ff feb2 	bl	80098b4 <xTaskGetSchedulerState>
 8009b50:	4603      	mov	r3, r0
 8009b52:	2b02      	cmp	r3, #2
 8009b54:	d109      	bne.n	8009b6a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009b56:	4b11      	ldr	r3, [pc, #68]	; (8009b9c <xTimerGenericCommand+0x98>)
 8009b58:	6818      	ldr	r0, [r3, #0]
 8009b5a:	f107 0110 	add.w	r1, r7, #16
 8009b5e:	2300      	movs	r3, #0
 8009b60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b62:	f7fe fca1 	bl	80084a8 <xQueueGenericSend>
 8009b66:	6278      	str	r0, [r7, #36]	; 0x24
 8009b68:	e012      	b.n	8009b90 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009b6a:	4b0c      	ldr	r3, [pc, #48]	; (8009b9c <xTimerGenericCommand+0x98>)
 8009b6c:	6818      	ldr	r0, [r3, #0]
 8009b6e:	f107 0110 	add.w	r1, r7, #16
 8009b72:	2300      	movs	r3, #0
 8009b74:	2200      	movs	r2, #0
 8009b76:	f7fe fc97 	bl	80084a8 <xQueueGenericSend>
 8009b7a:	6278      	str	r0, [r7, #36]	; 0x24
 8009b7c:	e008      	b.n	8009b90 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009b7e:	4b07      	ldr	r3, [pc, #28]	; (8009b9c <xTimerGenericCommand+0x98>)
 8009b80:	6818      	ldr	r0, [r3, #0]
 8009b82:	f107 0110 	add.w	r1, r7, #16
 8009b86:	2300      	movs	r3, #0
 8009b88:	683a      	ldr	r2, [r7, #0]
 8009b8a:	f7fe fd8b 	bl	80086a4 <xQueueGenericSendFromISR>
 8009b8e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009b92:	4618      	mov	r0, r3
 8009b94:	3728      	adds	r7, #40	; 0x28
 8009b96:	46bd      	mov	sp, r7
 8009b98:	bd80      	pop	{r7, pc}
 8009b9a:	bf00      	nop
 8009b9c:	20000e5c 	.word	0x20000e5c

08009ba0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	b088      	sub	sp, #32
 8009ba4:	af02      	add	r7, sp, #8
 8009ba6:	6078      	str	r0, [r7, #4]
 8009ba8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009baa:	4b22      	ldr	r3, [pc, #136]	; (8009c34 <prvProcessExpiredTimer+0x94>)
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	68db      	ldr	r3, [r3, #12]
 8009bb0:	68db      	ldr	r3, [r3, #12]
 8009bb2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009bb4:	697b      	ldr	r3, [r7, #20]
 8009bb6:	3304      	adds	r3, #4
 8009bb8:	4618      	mov	r0, r3
 8009bba:	f7fe fb47 	bl	800824c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009bbe:	697b      	ldr	r3, [r7, #20]
 8009bc0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009bc4:	f003 0304 	and.w	r3, r3, #4
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d022      	beq.n	8009c12 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009bcc:	697b      	ldr	r3, [r7, #20]
 8009bce:	699a      	ldr	r2, [r3, #24]
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	18d1      	adds	r1, r2, r3
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	683a      	ldr	r2, [r7, #0]
 8009bd8:	6978      	ldr	r0, [r7, #20]
 8009bda:	f000 f8d1 	bl	8009d80 <prvInsertTimerInActiveList>
 8009bde:	4603      	mov	r3, r0
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d01f      	beq.n	8009c24 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009be4:	2300      	movs	r3, #0
 8009be6:	9300      	str	r3, [sp, #0]
 8009be8:	2300      	movs	r3, #0
 8009bea:	687a      	ldr	r2, [r7, #4]
 8009bec:	2100      	movs	r1, #0
 8009bee:	6978      	ldr	r0, [r7, #20]
 8009bf0:	f7ff ff88 	bl	8009b04 <xTimerGenericCommand>
 8009bf4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009bf6:	693b      	ldr	r3, [r7, #16]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d113      	bne.n	8009c24 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c00:	f383 8811 	msr	BASEPRI, r3
 8009c04:	f3bf 8f6f 	isb	sy
 8009c08:	f3bf 8f4f 	dsb	sy
 8009c0c:	60fb      	str	r3, [r7, #12]
}
 8009c0e:	bf00      	nop
 8009c10:	e7fe      	b.n	8009c10 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009c12:	697b      	ldr	r3, [r7, #20]
 8009c14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009c18:	f023 0301 	bic.w	r3, r3, #1
 8009c1c:	b2da      	uxtb	r2, r3
 8009c1e:	697b      	ldr	r3, [r7, #20]
 8009c20:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009c24:	697b      	ldr	r3, [r7, #20]
 8009c26:	6a1b      	ldr	r3, [r3, #32]
 8009c28:	6978      	ldr	r0, [r7, #20]
 8009c2a:	4798      	blx	r3
}
 8009c2c:	bf00      	nop
 8009c2e:	3718      	adds	r7, #24
 8009c30:	46bd      	mov	sp, r7
 8009c32:	bd80      	pop	{r7, pc}
 8009c34:	20000e54 	.word	0x20000e54

08009c38 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009c38:	b580      	push	{r7, lr}
 8009c3a:	b084      	sub	sp, #16
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009c40:	f107 0308 	add.w	r3, r7, #8
 8009c44:	4618      	mov	r0, r3
 8009c46:	f000 f857 	bl	8009cf8 <prvGetNextExpireTime>
 8009c4a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009c4c:	68bb      	ldr	r3, [r7, #8]
 8009c4e:	4619      	mov	r1, r3
 8009c50:	68f8      	ldr	r0, [r7, #12]
 8009c52:	f000 f803 	bl	8009c5c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009c56:	f000 f8d5 	bl	8009e04 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009c5a:	e7f1      	b.n	8009c40 <prvTimerTask+0x8>

08009c5c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009c5c:	b580      	push	{r7, lr}
 8009c5e:	b084      	sub	sp, #16
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	6078      	str	r0, [r7, #4]
 8009c64:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009c66:	f7ff fa43 	bl	80090f0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009c6a:	f107 0308 	add.w	r3, r7, #8
 8009c6e:	4618      	mov	r0, r3
 8009c70:	f000 f866 	bl	8009d40 <prvSampleTimeNow>
 8009c74:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009c76:	68bb      	ldr	r3, [r7, #8]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d130      	bne.n	8009cde <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009c7c:	683b      	ldr	r3, [r7, #0]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d10a      	bne.n	8009c98 <prvProcessTimerOrBlockTask+0x3c>
 8009c82:	687a      	ldr	r2, [r7, #4]
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	429a      	cmp	r2, r3
 8009c88:	d806      	bhi.n	8009c98 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009c8a:	f7ff fa3f 	bl	800910c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009c8e:	68f9      	ldr	r1, [r7, #12]
 8009c90:	6878      	ldr	r0, [r7, #4]
 8009c92:	f7ff ff85 	bl	8009ba0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009c96:	e024      	b.n	8009ce2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009c98:	683b      	ldr	r3, [r7, #0]
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d008      	beq.n	8009cb0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009c9e:	4b13      	ldr	r3, [pc, #76]	; (8009cec <prvProcessTimerOrBlockTask+0x90>)
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d101      	bne.n	8009cac <prvProcessTimerOrBlockTask+0x50>
 8009ca8:	2301      	movs	r3, #1
 8009caa:	e000      	b.n	8009cae <prvProcessTimerOrBlockTask+0x52>
 8009cac:	2300      	movs	r3, #0
 8009cae:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009cb0:	4b0f      	ldr	r3, [pc, #60]	; (8009cf0 <prvProcessTimerOrBlockTask+0x94>)
 8009cb2:	6818      	ldr	r0, [r3, #0]
 8009cb4:	687a      	ldr	r2, [r7, #4]
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	1ad3      	subs	r3, r2, r3
 8009cba:	683a      	ldr	r2, [r7, #0]
 8009cbc:	4619      	mov	r1, r3
 8009cbe:	f7fe ffa7 	bl	8008c10 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009cc2:	f7ff fa23 	bl	800910c <xTaskResumeAll>
 8009cc6:	4603      	mov	r3, r0
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d10a      	bne.n	8009ce2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009ccc:	4b09      	ldr	r3, [pc, #36]	; (8009cf4 <prvProcessTimerOrBlockTask+0x98>)
 8009cce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009cd2:	601a      	str	r2, [r3, #0]
 8009cd4:	f3bf 8f4f 	dsb	sy
 8009cd8:	f3bf 8f6f 	isb	sy
}
 8009cdc:	e001      	b.n	8009ce2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009cde:	f7ff fa15 	bl	800910c <xTaskResumeAll>
}
 8009ce2:	bf00      	nop
 8009ce4:	3710      	adds	r7, #16
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	bd80      	pop	{r7, pc}
 8009cea:	bf00      	nop
 8009cec:	20000e58 	.word	0x20000e58
 8009cf0:	20000e5c 	.word	0x20000e5c
 8009cf4:	e000ed04 	.word	0xe000ed04

08009cf8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009cf8:	b480      	push	{r7}
 8009cfa:	b085      	sub	sp, #20
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009d00:	4b0e      	ldr	r3, [pc, #56]	; (8009d3c <prvGetNextExpireTime+0x44>)
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d101      	bne.n	8009d0e <prvGetNextExpireTime+0x16>
 8009d0a:	2201      	movs	r2, #1
 8009d0c:	e000      	b.n	8009d10 <prvGetNextExpireTime+0x18>
 8009d0e:	2200      	movs	r2, #0
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d105      	bne.n	8009d28 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009d1c:	4b07      	ldr	r3, [pc, #28]	; (8009d3c <prvGetNextExpireTime+0x44>)
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	68db      	ldr	r3, [r3, #12]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	60fb      	str	r3, [r7, #12]
 8009d26:	e001      	b.n	8009d2c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009d28:	2300      	movs	r3, #0
 8009d2a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009d2c:	68fb      	ldr	r3, [r7, #12]
}
 8009d2e:	4618      	mov	r0, r3
 8009d30:	3714      	adds	r7, #20
 8009d32:	46bd      	mov	sp, r7
 8009d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d38:	4770      	bx	lr
 8009d3a:	bf00      	nop
 8009d3c:	20000e54 	.word	0x20000e54

08009d40 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009d40:	b580      	push	{r7, lr}
 8009d42:	b084      	sub	sp, #16
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009d48:	f7ff fa7e 	bl	8009248 <xTaskGetTickCount>
 8009d4c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009d4e:	4b0b      	ldr	r3, [pc, #44]	; (8009d7c <prvSampleTimeNow+0x3c>)
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	68fa      	ldr	r2, [r7, #12]
 8009d54:	429a      	cmp	r2, r3
 8009d56:	d205      	bcs.n	8009d64 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009d58:	f000 f936 	bl	8009fc8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	2201      	movs	r2, #1
 8009d60:	601a      	str	r2, [r3, #0]
 8009d62:	e002      	b.n	8009d6a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	2200      	movs	r2, #0
 8009d68:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009d6a:	4a04      	ldr	r2, [pc, #16]	; (8009d7c <prvSampleTimeNow+0x3c>)
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009d70:	68fb      	ldr	r3, [r7, #12]
}
 8009d72:	4618      	mov	r0, r3
 8009d74:	3710      	adds	r7, #16
 8009d76:	46bd      	mov	sp, r7
 8009d78:	bd80      	pop	{r7, pc}
 8009d7a:	bf00      	nop
 8009d7c:	20000e64 	.word	0x20000e64

08009d80 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009d80:	b580      	push	{r7, lr}
 8009d82:	b086      	sub	sp, #24
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	60f8      	str	r0, [r7, #12]
 8009d88:	60b9      	str	r1, [r7, #8]
 8009d8a:	607a      	str	r2, [r7, #4]
 8009d8c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009d8e:	2300      	movs	r3, #0
 8009d90:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	68ba      	ldr	r2, [r7, #8]
 8009d96:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	68fa      	ldr	r2, [r7, #12]
 8009d9c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009d9e:	68ba      	ldr	r2, [r7, #8]
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	429a      	cmp	r2, r3
 8009da4:	d812      	bhi.n	8009dcc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009da6:	687a      	ldr	r2, [r7, #4]
 8009da8:	683b      	ldr	r3, [r7, #0]
 8009daa:	1ad2      	subs	r2, r2, r3
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	699b      	ldr	r3, [r3, #24]
 8009db0:	429a      	cmp	r2, r3
 8009db2:	d302      	bcc.n	8009dba <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009db4:	2301      	movs	r3, #1
 8009db6:	617b      	str	r3, [r7, #20]
 8009db8:	e01b      	b.n	8009df2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009dba:	4b10      	ldr	r3, [pc, #64]	; (8009dfc <prvInsertTimerInActiveList+0x7c>)
 8009dbc:	681a      	ldr	r2, [r3, #0]
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	3304      	adds	r3, #4
 8009dc2:	4619      	mov	r1, r3
 8009dc4:	4610      	mov	r0, r2
 8009dc6:	f7fe fa08 	bl	80081da <vListInsert>
 8009dca:	e012      	b.n	8009df2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009dcc:	687a      	ldr	r2, [r7, #4]
 8009dce:	683b      	ldr	r3, [r7, #0]
 8009dd0:	429a      	cmp	r2, r3
 8009dd2:	d206      	bcs.n	8009de2 <prvInsertTimerInActiveList+0x62>
 8009dd4:	68ba      	ldr	r2, [r7, #8]
 8009dd6:	683b      	ldr	r3, [r7, #0]
 8009dd8:	429a      	cmp	r2, r3
 8009dda:	d302      	bcc.n	8009de2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009ddc:	2301      	movs	r3, #1
 8009dde:	617b      	str	r3, [r7, #20]
 8009de0:	e007      	b.n	8009df2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009de2:	4b07      	ldr	r3, [pc, #28]	; (8009e00 <prvInsertTimerInActiveList+0x80>)
 8009de4:	681a      	ldr	r2, [r3, #0]
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	3304      	adds	r3, #4
 8009dea:	4619      	mov	r1, r3
 8009dec:	4610      	mov	r0, r2
 8009dee:	f7fe f9f4 	bl	80081da <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009df2:	697b      	ldr	r3, [r7, #20]
}
 8009df4:	4618      	mov	r0, r3
 8009df6:	3718      	adds	r7, #24
 8009df8:	46bd      	mov	sp, r7
 8009dfa:	bd80      	pop	{r7, pc}
 8009dfc:	20000e58 	.word	0x20000e58
 8009e00:	20000e54 	.word	0x20000e54

08009e04 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009e04:	b580      	push	{r7, lr}
 8009e06:	b08e      	sub	sp, #56	; 0x38
 8009e08:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009e0a:	e0ca      	b.n	8009fa2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	da18      	bge.n	8009e44 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009e12:	1d3b      	adds	r3, r7, #4
 8009e14:	3304      	adds	r3, #4
 8009e16:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d10a      	bne.n	8009e34 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8009e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e22:	f383 8811 	msr	BASEPRI, r3
 8009e26:	f3bf 8f6f 	isb	sy
 8009e2a:	f3bf 8f4f 	dsb	sy
 8009e2e:	61fb      	str	r3, [r7, #28]
}
 8009e30:	bf00      	nop
 8009e32:	e7fe      	b.n	8009e32 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009e34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009e3a:	6850      	ldr	r0, [r2, #4]
 8009e3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009e3e:	6892      	ldr	r2, [r2, #8]
 8009e40:	4611      	mov	r1, r2
 8009e42:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	f2c0 80ab 	blt.w	8009fa2 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e52:	695b      	ldr	r3, [r3, #20]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d004      	beq.n	8009e62 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e5a:	3304      	adds	r3, #4
 8009e5c:	4618      	mov	r0, r3
 8009e5e:	f7fe f9f5 	bl	800824c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009e62:	463b      	mov	r3, r7
 8009e64:	4618      	mov	r0, r3
 8009e66:	f7ff ff6b 	bl	8009d40 <prvSampleTimeNow>
 8009e6a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	2b09      	cmp	r3, #9
 8009e70:	f200 8096 	bhi.w	8009fa0 <prvProcessReceivedCommands+0x19c>
 8009e74:	a201      	add	r2, pc, #4	; (adr r2, 8009e7c <prvProcessReceivedCommands+0x78>)
 8009e76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e7a:	bf00      	nop
 8009e7c:	08009ea5 	.word	0x08009ea5
 8009e80:	08009ea5 	.word	0x08009ea5
 8009e84:	08009ea5 	.word	0x08009ea5
 8009e88:	08009f19 	.word	0x08009f19
 8009e8c:	08009f2d 	.word	0x08009f2d
 8009e90:	08009f77 	.word	0x08009f77
 8009e94:	08009ea5 	.word	0x08009ea5
 8009e98:	08009ea5 	.word	0x08009ea5
 8009e9c:	08009f19 	.word	0x08009f19
 8009ea0:	08009f2d 	.word	0x08009f2d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ea6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009eaa:	f043 0301 	orr.w	r3, r3, #1
 8009eae:	b2da      	uxtb	r2, r3
 8009eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eb2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009eb6:	68ba      	ldr	r2, [r7, #8]
 8009eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eba:	699b      	ldr	r3, [r3, #24]
 8009ebc:	18d1      	adds	r1, r2, r3
 8009ebe:	68bb      	ldr	r3, [r7, #8]
 8009ec0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ec2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009ec4:	f7ff ff5c 	bl	8009d80 <prvInsertTimerInActiveList>
 8009ec8:	4603      	mov	r3, r0
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d069      	beq.n	8009fa2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ed0:	6a1b      	ldr	r3, [r3, #32]
 8009ed2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009ed4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ed8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009edc:	f003 0304 	and.w	r3, r3, #4
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d05e      	beq.n	8009fa2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009ee4:	68ba      	ldr	r2, [r7, #8]
 8009ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ee8:	699b      	ldr	r3, [r3, #24]
 8009eea:	441a      	add	r2, r3
 8009eec:	2300      	movs	r3, #0
 8009eee:	9300      	str	r3, [sp, #0]
 8009ef0:	2300      	movs	r3, #0
 8009ef2:	2100      	movs	r1, #0
 8009ef4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009ef6:	f7ff fe05 	bl	8009b04 <xTimerGenericCommand>
 8009efa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009efc:	6a3b      	ldr	r3, [r7, #32]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d14f      	bne.n	8009fa2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8009f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f06:	f383 8811 	msr	BASEPRI, r3
 8009f0a:	f3bf 8f6f 	isb	sy
 8009f0e:	f3bf 8f4f 	dsb	sy
 8009f12:	61bb      	str	r3, [r7, #24]
}
 8009f14:	bf00      	nop
 8009f16:	e7fe      	b.n	8009f16 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f1a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009f1e:	f023 0301 	bic.w	r3, r3, #1
 8009f22:	b2da      	uxtb	r2, r3
 8009f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f26:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009f2a:	e03a      	b.n	8009fa2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f2e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009f32:	f043 0301 	orr.w	r3, r3, #1
 8009f36:	b2da      	uxtb	r2, r3
 8009f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f3a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009f3e:	68ba      	ldr	r2, [r7, #8]
 8009f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f42:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f46:	699b      	ldr	r3, [r3, #24]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d10a      	bne.n	8009f62 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8009f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f50:	f383 8811 	msr	BASEPRI, r3
 8009f54:	f3bf 8f6f 	isb	sy
 8009f58:	f3bf 8f4f 	dsb	sy
 8009f5c:	617b      	str	r3, [r7, #20]
}
 8009f5e:	bf00      	nop
 8009f60:	e7fe      	b.n	8009f60 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f64:	699a      	ldr	r2, [r3, #24]
 8009f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f68:	18d1      	adds	r1, r2, r3
 8009f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009f70:	f7ff ff06 	bl	8009d80 <prvInsertTimerInActiveList>
					break;
 8009f74:	e015      	b.n	8009fa2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f78:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009f7c:	f003 0302 	and.w	r3, r3, #2
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d103      	bne.n	8009f8c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009f84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009f86:	f000 fbdb 	bl	800a740 <vPortFree>
 8009f8a:	e00a      	b.n	8009fa2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f8e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009f92:	f023 0301 	bic.w	r3, r3, #1
 8009f96:	b2da      	uxtb	r2, r3
 8009f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f9a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009f9e:	e000      	b.n	8009fa2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8009fa0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009fa2:	4b08      	ldr	r3, [pc, #32]	; (8009fc4 <prvProcessReceivedCommands+0x1c0>)
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	1d39      	adds	r1, r7, #4
 8009fa8:	2200      	movs	r2, #0
 8009faa:	4618      	mov	r0, r3
 8009fac:	f7fe fc16 	bl	80087dc <xQueueReceive>
 8009fb0:	4603      	mov	r3, r0
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	f47f af2a 	bne.w	8009e0c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009fb8:	bf00      	nop
 8009fba:	bf00      	nop
 8009fbc:	3730      	adds	r7, #48	; 0x30
 8009fbe:	46bd      	mov	sp, r7
 8009fc0:	bd80      	pop	{r7, pc}
 8009fc2:	bf00      	nop
 8009fc4:	20000e5c 	.word	0x20000e5c

08009fc8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009fc8:	b580      	push	{r7, lr}
 8009fca:	b088      	sub	sp, #32
 8009fcc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009fce:	e048      	b.n	800a062 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009fd0:	4b2d      	ldr	r3, [pc, #180]	; (800a088 <prvSwitchTimerLists+0xc0>)
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	68db      	ldr	r3, [r3, #12]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009fda:	4b2b      	ldr	r3, [pc, #172]	; (800a088 <prvSwitchTimerLists+0xc0>)
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	68db      	ldr	r3, [r3, #12]
 8009fe0:	68db      	ldr	r3, [r3, #12]
 8009fe2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	3304      	adds	r3, #4
 8009fe8:	4618      	mov	r0, r3
 8009fea:	f7fe f92f 	bl	800824c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	6a1b      	ldr	r3, [r3, #32]
 8009ff2:	68f8      	ldr	r0, [r7, #12]
 8009ff4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009ffc:	f003 0304 	and.w	r3, r3, #4
 800a000:	2b00      	cmp	r3, #0
 800a002:	d02e      	beq.n	800a062 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	699b      	ldr	r3, [r3, #24]
 800a008:	693a      	ldr	r2, [r7, #16]
 800a00a:	4413      	add	r3, r2
 800a00c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a00e:	68ba      	ldr	r2, [r7, #8]
 800a010:	693b      	ldr	r3, [r7, #16]
 800a012:	429a      	cmp	r2, r3
 800a014:	d90e      	bls.n	800a034 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	68ba      	ldr	r2, [r7, #8]
 800a01a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	68fa      	ldr	r2, [r7, #12]
 800a020:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a022:	4b19      	ldr	r3, [pc, #100]	; (800a088 <prvSwitchTimerLists+0xc0>)
 800a024:	681a      	ldr	r2, [r3, #0]
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	3304      	adds	r3, #4
 800a02a:	4619      	mov	r1, r3
 800a02c:	4610      	mov	r0, r2
 800a02e:	f7fe f8d4 	bl	80081da <vListInsert>
 800a032:	e016      	b.n	800a062 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a034:	2300      	movs	r3, #0
 800a036:	9300      	str	r3, [sp, #0]
 800a038:	2300      	movs	r3, #0
 800a03a:	693a      	ldr	r2, [r7, #16]
 800a03c:	2100      	movs	r1, #0
 800a03e:	68f8      	ldr	r0, [r7, #12]
 800a040:	f7ff fd60 	bl	8009b04 <xTimerGenericCommand>
 800a044:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d10a      	bne.n	800a062 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800a04c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a050:	f383 8811 	msr	BASEPRI, r3
 800a054:	f3bf 8f6f 	isb	sy
 800a058:	f3bf 8f4f 	dsb	sy
 800a05c:	603b      	str	r3, [r7, #0]
}
 800a05e:	bf00      	nop
 800a060:	e7fe      	b.n	800a060 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a062:	4b09      	ldr	r3, [pc, #36]	; (800a088 <prvSwitchTimerLists+0xc0>)
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d1b1      	bne.n	8009fd0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a06c:	4b06      	ldr	r3, [pc, #24]	; (800a088 <prvSwitchTimerLists+0xc0>)
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a072:	4b06      	ldr	r3, [pc, #24]	; (800a08c <prvSwitchTimerLists+0xc4>)
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	4a04      	ldr	r2, [pc, #16]	; (800a088 <prvSwitchTimerLists+0xc0>)
 800a078:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a07a:	4a04      	ldr	r2, [pc, #16]	; (800a08c <prvSwitchTimerLists+0xc4>)
 800a07c:	697b      	ldr	r3, [r7, #20]
 800a07e:	6013      	str	r3, [r2, #0]
}
 800a080:	bf00      	nop
 800a082:	3718      	adds	r7, #24
 800a084:	46bd      	mov	sp, r7
 800a086:	bd80      	pop	{r7, pc}
 800a088:	20000e54 	.word	0x20000e54
 800a08c:	20000e58 	.word	0x20000e58

0800a090 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a090:	b580      	push	{r7, lr}
 800a092:	b082      	sub	sp, #8
 800a094:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a096:	f000 f965 	bl	800a364 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a09a:	4b15      	ldr	r3, [pc, #84]	; (800a0f0 <prvCheckForValidListAndQueue+0x60>)
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d120      	bne.n	800a0e4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a0a2:	4814      	ldr	r0, [pc, #80]	; (800a0f4 <prvCheckForValidListAndQueue+0x64>)
 800a0a4:	f7fe f848 	bl	8008138 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a0a8:	4813      	ldr	r0, [pc, #76]	; (800a0f8 <prvCheckForValidListAndQueue+0x68>)
 800a0aa:	f7fe f845 	bl	8008138 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a0ae:	4b13      	ldr	r3, [pc, #76]	; (800a0fc <prvCheckForValidListAndQueue+0x6c>)
 800a0b0:	4a10      	ldr	r2, [pc, #64]	; (800a0f4 <prvCheckForValidListAndQueue+0x64>)
 800a0b2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a0b4:	4b12      	ldr	r3, [pc, #72]	; (800a100 <prvCheckForValidListAndQueue+0x70>)
 800a0b6:	4a10      	ldr	r2, [pc, #64]	; (800a0f8 <prvCheckForValidListAndQueue+0x68>)
 800a0b8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	9300      	str	r3, [sp, #0]
 800a0be:	4b11      	ldr	r3, [pc, #68]	; (800a104 <prvCheckForValidListAndQueue+0x74>)
 800a0c0:	4a11      	ldr	r2, [pc, #68]	; (800a108 <prvCheckForValidListAndQueue+0x78>)
 800a0c2:	2110      	movs	r1, #16
 800a0c4:	200a      	movs	r0, #10
 800a0c6:	f7fe f953 	bl	8008370 <xQueueGenericCreateStatic>
 800a0ca:	4603      	mov	r3, r0
 800a0cc:	4a08      	ldr	r2, [pc, #32]	; (800a0f0 <prvCheckForValidListAndQueue+0x60>)
 800a0ce:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a0d0:	4b07      	ldr	r3, [pc, #28]	; (800a0f0 <prvCheckForValidListAndQueue+0x60>)
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d005      	beq.n	800a0e4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a0d8:	4b05      	ldr	r3, [pc, #20]	; (800a0f0 <prvCheckForValidListAndQueue+0x60>)
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	490b      	ldr	r1, [pc, #44]	; (800a10c <prvCheckForValidListAndQueue+0x7c>)
 800a0de:	4618      	mov	r0, r3
 800a0e0:	f7fe fd6c 	bl	8008bbc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a0e4:	f000 f96e 	bl	800a3c4 <vPortExitCritical>
}
 800a0e8:	bf00      	nop
 800a0ea:	46bd      	mov	sp, r7
 800a0ec:	bd80      	pop	{r7, pc}
 800a0ee:	bf00      	nop
 800a0f0:	20000e5c 	.word	0x20000e5c
 800a0f4:	20000e2c 	.word	0x20000e2c
 800a0f8:	20000e40 	.word	0x20000e40
 800a0fc:	20000e54 	.word	0x20000e54
 800a100:	20000e58 	.word	0x20000e58
 800a104:	20000f08 	.word	0x20000f08
 800a108:	20000e68 	.word	0x20000e68
 800a10c:	0800b548 	.word	0x0800b548

0800a110 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a110:	b480      	push	{r7}
 800a112:	b085      	sub	sp, #20
 800a114:	af00      	add	r7, sp, #0
 800a116:	60f8      	str	r0, [r7, #12]
 800a118:	60b9      	str	r1, [r7, #8]
 800a11a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	3b04      	subs	r3, #4
 800a120:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a128:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	3b04      	subs	r3, #4
 800a12e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a130:	68bb      	ldr	r3, [r7, #8]
 800a132:	f023 0201 	bic.w	r2, r3, #1
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	3b04      	subs	r3, #4
 800a13e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a140:	4a0c      	ldr	r2, [pc, #48]	; (800a174 <pxPortInitialiseStack+0x64>)
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	3b14      	subs	r3, #20
 800a14a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a14c:	687a      	ldr	r2, [r7, #4]
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	3b04      	subs	r3, #4
 800a156:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	f06f 0202 	mvn.w	r2, #2
 800a15e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	3b20      	subs	r3, #32
 800a164:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a166:	68fb      	ldr	r3, [r7, #12]
}
 800a168:	4618      	mov	r0, r3
 800a16a:	3714      	adds	r7, #20
 800a16c:	46bd      	mov	sp, r7
 800a16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a172:	4770      	bx	lr
 800a174:	0800a179 	.word	0x0800a179

0800a178 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a178:	b480      	push	{r7}
 800a17a:	b085      	sub	sp, #20
 800a17c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a17e:	2300      	movs	r3, #0
 800a180:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a182:	4b12      	ldr	r3, [pc, #72]	; (800a1cc <prvTaskExitError+0x54>)
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a18a:	d00a      	beq.n	800a1a2 <prvTaskExitError+0x2a>
	__asm volatile
 800a18c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a190:	f383 8811 	msr	BASEPRI, r3
 800a194:	f3bf 8f6f 	isb	sy
 800a198:	f3bf 8f4f 	dsb	sy
 800a19c:	60fb      	str	r3, [r7, #12]
}
 800a19e:	bf00      	nop
 800a1a0:	e7fe      	b.n	800a1a0 <prvTaskExitError+0x28>
	__asm volatile
 800a1a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1a6:	f383 8811 	msr	BASEPRI, r3
 800a1aa:	f3bf 8f6f 	isb	sy
 800a1ae:	f3bf 8f4f 	dsb	sy
 800a1b2:	60bb      	str	r3, [r7, #8]
}
 800a1b4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a1b6:	bf00      	nop
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d0fc      	beq.n	800a1b8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a1be:	bf00      	nop
 800a1c0:	bf00      	nop
 800a1c2:	3714      	adds	r7, #20
 800a1c4:	46bd      	mov	sp, r7
 800a1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ca:	4770      	bx	lr
 800a1cc:	200000cc 	.word	0x200000cc

0800a1d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a1d0:	4b07      	ldr	r3, [pc, #28]	; (800a1f0 <pxCurrentTCBConst2>)
 800a1d2:	6819      	ldr	r1, [r3, #0]
 800a1d4:	6808      	ldr	r0, [r1, #0]
 800a1d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1da:	f380 8809 	msr	PSP, r0
 800a1de:	f3bf 8f6f 	isb	sy
 800a1e2:	f04f 0000 	mov.w	r0, #0
 800a1e6:	f380 8811 	msr	BASEPRI, r0
 800a1ea:	4770      	bx	lr
 800a1ec:	f3af 8000 	nop.w

0800a1f0 <pxCurrentTCBConst2>:
 800a1f0:	2000092c 	.word	0x2000092c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a1f4:	bf00      	nop
 800a1f6:	bf00      	nop

0800a1f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a1f8:	4808      	ldr	r0, [pc, #32]	; (800a21c <prvPortStartFirstTask+0x24>)
 800a1fa:	6800      	ldr	r0, [r0, #0]
 800a1fc:	6800      	ldr	r0, [r0, #0]
 800a1fe:	f380 8808 	msr	MSP, r0
 800a202:	f04f 0000 	mov.w	r0, #0
 800a206:	f380 8814 	msr	CONTROL, r0
 800a20a:	b662      	cpsie	i
 800a20c:	b661      	cpsie	f
 800a20e:	f3bf 8f4f 	dsb	sy
 800a212:	f3bf 8f6f 	isb	sy
 800a216:	df00      	svc	0
 800a218:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a21a:	bf00      	nop
 800a21c:	e000ed08 	.word	0xe000ed08

0800a220 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a220:	b580      	push	{r7, lr}
 800a222:	b086      	sub	sp, #24
 800a224:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a226:	4b46      	ldr	r3, [pc, #280]	; (800a340 <xPortStartScheduler+0x120>)
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	4a46      	ldr	r2, [pc, #280]	; (800a344 <xPortStartScheduler+0x124>)
 800a22c:	4293      	cmp	r3, r2
 800a22e:	d10a      	bne.n	800a246 <xPortStartScheduler+0x26>
	__asm volatile
 800a230:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a234:	f383 8811 	msr	BASEPRI, r3
 800a238:	f3bf 8f6f 	isb	sy
 800a23c:	f3bf 8f4f 	dsb	sy
 800a240:	613b      	str	r3, [r7, #16]
}
 800a242:	bf00      	nop
 800a244:	e7fe      	b.n	800a244 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a246:	4b3e      	ldr	r3, [pc, #248]	; (800a340 <xPortStartScheduler+0x120>)
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	4a3f      	ldr	r2, [pc, #252]	; (800a348 <xPortStartScheduler+0x128>)
 800a24c:	4293      	cmp	r3, r2
 800a24e:	d10a      	bne.n	800a266 <xPortStartScheduler+0x46>
	__asm volatile
 800a250:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a254:	f383 8811 	msr	BASEPRI, r3
 800a258:	f3bf 8f6f 	isb	sy
 800a25c:	f3bf 8f4f 	dsb	sy
 800a260:	60fb      	str	r3, [r7, #12]
}
 800a262:	bf00      	nop
 800a264:	e7fe      	b.n	800a264 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a266:	4b39      	ldr	r3, [pc, #228]	; (800a34c <xPortStartScheduler+0x12c>)
 800a268:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a26a:	697b      	ldr	r3, [r7, #20]
 800a26c:	781b      	ldrb	r3, [r3, #0]
 800a26e:	b2db      	uxtb	r3, r3
 800a270:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a272:	697b      	ldr	r3, [r7, #20]
 800a274:	22ff      	movs	r2, #255	; 0xff
 800a276:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a278:	697b      	ldr	r3, [r7, #20]
 800a27a:	781b      	ldrb	r3, [r3, #0]
 800a27c:	b2db      	uxtb	r3, r3
 800a27e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a280:	78fb      	ldrb	r3, [r7, #3]
 800a282:	b2db      	uxtb	r3, r3
 800a284:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a288:	b2da      	uxtb	r2, r3
 800a28a:	4b31      	ldr	r3, [pc, #196]	; (800a350 <xPortStartScheduler+0x130>)
 800a28c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a28e:	4b31      	ldr	r3, [pc, #196]	; (800a354 <xPortStartScheduler+0x134>)
 800a290:	2207      	movs	r2, #7
 800a292:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a294:	e009      	b.n	800a2aa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a296:	4b2f      	ldr	r3, [pc, #188]	; (800a354 <xPortStartScheduler+0x134>)
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	3b01      	subs	r3, #1
 800a29c:	4a2d      	ldr	r2, [pc, #180]	; (800a354 <xPortStartScheduler+0x134>)
 800a29e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a2a0:	78fb      	ldrb	r3, [r7, #3]
 800a2a2:	b2db      	uxtb	r3, r3
 800a2a4:	005b      	lsls	r3, r3, #1
 800a2a6:	b2db      	uxtb	r3, r3
 800a2a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a2aa:	78fb      	ldrb	r3, [r7, #3]
 800a2ac:	b2db      	uxtb	r3, r3
 800a2ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a2b2:	2b80      	cmp	r3, #128	; 0x80
 800a2b4:	d0ef      	beq.n	800a296 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a2b6:	4b27      	ldr	r3, [pc, #156]	; (800a354 <xPortStartScheduler+0x134>)
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	f1c3 0307 	rsb	r3, r3, #7
 800a2be:	2b04      	cmp	r3, #4
 800a2c0:	d00a      	beq.n	800a2d8 <xPortStartScheduler+0xb8>
	__asm volatile
 800a2c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2c6:	f383 8811 	msr	BASEPRI, r3
 800a2ca:	f3bf 8f6f 	isb	sy
 800a2ce:	f3bf 8f4f 	dsb	sy
 800a2d2:	60bb      	str	r3, [r7, #8]
}
 800a2d4:	bf00      	nop
 800a2d6:	e7fe      	b.n	800a2d6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a2d8:	4b1e      	ldr	r3, [pc, #120]	; (800a354 <xPortStartScheduler+0x134>)
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	021b      	lsls	r3, r3, #8
 800a2de:	4a1d      	ldr	r2, [pc, #116]	; (800a354 <xPortStartScheduler+0x134>)
 800a2e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a2e2:	4b1c      	ldr	r3, [pc, #112]	; (800a354 <xPortStartScheduler+0x134>)
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a2ea:	4a1a      	ldr	r2, [pc, #104]	; (800a354 <xPortStartScheduler+0x134>)
 800a2ec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	b2da      	uxtb	r2, r3
 800a2f2:	697b      	ldr	r3, [r7, #20]
 800a2f4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a2f6:	4b18      	ldr	r3, [pc, #96]	; (800a358 <xPortStartScheduler+0x138>)
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	4a17      	ldr	r2, [pc, #92]	; (800a358 <xPortStartScheduler+0x138>)
 800a2fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a300:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a302:	4b15      	ldr	r3, [pc, #84]	; (800a358 <xPortStartScheduler+0x138>)
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	4a14      	ldr	r2, [pc, #80]	; (800a358 <xPortStartScheduler+0x138>)
 800a308:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a30c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a30e:	f000 f8dd 	bl	800a4cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a312:	4b12      	ldr	r3, [pc, #72]	; (800a35c <xPortStartScheduler+0x13c>)
 800a314:	2200      	movs	r2, #0
 800a316:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a318:	f000 f8fc 	bl	800a514 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a31c:	4b10      	ldr	r3, [pc, #64]	; (800a360 <xPortStartScheduler+0x140>)
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	4a0f      	ldr	r2, [pc, #60]	; (800a360 <xPortStartScheduler+0x140>)
 800a322:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a326:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a328:	f7ff ff66 	bl	800a1f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a32c:	f7ff f856 	bl	80093dc <vTaskSwitchContext>
	prvTaskExitError();
 800a330:	f7ff ff22 	bl	800a178 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a334:	2300      	movs	r3, #0
}
 800a336:	4618      	mov	r0, r3
 800a338:	3718      	adds	r7, #24
 800a33a:	46bd      	mov	sp, r7
 800a33c:	bd80      	pop	{r7, pc}
 800a33e:	bf00      	nop
 800a340:	e000ed00 	.word	0xe000ed00
 800a344:	410fc271 	.word	0x410fc271
 800a348:	410fc270 	.word	0x410fc270
 800a34c:	e000e400 	.word	0xe000e400
 800a350:	20000f58 	.word	0x20000f58
 800a354:	20000f5c 	.word	0x20000f5c
 800a358:	e000ed20 	.word	0xe000ed20
 800a35c:	200000cc 	.word	0x200000cc
 800a360:	e000ef34 	.word	0xe000ef34

0800a364 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a364:	b480      	push	{r7}
 800a366:	b083      	sub	sp, #12
 800a368:	af00      	add	r7, sp, #0
	__asm volatile
 800a36a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a36e:	f383 8811 	msr	BASEPRI, r3
 800a372:	f3bf 8f6f 	isb	sy
 800a376:	f3bf 8f4f 	dsb	sy
 800a37a:	607b      	str	r3, [r7, #4]
}
 800a37c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a37e:	4b0f      	ldr	r3, [pc, #60]	; (800a3bc <vPortEnterCritical+0x58>)
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	3301      	adds	r3, #1
 800a384:	4a0d      	ldr	r2, [pc, #52]	; (800a3bc <vPortEnterCritical+0x58>)
 800a386:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a388:	4b0c      	ldr	r3, [pc, #48]	; (800a3bc <vPortEnterCritical+0x58>)
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	2b01      	cmp	r3, #1
 800a38e:	d10f      	bne.n	800a3b0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a390:	4b0b      	ldr	r3, [pc, #44]	; (800a3c0 <vPortEnterCritical+0x5c>)
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	b2db      	uxtb	r3, r3
 800a396:	2b00      	cmp	r3, #0
 800a398:	d00a      	beq.n	800a3b0 <vPortEnterCritical+0x4c>
	__asm volatile
 800a39a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a39e:	f383 8811 	msr	BASEPRI, r3
 800a3a2:	f3bf 8f6f 	isb	sy
 800a3a6:	f3bf 8f4f 	dsb	sy
 800a3aa:	603b      	str	r3, [r7, #0]
}
 800a3ac:	bf00      	nop
 800a3ae:	e7fe      	b.n	800a3ae <vPortEnterCritical+0x4a>
	}
}
 800a3b0:	bf00      	nop
 800a3b2:	370c      	adds	r7, #12
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ba:	4770      	bx	lr
 800a3bc:	200000cc 	.word	0x200000cc
 800a3c0:	e000ed04 	.word	0xe000ed04

0800a3c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a3c4:	b480      	push	{r7}
 800a3c6:	b083      	sub	sp, #12
 800a3c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a3ca:	4b12      	ldr	r3, [pc, #72]	; (800a414 <vPortExitCritical+0x50>)
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d10a      	bne.n	800a3e8 <vPortExitCritical+0x24>
	__asm volatile
 800a3d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3d6:	f383 8811 	msr	BASEPRI, r3
 800a3da:	f3bf 8f6f 	isb	sy
 800a3de:	f3bf 8f4f 	dsb	sy
 800a3e2:	607b      	str	r3, [r7, #4]
}
 800a3e4:	bf00      	nop
 800a3e6:	e7fe      	b.n	800a3e6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a3e8:	4b0a      	ldr	r3, [pc, #40]	; (800a414 <vPortExitCritical+0x50>)
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	3b01      	subs	r3, #1
 800a3ee:	4a09      	ldr	r2, [pc, #36]	; (800a414 <vPortExitCritical+0x50>)
 800a3f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a3f2:	4b08      	ldr	r3, [pc, #32]	; (800a414 <vPortExitCritical+0x50>)
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d105      	bne.n	800a406 <vPortExitCritical+0x42>
 800a3fa:	2300      	movs	r3, #0
 800a3fc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a3fe:	683b      	ldr	r3, [r7, #0]
 800a400:	f383 8811 	msr	BASEPRI, r3
}
 800a404:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a406:	bf00      	nop
 800a408:	370c      	adds	r7, #12
 800a40a:	46bd      	mov	sp, r7
 800a40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a410:	4770      	bx	lr
 800a412:	bf00      	nop
 800a414:	200000cc 	.word	0x200000cc
	...

0800a420 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a420:	f3ef 8009 	mrs	r0, PSP
 800a424:	f3bf 8f6f 	isb	sy
 800a428:	4b15      	ldr	r3, [pc, #84]	; (800a480 <pxCurrentTCBConst>)
 800a42a:	681a      	ldr	r2, [r3, #0]
 800a42c:	f01e 0f10 	tst.w	lr, #16
 800a430:	bf08      	it	eq
 800a432:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a436:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a43a:	6010      	str	r0, [r2, #0]
 800a43c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a440:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a444:	f380 8811 	msr	BASEPRI, r0
 800a448:	f3bf 8f4f 	dsb	sy
 800a44c:	f3bf 8f6f 	isb	sy
 800a450:	f7fe ffc4 	bl	80093dc <vTaskSwitchContext>
 800a454:	f04f 0000 	mov.w	r0, #0
 800a458:	f380 8811 	msr	BASEPRI, r0
 800a45c:	bc09      	pop	{r0, r3}
 800a45e:	6819      	ldr	r1, [r3, #0]
 800a460:	6808      	ldr	r0, [r1, #0]
 800a462:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a466:	f01e 0f10 	tst.w	lr, #16
 800a46a:	bf08      	it	eq
 800a46c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a470:	f380 8809 	msr	PSP, r0
 800a474:	f3bf 8f6f 	isb	sy
 800a478:	4770      	bx	lr
 800a47a:	bf00      	nop
 800a47c:	f3af 8000 	nop.w

0800a480 <pxCurrentTCBConst>:
 800a480:	2000092c 	.word	0x2000092c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a484:	bf00      	nop
 800a486:	bf00      	nop

0800a488 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a488:	b580      	push	{r7, lr}
 800a48a:	b082      	sub	sp, #8
 800a48c:	af00      	add	r7, sp, #0
	__asm volatile
 800a48e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a492:	f383 8811 	msr	BASEPRI, r3
 800a496:	f3bf 8f6f 	isb	sy
 800a49a:	f3bf 8f4f 	dsb	sy
 800a49e:	607b      	str	r3, [r7, #4]
}
 800a4a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a4a2:	f7fe fee1 	bl	8009268 <xTaskIncrementTick>
 800a4a6:	4603      	mov	r3, r0
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d003      	beq.n	800a4b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a4ac:	4b06      	ldr	r3, [pc, #24]	; (800a4c8 <xPortSysTickHandler+0x40>)
 800a4ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a4b2:	601a      	str	r2, [r3, #0]
 800a4b4:	2300      	movs	r3, #0
 800a4b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a4b8:	683b      	ldr	r3, [r7, #0]
 800a4ba:	f383 8811 	msr	BASEPRI, r3
}
 800a4be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a4c0:	bf00      	nop
 800a4c2:	3708      	adds	r7, #8
 800a4c4:	46bd      	mov	sp, r7
 800a4c6:	bd80      	pop	{r7, pc}
 800a4c8:	e000ed04 	.word	0xe000ed04

0800a4cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a4cc:	b480      	push	{r7}
 800a4ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a4d0:	4b0b      	ldr	r3, [pc, #44]	; (800a500 <vPortSetupTimerInterrupt+0x34>)
 800a4d2:	2200      	movs	r2, #0
 800a4d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a4d6:	4b0b      	ldr	r3, [pc, #44]	; (800a504 <vPortSetupTimerInterrupt+0x38>)
 800a4d8:	2200      	movs	r2, #0
 800a4da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a4dc:	4b0a      	ldr	r3, [pc, #40]	; (800a508 <vPortSetupTimerInterrupt+0x3c>)
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	4a0a      	ldr	r2, [pc, #40]	; (800a50c <vPortSetupTimerInterrupt+0x40>)
 800a4e2:	fba2 2303 	umull	r2, r3, r2, r3
 800a4e6:	099b      	lsrs	r3, r3, #6
 800a4e8:	4a09      	ldr	r2, [pc, #36]	; (800a510 <vPortSetupTimerInterrupt+0x44>)
 800a4ea:	3b01      	subs	r3, #1
 800a4ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a4ee:	4b04      	ldr	r3, [pc, #16]	; (800a500 <vPortSetupTimerInterrupt+0x34>)
 800a4f0:	2207      	movs	r2, #7
 800a4f2:	601a      	str	r2, [r3, #0]
}
 800a4f4:	bf00      	nop
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fc:	4770      	bx	lr
 800a4fe:	bf00      	nop
 800a500:	e000e010 	.word	0xe000e010
 800a504:	e000e018 	.word	0xe000e018
 800a508:	20000000 	.word	0x20000000
 800a50c:	10624dd3 	.word	0x10624dd3
 800a510:	e000e014 	.word	0xe000e014

0800a514 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a514:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a524 <vPortEnableVFP+0x10>
 800a518:	6801      	ldr	r1, [r0, #0]
 800a51a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a51e:	6001      	str	r1, [r0, #0]
 800a520:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a522:	bf00      	nop
 800a524:	e000ed88 	.word	0xe000ed88

0800a528 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a528:	b480      	push	{r7}
 800a52a:	b085      	sub	sp, #20
 800a52c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a52e:	f3ef 8305 	mrs	r3, IPSR
 800a532:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	2b0f      	cmp	r3, #15
 800a538:	d914      	bls.n	800a564 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a53a:	4a17      	ldr	r2, [pc, #92]	; (800a598 <vPortValidateInterruptPriority+0x70>)
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	4413      	add	r3, r2
 800a540:	781b      	ldrb	r3, [r3, #0]
 800a542:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a544:	4b15      	ldr	r3, [pc, #84]	; (800a59c <vPortValidateInterruptPriority+0x74>)
 800a546:	781b      	ldrb	r3, [r3, #0]
 800a548:	7afa      	ldrb	r2, [r7, #11]
 800a54a:	429a      	cmp	r2, r3
 800a54c:	d20a      	bcs.n	800a564 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a54e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a552:	f383 8811 	msr	BASEPRI, r3
 800a556:	f3bf 8f6f 	isb	sy
 800a55a:	f3bf 8f4f 	dsb	sy
 800a55e:	607b      	str	r3, [r7, #4]
}
 800a560:	bf00      	nop
 800a562:	e7fe      	b.n	800a562 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a564:	4b0e      	ldr	r3, [pc, #56]	; (800a5a0 <vPortValidateInterruptPriority+0x78>)
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a56c:	4b0d      	ldr	r3, [pc, #52]	; (800a5a4 <vPortValidateInterruptPriority+0x7c>)
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	429a      	cmp	r2, r3
 800a572:	d90a      	bls.n	800a58a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a574:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a578:	f383 8811 	msr	BASEPRI, r3
 800a57c:	f3bf 8f6f 	isb	sy
 800a580:	f3bf 8f4f 	dsb	sy
 800a584:	603b      	str	r3, [r7, #0]
}
 800a586:	bf00      	nop
 800a588:	e7fe      	b.n	800a588 <vPortValidateInterruptPriority+0x60>
	}
 800a58a:	bf00      	nop
 800a58c:	3714      	adds	r7, #20
 800a58e:	46bd      	mov	sp, r7
 800a590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a594:	4770      	bx	lr
 800a596:	bf00      	nop
 800a598:	e000e3f0 	.word	0xe000e3f0
 800a59c:	20000f58 	.word	0x20000f58
 800a5a0:	e000ed0c 	.word	0xe000ed0c
 800a5a4:	20000f5c 	.word	0x20000f5c

0800a5a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a5a8:	b580      	push	{r7, lr}
 800a5aa:	b08a      	sub	sp, #40	; 0x28
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a5b0:	2300      	movs	r3, #0
 800a5b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a5b4:	f7fe fd9c 	bl	80090f0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a5b8:	4b5b      	ldr	r3, [pc, #364]	; (800a728 <pvPortMalloc+0x180>)
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d101      	bne.n	800a5c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a5c0:	f000 f920 	bl	800a804 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a5c4:	4b59      	ldr	r3, [pc, #356]	; (800a72c <pvPortMalloc+0x184>)
 800a5c6:	681a      	ldr	r2, [r3, #0]
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	4013      	ands	r3, r2
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	f040 8093 	bne.w	800a6f8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d01d      	beq.n	800a614 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a5d8:	2208      	movs	r2, #8
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	4413      	add	r3, r2
 800a5de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	f003 0307 	and.w	r3, r3, #7
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d014      	beq.n	800a614 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	f023 0307 	bic.w	r3, r3, #7
 800a5f0:	3308      	adds	r3, #8
 800a5f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	f003 0307 	and.w	r3, r3, #7
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d00a      	beq.n	800a614 <pvPortMalloc+0x6c>
	__asm volatile
 800a5fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a602:	f383 8811 	msr	BASEPRI, r3
 800a606:	f3bf 8f6f 	isb	sy
 800a60a:	f3bf 8f4f 	dsb	sy
 800a60e:	617b      	str	r3, [r7, #20]
}
 800a610:	bf00      	nop
 800a612:	e7fe      	b.n	800a612 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	2b00      	cmp	r3, #0
 800a618:	d06e      	beq.n	800a6f8 <pvPortMalloc+0x150>
 800a61a:	4b45      	ldr	r3, [pc, #276]	; (800a730 <pvPortMalloc+0x188>)
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	687a      	ldr	r2, [r7, #4]
 800a620:	429a      	cmp	r2, r3
 800a622:	d869      	bhi.n	800a6f8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a624:	4b43      	ldr	r3, [pc, #268]	; (800a734 <pvPortMalloc+0x18c>)
 800a626:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a628:	4b42      	ldr	r3, [pc, #264]	; (800a734 <pvPortMalloc+0x18c>)
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a62e:	e004      	b.n	800a63a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a632:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a63a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a63c:	685b      	ldr	r3, [r3, #4]
 800a63e:	687a      	ldr	r2, [r7, #4]
 800a640:	429a      	cmp	r2, r3
 800a642:	d903      	bls.n	800a64c <pvPortMalloc+0xa4>
 800a644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d1f1      	bne.n	800a630 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a64c:	4b36      	ldr	r3, [pc, #216]	; (800a728 <pvPortMalloc+0x180>)
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a652:	429a      	cmp	r2, r3
 800a654:	d050      	beq.n	800a6f8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a656:	6a3b      	ldr	r3, [r7, #32]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	2208      	movs	r2, #8
 800a65c:	4413      	add	r3, r2
 800a65e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a662:	681a      	ldr	r2, [r3, #0]
 800a664:	6a3b      	ldr	r3, [r7, #32]
 800a666:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a66a:	685a      	ldr	r2, [r3, #4]
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	1ad2      	subs	r2, r2, r3
 800a670:	2308      	movs	r3, #8
 800a672:	005b      	lsls	r3, r3, #1
 800a674:	429a      	cmp	r2, r3
 800a676:	d91f      	bls.n	800a6b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a678:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	4413      	add	r3, r2
 800a67e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a680:	69bb      	ldr	r3, [r7, #24]
 800a682:	f003 0307 	and.w	r3, r3, #7
 800a686:	2b00      	cmp	r3, #0
 800a688:	d00a      	beq.n	800a6a0 <pvPortMalloc+0xf8>
	__asm volatile
 800a68a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a68e:	f383 8811 	msr	BASEPRI, r3
 800a692:	f3bf 8f6f 	isb	sy
 800a696:	f3bf 8f4f 	dsb	sy
 800a69a:	613b      	str	r3, [r7, #16]
}
 800a69c:	bf00      	nop
 800a69e:	e7fe      	b.n	800a69e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a6a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6a2:	685a      	ldr	r2, [r3, #4]
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	1ad2      	subs	r2, r2, r3
 800a6a8:	69bb      	ldr	r3, [r7, #24]
 800a6aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a6ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6ae:	687a      	ldr	r2, [r7, #4]
 800a6b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a6b2:	69b8      	ldr	r0, [r7, #24]
 800a6b4:	f000 f908 	bl	800a8c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a6b8:	4b1d      	ldr	r3, [pc, #116]	; (800a730 <pvPortMalloc+0x188>)
 800a6ba:	681a      	ldr	r2, [r3, #0]
 800a6bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6be:	685b      	ldr	r3, [r3, #4]
 800a6c0:	1ad3      	subs	r3, r2, r3
 800a6c2:	4a1b      	ldr	r2, [pc, #108]	; (800a730 <pvPortMalloc+0x188>)
 800a6c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a6c6:	4b1a      	ldr	r3, [pc, #104]	; (800a730 <pvPortMalloc+0x188>)
 800a6c8:	681a      	ldr	r2, [r3, #0]
 800a6ca:	4b1b      	ldr	r3, [pc, #108]	; (800a738 <pvPortMalloc+0x190>)
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	429a      	cmp	r2, r3
 800a6d0:	d203      	bcs.n	800a6da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a6d2:	4b17      	ldr	r3, [pc, #92]	; (800a730 <pvPortMalloc+0x188>)
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	4a18      	ldr	r2, [pc, #96]	; (800a738 <pvPortMalloc+0x190>)
 800a6d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a6da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6dc:	685a      	ldr	r2, [r3, #4]
 800a6de:	4b13      	ldr	r3, [pc, #76]	; (800a72c <pvPortMalloc+0x184>)
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	431a      	orrs	r2, r3
 800a6e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a6e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6ea:	2200      	movs	r2, #0
 800a6ec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a6ee:	4b13      	ldr	r3, [pc, #76]	; (800a73c <pvPortMalloc+0x194>)
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	3301      	adds	r3, #1
 800a6f4:	4a11      	ldr	r2, [pc, #68]	; (800a73c <pvPortMalloc+0x194>)
 800a6f6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a6f8:	f7fe fd08 	bl	800910c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a6fc:	69fb      	ldr	r3, [r7, #28]
 800a6fe:	f003 0307 	and.w	r3, r3, #7
 800a702:	2b00      	cmp	r3, #0
 800a704:	d00a      	beq.n	800a71c <pvPortMalloc+0x174>
	__asm volatile
 800a706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a70a:	f383 8811 	msr	BASEPRI, r3
 800a70e:	f3bf 8f6f 	isb	sy
 800a712:	f3bf 8f4f 	dsb	sy
 800a716:	60fb      	str	r3, [r7, #12]
}
 800a718:	bf00      	nop
 800a71a:	e7fe      	b.n	800a71a <pvPortMalloc+0x172>
	return pvReturn;
 800a71c:	69fb      	ldr	r3, [r7, #28]
}
 800a71e:	4618      	mov	r0, r3
 800a720:	3728      	adds	r7, #40	; 0x28
 800a722:	46bd      	mov	sp, r7
 800a724:	bd80      	pop	{r7, pc}
 800a726:	bf00      	nop
 800a728:	20001b20 	.word	0x20001b20
 800a72c:	20001b34 	.word	0x20001b34
 800a730:	20001b24 	.word	0x20001b24
 800a734:	20001b18 	.word	0x20001b18
 800a738:	20001b28 	.word	0x20001b28
 800a73c:	20001b2c 	.word	0x20001b2c

0800a740 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a740:	b580      	push	{r7, lr}
 800a742:	b086      	sub	sp, #24
 800a744:	af00      	add	r7, sp, #0
 800a746:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d04d      	beq.n	800a7ee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a752:	2308      	movs	r3, #8
 800a754:	425b      	negs	r3, r3
 800a756:	697a      	ldr	r2, [r7, #20]
 800a758:	4413      	add	r3, r2
 800a75a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a75c:	697b      	ldr	r3, [r7, #20]
 800a75e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a760:	693b      	ldr	r3, [r7, #16]
 800a762:	685a      	ldr	r2, [r3, #4]
 800a764:	4b24      	ldr	r3, [pc, #144]	; (800a7f8 <vPortFree+0xb8>)
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	4013      	ands	r3, r2
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d10a      	bne.n	800a784 <vPortFree+0x44>
	__asm volatile
 800a76e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a772:	f383 8811 	msr	BASEPRI, r3
 800a776:	f3bf 8f6f 	isb	sy
 800a77a:	f3bf 8f4f 	dsb	sy
 800a77e:	60fb      	str	r3, [r7, #12]
}
 800a780:	bf00      	nop
 800a782:	e7fe      	b.n	800a782 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a784:	693b      	ldr	r3, [r7, #16]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d00a      	beq.n	800a7a2 <vPortFree+0x62>
	__asm volatile
 800a78c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a790:	f383 8811 	msr	BASEPRI, r3
 800a794:	f3bf 8f6f 	isb	sy
 800a798:	f3bf 8f4f 	dsb	sy
 800a79c:	60bb      	str	r3, [r7, #8]
}
 800a79e:	bf00      	nop
 800a7a0:	e7fe      	b.n	800a7a0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a7a2:	693b      	ldr	r3, [r7, #16]
 800a7a4:	685a      	ldr	r2, [r3, #4]
 800a7a6:	4b14      	ldr	r3, [pc, #80]	; (800a7f8 <vPortFree+0xb8>)
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	4013      	ands	r3, r2
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d01e      	beq.n	800a7ee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a7b0:	693b      	ldr	r3, [r7, #16]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d11a      	bne.n	800a7ee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a7b8:	693b      	ldr	r3, [r7, #16]
 800a7ba:	685a      	ldr	r2, [r3, #4]
 800a7bc:	4b0e      	ldr	r3, [pc, #56]	; (800a7f8 <vPortFree+0xb8>)
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	43db      	mvns	r3, r3
 800a7c2:	401a      	ands	r2, r3
 800a7c4:	693b      	ldr	r3, [r7, #16]
 800a7c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a7c8:	f7fe fc92 	bl	80090f0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a7cc:	693b      	ldr	r3, [r7, #16]
 800a7ce:	685a      	ldr	r2, [r3, #4]
 800a7d0:	4b0a      	ldr	r3, [pc, #40]	; (800a7fc <vPortFree+0xbc>)
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	4413      	add	r3, r2
 800a7d6:	4a09      	ldr	r2, [pc, #36]	; (800a7fc <vPortFree+0xbc>)
 800a7d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a7da:	6938      	ldr	r0, [r7, #16]
 800a7dc:	f000 f874 	bl	800a8c8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a7e0:	4b07      	ldr	r3, [pc, #28]	; (800a800 <vPortFree+0xc0>)
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	3301      	adds	r3, #1
 800a7e6:	4a06      	ldr	r2, [pc, #24]	; (800a800 <vPortFree+0xc0>)
 800a7e8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a7ea:	f7fe fc8f 	bl	800910c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a7ee:	bf00      	nop
 800a7f0:	3718      	adds	r7, #24
 800a7f2:	46bd      	mov	sp, r7
 800a7f4:	bd80      	pop	{r7, pc}
 800a7f6:	bf00      	nop
 800a7f8:	20001b34 	.word	0x20001b34
 800a7fc:	20001b24 	.word	0x20001b24
 800a800:	20001b30 	.word	0x20001b30

0800a804 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a804:	b480      	push	{r7}
 800a806:	b085      	sub	sp, #20
 800a808:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a80a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800a80e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a810:	4b27      	ldr	r3, [pc, #156]	; (800a8b0 <prvHeapInit+0xac>)
 800a812:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	f003 0307 	and.w	r3, r3, #7
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d00c      	beq.n	800a838 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	3307      	adds	r3, #7
 800a822:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	f023 0307 	bic.w	r3, r3, #7
 800a82a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a82c:	68ba      	ldr	r2, [r7, #8]
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	1ad3      	subs	r3, r2, r3
 800a832:	4a1f      	ldr	r2, [pc, #124]	; (800a8b0 <prvHeapInit+0xac>)
 800a834:	4413      	add	r3, r2
 800a836:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a83c:	4a1d      	ldr	r2, [pc, #116]	; (800a8b4 <prvHeapInit+0xb0>)
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a842:	4b1c      	ldr	r3, [pc, #112]	; (800a8b4 <prvHeapInit+0xb0>)
 800a844:	2200      	movs	r2, #0
 800a846:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	68ba      	ldr	r2, [r7, #8]
 800a84c:	4413      	add	r3, r2
 800a84e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a850:	2208      	movs	r2, #8
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	1a9b      	subs	r3, r3, r2
 800a856:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	f023 0307 	bic.w	r3, r3, #7
 800a85e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	4a15      	ldr	r2, [pc, #84]	; (800a8b8 <prvHeapInit+0xb4>)
 800a864:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a866:	4b14      	ldr	r3, [pc, #80]	; (800a8b8 <prvHeapInit+0xb4>)
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	2200      	movs	r2, #0
 800a86c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a86e:	4b12      	ldr	r3, [pc, #72]	; (800a8b8 <prvHeapInit+0xb4>)
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	2200      	movs	r2, #0
 800a874:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a87a:	683b      	ldr	r3, [r7, #0]
 800a87c:	68fa      	ldr	r2, [r7, #12]
 800a87e:	1ad2      	subs	r2, r2, r3
 800a880:	683b      	ldr	r3, [r7, #0]
 800a882:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a884:	4b0c      	ldr	r3, [pc, #48]	; (800a8b8 <prvHeapInit+0xb4>)
 800a886:	681a      	ldr	r2, [r3, #0]
 800a888:	683b      	ldr	r3, [r7, #0]
 800a88a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a88c:	683b      	ldr	r3, [r7, #0]
 800a88e:	685b      	ldr	r3, [r3, #4]
 800a890:	4a0a      	ldr	r2, [pc, #40]	; (800a8bc <prvHeapInit+0xb8>)
 800a892:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a894:	683b      	ldr	r3, [r7, #0]
 800a896:	685b      	ldr	r3, [r3, #4]
 800a898:	4a09      	ldr	r2, [pc, #36]	; (800a8c0 <prvHeapInit+0xbc>)
 800a89a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a89c:	4b09      	ldr	r3, [pc, #36]	; (800a8c4 <prvHeapInit+0xc0>)
 800a89e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a8a2:	601a      	str	r2, [r3, #0]
}
 800a8a4:	bf00      	nop
 800a8a6:	3714      	adds	r7, #20
 800a8a8:	46bd      	mov	sp, r7
 800a8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ae:	4770      	bx	lr
 800a8b0:	20000f60 	.word	0x20000f60
 800a8b4:	20001b18 	.word	0x20001b18
 800a8b8:	20001b20 	.word	0x20001b20
 800a8bc:	20001b28 	.word	0x20001b28
 800a8c0:	20001b24 	.word	0x20001b24
 800a8c4:	20001b34 	.word	0x20001b34

0800a8c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a8c8:	b480      	push	{r7}
 800a8ca:	b085      	sub	sp, #20
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a8d0:	4b28      	ldr	r3, [pc, #160]	; (800a974 <prvInsertBlockIntoFreeList+0xac>)
 800a8d2:	60fb      	str	r3, [r7, #12]
 800a8d4:	e002      	b.n	800a8dc <prvInsertBlockIntoFreeList+0x14>
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	60fb      	str	r3, [r7, #12]
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	687a      	ldr	r2, [r7, #4]
 800a8e2:	429a      	cmp	r2, r3
 800a8e4:	d8f7      	bhi.n	800a8d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	685b      	ldr	r3, [r3, #4]
 800a8ee:	68ba      	ldr	r2, [r7, #8]
 800a8f0:	4413      	add	r3, r2
 800a8f2:	687a      	ldr	r2, [r7, #4]
 800a8f4:	429a      	cmp	r2, r3
 800a8f6:	d108      	bne.n	800a90a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	685a      	ldr	r2, [r3, #4]
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	685b      	ldr	r3, [r3, #4]
 800a900:	441a      	add	r2, r3
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	685b      	ldr	r3, [r3, #4]
 800a912:	68ba      	ldr	r2, [r7, #8]
 800a914:	441a      	add	r2, r3
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	429a      	cmp	r2, r3
 800a91c:	d118      	bne.n	800a950 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	681a      	ldr	r2, [r3, #0]
 800a922:	4b15      	ldr	r3, [pc, #84]	; (800a978 <prvInsertBlockIntoFreeList+0xb0>)
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	429a      	cmp	r2, r3
 800a928:	d00d      	beq.n	800a946 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	685a      	ldr	r2, [r3, #4]
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	685b      	ldr	r3, [r3, #4]
 800a934:	441a      	add	r2, r3
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	681a      	ldr	r2, [r3, #0]
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	601a      	str	r2, [r3, #0]
 800a944:	e008      	b.n	800a958 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a946:	4b0c      	ldr	r3, [pc, #48]	; (800a978 <prvInsertBlockIntoFreeList+0xb0>)
 800a948:	681a      	ldr	r2, [r3, #0]
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	601a      	str	r2, [r3, #0]
 800a94e:	e003      	b.n	800a958 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	681a      	ldr	r2, [r3, #0]
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a958:	68fa      	ldr	r2, [r7, #12]
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	429a      	cmp	r2, r3
 800a95e:	d002      	beq.n	800a966 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	687a      	ldr	r2, [r7, #4]
 800a964:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a966:	bf00      	nop
 800a968:	3714      	adds	r7, #20
 800a96a:	46bd      	mov	sp, r7
 800a96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a970:	4770      	bx	lr
 800a972:	bf00      	nop
 800a974:	20001b18 	.word	0x20001b18
 800a978:	20001b20 	.word	0x20001b20

0800a97c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a97c:	b580      	push	{r7, lr}
 800a97e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a980:	2200      	movs	r2, #0
 800a982:	490e      	ldr	r1, [pc, #56]	; (800a9bc <MX_USB_DEVICE_Init+0x40>)
 800a984:	480e      	ldr	r0, [pc, #56]	; (800a9c0 <MX_USB_DEVICE_Init+0x44>)
 800a986:	f7fb ff71 	bl	800686c <USBD_Init>
 800a98a:	4603      	mov	r3, r0
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d001      	beq.n	800a994 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a990:	f7f6 f942 	bl	8000c18 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 800a994:	490b      	ldr	r1, [pc, #44]	; (800a9c4 <MX_USB_DEVICE_Init+0x48>)
 800a996:	480a      	ldr	r0, [pc, #40]	; (800a9c0 <MX_USB_DEVICE_Init+0x44>)
 800a998:	f7fb ff98 	bl	80068cc <USBD_RegisterClass>
 800a99c:	4603      	mov	r3, r0
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d001      	beq.n	800a9a6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a9a2:	f7f6 f939 	bl	8000c18 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a9a6:	4806      	ldr	r0, [pc, #24]	; (800a9c0 <MX_USB_DEVICE_Init+0x44>)
 800a9a8:	f7fb ffc6 	bl	8006938 <USBD_Start>
 800a9ac:	4603      	mov	r3, r0
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d001      	beq.n	800a9b6 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 800a9b2:	f7f6 f931 	bl	8000c18 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a9b6:	bf00      	nop
 800a9b8:	bd80      	pop	{r7, pc}
 800a9ba:	bf00      	nop
 800a9bc:	200000d0 	.word	0x200000d0
 800a9c0:	20001b38 	.word	0x20001b38
 800a9c4:	2000000c 	.word	0x2000000c

0800a9c8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a9c8:	b480      	push	{r7}
 800a9ca:	b083      	sub	sp, #12
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	4603      	mov	r3, r0
 800a9d0:	6039      	str	r1, [r7, #0]
 800a9d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a9d4:	683b      	ldr	r3, [r7, #0]
 800a9d6:	2212      	movs	r2, #18
 800a9d8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a9da:	4b03      	ldr	r3, [pc, #12]	; (800a9e8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a9dc:	4618      	mov	r0, r3
 800a9de:	370c      	adds	r7, #12
 800a9e0:	46bd      	mov	sp, r7
 800a9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e6:	4770      	bx	lr
 800a9e8:	200000f0 	.word	0x200000f0

0800a9ec <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a9ec:	b480      	push	{r7}
 800a9ee:	b083      	sub	sp, #12
 800a9f0:	af00      	add	r7, sp, #0
 800a9f2:	4603      	mov	r3, r0
 800a9f4:	6039      	str	r1, [r7, #0]
 800a9f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a9f8:	683b      	ldr	r3, [r7, #0]
 800a9fa:	2204      	movs	r2, #4
 800a9fc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a9fe:	4b03      	ldr	r3, [pc, #12]	; (800aa0c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800aa00:	4618      	mov	r0, r3
 800aa02:	370c      	adds	r7, #12
 800aa04:	46bd      	mov	sp, r7
 800aa06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa0a:	4770      	bx	lr
 800aa0c:	20000110 	.word	0x20000110

0800aa10 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa10:	b580      	push	{r7, lr}
 800aa12:	b082      	sub	sp, #8
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	4603      	mov	r3, r0
 800aa18:	6039      	str	r1, [r7, #0]
 800aa1a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800aa1c:	79fb      	ldrb	r3, [r7, #7]
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d105      	bne.n	800aa2e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800aa22:	683a      	ldr	r2, [r7, #0]
 800aa24:	4907      	ldr	r1, [pc, #28]	; (800aa44 <USBD_FS_ProductStrDescriptor+0x34>)
 800aa26:	4808      	ldr	r0, [pc, #32]	; (800aa48 <USBD_FS_ProductStrDescriptor+0x38>)
 800aa28:	f7fd f962 	bl	8007cf0 <USBD_GetString>
 800aa2c:	e004      	b.n	800aa38 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800aa2e:	683a      	ldr	r2, [r7, #0]
 800aa30:	4904      	ldr	r1, [pc, #16]	; (800aa44 <USBD_FS_ProductStrDescriptor+0x34>)
 800aa32:	4805      	ldr	r0, [pc, #20]	; (800aa48 <USBD_FS_ProductStrDescriptor+0x38>)
 800aa34:	f7fd f95c 	bl	8007cf0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800aa38:	4b02      	ldr	r3, [pc, #8]	; (800aa44 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	3708      	adds	r7, #8
 800aa3e:	46bd      	mov	sp, r7
 800aa40:	bd80      	pop	{r7, pc}
 800aa42:	bf00      	nop
 800aa44:	20001e14 	.word	0x20001e14
 800aa48:	0800b550 	.word	0x0800b550

0800aa4c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa4c:	b580      	push	{r7, lr}
 800aa4e:	b082      	sub	sp, #8
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	4603      	mov	r3, r0
 800aa54:	6039      	str	r1, [r7, #0]
 800aa56:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800aa58:	683a      	ldr	r2, [r7, #0]
 800aa5a:	4904      	ldr	r1, [pc, #16]	; (800aa6c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800aa5c:	4804      	ldr	r0, [pc, #16]	; (800aa70 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800aa5e:	f7fd f947 	bl	8007cf0 <USBD_GetString>
  return USBD_StrDesc;
 800aa62:	4b02      	ldr	r3, [pc, #8]	; (800aa6c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800aa64:	4618      	mov	r0, r3
 800aa66:	3708      	adds	r7, #8
 800aa68:	46bd      	mov	sp, r7
 800aa6a:	bd80      	pop	{r7, pc}
 800aa6c:	20001e14 	.word	0x20001e14
 800aa70:	0800b568 	.word	0x0800b568

0800aa74 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa74:	b580      	push	{r7, lr}
 800aa76:	b082      	sub	sp, #8
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	4603      	mov	r3, r0
 800aa7c:	6039      	str	r1, [r7, #0]
 800aa7e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800aa80:	683b      	ldr	r3, [r7, #0]
 800aa82:	221a      	movs	r2, #26
 800aa84:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800aa86:	f000 f855 	bl	800ab34 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800aa8a:	4b02      	ldr	r3, [pc, #8]	; (800aa94 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800aa8c:	4618      	mov	r0, r3
 800aa8e:	3708      	adds	r7, #8
 800aa90:	46bd      	mov	sp, r7
 800aa92:	bd80      	pop	{r7, pc}
 800aa94:	20000114 	.word	0x20000114

0800aa98 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa98:	b580      	push	{r7, lr}
 800aa9a:	b082      	sub	sp, #8
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	4603      	mov	r3, r0
 800aaa0:	6039      	str	r1, [r7, #0]
 800aaa2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800aaa4:	79fb      	ldrb	r3, [r7, #7]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d105      	bne.n	800aab6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800aaaa:	683a      	ldr	r2, [r7, #0]
 800aaac:	4907      	ldr	r1, [pc, #28]	; (800aacc <USBD_FS_ConfigStrDescriptor+0x34>)
 800aaae:	4808      	ldr	r0, [pc, #32]	; (800aad0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800aab0:	f7fd f91e 	bl	8007cf0 <USBD_GetString>
 800aab4:	e004      	b.n	800aac0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800aab6:	683a      	ldr	r2, [r7, #0]
 800aab8:	4904      	ldr	r1, [pc, #16]	; (800aacc <USBD_FS_ConfigStrDescriptor+0x34>)
 800aaba:	4805      	ldr	r0, [pc, #20]	; (800aad0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800aabc:	f7fd f918 	bl	8007cf0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800aac0:	4b02      	ldr	r3, [pc, #8]	; (800aacc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800aac2:	4618      	mov	r0, r3
 800aac4:	3708      	adds	r7, #8
 800aac6:	46bd      	mov	sp, r7
 800aac8:	bd80      	pop	{r7, pc}
 800aaca:	bf00      	nop
 800aacc:	20001e14 	.word	0x20001e14
 800aad0:	0800b57c 	.word	0x0800b57c

0800aad4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aad4:	b580      	push	{r7, lr}
 800aad6:	b082      	sub	sp, #8
 800aad8:	af00      	add	r7, sp, #0
 800aada:	4603      	mov	r3, r0
 800aadc:	6039      	str	r1, [r7, #0]
 800aade:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800aae0:	79fb      	ldrb	r3, [r7, #7]
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d105      	bne.n	800aaf2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800aae6:	683a      	ldr	r2, [r7, #0]
 800aae8:	4907      	ldr	r1, [pc, #28]	; (800ab08 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800aaea:	4808      	ldr	r0, [pc, #32]	; (800ab0c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800aaec:	f7fd f900 	bl	8007cf0 <USBD_GetString>
 800aaf0:	e004      	b.n	800aafc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800aaf2:	683a      	ldr	r2, [r7, #0]
 800aaf4:	4904      	ldr	r1, [pc, #16]	; (800ab08 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800aaf6:	4805      	ldr	r0, [pc, #20]	; (800ab0c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800aaf8:	f7fd f8fa 	bl	8007cf0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800aafc:	4b02      	ldr	r3, [pc, #8]	; (800ab08 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800aafe:	4618      	mov	r0, r3
 800ab00:	3708      	adds	r7, #8
 800ab02:	46bd      	mov	sp, r7
 800ab04:	bd80      	pop	{r7, pc}
 800ab06:	bf00      	nop
 800ab08:	20001e14 	.word	0x20001e14
 800ab0c:	0800b588 	.word	0x0800b588

0800ab10 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ab10:	b480      	push	{r7}
 800ab12:	b083      	sub	sp, #12
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	4603      	mov	r3, r0
 800ab18:	6039      	str	r1, [r7, #0]
 800ab1a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800ab1c:	683b      	ldr	r3, [r7, #0]
 800ab1e:	220c      	movs	r2, #12
 800ab20:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800ab22:	4b03      	ldr	r3, [pc, #12]	; (800ab30 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800ab24:	4618      	mov	r0, r3
 800ab26:	370c      	adds	r7, #12
 800ab28:	46bd      	mov	sp, r7
 800ab2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab2e:	4770      	bx	lr
 800ab30:	20000104 	.word	0x20000104

0800ab34 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ab34:	b580      	push	{r7, lr}
 800ab36:	b084      	sub	sp, #16
 800ab38:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ab3a:	4b0f      	ldr	r3, [pc, #60]	; (800ab78 <Get_SerialNum+0x44>)
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ab40:	4b0e      	ldr	r3, [pc, #56]	; (800ab7c <Get_SerialNum+0x48>)
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ab46:	4b0e      	ldr	r3, [pc, #56]	; (800ab80 <Get_SerialNum+0x4c>)
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ab4c:	68fa      	ldr	r2, [r7, #12]
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	4413      	add	r3, r2
 800ab52:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d009      	beq.n	800ab6e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ab5a:	2208      	movs	r2, #8
 800ab5c:	4909      	ldr	r1, [pc, #36]	; (800ab84 <Get_SerialNum+0x50>)
 800ab5e:	68f8      	ldr	r0, [r7, #12]
 800ab60:	f000 f814 	bl	800ab8c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ab64:	2204      	movs	r2, #4
 800ab66:	4908      	ldr	r1, [pc, #32]	; (800ab88 <Get_SerialNum+0x54>)
 800ab68:	68b8      	ldr	r0, [r7, #8]
 800ab6a:	f000 f80f 	bl	800ab8c <IntToUnicode>
  }
}
 800ab6e:	bf00      	nop
 800ab70:	3710      	adds	r7, #16
 800ab72:	46bd      	mov	sp, r7
 800ab74:	bd80      	pop	{r7, pc}
 800ab76:	bf00      	nop
 800ab78:	1fff7590 	.word	0x1fff7590
 800ab7c:	1fff7594 	.word	0x1fff7594
 800ab80:	1fff7598 	.word	0x1fff7598
 800ab84:	20000116 	.word	0x20000116
 800ab88:	20000126 	.word	0x20000126

0800ab8c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ab8c:	b480      	push	{r7}
 800ab8e:	b087      	sub	sp, #28
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	60f8      	str	r0, [r7, #12]
 800ab94:	60b9      	str	r1, [r7, #8]
 800ab96:	4613      	mov	r3, r2
 800ab98:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ab9a:	2300      	movs	r3, #0
 800ab9c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ab9e:	2300      	movs	r3, #0
 800aba0:	75fb      	strb	r3, [r7, #23]
 800aba2:	e027      	b.n	800abf4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	0f1b      	lsrs	r3, r3, #28
 800aba8:	2b09      	cmp	r3, #9
 800abaa:	d80b      	bhi.n	800abc4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	0f1b      	lsrs	r3, r3, #28
 800abb0:	b2da      	uxtb	r2, r3
 800abb2:	7dfb      	ldrb	r3, [r7, #23]
 800abb4:	005b      	lsls	r3, r3, #1
 800abb6:	4619      	mov	r1, r3
 800abb8:	68bb      	ldr	r3, [r7, #8]
 800abba:	440b      	add	r3, r1
 800abbc:	3230      	adds	r2, #48	; 0x30
 800abbe:	b2d2      	uxtb	r2, r2
 800abc0:	701a      	strb	r2, [r3, #0]
 800abc2:	e00a      	b.n	800abda <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	0f1b      	lsrs	r3, r3, #28
 800abc8:	b2da      	uxtb	r2, r3
 800abca:	7dfb      	ldrb	r3, [r7, #23]
 800abcc:	005b      	lsls	r3, r3, #1
 800abce:	4619      	mov	r1, r3
 800abd0:	68bb      	ldr	r3, [r7, #8]
 800abd2:	440b      	add	r3, r1
 800abd4:	3237      	adds	r2, #55	; 0x37
 800abd6:	b2d2      	uxtb	r2, r2
 800abd8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	011b      	lsls	r3, r3, #4
 800abde:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800abe0:	7dfb      	ldrb	r3, [r7, #23]
 800abe2:	005b      	lsls	r3, r3, #1
 800abe4:	3301      	adds	r3, #1
 800abe6:	68ba      	ldr	r2, [r7, #8]
 800abe8:	4413      	add	r3, r2
 800abea:	2200      	movs	r2, #0
 800abec:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800abee:	7dfb      	ldrb	r3, [r7, #23]
 800abf0:	3301      	adds	r3, #1
 800abf2:	75fb      	strb	r3, [r7, #23]
 800abf4:	7dfa      	ldrb	r2, [r7, #23]
 800abf6:	79fb      	ldrb	r3, [r7, #7]
 800abf8:	429a      	cmp	r2, r3
 800abfa:	d3d3      	bcc.n	800aba4 <IntToUnicode+0x18>
  }
}
 800abfc:	bf00      	nop
 800abfe:	bf00      	nop
 800ac00:	371c      	adds	r7, #28
 800ac02:	46bd      	mov	sp, r7
 800ac04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac08:	4770      	bx	lr
	...

0800ac0c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ac0c:	b580      	push	{r7, lr}
 800ac0e:	b0ae      	sub	sp, #184	; 0xb8
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ac14:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800ac18:	2200      	movs	r2, #0
 800ac1a:	601a      	str	r2, [r3, #0]
 800ac1c:	605a      	str	r2, [r3, #4]
 800ac1e:	609a      	str	r2, [r3, #8]
 800ac20:	60da      	str	r2, [r3, #12]
 800ac22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800ac24:	f107 0318 	add.w	r3, r7, #24
 800ac28:	228c      	movs	r2, #140	; 0x8c
 800ac2a:	2100      	movs	r1, #0
 800ac2c:	4618      	mov	r0, r3
 800ac2e:	f000 fc2f 	bl	800b490 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ac3a:	f040 8085 	bne.w	800ad48 <HAL_PCD_MspInit+0x13c>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800ac3e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ac42:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800ac44:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800ac48:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800ac4c:	2301      	movs	r3, #1
 800ac4e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800ac50:	2301      	movs	r3, #1
 800ac52:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800ac54:	2318      	movs	r3, #24
 800ac56:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 800ac58:	2302      	movs	r3, #2
 800ac5a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800ac5c:	2302      	movs	r3, #2
 800ac5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800ac60:	2302      	movs	r3, #2
 800ac62:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800ac64:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800ac68:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800ac6a:	f107 0318 	add.w	r3, r7, #24
 800ac6e:	4618      	mov	r0, r3
 800ac70:	f7f8 fc9e 	bl	80035b0 <HAL_RCCEx_PeriphCLKConfig>
 800ac74:	4603      	mov	r3, r0
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d001      	beq.n	800ac7e <HAL_PCD_MspInit+0x72>
    {
      Error_Handler();
 800ac7a:	f7f5 ffcd 	bl	8000c18 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ac7e:	4b34      	ldr	r3, [pc, #208]	; (800ad50 <HAL_PCD_MspInit+0x144>)
 800ac80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac82:	4a33      	ldr	r2, [pc, #204]	; (800ad50 <HAL_PCD_MspInit+0x144>)
 800ac84:	f043 0301 	orr.w	r3, r3, #1
 800ac88:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ac8a:	4b31      	ldr	r3, [pc, #196]	; (800ad50 <HAL_PCD_MspInit+0x144>)
 800ac8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac8e:	f003 0301 	and.w	r3, r3, #1
 800ac92:	617b      	str	r3, [r7, #20]
 800ac94:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800ac96:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800ac9a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ac9e:	2302      	movs	r3, #2
 800aca0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aca4:	2300      	movs	r3, #0
 800aca6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800acaa:	2303      	movs	r3, #3
 800acac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800acb0:	230a      	movs	r3, #10
 800acb2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800acb6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800acba:	4619      	mov	r1, r3
 800acbc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800acc0:	f7f6 fa6a 	bl	8001198 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800acc4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800acc8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800accc:	2300      	movs	r3, #0
 800acce:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800acd2:	2300      	movs	r3, #0
 800acd4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800acd8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800acdc:	4619      	mov	r1, r3
 800acde:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800ace2:	f7f6 fa59 	bl	8001198 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ace6:	4b1a      	ldr	r3, [pc, #104]	; (800ad50 <HAL_PCD_MspInit+0x144>)
 800ace8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800acea:	4a19      	ldr	r2, [pc, #100]	; (800ad50 <HAL_PCD_MspInit+0x144>)
 800acec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800acf0:	64d3      	str	r3, [r2, #76]	; 0x4c
 800acf2:	4b17      	ldr	r3, [pc, #92]	; (800ad50 <HAL_PCD_MspInit+0x144>)
 800acf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800acf6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800acfa:	613b      	str	r3, [r7, #16]
 800acfc:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800acfe:	4b14      	ldr	r3, [pc, #80]	; (800ad50 <HAL_PCD_MspInit+0x144>)
 800ad00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d114      	bne.n	800ad34 <HAL_PCD_MspInit+0x128>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ad0a:	4b11      	ldr	r3, [pc, #68]	; (800ad50 <HAL_PCD_MspInit+0x144>)
 800ad0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad0e:	4a10      	ldr	r2, [pc, #64]	; (800ad50 <HAL_PCD_MspInit+0x144>)
 800ad10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ad14:	6593      	str	r3, [r2, #88]	; 0x58
 800ad16:	4b0e      	ldr	r3, [pc, #56]	; (800ad50 <HAL_PCD_MspInit+0x144>)
 800ad18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ad1e:	60fb      	str	r3, [r7, #12]
 800ad20:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 800ad22:	f7f7 fde7 	bl	80028f4 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800ad26:	4b0a      	ldr	r3, [pc, #40]	; (800ad50 <HAL_PCD_MspInit+0x144>)
 800ad28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad2a:	4a09      	ldr	r2, [pc, #36]	; (800ad50 <HAL_PCD_MspInit+0x144>)
 800ad2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ad30:	6593      	str	r3, [r2, #88]	; 0x58
 800ad32:	e001      	b.n	800ad38 <HAL_PCD_MspInit+0x12c>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800ad34:	f7f7 fdde 	bl	80028f4 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800ad38:	2200      	movs	r2, #0
 800ad3a:	2105      	movs	r1, #5
 800ad3c:	2043      	movs	r0, #67	; 0x43
 800ad3e:	f7f6 f9f4 	bl	800112a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ad42:	2043      	movs	r0, #67	; 0x43
 800ad44:	f7f6 fa0d 	bl	8001162 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800ad48:	bf00      	nop
 800ad4a:	37b8      	adds	r7, #184	; 0xb8
 800ad4c:	46bd      	mov	sp, r7
 800ad4e:	bd80      	pop	{r7, pc}
 800ad50:	40021000 	.word	0x40021000

0800ad54 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad54:	b580      	push	{r7, lr}
 800ad56:	b082      	sub	sp, #8
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800ad68:	4619      	mov	r1, r3
 800ad6a:	4610      	mov	r0, r2
 800ad6c:	f7fb fe31 	bl	80069d2 <USBD_LL_SetupStage>
}
 800ad70:	bf00      	nop
 800ad72:	3708      	adds	r7, #8
 800ad74:	46bd      	mov	sp, r7
 800ad76:	bd80      	pop	{r7, pc}

0800ad78 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad78:	b580      	push	{r7, lr}
 800ad7a:	b082      	sub	sp, #8
 800ad7c:	af00      	add	r7, sp, #0
 800ad7e:	6078      	str	r0, [r7, #4]
 800ad80:	460b      	mov	r3, r1
 800ad82:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800ad8a:	78fa      	ldrb	r2, [r7, #3]
 800ad8c:	6879      	ldr	r1, [r7, #4]
 800ad8e:	4613      	mov	r3, r2
 800ad90:	00db      	lsls	r3, r3, #3
 800ad92:	4413      	add	r3, r2
 800ad94:	009b      	lsls	r3, r3, #2
 800ad96:	440b      	add	r3, r1
 800ad98:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800ad9c:	681a      	ldr	r2, [r3, #0]
 800ad9e:	78fb      	ldrb	r3, [r7, #3]
 800ada0:	4619      	mov	r1, r3
 800ada2:	f7fb fe6b 	bl	8006a7c <USBD_LL_DataOutStage>
}
 800ada6:	bf00      	nop
 800ada8:	3708      	adds	r7, #8
 800adaa:	46bd      	mov	sp, r7
 800adac:	bd80      	pop	{r7, pc}

0800adae <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800adae:	b580      	push	{r7, lr}
 800adb0:	b082      	sub	sp, #8
 800adb2:	af00      	add	r7, sp, #0
 800adb4:	6078      	str	r0, [r7, #4]
 800adb6:	460b      	mov	r3, r1
 800adb8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800adc0:	78fa      	ldrb	r2, [r7, #3]
 800adc2:	6879      	ldr	r1, [r7, #4]
 800adc4:	4613      	mov	r3, r2
 800adc6:	00db      	lsls	r3, r3, #3
 800adc8:	4413      	add	r3, r2
 800adca:	009b      	lsls	r3, r3, #2
 800adcc:	440b      	add	r3, r1
 800adce:	3348      	adds	r3, #72	; 0x48
 800add0:	681a      	ldr	r2, [r3, #0]
 800add2:	78fb      	ldrb	r3, [r7, #3]
 800add4:	4619      	mov	r1, r3
 800add6:	f7fb ff04 	bl	8006be2 <USBD_LL_DataInStage>
}
 800adda:	bf00      	nop
 800addc:	3708      	adds	r7, #8
 800adde:	46bd      	mov	sp, r7
 800ade0:	bd80      	pop	{r7, pc}

0800ade2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ade2:	b580      	push	{r7, lr}
 800ade4:	b082      	sub	sp, #8
 800ade6:	af00      	add	r7, sp, #0
 800ade8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800adf0:	4618      	mov	r0, r3
 800adf2:	f7fc f83e 	bl	8006e72 <USBD_LL_SOF>
}
 800adf6:	bf00      	nop
 800adf8:	3708      	adds	r7, #8
 800adfa:	46bd      	mov	sp, r7
 800adfc:	bd80      	pop	{r7, pc}

0800adfe <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800adfe:	b580      	push	{r7, lr}
 800ae00:	b084      	sub	sp, #16
 800ae02:	af00      	add	r7, sp, #0
 800ae04:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ae06:	2301      	movs	r3, #1
 800ae08:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	691b      	ldr	r3, [r3, #16]
 800ae0e:	2b02      	cmp	r3, #2
 800ae10:	d001      	beq.n	800ae16 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800ae12:	f7f5 ff01 	bl	8000c18 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ae1c:	7bfa      	ldrb	r2, [r7, #15]
 800ae1e:	4611      	mov	r1, r2
 800ae20:	4618      	mov	r0, r3
 800ae22:	f7fb ffe2 	bl	8006dea <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ae2c:	4618      	mov	r0, r3
 800ae2e:	f7fb ff8a 	bl	8006d46 <USBD_LL_Reset>
}
 800ae32:	bf00      	nop
 800ae34:	3710      	adds	r7, #16
 800ae36:	46bd      	mov	sp, r7
 800ae38:	bd80      	pop	{r7, pc}
	...

0800ae3c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae3c:	b580      	push	{r7, lr}
 800ae3e:	b082      	sub	sp, #8
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	687a      	ldr	r2, [r7, #4]
 800ae50:	6812      	ldr	r2, [r2, #0]
 800ae52:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ae56:	f043 0301 	orr.w	r3, r3, #1
 800ae5a:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ae62:	4618      	mov	r0, r3
 800ae64:	f7fb ffd1 	bl	8006e0a <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	6a1b      	ldr	r3, [r3, #32]
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d005      	beq.n	800ae7c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ae70:	4b04      	ldr	r3, [pc, #16]	; (800ae84 <HAL_PCD_SuspendCallback+0x48>)
 800ae72:	691b      	ldr	r3, [r3, #16]
 800ae74:	4a03      	ldr	r2, [pc, #12]	; (800ae84 <HAL_PCD_SuspendCallback+0x48>)
 800ae76:	f043 0306 	orr.w	r3, r3, #6
 800ae7a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ae7c:	bf00      	nop
 800ae7e:	3708      	adds	r7, #8
 800ae80:	46bd      	mov	sp, r7
 800ae82:	bd80      	pop	{r7, pc}
 800ae84:	e000ed00 	.word	0xe000ed00

0800ae88 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae88:	b580      	push	{r7, lr}
 800ae8a:	b082      	sub	sp, #8
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	687a      	ldr	r2, [r7, #4]
 800ae9c:	6812      	ldr	r2, [r2, #0]
 800ae9e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800aea2:	f023 0301 	bic.w	r3, r3, #1
 800aea6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	6a1b      	ldr	r3, [r3, #32]
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d007      	beq.n	800aec0 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800aeb0:	4b08      	ldr	r3, [pc, #32]	; (800aed4 <HAL_PCD_ResumeCallback+0x4c>)
 800aeb2:	691b      	ldr	r3, [r3, #16]
 800aeb4:	4a07      	ldr	r2, [pc, #28]	; (800aed4 <HAL_PCD_ResumeCallback+0x4c>)
 800aeb6:	f023 0306 	bic.w	r3, r3, #6
 800aeba:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800aebc:	f000 fae2 	bl	800b484 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800aec6:	4618      	mov	r0, r3
 800aec8:	f7fb ffbb 	bl	8006e42 <USBD_LL_Resume>
}
 800aecc:	bf00      	nop
 800aece:	3708      	adds	r7, #8
 800aed0:	46bd      	mov	sp, r7
 800aed2:	bd80      	pop	{r7, pc}
 800aed4:	e000ed00 	.word	0xe000ed00

0800aed8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aed8:	b580      	push	{r7, lr}
 800aeda:	b082      	sub	sp, #8
 800aedc:	af00      	add	r7, sp, #0
 800aede:	6078      	str	r0, [r7, #4]
 800aee0:	460b      	mov	r3, r1
 800aee2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800aeea:	78fa      	ldrb	r2, [r7, #3]
 800aeec:	4611      	mov	r1, r2
 800aeee:	4618      	mov	r0, r3
 800aef0:	f7fc f811 	bl	8006f16 <USBD_LL_IsoOUTIncomplete>
}
 800aef4:	bf00      	nop
 800aef6:	3708      	adds	r7, #8
 800aef8:	46bd      	mov	sp, r7
 800aefa:	bd80      	pop	{r7, pc}

0800aefc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aefc:	b580      	push	{r7, lr}
 800aefe:	b082      	sub	sp, #8
 800af00:	af00      	add	r7, sp, #0
 800af02:	6078      	str	r0, [r7, #4]
 800af04:	460b      	mov	r3, r1
 800af06:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800af0e:	78fa      	ldrb	r2, [r7, #3]
 800af10:	4611      	mov	r1, r2
 800af12:	4618      	mov	r0, r3
 800af14:	f7fb ffcd 	bl	8006eb2 <USBD_LL_IsoINIncomplete>
}
 800af18:	bf00      	nop
 800af1a:	3708      	adds	r7, #8
 800af1c:	46bd      	mov	sp, r7
 800af1e:	bd80      	pop	{r7, pc}

0800af20 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800af20:	b580      	push	{r7, lr}
 800af22:	b082      	sub	sp, #8
 800af24:	af00      	add	r7, sp, #0
 800af26:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800af2e:	4618      	mov	r0, r3
 800af30:	f7fc f823 	bl	8006f7a <USBD_LL_DevConnected>
}
 800af34:	bf00      	nop
 800af36:	3708      	adds	r7, #8
 800af38:	46bd      	mov	sp, r7
 800af3a:	bd80      	pop	{r7, pc}

0800af3c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800af3c:	b580      	push	{r7, lr}
 800af3e:	b082      	sub	sp, #8
 800af40:	af00      	add	r7, sp, #0
 800af42:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800af4a:	4618      	mov	r0, r3
 800af4c:	f7fc f820 	bl	8006f90 <USBD_LL_DevDisconnected>
}
 800af50:	bf00      	nop
 800af52:	3708      	adds	r7, #8
 800af54:	46bd      	mov	sp, r7
 800af56:	bd80      	pop	{r7, pc}

0800af58 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800af58:	b580      	push	{r7, lr}
 800af5a:	b082      	sub	sp, #8
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	781b      	ldrb	r3, [r3, #0]
 800af64:	2b00      	cmp	r3, #0
 800af66:	d13c      	bne.n	800afe2 <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800af68:	4a20      	ldr	r2, [pc, #128]	; (800afec <USBD_LL_Init+0x94>)
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	4a1e      	ldr	r2, [pc, #120]	; (800afec <USBD_LL_Init+0x94>)
 800af74:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800af78:	4b1c      	ldr	r3, [pc, #112]	; (800afec <USBD_LL_Init+0x94>)
 800af7a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800af7e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800af80:	4b1a      	ldr	r3, [pc, #104]	; (800afec <USBD_LL_Init+0x94>)
 800af82:	2206      	movs	r2, #6
 800af84:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800af86:	4b19      	ldr	r3, [pc, #100]	; (800afec <USBD_LL_Init+0x94>)
 800af88:	2202      	movs	r2, #2
 800af8a:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800af8c:	4b17      	ldr	r3, [pc, #92]	; (800afec <USBD_LL_Init+0x94>)
 800af8e:	2202      	movs	r2, #2
 800af90:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800af92:	4b16      	ldr	r3, [pc, #88]	; (800afec <USBD_LL_Init+0x94>)
 800af94:	2201      	movs	r2, #1
 800af96:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800af98:	4b14      	ldr	r3, [pc, #80]	; (800afec <USBD_LL_Init+0x94>)
 800af9a:	2200      	movs	r2, #0
 800af9c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800af9e:	4b13      	ldr	r3, [pc, #76]	; (800afec <USBD_LL_Init+0x94>)
 800afa0:	2200      	movs	r2, #0
 800afa2:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 800afa4:	4b11      	ldr	r3, [pc, #68]	; (800afec <USBD_LL_Init+0x94>)
 800afa6:	2201      	movs	r2, #1
 800afa8:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800afaa:	4b10      	ldr	r3, [pc, #64]	; (800afec <USBD_LL_Init+0x94>)
 800afac:	2200      	movs	r2, #0
 800afae:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800afb0:	4b0e      	ldr	r3, [pc, #56]	; (800afec <USBD_LL_Init+0x94>)
 800afb2:	2201      	movs	r2, #1
 800afb4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800afb6:	480d      	ldr	r0, [pc, #52]	; (800afec <USBD_LL_Init+0x94>)
 800afb8:	f7f6 fa98 	bl	80014ec <HAL_PCD_Init>
 800afbc:	4603      	mov	r3, r0
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d001      	beq.n	800afc6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800afc2:	f7f5 fe29 	bl	8000c18 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800afc6:	2180      	movs	r1, #128	; 0x80
 800afc8:	4808      	ldr	r0, [pc, #32]	; (800afec <USBD_LL_Init+0x94>)
 800afca:	f7f7 fbea 	bl	80027a2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800afce:	2240      	movs	r2, #64	; 0x40
 800afd0:	2100      	movs	r1, #0
 800afd2:	4806      	ldr	r0, [pc, #24]	; (800afec <USBD_LL_Init+0x94>)
 800afd4:	f7f7 fb9e 	bl	8002714 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800afd8:	2280      	movs	r2, #128	; 0x80
 800afda:	2101      	movs	r1, #1
 800afdc:	4803      	ldr	r0, [pc, #12]	; (800afec <USBD_LL_Init+0x94>)
 800afde:	f7f7 fb99 	bl	8002714 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800afe2:	2300      	movs	r3, #0
}
 800afe4:	4618      	mov	r0, r3
 800afe6:	3708      	adds	r7, #8
 800afe8:	46bd      	mov	sp, r7
 800afea:	bd80      	pop	{r7, pc}
 800afec:	20002014 	.word	0x20002014

0800aff0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800aff0:	b580      	push	{r7, lr}
 800aff2:	b084      	sub	sp, #16
 800aff4:	af00      	add	r7, sp, #0
 800aff6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aff8:	2300      	movs	r3, #0
 800affa:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800affc:	2300      	movs	r3, #0
 800affe:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b006:	4618      	mov	r0, r3
 800b008:	f7f6 fb94 	bl	8001734 <HAL_PCD_Start>
 800b00c:	4603      	mov	r3, r0
 800b00e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800b010:	7bbb      	ldrb	r3, [r7, #14]
 800b012:	2b03      	cmp	r3, #3
 800b014:	d816      	bhi.n	800b044 <USBD_LL_Start+0x54>
 800b016:	a201      	add	r2, pc, #4	; (adr r2, 800b01c <USBD_LL_Start+0x2c>)
 800b018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b01c:	0800b02d 	.word	0x0800b02d
 800b020:	0800b033 	.word	0x0800b033
 800b024:	0800b039 	.word	0x0800b039
 800b028:	0800b03f 	.word	0x0800b03f
    case HAL_OK :
      usb_status = USBD_OK;
 800b02c:	2300      	movs	r3, #0
 800b02e:	73fb      	strb	r3, [r7, #15]
    break;
 800b030:	e00b      	b.n	800b04a <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b032:	2303      	movs	r3, #3
 800b034:	73fb      	strb	r3, [r7, #15]
    break;
 800b036:	e008      	b.n	800b04a <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b038:	2301      	movs	r3, #1
 800b03a:	73fb      	strb	r3, [r7, #15]
    break;
 800b03c:	e005      	b.n	800b04a <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b03e:	2303      	movs	r3, #3
 800b040:	73fb      	strb	r3, [r7, #15]
    break;
 800b042:	e002      	b.n	800b04a <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800b044:	2303      	movs	r3, #3
 800b046:	73fb      	strb	r3, [r7, #15]
    break;
 800b048:	bf00      	nop
  }
  return usb_status;
 800b04a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b04c:	4618      	mov	r0, r3
 800b04e:	3710      	adds	r7, #16
 800b050:	46bd      	mov	sp, r7
 800b052:	bd80      	pop	{r7, pc}

0800b054 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b054:	b580      	push	{r7, lr}
 800b056:	b084      	sub	sp, #16
 800b058:	af00      	add	r7, sp, #0
 800b05a:	6078      	str	r0, [r7, #4]
 800b05c:	4608      	mov	r0, r1
 800b05e:	4611      	mov	r1, r2
 800b060:	461a      	mov	r2, r3
 800b062:	4603      	mov	r3, r0
 800b064:	70fb      	strb	r3, [r7, #3]
 800b066:	460b      	mov	r3, r1
 800b068:	70bb      	strb	r3, [r7, #2]
 800b06a:	4613      	mov	r3, r2
 800b06c:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b06e:	2300      	movs	r3, #0
 800b070:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b072:	2300      	movs	r3, #0
 800b074:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b07c:	78bb      	ldrb	r3, [r7, #2]
 800b07e:	883a      	ldrh	r2, [r7, #0]
 800b080:	78f9      	ldrb	r1, [r7, #3]
 800b082:	f7f7 f83e 	bl	8002102 <HAL_PCD_EP_Open>
 800b086:	4603      	mov	r3, r0
 800b088:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800b08a:	7bbb      	ldrb	r3, [r7, #14]
 800b08c:	2b03      	cmp	r3, #3
 800b08e:	d817      	bhi.n	800b0c0 <USBD_LL_OpenEP+0x6c>
 800b090:	a201      	add	r2, pc, #4	; (adr r2, 800b098 <USBD_LL_OpenEP+0x44>)
 800b092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b096:	bf00      	nop
 800b098:	0800b0a9 	.word	0x0800b0a9
 800b09c:	0800b0af 	.word	0x0800b0af
 800b0a0:	0800b0b5 	.word	0x0800b0b5
 800b0a4:	0800b0bb 	.word	0x0800b0bb
    case HAL_OK :
      usb_status = USBD_OK;
 800b0a8:	2300      	movs	r3, #0
 800b0aa:	73fb      	strb	r3, [r7, #15]
    break;
 800b0ac:	e00b      	b.n	800b0c6 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b0ae:	2303      	movs	r3, #3
 800b0b0:	73fb      	strb	r3, [r7, #15]
    break;
 800b0b2:	e008      	b.n	800b0c6 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b0b4:	2301      	movs	r3, #1
 800b0b6:	73fb      	strb	r3, [r7, #15]
    break;
 800b0b8:	e005      	b.n	800b0c6 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b0ba:	2303      	movs	r3, #3
 800b0bc:	73fb      	strb	r3, [r7, #15]
    break;
 800b0be:	e002      	b.n	800b0c6 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800b0c0:	2303      	movs	r3, #3
 800b0c2:	73fb      	strb	r3, [r7, #15]
    break;
 800b0c4:	bf00      	nop
  }
  return usb_status;
 800b0c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	3710      	adds	r7, #16
 800b0cc:	46bd      	mov	sp, r7
 800b0ce:	bd80      	pop	{r7, pc}

0800b0d0 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b0d0:	b580      	push	{r7, lr}
 800b0d2:	b084      	sub	sp, #16
 800b0d4:	af00      	add	r7, sp, #0
 800b0d6:	6078      	str	r0, [r7, #4]
 800b0d8:	460b      	mov	r3, r1
 800b0da:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b0dc:	2300      	movs	r3, #0
 800b0de:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b0e0:	2300      	movs	r3, #0
 800b0e2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b0ea:	78fa      	ldrb	r2, [r7, #3]
 800b0ec:	4611      	mov	r1, r2
 800b0ee:	4618      	mov	r0, r3
 800b0f0:	f7f7 f86f 	bl	80021d2 <HAL_PCD_EP_Close>
 800b0f4:	4603      	mov	r3, r0
 800b0f6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800b0f8:	7bbb      	ldrb	r3, [r7, #14]
 800b0fa:	2b03      	cmp	r3, #3
 800b0fc:	d816      	bhi.n	800b12c <USBD_LL_CloseEP+0x5c>
 800b0fe:	a201      	add	r2, pc, #4	; (adr r2, 800b104 <USBD_LL_CloseEP+0x34>)
 800b100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b104:	0800b115 	.word	0x0800b115
 800b108:	0800b11b 	.word	0x0800b11b
 800b10c:	0800b121 	.word	0x0800b121
 800b110:	0800b127 	.word	0x0800b127
    case HAL_OK :
      usb_status = USBD_OK;
 800b114:	2300      	movs	r3, #0
 800b116:	73fb      	strb	r3, [r7, #15]
    break;
 800b118:	e00b      	b.n	800b132 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b11a:	2303      	movs	r3, #3
 800b11c:	73fb      	strb	r3, [r7, #15]
    break;
 800b11e:	e008      	b.n	800b132 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b120:	2301      	movs	r3, #1
 800b122:	73fb      	strb	r3, [r7, #15]
    break;
 800b124:	e005      	b.n	800b132 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b126:	2303      	movs	r3, #3
 800b128:	73fb      	strb	r3, [r7, #15]
    break;
 800b12a:	e002      	b.n	800b132 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800b12c:	2303      	movs	r3, #3
 800b12e:	73fb      	strb	r3, [r7, #15]
    break;
 800b130:	bf00      	nop
  }
  return usb_status;
 800b132:	7bfb      	ldrb	r3, [r7, #15]
}
 800b134:	4618      	mov	r0, r3
 800b136:	3710      	adds	r7, #16
 800b138:	46bd      	mov	sp, r7
 800b13a:	bd80      	pop	{r7, pc}

0800b13c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b13c:	b580      	push	{r7, lr}
 800b13e:	b084      	sub	sp, #16
 800b140:	af00      	add	r7, sp, #0
 800b142:	6078      	str	r0, [r7, #4]
 800b144:	460b      	mov	r3, r1
 800b146:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b148:	2300      	movs	r3, #0
 800b14a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b14c:	2300      	movs	r3, #0
 800b14e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b156:	78fa      	ldrb	r2, [r7, #3]
 800b158:	4611      	mov	r1, r2
 800b15a:	4618      	mov	r0, r3
 800b15c:	f7f7 f8e6 	bl	800232c <HAL_PCD_EP_SetStall>
 800b160:	4603      	mov	r3, r0
 800b162:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800b164:	7bbb      	ldrb	r3, [r7, #14]
 800b166:	2b03      	cmp	r3, #3
 800b168:	d816      	bhi.n	800b198 <USBD_LL_StallEP+0x5c>
 800b16a:	a201      	add	r2, pc, #4	; (adr r2, 800b170 <USBD_LL_StallEP+0x34>)
 800b16c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b170:	0800b181 	.word	0x0800b181
 800b174:	0800b187 	.word	0x0800b187
 800b178:	0800b18d 	.word	0x0800b18d
 800b17c:	0800b193 	.word	0x0800b193
    case HAL_OK :
      usb_status = USBD_OK;
 800b180:	2300      	movs	r3, #0
 800b182:	73fb      	strb	r3, [r7, #15]
    break;
 800b184:	e00b      	b.n	800b19e <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b186:	2303      	movs	r3, #3
 800b188:	73fb      	strb	r3, [r7, #15]
    break;
 800b18a:	e008      	b.n	800b19e <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b18c:	2301      	movs	r3, #1
 800b18e:	73fb      	strb	r3, [r7, #15]
    break;
 800b190:	e005      	b.n	800b19e <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b192:	2303      	movs	r3, #3
 800b194:	73fb      	strb	r3, [r7, #15]
    break;
 800b196:	e002      	b.n	800b19e <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800b198:	2303      	movs	r3, #3
 800b19a:	73fb      	strb	r3, [r7, #15]
    break;
 800b19c:	bf00      	nop
  }
  return usb_status;
 800b19e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1a0:	4618      	mov	r0, r3
 800b1a2:	3710      	adds	r7, #16
 800b1a4:	46bd      	mov	sp, r7
 800b1a6:	bd80      	pop	{r7, pc}

0800b1a8 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b1a8:	b580      	push	{r7, lr}
 800b1aa:	b084      	sub	sp, #16
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	6078      	str	r0, [r7, #4]
 800b1b0:	460b      	mov	r3, r1
 800b1b2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b1b4:	2300      	movs	r3, #0
 800b1b6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b1b8:	2300      	movs	r3, #0
 800b1ba:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b1c2:	78fa      	ldrb	r2, [r7, #3]
 800b1c4:	4611      	mov	r1, r2
 800b1c6:	4618      	mov	r0, r3
 800b1c8:	f7f7 f912 	bl	80023f0 <HAL_PCD_EP_ClrStall>
 800b1cc:	4603      	mov	r3, r0
 800b1ce:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800b1d0:	7bbb      	ldrb	r3, [r7, #14]
 800b1d2:	2b03      	cmp	r3, #3
 800b1d4:	d816      	bhi.n	800b204 <USBD_LL_ClearStallEP+0x5c>
 800b1d6:	a201      	add	r2, pc, #4	; (adr r2, 800b1dc <USBD_LL_ClearStallEP+0x34>)
 800b1d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1dc:	0800b1ed 	.word	0x0800b1ed
 800b1e0:	0800b1f3 	.word	0x0800b1f3
 800b1e4:	0800b1f9 	.word	0x0800b1f9
 800b1e8:	0800b1ff 	.word	0x0800b1ff
    case HAL_OK :
      usb_status = USBD_OK;
 800b1ec:	2300      	movs	r3, #0
 800b1ee:	73fb      	strb	r3, [r7, #15]
    break;
 800b1f0:	e00b      	b.n	800b20a <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b1f2:	2303      	movs	r3, #3
 800b1f4:	73fb      	strb	r3, [r7, #15]
    break;
 800b1f6:	e008      	b.n	800b20a <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b1f8:	2301      	movs	r3, #1
 800b1fa:	73fb      	strb	r3, [r7, #15]
    break;
 800b1fc:	e005      	b.n	800b20a <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b1fe:	2303      	movs	r3, #3
 800b200:	73fb      	strb	r3, [r7, #15]
    break;
 800b202:	e002      	b.n	800b20a <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800b204:	2303      	movs	r3, #3
 800b206:	73fb      	strb	r3, [r7, #15]
    break;
 800b208:	bf00      	nop
  }
  return usb_status;
 800b20a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b20c:	4618      	mov	r0, r3
 800b20e:	3710      	adds	r7, #16
 800b210:	46bd      	mov	sp, r7
 800b212:	bd80      	pop	{r7, pc}

0800b214 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b214:	b480      	push	{r7}
 800b216:	b085      	sub	sp, #20
 800b218:	af00      	add	r7, sp, #0
 800b21a:	6078      	str	r0, [r7, #4]
 800b21c:	460b      	mov	r3, r1
 800b21e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b226:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b228:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	da0b      	bge.n	800b248 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b230:	78fb      	ldrb	r3, [r7, #3]
 800b232:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b236:	68f9      	ldr	r1, [r7, #12]
 800b238:	4613      	mov	r3, r2
 800b23a:	00db      	lsls	r3, r3, #3
 800b23c:	4413      	add	r3, r2
 800b23e:	009b      	lsls	r3, r3, #2
 800b240:	440b      	add	r3, r1
 800b242:	333e      	adds	r3, #62	; 0x3e
 800b244:	781b      	ldrb	r3, [r3, #0]
 800b246:	e00b      	b.n	800b260 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b248:	78fb      	ldrb	r3, [r7, #3]
 800b24a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b24e:	68f9      	ldr	r1, [r7, #12]
 800b250:	4613      	mov	r3, r2
 800b252:	00db      	lsls	r3, r3, #3
 800b254:	4413      	add	r3, r2
 800b256:	009b      	lsls	r3, r3, #2
 800b258:	440b      	add	r3, r1
 800b25a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800b25e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b260:	4618      	mov	r0, r3
 800b262:	3714      	adds	r7, #20
 800b264:	46bd      	mov	sp, r7
 800b266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b26a:	4770      	bx	lr

0800b26c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b26c:	b580      	push	{r7, lr}
 800b26e:	b084      	sub	sp, #16
 800b270:	af00      	add	r7, sp, #0
 800b272:	6078      	str	r0, [r7, #4]
 800b274:	460b      	mov	r3, r1
 800b276:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b278:	2300      	movs	r3, #0
 800b27a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b27c:	2300      	movs	r3, #0
 800b27e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b286:	78fa      	ldrb	r2, [r7, #3]
 800b288:	4611      	mov	r1, r2
 800b28a:	4618      	mov	r0, r3
 800b28c:	f7f6 ff14 	bl	80020b8 <HAL_PCD_SetAddress>
 800b290:	4603      	mov	r3, r0
 800b292:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800b294:	7bbb      	ldrb	r3, [r7, #14]
 800b296:	2b03      	cmp	r3, #3
 800b298:	d816      	bhi.n	800b2c8 <USBD_LL_SetUSBAddress+0x5c>
 800b29a:	a201      	add	r2, pc, #4	; (adr r2, 800b2a0 <USBD_LL_SetUSBAddress+0x34>)
 800b29c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2a0:	0800b2b1 	.word	0x0800b2b1
 800b2a4:	0800b2b7 	.word	0x0800b2b7
 800b2a8:	0800b2bd 	.word	0x0800b2bd
 800b2ac:	0800b2c3 	.word	0x0800b2c3
    case HAL_OK :
      usb_status = USBD_OK;
 800b2b0:	2300      	movs	r3, #0
 800b2b2:	73fb      	strb	r3, [r7, #15]
    break;
 800b2b4:	e00b      	b.n	800b2ce <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b2b6:	2303      	movs	r3, #3
 800b2b8:	73fb      	strb	r3, [r7, #15]
    break;
 800b2ba:	e008      	b.n	800b2ce <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b2bc:	2301      	movs	r3, #1
 800b2be:	73fb      	strb	r3, [r7, #15]
    break;
 800b2c0:	e005      	b.n	800b2ce <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b2c2:	2303      	movs	r3, #3
 800b2c4:	73fb      	strb	r3, [r7, #15]
    break;
 800b2c6:	e002      	b.n	800b2ce <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800b2c8:	2303      	movs	r3, #3
 800b2ca:	73fb      	strb	r3, [r7, #15]
    break;
 800b2cc:	bf00      	nop
  }
  return usb_status;
 800b2ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2d0:	4618      	mov	r0, r3
 800b2d2:	3710      	adds	r7, #16
 800b2d4:	46bd      	mov	sp, r7
 800b2d6:	bd80      	pop	{r7, pc}

0800b2d8 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b2d8:	b580      	push	{r7, lr}
 800b2da:	b086      	sub	sp, #24
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	60f8      	str	r0, [r7, #12]
 800b2e0:	607a      	str	r2, [r7, #4]
 800b2e2:	603b      	str	r3, [r7, #0]
 800b2e4:	460b      	mov	r3, r1
 800b2e6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b2e8:	2300      	movs	r3, #0
 800b2ea:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b2ec:	2300      	movs	r3, #0
 800b2ee:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b2f6:	7af9      	ldrb	r1, [r7, #11]
 800b2f8:	683b      	ldr	r3, [r7, #0]
 800b2fa:	687a      	ldr	r2, [r7, #4]
 800b2fc:	f7f6 ffe5 	bl	80022ca <HAL_PCD_EP_Transmit>
 800b300:	4603      	mov	r3, r0
 800b302:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800b304:	7dbb      	ldrb	r3, [r7, #22]
 800b306:	2b03      	cmp	r3, #3
 800b308:	d816      	bhi.n	800b338 <USBD_LL_Transmit+0x60>
 800b30a:	a201      	add	r2, pc, #4	; (adr r2, 800b310 <USBD_LL_Transmit+0x38>)
 800b30c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b310:	0800b321 	.word	0x0800b321
 800b314:	0800b327 	.word	0x0800b327
 800b318:	0800b32d 	.word	0x0800b32d
 800b31c:	0800b333 	.word	0x0800b333
    case HAL_OK :
      usb_status = USBD_OK;
 800b320:	2300      	movs	r3, #0
 800b322:	75fb      	strb	r3, [r7, #23]
    break;
 800b324:	e00b      	b.n	800b33e <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b326:	2303      	movs	r3, #3
 800b328:	75fb      	strb	r3, [r7, #23]
    break;
 800b32a:	e008      	b.n	800b33e <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b32c:	2301      	movs	r3, #1
 800b32e:	75fb      	strb	r3, [r7, #23]
    break;
 800b330:	e005      	b.n	800b33e <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b332:	2303      	movs	r3, #3
 800b334:	75fb      	strb	r3, [r7, #23]
    break;
 800b336:	e002      	b.n	800b33e <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800b338:	2303      	movs	r3, #3
 800b33a:	75fb      	strb	r3, [r7, #23]
    break;
 800b33c:	bf00      	nop
  }
  return usb_status;
 800b33e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b340:	4618      	mov	r0, r3
 800b342:	3718      	adds	r7, #24
 800b344:	46bd      	mov	sp, r7
 800b346:	bd80      	pop	{r7, pc}

0800b348 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b348:	b580      	push	{r7, lr}
 800b34a:	b086      	sub	sp, #24
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	60f8      	str	r0, [r7, #12]
 800b350:	607a      	str	r2, [r7, #4]
 800b352:	603b      	str	r3, [r7, #0]
 800b354:	460b      	mov	r3, r1
 800b356:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b358:	2300      	movs	r3, #0
 800b35a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b35c:	2300      	movs	r3, #0
 800b35e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b366:	7af9      	ldrb	r1, [r7, #11]
 800b368:	683b      	ldr	r3, [r7, #0]
 800b36a:	687a      	ldr	r2, [r7, #4]
 800b36c:	f7f6 ff7b 	bl	8002266 <HAL_PCD_EP_Receive>
 800b370:	4603      	mov	r3, r0
 800b372:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800b374:	7dbb      	ldrb	r3, [r7, #22]
 800b376:	2b03      	cmp	r3, #3
 800b378:	d816      	bhi.n	800b3a8 <USBD_LL_PrepareReceive+0x60>
 800b37a:	a201      	add	r2, pc, #4	; (adr r2, 800b380 <USBD_LL_PrepareReceive+0x38>)
 800b37c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b380:	0800b391 	.word	0x0800b391
 800b384:	0800b397 	.word	0x0800b397
 800b388:	0800b39d 	.word	0x0800b39d
 800b38c:	0800b3a3 	.word	0x0800b3a3
    case HAL_OK :
      usb_status = USBD_OK;
 800b390:	2300      	movs	r3, #0
 800b392:	75fb      	strb	r3, [r7, #23]
    break;
 800b394:	e00b      	b.n	800b3ae <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b396:	2303      	movs	r3, #3
 800b398:	75fb      	strb	r3, [r7, #23]
    break;
 800b39a:	e008      	b.n	800b3ae <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b39c:	2301      	movs	r3, #1
 800b39e:	75fb      	strb	r3, [r7, #23]
    break;
 800b3a0:	e005      	b.n	800b3ae <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b3a2:	2303      	movs	r3, #3
 800b3a4:	75fb      	strb	r3, [r7, #23]
    break;
 800b3a6:	e002      	b.n	800b3ae <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800b3a8:	2303      	movs	r3, #3
 800b3aa:	75fb      	strb	r3, [r7, #23]
    break;
 800b3ac:	bf00      	nop
  }
  return usb_status;
 800b3ae:	7dfb      	ldrb	r3, [r7, #23]
}
 800b3b0:	4618      	mov	r0, r3
 800b3b2:	3718      	adds	r7, #24
 800b3b4:	46bd      	mov	sp, r7
 800b3b6:	bd80      	pop	{r7, pc}

0800b3b8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800b3b8:	b580      	push	{r7, lr}
 800b3ba:	b082      	sub	sp, #8
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	6078      	str	r0, [r7, #4]
 800b3c0:	460b      	mov	r3, r1
 800b3c2:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800b3c4:	78fb      	ldrb	r3, [r7, #3]
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d002      	beq.n	800b3d0 <HAL_PCDEx_LPM_Callback+0x18>
 800b3ca:	2b01      	cmp	r3, #1
 800b3cc:	d01f      	beq.n	800b40e <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800b3ce:	e03b      	b.n	800b448 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	6a1b      	ldr	r3, [r3, #32]
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d007      	beq.n	800b3e8 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800b3d8:	f000 f854 	bl	800b484 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b3dc:	4b1c      	ldr	r3, [pc, #112]	; (800b450 <HAL_PCDEx_LPM_Callback+0x98>)
 800b3de:	691b      	ldr	r3, [r3, #16]
 800b3e0:	4a1b      	ldr	r2, [pc, #108]	; (800b450 <HAL_PCDEx_LPM_Callback+0x98>)
 800b3e2:	f023 0306 	bic.w	r3, r3, #6
 800b3e6:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	687a      	ldr	r2, [r7, #4]
 800b3f4:	6812      	ldr	r2, [r2, #0]
 800b3f6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b3fa:	f023 0301 	bic.w	r3, r3, #1
 800b3fe:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b406:	4618      	mov	r0, r3
 800b408:	f7fb fd1b 	bl	8006e42 <USBD_LL_Resume>
    break;
 800b40c:	e01c      	b.n	800b448 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	687a      	ldr	r2, [r7, #4]
 800b41a:	6812      	ldr	r2, [r2, #0]
 800b41c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b420:	f043 0301 	orr.w	r3, r3, #1
 800b424:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b42c:	4618      	mov	r0, r3
 800b42e:	f7fb fcec 	bl	8006e0a <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	6a1b      	ldr	r3, [r3, #32]
 800b436:	2b00      	cmp	r3, #0
 800b438:	d005      	beq.n	800b446 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b43a:	4b05      	ldr	r3, [pc, #20]	; (800b450 <HAL_PCDEx_LPM_Callback+0x98>)
 800b43c:	691b      	ldr	r3, [r3, #16]
 800b43e:	4a04      	ldr	r2, [pc, #16]	; (800b450 <HAL_PCDEx_LPM_Callback+0x98>)
 800b440:	f043 0306 	orr.w	r3, r3, #6
 800b444:	6113      	str	r3, [r2, #16]
    break;
 800b446:	bf00      	nop
}
 800b448:	bf00      	nop
 800b44a:	3708      	adds	r7, #8
 800b44c:	46bd      	mov	sp, r7
 800b44e:	bd80      	pop	{r7, pc}
 800b450:	e000ed00 	.word	0xe000ed00

0800b454 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b454:	b480      	push	{r7}
 800b456:	b083      	sub	sp, #12
 800b458:	af00      	add	r7, sp, #0
 800b45a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b45c:	4b03      	ldr	r3, [pc, #12]	; (800b46c <USBD_static_malloc+0x18>)
}
 800b45e:	4618      	mov	r0, r3
 800b460:	370c      	adds	r7, #12
 800b462:	46bd      	mov	sp, r7
 800b464:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b468:	4770      	bx	lr
 800b46a:	bf00      	nop
 800b46c:	20002520 	.word	0x20002520

0800b470 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b470:	b480      	push	{r7}
 800b472:	b083      	sub	sp, #12
 800b474:	af00      	add	r7, sp, #0
 800b476:	6078      	str	r0, [r7, #4]

}
 800b478:	bf00      	nop
 800b47a:	370c      	adds	r7, #12
 800b47c:	46bd      	mov	sp, r7
 800b47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b482:	4770      	bx	lr

0800b484 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800b484:	b580      	push	{r7, lr}
 800b486:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800b488:	f7f5 f85e 	bl	8000548 <SystemClock_Config>
}
 800b48c:	bf00      	nop
 800b48e:	bd80      	pop	{r7, pc}

0800b490 <memset>:
 800b490:	4402      	add	r2, r0
 800b492:	4603      	mov	r3, r0
 800b494:	4293      	cmp	r3, r2
 800b496:	d100      	bne.n	800b49a <memset+0xa>
 800b498:	4770      	bx	lr
 800b49a:	f803 1b01 	strb.w	r1, [r3], #1
 800b49e:	e7f9      	b.n	800b494 <memset+0x4>

0800b4a0 <__libc_init_array>:
 800b4a0:	b570      	push	{r4, r5, r6, lr}
 800b4a2:	4d0d      	ldr	r5, [pc, #52]	; (800b4d8 <__libc_init_array+0x38>)
 800b4a4:	4c0d      	ldr	r4, [pc, #52]	; (800b4dc <__libc_init_array+0x3c>)
 800b4a6:	1b64      	subs	r4, r4, r5
 800b4a8:	10a4      	asrs	r4, r4, #2
 800b4aa:	2600      	movs	r6, #0
 800b4ac:	42a6      	cmp	r6, r4
 800b4ae:	d109      	bne.n	800b4c4 <__libc_init_array+0x24>
 800b4b0:	4d0b      	ldr	r5, [pc, #44]	; (800b4e0 <__libc_init_array+0x40>)
 800b4b2:	4c0c      	ldr	r4, [pc, #48]	; (800b4e4 <__libc_init_array+0x44>)
 800b4b4:	f000 f826 	bl	800b504 <_init>
 800b4b8:	1b64      	subs	r4, r4, r5
 800b4ba:	10a4      	asrs	r4, r4, #2
 800b4bc:	2600      	movs	r6, #0
 800b4be:	42a6      	cmp	r6, r4
 800b4c0:	d105      	bne.n	800b4ce <__libc_init_array+0x2e>
 800b4c2:	bd70      	pop	{r4, r5, r6, pc}
 800b4c4:	f855 3b04 	ldr.w	r3, [r5], #4
 800b4c8:	4798      	blx	r3
 800b4ca:	3601      	adds	r6, #1
 800b4cc:	e7ee      	b.n	800b4ac <__libc_init_array+0xc>
 800b4ce:	f855 3b04 	ldr.w	r3, [r5], #4
 800b4d2:	4798      	blx	r3
 800b4d4:	3601      	adds	r6, #1
 800b4d6:	e7f2      	b.n	800b4be <__libc_init_array+0x1e>
 800b4d8:	0800b630 	.word	0x0800b630
 800b4dc:	0800b630 	.word	0x0800b630
 800b4e0:	0800b630 	.word	0x0800b630
 800b4e4:	0800b634 	.word	0x0800b634

0800b4e8 <memcpy>:
 800b4e8:	440a      	add	r2, r1
 800b4ea:	4291      	cmp	r1, r2
 800b4ec:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800b4f0:	d100      	bne.n	800b4f4 <memcpy+0xc>
 800b4f2:	4770      	bx	lr
 800b4f4:	b510      	push	{r4, lr}
 800b4f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b4fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b4fe:	4291      	cmp	r1, r2
 800b500:	d1f9      	bne.n	800b4f6 <memcpy+0xe>
 800b502:	bd10      	pop	{r4, pc}

0800b504 <_init>:
 800b504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b506:	bf00      	nop
 800b508:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b50a:	bc08      	pop	{r3}
 800b50c:	469e      	mov	lr, r3
 800b50e:	4770      	bx	lr

0800b510 <_fini>:
 800b510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b512:	bf00      	nop
 800b514:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b516:	bc08      	pop	{r3}
 800b518:	469e      	mov	lr, r3
 800b51a:	4770      	bx	lr
