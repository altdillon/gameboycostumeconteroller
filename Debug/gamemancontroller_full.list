
gamemancontroller_full.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b04c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  0800b1fc  0800b1fc  0001b1fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b2e4  0800b2e4  00020130  2**0
                  CONTENTS
  4 .ARM          00000008  0800b2e4  0800b2e4  0001b2e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b2ec  0800b2ec  00020130  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b2ec  0800b2ec  0001b2ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b2f0  0800b2f0  0001b2f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000130  20000000  0800b2f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002400  20000130  0800b424  00020130  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002530  0800b424  00022530  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020130  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020160  2**0
                  CONTENTS, READONLY
 13 .debug_info   00022aff  00000000  00000000  000201a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004d38  00000000  00000000  00042ca2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001df8  00000000  00000000  000479e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000171d  00000000  00000000  000497d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000063eb  00000000  00000000  0004aef5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00021753  00000000  00000000  000512e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010f037  00000000  00000000  00072a33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007eac  00000000  00000000  00181a6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  00189918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000130 	.word	0x20000130
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800b1e4 	.word	0x0800b1e4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000134 	.word	0x20000134
 80001ec:	0800b1e4 	.word	0x0800b1e4

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000200:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000204:	f000 b970 	b.w	80004e8 <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9e08      	ldr	r6, [sp, #32]
 8000226:	460d      	mov	r5, r1
 8000228:	4604      	mov	r4, r0
 800022a:	460f      	mov	r7, r1
 800022c:	2b00      	cmp	r3, #0
 800022e:	d14a      	bne.n	80002c6 <__udivmoddi4+0xa6>
 8000230:	428a      	cmp	r2, r1
 8000232:	4694      	mov	ip, r2
 8000234:	d965      	bls.n	8000302 <__udivmoddi4+0xe2>
 8000236:	fab2 f382 	clz	r3, r2
 800023a:	b143      	cbz	r3, 800024e <__udivmoddi4+0x2e>
 800023c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000240:	f1c3 0220 	rsb	r2, r3, #32
 8000244:	409f      	lsls	r7, r3
 8000246:	fa20 f202 	lsr.w	r2, r0, r2
 800024a:	4317      	orrs	r7, r2
 800024c:	409c      	lsls	r4, r3
 800024e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000252:	fa1f f58c 	uxth.w	r5, ip
 8000256:	fbb7 f1fe 	udiv	r1, r7, lr
 800025a:	0c22      	lsrs	r2, r4, #16
 800025c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000260:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000264:	fb01 f005 	mul.w	r0, r1, r5
 8000268:	4290      	cmp	r0, r2
 800026a:	d90a      	bls.n	8000282 <__udivmoddi4+0x62>
 800026c:	eb1c 0202 	adds.w	r2, ip, r2
 8000270:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000274:	f080 811c 	bcs.w	80004b0 <__udivmoddi4+0x290>
 8000278:	4290      	cmp	r0, r2
 800027a:	f240 8119 	bls.w	80004b0 <__udivmoddi4+0x290>
 800027e:	3902      	subs	r1, #2
 8000280:	4462      	add	r2, ip
 8000282:	1a12      	subs	r2, r2, r0
 8000284:	b2a4      	uxth	r4, r4
 8000286:	fbb2 f0fe 	udiv	r0, r2, lr
 800028a:	fb0e 2210 	mls	r2, lr, r0, r2
 800028e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000292:	fb00 f505 	mul.w	r5, r0, r5
 8000296:	42a5      	cmp	r5, r4
 8000298:	d90a      	bls.n	80002b0 <__udivmoddi4+0x90>
 800029a:	eb1c 0404 	adds.w	r4, ip, r4
 800029e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002a2:	f080 8107 	bcs.w	80004b4 <__udivmoddi4+0x294>
 80002a6:	42a5      	cmp	r5, r4
 80002a8:	f240 8104 	bls.w	80004b4 <__udivmoddi4+0x294>
 80002ac:	4464      	add	r4, ip
 80002ae:	3802      	subs	r0, #2
 80002b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002b4:	1b64      	subs	r4, r4, r5
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11e      	cbz	r6, 80002c2 <__udivmoddi4+0xa2>
 80002ba:	40dc      	lsrs	r4, r3
 80002bc:	2300      	movs	r3, #0
 80002be:	e9c6 4300 	strd	r4, r3, [r6]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d908      	bls.n	80002dc <__udivmoddi4+0xbc>
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	f000 80ed 	beq.w	80004aa <__udivmoddi4+0x28a>
 80002d0:	2100      	movs	r1, #0
 80002d2:	e9c6 0500 	strd	r0, r5, [r6]
 80002d6:	4608      	mov	r0, r1
 80002d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002dc:	fab3 f183 	clz	r1, r3
 80002e0:	2900      	cmp	r1, #0
 80002e2:	d149      	bne.n	8000378 <__udivmoddi4+0x158>
 80002e4:	42ab      	cmp	r3, r5
 80002e6:	d302      	bcc.n	80002ee <__udivmoddi4+0xce>
 80002e8:	4282      	cmp	r2, r0
 80002ea:	f200 80f8 	bhi.w	80004de <__udivmoddi4+0x2be>
 80002ee:	1a84      	subs	r4, r0, r2
 80002f0:	eb65 0203 	sbc.w	r2, r5, r3
 80002f4:	2001      	movs	r0, #1
 80002f6:	4617      	mov	r7, r2
 80002f8:	2e00      	cmp	r6, #0
 80002fa:	d0e2      	beq.n	80002c2 <__udivmoddi4+0xa2>
 80002fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000300:	e7df      	b.n	80002c2 <__udivmoddi4+0xa2>
 8000302:	b902      	cbnz	r2, 8000306 <__udivmoddi4+0xe6>
 8000304:	deff      	udf	#255	; 0xff
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	2b00      	cmp	r3, #0
 800030c:	f040 8090 	bne.w	8000430 <__udivmoddi4+0x210>
 8000310:	1a8a      	subs	r2, r1, r2
 8000312:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000316:	fa1f fe8c 	uxth.w	lr, ip
 800031a:	2101      	movs	r1, #1
 800031c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000320:	fb07 2015 	mls	r0, r7, r5, r2
 8000324:	0c22      	lsrs	r2, r4, #16
 8000326:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800032a:	fb0e f005 	mul.w	r0, lr, r5
 800032e:	4290      	cmp	r0, r2
 8000330:	d908      	bls.n	8000344 <__udivmoddi4+0x124>
 8000332:	eb1c 0202 	adds.w	r2, ip, r2
 8000336:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x122>
 800033c:	4290      	cmp	r0, r2
 800033e:	f200 80cb 	bhi.w	80004d8 <__udivmoddi4+0x2b8>
 8000342:	4645      	mov	r5, r8
 8000344:	1a12      	subs	r2, r2, r0
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb2 f0f7 	udiv	r0, r2, r7
 800034c:	fb07 2210 	mls	r2, r7, r0, r2
 8000350:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000354:	fb0e fe00 	mul.w	lr, lr, r0
 8000358:	45a6      	cmp	lr, r4
 800035a:	d908      	bls.n	800036e <__udivmoddi4+0x14e>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000364:	d202      	bcs.n	800036c <__udivmoddi4+0x14c>
 8000366:	45a6      	cmp	lr, r4
 8000368:	f200 80bb 	bhi.w	80004e2 <__udivmoddi4+0x2c2>
 800036c:	4610      	mov	r0, r2
 800036e:	eba4 040e 	sub.w	r4, r4, lr
 8000372:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000376:	e79f      	b.n	80002b8 <__udivmoddi4+0x98>
 8000378:	f1c1 0720 	rsb	r7, r1, #32
 800037c:	408b      	lsls	r3, r1
 800037e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000382:	ea4c 0c03 	orr.w	ip, ip, r3
 8000386:	fa05 f401 	lsl.w	r4, r5, r1
 800038a:	fa20 f307 	lsr.w	r3, r0, r7
 800038e:	40fd      	lsrs	r5, r7
 8000390:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000394:	4323      	orrs	r3, r4
 8000396:	fbb5 f8f9 	udiv	r8, r5, r9
 800039a:	fa1f fe8c 	uxth.w	lr, ip
 800039e:	fb09 5518 	mls	r5, r9, r8, r5
 80003a2:	0c1c      	lsrs	r4, r3, #16
 80003a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003a8:	fb08 f50e 	mul.w	r5, r8, lr
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	fa02 f201 	lsl.w	r2, r2, r1
 80003b2:	fa00 f001 	lsl.w	r0, r0, r1
 80003b6:	d90b      	bls.n	80003d0 <__udivmoddi4+0x1b0>
 80003b8:	eb1c 0404 	adds.w	r4, ip, r4
 80003bc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003c0:	f080 8088 	bcs.w	80004d4 <__udivmoddi4+0x2b4>
 80003c4:	42a5      	cmp	r5, r4
 80003c6:	f240 8085 	bls.w	80004d4 <__udivmoddi4+0x2b4>
 80003ca:	f1a8 0802 	sub.w	r8, r8, #2
 80003ce:	4464      	add	r4, ip
 80003d0:	1b64      	subs	r4, r4, r5
 80003d2:	b29d      	uxth	r5, r3
 80003d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003d8:	fb09 4413 	mls	r4, r9, r3, r4
 80003dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003e4:	45a6      	cmp	lr, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x1da>
 80003e8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ec:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003f0:	d26c      	bcs.n	80004cc <__udivmoddi4+0x2ac>
 80003f2:	45a6      	cmp	lr, r4
 80003f4:	d96a      	bls.n	80004cc <__udivmoddi4+0x2ac>
 80003f6:	3b02      	subs	r3, #2
 80003f8:	4464      	add	r4, ip
 80003fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000402:	eba4 040e 	sub.w	r4, r4, lr
 8000406:	42ac      	cmp	r4, r5
 8000408:	46c8      	mov	r8, r9
 800040a:	46ae      	mov	lr, r5
 800040c:	d356      	bcc.n	80004bc <__udivmoddi4+0x29c>
 800040e:	d053      	beq.n	80004b8 <__udivmoddi4+0x298>
 8000410:	b156      	cbz	r6, 8000428 <__udivmoddi4+0x208>
 8000412:	ebb0 0208 	subs.w	r2, r0, r8
 8000416:	eb64 040e 	sbc.w	r4, r4, lr
 800041a:	fa04 f707 	lsl.w	r7, r4, r7
 800041e:	40ca      	lsrs	r2, r1
 8000420:	40cc      	lsrs	r4, r1
 8000422:	4317      	orrs	r7, r2
 8000424:	e9c6 7400 	strd	r7, r4, [r6]
 8000428:	4618      	mov	r0, r3
 800042a:	2100      	movs	r1, #0
 800042c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000430:	f1c3 0120 	rsb	r1, r3, #32
 8000434:	fa02 fc03 	lsl.w	ip, r2, r3
 8000438:	fa20 f201 	lsr.w	r2, r0, r1
 800043c:	fa25 f101 	lsr.w	r1, r5, r1
 8000440:	409d      	lsls	r5, r3
 8000442:	432a      	orrs	r2, r5
 8000444:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000450:	fb07 1510 	mls	r5, r7, r0, r1
 8000454:	0c11      	lsrs	r1, r2, #16
 8000456:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800045a:	fb00 f50e 	mul.w	r5, r0, lr
 800045e:	428d      	cmp	r5, r1
 8000460:	fa04 f403 	lsl.w	r4, r4, r3
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x258>
 8000466:	eb1c 0101 	adds.w	r1, ip, r1
 800046a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800046e:	d22f      	bcs.n	80004d0 <__udivmoddi4+0x2b0>
 8000470:	428d      	cmp	r5, r1
 8000472:	d92d      	bls.n	80004d0 <__udivmoddi4+0x2b0>
 8000474:	3802      	subs	r0, #2
 8000476:	4461      	add	r1, ip
 8000478:	1b49      	subs	r1, r1, r5
 800047a:	b292      	uxth	r2, r2
 800047c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000480:	fb07 1115 	mls	r1, r7, r5, r1
 8000484:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000488:	fb05 f10e 	mul.w	r1, r5, lr
 800048c:	4291      	cmp	r1, r2
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x282>
 8000490:	eb1c 0202 	adds.w	r2, ip, r2
 8000494:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000498:	d216      	bcs.n	80004c8 <__udivmoddi4+0x2a8>
 800049a:	4291      	cmp	r1, r2
 800049c:	d914      	bls.n	80004c8 <__udivmoddi4+0x2a8>
 800049e:	3d02      	subs	r5, #2
 80004a0:	4462      	add	r2, ip
 80004a2:	1a52      	subs	r2, r2, r1
 80004a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004a8:	e738      	b.n	800031c <__udivmoddi4+0xfc>
 80004aa:	4631      	mov	r1, r6
 80004ac:	4630      	mov	r0, r6
 80004ae:	e708      	b.n	80002c2 <__udivmoddi4+0xa2>
 80004b0:	4639      	mov	r1, r7
 80004b2:	e6e6      	b.n	8000282 <__udivmoddi4+0x62>
 80004b4:	4610      	mov	r0, r2
 80004b6:	e6fb      	b.n	80002b0 <__udivmoddi4+0x90>
 80004b8:	4548      	cmp	r0, r9
 80004ba:	d2a9      	bcs.n	8000410 <__udivmoddi4+0x1f0>
 80004bc:	ebb9 0802 	subs.w	r8, r9, r2
 80004c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004c4:	3b01      	subs	r3, #1
 80004c6:	e7a3      	b.n	8000410 <__udivmoddi4+0x1f0>
 80004c8:	4645      	mov	r5, r8
 80004ca:	e7ea      	b.n	80004a2 <__udivmoddi4+0x282>
 80004cc:	462b      	mov	r3, r5
 80004ce:	e794      	b.n	80003fa <__udivmoddi4+0x1da>
 80004d0:	4640      	mov	r0, r8
 80004d2:	e7d1      	b.n	8000478 <__udivmoddi4+0x258>
 80004d4:	46d0      	mov	r8, sl
 80004d6:	e77b      	b.n	80003d0 <__udivmoddi4+0x1b0>
 80004d8:	3d02      	subs	r5, #2
 80004da:	4462      	add	r2, ip
 80004dc:	e732      	b.n	8000344 <__udivmoddi4+0x124>
 80004de:	4608      	mov	r0, r1
 80004e0:	e70a      	b.n	80002f8 <__udivmoddi4+0xd8>
 80004e2:	4464      	add	r4, ip
 80004e4:	3802      	subs	r0, #2
 80004e6:	e742      	b.n	800036e <__udivmoddi4+0x14e>

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f0:	f000 fb13 	bl	8000b1a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f4:	f000 f81a 	bl	800052c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f8:	f000 f8f8 	bl	80006ec <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 80004fc:	f000 f87a 	bl	80005f4 <MX_LPUART1_UART_Init>
  MX_TIM2_Init();
 8000500:	f000 f8a6 	bl	8000650 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000504:	f007 fb58 	bl	8007bb8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000508:	4a05      	ldr	r2, [pc, #20]	; (8000520 <main+0x34>)
 800050a:	2100      	movs	r1, #0
 800050c:	4805      	ldr	r0, [pc, #20]	; (8000524 <main+0x38>)
 800050e:	f007 fb9d 	bl	8007c4c <osThreadNew>
 8000512:	4603      	mov	r3, r0
 8000514:	4a04      	ldr	r2, [pc, #16]	; (8000528 <main+0x3c>)
 8000516:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000518:	f007 fb72 	bl	8007c00 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800051c:	e7fe      	b.n	800051c <main+0x30>
 800051e:	bf00      	nop
 8000520:	0800b278 	.word	0x0800b278
 8000524:	080008dd 	.word	0x080008dd
 8000528:	20000220 	.word	0x20000220

0800052c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b096      	sub	sp, #88	; 0x58
 8000530:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000532:	f107 0314 	add.w	r3, r7, #20
 8000536:	2244      	movs	r2, #68	; 0x44
 8000538:	2100      	movs	r1, #0
 800053a:	4618      	mov	r0, r3
 800053c:	f00a fe18 	bl	800b170 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000540:	463b      	mov	r3, r7
 8000542:	2200      	movs	r2, #0
 8000544:	601a      	str	r2, [r3, #0]
 8000546:	605a      	str	r2, [r3, #4]
 8000548:	609a      	str	r2, [r3, #8]
 800054a:	60da      	str	r2, [r3, #12]
 800054c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800054e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000552:	f001 ffe5 	bl	8002520 <HAL_PWREx_ControlVoltageScaling>
 8000556:	4603      	mov	r3, r0
 8000558:	2b00      	cmp	r3, #0
 800055a:	d001      	beq.n	8000560 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800055c:	f000 f9c8 	bl	80008f0 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000560:	f001 ffc0 	bl	80024e4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000564:	4b22      	ldr	r3, [pc, #136]	; (80005f0 <SystemClock_Config+0xc4>)
 8000566:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800056a:	4a21      	ldr	r2, [pc, #132]	; (80005f0 <SystemClock_Config+0xc4>)
 800056c:	f023 0318 	bic.w	r3, r3, #24
 8000570:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000574:	2314      	movs	r3, #20
 8000576:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000578:	2301      	movs	r3, #1
 800057a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800057c:	2301      	movs	r3, #1
 800057e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000580:	2300      	movs	r3, #0
 8000582:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000584:	2360      	movs	r3, #96	; 0x60
 8000586:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000588:	2302      	movs	r3, #2
 800058a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800058c:	2301      	movs	r3, #1
 800058e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000590:	2301      	movs	r3, #1
 8000592:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 71;
 8000594:	2347      	movs	r3, #71	; 0x47
 8000596:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000598:	2302      	movs	r3, #2
 800059a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800059c:	2302      	movs	r3, #2
 800059e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV6;
 80005a0:	2306      	movs	r3, #6
 80005a2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a4:	f107 0314 	add.w	r3, r7, #20
 80005a8:	4618      	mov	r0, r3
 80005aa:	f002 f82f 	bl	800260c <HAL_RCC_OscConfig>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d001      	beq.n	80005b8 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80005b4:	f000 f99c 	bl	80008f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b8:	230f      	movs	r3, #15
 80005ba:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005bc:	2303      	movs	r3, #3
 80005be:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c0:	2300      	movs	r3, #0
 80005c2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005c8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ca:	2300      	movs	r3, #0
 80005cc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005ce:	463b      	mov	r3, r7
 80005d0:	2102      	movs	r1, #2
 80005d2:	4618      	mov	r0, r3
 80005d4:	f002 fc34 	bl	8002e40 <HAL_RCC_ClockConfig>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80005de:	f000 f987 	bl	80008f0 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80005e2:	f003 f94d 	bl	8003880 <HAL_RCCEx_EnableMSIPLLMode>
}
 80005e6:	bf00      	nop
 80005e8:	3758      	adds	r7, #88	; 0x58
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	40021000 	.word	0x40021000

080005f4 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80005f8:	4b12      	ldr	r3, [pc, #72]	; (8000644 <MX_LPUART1_UART_Init+0x50>)
 80005fa:	4a13      	ldr	r2, [pc, #76]	; (8000648 <MX_LPUART1_UART_Init+0x54>)
 80005fc:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 80005fe:	4b11      	ldr	r3, [pc, #68]	; (8000644 <MX_LPUART1_UART_Init+0x50>)
 8000600:	4a12      	ldr	r2, [pc, #72]	; (800064c <MX_LPUART1_UART_Init+0x58>)
 8000602:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 8000604:	4b0f      	ldr	r3, [pc, #60]	; (8000644 <MX_LPUART1_UART_Init+0x50>)
 8000606:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800060a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800060c:	4b0d      	ldr	r3, [pc, #52]	; (8000644 <MX_LPUART1_UART_Init+0x50>)
 800060e:	2200      	movs	r2, #0
 8000610:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000612:	4b0c      	ldr	r3, [pc, #48]	; (8000644 <MX_LPUART1_UART_Init+0x50>)
 8000614:	2200      	movs	r2, #0
 8000616:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000618:	4b0a      	ldr	r3, [pc, #40]	; (8000644 <MX_LPUART1_UART_Init+0x50>)
 800061a:	220c      	movs	r2, #12
 800061c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800061e:	4b09      	ldr	r3, [pc, #36]	; (8000644 <MX_LPUART1_UART_Init+0x50>)
 8000620:	2200      	movs	r2, #0
 8000622:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000624:	4b07      	ldr	r3, [pc, #28]	; (8000644 <MX_LPUART1_UART_Init+0x50>)
 8000626:	2200      	movs	r2, #0
 8000628:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800062a:	4b06      	ldr	r3, [pc, #24]	; (8000644 <MX_LPUART1_UART_Init+0x50>)
 800062c:	2200      	movs	r2, #0
 800062e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000630:	4804      	ldr	r0, [pc, #16]	; (8000644 <MX_LPUART1_UART_Init+0x50>)
 8000632:	f003 fddf 	bl	80041f4 <HAL_UART_Init>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 800063c:	f000 f958 	bl	80008f0 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000640:	bf00      	nop
 8000642:	bd80      	pop	{r7, pc}
 8000644:	2000014c 	.word	0x2000014c
 8000648:	40008000 	.word	0x40008000
 800064c:	00033324 	.word	0x00033324

08000650 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b088      	sub	sp, #32
 8000654:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000656:	f107 0310 	add.w	r3, r7, #16
 800065a:	2200      	movs	r2, #0
 800065c:	601a      	str	r2, [r3, #0]
 800065e:	605a      	str	r2, [r3, #4]
 8000660:	609a      	str	r2, [r3, #8]
 8000662:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000664:	1d3b      	adds	r3, r7, #4
 8000666:	2200      	movs	r2, #0
 8000668:	601a      	str	r2, [r3, #0]
 800066a:	605a      	str	r2, [r3, #4]
 800066c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800066e:	4b1e      	ldr	r3, [pc, #120]	; (80006e8 <MX_TIM2_Init+0x98>)
 8000670:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000674:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000676:	4b1c      	ldr	r3, [pc, #112]	; (80006e8 <MX_TIM2_Init+0x98>)
 8000678:	2200      	movs	r2, #0
 800067a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800067c:	4b1a      	ldr	r3, [pc, #104]	; (80006e8 <MX_TIM2_Init+0x98>)
 800067e:	2200      	movs	r2, #0
 8000680:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000682:	4b19      	ldr	r3, [pc, #100]	; (80006e8 <MX_TIM2_Init+0x98>)
 8000684:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000688:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800068a:	4b17      	ldr	r3, [pc, #92]	; (80006e8 <MX_TIM2_Init+0x98>)
 800068c:	2200      	movs	r2, #0
 800068e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000690:	4b15      	ldr	r3, [pc, #84]	; (80006e8 <MX_TIM2_Init+0x98>)
 8000692:	2200      	movs	r2, #0
 8000694:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000696:	4814      	ldr	r0, [pc, #80]	; (80006e8 <MX_TIM2_Init+0x98>)
 8000698:	f003 fad0 	bl	8003c3c <HAL_TIM_Base_Init>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80006a2:	f000 f925 	bl	80008f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006aa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80006ac:	f107 0310 	add.w	r3, r7, #16
 80006b0:	4619      	mov	r1, r3
 80006b2:	480d      	ldr	r0, [pc, #52]	; (80006e8 <MX_TIM2_Init+0x98>)
 80006b4:	f003 fb19 	bl	8003cea <HAL_TIM_ConfigClockSource>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80006be:	f000 f917 	bl	80008f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006c2:	2300      	movs	r3, #0
 80006c4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006c6:	2300      	movs	r3, #0
 80006c8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80006ca:	1d3b      	adds	r3, r7, #4
 80006cc:	4619      	mov	r1, r3
 80006ce:	4806      	ldr	r0, [pc, #24]	; (80006e8 <MX_TIM2_Init+0x98>)
 80006d0:	f003 fd08 	bl	80040e4 <HAL_TIMEx_MasterConfigSynchronization>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80006da:	f000 f909 	bl	80008f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80006de:	bf00      	nop
 80006e0:	3720      	adds	r7, #32
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	200001d4 	.word	0x200001d4

080006ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b08c      	sub	sp, #48	; 0x30
 80006f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f2:	f107 031c 	add.w	r3, r7, #28
 80006f6:	2200      	movs	r2, #0
 80006f8:	601a      	str	r2, [r3, #0]
 80006fa:	605a      	str	r2, [r3, #4]
 80006fc:	609a      	str	r2, [r3, #8]
 80006fe:	60da      	str	r2, [r3, #12]
 8000700:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000702:	4b70      	ldr	r3, [pc, #448]	; (80008c4 <MX_GPIO_Init+0x1d8>)
 8000704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000706:	4a6f      	ldr	r2, [pc, #444]	; (80008c4 <MX_GPIO_Init+0x1d8>)
 8000708:	f043 0304 	orr.w	r3, r3, #4
 800070c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800070e:	4b6d      	ldr	r3, [pc, #436]	; (80008c4 <MX_GPIO_Init+0x1d8>)
 8000710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000712:	f003 0304 	and.w	r3, r3, #4
 8000716:	61bb      	str	r3, [r7, #24]
 8000718:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800071a:	4b6a      	ldr	r3, [pc, #424]	; (80008c4 <MX_GPIO_Init+0x1d8>)
 800071c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800071e:	4a69      	ldr	r2, [pc, #420]	; (80008c4 <MX_GPIO_Init+0x1d8>)
 8000720:	f043 0320 	orr.w	r3, r3, #32
 8000724:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000726:	4b67      	ldr	r3, [pc, #412]	; (80008c4 <MX_GPIO_Init+0x1d8>)
 8000728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800072a:	f003 0320 	and.w	r3, r3, #32
 800072e:	617b      	str	r3, [r7, #20]
 8000730:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000732:	4b64      	ldr	r3, [pc, #400]	; (80008c4 <MX_GPIO_Init+0x1d8>)
 8000734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000736:	4a63      	ldr	r2, [pc, #396]	; (80008c4 <MX_GPIO_Init+0x1d8>)
 8000738:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800073c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800073e:	4b61      	ldr	r3, [pc, #388]	; (80008c4 <MX_GPIO_Init+0x1d8>)
 8000740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000742:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000746:	613b      	str	r3, [r7, #16]
 8000748:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800074a:	4b5e      	ldr	r3, [pc, #376]	; (80008c4 <MX_GPIO_Init+0x1d8>)
 800074c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800074e:	4a5d      	ldr	r2, [pc, #372]	; (80008c4 <MX_GPIO_Init+0x1d8>)
 8000750:	f043 0301 	orr.w	r3, r3, #1
 8000754:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000756:	4b5b      	ldr	r3, [pc, #364]	; (80008c4 <MX_GPIO_Init+0x1d8>)
 8000758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800075a:	f003 0301 	and.w	r3, r3, #1
 800075e:	60fb      	str	r3, [r7, #12]
 8000760:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000762:	4b58      	ldr	r3, [pc, #352]	; (80008c4 <MX_GPIO_Init+0x1d8>)
 8000764:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000766:	4a57      	ldr	r2, [pc, #348]	; (80008c4 <MX_GPIO_Init+0x1d8>)
 8000768:	f043 0302 	orr.w	r3, r3, #2
 800076c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800076e:	4b55      	ldr	r3, [pc, #340]	; (80008c4 <MX_GPIO_Init+0x1d8>)
 8000770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000772:	f003 0302 	and.w	r3, r3, #2
 8000776:	60bb      	str	r3, [r7, #8]
 8000778:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800077a:	4b52      	ldr	r3, [pc, #328]	; (80008c4 <MX_GPIO_Init+0x1d8>)
 800077c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800077e:	4a51      	ldr	r2, [pc, #324]	; (80008c4 <MX_GPIO_Init+0x1d8>)
 8000780:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000784:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000786:	4b4f      	ldr	r3, [pc, #316]	; (80008c4 <MX_GPIO_Init+0x1d8>)
 8000788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800078a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800078e:	607b      	str	r3, [r7, #4]
 8000790:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8000792:	f001 ff2b 	bl	80025ec <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000796:	4b4b      	ldr	r3, [pc, #300]	; (80008c4 <MX_GPIO_Init+0x1d8>)
 8000798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800079a:	4a4a      	ldr	r2, [pc, #296]	; (80008c4 <MX_GPIO_Init+0x1d8>)
 800079c:	f043 0308 	orr.w	r3, r3, #8
 80007a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007a2:	4b48      	ldr	r3, [pc, #288]	; (80008c4 <MX_GPIO_Init+0x1d8>)
 80007a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007a6:	f003 0308 	and.w	r3, r3, #8
 80007aa:	603b      	str	r3, [r7, #0]
 80007ac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(driverpin_GPIO_Port, driverpin_Pin, GPIO_PIN_RESET);
 80007ae:	2200      	movs	r2, #0
 80007b0:	2108      	movs	r1, #8
 80007b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007b6:	f000 fced 	bl	8001194 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Red_Pin|LD2_Pin, GPIO_PIN_RESET);
 80007ba:	2200      	movs	r2, #0
 80007bc:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 80007c0:	4841      	ldr	r0, [pc, #260]	; (80008c8 <MX_GPIO_Init+0x1dc>)
 80007c2:	f000 fce7 	bl	8001194 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80007c6:	2200      	movs	r2, #0
 80007c8:	2140      	movs	r1, #64	; 0x40
 80007ca:	4840      	ldr	r0, [pc, #256]	; (80008cc <MX_GPIO_Init+0x1e0>)
 80007cc:	f000 fce2 	bl	8001194 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007d6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80007da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007dc:	2300      	movs	r3, #0
 80007de:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007e0:	f107 031c 	add.w	r3, r7, #28
 80007e4:	4619      	mov	r1, r3
 80007e6:	483a      	ldr	r0, [pc, #232]	; (80008d0 <MX_GPIO_Init+0x1e4>)
 80007e8:	f000 fb42 	bl	8000e70 <HAL_GPIO_Init>

  /*Configure GPIO pins : btnLEFT_Pin btnDOWN_Pin */
  GPIO_InitStruct.Pin = btnLEFT_Pin|btnDOWN_Pin;
 80007ec:	2306      	movs	r3, #6
 80007ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007f0:	2300      	movs	r3, #0
 80007f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f4:	2300      	movs	r3, #0
 80007f6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80007f8:	f107 031c 	add.w	r3, r7, #28
 80007fc:	4619      	mov	r1, r3
 80007fe:	4835      	ldr	r0, [pc, #212]	; (80008d4 <MX_GPIO_Init+0x1e8>)
 8000800:	f000 fb36 	bl	8000e70 <HAL_GPIO_Init>

  /*Configure GPIO pins : btnA_Pin btnX_Pin btnB_Pin btnY_Pin
                           btnSTART_Pin */
  GPIO_InitStruct.Pin = btnA_Pin|btnX_Pin|btnB_Pin|btnY_Pin
 8000804:	233b      	movs	r3, #59	; 0x3b
 8000806:	61fb      	str	r3, [r7, #28]
                          |btnSTART_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000808:	2300      	movs	r3, #0
 800080a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080c:	2300      	movs	r3, #0
 800080e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000810:	f107 031c 	add.w	r3, r7, #28
 8000814:	4619      	mov	r1, r3
 8000816:	482e      	ldr	r0, [pc, #184]	; (80008d0 <MX_GPIO_Init+0x1e4>)
 8000818:	f000 fb2a 	bl	8000e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : driverpin_Pin */
  GPIO_InitStruct.Pin = driverpin_Pin;
 800081c:	2308      	movs	r3, #8
 800081e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000820:	2301      	movs	r3, #1
 8000822:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000824:	2300      	movs	r3, #0
 8000826:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000828:	2300      	movs	r3, #0
 800082a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(driverpin_GPIO_Port, &GPIO_InitStruct);
 800082c:	f107 031c 	add.w	r3, r7, #28
 8000830:	4619      	mov	r1, r3
 8000832:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000836:	f000 fb1b 	bl	8000e70 <HAL_GPIO_Init>

  /*Configure GPIO pins : btnSELECT_Pin btnUP_Pin */
  GPIO_InitStruct.Pin = btnSELECT_Pin|btnUP_Pin;
 800083a:	2344      	movs	r3, #68	; 0x44
 800083c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800083e:	2300      	movs	r3, #0
 8000840:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000842:	2300      	movs	r3, #0
 8000844:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000846:	f107 031c 	add.w	r3, r7, #28
 800084a:	4619      	mov	r1, r3
 800084c:	481e      	ldr	r0, [pc, #120]	; (80008c8 <MX_GPIO_Init+0x1dc>)
 800084e:	f000 fb0f 	bl	8000e70 <HAL_GPIO_Init>

  /*Configure GPIO pins : Red_Pin LD2_Pin */
  GPIO_InitStruct.Pin = Red_Pin|LD2_Pin;
 8000852:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000856:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000858:	2301      	movs	r3, #1
 800085a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085c:	2300      	movs	r3, #0
 800085e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000860:	2300      	movs	r3, #0
 8000862:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000864:	f107 031c 	add.w	r3, r7, #28
 8000868:	4619      	mov	r1, r3
 800086a:	4817      	ldr	r0, [pc, #92]	; (80008c8 <MX_GPIO_Init+0x1dc>)
 800086c:	f000 fb00 	bl	8000e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000870:	2320      	movs	r3, #32
 8000872:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000874:	2300      	movs	r3, #0
 8000876:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000878:	2300      	movs	r3, #0
 800087a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800087c:	f107 031c 	add.w	r3, r7, #28
 8000880:	4619      	mov	r1, r3
 8000882:	4812      	ldr	r0, [pc, #72]	; (80008cc <MX_GPIO_Init+0x1e0>)
 8000884:	f000 faf4 	bl	8000e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000888:	2340      	movs	r3, #64	; 0x40
 800088a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800088c:	2301      	movs	r3, #1
 800088e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000890:	2300      	movs	r3, #0
 8000892:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000894:	2300      	movs	r3, #0
 8000896:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000898:	f107 031c 	add.w	r3, r7, #28
 800089c:	4619      	mov	r1, r3
 800089e:	480b      	ldr	r0, [pc, #44]	; (80008cc <MX_GPIO_Init+0x1e0>)
 80008a0:	f000 fae6 	bl	8000e70 <HAL_GPIO_Init>

  /*Configure GPIO pins : HOTKEY_Pin btnRIGHT_Pin */
  GPIO_InitStruct.Pin = HOTKEY_Pin|btnRIGHT_Pin;
 80008a4:	23c0      	movs	r3, #192	; 0xc0
 80008a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008a8:	2300      	movs	r3, #0
 80008aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ac:	2300      	movs	r3, #0
 80008ae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008b0:	f107 031c 	add.w	r3, r7, #28
 80008b4:	4619      	mov	r1, r3
 80008b6:	4808      	ldr	r0, [pc, #32]	; (80008d8 <MX_GPIO_Init+0x1ec>)
 80008b8:	f000 fada 	bl	8000e70 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008bc:	bf00      	nop
 80008be:	3730      	adds	r7, #48	; 0x30
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	40021000 	.word	0x40021000
 80008c8:	48000400 	.word	0x48000400
 80008cc:	48001800 	.word	0x48001800
 80008d0:	48000800 	.word	0x48000800
 80008d4:	48001400 	.word	0x48001400
 80008d8:	48000c00 	.word	0x48000c00

080008dc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80008e4:	f009 feba 	bl	800a65c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80008e8:	2001      	movs	r0, #1
 80008ea:	f007 fa41 	bl	8007d70 <osDelay>
 80008ee:	e7fb      	b.n	80008e8 <StartDefaultTask+0xc>

080008f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008f4:	b672      	cpsid	i
}
 80008f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008f8:	e7fe      	b.n	80008f8 <Error_Handler+0x8>
	...

080008fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000902:	4b11      	ldr	r3, [pc, #68]	; (8000948 <HAL_MspInit+0x4c>)
 8000904:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000906:	4a10      	ldr	r2, [pc, #64]	; (8000948 <HAL_MspInit+0x4c>)
 8000908:	f043 0301 	orr.w	r3, r3, #1
 800090c:	6613      	str	r3, [r2, #96]	; 0x60
 800090e:	4b0e      	ldr	r3, [pc, #56]	; (8000948 <HAL_MspInit+0x4c>)
 8000910:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000912:	f003 0301 	and.w	r3, r3, #1
 8000916:	607b      	str	r3, [r7, #4]
 8000918:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800091a:	4b0b      	ldr	r3, [pc, #44]	; (8000948 <HAL_MspInit+0x4c>)
 800091c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800091e:	4a0a      	ldr	r2, [pc, #40]	; (8000948 <HAL_MspInit+0x4c>)
 8000920:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000924:	6593      	str	r3, [r2, #88]	; 0x58
 8000926:	4b08      	ldr	r3, [pc, #32]	; (8000948 <HAL_MspInit+0x4c>)
 8000928:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800092a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800092e:	603b      	str	r3, [r7, #0]
 8000930:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000932:	2200      	movs	r2, #0
 8000934:	210f      	movs	r1, #15
 8000936:	f06f 0001 	mvn.w	r0, #1
 800093a:	f000 fa62 	bl	8000e02 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800093e:	bf00      	nop
 8000940:	3708      	adds	r7, #8
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	40021000 	.word	0x40021000

0800094c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b0ac      	sub	sp, #176	; 0xb0
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000954:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
 800095e:	609a      	str	r2, [r3, #8]
 8000960:	60da      	str	r2, [r3, #12]
 8000962:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000964:	f107 0310 	add.w	r3, r7, #16
 8000968:	228c      	movs	r2, #140	; 0x8c
 800096a:	2100      	movs	r1, #0
 800096c:	4618      	mov	r0, r3
 800096e:	f00a fbff 	bl	800b170 <memset>
  if(huart->Instance==LPUART1)
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	4a22      	ldr	r2, [pc, #136]	; (8000a00 <HAL_UART_MspInit+0xb4>)
 8000978:	4293      	cmp	r3, r2
 800097a:	d13d      	bne.n	80009f8 <HAL_UART_MspInit+0xac>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800097c:	2320      	movs	r3, #32
 800097e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000980:	2300      	movs	r3, #0
 8000982:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000984:	f107 0310 	add.w	r3, r7, #16
 8000988:	4618      	mov	r0, r3
 800098a:	f002 fc7d 	bl	8003288 <HAL_RCCEx_PeriphCLKConfig>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000994:	f7ff ffac 	bl	80008f0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000998:	4b1a      	ldr	r3, [pc, #104]	; (8000a04 <HAL_UART_MspInit+0xb8>)
 800099a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800099c:	4a19      	ldr	r2, [pc, #100]	; (8000a04 <HAL_UART_MspInit+0xb8>)
 800099e:	f043 0301 	orr.w	r3, r3, #1
 80009a2:	65d3      	str	r3, [r2, #92]	; 0x5c
 80009a4:	4b17      	ldr	r3, [pc, #92]	; (8000a04 <HAL_UART_MspInit+0xb8>)
 80009a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80009a8:	f003 0301 	and.w	r3, r3, #1
 80009ac:	60fb      	str	r3, [r7, #12]
 80009ae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80009b0:	4b14      	ldr	r3, [pc, #80]	; (8000a04 <HAL_UART_MspInit+0xb8>)
 80009b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009b4:	4a13      	ldr	r2, [pc, #76]	; (8000a04 <HAL_UART_MspInit+0xb8>)
 80009b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009ba:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009bc:	4b11      	ldr	r3, [pc, #68]	; (8000a04 <HAL_UART_MspInit+0xb8>)
 80009be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009c4:	60bb      	str	r3, [r7, #8]
 80009c6:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 80009c8:	f001 fe10 	bl	80025ec <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80009cc:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80009d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d4:	2302      	movs	r3, #2
 80009d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009da:	2300      	movs	r3, #0
 80009dc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009e0:	2303      	movs	r3, #3
 80009e2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80009e6:	2308      	movs	r3, #8
 80009e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80009ec:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80009f0:	4619      	mov	r1, r3
 80009f2:	4805      	ldr	r0, [pc, #20]	; (8000a08 <HAL_UART_MspInit+0xbc>)
 80009f4:	f000 fa3c 	bl	8000e70 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 80009f8:	bf00      	nop
 80009fa:	37b0      	adds	r7, #176	; 0xb0
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	40008000 	.word	0x40008000
 8000a04:	40021000 	.word	0x40021000
 8000a08:	48001800 	.word	0x48001800

08000a0c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b085      	sub	sp, #20
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a1c:	d10b      	bne.n	8000a36 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a1e:	4b09      	ldr	r3, [pc, #36]	; (8000a44 <HAL_TIM_Base_MspInit+0x38>)
 8000a20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a22:	4a08      	ldr	r2, [pc, #32]	; (8000a44 <HAL_TIM_Base_MspInit+0x38>)
 8000a24:	f043 0301 	orr.w	r3, r3, #1
 8000a28:	6593      	str	r3, [r2, #88]	; 0x58
 8000a2a:	4b06      	ldr	r3, [pc, #24]	; (8000a44 <HAL_TIM_Base_MspInit+0x38>)
 8000a2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a2e:	f003 0301 	and.w	r3, r3, #1
 8000a32:	60fb      	str	r3, [r7, #12]
 8000a34:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000a36:	bf00      	nop
 8000a38:	3714      	adds	r7, #20
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop
 8000a44:	40021000 	.word	0x40021000

08000a48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a4c:	e7fe      	b.n	8000a4c <NMI_Handler+0x4>

08000a4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a4e:	b480      	push	{r7}
 8000a50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a52:	e7fe      	b.n	8000a52 <HardFault_Handler+0x4>

08000a54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a58:	e7fe      	b.n	8000a58 <MemManage_Handler+0x4>

08000a5a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a5a:	b480      	push	{r7}
 8000a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a5e:	e7fe      	b.n	8000a5e <BusFault_Handler+0x4>

08000a60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a64:	e7fe      	b.n	8000a64 <UsageFault_Handler+0x4>

08000a66 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a66:	b480      	push	{r7}
 8000a68:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a6a:	bf00      	nop
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a72:	4770      	bx	lr

08000a74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a78:	f000 f8a4 	bl	8000bc4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000a7c:	f008 fd86 	bl	800958c <xTaskGetSchedulerState>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b01      	cmp	r3, #1
 8000a84:	d001      	beq.n	8000a8a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000a86:	f009 fb6f 	bl	800a168 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a8a:	bf00      	nop
 8000a8c:	bd80      	pop	{r7, pc}
	...

08000a90 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000a94:	4802      	ldr	r0, [pc, #8]	; (8000aa0 <OTG_FS_IRQHandler+0x10>)
 8000a96:	f000 fce8 	bl	800146a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000a9a:	bf00      	nop
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	20002010 	.word	0x20002010

08000aa4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000aa8:	4b06      	ldr	r3, [pc, #24]	; (8000ac4 <SystemInit+0x20>)
 8000aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000aae:	4a05      	ldr	r2, [pc, #20]	; (8000ac4 <SystemInit+0x20>)
 8000ab0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ab4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000ab8:	bf00      	nop
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop
 8000ac4:	e000ed00 	.word	0xe000ed00

08000ac8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000ac8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b00 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000acc:	f7ff ffea 	bl	8000aa4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ad0:	480c      	ldr	r0, [pc, #48]	; (8000b04 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ad2:	490d      	ldr	r1, [pc, #52]	; (8000b08 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ad4:	4a0d      	ldr	r2, [pc, #52]	; (8000b0c <LoopForever+0xe>)
  movs r3, #0
 8000ad6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ad8:	e002      	b.n	8000ae0 <LoopCopyDataInit>

08000ada <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ada:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000adc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ade:	3304      	adds	r3, #4

08000ae0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ae0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ae2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ae4:	d3f9      	bcc.n	8000ada <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ae6:	4a0a      	ldr	r2, [pc, #40]	; (8000b10 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ae8:	4c0a      	ldr	r4, [pc, #40]	; (8000b14 <LoopForever+0x16>)
  movs r3, #0
 8000aea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000aec:	e001      	b.n	8000af2 <LoopFillZerobss>

08000aee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000af0:	3204      	adds	r2, #4

08000af2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000af2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000af4:	d3fb      	bcc.n	8000aee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000af6:	f00a fb43 	bl	800b180 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000afa:	f7ff fcf7 	bl	80004ec <main>

08000afe <LoopForever>:

LoopForever:
    b LoopForever
 8000afe:	e7fe      	b.n	8000afe <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b00:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000b04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b08:	20000130 	.word	0x20000130
  ldr r2, =_sidata
 8000b0c:	0800b2f4 	.word	0x0800b2f4
  ldr r2, =_sbss
 8000b10:	20000130 	.word	0x20000130
  ldr r4, =_ebss
 8000b14:	20002530 	.word	0x20002530

08000b18 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b18:	e7fe      	b.n	8000b18 <ADC1_2_IRQHandler>

08000b1a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b1a:	b580      	push	{r7, lr}
 8000b1c:	b082      	sub	sp, #8
 8000b1e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b20:	2300      	movs	r3, #0
 8000b22:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b24:	2003      	movs	r0, #3
 8000b26:	f000 f961 	bl	8000dec <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b2a:	200f      	movs	r0, #15
 8000b2c:	f000 f80e 	bl	8000b4c <HAL_InitTick>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d002      	beq.n	8000b3c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b36:	2301      	movs	r3, #1
 8000b38:	71fb      	strb	r3, [r7, #7]
 8000b3a:	e001      	b.n	8000b40 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b3c:	f7ff fede 	bl	80008fc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b40:	79fb      	ldrb	r3, [r7, #7]
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	3708      	adds	r7, #8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
	...

08000b4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b084      	sub	sp, #16
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b54:	2300      	movs	r3, #0
 8000b56:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000b58:	4b17      	ldr	r3, [pc, #92]	; (8000bb8 <HAL_InitTick+0x6c>)
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d023      	beq.n	8000ba8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000b60:	4b16      	ldr	r3, [pc, #88]	; (8000bbc <HAL_InitTick+0x70>)
 8000b62:	681a      	ldr	r2, [r3, #0]
 8000b64:	4b14      	ldr	r3, [pc, #80]	; (8000bb8 <HAL_InitTick+0x6c>)
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	4619      	mov	r1, r3
 8000b6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b72:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b76:	4618      	mov	r0, r3
 8000b78:	f000 f96d 	bl	8000e56 <HAL_SYSTICK_Config>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d10f      	bne.n	8000ba2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	2b0f      	cmp	r3, #15
 8000b86:	d809      	bhi.n	8000b9c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b88:	2200      	movs	r2, #0
 8000b8a:	6879      	ldr	r1, [r7, #4]
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b90:	f000 f937 	bl	8000e02 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b94:	4a0a      	ldr	r2, [pc, #40]	; (8000bc0 <HAL_InitTick+0x74>)
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	6013      	str	r3, [r2, #0]
 8000b9a:	e007      	b.n	8000bac <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	73fb      	strb	r3, [r7, #15]
 8000ba0:	e004      	b.n	8000bac <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	73fb      	strb	r3, [r7, #15]
 8000ba6:	e001      	b.n	8000bac <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ba8:	2301      	movs	r3, #1
 8000baa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000bac:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	3710      	adds	r7, #16
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	20000008 	.word	0x20000008
 8000bbc:	20000000 	.word	0x20000000
 8000bc0:	20000004 	.word	0x20000004

08000bc4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000bc8:	4b06      	ldr	r3, [pc, #24]	; (8000be4 <HAL_IncTick+0x20>)
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	461a      	mov	r2, r3
 8000bce:	4b06      	ldr	r3, [pc, #24]	; (8000be8 <HAL_IncTick+0x24>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	4413      	add	r3, r2
 8000bd4:	4a04      	ldr	r2, [pc, #16]	; (8000be8 <HAL_IncTick+0x24>)
 8000bd6:	6013      	str	r3, [r2, #0]
}
 8000bd8:	bf00      	nop
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	20000008 	.word	0x20000008
 8000be8:	20000224 	.word	0x20000224

08000bec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  return uwTick;
 8000bf0:	4b03      	ldr	r3, [pc, #12]	; (8000c00 <HAL_GetTick+0x14>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
}
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop
 8000c00:	20000224 	.word	0x20000224

08000c04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b084      	sub	sp, #16
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c0c:	f7ff ffee 	bl	8000bec <HAL_GetTick>
 8000c10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000c1c:	d005      	beq.n	8000c2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000c1e:	4b0a      	ldr	r3, [pc, #40]	; (8000c48 <HAL_Delay+0x44>)
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	461a      	mov	r2, r3
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	4413      	add	r3, r2
 8000c28:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c2a:	bf00      	nop
 8000c2c:	f7ff ffde 	bl	8000bec <HAL_GetTick>
 8000c30:	4602      	mov	r2, r0
 8000c32:	68bb      	ldr	r3, [r7, #8]
 8000c34:	1ad3      	subs	r3, r2, r3
 8000c36:	68fa      	ldr	r2, [r7, #12]
 8000c38:	429a      	cmp	r2, r3
 8000c3a:	d8f7      	bhi.n	8000c2c <HAL_Delay+0x28>
  {
  }
}
 8000c3c:	bf00      	nop
 8000c3e:	bf00      	nop
 8000c40:	3710      	adds	r7, #16
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	20000008 	.word	0x20000008

08000c4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b085      	sub	sp, #20
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	f003 0307 	and.w	r3, r3, #7
 8000c5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c5c:	4b0c      	ldr	r3, [pc, #48]	; (8000c90 <__NVIC_SetPriorityGrouping+0x44>)
 8000c5e:	68db      	ldr	r3, [r3, #12]
 8000c60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c62:	68ba      	ldr	r2, [r7, #8]
 8000c64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c68:	4013      	ands	r3, r2
 8000c6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c70:	68bb      	ldr	r3, [r7, #8]
 8000c72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c7e:	4a04      	ldr	r2, [pc, #16]	; (8000c90 <__NVIC_SetPriorityGrouping+0x44>)
 8000c80:	68bb      	ldr	r3, [r7, #8]
 8000c82:	60d3      	str	r3, [r2, #12]
}
 8000c84:	bf00      	nop
 8000c86:	3714      	adds	r7, #20
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr
 8000c90:	e000ed00 	.word	0xe000ed00

08000c94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c98:	4b04      	ldr	r3, [pc, #16]	; (8000cac <__NVIC_GetPriorityGrouping+0x18>)
 8000c9a:	68db      	ldr	r3, [r3, #12]
 8000c9c:	0a1b      	lsrs	r3, r3, #8
 8000c9e:	f003 0307 	and.w	r3, r3, #7
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr
 8000cac:	e000ed00 	.word	0xe000ed00

08000cb0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b083      	sub	sp, #12
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	db0b      	blt.n	8000cda <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cc2:	79fb      	ldrb	r3, [r7, #7]
 8000cc4:	f003 021f 	and.w	r2, r3, #31
 8000cc8:	4907      	ldr	r1, [pc, #28]	; (8000ce8 <__NVIC_EnableIRQ+0x38>)
 8000cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cce:	095b      	lsrs	r3, r3, #5
 8000cd0:	2001      	movs	r0, #1
 8000cd2:	fa00 f202 	lsl.w	r2, r0, r2
 8000cd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000cda:	bf00      	nop
 8000cdc:	370c      	adds	r7, #12
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop
 8000ce8:	e000e100 	.word	0xe000e100

08000cec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b083      	sub	sp, #12
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	6039      	str	r1, [r7, #0]
 8000cf6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	db0a      	blt.n	8000d16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	b2da      	uxtb	r2, r3
 8000d04:	490c      	ldr	r1, [pc, #48]	; (8000d38 <__NVIC_SetPriority+0x4c>)
 8000d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d0a:	0112      	lsls	r2, r2, #4
 8000d0c:	b2d2      	uxtb	r2, r2
 8000d0e:	440b      	add	r3, r1
 8000d10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d14:	e00a      	b.n	8000d2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	b2da      	uxtb	r2, r3
 8000d1a:	4908      	ldr	r1, [pc, #32]	; (8000d3c <__NVIC_SetPriority+0x50>)
 8000d1c:	79fb      	ldrb	r3, [r7, #7]
 8000d1e:	f003 030f 	and.w	r3, r3, #15
 8000d22:	3b04      	subs	r3, #4
 8000d24:	0112      	lsls	r2, r2, #4
 8000d26:	b2d2      	uxtb	r2, r2
 8000d28:	440b      	add	r3, r1
 8000d2a:	761a      	strb	r2, [r3, #24]
}
 8000d2c:	bf00      	nop
 8000d2e:	370c      	adds	r7, #12
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr
 8000d38:	e000e100 	.word	0xe000e100
 8000d3c:	e000ed00 	.word	0xe000ed00

08000d40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b089      	sub	sp, #36	; 0x24
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	60f8      	str	r0, [r7, #12]
 8000d48:	60b9      	str	r1, [r7, #8]
 8000d4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	f003 0307 	and.w	r3, r3, #7
 8000d52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d54:	69fb      	ldr	r3, [r7, #28]
 8000d56:	f1c3 0307 	rsb	r3, r3, #7
 8000d5a:	2b04      	cmp	r3, #4
 8000d5c:	bf28      	it	cs
 8000d5e:	2304      	movcs	r3, #4
 8000d60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d62:	69fb      	ldr	r3, [r7, #28]
 8000d64:	3304      	adds	r3, #4
 8000d66:	2b06      	cmp	r3, #6
 8000d68:	d902      	bls.n	8000d70 <NVIC_EncodePriority+0x30>
 8000d6a:	69fb      	ldr	r3, [r7, #28]
 8000d6c:	3b03      	subs	r3, #3
 8000d6e:	e000      	b.n	8000d72 <NVIC_EncodePriority+0x32>
 8000d70:	2300      	movs	r3, #0
 8000d72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d74:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d78:	69bb      	ldr	r3, [r7, #24]
 8000d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7e:	43da      	mvns	r2, r3
 8000d80:	68bb      	ldr	r3, [r7, #8]
 8000d82:	401a      	ands	r2, r3
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d88:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d92:	43d9      	mvns	r1, r3
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d98:	4313      	orrs	r3, r2
         );
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	3724      	adds	r7, #36	; 0x24
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
	...

08000da8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	3b01      	subs	r3, #1
 8000db4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000db8:	d301      	bcc.n	8000dbe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dba:	2301      	movs	r3, #1
 8000dbc:	e00f      	b.n	8000dde <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dbe:	4a0a      	ldr	r2, [pc, #40]	; (8000de8 <SysTick_Config+0x40>)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	3b01      	subs	r3, #1
 8000dc4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dc6:	210f      	movs	r1, #15
 8000dc8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000dcc:	f7ff ff8e 	bl	8000cec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dd0:	4b05      	ldr	r3, [pc, #20]	; (8000de8 <SysTick_Config+0x40>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dd6:	4b04      	ldr	r3, [pc, #16]	; (8000de8 <SysTick_Config+0x40>)
 8000dd8:	2207      	movs	r2, #7
 8000dda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ddc:	2300      	movs	r3, #0
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	3708      	adds	r7, #8
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	e000e010 	.word	0xe000e010

08000dec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000df4:	6878      	ldr	r0, [r7, #4]
 8000df6:	f7ff ff29 	bl	8000c4c <__NVIC_SetPriorityGrouping>
}
 8000dfa:	bf00      	nop
 8000dfc:	3708      	adds	r7, #8
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}

08000e02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e02:	b580      	push	{r7, lr}
 8000e04:	b086      	sub	sp, #24
 8000e06:	af00      	add	r7, sp, #0
 8000e08:	4603      	mov	r3, r0
 8000e0a:	60b9      	str	r1, [r7, #8]
 8000e0c:	607a      	str	r2, [r7, #4]
 8000e0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e10:	2300      	movs	r3, #0
 8000e12:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e14:	f7ff ff3e 	bl	8000c94 <__NVIC_GetPriorityGrouping>
 8000e18:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e1a:	687a      	ldr	r2, [r7, #4]
 8000e1c:	68b9      	ldr	r1, [r7, #8]
 8000e1e:	6978      	ldr	r0, [r7, #20]
 8000e20:	f7ff ff8e 	bl	8000d40 <NVIC_EncodePriority>
 8000e24:	4602      	mov	r2, r0
 8000e26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e2a:	4611      	mov	r1, r2
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f7ff ff5d 	bl	8000cec <__NVIC_SetPriority>
}
 8000e32:	bf00      	nop
 8000e34:	3718      	adds	r7, #24
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}

08000e3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e3a:	b580      	push	{r7, lr}
 8000e3c:	b082      	sub	sp, #8
 8000e3e:	af00      	add	r7, sp, #0
 8000e40:	4603      	mov	r3, r0
 8000e42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f7ff ff31 	bl	8000cb0 <__NVIC_EnableIRQ>
}
 8000e4e:	bf00      	nop
 8000e50:	3708      	adds	r7, #8
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}

08000e56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e56:	b580      	push	{r7, lr}
 8000e58:	b082      	sub	sp, #8
 8000e5a:	af00      	add	r7, sp, #0
 8000e5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e5e:	6878      	ldr	r0, [r7, #4]
 8000e60:	f7ff ffa2 	bl	8000da8 <SysTick_Config>
 8000e64:	4603      	mov	r3, r0
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	3708      	adds	r7, #8
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
	...

08000e70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b087      	sub	sp, #28
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
 8000e78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e7e:	e166      	b.n	800114e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	681a      	ldr	r2, [r3, #0]
 8000e84:	2101      	movs	r1, #1
 8000e86:	697b      	ldr	r3, [r7, #20]
 8000e88:	fa01 f303 	lsl.w	r3, r1, r3
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	f000 8158 	beq.w	8001148 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	f003 0303 	and.w	r3, r3, #3
 8000ea0:	2b01      	cmp	r3, #1
 8000ea2:	d005      	beq.n	8000eb0 <HAL_GPIO_Init+0x40>
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	f003 0303 	and.w	r3, r3, #3
 8000eac:	2b02      	cmp	r3, #2
 8000eae:	d130      	bne.n	8000f12 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	689b      	ldr	r3, [r3, #8]
 8000eb4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000eb6:	697b      	ldr	r3, [r7, #20]
 8000eb8:	005b      	lsls	r3, r3, #1
 8000eba:	2203      	movs	r2, #3
 8000ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec0:	43db      	mvns	r3, r3
 8000ec2:	693a      	ldr	r2, [r7, #16]
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	68da      	ldr	r2, [r3, #12]
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	005b      	lsls	r3, r3, #1
 8000ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed4:	693a      	ldr	r2, [r7, #16]
 8000ed6:	4313      	orrs	r3, r2
 8000ed8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	693a      	ldr	r2, [r7, #16]
 8000ede:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	fa02 f303 	lsl.w	r3, r2, r3
 8000eee:	43db      	mvns	r3, r3
 8000ef0:	693a      	ldr	r2, [r7, #16]
 8000ef2:	4013      	ands	r3, r2
 8000ef4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	091b      	lsrs	r3, r3, #4
 8000efc:	f003 0201 	and.w	r2, r3, #1
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	fa02 f303 	lsl.w	r3, r2, r3
 8000f06:	693a      	ldr	r2, [r7, #16]
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	693a      	ldr	r2, [r7, #16]
 8000f10:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	f003 0303 	and.w	r3, r3, #3
 8000f1a:	2b03      	cmp	r3, #3
 8000f1c:	d017      	beq.n	8000f4e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	68db      	ldr	r3, [r3, #12]
 8000f22:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	005b      	lsls	r3, r3, #1
 8000f28:	2203      	movs	r2, #3
 8000f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2e:	43db      	mvns	r3, r3
 8000f30:	693a      	ldr	r2, [r7, #16]
 8000f32:	4013      	ands	r3, r2
 8000f34:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	689a      	ldr	r2, [r3, #8]
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	005b      	lsls	r3, r3, #1
 8000f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f42:	693a      	ldr	r2, [r7, #16]
 8000f44:	4313      	orrs	r3, r2
 8000f46:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	693a      	ldr	r2, [r7, #16]
 8000f4c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	f003 0303 	and.w	r3, r3, #3
 8000f56:	2b02      	cmp	r3, #2
 8000f58:	d123      	bne.n	8000fa2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	08da      	lsrs	r2, r3, #3
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	3208      	adds	r2, #8
 8000f62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f66:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	f003 0307 	and.w	r3, r3, #7
 8000f6e:	009b      	lsls	r3, r3, #2
 8000f70:	220f      	movs	r2, #15
 8000f72:	fa02 f303 	lsl.w	r3, r2, r3
 8000f76:	43db      	mvns	r3, r3
 8000f78:	693a      	ldr	r2, [r7, #16]
 8000f7a:	4013      	ands	r3, r2
 8000f7c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	691a      	ldr	r2, [r3, #16]
 8000f82:	697b      	ldr	r3, [r7, #20]
 8000f84:	f003 0307 	and.w	r3, r3, #7
 8000f88:	009b      	lsls	r3, r3, #2
 8000f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8e:	693a      	ldr	r2, [r7, #16]
 8000f90:	4313      	orrs	r3, r2
 8000f92:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	08da      	lsrs	r2, r3, #3
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	3208      	adds	r2, #8
 8000f9c:	6939      	ldr	r1, [r7, #16]
 8000f9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	005b      	lsls	r3, r3, #1
 8000fac:	2203      	movs	r2, #3
 8000fae:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb2:	43db      	mvns	r3, r3
 8000fb4:	693a      	ldr	r2, [r7, #16]
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	f003 0203 	and.w	r2, r3, #3
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	005b      	lsls	r3, r3, #1
 8000fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fca:	693a      	ldr	r2, [r7, #16]
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	693a      	ldr	r2, [r7, #16]
 8000fd4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	f000 80b2 	beq.w	8001148 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fe4:	4b61      	ldr	r3, [pc, #388]	; (800116c <HAL_GPIO_Init+0x2fc>)
 8000fe6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fe8:	4a60      	ldr	r2, [pc, #384]	; (800116c <HAL_GPIO_Init+0x2fc>)
 8000fea:	f043 0301 	orr.w	r3, r3, #1
 8000fee:	6613      	str	r3, [r2, #96]	; 0x60
 8000ff0:	4b5e      	ldr	r3, [pc, #376]	; (800116c <HAL_GPIO_Init+0x2fc>)
 8000ff2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ff4:	f003 0301 	and.w	r3, r3, #1
 8000ff8:	60bb      	str	r3, [r7, #8]
 8000ffa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000ffc:	4a5c      	ldr	r2, [pc, #368]	; (8001170 <HAL_GPIO_Init+0x300>)
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	089b      	lsrs	r3, r3, #2
 8001002:	3302      	adds	r3, #2
 8001004:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001008:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	f003 0303 	and.w	r3, r3, #3
 8001010:	009b      	lsls	r3, r3, #2
 8001012:	220f      	movs	r2, #15
 8001014:	fa02 f303 	lsl.w	r3, r2, r3
 8001018:	43db      	mvns	r3, r3
 800101a:	693a      	ldr	r2, [r7, #16]
 800101c:	4013      	ands	r3, r2
 800101e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001026:	d02b      	beq.n	8001080 <HAL_GPIO_Init+0x210>
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	4a52      	ldr	r2, [pc, #328]	; (8001174 <HAL_GPIO_Init+0x304>)
 800102c:	4293      	cmp	r3, r2
 800102e:	d025      	beq.n	800107c <HAL_GPIO_Init+0x20c>
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	4a51      	ldr	r2, [pc, #324]	; (8001178 <HAL_GPIO_Init+0x308>)
 8001034:	4293      	cmp	r3, r2
 8001036:	d01f      	beq.n	8001078 <HAL_GPIO_Init+0x208>
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	4a50      	ldr	r2, [pc, #320]	; (800117c <HAL_GPIO_Init+0x30c>)
 800103c:	4293      	cmp	r3, r2
 800103e:	d019      	beq.n	8001074 <HAL_GPIO_Init+0x204>
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	4a4f      	ldr	r2, [pc, #316]	; (8001180 <HAL_GPIO_Init+0x310>)
 8001044:	4293      	cmp	r3, r2
 8001046:	d013      	beq.n	8001070 <HAL_GPIO_Init+0x200>
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	4a4e      	ldr	r2, [pc, #312]	; (8001184 <HAL_GPIO_Init+0x314>)
 800104c:	4293      	cmp	r3, r2
 800104e:	d00d      	beq.n	800106c <HAL_GPIO_Init+0x1fc>
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	4a4d      	ldr	r2, [pc, #308]	; (8001188 <HAL_GPIO_Init+0x318>)
 8001054:	4293      	cmp	r3, r2
 8001056:	d007      	beq.n	8001068 <HAL_GPIO_Init+0x1f8>
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	4a4c      	ldr	r2, [pc, #304]	; (800118c <HAL_GPIO_Init+0x31c>)
 800105c:	4293      	cmp	r3, r2
 800105e:	d101      	bne.n	8001064 <HAL_GPIO_Init+0x1f4>
 8001060:	2307      	movs	r3, #7
 8001062:	e00e      	b.n	8001082 <HAL_GPIO_Init+0x212>
 8001064:	2308      	movs	r3, #8
 8001066:	e00c      	b.n	8001082 <HAL_GPIO_Init+0x212>
 8001068:	2306      	movs	r3, #6
 800106a:	e00a      	b.n	8001082 <HAL_GPIO_Init+0x212>
 800106c:	2305      	movs	r3, #5
 800106e:	e008      	b.n	8001082 <HAL_GPIO_Init+0x212>
 8001070:	2304      	movs	r3, #4
 8001072:	e006      	b.n	8001082 <HAL_GPIO_Init+0x212>
 8001074:	2303      	movs	r3, #3
 8001076:	e004      	b.n	8001082 <HAL_GPIO_Init+0x212>
 8001078:	2302      	movs	r3, #2
 800107a:	e002      	b.n	8001082 <HAL_GPIO_Init+0x212>
 800107c:	2301      	movs	r3, #1
 800107e:	e000      	b.n	8001082 <HAL_GPIO_Init+0x212>
 8001080:	2300      	movs	r3, #0
 8001082:	697a      	ldr	r2, [r7, #20]
 8001084:	f002 0203 	and.w	r2, r2, #3
 8001088:	0092      	lsls	r2, r2, #2
 800108a:	4093      	lsls	r3, r2
 800108c:	693a      	ldr	r2, [r7, #16]
 800108e:	4313      	orrs	r3, r2
 8001090:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001092:	4937      	ldr	r1, [pc, #220]	; (8001170 <HAL_GPIO_Init+0x300>)
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	089b      	lsrs	r3, r3, #2
 8001098:	3302      	adds	r3, #2
 800109a:	693a      	ldr	r2, [r7, #16]
 800109c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80010a0:	4b3b      	ldr	r3, [pc, #236]	; (8001190 <HAL_GPIO_Init+0x320>)
 80010a2:	689b      	ldr	r3, [r3, #8]
 80010a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	43db      	mvns	r3, r3
 80010aa:	693a      	ldr	r2, [r7, #16]
 80010ac:	4013      	ands	r3, r2
 80010ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d003      	beq.n	80010c4 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80010bc:	693a      	ldr	r2, [r7, #16]
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	4313      	orrs	r3, r2
 80010c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80010c4:	4a32      	ldr	r2, [pc, #200]	; (8001190 <HAL_GPIO_Init+0x320>)
 80010c6:	693b      	ldr	r3, [r7, #16]
 80010c8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80010ca:	4b31      	ldr	r3, [pc, #196]	; (8001190 <HAL_GPIO_Init+0x320>)
 80010cc:	68db      	ldr	r3, [r3, #12]
 80010ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	43db      	mvns	r3, r3
 80010d4:	693a      	ldr	r2, [r7, #16]
 80010d6:	4013      	ands	r3, r2
 80010d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d003      	beq.n	80010ee <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80010e6:	693a      	ldr	r2, [r7, #16]
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	4313      	orrs	r3, r2
 80010ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80010ee:	4a28      	ldr	r2, [pc, #160]	; (8001190 <HAL_GPIO_Init+0x320>)
 80010f0:	693b      	ldr	r3, [r7, #16]
 80010f2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80010f4:	4b26      	ldr	r3, [pc, #152]	; (8001190 <HAL_GPIO_Init+0x320>)
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	43db      	mvns	r3, r3
 80010fe:	693a      	ldr	r2, [r7, #16]
 8001100:	4013      	ands	r3, r2
 8001102:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800110c:	2b00      	cmp	r3, #0
 800110e:	d003      	beq.n	8001118 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001110:	693a      	ldr	r2, [r7, #16]
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	4313      	orrs	r3, r2
 8001116:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001118:	4a1d      	ldr	r2, [pc, #116]	; (8001190 <HAL_GPIO_Init+0x320>)
 800111a:	693b      	ldr	r3, [r7, #16]
 800111c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800111e:	4b1c      	ldr	r3, [pc, #112]	; (8001190 <HAL_GPIO_Init+0x320>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	43db      	mvns	r3, r3
 8001128:	693a      	ldr	r2, [r7, #16]
 800112a:	4013      	ands	r3, r2
 800112c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001136:	2b00      	cmp	r3, #0
 8001138:	d003      	beq.n	8001142 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800113a:	693a      	ldr	r2, [r7, #16]
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	4313      	orrs	r3, r2
 8001140:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001142:	4a13      	ldr	r2, [pc, #76]	; (8001190 <HAL_GPIO_Init+0x320>)
 8001144:	693b      	ldr	r3, [r7, #16]
 8001146:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	3301      	adds	r3, #1
 800114c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	681a      	ldr	r2, [r3, #0]
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	fa22 f303 	lsr.w	r3, r2, r3
 8001158:	2b00      	cmp	r3, #0
 800115a:	f47f ae91 	bne.w	8000e80 <HAL_GPIO_Init+0x10>
  }
}
 800115e:	bf00      	nop
 8001160:	bf00      	nop
 8001162:	371c      	adds	r7, #28
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr
 800116c:	40021000 	.word	0x40021000
 8001170:	40010000 	.word	0x40010000
 8001174:	48000400 	.word	0x48000400
 8001178:	48000800 	.word	0x48000800
 800117c:	48000c00 	.word	0x48000c00
 8001180:	48001000 	.word	0x48001000
 8001184:	48001400 	.word	0x48001400
 8001188:	48001800 	.word	0x48001800
 800118c:	48001c00 	.word	0x48001c00
 8001190:	40010400 	.word	0x40010400

08001194 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	460b      	mov	r3, r1
 800119e:	807b      	strh	r3, [r7, #2]
 80011a0:	4613      	mov	r3, r2
 80011a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011a4:	787b      	ldrb	r3, [r7, #1]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d003      	beq.n	80011b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011aa:	887a      	ldrh	r2, [r7, #2]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80011b0:	e002      	b.n	80011b8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80011b2:	887a      	ldrh	r2, [r7, #2]
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80011b8:	bf00      	nop
 80011ba:	370c      	adds	r7, #12
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr

080011c4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80011c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011c6:	b08f      	sub	sp, #60	; 0x3c
 80011c8:	af0a      	add	r7, sp, #40	; 0x28
 80011ca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d101      	bne.n	80011d6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80011d2:	2301      	movs	r3, #1
 80011d4:	e116      	b.n	8001404 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d106      	bne.n	80011f6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2200      	movs	r2, #0
 80011ec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80011f0:	6878      	ldr	r0, [r7, #4]
 80011f2:	f009 fb7b 	bl	800a8ec <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	2203      	movs	r2, #3
 80011fa:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80011fe:	68bb      	ldr	r3, [r7, #8]
 8001200:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001202:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001206:	2b00      	cmp	r3, #0
 8001208:	d102      	bne.n	8001210 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2200      	movs	r2, #0
 800120e:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4618      	mov	r0, r3
 8001216:	f003 fde2 	bl	8004dde <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	603b      	str	r3, [r7, #0]
 8001220:	687e      	ldr	r6, [r7, #4]
 8001222:	466d      	mov	r5, sp
 8001224:	f106 0410 	add.w	r4, r6, #16
 8001228:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800122a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800122c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800122e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001230:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001234:	e885 0003 	stmia.w	r5, {r0, r1}
 8001238:	1d33      	adds	r3, r6, #4
 800123a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800123c:	6838      	ldr	r0, [r7, #0]
 800123e:	f003 fcf4 	bl	8004c2a <USB_CoreInit>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d005      	beq.n	8001254 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2202      	movs	r2, #2
 800124c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001250:	2301      	movs	r3, #1
 8001252:	e0d7      	b.n	8001404 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	2100      	movs	r1, #0
 800125a:	4618      	mov	r0, r3
 800125c:	f003 fdd0 	bl	8004e00 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001260:	2300      	movs	r3, #0
 8001262:	73fb      	strb	r3, [r7, #15]
 8001264:	e04a      	b.n	80012fc <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001266:	7bfa      	ldrb	r2, [r7, #15]
 8001268:	6879      	ldr	r1, [r7, #4]
 800126a:	4613      	mov	r3, r2
 800126c:	00db      	lsls	r3, r3, #3
 800126e:	4413      	add	r3, r2
 8001270:	009b      	lsls	r3, r3, #2
 8001272:	440b      	add	r3, r1
 8001274:	333d      	adds	r3, #61	; 0x3d
 8001276:	2201      	movs	r2, #1
 8001278:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800127a:	7bfa      	ldrb	r2, [r7, #15]
 800127c:	6879      	ldr	r1, [r7, #4]
 800127e:	4613      	mov	r3, r2
 8001280:	00db      	lsls	r3, r3, #3
 8001282:	4413      	add	r3, r2
 8001284:	009b      	lsls	r3, r3, #2
 8001286:	440b      	add	r3, r1
 8001288:	333c      	adds	r3, #60	; 0x3c
 800128a:	7bfa      	ldrb	r2, [r7, #15]
 800128c:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 800128e:	7bfa      	ldrb	r2, [r7, #15]
 8001290:	7bfb      	ldrb	r3, [r7, #15]
 8001292:	b298      	uxth	r0, r3
 8001294:	6879      	ldr	r1, [r7, #4]
 8001296:	4613      	mov	r3, r2
 8001298:	00db      	lsls	r3, r3, #3
 800129a:	4413      	add	r3, r2
 800129c:	009b      	lsls	r3, r3, #2
 800129e:	440b      	add	r3, r1
 80012a0:	3356      	adds	r3, #86	; 0x56
 80012a2:	4602      	mov	r2, r0
 80012a4:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80012a6:	7bfa      	ldrb	r2, [r7, #15]
 80012a8:	6879      	ldr	r1, [r7, #4]
 80012aa:	4613      	mov	r3, r2
 80012ac:	00db      	lsls	r3, r3, #3
 80012ae:	4413      	add	r3, r2
 80012b0:	009b      	lsls	r3, r3, #2
 80012b2:	440b      	add	r3, r1
 80012b4:	3340      	adds	r3, #64	; 0x40
 80012b6:	2200      	movs	r2, #0
 80012b8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80012ba:	7bfa      	ldrb	r2, [r7, #15]
 80012bc:	6879      	ldr	r1, [r7, #4]
 80012be:	4613      	mov	r3, r2
 80012c0:	00db      	lsls	r3, r3, #3
 80012c2:	4413      	add	r3, r2
 80012c4:	009b      	lsls	r3, r3, #2
 80012c6:	440b      	add	r3, r1
 80012c8:	3344      	adds	r3, #68	; 0x44
 80012ca:	2200      	movs	r2, #0
 80012cc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80012ce:	7bfa      	ldrb	r2, [r7, #15]
 80012d0:	6879      	ldr	r1, [r7, #4]
 80012d2:	4613      	mov	r3, r2
 80012d4:	00db      	lsls	r3, r3, #3
 80012d6:	4413      	add	r3, r2
 80012d8:	009b      	lsls	r3, r3, #2
 80012da:	440b      	add	r3, r1
 80012dc:	3348      	adds	r3, #72	; 0x48
 80012de:	2200      	movs	r2, #0
 80012e0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80012e2:	7bfa      	ldrb	r2, [r7, #15]
 80012e4:	6879      	ldr	r1, [r7, #4]
 80012e6:	4613      	mov	r3, r2
 80012e8:	00db      	lsls	r3, r3, #3
 80012ea:	4413      	add	r3, r2
 80012ec:	009b      	lsls	r3, r3, #2
 80012ee:	440b      	add	r3, r1
 80012f0:	334c      	adds	r3, #76	; 0x4c
 80012f2:	2200      	movs	r2, #0
 80012f4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012f6:	7bfb      	ldrb	r3, [r7, #15]
 80012f8:	3301      	adds	r3, #1
 80012fa:	73fb      	strb	r3, [r7, #15]
 80012fc:	7bfa      	ldrb	r2, [r7, #15]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	429a      	cmp	r2, r3
 8001304:	d3af      	bcc.n	8001266 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001306:	2300      	movs	r3, #0
 8001308:	73fb      	strb	r3, [r7, #15]
 800130a:	e044      	b.n	8001396 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800130c:	7bfa      	ldrb	r2, [r7, #15]
 800130e:	6879      	ldr	r1, [r7, #4]
 8001310:	4613      	mov	r3, r2
 8001312:	00db      	lsls	r3, r3, #3
 8001314:	4413      	add	r3, r2
 8001316:	009b      	lsls	r3, r3, #2
 8001318:	440b      	add	r3, r1
 800131a:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800131e:	2200      	movs	r2, #0
 8001320:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001322:	7bfa      	ldrb	r2, [r7, #15]
 8001324:	6879      	ldr	r1, [r7, #4]
 8001326:	4613      	mov	r3, r2
 8001328:	00db      	lsls	r3, r3, #3
 800132a:	4413      	add	r3, r2
 800132c:	009b      	lsls	r3, r3, #2
 800132e:	440b      	add	r3, r1
 8001330:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001334:	7bfa      	ldrb	r2, [r7, #15]
 8001336:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001338:	7bfa      	ldrb	r2, [r7, #15]
 800133a:	6879      	ldr	r1, [r7, #4]
 800133c:	4613      	mov	r3, r2
 800133e:	00db      	lsls	r3, r3, #3
 8001340:	4413      	add	r3, r2
 8001342:	009b      	lsls	r3, r3, #2
 8001344:	440b      	add	r3, r1
 8001346:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800134a:	2200      	movs	r2, #0
 800134c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800134e:	7bfa      	ldrb	r2, [r7, #15]
 8001350:	6879      	ldr	r1, [r7, #4]
 8001352:	4613      	mov	r3, r2
 8001354:	00db      	lsls	r3, r3, #3
 8001356:	4413      	add	r3, r2
 8001358:	009b      	lsls	r3, r3, #2
 800135a:	440b      	add	r3, r1
 800135c:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8001360:	2200      	movs	r2, #0
 8001362:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001364:	7bfa      	ldrb	r2, [r7, #15]
 8001366:	6879      	ldr	r1, [r7, #4]
 8001368:	4613      	mov	r3, r2
 800136a:	00db      	lsls	r3, r3, #3
 800136c:	4413      	add	r3, r2
 800136e:	009b      	lsls	r3, r3, #2
 8001370:	440b      	add	r3, r1
 8001372:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001376:	2200      	movs	r2, #0
 8001378:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800137a:	7bfa      	ldrb	r2, [r7, #15]
 800137c:	6879      	ldr	r1, [r7, #4]
 800137e:	4613      	mov	r3, r2
 8001380:	00db      	lsls	r3, r3, #3
 8001382:	4413      	add	r3, r2
 8001384:	009b      	lsls	r3, r3, #2
 8001386:	440b      	add	r3, r1
 8001388:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001390:	7bfb      	ldrb	r3, [r7, #15]
 8001392:	3301      	adds	r3, #1
 8001394:	73fb      	strb	r3, [r7, #15]
 8001396:	7bfa      	ldrb	r2, [r7, #15]
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	429a      	cmp	r2, r3
 800139e:	d3b5      	bcc.n	800130c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	603b      	str	r3, [r7, #0]
 80013a6:	687e      	ldr	r6, [r7, #4]
 80013a8:	466d      	mov	r5, sp
 80013aa:	f106 0410 	add.w	r4, r6, #16
 80013ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013b6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80013ba:	e885 0003 	stmia.w	r5, {r0, r1}
 80013be:	1d33      	adds	r3, r6, #4
 80013c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80013c2:	6838      	ldr	r0, [r7, #0]
 80013c4:	f003 fd68 	bl	8004e98 <USB_DevInit>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d005      	beq.n	80013da <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	2202      	movs	r2, #2
 80013d2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
 80013d8:	e014      	b.n	8001404 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2200      	movs	r2, #0
 80013de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2201      	movs	r2, #1
 80013e6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ee:	2b01      	cmp	r3, #1
 80013f0:	d102      	bne.n	80013f8 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80013f2:	6878      	ldr	r0, [r7, #4]
 80013f4:	f001 f852 	bl	800249c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4618      	mov	r0, r3
 80013fe:	f004 fd16 	bl	8005e2e <USB_DevDisconnect>

  return HAL_OK;
 8001402:	2300      	movs	r3, #0
}
 8001404:	4618      	mov	r0, r3
 8001406:	3714      	adds	r7, #20
 8001408:	46bd      	mov	sp, r7
 800140a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800140c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b084      	sub	sp, #16
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001420:	2b01      	cmp	r3, #1
 8001422:	d101      	bne.n	8001428 <HAL_PCD_Start+0x1c>
 8001424:	2302      	movs	r3, #2
 8001426:	e01c      	b.n	8001462 <HAL_PCD_Start+0x56>
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2201      	movs	r2, #1
 800142c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001434:	2b01      	cmp	r3, #1
 8001436:	d105      	bne.n	8001444 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800143c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4618      	mov	r0, r3
 800144a:	f003 fcb7 	bl	8004dbc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4618      	mov	r0, r3
 8001454:	f004 fcca 	bl	8005dec <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2200      	movs	r2, #0
 800145c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001460:	2300      	movs	r3, #0
}
 8001462:	4618      	mov	r0, r3
 8001464:	3710      	adds	r7, #16
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}

0800146a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800146a:	b590      	push	{r4, r7, lr}
 800146c:	b08d      	sub	sp, #52	; 0x34
 800146e:	af00      	add	r7, sp, #0
 8001470:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001478:	6a3b      	ldr	r3, [r7, #32]
 800147a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4618      	mov	r0, r3
 8001482:	f004 fd88 	bl	8005f96 <USB_GetMode>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	f040 847e 	bne.w	8001d8a <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4618      	mov	r0, r3
 8001494:	f004 fcec 	bl	8005e70 <USB_ReadInterrupts>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	f000 8474 	beq.w	8001d88 <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80014a0:	69fb      	ldr	r3, [r7, #28]
 80014a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80014a6:	689b      	ldr	r3, [r3, #8]
 80014a8:	0a1b      	lsrs	r3, r3, #8
 80014aa:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4618      	mov	r0, r3
 80014ba:	f004 fcd9 	bl	8005e70 <USB_ReadInterrupts>
 80014be:	4603      	mov	r3, r0
 80014c0:	f003 0302 	and.w	r3, r3, #2
 80014c4:	2b02      	cmp	r3, #2
 80014c6:	d107      	bne.n	80014d8 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	695a      	ldr	r2, [r3, #20]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f002 0202 	and.w	r2, r2, #2
 80014d6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4618      	mov	r0, r3
 80014de:	f004 fcc7 	bl	8005e70 <USB_ReadInterrupts>
 80014e2:	4603      	mov	r3, r0
 80014e4:	f003 0310 	and.w	r3, r3, #16
 80014e8:	2b10      	cmp	r3, #16
 80014ea:	d161      	bne.n	80015b0 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	699a      	ldr	r2, [r3, #24]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f022 0210 	bic.w	r2, r2, #16
 80014fa:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80014fc:	6a3b      	ldr	r3, [r7, #32]
 80014fe:	6a1b      	ldr	r3, [r3, #32]
 8001500:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001502:	69bb      	ldr	r3, [r7, #24]
 8001504:	f003 020f 	and.w	r2, r3, #15
 8001508:	4613      	mov	r3, r2
 800150a:	00db      	lsls	r3, r3, #3
 800150c:	4413      	add	r3, r2
 800150e:	009b      	lsls	r3, r3, #2
 8001510:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001514:	687a      	ldr	r2, [r7, #4]
 8001516:	4413      	add	r3, r2
 8001518:	3304      	adds	r3, #4
 800151a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800151c:	69bb      	ldr	r3, [r7, #24]
 800151e:	0c5b      	lsrs	r3, r3, #17
 8001520:	f003 030f 	and.w	r3, r3, #15
 8001524:	2b02      	cmp	r3, #2
 8001526:	d124      	bne.n	8001572 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001528:	69ba      	ldr	r2, [r7, #24]
 800152a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800152e:	4013      	ands	r3, r2
 8001530:	2b00      	cmp	r3, #0
 8001532:	d035      	beq.n	80015a0 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001538:	69bb      	ldr	r3, [r7, #24]
 800153a:	091b      	lsrs	r3, r3, #4
 800153c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800153e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001542:	b29b      	uxth	r3, r3
 8001544:	461a      	mov	r2, r3
 8001546:	6a38      	ldr	r0, [r7, #32]
 8001548:	f004 fafe 	bl	8005b48 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	68da      	ldr	r2, [r3, #12]
 8001550:	69bb      	ldr	r3, [r7, #24]
 8001552:	091b      	lsrs	r3, r3, #4
 8001554:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001558:	441a      	add	r2, r3
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	695a      	ldr	r2, [r3, #20]
 8001562:	69bb      	ldr	r3, [r7, #24]
 8001564:	091b      	lsrs	r3, r3, #4
 8001566:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800156a:	441a      	add	r2, r3
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	615a      	str	r2, [r3, #20]
 8001570:	e016      	b.n	80015a0 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001572:	69bb      	ldr	r3, [r7, #24]
 8001574:	0c5b      	lsrs	r3, r3, #17
 8001576:	f003 030f 	and.w	r3, r3, #15
 800157a:	2b06      	cmp	r3, #6
 800157c:	d110      	bne.n	80015a0 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001584:	2208      	movs	r2, #8
 8001586:	4619      	mov	r1, r3
 8001588:	6a38      	ldr	r0, [r7, #32]
 800158a:	f004 fadd 	bl	8005b48 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	695a      	ldr	r2, [r3, #20]
 8001592:	69bb      	ldr	r3, [r7, #24]
 8001594:	091b      	lsrs	r3, r3, #4
 8001596:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800159a:	441a      	add	r2, r3
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	699a      	ldr	r2, [r3, #24]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f042 0210 	orr.w	r2, r2, #16
 80015ae:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4618      	mov	r0, r3
 80015b6:	f004 fc5b 	bl	8005e70 <USB_ReadInterrupts>
 80015ba:	4603      	mov	r3, r0
 80015bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80015c0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80015c4:	f040 80a7 	bne.w	8001716 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80015c8:	2300      	movs	r3, #0
 80015ca:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4618      	mov	r0, r3
 80015d2:	f004 fc60 	bl	8005e96 <USB_ReadDevAllOutEpInterrupt>
 80015d6:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80015d8:	e099      	b.n	800170e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80015da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015dc:	f003 0301 	and.w	r3, r3, #1
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	f000 808e 	beq.w	8001702 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015ec:	b2d2      	uxtb	r2, r2
 80015ee:	4611      	mov	r1, r2
 80015f0:	4618      	mov	r0, r3
 80015f2:	f004 fc84 	bl	8005efe <USB_ReadDevOutEPInterrupt>
 80015f6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	f003 0301 	and.w	r3, r3, #1
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d00c      	beq.n	800161c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001604:	015a      	lsls	r2, r3, #5
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	4413      	add	r3, r2
 800160a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800160e:	461a      	mov	r2, r3
 8001610:	2301      	movs	r3, #1
 8001612:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001614:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	f000 fe66 	bl	80022e8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	f003 0308 	and.w	r3, r3, #8
 8001622:	2b00      	cmp	r3, #0
 8001624:	d00c      	beq.n	8001640 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001628:	015a      	lsls	r2, r3, #5
 800162a:	69fb      	ldr	r3, [r7, #28]
 800162c:	4413      	add	r3, r2
 800162e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001632:	461a      	mov	r2, r3
 8001634:	2308      	movs	r3, #8
 8001636:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001638:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800163a:	6878      	ldr	r0, [r7, #4]
 800163c:	f000 fea2 	bl	8002384 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	f003 0310 	and.w	r3, r3, #16
 8001646:	2b00      	cmp	r3, #0
 8001648:	d008      	beq.n	800165c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800164a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800164c:	015a      	lsls	r2, r3, #5
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	4413      	add	r3, r2
 8001652:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001656:	461a      	mov	r2, r3
 8001658:	2310      	movs	r3, #16
 800165a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	f003 0302 	and.w	r3, r3, #2
 8001662:	2b00      	cmp	r3, #0
 8001664:	d030      	beq.n	80016c8 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001666:	6a3b      	ldr	r3, [r7, #32]
 8001668:	695b      	ldr	r3, [r3, #20]
 800166a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800166e:	2b80      	cmp	r3, #128	; 0x80
 8001670:	d109      	bne.n	8001686 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	69fa      	ldr	r2, [r7, #28]
 800167c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001680:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001684:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001686:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001688:	4613      	mov	r3, r2
 800168a:	00db      	lsls	r3, r3, #3
 800168c:	4413      	add	r3, r2
 800168e:	009b      	lsls	r3, r3, #2
 8001690:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001694:	687a      	ldr	r2, [r7, #4]
 8001696:	4413      	add	r3, r2
 8001698:	3304      	adds	r3, #4
 800169a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	78db      	ldrb	r3, [r3, #3]
 80016a0:	2b01      	cmp	r3, #1
 80016a2:	d108      	bne.n	80016b6 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	2200      	movs	r2, #0
 80016a8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80016aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ac:	b2db      	uxtb	r3, r3
 80016ae:	4619      	mov	r1, r3
 80016b0:	6878      	ldr	r0, [r7, #4]
 80016b2:	f009 fa81 	bl	800abb8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80016b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b8:	015a      	lsls	r2, r3, #5
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	4413      	add	r3, r2
 80016be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80016c2:	461a      	mov	r2, r3
 80016c4:	2302      	movs	r3, #2
 80016c6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	f003 0320 	and.w	r3, r3, #32
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d008      	beq.n	80016e4 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80016d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d4:	015a      	lsls	r2, r3, #5
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	4413      	add	r3, r2
 80016da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80016de:	461a      	mov	r2, r3
 80016e0:	2320      	movs	r3, #32
 80016e2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d009      	beq.n	8001702 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80016ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f0:	015a      	lsls	r2, r3, #5
 80016f2:	69fb      	ldr	r3, [r7, #28]
 80016f4:	4413      	add	r3, r2
 80016f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80016fa:	461a      	mov	r2, r3
 80016fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001700:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001704:	3301      	adds	r3, #1
 8001706:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800170a:	085b      	lsrs	r3, r3, #1
 800170c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800170e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001710:	2b00      	cmp	r3, #0
 8001712:	f47f af62 	bne.w	80015da <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4618      	mov	r0, r3
 800171c:	f004 fba8 	bl	8005e70 <USB_ReadInterrupts>
 8001720:	4603      	mov	r3, r0
 8001722:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001726:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800172a:	f040 80a4 	bne.w	8001876 <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4618      	mov	r0, r3
 8001734:	f004 fbc9 	bl	8005eca <USB_ReadDevAllInEpInterrupt>
 8001738:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800173a:	2300      	movs	r3, #0
 800173c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800173e:	e096      	b.n	800186e <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001742:	f003 0301 	and.w	r3, r3, #1
 8001746:	2b00      	cmp	r3, #0
 8001748:	f000 808b 	beq.w	8001862 <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001752:	b2d2      	uxtb	r2, r2
 8001754:	4611      	mov	r1, r2
 8001756:	4618      	mov	r0, r3
 8001758:	f004 fbef 	bl	8005f3a <USB_ReadDevInEPInterrupt>
 800175c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	f003 0301 	and.w	r3, r3, #1
 8001764:	2b00      	cmp	r3, #0
 8001766:	d020      	beq.n	80017aa <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800176a:	f003 030f 	and.w	r3, r3, #15
 800176e:	2201      	movs	r2, #1
 8001770:	fa02 f303 	lsl.w	r3, r2, r3
 8001774:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001776:	69fb      	ldr	r3, [r7, #28]
 8001778:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800177c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	43db      	mvns	r3, r3
 8001782:	69f9      	ldr	r1, [r7, #28]
 8001784:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001788:	4013      	ands	r3, r2
 800178a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800178c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800178e:	015a      	lsls	r2, r3, #5
 8001790:	69fb      	ldr	r3, [r7, #28]
 8001792:	4413      	add	r3, r2
 8001794:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001798:	461a      	mov	r2, r3
 800179a:	2301      	movs	r3, #1
 800179c:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800179e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	4619      	mov	r1, r3
 80017a4:	6878      	ldr	r0, [r7, #4]
 80017a6:	f009 f972 	bl	800aa8e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	f003 0308 	and.w	r3, r3, #8
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d008      	beq.n	80017c6 <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80017b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b6:	015a      	lsls	r2, r3, #5
 80017b8:	69fb      	ldr	r3, [r7, #28]
 80017ba:	4413      	add	r3, r2
 80017bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017c0:	461a      	mov	r2, r3
 80017c2:	2308      	movs	r3, #8
 80017c4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	f003 0310 	and.w	r3, r3, #16
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d008      	beq.n	80017e2 <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80017d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d2:	015a      	lsls	r2, r3, #5
 80017d4:	69fb      	ldr	r3, [r7, #28]
 80017d6:	4413      	add	r3, r2
 80017d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017dc:	461a      	mov	r2, r3
 80017de:	2310      	movs	r3, #16
 80017e0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d008      	beq.n	80017fe <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80017ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ee:	015a      	lsls	r2, r3, #5
 80017f0:	69fb      	ldr	r3, [r7, #28]
 80017f2:	4413      	add	r3, r2
 80017f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017f8:	461a      	mov	r2, r3
 80017fa:	2340      	movs	r3, #64	; 0x40
 80017fc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	f003 0302 	and.w	r3, r3, #2
 8001804:	2b00      	cmp	r3, #0
 8001806:	d023      	beq.n	8001850 <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001808:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800180a:	6a38      	ldr	r0, [r7, #32]
 800180c:	f003 fc86 	bl	800511c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001810:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001812:	4613      	mov	r3, r2
 8001814:	00db      	lsls	r3, r3, #3
 8001816:	4413      	add	r3, r2
 8001818:	009b      	lsls	r3, r3, #2
 800181a:	3338      	adds	r3, #56	; 0x38
 800181c:	687a      	ldr	r2, [r7, #4]
 800181e:	4413      	add	r3, r2
 8001820:	3304      	adds	r3, #4
 8001822:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	78db      	ldrb	r3, [r3, #3]
 8001828:	2b01      	cmp	r3, #1
 800182a:	d108      	bne.n	800183e <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	2200      	movs	r2, #0
 8001830:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001834:	b2db      	uxtb	r3, r3
 8001836:	4619      	mov	r1, r3
 8001838:	6878      	ldr	r0, [r7, #4]
 800183a:	f009 f9cf 	bl	800abdc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800183e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001840:	015a      	lsls	r2, r3, #5
 8001842:	69fb      	ldr	r3, [r7, #28]
 8001844:	4413      	add	r3, r2
 8001846:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800184a:	461a      	mov	r2, r3
 800184c:	2302      	movs	r3, #2
 800184e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001856:	2b00      	cmp	r3, #0
 8001858:	d003      	beq.n	8001862 <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800185a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800185c:	6878      	ldr	r0, [r7, #4]
 800185e:	f000 fcba 	bl	80021d6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001864:	3301      	adds	r3, #1
 8001866:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800186a:	085b      	lsrs	r3, r3, #1
 800186c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800186e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001870:	2b00      	cmp	r3, #0
 8001872:	f47f af65 	bne.w	8001740 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4618      	mov	r0, r3
 800187c:	f004 faf8 	bl	8005e70 <USB_ReadInterrupts>
 8001880:	4603      	mov	r3, r0
 8001882:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001886:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800188a:	d122      	bne.n	80018d2 <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800188c:	69fb      	ldr	r3, [r7, #28]
 800188e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	69fa      	ldr	r2, [r7, #28]
 8001896:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800189a:	f023 0301 	bic.w	r3, r3, #1
 800189e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	d108      	bne.n	80018bc <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2200      	movs	r2, #0
 80018ae:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80018b2:	2100      	movs	r1, #0
 80018b4:	6878      	ldr	r0, [r7, #4]
 80018b6:	f009 fbef 	bl	800b098 <HAL_PCDEx_LPM_Callback>
 80018ba:	e002      	b.n	80018c2 <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80018bc:	6878      	ldr	r0, [r7, #4]
 80018be:	f009 f953 	bl	800ab68 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	695a      	ldr	r2, [r3, #20]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80018d0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4618      	mov	r0, r3
 80018d8:	f004 faca 	bl	8005e70 <USB_ReadInterrupts>
 80018dc:	4603      	mov	r3, r0
 80018de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80018e6:	d112      	bne.n	800190e <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80018e8:	69fb      	ldr	r3, [r7, #28]
 80018ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	f003 0301 	and.w	r3, r3, #1
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	d102      	bne.n	80018fe <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80018f8:	6878      	ldr	r0, [r7, #4]
 80018fa:	f009 f90f 	bl	800ab1c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	695a      	ldr	r2, [r3, #20]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800190c:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4618      	mov	r0, r3
 8001914:	f004 faac 	bl	8005e70 <USB_ReadInterrupts>
 8001918:	4603      	mov	r3, r0
 800191a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800191e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001922:	d121      	bne.n	8001968 <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	695a      	ldr	r2, [r3, #20]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8001932:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800193a:	2b00      	cmp	r3, #0
 800193c:	d111      	bne.n	8001962 <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2201      	movs	r2, #1
 8001942:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800194c:	089b      	lsrs	r3, r3, #2
 800194e:	f003 020f 	and.w	r2, r3, #15
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001958:	2101      	movs	r1, #1
 800195a:	6878      	ldr	r0, [r7, #4]
 800195c:	f009 fb9c 	bl	800b098 <HAL_PCDEx_LPM_Callback>
 8001960:	e002      	b.n	8001968 <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001962:	6878      	ldr	r0, [r7, #4]
 8001964:	f009 f8da 	bl	800ab1c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4618      	mov	r0, r3
 800196e:	f004 fa7f 	bl	8005e70 <USB_ReadInterrupts>
 8001972:	4603      	mov	r3, r0
 8001974:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001978:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800197c:	f040 80b5 	bne.w	8001aea <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001980:	69fb      	ldr	r3, [r7, #28]
 8001982:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	69fa      	ldr	r2, [r7, #28]
 800198a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800198e:	f023 0301 	bic.w	r3, r3, #1
 8001992:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	2110      	movs	r1, #16
 800199a:	4618      	mov	r0, r3
 800199c:	f003 fbbe 	bl	800511c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019a0:	2300      	movs	r3, #0
 80019a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80019a4:	e046      	b.n	8001a34 <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80019a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019a8:	015a      	lsls	r2, r3, #5
 80019aa:	69fb      	ldr	r3, [r7, #28]
 80019ac:	4413      	add	r3, r2
 80019ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80019b2:	461a      	mov	r2, r3
 80019b4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80019b8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80019ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019bc:	015a      	lsls	r2, r3, #5
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	4413      	add	r3, r2
 80019c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019ca:	0151      	lsls	r1, r2, #5
 80019cc:	69fa      	ldr	r2, [r7, #28]
 80019ce:	440a      	add	r2, r1
 80019d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80019d4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80019d8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80019da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019dc:	015a      	lsls	r2, r3, #5
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	4413      	add	r3, r2
 80019e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80019e6:	461a      	mov	r2, r3
 80019e8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80019ec:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80019ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019f0:	015a      	lsls	r2, r3, #5
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	4413      	add	r3, r2
 80019f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019fe:	0151      	lsls	r1, r2, #5
 8001a00:	69fa      	ldr	r2, [r7, #28]
 8001a02:	440a      	add	r2, r1
 8001a04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001a08:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001a0c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a10:	015a      	lsls	r2, r3, #5
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	4413      	add	r3, r2
 8001a16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a1e:	0151      	lsls	r1, r2, #5
 8001a20:	69fa      	ldr	r2, [r7, #28]
 8001a22:	440a      	add	r2, r1
 8001a24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001a28:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001a2c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a30:	3301      	adds	r3, #1
 8001a32:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a3a:	429a      	cmp	r2, r3
 8001a3c:	d3b3      	bcc.n	80019a6 <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a44:	69db      	ldr	r3, [r3, #28]
 8001a46:	69fa      	ldr	r2, [r7, #28]
 8001a48:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a4c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001a50:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d016      	beq.n	8001a88 <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001a64:	69fa      	ldr	r2, [r7, #28]
 8001a66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a6a:	f043 030b 	orr.w	r3, r3, #11
 8001a6e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a7a:	69fa      	ldr	r2, [r7, #28]
 8001a7c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a80:	f043 030b 	orr.w	r3, r3, #11
 8001a84:	6453      	str	r3, [r2, #68]	; 0x44
 8001a86:	e015      	b.n	8001ab4 <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001a88:	69fb      	ldr	r3, [r7, #28]
 8001a8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a8e:	695b      	ldr	r3, [r3, #20]
 8001a90:	69fa      	ldr	r2, [r7, #28]
 8001a92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a96:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001a9a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001a9e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001aa0:	69fb      	ldr	r3, [r7, #28]
 8001aa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001aa6:	691b      	ldr	r3, [r3, #16]
 8001aa8:	69fa      	ldr	r2, [r7, #28]
 8001aaa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001aae:	f043 030b 	orr.w	r3, r3, #11
 8001ab2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	69fa      	ldr	r2, [r7, #28]
 8001abe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ac2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001ac6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	4610      	mov	r0, r2
 8001ad6:	f004 fa8f 	bl	8005ff8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	695a      	ldr	r2, [r3, #20]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001ae8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4618      	mov	r0, r3
 8001af0:	f004 f9be 	bl	8005e70 <USB_ReadInterrupts>
 8001af4:	4603      	mov	r3, r0
 8001af6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001afa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001afe:	d124      	bne.n	8001b4a <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4618      	mov	r0, r3
 8001b06:	f004 fa54 	bl	8005fb2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f003 fb81 	bl	8005216 <USB_GetDevSpeed>
 8001b14:	4603      	mov	r3, r0
 8001b16:	461a      	mov	r2, r3
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681c      	ldr	r4, [r3, #0]
 8001b20:	f001 fb1a 	bl	8003158 <HAL_RCC_GetHCLKFreq>
 8001b24:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001b2a:	b2db      	uxtb	r3, r3
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	4620      	mov	r0, r4
 8001b30:	f003 f8a8 	bl	8004c84 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001b34:	6878      	ldr	r0, [r7, #4]
 8001b36:	f008 ffd2 	bl	800aade <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	695a      	ldr	r2, [r3, #20]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001b48:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f004 f98e 	bl	8005e70 <USB_ReadInterrupts>
 8001b54:	4603      	mov	r3, r0
 8001b56:	f003 0308 	and.w	r3, r3, #8
 8001b5a:	2b08      	cmp	r3, #8
 8001b5c:	d10a      	bne.n	8001b74 <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	f008 ffaf 	bl	800aac2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	695a      	ldr	r2, [r3, #20]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f002 0208 	and.w	r2, r2, #8
 8001b72:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f004 f979 	bl	8005e70 <USB_ReadInterrupts>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b84:	2b80      	cmp	r3, #128	; 0x80
 8001b86:	d122      	bne.n	8001bce <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001b88:	6a3b      	ldr	r3, [r7, #32]
 8001b8a:	699b      	ldr	r3, [r3, #24]
 8001b8c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001b90:	6a3b      	ldr	r3, [r7, #32]
 8001b92:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b94:	2301      	movs	r3, #1
 8001b96:	627b      	str	r3, [r7, #36]	; 0x24
 8001b98:	e014      	b.n	8001bc4 <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001b9a:	6879      	ldr	r1, [r7, #4]
 8001b9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b9e:	4613      	mov	r3, r2
 8001ba0:	00db      	lsls	r3, r3, #3
 8001ba2:	4413      	add	r3, r2
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	440b      	add	r3, r1
 8001ba8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001bac:	781b      	ldrb	r3, [r3, #0]
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d105      	bne.n	8001bbe <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	6878      	ldr	r0, [r7, #4]
 8001bba:	f000 fadb 	bl	8002174 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc0:	3301      	adds	r3, #1
 8001bc2:	627b      	str	r3, [r7, #36]	; 0x24
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	d3e5      	bcc.n	8001b9a <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f004 f94c 	bl	8005e70 <USB_ReadInterrupts>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bde:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001be2:	d13b      	bne.n	8001c5c <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001be4:	2301      	movs	r3, #1
 8001be6:	627b      	str	r3, [r7, #36]	; 0x24
 8001be8:	e02b      	b.n	8001c42 <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bec:	015a      	lsls	r2, r3, #5
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	4413      	add	r3, r2
 8001bf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001bfa:	6879      	ldr	r1, [r7, #4]
 8001bfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bfe:	4613      	mov	r3, r2
 8001c00:	00db      	lsls	r3, r3, #3
 8001c02:	4413      	add	r3, r2
 8001c04:	009b      	lsls	r3, r3, #2
 8001c06:	440b      	add	r3, r1
 8001c08:	3340      	adds	r3, #64	; 0x40
 8001c0a:	781b      	ldrb	r3, [r3, #0]
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	d115      	bne.n	8001c3c <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001c10:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	da12      	bge.n	8001c3c <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001c16:	6879      	ldr	r1, [r7, #4]
 8001c18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c1a:	4613      	mov	r3, r2
 8001c1c:	00db      	lsls	r3, r3, #3
 8001c1e:	4413      	add	r3, r2
 8001c20:	009b      	lsls	r3, r3, #2
 8001c22:	440b      	add	r3, r1
 8001c24:	333f      	adds	r3, #63	; 0x3f
 8001c26:	2201      	movs	r2, #1
 8001c28:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001c32:	b2db      	uxtb	r3, r3
 8001c34:	4619      	mov	r1, r3
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f000 fa9c 	bl	8002174 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c3e:	3301      	adds	r3, #1
 8001c40:	627b      	str	r3, [r7, #36]	; 0x24
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d3ce      	bcc.n	8001bea <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	695a      	ldr	r2, [r3, #20]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001c5a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4618      	mov	r0, r3
 8001c62:	f004 f905 	bl	8005e70 <USB_ReadInterrupts>
 8001c66:	4603      	mov	r3, r0
 8001c68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c6c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001c70:	d155      	bne.n	8001d1e <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001c72:	2301      	movs	r3, #1
 8001c74:	627b      	str	r3, [r7, #36]	; 0x24
 8001c76:	e045      	b.n	8001d04 <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c7a:	015a      	lsls	r2, r3, #5
 8001c7c:	69fb      	ldr	r3, [r7, #28]
 8001c7e:	4413      	add	r3, r2
 8001c80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001c88:	6879      	ldr	r1, [r7, #4]
 8001c8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c8c:	4613      	mov	r3, r2
 8001c8e:	00db      	lsls	r3, r3, #3
 8001c90:	4413      	add	r3, r2
 8001c92:	009b      	lsls	r3, r3, #2
 8001c94:	440b      	add	r3, r1
 8001c96:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d12e      	bne.n	8001cfe <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001ca0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	da2b      	bge.n	8001cfe <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001ca6:	69bb      	ldr	r3, [r7, #24]
 8001ca8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001cb2:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001cb6:	429a      	cmp	r2, r3
 8001cb8:	d121      	bne.n	8001cfe <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001cba:	6879      	ldr	r1, [r7, #4]
 8001cbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cbe:	4613      	mov	r3, r2
 8001cc0:	00db      	lsls	r3, r3, #3
 8001cc2:	4413      	add	r3, r2
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	440b      	add	r3, r1
 8001cc8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001ccc:	2201      	movs	r2, #1
 8001cce:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001cd0:	6a3b      	ldr	r3, [r7, #32]
 8001cd2:	699b      	ldr	r3, [r3, #24]
 8001cd4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001cd8:	6a3b      	ldr	r3, [r7, #32]
 8001cda:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001cdc:	6a3b      	ldr	r3, [r7, #32]
 8001cde:	695b      	ldr	r3, [r3, #20]
 8001ce0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d10a      	bne.n	8001cfe <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001ce8:	69fb      	ldr	r3, [r7, #28]
 8001cea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	69fa      	ldr	r2, [r7, #28]
 8001cf2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001cf6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001cfa:	6053      	str	r3, [r2, #4]
            break;
 8001cfc:	e007      	b.n	8001d0e <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d00:	3301      	adds	r3, #1
 8001d02:	627b      	str	r3, [r7, #36]	; 0x24
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d0a:	429a      	cmp	r2, r3
 8001d0c:	d3b4      	bcc.n	8001c78 <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	695a      	ldr	r2, [r3, #20]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001d1c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4618      	mov	r0, r3
 8001d24:	f004 f8a4 	bl	8005e70 <USB_ReadInterrupts>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001d2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d32:	d10a      	bne.n	8001d4a <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001d34:	6878      	ldr	r0, [r7, #4]
 8001d36:	f008 ff63 	bl	800ac00 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	695a      	ldr	r2, [r3, #20]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001d48:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f004 f88e 	bl	8005e70 <USB_ReadInterrupts>
 8001d54:	4603      	mov	r3, r0
 8001d56:	f003 0304 	and.w	r3, r3, #4
 8001d5a:	2b04      	cmp	r3, #4
 8001d5c:	d115      	bne.n	8001d8a <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001d66:	69bb      	ldr	r3, [r7, #24]
 8001d68:	f003 0304 	and.w	r3, r3, #4
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d002      	beq.n	8001d76 <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001d70:	6878      	ldr	r0, [r7, #4]
 8001d72:	f008 ff53 	bl	800ac1c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	6859      	ldr	r1, [r3, #4]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	69ba      	ldr	r2, [r7, #24]
 8001d82:	430a      	orrs	r2, r1
 8001d84:	605a      	str	r2, [r3, #4]
 8001d86:	e000      	b.n	8001d8a <HAL_PCD_IRQHandler+0x920>
      return;
 8001d88:	bf00      	nop
    }
  }
}
 8001d8a:	3734      	adds	r7, #52	; 0x34
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd90      	pop	{r4, r7, pc}

08001d90 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
 8001d98:	460b      	mov	r3, r1
 8001d9a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001da2:	2b01      	cmp	r3, #1
 8001da4:	d101      	bne.n	8001daa <HAL_PCD_SetAddress+0x1a>
 8001da6:	2302      	movs	r3, #2
 8001da8:	e013      	b.n	8001dd2 <HAL_PCD_SetAddress+0x42>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2201      	movs	r2, #1
 8001dae:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	78fa      	ldrb	r2, [r7, #3]
 8001db6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	78fa      	ldrb	r2, [r7, #3]
 8001dc0:	4611      	mov	r1, r2
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f003 ffec 	bl	8005da0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2200      	movs	r2, #0
 8001dcc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001dd0:	2300      	movs	r3, #0
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3708      	adds	r7, #8
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}

08001dda <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001dda:	b580      	push	{r7, lr}
 8001ddc:	b084      	sub	sp, #16
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	6078      	str	r0, [r7, #4]
 8001de2:	4608      	mov	r0, r1
 8001de4:	4611      	mov	r1, r2
 8001de6:	461a      	mov	r2, r3
 8001de8:	4603      	mov	r3, r0
 8001dea:	70fb      	strb	r3, [r7, #3]
 8001dec:	460b      	mov	r3, r1
 8001dee:	803b      	strh	r3, [r7, #0]
 8001df0:	4613      	mov	r3, r2
 8001df2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001df4:	2300      	movs	r3, #0
 8001df6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001df8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	da0f      	bge.n	8001e20 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e00:	78fb      	ldrb	r3, [r7, #3]
 8001e02:	f003 020f 	and.w	r2, r3, #15
 8001e06:	4613      	mov	r3, r2
 8001e08:	00db      	lsls	r3, r3, #3
 8001e0a:	4413      	add	r3, r2
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	3338      	adds	r3, #56	; 0x38
 8001e10:	687a      	ldr	r2, [r7, #4]
 8001e12:	4413      	add	r3, r2
 8001e14:	3304      	adds	r3, #4
 8001e16:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	705a      	strb	r2, [r3, #1]
 8001e1e:	e00f      	b.n	8001e40 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e20:	78fb      	ldrb	r3, [r7, #3]
 8001e22:	f003 020f 	and.w	r2, r3, #15
 8001e26:	4613      	mov	r3, r2
 8001e28:	00db      	lsls	r3, r3, #3
 8001e2a:	4413      	add	r3, r2
 8001e2c:	009b      	lsls	r3, r3, #2
 8001e2e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001e32:	687a      	ldr	r2, [r7, #4]
 8001e34:	4413      	add	r3, r2
 8001e36:	3304      	adds	r3, #4
 8001e38:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001e40:	78fb      	ldrb	r3, [r7, #3]
 8001e42:	f003 030f 	and.w	r3, r3, #15
 8001e46:	b2da      	uxtb	r2, r3
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001e4c:	883a      	ldrh	r2, [r7, #0]
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	78ba      	ldrb	r2, [r7, #2]
 8001e56:	711a      	strb	r2, [r3, #4]

#if defined (USB_OTG_FS)
  if (ep->is_in != 0U)
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	785b      	ldrb	r3, [r3, #1]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d004      	beq.n	8001e6a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	b29a      	uxth	r2, r3
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	835a      	strh	r2, [r3, #26]
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001e6a:	78bb      	ldrb	r3, [r7, #2]
 8001e6c:	2b02      	cmp	r3, #2
 8001e6e:	d102      	bne.n	8001e76 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	2200      	movs	r2, #0
 8001e74:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	d101      	bne.n	8001e84 <HAL_PCD_EP_Open+0xaa>
 8001e80:	2302      	movs	r3, #2
 8001e82:	e00e      	b.n	8001ea2 <HAL_PCD_EP_Open+0xc8>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2201      	movs	r2, #1
 8001e88:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	68f9      	ldr	r1, [r7, #12]
 8001e92:	4618      	mov	r0, r3
 8001e94:	f003 f9de 	bl	8005254 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8001ea0:	7afb      	ldrb	r3, [r7, #11]
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3710      	adds	r7, #16
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}

08001eaa <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001eaa:	b580      	push	{r7, lr}
 8001eac:	b084      	sub	sp, #16
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	6078      	str	r0, [r7, #4]
 8001eb2:	460b      	mov	r3, r1
 8001eb4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001eb6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	da0f      	bge.n	8001ede <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ebe:	78fb      	ldrb	r3, [r7, #3]
 8001ec0:	f003 020f 	and.w	r2, r3, #15
 8001ec4:	4613      	mov	r3, r2
 8001ec6:	00db      	lsls	r3, r3, #3
 8001ec8:	4413      	add	r3, r2
 8001eca:	009b      	lsls	r3, r3, #2
 8001ecc:	3338      	adds	r3, #56	; 0x38
 8001ece:	687a      	ldr	r2, [r7, #4]
 8001ed0:	4413      	add	r3, r2
 8001ed2:	3304      	adds	r3, #4
 8001ed4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	2201      	movs	r2, #1
 8001eda:	705a      	strb	r2, [r3, #1]
 8001edc:	e00f      	b.n	8001efe <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ede:	78fb      	ldrb	r3, [r7, #3]
 8001ee0:	f003 020f 	and.w	r2, r3, #15
 8001ee4:	4613      	mov	r3, r2
 8001ee6:	00db      	lsls	r3, r3, #3
 8001ee8:	4413      	add	r3, r2
 8001eea:	009b      	lsls	r3, r3, #2
 8001eec:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001ef0:	687a      	ldr	r2, [r7, #4]
 8001ef2:	4413      	add	r3, r2
 8001ef4:	3304      	adds	r3, #4
 8001ef6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	2200      	movs	r2, #0
 8001efc:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001efe:	78fb      	ldrb	r3, [r7, #3]
 8001f00:	f003 030f 	and.w	r3, r3, #15
 8001f04:	b2da      	uxtb	r2, r3
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d101      	bne.n	8001f18 <HAL_PCD_EP_Close+0x6e>
 8001f14:	2302      	movs	r3, #2
 8001f16:	e00e      	b.n	8001f36 <HAL_PCD_EP_Close+0x8c>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	68f9      	ldr	r1, [r7, #12]
 8001f26:	4618      	mov	r0, r3
 8001f28:	f003 fa1c 	bl	8005364 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8001f34:	2300      	movs	r3, #0
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3710      	adds	r7, #16
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}

08001f3e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001f3e:	b580      	push	{r7, lr}
 8001f40:	b086      	sub	sp, #24
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	60f8      	str	r0, [r7, #12]
 8001f46:	607a      	str	r2, [r7, #4]
 8001f48:	603b      	str	r3, [r7, #0]
 8001f4a:	460b      	mov	r3, r1
 8001f4c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f4e:	7afb      	ldrb	r3, [r7, #11]
 8001f50:	f003 020f 	and.w	r2, r3, #15
 8001f54:	4613      	mov	r3, r2
 8001f56:	00db      	lsls	r3, r3, #3
 8001f58:	4413      	add	r3, r2
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001f60:	68fa      	ldr	r2, [r7, #12]
 8001f62:	4413      	add	r3, r2
 8001f64:	3304      	adds	r3, #4
 8001f66:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	687a      	ldr	r2, [r7, #4]
 8001f6c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	683a      	ldr	r2, [r7, #0]
 8001f72:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	2200      	movs	r2, #0
 8001f78:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f80:	7afb      	ldrb	r3, [r7, #11]
 8001f82:	f003 030f 	and.w	r3, r3, #15
 8001f86:	b2da      	uxtb	r2, r3
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	6979      	ldr	r1, [r7, #20]
 8001f92:	4618      	mov	r0, r3
 8001f94:	f003 fac2 	bl	800551c <USB_EPStartXfer>

  return HAL_OK;
 8001f98:	2300      	movs	r3, #0
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3718      	adds	r7, #24
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}

08001fa2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001fa2:	b580      	push	{r7, lr}
 8001fa4:	b086      	sub	sp, #24
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	60f8      	str	r0, [r7, #12]
 8001faa:	607a      	str	r2, [r7, #4]
 8001fac:	603b      	str	r3, [r7, #0]
 8001fae:	460b      	mov	r3, r1
 8001fb0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fb2:	7afb      	ldrb	r3, [r7, #11]
 8001fb4:	f003 020f 	and.w	r2, r3, #15
 8001fb8:	4613      	mov	r3, r2
 8001fba:	00db      	lsls	r3, r3, #3
 8001fbc:	4413      	add	r3, r2
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	3338      	adds	r3, #56	; 0x38
 8001fc2:	68fa      	ldr	r2, [r7, #12]
 8001fc4:	4413      	add	r3, r2
 8001fc6:	3304      	adds	r3, #4
 8001fc8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	687a      	ldr	r2, [r7, #4]
 8001fce:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	683a      	ldr	r2, [r7, #0]
 8001fd4:	611a      	str	r2, [r3, #16]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	2201      	movs	r2, #1
 8001fe0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001fe2:	7afb      	ldrb	r3, [r7, #11]
 8001fe4:	f003 030f 	and.w	r3, r3, #15
 8001fe8:	b2da      	uxtb	r2, r3
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	6979      	ldr	r1, [r7, #20]
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f003 fa91 	bl	800551c <USB_EPStartXfer>

  return HAL_OK;
 8001ffa:	2300      	movs	r3, #0
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	3718      	adds	r7, #24
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}

08002004 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b084      	sub	sp, #16
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
 800200c:	460b      	mov	r3, r1
 800200e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002010:	78fb      	ldrb	r3, [r7, #3]
 8002012:	f003 020f 	and.w	r2, r3, #15
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	429a      	cmp	r2, r3
 800201c:	d901      	bls.n	8002022 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e04e      	b.n	80020c0 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002022:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002026:	2b00      	cmp	r3, #0
 8002028:	da0f      	bge.n	800204a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800202a:	78fb      	ldrb	r3, [r7, #3]
 800202c:	f003 020f 	and.w	r2, r3, #15
 8002030:	4613      	mov	r3, r2
 8002032:	00db      	lsls	r3, r3, #3
 8002034:	4413      	add	r3, r2
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	3338      	adds	r3, #56	; 0x38
 800203a:	687a      	ldr	r2, [r7, #4]
 800203c:	4413      	add	r3, r2
 800203e:	3304      	adds	r3, #4
 8002040:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	2201      	movs	r2, #1
 8002046:	705a      	strb	r2, [r3, #1]
 8002048:	e00d      	b.n	8002066 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800204a:	78fa      	ldrb	r2, [r7, #3]
 800204c:	4613      	mov	r3, r2
 800204e:	00db      	lsls	r3, r3, #3
 8002050:	4413      	add	r3, r2
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002058:	687a      	ldr	r2, [r7, #4]
 800205a:	4413      	add	r3, r2
 800205c:	3304      	adds	r3, #4
 800205e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2200      	movs	r2, #0
 8002064:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	2201      	movs	r2, #1
 800206a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800206c:	78fb      	ldrb	r3, [r7, #3]
 800206e:	f003 030f 	and.w	r3, r3, #15
 8002072:	b2da      	uxtb	r2, r3
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800207e:	2b01      	cmp	r3, #1
 8002080:	d101      	bne.n	8002086 <HAL_PCD_EP_SetStall+0x82>
 8002082:	2302      	movs	r3, #2
 8002084:	e01c      	b.n	80020c0 <HAL_PCD_EP_SetStall+0xbc>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2201      	movs	r2, #1
 800208a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	68f9      	ldr	r1, [r7, #12]
 8002094:	4618      	mov	r0, r3
 8002096:	f003 fdaf 	bl	8005bf8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800209a:	78fb      	ldrb	r3, [r7, #3]
 800209c:	f003 030f 	and.w	r3, r3, #15
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d108      	bne.n	80020b6 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80020ae:	4619      	mov	r1, r3
 80020b0:	4610      	mov	r0, r2
 80020b2:	f003 ffa1 	bl	8005ff8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2200      	movs	r2, #0
 80020ba:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80020be:	2300      	movs	r3, #0
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	3710      	adds	r7, #16
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}

080020c8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b084      	sub	sp, #16
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
 80020d0:	460b      	mov	r3, r1
 80020d2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80020d4:	78fb      	ldrb	r3, [r7, #3]
 80020d6:	f003 020f 	and.w	r2, r3, #15
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	429a      	cmp	r2, r3
 80020e0:	d901      	bls.n	80020e6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e042      	b.n	800216c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80020e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	da0f      	bge.n	800210e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020ee:	78fb      	ldrb	r3, [r7, #3]
 80020f0:	f003 020f 	and.w	r2, r3, #15
 80020f4:	4613      	mov	r3, r2
 80020f6:	00db      	lsls	r3, r3, #3
 80020f8:	4413      	add	r3, r2
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	3338      	adds	r3, #56	; 0x38
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	4413      	add	r3, r2
 8002102:	3304      	adds	r3, #4
 8002104:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	2201      	movs	r2, #1
 800210a:	705a      	strb	r2, [r3, #1]
 800210c:	e00f      	b.n	800212e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800210e:	78fb      	ldrb	r3, [r7, #3]
 8002110:	f003 020f 	and.w	r2, r3, #15
 8002114:	4613      	mov	r3, r2
 8002116:	00db      	lsls	r3, r3, #3
 8002118:	4413      	add	r3, r2
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002120:	687a      	ldr	r2, [r7, #4]
 8002122:	4413      	add	r3, r2
 8002124:	3304      	adds	r3, #4
 8002126:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	2200      	movs	r2, #0
 800212c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	2200      	movs	r2, #0
 8002132:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002134:	78fb      	ldrb	r3, [r7, #3]
 8002136:	f003 030f 	and.w	r3, r3, #15
 800213a:	b2da      	uxtb	r2, r3
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002146:	2b01      	cmp	r3, #1
 8002148:	d101      	bne.n	800214e <HAL_PCD_EP_ClrStall+0x86>
 800214a:	2302      	movs	r3, #2
 800214c:	e00e      	b.n	800216c <HAL_PCD_EP_ClrStall+0xa4>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2201      	movs	r2, #1
 8002152:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	68f9      	ldr	r1, [r7, #12]
 800215c:	4618      	mov	r0, r3
 800215e:	f003 fdb9 	bl	8005cd4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2200      	movs	r2, #0
 8002166:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800216a:	2300      	movs	r3, #0
}
 800216c:	4618      	mov	r0, r3
 800216e:	3710      	adds	r7, #16
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}

08002174 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b084      	sub	sp, #16
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	460b      	mov	r3, r1
 800217e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002180:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002184:	2b00      	cmp	r3, #0
 8002186:	da0c      	bge.n	80021a2 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002188:	78fb      	ldrb	r3, [r7, #3]
 800218a:	f003 020f 	and.w	r2, r3, #15
 800218e:	4613      	mov	r3, r2
 8002190:	00db      	lsls	r3, r3, #3
 8002192:	4413      	add	r3, r2
 8002194:	009b      	lsls	r3, r3, #2
 8002196:	3338      	adds	r3, #56	; 0x38
 8002198:	687a      	ldr	r2, [r7, #4]
 800219a:	4413      	add	r3, r2
 800219c:	3304      	adds	r3, #4
 800219e:	60fb      	str	r3, [r7, #12]
 80021a0:	e00c      	b.n	80021bc <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80021a2:	78fb      	ldrb	r3, [r7, #3]
 80021a4:	f003 020f 	and.w	r2, r3, #15
 80021a8:	4613      	mov	r3, r2
 80021aa:	00db      	lsls	r3, r3, #3
 80021ac:	4413      	add	r3, r2
 80021ae:	009b      	lsls	r3, r3, #2
 80021b0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80021b4:	687a      	ldr	r2, [r7, #4]
 80021b6:	4413      	add	r3, r2
 80021b8:	3304      	adds	r3, #4
 80021ba:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	68f9      	ldr	r1, [r7, #12]
 80021c2:	4618      	mov	r0, r3
 80021c4:	f003 fbdc 	bl	8005980 <USB_EPStopXfer>
 80021c8:	4603      	mov	r3, r0
 80021ca:	72fb      	strb	r3, [r7, #11]

  return ret;
 80021cc:	7afb      	ldrb	r3, [r7, #11]
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3710      	adds	r7, #16
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}

080021d6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80021d6:	b580      	push	{r7, lr}
 80021d8:	b088      	sub	sp, #32
 80021da:	af00      	add	r7, sp, #0
 80021dc:	6078      	str	r0, [r7, #4]
 80021de:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80021ea:	683a      	ldr	r2, [r7, #0]
 80021ec:	4613      	mov	r3, r2
 80021ee:	00db      	lsls	r3, r3, #3
 80021f0:	4413      	add	r3, r2
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	3338      	adds	r3, #56	; 0x38
 80021f6:	687a      	ldr	r2, [r7, #4]
 80021f8:	4413      	add	r3, r2
 80021fa:	3304      	adds	r3, #4
 80021fc:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	695a      	ldr	r2, [r3, #20]
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	691b      	ldr	r3, [r3, #16]
 8002206:	429a      	cmp	r2, r3
 8002208:	d901      	bls.n	800220e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e067      	b.n	80022de <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	691a      	ldr	r2, [r3, #16]
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	695b      	ldr	r3, [r3, #20]
 8002216:	1ad3      	subs	r3, r2, r3
 8002218:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	69fa      	ldr	r2, [r7, #28]
 8002220:	429a      	cmp	r2, r3
 8002222:	d902      	bls.n	800222a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	3303      	adds	r3, #3
 800222e:	089b      	lsrs	r3, r3, #2
 8002230:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002232:	e026      	b.n	8002282 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	691a      	ldr	r2, [r3, #16]
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	695b      	ldr	r3, [r3, #20]
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	69fa      	ldr	r2, [r7, #28]
 8002246:	429a      	cmp	r2, r3
 8002248:	d902      	bls.n	8002250 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002250:	69fb      	ldr	r3, [r7, #28]
 8002252:	3303      	adds	r3, #3
 8002254:	089b      	lsrs	r3, r3, #2
 8002256:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	68d9      	ldr	r1, [r3, #12]
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	b2da      	uxtb	r2, r3
 8002260:	69fb      	ldr	r3, [r7, #28]
 8002262:	b29b      	uxth	r3, r3
 8002264:	6978      	ldr	r0, [r7, #20]
 8002266:	f003 fc35 	bl	8005ad4 <USB_WritePacket>

    ep->xfer_buff  += len;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	68da      	ldr	r2, [r3, #12]
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	441a      	add	r2, r3
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	695a      	ldr	r2, [r3, #20]
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	441a      	add	r2, r3
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	015a      	lsls	r2, r3, #5
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	4413      	add	r3, r2
 800228a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800228e:	699b      	ldr	r3, [r3, #24]
 8002290:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002292:	69ba      	ldr	r2, [r7, #24]
 8002294:	429a      	cmp	r2, r3
 8002296:	d809      	bhi.n	80022ac <PCD_WriteEmptyTxFifo+0xd6>
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	695a      	ldr	r2, [r3, #20]
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d203      	bcs.n	80022ac <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	691b      	ldr	r3, [r3, #16]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d1c3      	bne.n	8002234 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	691a      	ldr	r2, [r3, #16]
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	695b      	ldr	r3, [r3, #20]
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d811      	bhi.n	80022dc <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	f003 030f 	and.w	r3, r3, #15
 80022be:	2201      	movs	r2, #1
 80022c0:	fa02 f303 	lsl.w	r3, r2, r3
 80022c4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	43db      	mvns	r3, r3
 80022d2:	6939      	ldr	r1, [r7, #16]
 80022d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80022d8:	4013      	ands	r3, r2
 80022da:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80022dc:	2300      	movs	r3, #0
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3720      	adds	r7, #32
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
	...

080022e8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b086      	sub	sp, #24
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	333c      	adds	r3, #60	; 0x3c
 8002300:	3304      	adds	r3, #4
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	015a      	lsls	r2, r3, #5
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	4413      	add	r3, r2
 800230e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	4a19      	ldr	r2, [pc, #100]	; (8002380 <PCD_EP_OutXfrComplete_int+0x98>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d124      	bne.n	8002368 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002324:	2b00      	cmp	r3, #0
 8002326:	d00a      	beq.n	800233e <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	015a      	lsls	r2, r3, #5
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	4413      	add	r3, r2
 8002330:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002334:	461a      	mov	r2, r3
 8002336:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800233a:	6093      	str	r3, [r2, #8]
 800233c:	e01a      	b.n	8002374 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	f003 0320 	and.w	r3, r3, #32
 8002344:	2b00      	cmp	r3, #0
 8002346:	d008      	beq.n	800235a <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	015a      	lsls	r2, r3, #5
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	4413      	add	r3, r2
 8002350:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002354:	461a      	mov	r2, r3
 8002356:	2320      	movs	r3, #32
 8002358:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	b2db      	uxtb	r3, r3
 800235e:	4619      	mov	r1, r3
 8002360:	6878      	ldr	r0, [r7, #4]
 8002362:	f008 fb79 	bl	800aa58 <HAL_PCD_DataOutStageCallback>
 8002366:	e005      	b.n	8002374 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	b2db      	uxtb	r3, r3
 800236c:	4619      	mov	r1, r3
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f008 fb72 	bl	800aa58 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8002374:	2300      	movs	r3, #0
}
 8002376:	4618      	mov	r0, r3
 8002378:	3718      	adds	r7, #24
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	4f54310a 	.word	0x4f54310a

08002384 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b086      	sub	sp, #24
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
 800238c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	333c      	adds	r3, #60	; 0x3c
 800239c:	3304      	adds	r3, #4
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	015a      	lsls	r2, r3, #5
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	4413      	add	r3, r2
 80023aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	4a0c      	ldr	r2, [pc, #48]	; (80023e8 <PCD_EP_OutSetupPacket_int+0x64>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d90e      	bls.n	80023d8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d009      	beq.n	80023d8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	015a      	lsls	r2, r3, #5
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	4413      	add	r3, r2
 80023cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023d0:	461a      	mov	r2, r3
 80023d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80023d6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80023d8:	6878      	ldr	r0, [r7, #4]
 80023da:	f008 fb2b 	bl	800aa34 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 80023de:	2300      	movs	r3, #0
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	3718      	adds	r7, #24
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	4f54300a 	.word	0x4f54300a

080023ec <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b085      	sub	sp, #20
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
 80023f4:	460b      	mov	r3, r1
 80023f6:	70fb      	strb	r3, [r7, #3]
 80023f8:	4613      	mov	r3, r2
 80023fa:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002402:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002404:	78fb      	ldrb	r3, [r7, #3]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d107      	bne.n	800241a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800240a:	883b      	ldrh	r3, [r7, #0]
 800240c:	0419      	lsls	r1, r3, #16
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	68ba      	ldr	r2, [r7, #8]
 8002414:	430a      	orrs	r2, r1
 8002416:	629a      	str	r2, [r3, #40]	; 0x28
 8002418:	e028      	b.n	800246c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002420:	0c1b      	lsrs	r3, r3, #16
 8002422:	68ba      	ldr	r2, [r7, #8]
 8002424:	4413      	add	r3, r2
 8002426:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002428:	2300      	movs	r3, #0
 800242a:	73fb      	strb	r3, [r7, #15]
 800242c:	e00d      	b.n	800244a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	7bfb      	ldrb	r3, [r7, #15]
 8002434:	3340      	adds	r3, #64	; 0x40
 8002436:	009b      	lsls	r3, r3, #2
 8002438:	4413      	add	r3, r2
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	0c1b      	lsrs	r3, r3, #16
 800243e:	68ba      	ldr	r2, [r7, #8]
 8002440:	4413      	add	r3, r2
 8002442:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002444:	7bfb      	ldrb	r3, [r7, #15]
 8002446:	3301      	adds	r3, #1
 8002448:	73fb      	strb	r3, [r7, #15]
 800244a:	7bfa      	ldrb	r2, [r7, #15]
 800244c:	78fb      	ldrb	r3, [r7, #3]
 800244e:	3b01      	subs	r3, #1
 8002450:	429a      	cmp	r2, r3
 8002452:	d3ec      	bcc.n	800242e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002454:	883b      	ldrh	r3, [r7, #0]
 8002456:	0418      	lsls	r0, r3, #16
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6819      	ldr	r1, [r3, #0]
 800245c:	78fb      	ldrb	r3, [r7, #3]
 800245e:	3b01      	subs	r3, #1
 8002460:	68ba      	ldr	r2, [r7, #8]
 8002462:	4302      	orrs	r2, r0
 8002464:	3340      	adds	r3, #64	; 0x40
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	440b      	add	r3, r1
 800246a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800246c:	2300      	movs	r3, #0
}
 800246e:	4618      	mov	r0, r3
 8002470:	3714      	adds	r7, #20
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr

0800247a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800247a:	b480      	push	{r7}
 800247c:	b083      	sub	sp, #12
 800247e:	af00      	add	r7, sp, #0
 8002480:	6078      	str	r0, [r7, #4]
 8002482:	460b      	mov	r3, r1
 8002484:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	887a      	ldrh	r2, [r7, #2]
 800248c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800248e:	2300      	movs	r3, #0
}
 8002490:	4618      	mov	r0, r3
 8002492:	370c      	adds	r7, #12
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr

0800249c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800249c:	b480      	push	{r7}
 800249e:	b085      	sub	sp, #20
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2201      	movs	r2, #1
 80024ae:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2200      	movs	r2, #0
 80024b6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	699b      	ldr	r3, [r3, #24]
 80024be:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024ce:	f043 0303 	orr.w	r3, r3, #3
 80024d2:	68fa      	ldr	r2, [r7, #12]
 80024d4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80024d6:	2300      	movs	r3, #0
}
 80024d8:	4618      	mov	r0, r3
 80024da:	3714      	adds	r7, #20
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr

080024e4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80024e4:	b480      	push	{r7}
 80024e6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024e8:	4b05      	ldr	r3, [pc, #20]	; (8002500 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a04      	ldr	r2, [pc, #16]	; (8002500 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80024ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024f2:	6013      	str	r3, [r2, #0]
}
 80024f4:	bf00      	nop
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr
 80024fe:	bf00      	nop
 8002500:	40007000 	.word	0x40007000

08002504 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002504:	b480      	push	{r7}
 8002506:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002508:	4b04      	ldr	r3, [pc, #16]	; (800251c <HAL_PWREx_GetVoltageRange+0x18>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002510:	4618      	mov	r0, r3
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr
 800251a:	bf00      	nop
 800251c:	40007000 	.word	0x40007000

08002520 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002520:	b480      	push	{r7}
 8002522:	b085      	sub	sp, #20
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800252e:	d130      	bne.n	8002592 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002530:	4b23      	ldr	r3, [pc, #140]	; (80025c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002538:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800253c:	d038      	beq.n	80025b0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800253e:	4b20      	ldr	r3, [pc, #128]	; (80025c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002546:	4a1e      	ldr	r2, [pc, #120]	; (80025c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002548:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800254c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800254e:	4b1d      	ldr	r3, [pc, #116]	; (80025c4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	2232      	movs	r2, #50	; 0x32
 8002554:	fb02 f303 	mul.w	r3, r2, r3
 8002558:	4a1b      	ldr	r2, [pc, #108]	; (80025c8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800255a:	fba2 2303 	umull	r2, r3, r2, r3
 800255e:	0c9b      	lsrs	r3, r3, #18
 8002560:	3301      	adds	r3, #1
 8002562:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002564:	e002      	b.n	800256c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	3b01      	subs	r3, #1
 800256a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800256c:	4b14      	ldr	r3, [pc, #80]	; (80025c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800256e:	695b      	ldr	r3, [r3, #20]
 8002570:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002574:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002578:	d102      	bne.n	8002580 <HAL_PWREx_ControlVoltageScaling+0x60>
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d1f2      	bne.n	8002566 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002580:	4b0f      	ldr	r3, [pc, #60]	; (80025c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002582:	695b      	ldr	r3, [r3, #20]
 8002584:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002588:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800258c:	d110      	bne.n	80025b0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	e00f      	b.n	80025b2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002592:	4b0b      	ldr	r3, [pc, #44]	; (80025c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800259a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800259e:	d007      	beq.n	80025b0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80025a0:	4b07      	ldr	r3, [pc, #28]	; (80025c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80025a8:	4a05      	ldr	r2, [pc, #20]	; (80025c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025ae:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80025b0:	2300      	movs	r3, #0
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	3714      	adds	r7, #20
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr
 80025be:	bf00      	nop
 80025c0:	40007000 	.word	0x40007000
 80025c4:	20000000 	.word	0x20000000
 80025c8:	431bde83 	.word	0x431bde83

080025cc <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80025cc:	b480      	push	{r7}
 80025ce:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80025d0:	4b05      	ldr	r3, [pc, #20]	; (80025e8 <HAL_PWREx_EnableVddUSB+0x1c>)
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	4a04      	ldr	r2, [pc, #16]	; (80025e8 <HAL_PWREx_EnableVddUSB+0x1c>)
 80025d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025da:	6053      	str	r3, [r2, #4]
}
 80025dc:	bf00      	nop
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr
 80025e6:	bf00      	nop
 80025e8:	40007000 	.word	0x40007000

080025ec <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80025ec:	b480      	push	{r7}
 80025ee:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80025f0:	4b05      	ldr	r3, [pc, #20]	; (8002608 <HAL_PWREx_EnableVddIO2+0x1c>)
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	4a04      	ldr	r2, [pc, #16]	; (8002608 <HAL_PWREx_EnableVddIO2+0x1c>)
 80025f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025fa:	6053      	str	r3, [r2, #4]
}
 80025fc:	bf00      	nop
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr
 8002606:	bf00      	nop
 8002608:	40007000 	.word	0x40007000

0800260c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b088      	sub	sp, #32
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d102      	bne.n	8002620 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	f000 bc08 	b.w	8002e30 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002620:	4b96      	ldr	r3, [pc, #600]	; (800287c <HAL_RCC_OscConfig+0x270>)
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	f003 030c 	and.w	r3, r3, #12
 8002628:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800262a:	4b94      	ldr	r3, [pc, #592]	; (800287c <HAL_RCC_OscConfig+0x270>)
 800262c:	68db      	ldr	r3, [r3, #12]
 800262e:	f003 0303 	and.w	r3, r3, #3
 8002632:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 0310 	and.w	r3, r3, #16
 800263c:	2b00      	cmp	r3, #0
 800263e:	f000 80e4 	beq.w	800280a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002642:	69bb      	ldr	r3, [r7, #24]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d007      	beq.n	8002658 <HAL_RCC_OscConfig+0x4c>
 8002648:	69bb      	ldr	r3, [r7, #24]
 800264a:	2b0c      	cmp	r3, #12
 800264c:	f040 808b 	bne.w	8002766 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	2b01      	cmp	r3, #1
 8002654:	f040 8087 	bne.w	8002766 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002658:	4b88      	ldr	r3, [pc, #544]	; (800287c <HAL_RCC_OscConfig+0x270>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0302 	and.w	r3, r3, #2
 8002660:	2b00      	cmp	r3, #0
 8002662:	d005      	beq.n	8002670 <HAL_RCC_OscConfig+0x64>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	699b      	ldr	r3, [r3, #24]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d101      	bne.n	8002670 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	e3df      	b.n	8002e30 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6a1a      	ldr	r2, [r3, #32]
 8002674:	4b81      	ldr	r3, [pc, #516]	; (800287c <HAL_RCC_OscConfig+0x270>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 0308 	and.w	r3, r3, #8
 800267c:	2b00      	cmp	r3, #0
 800267e:	d004      	beq.n	800268a <HAL_RCC_OscConfig+0x7e>
 8002680:	4b7e      	ldr	r3, [pc, #504]	; (800287c <HAL_RCC_OscConfig+0x270>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002688:	e005      	b.n	8002696 <HAL_RCC_OscConfig+0x8a>
 800268a:	4b7c      	ldr	r3, [pc, #496]	; (800287c <HAL_RCC_OscConfig+0x270>)
 800268c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002690:	091b      	lsrs	r3, r3, #4
 8002692:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002696:	4293      	cmp	r3, r2
 8002698:	d223      	bcs.n	80026e2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6a1b      	ldr	r3, [r3, #32]
 800269e:	4618      	mov	r0, r3
 80026a0:	f000 fd92 	bl	80031c8 <RCC_SetFlashLatencyFromMSIRange>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d001      	beq.n	80026ae <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e3c0      	b.n	8002e30 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026ae:	4b73      	ldr	r3, [pc, #460]	; (800287c <HAL_RCC_OscConfig+0x270>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a72      	ldr	r2, [pc, #456]	; (800287c <HAL_RCC_OscConfig+0x270>)
 80026b4:	f043 0308 	orr.w	r3, r3, #8
 80026b8:	6013      	str	r3, [r2, #0]
 80026ba:	4b70      	ldr	r3, [pc, #448]	; (800287c <HAL_RCC_OscConfig+0x270>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6a1b      	ldr	r3, [r3, #32]
 80026c6:	496d      	ldr	r1, [pc, #436]	; (800287c <HAL_RCC_OscConfig+0x270>)
 80026c8:	4313      	orrs	r3, r2
 80026ca:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026cc:	4b6b      	ldr	r3, [pc, #428]	; (800287c <HAL_RCC_OscConfig+0x270>)
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	69db      	ldr	r3, [r3, #28]
 80026d8:	021b      	lsls	r3, r3, #8
 80026da:	4968      	ldr	r1, [pc, #416]	; (800287c <HAL_RCC_OscConfig+0x270>)
 80026dc:	4313      	orrs	r3, r2
 80026de:	604b      	str	r3, [r1, #4]
 80026e0:	e025      	b.n	800272e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026e2:	4b66      	ldr	r3, [pc, #408]	; (800287c <HAL_RCC_OscConfig+0x270>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a65      	ldr	r2, [pc, #404]	; (800287c <HAL_RCC_OscConfig+0x270>)
 80026e8:	f043 0308 	orr.w	r3, r3, #8
 80026ec:	6013      	str	r3, [r2, #0]
 80026ee:	4b63      	ldr	r3, [pc, #396]	; (800287c <HAL_RCC_OscConfig+0x270>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6a1b      	ldr	r3, [r3, #32]
 80026fa:	4960      	ldr	r1, [pc, #384]	; (800287c <HAL_RCC_OscConfig+0x270>)
 80026fc:	4313      	orrs	r3, r2
 80026fe:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002700:	4b5e      	ldr	r3, [pc, #376]	; (800287c <HAL_RCC_OscConfig+0x270>)
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	69db      	ldr	r3, [r3, #28]
 800270c:	021b      	lsls	r3, r3, #8
 800270e:	495b      	ldr	r1, [pc, #364]	; (800287c <HAL_RCC_OscConfig+0x270>)
 8002710:	4313      	orrs	r3, r2
 8002712:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002714:	69bb      	ldr	r3, [r7, #24]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d109      	bne.n	800272e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6a1b      	ldr	r3, [r3, #32]
 800271e:	4618      	mov	r0, r3
 8002720:	f000 fd52 	bl	80031c8 <RCC_SetFlashLatencyFromMSIRange>
 8002724:	4603      	mov	r3, r0
 8002726:	2b00      	cmp	r3, #0
 8002728:	d001      	beq.n	800272e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e380      	b.n	8002e30 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800272e:	f000 fc87 	bl	8003040 <HAL_RCC_GetSysClockFreq>
 8002732:	4602      	mov	r2, r0
 8002734:	4b51      	ldr	r3, [pc, #324]	; (800287c <HAL_RCC_OscConfig+0x270>)
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	091b      	lsrs	r3, r3, #4
 800273a:	f003 030f 	and.w	r3, r3, #15
 800273e:	4950      	ldr	r1, [pc, #320]	; (8002880 <HAL_RCC_OscConfig+0x274>)
 8002740:	5ccb      	ldrb	r3, [r1, r3]
 8002742:	f003 031f 	and.w	r3, r3, #31
 8002746:	fa22 f303 	lsr.w	r3, r2, r3
 800274a:	4a4e      	ldr	r2, [pc, #312]	; (8002884 <HAL_RCC_OscConfig+0x278>)
 800274c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800274e:	4b4e      	ldr	r3, [pc, #312]	; (8002888 <HAL_RCC_OscConfig+0x27c>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4618      	mov	r0, r3
 8002754:	f7fe f9fa 	bl	8000b4c <HAL_InitTick>
 8002758:	4603      	mov	r3, r0
 800275a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800275c:	7bfb      	ldrb	r3, [r7, #15]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d052      	beq.n	8002808 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002762:	7bfb      	ldrb	r3, [r7, #15]
 8002764:	e364      	b.n	8002e30 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	699b      	ldr	r3, [r3, #24]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d032      	beq.n	80027d4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800276e:	4b43      	ldr	r3, [pc, #268]	; (800287c <HAL_RCC_OscConfig+0x270>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a42      	ldr	r2, [pc, #264]	; (800287c <HAL_RCC_OscConfig+0x270>)
 8002774:	f043 0301 	orr.w	r3, r3, #1
 8002778:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800277a:	f7fe fa37 	bl	8000bec <HAL_GetTick>
 800277e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002780:	e008      	b.n	8002794 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002782:	f7fe fa33 	bl	8000bec <HAL_GetTick>
 8002786:	4602      	mov	r2, r0
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	1ad3      	subs	r3, r2, r3
 800278c:	2b02      	cmp	r3, #2
 800278e:	d901      	bls.n	8002794 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002790:	2303      	movs	r3, #3
 8002792:	e34d      	b.n	8002e30 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002794:	4b39      	ldr	r3, [pc, #228]	; (800287c <HAL_RCC_OscConfig+0x270>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 0302 	and.w	r3, r3, #2
 800279c:	2b00      	cmp	r3, #0
 800279e:	d0f0      	beq.n	8002782 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80027a0:	4b36      	ldr	r3, [pc, #216]	; (800287c <HAL_RCC_OscConfig+0x270>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a35      	ldr	r2, [pc, #212]	; (800287c <HAL_RCC_OscConfig+0x270>)
 80027a6:	f043 0308 	orr.w	r3, r3, #8
 80027aa:	6013      	str	r3, [r2, #0]
 80027ac:	4b33      	ldr	r3, [pc, #204]	; (800287c <HAL_RCC_OscConfig+0x270>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6a1b      	ldr	r3, [r3, #32]
 80027b8:	4930      	ldr	r1, [pc, #192]	; (800287c <HAL_RCC_OscConfig+0x270>)
 80027ba:	4313      	orrs	r3, r2
 80027bc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80027be:	4b2f      	ldr	r3, [pc, #188]	; (800287c <HAL_RCC_OscConfig+0x270>)
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	69db      	ldr	r3, [r3, #28]
 80027ca:	021b      	lsls	r3, r3, #8
 80027cc:	492b      	ldr	r1, [pc, #172]	; (800287c <HAL_RCC_OscConfig+0x270>)
 80027ce:	4313      	orrs	r3, r2
 80027d0:	604b      	str	r3, [r1, #4]
 80027d2:	e01a      	b.n	800280a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80027d4:	4b29      	ldr	r3, [pc, #164]	; (800287c <HAL_RCC_OscConfig+0x270>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a28      	ldr	r2, [pc, #160]	; (800287c <HAL_RCC_OscConfig+0x270>)
 80027da:	f023 0301 	bic.w	r3, r3, #1
 80027de:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80027e0:	f7fe fa04 	bl	8000bec <HAL_GetTick>
 80027e4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80027e6:	e008      	b.n	80027fa <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80027e8:	f7fe fa00 	bl	8000bec <HAL_GetTick>
 80027ec:	4602      	mov	r2, r0
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	2b02      	cmp	r3, #2
 80027f4:	d901      	bls.n	80027fa <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80027f6:	2303      	movs	r3, #3
 80027f8:	e31a      	b.n	8002e30 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80027fa:	4b20      	ldr	r3, [pc, #128]	; (800287c <HAL_RCC_OscConfig+0x270>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 0302 	and.w	r3, r3, #2
 8002802:	2b00      	cmp	r3, #0
 8002804:	d1f0      	bne.n	80027e8 <HAL_RCC_OscConfig+0x1dc>
 8002806:	e000      	b.n	800280a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002808:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 0301 	and.w	r3, r3, #1
 8002812:	2b00      	cmp	r3, #0
 8002814:	d073      	beq.n	80028fe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002816:	69bb      	ldr	r3, [r7, #24]
 8002818:	2b08      	cmp	r3, #8
 800281a:	d005      	beq.n	8002828 <HAL_RCC_OscConfig+0x21c>
 800281c:	69bb      	ldr	r3, [r7, #24]
 800281e:	2b0c      	cmp	r3, #12
 8002820:	d10e      	bne.n	8002840 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	2b03      	cmp	r3, #3
 8002826:	d10b      	bne.n	8002840 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002828:	4b14      	ldr	r3, [pc, #80]	; (800287c <HAL_RCC_OscConfig+0x270>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002830:	2b00      	cmp	r3, #0
 8002832:	d063      	beq.n	80028fc <HAL_RCC_OscConfig+0x2f0>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d15f      	bne.n	80028fc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	e2f7      	b.n	8002e30 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002848:	d106      	bne.n	8002858 <HAL_RCC_OscConfig+0x24c>
 800284a:	4b0c      	ldr	r3, [pc, #48]	; (800287c <HAL_RCC_OscConfig+0x270>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a0b      	ldr	r2, [pc, #44]	; (800287c <HAL_RCC_OscConfig+0x270>)
 8002850:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002854:	6013      	str	r3, [r2, #0]
 8002856:	e025      	b.n	80028a4 <HAL_RCC_OscConfig+0x298>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002860:	d114      	bne.n	800288c <HAL_RCC_OscConfig+0x280>
 8002862:	4b06      	ldr	r3, [pc, #24]	; (800287c <HAL_RCC_OscConfig+0x270>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a05      	ldr	r2, [pc, #20]	; (800287c <HAL_RCC_OscConfig+0x270>)
 8002868:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800286c:	6013      	str	r3, [r2, #0]
 800286e:	4b03      	ldr	r3, [pc, #12]	; (800287c <HAL_RCC_OscConfig+0x270>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a02      	ldr	r2, [pc, #8]	; (800287c <HAL_RCC_OscConfig+0x270>)
 8002874:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002878:	6013      	str	r3, [r2, #0]
 800287a:	e013      	b.n	80028a4 <HAL_RCC_OscConfig+0x298>
 800287c:	40021000 	.word	0x40021000
 8002880:	0800b29c 	.word	0x0800b29c
 8002884:	20000000 	.word	0x20000000
 8002888:	20000004 	.word	0x20000004
 800288c:	4ba0      	ldr	r3, [pc, #640]	; (8002b10 <HAL_RCC_OscConfig+0x504>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a9f      	ldr	r2, [pc, #636]	; (8002b10 <HAL_RCC_OscConfig+0x504>)
 8002892:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002896:	6013      	str	r3, [r2, #0]
 8002898:	4b9d      	ldr	r3, [pc, #628]	; (8002b10 <HAL_RCC_OscConfig+0x504>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a9c      	ldr	r2, [pc, #624]	; (8002b10 <HAL_RCC_OscConfig+0x504>)
 800289e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d013      	beq.n	80028d4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ac:	f7fe f99e 	bl	8000bec <HAL_GetTick>
 80028b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028b2:	e008      	b.n	80028c6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028b4:	f7fe f99a 	bl	8000bec <HAL_GetTick>
 80028b8:	4602      	mov	r2, r0
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	2b64      	cmp	r3, #100	; 0x64
 80028c0:	d901      	bls.n	80028c6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80028c2:	2303      	movs	r3, #3
 80028c4:	e2b4      	b.n	8002e30 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028c6:	4b92      	ldr	r3, [pc, #584]	; (8002b10 <HAL_RCC_OscConfig+0x504>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d0f0      	beq.n	80028b4 <HAL_RCC_OscConfig+0x2a8>
 80028d2:	e014      	b.n	80028fe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028d4:	f7fe f98a 	bl	8000bec <HAL_GetTick>
 80028d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80028da:	e008      	b.n	80028ee <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028dc:	f7fe f986 	bl	8000bec <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	2b64      	cmp	r3, #100	; 0x64
 80028e8:	d901      	bls.n	80028ee <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80028ea:	2303      	movs	r3, #3
 80028ec:	e2a0      	b.n	8002e30 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80028ee:	4b88      	ldr	r3, [pc, #544]	; (8002b10 <HAL_RCC_OscConfig+0x504>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d1f0      	bne.n	80028dc <HAL_RCC_OscConfig+0x2d0>
 80028fa:	e000      	b.n	80028fe <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 0302 	and.w	r3, r3, #2
 8002906:	2b00      	cmp	r3, #0
 8002908:	d060      	beq.n	80029cc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800290a:	69bb      	ldr	r3, [r7, #24]
 800290c:	2b04      	cmp	r3, #4
 800290e:	d005      	beq.n	800291c <HAL_RCC_OscConfig+0x310>
 8002910:	69bb      	ldr	r3, [r7, #24]
 8002912:	2b0c      	cmp	r3, #12
 8002914:	d119      	bne.n	800294a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	2b02      	cmp	r3, #2
 800291a:	d116      	bne.n	800294a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800291c:	4b7c      	ldr	r3, [pc, #496]	; (8002b10 <HAL_RCC_OscConfig+0x504>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002924:	2b00      	cmp	r3, #0
 8002926:	d005      	beq.n	8002934 <HAL_RCC_OscConfig+0x328>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d101      	bne.n	8002934 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	e27d      	b.n	8002e30 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002934:	4b76      	ldr	r3, [pc, #472]	; (8002b10 <HAL_RCC_OscConfig+0x504>)
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	691b      	ldr	r3, [r3, #16]
 8002940:	061b      	lsls	r3, r3, #24
 8002942:	4973      	ldr	r1, [pc, #460]	; (8002b10 <HAL_RCC_OscConfig+0x504>)
 8002944:	4313      	orrs	r3, r2
 8002946:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002948:	e040      	b.n	80029cc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	68db      	ldr	r3, [r3, #12]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d023      	beq.n	800299a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002952:	4b6f      	ldr	r3, [pc, #444]	; (8002b10 <HAL_RCC_OscConfig+0x504>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a6e      	ldr	r2, [pc, #440]	; (8002b10 <HAL_RCC_OscConfig+0x504>)
 8002958:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800295c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800295e:	f7fe f945 	bl	8000bec <HAL_GetTick>
 8002962:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002964:	e008      	b.n	8002978 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002966:	f7fe f941 	bl	8000bec <HAL_GetTick>
 800296a:	4602      	mov	r2, r0
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	1ad3      	subs	r3, r2, r3
 8002970:	2b02      	cmp	r3, #2
 8002972:	d901      	bls.n	8002978 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002974:	2303      	movs	r3, #3
 8002976:	e25b      	b.n	8002e30 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002978:	4b65      	ldr	r3, [pc, #404]	; (8002b10 <HAL_RCC_OscConfig+0x504>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002980:	2b00      	cmp	r3, #0
 8002982:	d0f0      	beq.n	8002966 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002984:	4b62      	ldr	r3, [pc, #392]	; (8002b10 <HAL_RCC_OscConfig+0x504>)
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	691b      	ldr	r3, [r3, #16]
 8002990:	061b      	lsls	r3, r3, #24
 8002992:	495f      	ldr	r1, [pc, #380]	; (8002b10 <HAL_RCC_OscConfig+0x504>)
 8002994:	4313      	orrs	r3, r2
 8002996:	604b      	str	r3, [r1, #4]
 8002998:	e018      	b.n	80029cc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800299a:	4b5d      	ldr	r3, [pc, #372]	; (8002b10 <HAL_RCC_OscConfig+0x504>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a5c      	ldr	r2, [pc, #368]	; (8002b10 <HAL_RCC_OscConfig+0x504>)
 80029a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80029a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029a6:	f7fe f921 	bl	8000bec <HAL_GetTick>
 80029aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80029ac:	e008      	b.n	80029c0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029ae:	f7fe f91d 	bl	8000bec <HAL_GetTick>
 80029b2:	4602      	mov	r2, r0
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	1ad3      	subs	r3, r2, r3
 80029b8:	2b02      	cmp	r3, #2
 80029ba:	d901      	bls.n	80029c0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80029bc:	2303      	movs	r3, #3
 80029be:	e237      	b.n	8002e30 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80029c0:	4b53      	ldr	r3, [pc, #332]	; (8002b10 <HAL_RCC_OscConfig+0x504>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d1f0      	bne.n	80029ae <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 0308 	and.w	r3, r3, #8
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d03c      	beq.n	8002a52 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	695b      	ldr	r3, [r3, #20]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d01c      	beq.n	8002a1a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029e0:	4b4b      	ldr	r3, [pc, #300]	; (8002b10 <HAL_RCC_OscConfig+0x504>)
 80029e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029e6:	4a4a      	ldr	r2, [pc, #296]	; (8002b10 <HAL_RCC_OscConfig+0x504>)
 80029e8:	f043 0301 	orr.w	r3, r3, #1
 80029ec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029f0:	f7fe f8fc 	bl	8000bec <HAL_GetTick>
 80029f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80029f6:	e008      	b.n	8002a0a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029f8:	f7fe f8f8 	bl	8000bec <HAL_GetTick>
 80029fc:	4602      	mov	r2, r0
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	2b02      	cmp	r3, #2
 8002a04:	d901      	bls.n	8002a0a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002a06:	2303      	movs	r3, #3
 8002a08:	e212      	b.n	8002e30 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a0a:	4b41      	ldr	r3, [pc, #260]	; (8002b10 <HAL_RCC_OscConfig+0x504>)
 8002a0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a10:	f003 0302 	and.w	r3, r3, #2
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d0ef      	beq.n	80029f8 <HAL_RCC_OscConfig+0x3ec>
 8002a18:	e01b      	b.n	8002a52 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a1a:	4b3d      	ldr	r3, [pc, #244]	; (8002b10 <HAL_RCC_OscConfig+0x504>)
 8002a1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a20:	4a3b      	ldr	r2, [pc, #236]	; (8002b10 <HAL_RCC_OscConfig+0x504>)
 8002a22:	f023 0301 	bic.w	r3, r3, #1
 8002a26:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a2a:	f7fe f8df 	bl	8000bec <HAL_GetTick>
 8002a2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a30:	e008      	b.n	8002a44 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a32:	f7fe f8db 	bl	8000bec <HAL_GetTick>
 8002a36:	4602      	mov	r2, r0
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	1ad3      	subs	r3, r2, r3
 8002a3c:	2b02      	cmp	r3, #2
 8002a3e:	d901      	bls.n	8002a44 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002a40:	2303      	movs	r3, #3
 8002a42:	e1f5      	b.n	8002e30 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a44:	4b32      	ldr	r3, [pc, #200]	; (8002b10 <HAL_RCC_OscConfig+0x504>)
 8002a46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a4a:	f003 0302 	and.w	r3, r3, #2
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d1ef      	bne.n	8002a32 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 0304 	and.w	r3, r3, #4
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	f000 80a6 	beq.w	8002bac <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a60:	2300      	movs	r3, #0
 8002a62:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002a64:	4b2a      	ldr	r3, [pc, #168]	; (8002b10 <HAL_RCC_OscConfig+0x504>)
 8002a66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d10d      	bne.n	8002a8c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a70:	4b27      	ldr	r3, [pc, #156]	; (8002b10 <HAL_RCC_OscConfig+0x504>)
 8002a72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a74:	4a26      	ldr	r2, [pc, #152]	; (8002b10 <HAL_RCC_OscConfig+0x504>)
 8002a76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a7a:	6593      	str	r3, [r2, #88]	; 0x58
 8002a7c:	4b24      	ldr	r3, [pc, #144]	; (8002b10 <HAL_RCC_OscConfig+0x504>)
 8002a7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a84:	60bb      	str	r3, [r7, #8]
 8002a86:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a8c:	4b21      	ldr	r3, [pc, #132]	; (8002b14 <HAL_RCC_OscConfig+0x508>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d118      	bne.n	8002aca <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a98:	4b1e      	ldr	r3, [pc, #120]	; (8002b14 <HAL_RCC_OscConfig+0x508>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a1d      	ldr	r2, [pc, #116]	; (8002b14 <HAL_RCC_OscConfig+0x508>)
 8002a9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002aa2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002aa4:	f7fe f8a2 	bl	8000bec <HAL_GetTick>
 8002aa8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002aaa:	e008      	b.n	8002abe <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002aac:	f7fe f89e 	bl	8000bec <HAL_GetTick>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	1ad3      	subs	r3, r2, r3
 8002ab6:	2b02      	cmp	r3, #2
 8002ab8:	d901      	bls.n	8002abe <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002aba:	2303      	movs	r3, #3
 8002abc:	e1b8      	b.n	8002e30 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002abe:	4b15      	ldr	r3, [pc, #84]	; (8002b14 <HAL_RCC_OscConfig+0x508>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d0f0      	beq.n	8002aac <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d108      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x4d8>
 8002ad2:	4b0f      	ldr	r3, [pc, #60]	; (8002b10 <HAL_RCC_OscConfig+0x504>)
 8002ad4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ad8:	4a0d      	ldr	r2, [pc, #52]	; (8002b10 <HAL_RCC_OscConfig+0x504>)
 8002ada:	f043 0301 	orr.w	r3, r3, #1
 8002ade:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ae2:	e029      	b.n	8002b38 <HAL_RCC_OscConfig+0x52c>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	2b05      	cmp	r3, #5
 8002aea:	d115      	bne.n	8002b18 <HAL_RCC_OscConfig+0x50c>
 8002aec:	4b08      	ldr	r3, [pc, #32]	; (8002b10 <HAL_RCC_OscConfig+0x504>)
 8002aee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002af2:	4a07      	ldr	r2, [pc, #28]	; (8002b10 <HAL_RCC_OscConfig+0x504>)
 8002af4:	f043 0304 	orr.w	r3, r3, #4
 8002af8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002afc:	4b04      	ldr	r3, [pc, #16]	; (8002b10 <HAL_RCC_OscConfig+0x504>)
 8002afe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b02:	4a03      	ldr	r2, [pc, #12]	; (8002b10 <HAL_RCC_OscConfig+0x504>)
 8002b04:	f043 0301 	orr.w	r3, r3, #1
 8002b08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b0c:	e014      	b.n	8002b38 <HAL_RCC_OscConfig+0x52c>
 8002b0e:	bf00      	nop
 8002b10:	40021000 	.word	0x40021000
 8002b14:	40007000 	.word	0x40007000
 8002b18:	4b9d      	ldr	r3, [pc, #628]	; (8002d90 <HAL_RCC_OscConfig+0x784>)
 8002b1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b1e:	4a9c      	ldr	r2, [pc, #624]	; (8002d90 <HAL_RCC_OscConfig+0x784>)
 8002b20:	f023 0301 	bic.w	r3, r3, #1
 8002b24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b28:	4b99      	ldr	r3, [pc, #612]	; (8002d90 <HAL_RCC_OscConfig+0x784>)
 8002b2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b2e:	4a98      	ldr	r2, [pc, #608]	; (8002d90 <HAL_RCC_OscConfig+0x784>)
 8002b30:	f023 0304 	bic.w	r3, r3, #4
 8002b34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d016      	beq.n	8002b6e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b40:	f7fe f854 	bl	8000bec <HAL_GetTick>
 8002b44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b46:	e00a      	b.n	8002b5e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b48:	f7fe f850 	bl	8000bec <HAL_GetTick>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d901      	bls.n	8002b5e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	e168      	b.n	8002e30 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b5e:	4b8c      	ldr	r3, [pc, #560]	; (8002d90 <HAL_RCC_OscConfig+0x784>)
 8002b60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b64:	f003 0302 	and.w	r3, r3, #2
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d0ed      	beq.n	8002b48 <HAL_RCC_OscConfig+0x53c>
 8002b6c:	e015      	b.n	8002b9a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b6e:	f7fe f83d 	bl	8000bec <HAL_GetTick>
 8002b72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b74:	e00a      	b.n	8002b8c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b76:	f7fe f839 	bl	8000bec <HAL_GetTick>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	1ad3      	subs	r3, r2, r3
 8002b80:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d901      	bls.n	8002b8c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002b88:	2303      	movs	r3, #3
 8002b8a:	e151      	b.n	8002e30 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b8c:	4b80      	ldr	r3, [pc, #512]	; (8002d90 <HAL_RCC_OscConfig+0x784>)
 8002b8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b92:	f003 0302 	and.w	r3, r3, #2
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d1ed      	bne.n	8002b76 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b9a:	7ffb      	ldrb	r3, [r7, #31]
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d105      	bne.n	8002bac <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ba0:	4b7b      	ldr	r3, [pc, #492]	; (8002d90 <HAL_RCC_OscConfig+0x784>)
 8002ba2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ba4:	4a7a      	ldr	r2, [pc, #488]	; (8002d90 <HAL_RCC_OscConfig+0x784>)
 8002ba6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002baa:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 0320 	and.w	r3, r3, #32
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d03c      	beq.n	8002c32 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d01c      	beq.n	8002bfa <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002bc0:	4b73      	ldr	r3, [pc, #460]	; (8002d90 <HAL_RCC_OscConfig+0x784>)
 8002bc2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002bc6:	4a72      	ldr	r2, [pc, #456]	; (8002d90 <HAL_RCC_OscConfig+0x784>)
 8002bc8:	f043 0301 	orr.w	r3, r3, #1
 8002bcc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bd0:	f7fe f80c 	bl	8000bec <HAL_GetTick>
 8002bd4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002bd6:	e008      	b.n	8002bea <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002bd8:	f7fe f808 	bl	8000bec <HAL_GetTick>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	2b02      	cmp	r3, #2
 8002be4:	d901      	bls.n	8002bea <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002be6:	2303      	movs	r3, #3
 8002be8:	e122      	b.n	8002e30 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002bea:	4b69      	ldr	r3, [pc, #420]	; (8002d90 <HAL_RCC_OscConfig+0x784>)
 8002bec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002bf0:	f003 0302 	and.w	r3, r3, #2
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d0ef      	beq.n	8002bd8 <HAL_RCC_OscConfig+0x5cc>
 8002bf8:	e01b      	b.n	8002c32 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002bfa:	4b65      	ldr	r3, [pc, #404]	; (8002d90 <HAL_RCC_OscConfig+0x784>)
 8002bfc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002c00:	4a63      	ldr	r2, [pc, #396]	; (8002d90 <HAL_RCC_OscConfig+0x784>)
 8002c02:	f023 0301 	bic.w	r3, r3, #1
 8002c06:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c0a:	f7fd ffef 	bl	8000bec <HAL_GetTick>
 8002c0e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002c10:	e008      	b.n	8002c24 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c12:	f7fd ffeb 	bl	8000bec <HAL_GetTick>
 8002c16:	4602      	mov	r2, r0
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	1ad3      	subs	r3, r2, r3
 8002c1c:	2b02      	cmp	r3, #2
 8002c1e:	d901      	bls.n	8002c24 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002c20:	2303      	movs	r3, #3
 8002c22:	e105      	b.n	8002e30 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002c24:	4b5a      	ldr	r3, [pc, #360]	; (8002d90 <HAL_RCC_OscConfig+0x784>)
 8002c26:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002c2a:	f003 0302 	and.w	r3, r3, #2
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d1ef      	bne.n	8002c12 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	f000 80f9 	beq.w	8002e2e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c40:	2b02      	cmp	r3, #2
 8002c42:	f040 80cf 	bne.w	8002de4 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002c46:	4b52      	ldr	r3, [pc, #328]	; (8002d90 <HAL_RCC_OscConfig+0x784>)
 8002c48:	68db      	ldr	r3, [r3, #12]
 8002c4a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	f003 0203 	and.w	r2, r3, #3
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c56:	429a      	cmp	r2, r3
 8002c58:	d12c      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c64:	3b01      	subs	r3, #1
 8002c66:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	d123      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c76:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d11b      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c86:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d113      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c96:	085b      	lsrs	r3, r3, #1
 8002c98:	3b01      	subs	r3, #1
 8002c9a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d109      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002caa:	085b      	lsrs	r3, r3, #1
 8002cac:	3b01      	subs	r3, #1
 8002cae:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d071      	beq.n	8002d98 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002cb4:	69bb      	ldr	r3, [r7, #24]
 8002cb6:	2b0c      	cmp	r3, #12
 8002cb8:	d068      	beq.n	8002d8c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002cba:	4b35      	ldr	r3, [pc, #212]	; (8002d90 <HAL_RCC_OscConfig+0x784>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d105      	bne.n	8002cd2 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002cc6:	4b32      	ldr	r3, [pc, #200]	; (8002d90 <HAL_RCC_OscConfig+0x784>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d001      	beq.n	8002cd6 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e0ac      	b.n	8002e30 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002cd6:	4b2e      	ldr	r3, [pc, #184]	; (8002d90 <HAL_RCC_OscConfig+0x784>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a2d      	ldr	r2, [pc, #180]	; (8002d90 <HAL_RCC_OscConfig+0x784>)
 8002cdc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ce0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002ce2:	f7fd ff83 	bl	8000bec <HAL_GetTick>
 8002ce6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ce8:	e008      	b.n	8002cfc <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cea:	f7fd ff7f 	bl	8000bec <HAL_GetTick>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	1ad3      	subs	r3, r2, r3
 8002cf4:	2b02      	cmp	r3, #2
 8002cf6:	d901      	bls.n	8002cfc <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8002cf8:	2303      	movs	r3, #3
 8002cfa:	e099      	b.n	8002e30 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cfc:	4b24      	ldr	r3, [pc, #144]	; (8002d90 <HAL_RCC_OscConfig+0x784>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d1f0      	bne.n	8002cea <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d08:	4b21      	ldr	r3, [pc, #132]	; (8002d90 <HAL_RCC_OscConfig+0x784>)
 8002d0a:	68da      	ldr	r2, [r3, #12]
 8002d0c:	4b21      	ldr	r3, [pc, #132]	; (8002d94 <HAL_RCC_OscConfig+0x788>)
 8002d0e:	4013      	ands	r3, r2
 8002d10:	687a      	ldr	r2, [r7, #4]
 8002d12:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002d14:	687a      	ldr	r2, [r7, #4]
 8002d16:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002d18:	3a01      	subs	r2, #1
 8002d1a:	0112      	lsls	r2, r2, #4
 8002d1c:	4311      	orrs	r1, r2
 8002d1e:	687a      	ldr	r2, [r7, #4]
 8002d20:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002d22:	0212      	lsls	r2, r2, #8
 8002d24:	4311      	orrs	r1, r2
 8002d26:	687a      	ldr	r2, [r7, #4]
 8002d28:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002d2a:	0852      	lsrs	r2, r2, #1
 8002d2c:	3a01      	subs	r2, #1
 8002d2e:	0552      	lsls	r2, r2, #21
 8002d30:	4311      	orrs	r1, r2
 8002d32:	687a      	ldr	r2, [r7, #4]
 8002d34:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002d36:	0852      	lsrs	r2, r2, #1
 8002d38:	3a01      	subs	r2, #1
 8002d3a:	0652      	lsls	r2, r2, #25
 8002d3c:	4311      	orrs	r1, r2
 8002d3e:	687a      	ldr	r2, [r7, #4]
 8002d40:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002d42:	06d2      	lsls	r2, r2, #27
 8002d44:	430a      	orrs	r2, r1
 8002d46:	4912      	ldr	r1, [pc, #72]	; (8002d90 <HAL_RCC_OscConfig+0x784>)
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002d4c:	4b10      	ldr	r3, [pc, #64]	; (8002d90 <HAL_RCC_OscConfig+0x784>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a0f      	ldr	r2, [pc, #60]	; (8002d90 <HAL_RCC_OscConfig+0x784>)
 8002d52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d56:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002d58:	4b0d      	ldr	r3, [pc, #52]	; (8002d90 <HAL_RCC_OscConfig+0x784>)
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	4a0c      	ldr	r2, [pc, #48]	; (8002d90 <HAL_RCC_OscConfig+0x784>)
 8002d5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d62:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002d64:	f7fd ff42 	bl	8000bec <HAL_GetTick>
 8002d68:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d6a:	e008      	b.n	8002d7e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d6c:	f7fd ff3e 	bl	8000bec <HAL_GetTick>
 8002d70:	4602      	mov	r2, r0
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	2b02      	cmp	r3, #2
 8002d78:	d901      	bls.n	8002d7e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	e058      	b.n	8002e30 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d7e:	4b04      	ldr	r3, [pc, #16]	; (8002d90 <HAL_RCC_OscConfig+0x784>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d0f0      	beq.n	8002d6c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d8a:	e050      	b.n	8002e2e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	e04f      	b.n	8002e30 <HAL_RCC_OscConfig+0x824>
 8002d90:	40021000 	.word	0x40021000
 8002d94:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d98:	4b27      	ldr	r3, [pc, #156]	; (8002e38 <HAL_RCC_OscConfig+0x82c>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d144      	bne.n	8002e2e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002da4:	4b24      	ldr	r3, [pc, #144]	; (8002e38 <HAL_RCC_OscConfig+0x82c>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a23      	ldr	r2, [pc, #140]	; (8002e38 <HAL_RCC_OscConfig+0x82c>)
 8002daa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002dae:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002db0:	4b21      	ldr	r3, [pc, #132]	; (8002e38 <HAL_RCC_OscConfig+0x82c>)
 8002db2:	68db      	ldr	r3, [r3, #12]
 8002db4:	4a20      	ldr	r2, [pc, #128]	; (8002e38 <HAL_RCC_OscConfig+0x82c>)
 8002db6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002dba:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002dbc:	f7fd ff16 	bl	8000bec <HAL_GetTick>
 8002dc0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dc2:	e008      	b.n	8002dd6 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dc4:	f7fd ff12 	bl	8000bec <HAL_GetTick>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	2b02      	cmp	r3, #2
 8002dd0:	d901      	bls.n	8002dd6 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	e02c      	b.n	8002e30 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dd6:	4b18      	ldr	r3, [pc, #96]	; (8002e38 <HAL_RCC_OscConfig+0x82c>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d0f0      	beq.n	8002dc4 <HAL_RCC_OscConfig+0x7b8>
 8002de2:	e024      	b.n	8002e2e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002de4:	69bb      	ldr	r3, [r7, #24]
 8002de6:	2b0c      	cmp	r3, #12
 8002de8:	d01f      	beq.n	8002e2a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dea:	4b13      	ldr	r3, [pc, #76]	; (8002e38 <HAL_RCC_OscConfig+0x82c>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a12      	ldr	r2, [pc, #72]	; (8002e38 <HAL_RCC_OscConfig+0x82c>)
 8002df0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002df4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002df6:	f7fd fef9 	bl	8000bec <HAL_GetTick>
 8002dfa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002dfc:	e008      	b.n	8002e10 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dfe:	f7fd fef5 	bl	8000bec <HAL_GetTick>
 8002e02:	4602      	mov	r2, r0
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	1ad3      	subs	r3, r2, r3
 8002e08:	2b02      	cmp	r3, #2
 8002e0a:	d901      	bls.n	8002e10 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8002e0c:	2303      	movs	r3, #3
 8002e0e:	e00f      	b.n	8002e30 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e10:	4b09      	ldr	r3, [pc, #36]	; (8002e38 <HAL_RCC_OscConfig+0x82c>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d1f0      	bne.n	8002dfe <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002e1c:	4b06      	ldr	r3, [pc, #24]	; (8002e38 <HAL_RCC_OscConfig+0x82c>)
 8002e1e:	68da      	ldr	r2, [r3, #12]
 8002e20:	4905      	ldr	r1, [pc, #20]	; (8002e38 <HAL_RCC_OscConfig+0x82c>)
 8002e22:	4b06      	ldr	r3, [pc, #24]	; (8002e3c <HAL_RCC_OscConfig+0x830>)
 8002e24:	4013      	ands	r3, r2
 8002e26:	60cb      	str	r3, [r1, #12]
 8002e28:	e001      	b.n	8002e2e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e000      	b.n	8002e30 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8002e2e:	2300      	movs	r3, #0
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	3720      	adds	r7, #32
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}
 8002e38:	40021000 	.word	0x40021000
 8002e3c:	feeefffc 	.word	0xfeeefffc

08002e40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b084      	sub	sp, #16
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
 8002e48:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d101      	bne.n	8002e54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	e0e7      	b.n	8003024 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e54:	4b75      	ldr	r3, [pc, #468]	; (800302c <HAL_RCC_ClockConfig+0x1ec>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 0307 	and.w	r3, r3, #7
 8002e5c:	683a      	ldr	r2, [r7, #0]
 8002e5e:	429a      	cmp	r2, r3
 8002e60:	d910      	bls.n	8002e84 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e62:	4b72      	ldr	r3, [pc, #456]	; (800302c <HAL_RCC_ClockConfig+0x1ec>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f023 0207 	bic.w	r2, r3, #7
 8002e6a:	4970      	ldr	r1, [pc, #448]	; (800302c <HAL_RCC_ClockConfig+0x1ec>)
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e72:	4b6e      	ldr	r3, [pc, #440]	; (800302c <HAL_RCC_ClockConfig+0x1ec>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 0307 	and.w	r3, r3, #7
 8002e7a:	683a      	ldr	r2, [r7, #0]
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d001      	beq.n	8002e84 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	e0cf      	b.n	8003024 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 0302 	and.w	r3, r3, #2
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d010      	beq.n	8002eb2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	689a      	ldr	r2, [r3, #8]
 8002e94:	4b66      	ldr	r3, [pc, #408]	; (8003030 <HAL_RCC_ClockConfig+0x1f0>)
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d908      	bls.n	8002eb2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ea0:	4b63      	ldr	r3, [pc, #396]	; (8003030 <HAL_RCC_ClockConfig+0x1f0>)
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	4960      	ldr	r1, [pc, #384]	; (8003030 <HAL_RCC_ClockConfig+0x1f0>)
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 0301 	and.w	r3, r3, #1
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d04c      	beq.n	8002f58 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	2b03      	cmp	r3, #3
 8002ec4:	d107      	bne.n	8002ed6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ec6:	4b5a      	ldr	r3, [pc, #360]	; (8003030 <HAL_RCC_ClockConfig+0x1f0>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d121      	bne.n	8002f16 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e0a6      	b.n	8003024 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	2b02      	cmp	r3, #2
 8002edc:	d107      	bne.n	8002eee <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ede:	4b54      	ldr	r3, [pc, #336]	; (8003030 <HAL_RCC_ClockConfig+0x1f0>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d115      	bne.n	8002f16 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e09a      	b.n	8003024 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d107      	bne.n	8002f06 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ef6:	4b4e      	ldr	r3, [pc, #312]	; (8003030 <HAL_RCC_ClockConfig+0x1f0>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 0302 	and.w	r3, r3, #2
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d109      	bne.n	8002f16 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e08e      	b.n	8003024 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f06:	4b4a      	ldr	r3, [pc, #296]	; (8003030 <HAL_RCC_ClockConfig+0x1f0>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d101      	bne.n	8002f16 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e086      	b.n	8003024 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002f16:	4b46      	ldr	r3, [pc, #280]	; (8003030 <HAL_RCC_ClockConfig+0x1f0>)
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	f023 0203 	bic.w	r2, r3, #3
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	4943      	ldr	r1, [pc, #268]	; (8003030 <HAL_RCC_ClockConfig+0x1f0>)
 8002f24:	4313      	orrs	r3, r2
 8002f26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f28:	f7fd fe60 	bl	8000bec <HAL_GetTick>
 8002f2c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f2e:	e00a      	b.n	8002f46 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f30:	f7fd fe5c 	bl	8000bec <HAL_GetTick>
 8002f34:	4602      	mov	r2, r0
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d901      	bls.n	8002f46 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002f42:	2303      	movs	r3, #3
 8002f44:	e06e      	b.n	8003024 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f46:	4b3a      	ldr	r3, [pc, #232]	; (8003030 <HAL_RCC_ClockConfig+0x1f0>)
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	f003 020c 	and.w	r2, r3, #12
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	009b      	lsls	r3, r3, #2
 8002f54:	429a      	cmp	r2, r3
 8002f56:	d1eb      	bne.n	8002f30 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 0302 	and.w	r3, r3, #2
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d010      	beq.n	8002f86 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	689a      	ldr	r2, [r3, #8]
 8002f68:	4b31      	ldr	r3, [pc, #196]	; (8003030 <HAL_RCC_ClockConfig+0x1f0>)
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d208      	bcs.n	8002f86 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f74:	4b2e      	ldr	r3, [pc, #184]	; (8003030 <HAL_RCC_ClockConfig+0x1f0>)
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	492b      	ldr	r1, [pc, #172]	; (8003030 <HAL_RCC_ClockConfig+0x1f0>)
 8002f82:	4313      	orrs	r3, r2
 8002f84:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f86:	4b29      	ldr	r3, [pc, #164]	; (800302c <HAL_RCC_ClockConfig+0x1ec>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 0307 	and.w	r3, r3, #7
 8002f8e:	683a      	ldr	r2, [r7, #0]
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d210      	bcs.n	8002fb6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f94:	4b25      	ldr	r3, [pc, #148]	; (800302c <HAL_RCC_ClockConfig+0x1ec>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f023 0207 	bic.w	r2, r3, #7
 8002f9c:	4923      	ldr	r1, [pc, #140]	; (800302c <HAL_RCC_ClockConfig+0x1ec>)
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fa4:	4b21      	ldr	r3, [pc, #132]	; (800302c <HAL_RCC_ClockConfig+0x1ec>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 0307 	and.w	r3, r3, #7
 8002fac:	683a      	ldr	r2, [r7, #0]
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	d001      	beq.n	8002fb6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e036      	b.n	8003024 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 0304 	and.w	r3, r3, #4
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d008      	beq.n	8002fd4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fc2:	4b1b      	ldr	r3, [pc, #108]	; (8003030 <HAL_RCC_ClockConfig+0x1f0>)
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	68db      	ldr	r3, [r3, #12]
 8002fce:	4918      	ldr	r1, [pc, #96]	; (8003030 <HAL_RCC_ClockConfig+0x1f0>)
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 0308 	and.w	r3, r3, #8
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d009      	beq.n	8002ff4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002fe0:	4b13      	ldr	r3, [pc, #76]	; (8003030 <HAL_RCC_ClockConfig+0x1f0>)
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	691b      	ldr	r3, [r3, #16]
 8002fec:	00db      	lsls	r3, r3, #3
 8002fee:	4910      	ldr	r1, [pc, #64]	; (8003030 <HAL_RCC_ClockConfig+0x1f0>)
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002ff4:	f000 f824 	bl	8003040 <HAL_RCC_GetSysClockFreq>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	4b0d      	ldr	r3, [pc, #52]	; (8003030 <HAL_RCC_ClockConfig+0x1f0>)
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	091b      	lsrs	r3, r3, #4
 8003000:	f003 030f 	and.w	r3, r3, #15
 8003004:	490b      	ldr	r1, [pc, #44]	; (8003034 <HAL_RCC_ClockConfig+0x1f4>)
 8003006:	5ccb      	ldrb	r3, [r1, r3]
 8003008:	f003 031f 	and.w	r3, r3, #31
 800300c:	fa22 f303 	lsr.w	r3, r2, r3
 8003010:	4a09      	ldr	r2, [pc, #36]	; (8003038 <HAL_RCC_ClockConfig+0x1f8>)
 8003012:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003014:	4b09      	ldr	r3, [pc, #36]	; (800303c <HAL_RCC_ClockConfig+0x1fc>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4618      	mov	r0, r3
 800301a:	f7fd fd97 	bl	8000b4c <HAL_InitTick>
 800301e:	4603      	mov	r3, r0
 8003020:	72fb      	strb	r3, [r7, #11]

  return status;
 8003022:	7afb      	ldrb	r3, [r7, #11]
}
 8003024:	4618      	mov	r0, r3
 8003026:	3710      	adds	r7, #16
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}
 800302c:	40022000 	.word	0x40022000
 8003030:	40021000 	.word	0x40021000
 8003034:	0800b29c 	.word	0x0800b29c
 8003038:	20000000 	.word	0x20000000
 800303c:	20000004 	.word	0x20000004

08003040 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003040:	b480      	push	{r7}
 8003042:	b089      	sub	sp, #36	; 0x24
 8003044:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003046:	2300      	movs	r3, #0
 8003048:	61fb      	str	r3, [r7, #28]
 800304a:	2300      	movs	r3, #0
 800304c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800304e:	4b3e      	ldr	r3, [pc, #248]	; (8003148 <HAL_RCC_GetSysClockFreq+0x108>)
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	f003 030c 	and.w	r3, r3, #12
 8003056:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003058:	4b3b      	ldr	r3, [pc, #236]	; (8003148 <HAL_RCC_GetSysClockFreq+0x108>)
 800305a:	68db      	ldr	r3, [r3, #12]
 800305c:	f003 0303 	and.w	r3, r3, #3
 8003060:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d005      	beq.n	8003074 <HAL_RCC_GetSysClockFreq+0x34>
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	2b0c      	cmp	r3, #12
 800306c:	d121      	bne.n	80030b2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	2b01      	cmp	r3, #1
 8003072:	d11e      	bne.n	80030b2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003074:	4b34      	ldr	r3, [pc, #208]	; (8003148 <HAL_RCC_GetSysClockFreq+0x108>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 0308 	and.w	r3, r3, #8
 800307c:	2b00      	cmp	r3, #0
 800307e:	d107      	bne.n	8003090 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003080:	4b31      	ldr	r3, [pc, #196]	; (8003148 <HAL_RCC_GetSysClockFreq+0x108>)
 8003082:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003086:	0a1b      	lsrs	r3, r3, #8
 8003088:	f003 030f 	and.w	r3, r3, #15
 800308c:	61fb      	str	r3, [r7, #28]
 800308e:	e005      	b.n	800309c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003090:	4b2d      	ldr	r3, [pc, #180]	; (8003148 <HAL_RCC_GetSysClockFreq+0x108>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	091b      	lsrs	r3, r3, #4
 8003096:	f003 030f 	and.w	r3, r3, #15
 800309a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800309c:	4a2b      	ldr	r2, [pc, #172]	; (800314c <HAL_RCC_GetSysClockFreq+0x10c>)
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030a4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d10d      	bne.n	80030c8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80030ac:	69fb      	ldr	r3, [r7, #28]
 80030ae:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80030b0:	e00a      	b.n	80030c8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	2b04      	cmp	r3, #4
 80030b6:	d102      	bne.n	80030be <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80030b8:	4b25      	ldr	r3, [pc, #148]	; (8003150 <HAL_RCC_GetSysClockFreq+0x110>)
 80030ba:	61bb      	str	r3, [r7, #24]
 80030bc:	e004      	b.n	80030c8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	2b08      	cmp	r3, #8
 80030c2:	d101      	bne.n	80030c8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80030c4:	4b23      	ldr	r3, [pc, #140]	; (8003154 <HAL_RCC_GetSysClockFreq+0x114>)
 80030c6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	2b0c      	cmp	r3, #12
 80030cc:	d134      	bne.n	8003138 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80030ce:	4b1e      	ldr	r3, [pc, #120]	; (8003148 <HAL_RCC_GetSysClockFreq+0x108>)
 80030d0:	68db      	ldr	r3, [r3, #12]
 80030d2:	f003 0303 	and.w	r3, r3, #3
 80030d6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	2b02      	cmp	r3, #2
 80030dc:	d003      	beq.n	80030e6 <HAL_RCC_GetSysClockFreq+0xa6>
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	2b03      	cmp	r3, #3
 80030e2:	d003      	beq.n	80030ec <HAL_RCC_GetSysClockFreq+0xac>
 80030e4:	e005      	b.n	80030f2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80030e6:	4b1a      	ldr	r3, [pc, #104]	; (8003150 <HAL_RCC_GetSysClockFreq+0x110>)
 80030e8:	617b      	str	r3, [r7, #20]
      break;
 80030ea:	e005      	b.n	80030f8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80030ec:	4b19      	ldr	r3, [pc, #100]	; (8003154 <HAL_RCC_GetSysClockFreq+0x114>)
 80030ee:	617b      	str	r3, [r7, #20]
      break;
 80030f0:	e002      	b.n	80030f8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80030f2:	69fb      	ldr	r3, [r7, #28]
 80030f4:	617b      	str	r3, [r7, #20]
      break;
 80030f6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80030f8:	4b13      	ldr	r3, [pc, #76]	; (8003148 <HAL_RCC_GetSysClockFreq+0x108>)
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	091b      	lsrs	r3, r3, #4
 80030fe:	f003 0307 	and.w	r3, r3, #7
 8003102:	3301      	adds	r3, #1
 8003104:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003106:	4b10      	ldr	r3, [pc, #64]	; (8003148 <HAL_RCC_GetSysClockFreq+0x108>)
 8003108:	68db      	ldr	r3, [r3, #12]
 800310a:	0a1b      	lsrs	r3, r3, #8
 800310c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003110:	697a      	ldr	r2, [r7, #20]
 8003112:	fb03 f202 	mul.w	r2, r3, r2
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	fbb2 f3f3 	udiv	r3, r2, r3
 800311c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800311e:	4b0a      	ldr	r3, [pc, #40]	; (8003148 <HAL_RCC_GetSysClockFreq+0x108>)
 8003120:	68db      	ldr	r3, [r3, #12]
 8003122:	0e5b      	lsrs	r3, r3, #25
 8003124:	f003 0303 	and.w	r3, r3, #3
 8003128:	3301      	adds	r3, #1
 800312a:	005b      	lsls	r3, r3, #1
 800312c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800312e:	697a      	ldr	r2, [r7, #20]
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	fbb2 f3f3 	udiv	r3, r2, r3
 8003136:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003138:	69bb      	ldr	r3, [r7, #24]
}
 800313a:	4618      	mov	r0, r3
 800313c:	3724      	adds	r7, #36	; 0x24
 800313e:	46bd      	mov	sp, r7
 8003140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003144:	4770      	bx	lr
 8003146:	bf00      	nop
 8003148:	40021000 	.word	0x40021000
 800314c:	0800b2b4 	.word	0x0800b2b4
 8003150:	00f42400 	.word	0x00f42400
 8003154:	007a1200 	.word	0x007a1200

08003158 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003158:	b480      	push	{r7}
 800315a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800315c:	4b03      	ldr	r3, [pc, #12]	; (800316c <HAL_RCC_GetHCLKFreq+0x14>)
 800315e:	681b      	ldr	r3, [r3, #0]
}
 8003160:	4618      	mov	r0, r3
 8003162:	46bd      	mov	sp, r7
 8003164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003168:	4770      	bx	lr
 800316a:	bf00      	nop
 800316c:	20000000 	.word	0x20000000

08003170 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003174:	f7ff fff0 	bl	8003158 <HAL_RCC_GetHCLKFreq>
 8003178:	4602      	mov	r2, r0
 800317a:	4b06      	ldr	r3, [pc, #24]	; (8003194 <HAL_RCC_GetPCLK1Freq+0x24>)
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	0a1b      	lsrs	r3, r3, #8
 8003180:	f003 0307 	and.w	r3, r3, #7
 8003184:	4904      	ldr	r1, [pc, #16]	; (8003198 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003186:	5ccb      	ldrb	r3, [r1, r3]
 8003188:	f003 031f 	and.w	r3, r3, #31
 800318c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003190:	4618      	mov	r0, r3
 8003192:	bd80      	pop	{r7, pc}
 8003194:	40021000 	.word	0x40021000
 8003198:	0800b2ac 	.word	0x0800b2ac

0800319c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80031a0:	f7ff ffda 	bl	8003158 <HAL_RCC_GetHCLKFreq>
 80031a4:	4602      	mov	r2, r0
 80031a6:	4b06      	ldr	r3, [pc, #24]	; (80031c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	0adb      	lsrs	r3, r3, #11
 80031ac:	f003 0307 	and.w	r3, r3, #7
 80031b0:	4904      	ldr	r1, [pc, #16]	; (80031c4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80031b2:	5ccb      	ldrb	r3, [r1, r3]
 80031b4:	f003 031f 	and.w	r3, r3, #31
 80031b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031bc:	4618      	mov	r0, r3
 80031be:	bd80      	pop	{r7, pc}
 80031c0:	40021000 	.word	0x40021000
 80031c4:	0800b2ac 	.word	0x0800b2ac

080031c8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b086      	sub	sp, #24
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80031d0:	2300      	movs	r3, #0
 80031d2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80031d4:	4b2a      	ldr	r3, [pc, #168]	; (8003280 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d003      	beq.n	80031e8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80031e0:	f7ff f990 	bl	8002504 <HAL_PWREx_GetVoltageRange>
 80031e4:	6178      	str	r0, [r7, #20]
 80031e6:	e014      	b.n	8003212 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80031e8:	4b25      	ldr	r3, [pc, #148]	; (8003280 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031ec:	4a24      	ldr	r2, [pc, #144]	; (8003280 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031f2:	6593      	str	r3, [r2, #88]	; 0x58
 80031f4:	4b22      	ldr	r3, [pc, #136]	; (8003280 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031fc:	60fb      	str	r3, [r7, #12]
 80031fe:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003200:	f7ff f980 	bl	8002504 <HAL_PWREx_GetVoltageRange>
 8003204:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003206:	4b1e      	ldr	r3, [pc, #120]	; (8003280 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003208:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800320a:	4a1d      	ldr	r2, [pc, #116]	; (8003280 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800320c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003210:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003218:	d10b      	bne.n	8003232 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2b80      	cmp	r3, #128	; 0x80
 800321e:	d919      	bls.n	8003254 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2ba0      	cmp	r3, #160	; 0xa0
 8003224:	d902      	bls.n	800322c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003226:	2302      	movs	r3, #2
 8003228:	613b      	str	r3, [r7, #16]
 800322a:	e013      	b.n	8003254 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800322c:	2301      	movs	r3, #1
 800322e:	613b      	str	r3, [r7, #16]
 8003230:	e010      	b.n	8003254 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2b80      	cmp	r3, #128	; 0x80
 8003236:	d902      	bls.n	800323e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003238:	2303      	movs	r3, #3
 800323a:	613b      	str	r3, [r7, #16]
 800323c:	e00a      	b.n	8003254 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2b80      	cmp	r3, #128	; 0x80
 8003242:	d102      	bne.n	800324a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003244:	2302      	movs	r3, #2
 8003246:	613b      	str	r3, [r7, #16]
 8003248:	e004      	b.n	8003254 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2b70      	cmp	r3, #112	; 0x70
 800324e:	d101      	bne.n	8003254 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003250:	2301      	movs	r3, #1
 8003252:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003254:	4b0b      	ldr	r3, [pc, #44]	; (8003284 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f023 0207 	bic.w	r2, r3, #7
 800325c:	4909      	ldr	r1, [pc, #36]	; (8003284 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	4313      	orrs	r3, r2
 8003262:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003264:	4b07      	ldr	r3, [pc, #28]	; (8003284 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 0307 	and.w	r3, r3, #7
 800326c:	693a      	ldr	r2, [r7, #16]
 800326e:	429a      	cmp	r2, r3
 8003270:	d001      	beq.n	8003276 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	e000      	b.n	8003278 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003276:	2300      	movs	r3, #0
}
 8003278:	4618      	mov	r0, r3
 800327a:	3718      	adds	r7, #24
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}
 8003280:	40021000 	.word	0x40021000
 8003284:	40022000 	.word	0x40022000

08003288 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b086      	sub	sp, #24
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003290:	2300      	movs	r3, #0
 8003292:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003294:	2300      	movs	r3, #0
 8003296:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d041      	beq.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80032a8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80032ac:	d02a      	beq.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80032ae:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80032b2:	d824      	bhi.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x76>
 80032b4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80032b8:	d008      	beq.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80032ba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80032be:	d81e      	bhi.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x76>
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d00a      	beq.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x52>
 80032c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032c8:	d010      	beq.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x64>
 80032ca:	e018      	b.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80032cc:	4b86      	ldr	r3, [pc, #536]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032ce:	68db      	ldr	r3, [r3, #12]
 80032d0:	4a85      	ldr	r2, [pc, #532]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032d6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80032d8:	e015      	b.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	3304      	adds	r3, #4
 80032de:	2100      	movs	r1, #0
 80032e0:	4618      	mov	r0, r3
 80032e2:	f000 fadd 	bl	80038a0 <RCCEx_PLLSAI1_Config>
 80032e6:	4603      	mov	r3, r0
 80032e8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80032ea:	e00c      	b.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	3320      	adds	r3, #32
 80032f0:	2100      	movs	r1, #0
 80032f2:	4618      	mov	r0, r3
 80032f4:	f000 fbc6 	bl	8003a84 <RCCEx_PLLSAI2_Config>
 80032f8:	4603      	mov	r3, r0
 80032fa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80032fc:	e003      	b.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	74fb      	strb	r3, [r7, #19]
      break;
 8003302:	e000      	b.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003304:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003306:	7cfb      	ldrb	r3, [r7, #19]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d10b      	bne.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800330c:	4b76      	ldr	r3, [pc, #472]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800330e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003312:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800331a:	4973      	ldr	r1, [pc, #460]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800331c:	4313      	orrs	r3, r2
 800331e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003322:	e001      	b.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003324:	7cfb      	ldrb	r3, [r7, #19]
 8003326:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003330:	2b00      	cmp	r3, #0
 8003332:	d041      	beq.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003338:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800333c:	d02a      	beq.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800333e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003342:	d824      	bhi.n	800338e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003344:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003348:	d008      	beq.n	800335c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800334a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800334e:	d81e      	bhi.n	800338e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003350:	2b00      	cmp	r3, #0
 8003352:	d00a      	beq.n	800336a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003354:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003358:	d010      	beq.n	800337c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800335a:	e018      	b.n	800338e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800335c:	4b62      	ldr	r3, [pc, #392]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800335e:	68db      	ldr	r3, [r3, #12]
 8003360:	4a61      	ldr	r2, [pc, #388]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003362:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003366:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003368:	e015      	b.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	3304      	adds	r3, #4
 800336e:	2100      	movs	r1, #0
 8003370:	4618      	mov	r0, r3
 8003372:	f000 fa95 	bl	80038a0 <RCCEx_PLLSAI1_Config>
 8003376:	4603      	mov	r3, r0
 8003378:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800337a:	e00c      	b.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	3320      	adds	r3, #32
 8003380:	2100      	movs	r1, #0
 8003382:	4618      	mov	r0, r3
 8003384:	f000 fb7e 	bl	8003a84 <RCCEx_PLLSAI2_Config>
 8003388:	4603      	mov	r3, r0
 800338a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800338c:	e003      	b.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	74fb      	strb	r3, [r7, #19]
      break;
 8003392:	e000      	b.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003394:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003396:	7cfb      	ldrb	r3, [r7, #19]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d10b      	bne.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800339c:	4b52      	ldr	r3, [pc, #328]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800339e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033a2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033aa:	494f      	ldr	r1, [pc, #316]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033ac:	4313      	orrs	r3, r2
 80033ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80033b2:	e001      	b.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033b4:	7cfb      	ldrb	r3, [r7, #19]
 80033b6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	f000 80a0 	beq.w	8003506 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033c6:	2300      	movs	r3, #0
 80033c8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80033ca:	4b47      	ldr	r3, [pc, #284]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d101      	bne.n	80033da <HAL_RCCEx_PeriphCLKConfig+0x152>
 80033d6:	2301      	movs	r3, #1
 80033d8:	e000      	b.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x154>
 80033da:	2300      	movs	r3, #0
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d00d      	beq.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033e0:	4b41      	ldr	r3, [pc, #260]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033e4:	4a40      	ldr	r2, [pc, #256]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033ea:	6593      	str	r3, [r2, #88]	; 0x58
 80033ec:	4b3e      	ldr	r3, [pc, #248]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033f4:	60bb      	str	r3, [r7, #8]
 80033f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033f8:	2301      	movs	r3, #1
 80033fa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80033fc:	4b3b      	ldr	r3, [pc, #236]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a3a      	ldr	r2, [pc, #232]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003402:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003406:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003408:	f7fd fbf0 	bl	8000bec <HAL_GetTick>
 800340c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800340e:	e009      	b.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003410:	f7fd fbec 	bl	8000bec <HAL_GetTick>
 8003414:	4602      	mov	r2, r0
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	2b02      	cmp	r3, #2
 800341c:	d902      	bls.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800341e:	2303      	movs	r3, #3
 8003420:	74fb      	strb	r3, [r7, #19]
        break;
 8003422:	e005      	b.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003424:	4b31      	ldr	r3, [pc, #196]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800342c:	2b00      	cmp	r3, #0
 800342e:	d0ef      	beq.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003430:	7cfb      	ldrb	r3, [r7, #19]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d15c      	bne.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003436:	4b2c      	ldr	r3, [pc, #176]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003438:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800343c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003440:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d01f      	beq.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800344e:	697a      	ldr	r2, [r7, #20]
 8003450:	429a      	cmp	r2, r3
 8003452:	d019      	beq.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003454:	4b24      	ldr	r3, [pc, #144]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003456:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800345a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800345e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003460:	4b21      	ldr	r3, [pc, #132]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003462:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003466:	4a20      	ldr	r2, [pc, #128]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003468:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800346c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003470:	4b1d      	ldr	r3, [pc, #116]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003472:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003476:	4a1c      	ldr	r2, [pc, #112]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003478:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800347c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003480:	4a19      	ldr	r2, [pc, #100]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	f003 0301 	and.w	r3, r3, #1
 800348e:	2b00      	cmp	r3, #0
 8003490:	d016      	beq.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003492:	f7fd fbab 	bl	8000bec <HAL_GetTick>
 8003496:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003498:	e00b      	b.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800349a:	f7fd fba7 	bl	8000bec <HAL_GetTick>
 800349e:	4602      	mov	r2, r0
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	1ad3      	subs	r3, r2, r3
 80034a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d902      	bls.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80034ac:	2303      	movs	r3, #3
 80034ae:	74fb      	strb	r3, [r7, #19]
            break;
 80034b0:	e006      	b.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034b2:	4b0d      	ldr	r3, [pc, #52]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034b8:	f003 0302 	and.w	r3, r3, #2
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d0ec      	beq.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80034c0:	7cfb      	ldrb	r3, [r7, #19]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d10c      	bne.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80034c6:	4b08      	ldr	r3, [pc, #32]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034d6:	4904      	ldr	r1, [pc, #16]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034d8:	4313      	orrs	r3, r2
 80034da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80034de:	e009      	b.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80034e0:	7cfb      	ldrb	r3, [r7, #19]
 80034e2:	74bb      	strb	r3, [r7, #18]
 80034e4:	e006      	b.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80034e6:	bf00      	nop
 80034e8:	40021000 	.word	0x40021000
 80034ec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034f0:	7cfb      	ldrb	r3, [r7, #19]
 80034f2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034f4:	7c7b      	ldrb	r3, [r7, #17]
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d105      	bne.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034fa:	4ba6      	ldr	r3, [pc, #664]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80034fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034fe:	4aa5      	ldr	r2, [pc, #660]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003500:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003504:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f003 0301 	and.w	r3, r3, #1
 800350e:	2b00      	cmp	r3, #0
 8003510:	d00a      	beq.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003512:	4ba0      	ldr	r3, [pc, #640]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003514:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003518:	f023 0203 	bic.w	r2, r3, #3
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003520:	499c      	ldr	r1, [pc, #624]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003522:	4313      	orrs	r3, r2
 8003524:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f003 0302 	and.w	r3, r3, #2
 8003530:	2b00      	cmp	r3, #0
 8003532:	d00a      	beq.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003534:	4b97      	ldr	r3, [pc, #604]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003536:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800353a:	f023 020c 	bic.w	r2, r3, #12
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003542:	4994      	ldr	r1, [pc, #592]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003544:	4313      	orrs	r3, r2
 8003546:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 0304 	and.w	r3, r3, #4
 8003552:	2b00      	cmp	r3, #0
 8003554:	d00a      	beq.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003556:	4b8f      	ldr	r3, [pc, #572]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003558:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800355c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003564:	498b      	ldr	r1, [pc, #556]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003566:	4313      	orrs	r3, r2
 8003568:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f003 0308 	and.w	r3, r3, #8
 8003574:	2b00      	cmp	r3, #0
 8003576:	d00a      	beq.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003578:	4b86      	ldr	r3, [pc, #536]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800357a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800357e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003586:	4983      	ldr	r1, [pc, #524]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003588:	4313      	orrs	r3, r2
 800358a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 0310 	and.w	r3, r3, #16
 8003596:	2b00      	cmp	r3, #0
 8003598:	d00a      	beq.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800359a:	4b7e      	ldr	r3, [pc, #504]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800359c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035a8:	497a      	ldr	r1, [pc, #488]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80035aa:	4313      	orrs	r3, r2
 80035ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f003 0320 	and.w	r3, r3, #32
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d00a      	beq.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80035bc:	4b75      	ldr	r3, [pc, #468]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80035be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035c2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035ca:	4972      	ldr	r1, [pc, #456]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80035cc:	4313      	orrs	r3, r2
 80035ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d00a      	beq.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80035de:	4b6d      	ldr	r3, [pc, #436]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80035e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035e4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035ec:	4969      	ldr	r1, [pc, #420]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80035ee:	4313      	orrs	r3, r2
 80035f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d00a      	beq.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003600:	4b64      	ldr	r3, [pc, #400]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003602:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003606:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800360e:	4961      	ldr	r1, [pc, #388]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003610:	4313      	orrs	r3, r2
 8003612:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800361e:	2b00      	cmp	r3, #0
 8003620:	d00a      	beq.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003622:	4b5c      	ldr	r3, [pc, #368]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003624:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003628:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003630:	4958      	ldr	r1, [pc, #352]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003632:	4313      	orrs	r3, r2
 8003634:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003640:	2b00      	cmp	r3, #0
 8003642:	d00a      	beq.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003644:	4b53      	ldr	r3, [pc, #332]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003646:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800364a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003652:	4950      	ldr	r1, [pc, #320]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003654:	4313      	orrs	r3, r2
 8003656:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003662:	2b00      	cmp	r3, #0
 8003664:	d00a      	beq.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003666:	4b4b      	ldr	r3, [pc, #300]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003668:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800366c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003674:	4947      	ldr	r1, [pc, #284]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003676:	4313      	orrs	r3, r2
 8003678:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003684:	2b00      	cmp	r3, #0
 8003686:	d00a      	beq.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003688:	4b42      	ldr	r3, [pc, #264]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800368a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800368e:	f023 0203 	bic.w	r2, r3, #3
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003696:	493f      	ldr	r1, [pc, #252]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003698:	4313      	orrs	r3, r2
 800369a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d028      	beq.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80036aa:	4b3a      	ldr	r3, [pc, #232]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80036ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036b0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036b8:	4936      	ldr	r1, [pc, #216]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80036ba:	4313      	orrs	r3, r2
 80036bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80036c8:	d106      	bne.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036ca:	4b32      	ldr	r3, [pc, #200]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80036cc:	68db      	ldr	r3, [r3, #12]
 80036ce:	4a31      	ldr	r2, [pc, #196]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80036d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80036d4:	60d3      	str	r3, [r2, #12]
 80036d6:	e011      	b.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036dc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80036e0:	d10c      	bne.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	3304      	adds	r3, #4
 80036e6:	2101      	movs	r1, #1
 80036e8:	4618      	mov	r0, r3
 80036ea:	f000 f8d9 	bl	80038a0 <RCCEx_PLLSAI1_Config>
 80036ee:	4603      	mov	r3, r0
 80036f0:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80036f2:	7cfb      	ldrb	r3, [r7, #19]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d001      	beq.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 80036f8:	7cfb      	ldrb	r3, [r7, #19]
 80036fa:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003704:	2b00      	cmp	r3, #0
 8003706:	d028      	beq.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003708:	4b22      	ldr	r3, [pc, #136]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800370a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800370e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003716:	491f      	ldr	r1, [pc, #124]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003718:	4313      	orrs	r3, r2
 800371a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003722:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003726:	d106      	bne.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003728:	4b1a      	ldr	r3, [pc, #104]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800372a:	68db      	ldr	r3, [r3, #12]
 800372c:	4a19      	ldr	r2, [pc, #100]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800372e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003732:	60d3      	str	r3, [r2, #12]
 8003734:	e011      	b.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800373a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800373e:	d10c      	bne.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	3304      	adds	r3, #4
 8003744:	2101      	movs	r1, #1
 8003746:	4618      	mov	r0, r3
 8003748:	f000 f8aa 	bl	80038a0 <RCCEx_PLLSAI1_Config>
 800374c:	4603      	mov	r3, r0
 800374e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003750:	7cfb      	ldrb	r3, [r7, #19]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d001      	beq.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 8003756:	7cfb      	ldrb	r3, [r7, #19]
 8003758:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003762:	2b00      	cmp	r3, #0
 8003764:	d02a      	beq.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003766:	4b0b      	ldr	r3, [pc, #44]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003768:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800376c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003774:	4907      	ldr	r1, [pc, #28]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003776:	4313      	orrs	r3, r2
 8003778:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003780:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003784:	d108      	bne.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003786:	4b03      	ldr	r3, [pc, #12]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003788:	68db      	ldr	r3, [r3, #12]
 800378a:	4a02      	ldr	r2, [pc, #8]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800378c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003790:	60d3      	str	r3, [r2, #12]
 8003792:	e013      	b.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x534>
 8003794:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800379c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80037a0:	d10c      	bne.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	3304      	adds	r3, #4
 80037a6:	2101      	movs	r1, #1
 80037a8:	4618      	mov	r0, r3
 80037aa:	f000 f879 	bl	80038a0 <RCCEx_PLLSAI1_Config>
 80037ae:	4603      	mov	r3, r0
 80037b0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80037b2:	7cfb      	ldrb	r3, [r7, #19]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d001      	beq.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 80037b8:	7cfb      	ldrb	r3, [r7, #19]
 80037ba:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d02f      	beq.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80037c8:	4b2c      	ldr	r3, [pc, #176]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80037ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037ce:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80037d6:	4929      	ldr	r1, [pc, #164]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80037d8:	4313      	orrs	r3, r2
 80037da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80037e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80037e6:	d10d      	bne.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	3304      	adds	r3, #4
 80037ec:	2102      	movs	r1, #2
 80037ee:	4618      	mov	r0, r3
 80037f0:	f000 f856 	bl	80038a0 <RCCEx_PLLSAI1_Config>
 80037f4:	4603      	mov	r3, r0
 80037f6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80037f8:	7cfb      	ldrb	r3, [r7, #19]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d014      	beq.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 80037fe:	7cfb      	ldrb	r3, [r7, #19]
 8003800:	74bb      	strb	r3, [r7, #18]
 8003802:	e011      	b.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003808:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800380c:	d10c      	bne.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	3320      	adds	r3, #32
 8003812:	2102      	movs	r1, #2
 8003814:	4618      	mov	r0, r3
 8003816:	f000 f935 	bl	8003a84 <RCCEx_PLLSAI2_Config>
 800381a:	4603      	mov	r3, r0
 800381c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800381e:	7cfb      	ldrb	r3, [r7, #19]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d001      	beq.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8003824:	7cfb      	ldrb	r3, [r7, #19]
 8003826:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003830:	2b00      	cmp	r3, #0
 8003832:	d00b      	beq.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003834:	4b11      	ldr	r3, [pc, #68]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003836:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800383a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003844:	490d      	ldr	r1, [pc, #52]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003846:	4313      	orrs	r3, r2
 8003848:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003854:	2b00      	cmp	r3, #0
 8003856:	d00b      	beq.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003858:	4b08      	ldr	r3, [pc, #32]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800385a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800385e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003868:	4904      	ldr	r1, [pc, #16]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800386a:	4313      	orrs	r3, r2
 800386c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003870:	7cbb      	ldrb	r3, [r7, #18]
}
 8003872:	4618      	mov	r0, r3
 8003874:	3718      	adds	r7, #24
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}
 800387a:	bf00      	nop
 800387c:	40021000 	.word	0x40021000

08003880 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003880:	b480      	push	{r7}
 8003882:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003884:	4b05      	ldr	r3, [pc, #20]	; (800389c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a04      	ldr	r2, [pc, #16]	; (800389c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800388a:	f043 0304 	orr.w	r3, r3, #4
 800388e:	6013      	str	r3, [r2, #0]
}
 8003890:	bf00      	nop
 8003892:	46bd      	mov	sp, r7
 8003894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003898:	4770      	bx	lr
 800389a:	bf00      	nop
 800389c:	40021000 	.word	0x40021000

080038a0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b084      	sub	sp, #16
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
 80038a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80038aa:	2300      	movs	r3, #0
 80038ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80038ae:	4b74      	ldr	r3, [pc, #464]	; (8003a80 <RCCEx_PLLSAI1_Config+0x1e0>)
 80038b0:	68db      	ldr	r3, [r3, #12]
 80038b2:	f003 0303 	and.w	r3, r3, #3
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d018      	beq.n	80038ec <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80038ba:	4b71      	ldr	r3, [pc, #452]	; (8003a80 <RCCEx_PLLSAI1_Config+0x1e0>)
 80038bc:	68db      	ldr	r3, [r3, #12]
 80038be:	f003 0203 	and.w	r2, r3, #3
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	429a      	cmp	r2, r3
 80038c8:	d10d      	bne.n	80038e6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
       ||
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d009      	beq.n	80038e6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80038d2:	4b6b      	ldr	r3, [pc, #428]	; (8003a80 <RCCEx_PLLSAI1_Config+0x1e0>)
 80038d4:	68db      	ldr	r3, [r3, #12]
 80038d6:	091b      	lsrs	r3, r3, #4
 80038d8:	f003 0307 	and.w	r3, r3, #7
 80038dc:	1c5a      	adds	r2, r3, #1
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	685b      	ldr	r3, [r3, #4]
       ||
 80038e2:	429a      	cmp	r2, r3
 80038e4:	d047      	beq.n	8003976 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	73fb      	strb	r3, [r7, #15]
 80038ea:	e044      	b.n	8003976 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	2b03      	cmp	r3, #3
 80038f2:	d018      	beq.n	8003926 <RCCEx_PLLSAI1_Config+0x86>
 80038f4:	2b03      	cmp	r3, #3
 80038f6:	d825      	bhi.n	8003944 <RCCEx_PLLSAI1_Config+0xa4>
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d002      	beq.n	8003902 <RCCEx_PLLSAI1_Config+0x62>
 80038fc:	2b02      	cmp	r3, #2
 80038fe:	d009      	beq.n	8003914 <RCCEx_PLLSAI1_Config+0x74>
 8003900:	e020      	b.n	8003944 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003902:	4b5f      	ldr	r3, [pc, #380]	; (8003a80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 0302 	and.w	r3, r3, #2
 800390a:	2b00      	cmp	r3, #0
 800390c:	d11d      	bne.n	800394a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003912:	e01a      	b.n	800394a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003914:	4b5a      	ldr	r3, [pc, #360]	; (8003a80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800391c:	2b00      	cmp	r3, #0
 800391e:	d116      	bne.n	800394e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003924:	e013      	b.n	800394e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003926:	4b56      	ldr	r3, [pc, #344]	; (8003a80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800392e:	2b00      	cmp	r3, #0
 8003930:	d10f      	bne.n	8003952 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003932:	4b53      	ldr	r3, [pc, #332]	; (8003a80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800393a:	2b00      	cmp	r3, #0
 800393c:	d109      	bne.n	8003952 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003942:	e006      	b.n	8003952 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	73fb      	strb	r3, [r7, #15]
      break;
 8003948:	e004      	b.n	8003954 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800394a:	bf00      	nop
 800394c:	e002      	b.n	8003954 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800394e:	bf00      	nop
 8003950:	e000      	b.n	8003954 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003952:	bf00      	nop
    }

    if(status == HAL_OK)
 8003954:	7bfb      	ldrb	r3, [r7, #15]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d10d      	bne.n	8003976 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800395a:	4b49      	ldr	r3, [pc, #292]	; (8003a80 <RCCEx_PLLSAI1_Config+0x1e0>)
 800395c:	68db      	ldr	r3, [r3, #12]
 800395e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6819      	ldr	r1, [r3, #0]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	3b01      	subs	r3, #1
 800396c:	011b      	lsls	r3, r3, #4
 800396e:	430b      	orrs	r3, r1
 8003970:	4943      	ldr	r1, [pc, #268]	; (8003a80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003972:	4313      	orrs	r3, r2
 8003974:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003976:	7bfb      	ldrb	r3, [r7, #15]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d17c      	bne.n	8003a76 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800397c:	4b40      	ldr	r3, [pc, #256]	; (8003a80 <RCCEx_PLLSAI1_Config+0x1e0>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a3f      	ldr	r2, [pc, #252]	; (8003a80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003982:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003986:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003988:	f7fd f930 	bl	8000bec <HAL_GetTick>
 800398c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800398e:	e009      	b.n	80039a4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003990:	f7fd f92c 	bl	8000bec <HAL_GetTick>
 8003994:	4602      	mov	r2, r0
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	1ad3      	subs	r3, r2, r3
 800399a:	2b02      	cmp	r3, #2
 800399c:	d902      	bls.n	80039a4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800399e:	2303      	movs	r3, #3
 80039a0:	73fb      	strb	r3, [r7, #15]
        break;
 80039a2:	e005      	b.n	80039b0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80039a4:	4b36      	ldr	r3, [pc, #216]	; (8003a80 <RCCEx_PLLSAI1_Config+0x1e0>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d1ef      	bne.n	8003990 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80039b0:	7bfb      	ldrb	r3, [r7, #15]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d15f      	bne.n	8003a76 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d110      	bne.n	80039de <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80039bc:	4b30      	ldr	r3, [pc, #192]	; (8003a80 <RCCEx_PLLSAI1_Config+0x1e0>)
 80039be:	691b      	ldr	r3, [r3, #16]
 80039c0:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80039c4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80039c8:	687a      	ldr	r2, [r7, #4]
 80039ca:	6892      	ldr	r2, [r2, #8]
 80039cc:	0211      	lsls	r1, r2, #8
 80039ce:	687a      	ldr	r2, [r7, #4]
 80039d0:	68d2      	ldr	r2, [r2, #12]
 80039d2:	06d2      	lsls	r2, r2, #27
 80039d4:	430a      	orrs	r2, r1
 80039d6:	492a      	ldr	r1, [pc, #168]	; (8003a80 <RCCEx_PLLSAI1_Config+0x1e0>)
 80039d8:	4313      	orrs	r3, r2
 80039da:	610b      	str	r3, [r1, #16]
 80039dc:	e027      	b.n	8003a2e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	d112      	bne.n	8003a0a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80039e4:	4b26      	ldr	r3, [pc, #152]	; (8003a80 <RCCEx_PLLSAI1_Config+0x1e0>)
 80039e6:	691b      	ldr	r3, [r3, #16]
 80039e8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80039ec:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80039f0:	687a      	ldr	r2, [r7, #4]
 80039f2:	6892      	ldr	r2, [r2, #8]
 80039f4:	0211      	lsls	r1, r2, #8
 80039f6:	687a      	ldr	r2, [r7, #4]
 80039f8:	6912      	ldr	r2, [r2, #16]
 80039fa:	0852      	lsrs	r2, r2, #1
 80039fc:	3a01      	subs	r2, #1
 80039fe:	0552      	lsls	r2, r2, #21
 8003a00:	430a      	orrs	r2, r1
 8003a02:	491f      	ldr	r1, [pc, #124]	; (8003a80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a04:	4313      	orrs	r3, r2
 8003a06:	610b      	str	r3, [r1, #16]
 8003a08:	e011      	b.n	8003a2e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a0a:	4b1d      	ldr	r3, [pc, #116]	; (8003a80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a0c:	691b      	ldr	r3, [r3, #16]
 8003a0e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003a12:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003a16:	687a      	ldr	r2, [r7, #4]
 8003a18:	6892      	ldr	r2, [r2, #8]
 8003a1a:	0211      	lsls	r1, r2, #8
 8003a1c:	687a      	ldr	r2, [r7, #4]
 8003a1e:	6952      	ldr	r2, [r2, #20]
 8003a20:	0852      	lsrs	r2, r2, #1
 8003a22:	3a01      	subs	r2, #1
 8003a24:	0652      	lsls	r2, r2, #25
 8003a26:	430a      	orrs	r2, r1
 8003a28:	4915      	ldr	r1, [pc, #84]	; (8003a80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003a2e:	4b14      	ldr	r3, [pc, #80]	; (8003a80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a13      	ldr	r2, [pc, #76]	; (8003a80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a34:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003a38:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a3a:	f7fd f8d7 	bl	8000bec <HAL_GetTick>
 8003a3e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003a40:	e009      	b.n	8003a56 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003a42:	f7fd f8d3 	bl	8000bec <HAL_GetTick>
 8003a46:	4602      	mov	r2, r0
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	1ad3      	subs	r3, r2, r3
 8003a4c:	2b02      	cmp	r3, #2
 8003a4e:	d902      	bls.n	8003a56 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003a50:	2303      	movs	r3, #3
 8003a52:	73fb      	strb	r3, [r7, #15]
          break;
 8003a54:	e005      	b.n	8003a62 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003a56:	4b0a      	ldr	r3, [pc, #40]	; (8003a80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d0ef      	beq.n	8003a42 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003a62:	7bfb      	ldrb	r3, [r7, #15]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d106      	bne.n	8003a76 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003a68:	4b05      	ldr	r3, [pc, #20]	; (8003a80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a6a:	691a      	ldr	r2, [r3, #16]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	699b      	ldr	r3, [r3, #24]
 8003a70:	4903      	ldr	r1, [pc, #12]	; (8003a80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a72:	4313      	orrs	r3, r2
 8003a74:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003a76:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	3710      	adds	r7, #16
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}
 8003a80:	40021000 	.word	0x40021000

08003a84 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b084      	sub	sp, #16
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
 8003a8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003a92:	4b69      	ldr	r3, [pc, #420]	; (8003c38 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003a94:	68db      	ldr	r3, [r3, #12]
 8003a96:	f003 0303 	and.w	r3, r3, #3
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d018      	beq.n	8003ad0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003a9e:	4b66      	ldr	r3, [pc, #408]	; (8003c38 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003aa0:	68db      	ldr	r3, [r3, #12]
 8003aa2:	f003 0203 	and.w	r2, r3, #3
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	429a      	cmp	r2, r3
 8003aac:	d10d      	bne.n	8003aca <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
       ||
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d009      	beq.n	8003aca <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003ab6:	4b60      	ldr	r3, [pc, #384]	; (8003c38 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003ab8:	68db      	ldr	r3, [r3, #12]
 8003aba:	091b      	lsrs	r3, r3, #4
 8003abc:	f003 0307 	and.w	r3, r3, #7
 8003ac0:	1c5a      	adds	r2, r3, #1
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	685b      	ldr	r3, [r3, #4]
       ||
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	d047      	beq.n	8003b5a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	73fb      	strb	r3, [r7, #15]
 8003ace:	e044      	b.n	8003b5a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	2b03      	cmp	r3, #3
 8003ad6:	d018      	beq.n	8003b0a <RCCEx_PLLSAI2_Config+0x86>
 8003ad8:	2b03      	cmp	r3, #3
 8003ada:	d825      	bhi.n	8003b28 <RCCEx_PLLSAI2_Config+0xa4>
 8003adc:	2b01      	cmp	r3, #1
 8003ade:	d002      	beq.n	8003ae6 <RCCEx_PLLSAI2_Config+0x62>
 8003ae0:	2b02      	cmp	r3, #2
 8003ae2:	d009      	beq.n	8003af8 <RCCEx_PLLSAI2_Config+0x74>
 8003ae4:	e020      	b.n	8003b28 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003ae6:	4b54      	ldr	r3, [pc, #336]	; (8003c38 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 0302 	and.w	r3, r3, #2
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d11d      	bne.n	8003b2e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003af6:	e01a      	b.n	8003b2e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003af8:	4b4f      	ldr	r3, [pc, #316]	; (8003c38 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d116      	bne.n	8003b32 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b08:	e013      	b.n	8003b32 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003b0a:	4b4b      	ldr	r3, [pc, #300]	; (8003c38 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d10f      	bne.n	8003b36 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003b16:	4b48      	ldr	r3, [pc, #288]	; (8003c38 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d109      	bne.n	8003b36 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003b26:	e006      	b.n	8003b36 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	73fb      	strb	r3, [r7, #15]
      break;
 8003b2c:	e004      	b.n	8003b38 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003b2e:	bf00      	nop
 8003b30:	e002      	b.n	8003b38 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003b32:	bf00      	nop
 8003b34:	e000      	b.n	8003b38 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003b36:	bf00      	nop
    }

    if(status == HAL_OK)
 8003b38:	7bfb      	ldrb	r3, [r7, #15]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d10d      	bne.n	8003b5a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003b3e:	4b3e      	ldr	r3, [pc, #248]	; (8003c38 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003b40:	68db      	ldr	r3, [r3, #12]
 8003b42:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6819      	ldr	r1, [r3, #0]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	3b01      	subs	r3, #1
 8003b50:	011b      	lsls	r3, r3, #4
 8003b52:	430b      	orrs	r3, r1
 8003b54:	4938      	ldr	r1, [pc, #224]	; (8003c38 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003b56:	4313      	orrs	r3, r2
 8003b58:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003b5a:	7bfb      	ldrb	r3, [r7, #15]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d166      	bne.n	8003c2e <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003b60:	4b35      	ldr	r3, [pc, #212]	; (8003c38 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a34      	ldr	r2, [pc, #208]	; (8003c38 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003b66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b6a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b6c:	f7fd f83e 	bl	8000bec <HAL_GetTick>
 8003b70:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003b72:	e009      	b.n	8003b88 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003b74:	f7fd f83a 	bl	8000bec <HAL_GetTick>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	1ad3      	subs	r3, r2, r3
 8003b7e:	2b02      	cmp	r3, #2
 8003b80:	d902      	bls.n	8003b88 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003b82:	2303      	movs	r3, #3
 8003b84:	73fb      	strb	r3, [r7, #15]
        break;
 8003b86:	e005      	b.n	8003b94 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003b88:	4b2b      	ldr	r3, [pc, #172]	; (8003c38 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d1ef      	bne.n	8003b74 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003b94:	7bfb      	ldrb	r3, [r7, #15]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d149      	bne.n	8003c2e <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d110      	bne.n	8003bc2 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003ba0:	4b25      	ldr	r3, [pc, #148]	; (8003c38 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003ba2:	695b      	ldr	r3, [r3, #20]
 8003ba4:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003ba8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003bac:	687a      	ldr	r2, [r7, #4]
 8003bae:	6892      	ldr	r2, [r2, #8]
 8003bb0:	0211      	lsls	r1, r2, #8
 8003bb2:	687a      	ldr	r2, [r7, #4]
 8003bb4:	68d2      	ldr	r2, [r2, #12]
 8003bb6:	06d2      	lsls	r2, r2, #27
 8003bb8:	430a      	orrs	r2, r1
 8003bba:	491f      	ldr	r1, [pc, #124]	; (8003c38 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	614b      	str	r3, [r1, #20]
 8003bc0:	e011      	b.n	8003be6 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003bc2:	4b1d      	ldr	r3, [pc, #116]	; (8003c38 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003bc4:	695b      	ldr	r3, [r3, #20]
 8003bc6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003bca:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003bce:	687a      	ldr	r2, [r7, #4]
 8003bd0:	6892      	ldr	r2, [r2, #8]
 8003bd2:	0211      	lsls	r1, r2, #8
 8003bd4:	687a      	ldr	r2, [r7, #4]
 8003bd6:	6912      	ldr	r2, [r2, #16]
 8003bd8:	0852      	lsrs	r2, r2, #1
 8003bda:	3a01      	subs	r2, #1
 8003bdc:	0652      	lsls	r2, r2, #25
 8003bde:	430a      	orrs	r2, r1
 8003be0:	4915      	ldr	r1, [pc, #84]	; (8003c38 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003be2:	4313      	orrs	r3, r2
 8003be4:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003be6:	4b14      	ldr	r3, [pc, #80]	; (8003c38 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a13      	ldr	r2, [pc, #76]	; (8003c38 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003bec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bf0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bf2:	f7fc fffb 	bl	8000bec <HAL_GetTick>
 8003bf6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003bf8:	e009      	b.n	8003c0e <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003bfa:	f7fc fff7 	bl	8000bec <HAL_GetTick>
 8003bfe:	4602      	mov	r2, r0
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	1ad3      	subs	r3, r2, r3
 8003c04:	2b02      	cmp	r3, #2
 8003c06:	d902      	bls.n	8003c0e <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8003c08:	2303      	movs	r3, #3
 8003c0a:	73fb      	strb	r3, [r7, #15]
          break;
 8003c0c:	e005      	b.n	8003c1a <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003c0e:	4b0a      	ldr	r3, [pc, #40]	; (8003c38 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d0ef      	beq.n	8003bfa <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8003c1a:	7bfb      	ldrb	r3, [r7, #15]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d106      	bne.n	8003c2e <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003c20:	4b05      	ldr	r3, [pc, #20]	; (8003c38 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003c22:	695a      	ldr	r2, [r3, #20]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	695b      	ldr	r3, [r3, #20]
 8003c28:	4903      	ldr	r1, [pc, #12]	; (8003c38 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003c2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	3710      	adds	r7, #16
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}
 8003c38:	40021000 	.word	0x40021000

08003c3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b082      	sub	sp, #8
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d101      	bne.n	8003c4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e049      	b.n	8003ce2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d106      	bne.n	8003c68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f7fc fed2 	bl	8000a0c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2202      	movs	r2, #2
 8003c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	3304      	adds	r3, #4
 8003c78:	4619      	mov	r1, r3
 8003c7a:	4610      	mov	r0, r2
 8003c7c:	f000 f8fe 	bl	8003e7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2201      	movs	r2, #1
 8003c84:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2201      	movs	r2, #1
 8003c94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2201      	movs	r2, #1
 8003cac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2201      	movs	r2, #1
 8003cbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2201      	movs	r2, #1
 8003ccc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2201      	movs	r2, #1
 8003cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ce0:	2300      	movs	r3, #0
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3708      	adds	r7, #8
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}

08003cea <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003cea:	b580      	push	{r7, lr}
 8003cec:	b084      	sub	sp, #16
 8003cee:	af00      	add	r7, sp, #0
 8003cf0:	6078      	str	r0, [r7, #4]
 8003cf2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cfe:	2b01      	cmp	r3, #1
 8003d00:	d101      	bne.n	8003d06 <HAL_TIM_ConfigClockSource+0x1c>
 8003d02:	2302      	movs	r3, #2
 8003d04:	e0b6      	b.n	8003e74 <HAL_TIM_ConfigClockSource+0x18a>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2201      	movs	r2, #1
 8003d0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2202      	movs	r2, #2
 8003d12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d24:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003d28:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d30:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	68ba      	ldr	r2, [r7, #8]
 8003d38:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d42:	d03e      	beq.n	8003dc2 <HAL_TIM_ConfigClockSource+0xd8>
 8003d44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d48:	f200 8087 	bhi.w	8003e5a <HAL_TIM_ConfigClockSource+0x170>
 8003d4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d50:	f000 8086 	beq.w	8003e60 <HAL_TIM_ConfigClockSource+0x176>
 8003d54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d58:	d87f      	bhi.n	8003e5a <HAL_TIM_ConfigClockSource+0x170>
 8003d5a:	2b70      	cmp	r3, #112	; 0x70
 8003d5c:	d01a      	beq.n	8003d94 <HAL_TIM_ConfigClockSource+0xaa>
 8003d5e:	2b70      	cmp	r3, #112	; 0x70
 8003d60:	d87b      	bhi.n	8003e5a <HAL_TIM_ConfigClockSource+0x170>
 8003d62:	2b60      	cmp	r3, #96	; 0x60
 8003d64:	d050      	beq.n	8003e08 <HAL_TIM_ConfigClockSource+0x11e>
 8003d66:	2b60      	cmp	r3, #96	; 0x60
 8003d68:	d877      	bhi.n	8003e5a <HAL_TIM_ConfigClockSource+0x170>
 8003d6a:	2b50      	cmp	r3, #80	; 0x50
 8003d6c:	d03c      	beq.n	8003de8 <HAL_TIM_ConfigClockSource+0xfe>
 8003d6e:	2b50      	cmp	r3, #80	; 0x50
 8003d70:	d873      	bhi.n	8003e5a <HAL_TIM_ConfigClockSource+0x170>
 8003d72:	2b40      	cmp	r3, #64	; 0x40
 8003d74:	d058      	beq.n	8003e28 <HAL_TIM_ConfigClockSource+0x13e>
 8003d76:	2b40      	cmp	r3, #64	; 0x40
 8003d78:	d86f      	bhi.n	8003e5a <HAL_TIM_ConfigClockSource+0x170>
 8003d7a:	2b30      	cmp	r3, #48	; 0x30
 8003d7c:	d064      	beq.n	8003e48 <HAL_TIM_ConfigClockSource+0x15e>
 8003d7e:	2b30      	cmp	r3, #48	; 0x30
 8003d80:	d86b      	bhi.n	8003e5a <HAL_TIM_ConfigClockSource+0x170>
 8003d82:	2b20      	cmp	r3, #32
 8003d84:	d060      	beq.n	8003e48 <HAL_TIM_ConfigClockSource+0x15e>
 8003d86:	2b20      	cmp	r3, #32
 8003d88:	d867      	bhi.n	8003e5a <HAL_TIM_ConfigClockSource+0x170>
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d05c      	beq.n	8003e48 <HAL_TIM_ConfigClockSource+0x15e>
 8003d8e:	2b10      	cmp	r3, #16
 8003d90:	d05a      	beq.n	8003e48 <HAL_TIM_ConfigClockSource+0x15e>
 8003d92:	e062      	b.n	8003e5a <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003da4:	f000 f97e 	bl	80040a4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003db6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	68ba      	ldr	r2, [r7, #8]
 8003dbe:	609a      	str	r2, [r3, #8]
      break;
 8003dc0:	e04f      	b.n	8003e62 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003dd2:	f000 f967 	bl	80040a4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	689a      	ldr	r2, [r3, #8]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003de4:	609a      	str	r2, [r3, #8]
      break;
 8003de6:	e03c      	b.n	8003e62 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003df4:	461a      	mov	r2, r3
 8003df6:	f000 f8db 	bl	8003fb0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	2150      	movs	r1, #80	; 0x50
 8003e00:	4618      	mov	r0, r3
 8003e02:	f000 f934 	bl	800406e <TIM_ITRx_SetConfig>
      break;
 8003e06:	e02c      	b.n	8003e62 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e14:	461a      	mov	r2, r3
 8003e16:	f000 f8fa 	bl	800400e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	2160      	movs	r1, #96	; 0x60
 8003e20:	4618      	mov	r0, r3
 8003e22:	f000 f924 	bl	800406e <TIM_ITRx_SetConfig>
      break;
 8003e26:	e01c      	b.n	8003e62 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e34:	461a      	mov	r2, r3
 8003e36:	f000 f8bb 	bl	8003fb0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	2140      	movs	r1, #64	; 0x40
 8003e40:	4618      	mov	r0, r3
 8003e42:	f000 f914 	bl	800406e <TIM_ITRx_SetConfig>
      break;
 8003e46:	e00c      	b.n	8003e62 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4619      	mov	r1, r3
 8003e52:	4610      	mov	r0, r2
 8003e54:	f000 f90b 	bl	800406e <TIM_ITRx_SetConfig>
      break;
 8003e58:	e003      	b.n	8003e62 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	73fb      	strb	r3, [r7, #15]
      break;
 8003e5e:	e000      	b.n	8003e62 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003e60:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2201      	movs	r2, #1
 8003e66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003e72:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	3710      	adds	r7, #16
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}

08003e7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b085      	sub	sp, #20
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
 8003e84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	4a40      	ldr	r2, [pc, #256]	; (8003f90 <TIM_Base_SetConfig+0x114>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d013      	beq.n	8003ebc <TIM_Base_SetConfig+0x40>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e9a:	d00f      	beq.n	8003ebc <TIM_Base_SetConfig+0x40>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	4a3d      	ldr	r2, [pc, #244]	; (8003f94 <TIM_Base_SetConfig+0x118>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d00b      	beq.n	8003ebc <TIM_Base_SetConfig+0x40>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	4a3c      	ldr	r2, [pc, #240]	; (8003f98 <TIM_Base_SetConfig+0x11c>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d007      	beq.n	8003ebc <TIM_Base_SetConfig+0x40>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	4a3b      	ldr	r2, [pc, #236]	; (8003f9c <TIM_Base_SetConfig+0x120>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d003      	beq.n	8003ebc <TIM_Base_SetConfig+0x40>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	4a3a      	ldr	r2, [pc, #232]	; (8003fa0 <TIM_Base_SetConfig+0x124>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d108      	bne.n	8003ece <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ec2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	68fa      	ldr	r2, [r7, #12]
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	4a2f      	ldr	r2, [pc, #188]	; (8003f90 <TIM_Base_SetConfig+0x114>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d01f      	beq.n	8003f16 <TIM_Base_SetConfig+0x9a>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003edc:	d01b      	beq.n	8003f16 <TIM_Base_SetConfig+0x9a>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	4a2c      	ldr	r2, [pc, #176]	; (8003f94 <TIM_Base_SetConfig+0x118>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d017      	beq.n	8003f16 <TIM_Base_SetConfig+0x9a>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4a2b      	ldr	r2, [pc, #172]	; (8003f98 <TIM_Base_SetConfig+0x11c>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d013      	beq.n	8003f16 <TIM_Base_SetConfig+0x9a>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	4a2a      	ldr	r2, [pc, #168]	; (8003f9c <TIM_Base_SetConfig+0x120>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d00f      	beq.n	8003f16 <TIM_Base_SetConfig+0x9a>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4a29      	ldr	r2, [pc, #164]	; (8003fa0 <TIM_Base_SetConfig+0x124>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d00b      	beq.n	8003f16 <TIM_Base_SetConfig+0x9a>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	4a28      	ldr	r2, [pc, #160]	; (8003fa4 <TIM_Base_SetConfig+0x128>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d007      	beq.n	8003f16 <TIM_Base_SetConfig+0x9a>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	4a27      	ldr	r2, [pc, #156]	; (8003fa8 <TIM_Base_SetConfig+0x12c>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d003      	beq.n	8003f16 <TIM_Base_SetConfig+0x9a>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	4a26      	ldr	r2, [pc, #152]	; (8003fac <TIM_Base_SetConfig+0x130>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d108      	bne.n	8003f28 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	68db      	ldr	r3, [r3, #12]
 8003f22:	68fa      	ldr	r2, [r7, #12]
 8003f24:	4313      	orrs	r3, r2
 8003f26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	695b      	ldr	r3, [r3, #20]
 8003f32:	4313      	orrs	r3, r2
 8003f34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	68fa      	ldr	r2, [r7, #12]
 8003f3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	689a      	ldr	r2, [r3, #8]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	681a      	ldr	r2, [r3, #0]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	4a10      	ldr	r2, [pc, #64]	; (8003f90 <TIM_Base_SetConfig+0x114>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d00f      	beq.n	8003f74 <TIM_Base_SetConfig+0xf8>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	4a12      	ldr	r2, [pc, #72]	; (8003fa0 <TIM_Base_SetConfig+0x124>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d00b      	beq.n	8003f74 <TIM_Base_SetConfig+0xf8>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	4a11      	ldr	r2, [pc, #68]	; (8003fa4 <TIM_Base_SetConfig+0x128>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d007      	beq.n	8003f74 <TIM_Base_SetConfig+0xf8>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	4a10      	ldr	r2, [pc, #64]	; (8003fa8 <TIM_Base_SetConfig+0x12c>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d003      	beq.n	8003f74 <TIM_Base_SetConfig+0xf8>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	4a0f      	ldr	r2, [pc, #60]	; (8003fac <TIM_Base_SetConfig+0x130>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d103      	bne.n	8003f7c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	691a      	ldr	r2, [r3, #16]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2201      	movs	r2, #1
 8003f80:	615a      	str	r2, [r3, #20]
}
 8003f82:	bf00      	nop
 8003f84:	3714      	adds	r7, #20
 8003f86:	46bd      	mov	sp, r7
 8003f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8c:	4770      	bx	lr
 8003f8e:	bf00      	nop
 8003f90:	40012c00 	.word	0x40012c00
 8003f94:	40000400 	.word	0x40000400
 8003f98:	40000800 	.word	0x40000800
 8003f9c:	40000c00 	.word	0x40000c00
 8003fa0:	40013400 	.word	0x40013400
 8003fa4:	40014000 	.word	0x40014000
 8003fa8:	40014400 	.word	0x40014400
 8003fac:	40014800 	.word	0x40014800

08003fb0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b087      	sub	sp, #28
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	60f8      	str	r0, [r7, #12]
 8003fb8:	60b9      	str	r1, [r7, #8]
 8003fba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	6a1b      	ldr	r3, [r3, #32]
 8003fc0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	6a1b      	ldr	r3, [r3, #32]
 8003fc6:	f023 0201 	bic.w	r2, r3, #1
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	699b      	ldr	r3, [r3, #24]
 8003fd2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003fda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	011b      	lsls	r3, r3, #4
 8003fe0:	693a      	ldr	r2, [r7, #16]
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	f023 030a 	bic.w	r3, r3, #10
 8003fec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003fee:	697a      	ldr	r2, [r7, #20]
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	693a      	ldr	r2, [r7, #16]
 8003ffa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	697a      	ldr	r2, [r7, #20]
 8004000:	621a      	str	r2, [r3, #32]
}
 8004002:	bf00      	nop
 8004004:	371c      	adds	r7, #28
 8004006:	46bd      	mov	sp, r7
 8004008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400c:	4770      	bx	lr

0800400e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800400e:	b480      	push	{r7}
 8004010:	b087      	sub	sp, #28
 8004012:	af00      	add	r7, sp, #0
 8004014:	60f8      	str	r0, [r7, #12]
 8004016:	60b9      	str	r1, [r7, #8]
 8004018:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	6a1b      	ldr	r3, [r3, #32]
 800401e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	6a1b      	ldr	r3, [r3, #32]
 8004024:	f023 0210 	bic.w	r2, r3, #16
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	699b      	ldr	r3, [r3, #24]
 8004030:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004038:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	031b      	lsls	r3, r3, #12
 800403e:	693a      	ldr	r2, [r7, #16]
 8004040:	4313      	orrs	r3, r2
 8004042:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800404a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	011b      	lsls	r3, r3, #4
 8004050:	697a      	ldr	r2, [r7, #20]
 8004052:	4313      	orrs	r3, r2
 8004054:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	693a      	ldr	r2, [r7, #16]
 800405a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	697a      	ldr	r2, [r7, #20]
 8004060:	621a      	str	r2, [r3, #32]
}
 8004062:	bf00      	nop
 8004064:	371c      	adds	r7, #28
 8004066:	46bd      	mov	sp, r7
 8004068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406c:	4770      	bx	lr

0800406e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800406e:	b480      	push	{r7}
 8004070:	b085      	sub	sp, #20
 8004072:	af00      	add	r7, sp, #0
 8004074:	6078      	str	r0, [r7, #4]
 8004076:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004084:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004086:	683a      	ldr	r2, [r7, #0]
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	4313      	orrs	r3, r2
 800408c:	f043 0307 	orr.w	r3, r3, #7
 8004090:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	68fa      	ldr	r2, [r7, #12]
 8004096:	609a      	str	r2, [r3, #8]
}
 8004098:	bf00      	nop
 800409a:	3714      	adds	r7, #20
 800409c:	46bd      	mov	sp, r7
 800409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a2:	4770      	bx	lr

080040a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b087      	sub	sp, #28
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	60f8      	str	r0, [r7, #12]
 80040ac:	60b9      	str	r1, [r7, #8]
 80040ae:	607a      	str	r2, [r7, #4]
 80040b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80040be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	021a      	lsls	r2, r3, #8
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	431a      	orrs	r2, r3
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	4313      	orrs	r3, r2
 80040cc:	697a      	ldr	r2, [r7, #20]
 80040ce:	4313      	orrs	r3, r2
 80040d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	697a      	ldr	r2, [r7, #20]
 80040d6:	609a      	str	r2, [r3, #8]
}
 80040d8:	bf00      	nop
 80040da:	371c      	adds	r7, #28
 80040dc:	46bd      	mov	sp, r7
 80040de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e2:	4770      	bx	lr

080040e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b085      	sub	sp, #20
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
 80040ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040f4:	2b01      	cmp	r3, #1
 80040f6:	d101      	bne.n	80040fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80040f8:	2302      	movs	r3, #2
 80040fa:	e068      	b.n	80041ce <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2201      	movs	r2, #1
 8004100:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2202      	movs	r2, #2
 8004108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a2e      	ldr	r2, [pc, #184]	; (80041dc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d004      	beq.n	8004130 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a2d      	ldr	r2, [pc, #180]	; (80041e0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d108      	bne.n	8004142 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004136:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	68fa      	ldr	r2, [r7, #12]
 800413e:	4313      	orrs	r3, r2
 8004140:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004148:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	68fa      	ldr	r2, [r7, #12]
 8004150:	4313      	orrs	r3, r2
 8004152:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	68fa      	ldr	r2, [r7, #12]
 800415a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a1e      	ldr	r2, [pc, #120]	; (80041dc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d01d      	beq.n	80041a2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800416e:	d018      	beq.n	80041a2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a1b      	ldr	r2, [pc, #108]	; (80041e4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d013      	beq.n	80041a2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a1a      	ldr	r2, [pc, #104]	; (80041e8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d00e      	beq.n	80041a2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a18      	ldr	r2, [pc, #96]	; (80041ec <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d009      	beq.n	80041a2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a13      	ldr	r2, [pc, #76]	; (80041e0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d004      	beq.n	80041a2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a14      	ldr	r2, [pc, #80]	; (80041f0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d10c      	bne.n	80041bc <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	68ba      	ldr	r2, [r7, #8]
 80041b0:	4313      	orrs	r3, r2
 80041b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	68ba      	ldr	r2, [r7, #8]
 80041ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2201      	movs	r2, #1
 80041c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2200      	movs	r2, #0
 80041c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80041cc:	2300      	movs	r3, #0
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3714      	adds	r7, #20
 80041d2:	46bd      	mov	sp, r7
 80041d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d8:	4770      	bx	lr
 80041da:	bf00      	nop
 80041dc:	40012c00 	.word	0x40012c00
 80041e0:	40013400 	.word	0x40013400
 80041e4:	40000400 	.word	0x40000400
 80041e8:	40000800 	.word	0x40000800
 80041ec:	40000c00 	.word	0x40000c00
 80041f0:	40014000 	.word	0x40014000

080041f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b082      	sub	sp, #8
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d101      	bne.n	8004206 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	e040      	b.n	8004288 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800420a:	2b00      	cmp	r3, #0
 800420c:	d106      	bne.n	800421c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2200      	movs	r2, #0
 8004212:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004216:	6878      	ldr	r0, [r7, #4]
 8004218:	f7fc fb98 	bl	800094c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2224      	movs	r2, #36	; 0x24
 8004220:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	681a      	ldr	r2, [r3, #0]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f022 0201 	bic.w	r2, r2, #1
 8004230:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004236:	2b00      	cmp	r3, #0
 8004238:	d002      	beq.n	8004240 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f000 fae0 	bl	8004800 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004240:	6878      	ldr	r0, [r7, #4]
 8004242:	f000 f825 	bl	8004290 <UART_SetConfig>
 8004246:	4603      	mov	r3, r0
 8004248:	2b01      	cmp	r3, #1
 800424a:	d101      	bne.n	8004250 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800424c:	2301      	movs	r3, #1
 800424e:	e01b      	b.n	8004288 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	685a      	ldr	r2, [r3, #4]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800425e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	689a      	ldr	r2, [r3, #8]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800426e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	681a      	ldr	r2, [r3, #0]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f042 0201 	orr.w	r2, r2, #1
 800427e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004280:	6878      	ldr	r0, [r7, #4]
 8004282:	f000 fb5f 	bl	8004944 <UART_CheckIdleState>
 8004286:	4603      	mov	r3, r0
}
 8004288:	4618      	mov	r0, r3
 800428a:	3708      	adds	r7, #8
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}

08004290 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004290:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004294:	b08a      	sub	sp, #40	; 0x28
 8004296:	af00      	add	r7, sp, #0
 8004298:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800429a:	2300      	movs	r3, #0
 800429c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	689a      	ldr	r2, [r3, #8]
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	691b      	ldr	r3, [r3, #16]
 80042a8:	431a      	orrs	r2, r3
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	695b      	ldr	r3, [r3, #20]
 80042ae:	431a      	orrs	r2, r3
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	69db      	ldr	r3, [r3, #28]
 80042b4:	4313      	orrs	r3, r2
 80042b6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	4ba4      	ldr	r3, [pc, #656]	; (8004550 <UART_SetConfig+0x2c0>)
 80042c0:	4013      	ands	r3, r2
 80042c2:	68fa      	ldr	r2, [r7, #12]
 80042c4:	6812      	ldr	r2, [r2, #0]
 80042c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80042c8:	430b      	orrs	r3, r1
 80042ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	68da      	ldr	r2, [r3, #12]
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	430a      	orrs	r2, r1
 80042e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	699b      	ldr	r3, [r3, #24]
 80042e6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a99      	ldr	r2, [pc, #612]	; (8004554 <UART_SetConfig+0x2c4>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d004      	beq.n	80042fc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	6a1b      	ldr	r3, [r3, #32]
 80042f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042f8:	4313      	orrs	r3, r2
 80042fa:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800430c:	430a      	orrs	r2, r1
 800430e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a90      	ldr	r2, [pc, #576]	; (8004558 <UART_SetConfig+0x2c8>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d126      	bne.n	8004368 <UART_SetConfig+0xd8>
 800431a:	4b90      	ldr	r3, [pc, #576]	; (800455c <UART_SetConfig+0x2cc>)
 800431c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004320:	f003 0303 	and.w	r3, r3, #3
 8004324:	2b03      	cmp	r3, #3
 8004326:	d81b      	bhi.n	8004360 <UART_SetConfig+0xd0>
 8004328:	a201      	add	r2, pc, #4	; (adr r2, 8004330 <UART_SetConfig+0xa0>)
 800432a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800432e:	bf00      	nop
 8004330:	08004341 	.word	0x08004341
 8004334:	08004351 	.word	0x08004351
 8004338:	08004349 	.word	0x08004349
 800433c:	08004359 	.word	0x08004359
 8004340:	2301      	movs	r3, #1
 8004342:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004346:	e116      	b.n	8004576 <UART_SetConfig+0x2e6>
 8004348:	2302      	movs	r3, #2
 800434a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800434e:	e112      	b.n	8004576 <UART_SetConfig+0x2e6>
 8004350:	2304      	movs	r3, #4
 8004352:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004356:	e10e      	b.n	8004576 <UART_SetConfig+0x2e6>
 8004358:	2308      	movs	r3, #8
 800435a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800435e:	e10a      	b.n	8004576 <UART_SetConfig+0x2e6>
 8004360:	2310      	movs	r3, #16
 8004362:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004366:	e106      	b.n	8004576 <UART_SetConfig+0x2e6>
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a7c      	ldr	r2, [pc, #496]	; (8004560 <UART_SetConfig+0x2d0>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d138      	bne.n	80043e4 <UART_SetConfig+0x154>
 8004372:	4b7a      	ldr	r3, [pc, #488]	; (800455c <UART_SetConfig+0x2cc>)
 8004374:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004378:	f003 030c 	and.w	r3, r3, #12
 800437c:	2b0c      	cmp	r3, #12
 800437e:	d82d      	bhi.n	80043dc <UART_SetConfig+0x14c>
 8004380:	a201      	add	r2, pc, #4	; (adr r2, 8004388 <UART_SetConfig+0xf8>)
 8004382:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004386:	bf00      	nop
 8004388:	080043bd 	.word	0x080043bd
 800438c:	080043dd 	.word	0x080043dd
 8004390:	080043dd 	.word	0x080043dd
 8004394:	080043dd 	.word	0x080043dd
 8004398:	080043cd 	.word	0x080043cd
 800439c:	080043dd 	.word	0x080043dd
 80043a0:	080043dd 	.word	0x080043dd
 80043a4:	080043dd 	.word	0x080043dd
 80043a8:	080043c5 	.word	0x080043c5
 80043ac:	080043dd 	.word	0x080043dd
 80043b0:	080043dd 	.word	0x080043dd
 80043b4:	080043dd 	.word	0x080043dd
 80043b8:	080043d5 	.word	0x080043d5
 80043bc:	2300      	movs	r3, #0
 80043be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043c2:	e0d8      	b.n	8004576 <UART_SetConfig+0x2e6>
 80043c4:	2302      	movs	r3, #2
 80043c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043ca:	e0d4      	b.n	8004576 <UART_SetConfig+0x2e6>
 80043cc:	2304      	movs	r3, #4
 80043ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043d2:	e0d0      	b.n	8004576 <UART_SetConfig+0x2e6>
 80043d4:	2308      	movs	r3, #8
 80043d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043da:	e0cc      	b.n	8004576 <UART_SetConfig+0x2e6>
 80043dc:	2310      	movs	r3, #16
 80043de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043e2:	e0c8      	b.n	8004576 <UART_SetConfig+0x2e6>
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a5e      	ldr	r2, [pc, #376]	; (8004564 <UART_SetConfig+0x2d4>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d125      	bne.n	800443a <UART_SetConfig+0x1aa>
 80043ee:	4b5b      	ldr	r3, [pc, #364]	; (800455c <UART_SetConfig+0x2cc>)
 80043f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043f4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80043f8:	2b30      	cmp	r3, #48	; 0x30
 80043fa:	d016      	beq.n	800442a <UART_SetConfig+0x19a>
 80043fc:	2b30      	cmp	r3, #48	; 0x30
 80043fe:	d818      	bhi.n	8004432 <UART_SetConfig+0x1a2>
 8004400:	2b20      	cmp	r3, #32
 8004402:	d00a      	beq.n	800441a <UART_SetConfig+0x18a>
 8004404:	2b20      	cmp	r3, #32
 8004406:	d814      	bhi.n	8004432 <UART_SetConfig+0x1a2>
 8004408:	2b00      	cmp	r3, #0
 800440a:	d002      	beq.n	8004412 <UART_SetConfig+0x182>
 800440c:	2b10      	cmp	r3, #16
 800440e:	d008      	beq.n	8004422 <UART_SetConfig+0x192>
 8004410:	e00f      	b.n	8004432 <UART_SetConfig+0x1a2>
 8004412:	2300      	movs	r3, #0
 8004414:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004418:	e0ad      	b.n	8004576 <UART_SetConfig+0x2e6>
 800441a:	2302      	movs	r3, #2
 800441c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004420:	e0a9      	b.n	8004576 <UART_SetConfig+0x2e6>
 8004422:	2304      	movs	r3, #4
 8004424:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004428:	e0a5      	b.n	8004576 <UART_SetConfig+0x2e6>
 800442a:	2308      	movs	r3, #8
 800442c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004430:	e0a1      	b.n	8004576 <UART_SetConfig+0x2e6>
 8004432:	2310      	movs	r3, #16
 8004434:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004438:	e09d      	b.n	8004576 <UART_SetConfig+0x2e6>
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a4a      	ldr	r2, [pc, #296]	; (8004568 <UART_SetConfig+0x2d8>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d125      	bne.n	8004490 <UART_SetConfig+0x200>
 8004444:	4b45      	ldr	r3, [pc, #276]	; (800455c <UART_SetConfig+0x2cc>)
 8004446:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800444a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800444e:	2bc0      	cmp	r3, #192	; 0xc0
 8004450:	d016      	beq.n	8004480 <UART_SetConfig+0x1f0>
 8004452:	2bc0      	cmp	r3, #192	; 0xc0
 8004454:	d818      	bhi.n	8004488 <UART_SetConfig+0x1f8>
 8004456:	2b80      	cmp	r3, #128	; 0x80
 8004458:	d00a      	beq.n	8004470 <UART_SetConfig+0x1e0>
 800445a:	2b80      	cmp	r3, #128	; 0x80
 800445c:	d814      	bhi.n	8004488 <UART_SetConfig+0x1f8>
 800445e:	2b00      	cmp	r3, #0
 8004460:	d002      	beq.n	8004468 <UART_SetConfig+0x1d8>
 8004462:	2b40      	cmp	r3, #64	; 0x40
 8004464:	d008      	beq.n	8004478 <UART_SetConfig+0x1e8>
 8004466:	e00f      	b.n	8004488 <UART_SetConfig+0x1f8>
 8004468:	2300      	movs	r3, #0
 800446a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800446e:	e082      	b.n	8004576 <UART_SetConfig+0x2e6>
 8004470:	2302      	movs	r3, #2
 8004472:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004476:	e07e      	b.n	8004576 <UART_SetConfig+0x2e6>
 8004478:	2304      	movs	r3, #4
 800447a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800447e:	e07a      	b.n	8004576 <UART_SetConfig+0x2e6>
 8004480:	2308      	movs	r3, #8
 8004482:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004486:	e076      	b.n	8004576 <UART_SetConfig+0x2e6>
 8004488:	2310      	movs	r3, #16
 800448a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800448e:	e072      	b.n	8004576 <UART_SetConfig+0x2e6>
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a35      	ldr	r2, [pc, #212]	; (800456c <UART_SetConfig+0x2dc>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d12a      	bne.n	80044f0 <UART_SetConfig+0x260>
 800449a:	4b30      	ldr	r3, [pc, #192]	; (800455c <UART_SetConfig+0x2cc>)
 800449c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80044a8:	d01a      	beq.n	80044e0 <UART_SetConfig+0x250>
 80044aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80044ae:	d81b      	bhi.n	80044e8 <UART_SetConfig+0x258>
 80044b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044b4:	d00c      	beq.n	80044d0 <UART_SetConfig+0x240>
 80044b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044ba:	d815      	bhi.n	80044e8 <UART_SetConfig+0x258>
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d003      	beq.n	80044c8 <UART_SetConfig+0x238>
 80044c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044c4:	d008      	beq.n	80044d8 <UART_SetConfig+0x248>
 80044c6:	e00f      	b.n	80044e8 <UART_SetConfig+0x258>
 80044c8:	2300      	movs	r3, #0
 80044ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044ce:	e052      	b.n	8004576 <UART_SetConfig+0x2e6>
 80044d0:	2302      	movs	r3, #2
 80044d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044d6:	e04e      	b.n	8004576 <UART_SetConfig+0x2e6>
 80044d8:	2304      	movs	r3, #4
 80044da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044de:	e04a      	b.n	8004576 <UART_SetConfig+0x2e6>
 80044e0:	2308      	movs	r3, #8
 80044e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044e6:	e046      	b.n	8004576 <UART_SetConfig+0x2e6>
 80044e8:	2310      	movs	r3, #16
 80044ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044ee:	e042      	b.n	8004576 <UART_SetConfig+0x2e6>
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a17      	ldr	r2, [pc, #92]	; (8004554 <UART_SetConfig+0x2c4>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d13a      	bne.n	8004570 <UART_SetConfig+0x2e0>
 80044fa:	4b18      	ldr	r3, [pc, #96]	; (800455c <UART_SetConfig+0x2cc>)
 80044fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004500:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004504:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004508:	d01a      	beq.n	8004540 <UART_SetConfig+0x2b0>
 800450a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800450e:	d81b      	bhi.n	8004548 <UART_SetConfig+0x2b8>
 8004510:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004514:	d00c      	beq.n	8004530 <UART_SetConfig+0x2a0>
 8004516:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800451a:	d815      	bhi.n	8004548 <UART_SetConfig+0x2b8>
 800451c:	2b00      	cmp	r3, #0
 800451e:	d003      	beq.n	8004528 <UART_SetConfig+0x298>
 8004520:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004524:	d008      	beq.n	8004538 <UART_SetConfig+0x2a8>
 8004526:	e00f      	b.n	8004548 <UART_SetConfig+0x2b8>
 8004528:	2300      	movs	r3, #0
 800452a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800452e:	e022      	b.n	8004576 <UART_SetConfig+0x2e6>
 8004530:	2302      	movs	r3, #2
 8004532:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004536:	e01e      	b.n	8004576 <UART_SetConfig+0x2e6>
 8004538:	2304      	movs	r3, #4
 800453a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800453e:	e01a      	b.n	8004576 <UART_SetConfig+0x2e6>
 8004540:	2308      	movs	r3, #8
 8004542:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004546:	e016      	b.n	8004576 <UART_SetConfig+0x2e6>
 8004548:	2310      	movs	r3, #16
 800454a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800454e:	e012      	b.n	8004576 <UART_SetConfig+0x2e6>
 8004550:	efff69f3 	.word	0xefff69f3
 8004554:	40008000 	.word	0x40008000
 8004558:	40013800 	.word	0x40013800
 800455c:	40021000 	.word	0x40021000
 8004560:	40004400 	.word	0x40004400
 8004564:	40004800 	.word	0x40004800
 8004568:	40004c00 	.word	0x40004c00
 800456c:	40005000 	.word	0x40005000
 8004570:	2310      	movs	r3, #16
 8004572:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a9f      	ldr	r2, [pc, #636]	; (80047f8 <UART_SetConfig+0x568>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d17a      	bne.n	8004676 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004580:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004584:	2b08      	cmp	r3, #8
 8004586:	d824      	bhi.n	80045d2 <UART_SetConfig+0x342>
 8004588:	a201      	add	r2, pc, #4	; (adr r2, 8004590 <UART_SetConfig+0x300>)
 800458a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800458e:	bf00      	nop
 8004590:	080045b5 	.word	0x080045b5
 8004594:	080045d3 	.word	0x080045d3
 8004598:	080045bd 	.word	0x080045bd
 800459c:	080045d3 	.word	0x080045d3
 80045a0:	080045c3 	.word	0x080045c3
 80045a4:	080045d3 	.word	0x080045d3
 80045a8:	080045d3 	.word	0x080045d3
 80045ac:	080045d3 	.word	0x080045d3
 80045b0:	080045cb 	.word	0x080045cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045b4:	f7fe fddc 	bl	8003170 <HAL_RCC_GetPCLK1Freq>
 80045b8:	61f8      	str	r0, [r7, #28]
        break;
 80045ba:	e010      	b.n	80045de <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80045bc:	4b8f      	ldr	r3, [pc, #572]	; (80047fc <UART_SetConfig+0x56c>)
 80045be:	61fb      	str	r3, [r7, #28]
        break;
 80045c0:	e00d      	b.n	80045de <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045c2:	f7fe fd3d 	bl	8003040 <HAL_RCC_GetSysClockFreq>
 80045c6:	61f8      	str	r0, [r7, #28]
        break;
 80045c8:	e009      	b.n	80045de <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045ce:	61fb      	str	r3, [r7, #28]
        break;
 80045d0:	e005      	b.n	80045de <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80045d2:	2300      	movs	r3, #0
 80045d4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80045dc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80045de:	69fb      	ldr	r3, [r7, #28]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	f000 80fb 	beq.w	80047dc <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	685a      	ldr	r2, [r3, #4]
 80045ea:	4613      	mov	r3, r2
 80045ec:	005b      	lsls	r3, r3, #1
 80045ee:	4413      	add	r3, r2
 80045f0:	69fa      	ldr	r2, [r7, #28]
 80045f2:	429a      	cmp	r2, r3
 80045f4:	d305      	bcc.n	8004602 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80045fc:	69fa      	ldr	r2, [r7, #28]
 80045fe:	429a      	cmp	r2, r3
 8004600:	d903      	bls.n	800460a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004608:	e0e8      	b.n	80047dc <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800460a:	69fb      	ldr	r3, [r7, #28]
 800460c:	2200      	movs	r2, #0
 800460e:	461c      	mov	r4, r3
 8004610:	4615      	mov	r5, r2
 8004612:	f04f 0200 	mov.w	r2, #0
 8004616:	f04f 0300 	mov.w	r3, #0
 800461a:	022b      	lsls	r3, r5, #8
 800461c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004620:	0222      	lsls	r2, r4, #8
 8004622:	68f9      	ldr	r1, [r7, #12]
 8004624:	6849      	ldr	r1, [r1, #4]
 8004626:	0849      	lsrs	r1, r1, #1
 8004628:	2000      	movs	r0, #0
 800462a:	4688      	mov	r8, r1
 800462c:	4681      	mov	r9, r0
 800462e:	eb12 0a08 	adds.w	sl, r2, r8
 8004632:	eb43 0b09 	adc.w	fp, r3, r9
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	2200      	movs	r2, #0
 800463c:	603b      	str	r3, [r7, #0]
 800463e:	607a      	str	r2, [r7, #4]
 8004640:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004644:	4650      	mov	r0, sl
 8004646:	4659      	mov	r1, fp
 8004648:	f7fb fdd2 	bl	80001f0 <__aeabi_uldivmod>
 800464c:	4602      	mov	r2, r0
 800464e:	460b      	mov	r3, r1
 8004650:	4613      	mov	r3, r2
 8004652:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004654:	69bb      	ldr	r3, [r7, #24]
 8004656:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800465a:	d308      	bcc.n	800466e <UART_SetConfig+0x3de>
 800465c:	69bb      	ldr	r3, [r7, #24]
 800465e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004662:	d204      	bcs.n	800466e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	69ba      	ldr	r2, [r7, #24]
 800466a:	60da      	str	r2, [r3, #12]
 800466c:	e0b6      	b.n	80047dc <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800466e:	2301      	movs	r3, #1
 8004670:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004674:	e0b2      	b.n	80047dc <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	69db      	ldr	r3, [r3, #28]
 800467a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800467e:	d15e      	bne.n	800473e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004680:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004684:	2b08      	cmp	r3, #8
 8004686:	d828      	bhi.n	80046da <UART_SetConfig+0x44a>
 8004688:	a201      	add	r2, pc, #4	; (adr r2, 8004690 <UART_SetConfig+0x400>)
 800468a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800468e:	bf00      	nop
 8004690:	080046b5 	.word	0x080046b5
 8004694:	080046bd 	.word	0x080046bd
 8004698:	080046c5 	.word	0x080046c5
 800469c:	080046db 	.word	0x080046db
 80046a0:	080046cb 	.word	0x080046cb
 80046a4:	080046db 	.word	0x080046db
 80046a8:	080046db 	.word	0x080046db
 80046ac:	080046db 	.word	0x080046db
 80046b0:	080046d3 	.word	0x080046d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80046b4:	f7fe fd5c 	bl	8003170 <HAL_RCC_GetPCLK1Freq>
 80046b8:	61f8      	str	r0, [r7, #28]
        break;
 80046ba:	e014      	b.n	80046e6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80046bc:	f7fe fd6e 	bl	800319c <HAL_RCC_GetPCLK2Freq>
 80046c0:	61f8      	str	r0, [r7, #28]
        break;
 80046c2:	e010      	b.n	80046e6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80046c4:	4b4d      	ldr	r3, [pc, #308]	; (80047fc <UART_SetConfig+0x56c>)
 80046c6:	61fb      	str	r3, [r7, #28]
        break;
 80046c8:	e00d      	b.n	80046e6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046ca:	f7fe fcb9 	bl	8003040 <HAL_RCC_GetSysClockFreq>
 80046ce:	61f8      	str	r0, [r7, #28]
        break;
 80046d0:	e009      	b.n	80046e6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80046d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046d6:	61fb      	str	r3, [r7, #28]
        break;
 80046d8:	e005      	b.n	80046e6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80046da:	2300      	movs	r3, #0
 80046dc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80046de:	2301      	movs	r3, #1
 80046e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80046e4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80046e6:	69fb      	ldr	r3, [r7, #28]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d077      	beq.n	80047dc <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80046ec:	69fb      	ldr	r3, [r7, #28]
 80046ee:	005a      	lsls	r2, r3, #1
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	085b      	lsrs	r3, r3, #1
 80046f6:	441a      	add	r2, r3
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004700:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004702:	69bb      	ldr	r3, [r7, #24]
 8004704:	2b0f      	cmp	r3, #15
 8004706:	d916      	bls.n	8004736 <UART_SetConfig+0x4a6>
 8004708:	69bb      	ldr	r3, [r7, #24]
 800470a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800470e:	d212      	bcs.n	8004736 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004710:	69bb      	ldr	r3, [r7, #24]
 8004712:	b29b      	uxth	r3, r3
 8004714:	f023 030f 	bic.w	r3, r3, #15
 8004718:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800471a:	69bb      	ldr	r3, [r7, #24]
 800471c:	085b      	lsrs	r3, r3, #1
 800471e:	b29b      	uxth	r3, r3
 8004720:	f003 0307 	and.w	r3, r3, #7
 8004724:	b29a      	uxth	r2, r3
 8004726:	8afb      	ldrh	r3, [r7, #22]
 8004728:	4313      	orrs	r3, r2
 800472a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	8afa      	ldrh	r2, [r7, #22]
 8004732:	60da      	str	r2, [r3, #12]
 8004734:	e052      	b.n	80047dc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800473c:	e04e      	b.n	80047dc <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800473e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004742:	2b08      	cmp	r3, #8
 8004744:	d827      	bhi.n	8004796 <UART_SetConfig+0x506>
 8004746:	a201      	add	r2, pc, #4	; (adr r2, 800474c <UART_SetConfig+0x4bc>)
 8004748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800474c:	08004771 	.word	0x08004771
 8004750:	08004779 	.word	0x08004779
 8004754:	08004781 	.word	0x08004781
 8004758:	08004797 	.word	0x08004797
 800475c:	08004787 	.word	0x08004787
 8004760:	08004797 	.word	0x08004797
 8004764:	08004797 	.word	0x08004797
 8004768:	08004797 	.word	0x08004797
 800476c:	0800478f 	.word	0x0800478f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004770:	f7fe fcfe 	bl	8003170 <HAL_RCC_GetPCLK1Freq>
 8004774:	61f8      	str	r0, [r7, #28]
        break;
 8004776:	e014      	b.n	80047a2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004778:	f7fe fd10 	bl	800319c <HAL_RCC_GetPCLK2Freq>
 800477c:	61f8      	str	r0, [r7, #28]
        break;
 800477e:	e010      	b.n	80047a2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004780:	4b1e      	ldr	r3, [pc, #120]	; (80047fc <UART_SetConfig+0x56c>)
 8004782:	61fb      	str	r3, [r7, #28]
        break;
 8004784:	e00d      	b.n	80047a2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004786:	f7fe fc5b 	bl	8003040 <HAL_RCC_GetSysClockFreq>
 800478a:	61f8      	str	r0, [r7, #28]
        break;
 800478c:	e009      	b.n	80047a2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800478e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004792:	61fb      	str	r3, [r7, #28]
        break;
 8004794:	e005      	b.n	80047a2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004796:	2300      	movs	r3, #0
 8004798:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800479a:	2301      	movs	r3, #1
 800479c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80047a0:	bf00      	nop
    }

    if (pclk != 0U)
 80047a2:	69fb      	ldr	r3, [r7, #28]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d019      	beq.n	80047dc <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	085a      	lsrs	r2, r3, #1
 80047ae:	69fb      	ldr	r3, [r7, #28]
 80047b0:	441a      	add	r2, r3
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80047ba:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80047bc:	69bb      	ldr	r3, [r7, #24]
 80047be:	2b0f      	cmp	r3, #15
 80047c0:	d909      	bls.n	80047d6 <UART_SetConfig+0x546>
 80047c2:	69bb      	ldr	r3, [r7, #24]
 80047c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047c8:	d205      	bcs.n	80047d6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80047ca:	69bb      	ldr	r3, [r7, #24]
 80047cc:	b29a      	uxth	r2, r3
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	60da      	str	r2, [r3, #12]
 80047d4:	e002      	b.n	80047dc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	2200      	movs	r2, #0
 80047e0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2200      	movs	r2, #0
 80047e6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80047e8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	3728      	adds	r7, #40	; 0x28
 80047f0:	46bd      	mov	sp, r7
 80047f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80047f6:	bf00      	nop
 80047f8:	40008000 	.word	0x40008000
 80047fc:	00f42400 	.word	0x00f42400

08004800 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004800:	b480      	push	{r7}
 8004802:	b083      	sub	sp, #12
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800480c:	f003 0308 	and.w	r3, r3, #8
 8004810:	2b00      	cmp	r3, #0
 8004812:	d00a      	beq.n	800482a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	430a      	orrs	r2, r1
 8004828:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800482e:	f003 0301 	and.w	r3, r3, #1
 8004832:	2b00      	cmp	r3, #0
 8004834:	d00a      	beq.n	800484c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	430a      	orrs	r2, r1
 800484a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004850:	f003 0302 	and.w	r3, r3, #2
 8004854:	2b00      	cmp	r3, #0
 8004856:	d00a      	beq.n	800486e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	430a      	orrs	r2, r1
 800486c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004872:	f003 0304 	and.w	r3, r3, #4
 8004876:	2b00      	cmp	r3, #0
 8004878:	d00a      	beq.n	8004890 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	430a      	orrs	r2, r1
 800488e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004894:	f003 0310 	and.w	r3, r3, #16
 8004898:	2b00      	cmp	r3, #0
 800489a:	d00a      	beq.n	80048b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	689b      	ldr	r3, [r3, #8]
 80048a2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	430a      	orrs	r2, r1
 80048b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b6:	f003 0320 	and.w	r3, r3, #32
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d00a      	beq.n	80048d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	430a      	orrs	r2, r1
 80048d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d01a      	beq.n	8004916 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	430a      	orrs	r2, r1
 80048f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80048fe:	d10a      	bne.n	8004916 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	430a      	orrs	r2, r1
 8004914:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800491a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800491e:	2b00      	cmp	r3, #0
 8004920:	d00a      	beq.n	8004938 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	430a      	orrs	r2, r1
 8004936:	605a      	str	r2, [r3, #4]
  }
}
 8004938:	bf00      	nop
 800493a:	370c      	adds	r7, #12
 800493c:	46bd      	mov	sp, r7
 800493e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004942:	4770      	bx	lr

08004944 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b098      	sub	sp, #96	; 0x60
 8004948:	af02      	add	r7, sp, #8
 800494a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2200      	movs	r2, #0
 8004950:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004954:	f7fc f94a 	bl	8000bec <HAL_GetTick>
 8004958:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f003 0308 	and.w	r3, r3, #8
 8004964:	2b08      	cmp	r3, #8
 8004966:	d12e      	bne.n	80049c6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004968:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800496c:	9300      	str	r3, [sp, #0]
 800496e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004970:	2200      	movs	r2, #0
 8004972:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f000 f88c 	bl	8004a94 <UART_WaitOnFlagUntilTimeout>
 800497c:	4603      	mov	r3, r0
 800497e:	2b00      	cmp	r3, #0
 8004980:	d021      	beq.n	80049c6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800498a:	e853 3f00 	ldrex	r3, [r3]
 800498e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004990:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004992:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004996:	653b      	str	r3, [r7, #80]	; 0x50
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	461a      	mov	r2, r3
 800499e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049a0:	647b      	str	r3, [r7, #68]	; 0x44
 80049a2:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049a4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80049a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80049a8:	e841 2300 	strex	r3, r2, [r1]
 80049ac:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80049ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d1e6      	bne.n	8004982 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2220      	movs	r2, #32
 80049b8:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2200      	movs	r2, #0
 80049be:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80049c2:	2303      	movs	r3, #3
 80049c4:	e062      	b.n	8004a8c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f003 0304 	and.w	r3, r3, #4
 80049d0:	2b04      	cmp	r3, #4
 80049d2:	d149      	bne.n	8004a68 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80049d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80049d8:	9300      	str	r3, [sp, #0]
 80049da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049dc:	2200      	movs	r2, #0
 80049de:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f000 f856 	bl	8004a94 <UART_WaitOnFlagUntilTimeout>
 80049e8:	4603      	mov	r3, r0
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d03c      	beq.n	8004a68 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f6:	e853 3f00 	ldrex	r3, [r3]
 80049fa:	623b      	str	r3, [r7, #32]
   return(result);
 80049fc:	6a3b      	ldr	r3, [r7, #32]
 80049fe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004a02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	461a      	mov	r2, r3
 8004a0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a0c:	633b      	str	r3, [r7, #48]	; 0x30
 8004a0e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a10:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004a12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a14:	e841 2300 	strex	r3, r2, [r1]
 8004a18:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d1e6      	bne.n	80049ee <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	3308      	adds	r3, #8
 8004a26:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a28:	693b      	ldr	r3, [r7, #16]
 8004a2a:	e853 3f00 	ldrex	r3, [r3]
 8004a2e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	f023 0301 	bic.w	r3, r3, #1
 8004a36:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	3308      	adds	r3, #8
 8004a3e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a40:	61fa      	str	r2, [r7, #28]
 8004a42:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a44:	69b9      	ldr	r1, [r7, #24]
 8004a46:	69fa      	ldr	r2, [r7, #28]
 8004a48:	e841 2300 	strex	r3, r2, [r1]
 8004a4c:	617b      	str	r3, [r7, #20]
   return(result);
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d1e5      	bne.n	8004a20 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2220      	movs	r2, #32
 8004a58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a64:	2303      	movs	r3, #3
 8004a66:	e011      	b.n	8004a8c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2220      	movs	r2, #32
 8004a6c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2220      	movs	r2, #32
 8004a72:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2200      	movs	r2, #0
 8004a86:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004a8a:	2300      	movs	r3, #0
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	3758      	adds	r7, #88	; 0x58
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}

08004a94 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b084      	sub	sp, #16
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	60f8      	str	r0, [r7, #12]
 8004a9c:	60b9      	str	r1, [r7, #8]
 8004a9e:	603b      	str	r3, [r7, #0]
 8004aa0:	4613      	mov	r3, r2
 8004aa2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004aa4:	e049      	b.n	8004b3a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004aa6:	69bb      	ldr	r3, [r7, #24]
 8004aa8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004aac:	d045      	beq.n	8004b3a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004aae:	f7fc f89d 	bl	8000bec <HAL_GetTick>
 8004ab2:	4602      	mov	r2, r0
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	1ad3      	subs	r3, r2, r3
 8004ab8:	69ba      	ldr	r2, [r7, #24]
 8004aba:	429a      	cmp	r2, r3
 8004abc:	d302      	bcc.n	8004ac4 <UART_WaitOnFlagUntilTimeout+0x30>
 8004abe:	69bb      	ldr	r3, [r7, #24]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d101      	bne.n	8004ac8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004ac4:	2303      	movs	r3, #3
 8004ac6:	e048      	b.n	8004b5a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f003 0304 	and.w	r3, r3, #4
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d031      	beq.n	8004b3a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	69db      	ldr	r3, [r3, #28]
 8004adc:	f003 0308 	and.w	r3, r3, #8
 8004ae0:	2b08      	cmp	r3, #8
 8004ae2:	d110      	bne.n	8004b06 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	2208      	movs	r2, #8
 8004aea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004aec:	68f8      	ldr	r0, [r7, #12]
 8004aee:	f000 f838 	bl	8004b62 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	2208      	movs	r2, #8
 8004af6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2200      	movs	r2, #0
 8004afe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8004b02:	2301      	movs	r3, #1
 8004b04:	e029      	b.n	8004b5a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	69db      	ldr	r3, [r3, #28]
 8004b0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b14:	d111      	bne.n	8004b3a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004b1e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004b20:	68f8      	ldr	r0, [r7, #12]
 8004b22:	f000 f81e 	bl	8004b62 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2220      	movs	r2, #32
 8004b2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	2200      	movs	r2, #0
 8004b32:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004b36:	2303      	movs	r3, #3
 8004b38:	e00f      	b.n	8004b5a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	69da      	ldr	r2, [r3, #28]
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	4013      	ands	r3, r2
 8004b44:	68ba      	ldr	r2, [r7, #8]
 8004b46:	429a      	cmp	r2, r3
 8004b48:	bf0c      	ite	eq
 8004b4a:	2301      	moveq	r3, #1
 8004b4c:	2300      	movne	r3, #0
 8004b4e:	b2db      	uxtb	r3, r3
 8004b50:	461a      	mov	r2, r3
 8004b52:	79fb      	ldrb	r3, [r7, #7]
 8004b54:	429a      	cmp	r2, r3
 8004b56:	d0a6      	beq.n	8004aa6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004b58:	2300      	movs	r3, #0
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	3710      	adds	r7, #16
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}

08004b62 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004b62:	b480      	push	{r7}
 8004b64:	b095      	sub	sp, #84	; 0x54
 8004b66:	af00      	add	r7, sp, #0
 8004b68:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b72:	e853 3f00 	ldrex	r3, [r3]
 8004b76:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b7a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004b7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	461a      	mov	r2, r3
 8004b86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b88:	643b      	str	r3, [r7, #64]	; 0x40
 8004b8a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b8c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004b8e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004b90:	e841 2300 	strex	r3, r2, [r1]
 8004b94:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004b96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d1e6      	bne.n	8004b6a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	3308      	adds	r3, #8
 8004ba2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ba4:	6a3b      	ldr	r3, [r7, #32]
 8004ba6:	e853 3f00 	ldrex	r3, [r3]
 8004baa:	61fb      	str	r3, [r7, #28]
   return(result);
 8004bac:	69fb      	ldr	r3, [r7, #28]
 8004bae:	f023 0301 	bic.w	r3, r3, #1
 8004bb2:	64bb      	str	r3, [r7, #72]	; 0x48
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	3308      	adds	r3, #8
 8004bba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004bbc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004bbe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bc0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004bc2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004bc4:	e841 2300 	strex	r3, r2, [r1]
 8004bc8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d1e5      	bne.n	8004b9c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bd4:	2b01      	cmp	r3, #1
 8004bd6:	d118      	bne.n	8004c0a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	e853 3f00 	ldrex	r3, [r3]
 8004be4:	60bb      	str	r3, [r7, #8]
   return(result);
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	f023 0310 	bic.w	r3, r3, #16
 8004bec:	647b      	str	r3, [r7, #68]	; 0x44
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	461a      	mov	r2, r3
 8004bf4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bf6:	61bb      	str	r3, [r7, #24]
 8004bf8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bfa:	6979      	ldr	r1, [r7, #20]
 8004bfc:	69ba      	ldr	r2, [r7, #24]
 8004bfe:	e841 2300 	strex	r3, r2, [r1]
 8004c02:	613b      	str	r3, [r7, #16]
   return(result);
 8004c04:	693b      	ldr	r3, [r7, #16]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d1e6      	bne.n	8004bd8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2220      	movs	r2, #32
 8004c0e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2200      	movs	r2, #0
 8004c16:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004c1e:	bf00      	nop
 8004c20:	3754      	adds	r7, #84	; 0x54
 8004c22:	46bd      	mov	sp, r7
 8004c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c28:	4770      	bx	lr

08004c2a <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004c2a:	b084      	sub	sp, #16
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b084      	sub	sp, #16
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
 8004c34:	f107 001c 	add.w	r0, r7, #28
 8004c38:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	68db      	ldr	r3, [r3, #12]
 8004c40:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8004c48:	6878      	ldr	r0, [r7, #4]
 8004c4a:	f001 fa1d 	bl	8006088 <USB_CoreReset>
 8004c4e:	4603      	mov	r3, r0
 8004c50:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8004c52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d106      	bne.n	8004c66 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c5c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	639a      	str	r2, [r3, #56]	; 0x38
 8004c64:	e005      	b.n	8004c72 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c6a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8004c72:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c74:	4618      	mov	r0, r3
 8004c76:	3710      	adds	r7, #16
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004c7e:	b004      	add	sp, #16
 8004c80:	4770      	bx	lr
	...

08004c84 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b087      	sub	sp, #28
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	60f8      	str	r0, [r7, #12]
 8004c8c:	60b9      	str	r1, [r7, #8]
 8004c8e:	4613      	mov	r3, r2
 8004c90:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004c92:	79fb      	ldrb	r3, [r7, #7]
 8004c94:	2b02      	cmp	r3, #2
 8004c96:	d165      	bne.n	8004d64 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	4a3e      	ldr	r2, [pc, #248]	; (8004d94 <USB_SetTurnaroundTime+0x110>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d906      	bls.n	8004cae <USB_SetTurnaroundTime+0x2a>
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	4a3d      	ldr	r2, [pc, #244]	; (8004d98 <USB_SetTurnaroundTime+0x114>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d202      	bcs.n	8004cae <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004ca8:	230f      	movs	r3, #15
 8004caa:	617b      	str	r3, [r7, #20]
 8004cac:	e05c      	b.n	8004d68 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	4a39      	ldr	r2, [pc, #228]	; (8004d98 <USB_SetTurnaroundTime+0x114>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d306      	bcc.n	8004cc4 <USB_SetTurnaroundTime+0x40>
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	4a38      	ldr	r2, [pc, #224]	; (8004d9c <USB_SetTurnaroundTime+0x118>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d202      	bcs.n	8004cc4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004cbe:	230e      	movs	r3, #14
 8004cc0:	617b      	str	r3, [r7, #20]
 8004cc2:	e051      	b.n	8004d68 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	4a35      	ldr	r2, [pc, #212]	; (8004d9c <USB_SetTurnaroundTime+0x118>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d306      	bcc.n	8004cda <USB_SetTurnaroundTime+0x56>
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	4a34      	ldr	r2, [pc, #208]	; (8004da0 <USB_SetTurnaroundTime+0x11c>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d202      	bcs.n	8004cda <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004cd4:	230d      	movs	r3, #13
 8004cd6:	617b      	str	r3, [r7, #20]
 8004cd8:	e046      	b.n	8004d68 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	4a30      	ldr	r2, [pc, #192]	; (8004da0 <USB_SetTurnaroundTime+0x11c>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d306      	bcc.n	8004cf0 <USB_SetTurnaroundTime+0x6c>
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	4a2f      	ldr	r2, [pc, #188]	; (8004da4 <USB_SetTurnaroundTime+0x120>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d802      	bhi.n	8004cf0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004cea:	230c      	movs	r3, #12
 8004cec:	617b      	str	r3, [r7, #20]
 8004cee:	e03b      	b.n	8004d68 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	4a2c      	ldr	r2, [pc, #176]	; (8004da4 <USB_SetTurnaroundTime+0x120>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d906      	bls.n	8004d06 <USB_SetTurnaroundTime+0x82>
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	4a2b      	ldr	r2, [pc, #172]	; (8004da8 <USB_SetTurnaroundTime+0x124>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d802      	bhi.n	8004d06 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004d00:	230b      	movs	r3, #11
 8004d02:	617b      	str	r3, [r7, #20]
 8004d04:	e030      	b.n	8004d68 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	4a27      	ldr	r2, [pc, #156]	; (8004da8 <USB_SetTurnaroundTime+0x124>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d906      	bls.n	8004d1c <USB_SetTurnaroundTime+0x98>
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	4a26      	ldr	r2, [pc, #152]	; (8004dac <USB_SetTurnaroundTime+0x128>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d802      	bhi.n	8004d1c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004d16:	230a      	movs	r3, #10
 8004d18:	617b      	str	r3, [r7, #20]
 8004d1a:	e025      	b.n	8004d68 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	4a23      	ldr	r2, [pc, #140]	; (8004dac <USB_SetTurnaroundTime+0x128>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d906      	bls.n	8004d32 <USB_SetTurnaroundTime+0xae>
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	4a22      	ldr	r2, [pc, #136]	; (8004db0 <USB_SetTurnaroundTime+0x12c>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d202      	bcs.n	8004d32 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004d2c:	2309      	movs	r3, #9
 8004d2e:	617b      	str	r3, [r7, #20]
 8004d30:	e01a      	b.n	8004d68 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	4a1e      	ldr	r2, [pc, #120]	; (8004db0 <USB_SetTurnaroundTime+0x12c>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d306      	bcc.n	8004d48 <USB_SetTurnaroundTime+0xc4>
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	4a1d      	ldr	r2, [pc, #116]	; (8004db4 <USB_SetTurnaroundTime+0x130>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d802      	bhi.n	8004d48 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004d42:	2308      	movs	r3, #8
 8004d44:	617b      	str	r3, [r7, #20]
 8004d46:	e00f      	b.n	8004d68 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	4a1a      	ldr	r2, [pc, #104]	; (8004db4 <USB_SetTurnaroundTime+0x130>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d906      	bls.n	8004d5e <USB_SetTurnaroundTime+0xda>
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	4a19      	ldr	r2, [pc, #100]	; (8004db8 <USB_SetTurnaroundTime+0x134>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d202      	bcs.n	8004d5e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004d58:	2307      	movs	r3, #7
 8004d5a:	617b      	str	r3, [r7, #20]
 8004d5c:	e004      	b.n	8004d68 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004d5e:	2306      	movs	r3, #6
 8004d60:	617b      	str	r3, [r7, #20]
 8004d62:	e001      	b.n	8004d68 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004d64:	2309      	movs	r3, #9
 8004d66:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	68db      	ldr	r3, [r3, #12]
 8004d6c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	68da      	ldr	r2, [r3, #12]
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	029b      	lsls	r3, r3, #10
 8004d7c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004d80:	431a      	orrs	r2, r3
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004d86:	2300      	movs	r3, #0
}
 8004d88:	4618      	mov	r0, r3
 8004d8a:	371c      	adds	r7, #28
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d92:	4770      	bx	lr
 8004d94:	00d8acbf 	.word	0x00d8acbf
 8004d98:	00e4e1c0 	.word	0x00e4e1c0
 8004d9c:	00f42400 	.word	0x00f42400
 8004da0:	01067380 	.word	0x01067380
 8004da4:	011a499f 	.word	0x011a499f
 8004da8:	01312cff 	.word	0x01312cff
 8004dac:	014ca43f 	.word	0x014ca43f
 8004db0:	016e3600 	.word	0x016e3600
 8004db4:	01a6ab1f 	.word	0x01a6ab1f
 8004db8:	01e84800 	.word	0x01e84800

08004dbc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b083      	sub	sp, #12
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	689b      	ldr	r3, [r3, #8]
 8004dc8:	f043 0201 	orr.w	r2, r3, #1
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004dd0:	2300      	movs	r3, #0
}
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	370c      	adds	r7, #12
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ddc:	4770      	bx	lr

08004dde <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004dde:	b480      	push	{r7}
 8004de0:	b083      	sub	sp, #12
 8004de2:	af00      	add	r7, sp, #0
 8004de4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	689b      	ldr	r3, [r3, #8]
 8004dea:	f023 0201 	bic.w	r2, r3, #1
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004df2:	2300      	movs	r3, #0
}
 8004df4:	4618      	mov	r0, r3
 8004df6:	370c      	adds	r7, #12
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfe:	4770      	bx	lr

08004e00 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b084      	sub	sp, #16
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
 8004e08:	460b      	mov	r3, r1
 8004e0a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	68db      	ldr	r3, [r3, #12]
 8004e14:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004e1c:	78fb      	ldrb	r3, [r7, #3]
 8004e1e:	2b01      	cmp	r3, #1
 8004e20:	d115      	bne.n	8004e4e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	68db      	ldr	r3, [r3, #12]
 8004e26:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004e2e:	2001      	movs	r0, #1
 8004e30:	f7fb fee8 	bl	8000c04 <HAL_Delay>
      ms++;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	3301      	adds	r3, #1
 8004e38:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	f001 f8ab 	bl	8005f96 <USB_GetMode>
 8004e40:	4603      	mov	r3, r0
 8004e42:	2b01      	cmp	r3, #1
 8004e44:	d01e      	beq.n	8004e84 <USB_SetCurrentMode+0x84>
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	2b31      	cmp	r3, #49	; 0x31
 8004e4a:	d9f0      	bls.n	8004e2e <USB_SetCurrentMode+0x2e>
 8004e4c:	e01a      	b.n	8004e84 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004e4e:	78fb      	ldrb	r3, [r7, #3]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d115      	bne.n	8004e80 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	68db      	ldr	r3, [r3, #12]
 8004e58:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004e60:	2001      	movs	r0, #1
 8004e62:	f7fb fecf 	bl	8000c04 <HAL_Delay>
      ms++;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	3301      	adds	r3, #1
 8004e6a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004e6c:	6878      	ldr	r0, [r7, #4]
 8004e6e:	f001 f892 	bl	8005f96 <USB_GetMode>
 8004e72:	4603      	mov	r3, r0
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d005      	beq.n	8004e84 <USB_SetCurrentMode+0x84>
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2b31      	cmp	r3, #49	; 0x31
 8004e7c:	d9f0      	bls.n	8004e60 <USB_SetCurrentMode+0x60>
 8004e7e:	e001      	b.n	8004e84 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004e80:	2301      	movs	r3, #1
 8004e82:	e005      	b.n	8004e90 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	2b32      	cmp	r3, #50	; 0x32
 8004e88:	d101      	bne.n	8004e8e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	e000      	b.n	8004e90 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004e8e:	2300      	movs	r3, #0
}
 8004e90:	4618      	mov	r0, r3
 8004e92:	3710      	adds	r7, #16
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bd80      	pop	{r7, pc}

08004e98 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004e98:	b084      	sub	sp, #16
 8004e9a:	b580      	push	{r7, lr}
 8004e9c:	b086      	sub	sp, #24
 8004e9e:	af00      	add	r7, sp, #0
 8004ea0:	6078      	str	r0, [r7, #4]
 8004ea2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004ea6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	613b      	str	r3, [r7, #16]
 8004eb6:	e009      	b.n	8004ecc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004eb8:	687a      	ldr	r2, [r7, #4]
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	3340      	adds	r3, #64	; 0x40
 8004ebe:	009b      	lsls	r3, r3, #2
 8004ec0:	4413      	add	r3, r2
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	3301      	adds	r3, #1
 8004eca:	613b      	str	r3, [r7, #16]
 8004ecc:	693b      	ldr	r3, [r7, #16]
 8004ece:	2b0e      	cmp	r3, #14
 8004ed0:	d9f2      	bls.n	8004eb8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004ed2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d11c      	bne.n	8004f12 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	68fa      	ldr	r2, [r7, #12]
 8004ee2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ee6:	f043 0302 	orr.w	r3, r3, #2
 8004eea:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ef0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	601a      	str	r2, [r3, #0]
 8004f10:	e005      	b.n	8004f1e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f16:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004f24:	461a      	mov	r2, r3
 8004f26:	2300      	movs	r3, #0
 8004f28:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004f2a:	2103      	movs	r1, #3
 8004f2c:	6878      	ldr	r0, [r7, #4]
 8004f2e:	f000 f959 	bl	80051e4 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004f32:	2110      	movs	r1, #16
 8004f34:	6878      	ldr	r0, [r7, #4]
 8004f36:	f000 f8f1 	bl	800511c <USB_FlushTxFifo>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d001      	beq.n	8004f44 <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 8004f40:	2301      	movs	r3, #1
 8004f42:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004f44:	6878      	ldr	r0, [r7, #4]
 8004f46:	f000 f91d 	bl	8005184 <USB_FlushRxFifo>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d001      	beq.n	8004f54 <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 8004f50:	2301      	movs	r3, #1
 8004f52:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f5a:	461a      	mov	r2, r3
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f66:	461a      	mov	r2, r3
 8004f68:	2300      	movs	r3, #0
 8004f6a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f72:	461a      	mov	r2, r3
 8004f74:	2300      	movs	r3, #0
 8004f76:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004f78:	2300      	movs	r3, #0
 8004f7a:	613b      	str	r3, [r7, #16]
 8004f7c:	e043      	b.n	8005006 <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	015a      	lsls	r2, r3, #5
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	4413      	add	r3, r2
 8004f86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f90:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f94:	d118      	bne.n	8004fc8 <USB_DevInit+0x130>
    {
      if (i == 0U)
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d10a      	bne.n	8004fb2 <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	015a      	lsls	r2, r3, #5
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	4413      	add	r3, r2
 8004fa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fa8:	461a      	mov	r2, r3
 8004faa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004fae:	6013      	str	r3, [r2, #0]
 8004fb0:	e013      	b.n	8004fda <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	015a      	lsls	r2, r3, #5
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	4413      	add	r3, r2
 8004fba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fbe:	461a      	mov	r2, r3
 8004fc0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004fc4:	6013      	str	r3, [r2, #0]
 8004fc6:	e008      	b.n	8004fda <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	015a      	lsls	r2, r3, #5
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	4413      	add	r3, r2
 8004fd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fd4:	461a      	mov	r2, r3
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	015a      	lsls	r2, r3, #5
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	4413      	add	r3, r2
 8004fe2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fe6:	461a      	mov	r2, r3
 8004fe8:	2300      	movs	r3, #0
 8004fea:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	015a      	lsls	r2, r3, #5
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	4413      	add	r3, r2
 8004ff4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ff8:	461a      	mov	r2, r3
 8004ffa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004ffe:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	3301      	adds	r3, #1
 8005004:	613b      	str	r3, [r7, #16]
 8005006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005008:	693a      	ldr	r2, [r7, #16]
 800500a:	429a      	cmp	r2, r3
 800500c:	d3b7      	bcc.n	8004f7e <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800500e:	2300      	movs	r3, #0
 8005010:	613b      	str	r3, [r7, #16]
 8005012:	e043      	b.n	800509c <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005014:	693b      	ldr	r3, [r7, #16]
 8005016:	015a      	lsls	r2, r3, #5
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	4413      	add	r3, r2
 800501c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005026:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800502a:	d118      	bne.n	800505e <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d10a      	bne.n	8005048 <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	015a      	lsls	r2, r3, #5
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	4413      	add	r3, r2
 800503a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800503e:	461a      	mov	r2, r3
 8005040:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005044:	6013      	str	r3, [r2, #0]
 8005046:	e013      	b.n	8005070 <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	015a      	lsls	r2, r3, #5
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	4413      	add	r3, r2
 8005050:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005054:	461a      	mov	r2, r3
 8005056:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800505a:	6013      	str	r3, [r2, #0]
 800505c:	e008      	b.n	8005070 <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	015a      	lsls	r2, r3, #5
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	4413      	add	r3, r2
 8005066:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800506a:	461a      	mov	r2, r3
 800506c:	2300      	movs	r3, #0
 800506e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	015a      	lsls	r2, r3, #5
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	4413      	add	r3, r2
 8005078:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800507c:	461a      	mov	r2, r3
 800507e:	2300      	movs	r3, #0
 8005080:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	015a      	lsls	r2, r3, #5
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	4413      	add	r3, r2
 800508a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800508e:	461a      	mov	r2, r3
 8005090:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005094:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	3301      	adds	r3, #1
 800509a:	613b      	str	r3, [r7, #16]
 800509c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800509e:	693a      	ldr	r2, [r7, #16]
 80050a0:	429a      	cmp	r2, r3
 80050a2:	d3b7      	bcc.n	8005014 <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050aa:	691b      	ldr	r3, [r3, #16]
 80050ac:	68fa      	ldr	r2, [r7, #12]
 80050ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80050b2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80050b6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2200      	movs	r2, #0
 80050bc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80050c4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	699b      	ldr	r3, [r3, #24]
 80050ca:	f043 0210 	orr.w	r2, r3, #16
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	699a      	ldr	r2, [r3, #24]
 80050d6:	4b10      	ldr	r3, [pc, #64]	; (8005118 <USB_DevInit+0x280>)
 80050d8:	4313      	orrs	r3, r2
 80050da:	687a      	ldr	r2, [r7, #4]
 80050dc:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80050de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d005      	beq.n	80050f0 <USB_DevInit+0x258>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	699b      	ldr	r3, [r3, #24]
 80050e8:	f043 0208 	orr.w	r2, r3, #8
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80050f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050f2:	2b01      	cmp	r3, #1
 80050f4:	d107      	bne.n	8005106 <USB_DevInit+0x26e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	699b      	ldr	r3, [r3, #24]
 80050fa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80050fe:	f043 0304 	orr.w	r3, r3, #4
 8005102:	687a      	ldr	r2, [r7, #4]
 8005104:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005106:	7dfb      	ldrb	r3, [r7, #23]
}
 8005108:	4618      	mov	r0, r3
 800510a:	3718      	adds	r7, #24
 800510c:	46bd      	mov	sp, r7
 800510e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005112:	b004      	add	sp, #16
 8005114:	4770      	bx	lr
 8005116:	bf00      	nop
 8005118:	803c3800 	.word	0x803c3800

0800511c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800511c:	b480      	push	{r7}
 800511e:	b085      	sub	sp, #20
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
 8005124:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005126:	2300      	movs	r3, #0
 8005128:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	3301      	adds	r3, #1
 800512e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	4a13      	ldr	r2, [pc, #76]	; (8005180 <USB_FlushTxFifo+0x64>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d901      	bls.n	800513c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005138:	2303      	movs	r3, #3
 800513a:	e01b      	b.n	8005174 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	691b      	ldr	r3, [r3, #16]
 8005140:	2b00      	cmp	r3, #0
 8005142:	daf2      	bge.n	800512a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005144:	2300      	movs	r3, #0
 8005146:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	019b      	lsls	r3, r3, #6
 800514c:	f043 0220 	orr.w	r2, r3, #32
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	3301      	adds	r3, #1
 8005158:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	4a08      	ldr	r2, [pc, #32]	; (8005180 <USB_FlushTxFifo+0x64>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d901      	bls.n	8005166 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005162:	2303      	movs	r3, #3
 8005164:	e006      	b.n	8005174 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	691b      	ldr	r3, [r3, #16]
 800516a:	f003 0320 	and.w	r3, r3, #32
 800516e:	2b20      	cmp	r3, #32
 8005170:	d0f0      	beq.n	8005154 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005172:	2300      	movs	r3, #0
}
 8005174:	4618      	mov	r0, r3
 8005176:	3714      	adds	r7, #20
 8005178:	46bd      	mov	sp, r7
 800517a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517e:	4770      	bx	lr
 8005180:	00030d40 	.word	0x00030d40

08005184 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005184:	b480      	push	{r7}
 8005186:	b085      	sub	sp, #20
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800518c:	2300      	movs	r3, #0
 800518e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	3301      	adds	r3, #1
 8005194:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	4a11      	ldr	r2, [pc, #68]	; (80051e0 <USB_FlushRxFifo+0x5c>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d901      	bls.n	80051a2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800519e:	2303      	movs	r3, #3
 80051a0:	e018      	b.n	80051d4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	691b      	ldr	r3, [r3, #16]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	daf2      	bge.n	8005190 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80051aa:	2300      	movs	r3, #0
 80051ac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2210      	movs	r2, #16
 80051b2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	3301      	adds	r3, #1
 80051b8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	4a08      	ldr	r2, [pc, #32]	; (80051e0 <USB_FlushRxFifo+0x5c>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d901      	bls.n	80051c6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80051c2:	2303      	movs	r3, #3
 80051c4:	e006      	b.n	80051d4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	691b      	ldr	r3, [r3, #16]
 80051ca:	f003 0310 	and.w	r3, r3, #16
 80051ce:	2b10      	cmp	r3, #16
 80051d0:	d0f0      	beq.n	80051b4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80051d2:	2300      	movs	r3, #0
}
 80051d4:	4618      	mov	r0, r3
 80051d6:	3714      	adds	r7, #20
 80051d8:	46bd      	mov	sp, r7
 80051da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051de:	4770      	bx	lr
 80051e0:	00030d40 	.word	0x00030d40

080051e4 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b085      	sub	sp, #20
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
 80051ec:	460b      	mov	r3, r1
 80051ee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051fa:	681a      	ldr	r2, [r3, #0]
 80051fc:	78fb      	ldrb	r3, [r7, #3]
 80051fe:	68f9      	ldr	r1, [r7, #12]
 8005200:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005204:	4313      	orrs	r3, r2
 8005206:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005208:	2300      	movs	r3, #0
}
 800520a:	4618      	mov	r0, r3
 800520c:	3714      	adds	r7, #20
 800520e:	46bd      	mov	sp, r7
 8005210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005214:	4770      	bx	lr

08005216 <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005216:	b480      	push	{r7}
 8005218:	b087      	sub	sp, #28
 800521a:	af00      	add	r7, sp, #0
 800521c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005228:	689b      	ldr	r3, [r3, #8]
 800522a:	f003 0306 	and.w	r3, r3, #6
 800522e:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	2b02      	cmp	r3, #2
 8005234:	d002      	beq.n	800523c <USB_GetDevSpeed+0x26>
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	2b06      	cmp	r3, #6
 800523a:	d102      	bne.n	8005242 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800523c:	2302      	movs	r3, #2
 800523e:	75fb      	strb	r3, [r7, #23]
 8005240:	e001      	b.n	8005246 <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 8005242:	230f      	movs	r3, #15
 8005244:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005246:	7dfb      	ldrb	r3, [r7, #23]
}
 8005248:	4618      	mov	r0, r3
 800524a:	371c      	adds	r7, #28
 800524c:	46bd      	mov	sp, r7
 800524e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005252:	4770      	bx	lr

08005254 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005254:	b480      	push	{r7}
 8005256:	b085      	sub	sp, #20
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
 800525c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	781b      	ldrb	r3, [r3, #0]
 8005266:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	785b      	ldrb	r3, [r3, #1]
 800526c:	2b01      	cmp	r3, #1
 800526e:	d13a      	bne.n	80052e6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005276:	69da      	ldr	r2, [r3, #28]
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	781b      	ldrb	r3, [r3, #0]
 800527c:	f003 030f 	and.w	r3, r3, #15
 8005280:	2101      	movs	r1, #1
 8005282:	fa01 f303 	lsl.w	r3, r1, r3
 8005286:	b29b      	uxth	r3, r3
 8005288:	68f9      	ldr	r1, [r7, #12]
 800528a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800528e:	4313      	orrs	r3, r2
 8005290:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	015a      	lsls	r2, r3, #5
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	4413      	add	r3, r2
 800529a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d155      	bne.n	8005354 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	015a      	lsls	r2, r3, #5
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	4413      	add	r3, r2
 80052b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052b4:	681a      	ldr	r2, [r3, #0]
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	689b      	ldr	r3, [r3, #8]
 80052ba:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	791b      	ldrb	r3, [r3, #4]
 80052c2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80052c4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	059b      	lsls	r3, r3, #22
 80052ca:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80052cc:	4313      	orrs	r3, r2
 80052ce:	68ba      	ldr	r2, [r7, #8]
 80052d0:	0151      	lsls	r1, r2, #5
 80052d2:	68fa      	ldr	r2, [r7, #12]
 80052d4:	440a      	add	r2, r1
 80052d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052e2:	6013      	str	r3, [r2, #0]
 80052e4:	e036      	b.n	8005354 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052ec:	69da      	ldr	r2, [r3, #28]
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	781b      	ldrb	r3, [r3, #0]
 80052f2:	f003 030f 	and.w	r3, r3, #15
 80052f6:	2101      	movs	r1, #1
 80052f8:	fa01 f303 	lsl.w	r3, r1, r3
 80052fc:	041b      	lsls	r3, r3, #16
 80052fe:	68f9      	ldr	r1, [r7, #12]
 8005300:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005304:	4313      	orrs	r3, r2
 8005306:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	015a      	lsls	r2, r3, #5
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	4413      	add	r3, r2
 8005310:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800531a:	2b00      	cmp	r3, #0
 800531c:	d11a      	bne.n	8005354 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	015a      	lsls	r2, r3, #5
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	4413      	add	r3, r2
 8005326:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800532a:	681a      	ldr	r2, [r3, #0]
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	689b      	ldr	r3, [r3, #8]
 8005330:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	791b      	ldrb	r3, [r3, #4]
 8005338:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800533a:	430b      	orrs	r3, r1
 800533c:	4313      	orrs	r3, r2
 800533e:	68ba      	ldr	r2, [r7, #8]
 8005340:	0151      	lsls	r1, r2, #5
 8005342:	68fa      	ldr	r2, [r7, #12]
 8005344:	440a      	add	r2, r1
 8005346:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800534a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800534e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005352:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005354:	2300      	movs	r3, #0
}
 8005356:	4618      	mov	r0, r3
 8005358:	3714      	adds	r7, #20
 800535a:	46bd      	mov	sp, r7
 800535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005360:	4770      	bx	lr
	...

08005364 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005364:	b480      	push	{r7}
 8005366:	b085      	sub	sp, #20
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
 800536c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	781b      	ldrb	r3, [r3, #0]
 8005376:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	785b      	ldrb	r3, [r3, #1]
 800537c:	2b01      	cmp	r3, #1
 800537e:	d161      	bne.n	8005444 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	015a      	lsls	r2, r3, #5
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	4413      	add	r3, r2
 8005388:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005392:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005396:	d11f      	bne.n	80053d8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	015a      	lsls	r2, r3, #5
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	4413      	add	r3, r2
 80053a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	68ba      	ldr	r2, [r7, #8]
 80053a8:	0151      	lsls	r1, r2, #5
 80053aa:	68fa      	ldr	r2, [r7, #12]
 80053ac:	440a      	add	r2, r1
 80053ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053b2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80053b6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	015a      	lsls	r2, r3, #5
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	4413      	add	r3, r2
 80053c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	68ba      	ldr	r2, [r7, #8]
 80053c8:	0151      	lsls	r1, r2, #5
 80053ca:	68fa      	ldr	r2, [r7, #12]
 80053cc:	440a      	add	r2, r1
 80053ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053d2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80053d6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	781b      	ldrb	r3, [r3, #0]
 80053e4:	f003 030f 	and.w	r3, r3, #15
 80053e8:	2101      	movs	r1, #1
 80053ea:	fa01 f303 	lsl.w	r3, r1, r3
 80053ee:	b29b      	uxth	r3, r3
 80053f0:	43db      	mvns	r3, r3
 80053f2:	68f9      	ldr	r1, [r7, #12]
 80053f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80053f8:	4013      	ands	r3, r2
 80053fa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005402:	69da      	ldr	r2, [r3, #28]
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	781b      	ldrb	r3, [r3, #0]
 8005408:	f003 030f 	and.w	r3, r3, #15
 800540c:	2101      	movs	r1, #1
 800540e:	fa01 f303 	lsl.w	r3, r1, r3
 8005412:	b29b      	uxth	r3, r3
 8005414:	43db      	mvns	r3, r3
 8005416:	68f9      	ldr	r1, [r7, #12]
 8005418:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800541c:	4013      	ands	r3, r2
 800541e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	015a      	lsls	r2, r3, #5
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	4413      	add	r3, r2
 8005428:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800542c:	681a      	ldr	r2, [r3, #0]
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	0159      	lsls	r1, r3, #5
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	440b      	add	r3, r1
 8005436:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800543a:	4619      	mov	r1, r3
 800543c:	4b35      	ldr	r3, [pc, #212]	; (8005514 <USB_DeactivateEndpoint+0x1b0>)
 800543e:	4013      	ands	r3, r2
 8005440:	600b      	str	r3, [r1, #0]
 8005442:	e060      	b.n	8005506 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	015a      	lsls	r2, r3, #5
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	4413      	add	r3, r2
 800544c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005456:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800545a:	d11f      	bne.n	800549c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	015a      	lsls	r2, r3, #5
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	4413      	add	r3, r2
 8005464:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	68ba      	ldr	r2, [r7, #8]
 800546c:	0151      	lsls	r1, r2, #5
 800546e:	68fa      	ldr	r2, [r7, #12]
 8005470:	440a      	add	r2, r1
 8005472:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005476:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800547a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	015a      	lsls	r2, r3, #5
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	4413      	add	r3, r2
 8005484:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	68ba      	ldr	r2, [r7, #8]
 800548c:	0151      	lsls	r1, r2, #5
 800548e:	68fa      	ldr	r2, [r7, #12]
 8005490:	440a      	add	r2, r1
 8005492:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005496:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800549a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	781b      	ldrb	r3, [r3, #0]
 80054a8:	f003 030f 	and.w	r3, r3, #15
 80054ac:	2101      	movs	r1, #1
 80054ae:	fa01 f303 	lsl.w	r3, r1, r3
 80054b2:	041b      	lsls	r3, r3, #16
 80054b4:	43db      	mvns	r3, r3
 80054b6:	68f9      	ldr	r1, [r7, #12]
 80054b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80054bc:	4013      	ands	r3, r2
 80054be:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054c6:	69da      	ldr	r2, [r3, #28]
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	781b      	ldrb	r3, [r3, #0]
 80054cc:	f003 030f 	and.w	r3, r3, #15
 80054d0:	2101      	movs	r1, #1
 80054d2:	fa01 f303 	lsl.w	r3, r1, r3
 80054d6:	041b      	lsls	r3, r3, #16
 80054d8:	43db      	mvns	r3, r3
 80054da:	68f9      	ldr	r1, [r7, #12]
 80054dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80054e0:	4013      	ands	r3, r2
 80054e2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	015a      	lsls	r2, r3, #5
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	4413      	add	r3, r2
 80054ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054f0:	681a      	ldr	r2, [r3, #0]
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	0159      	lsls	r1, r3, #5
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	440b      	add	r3, r1
 80054fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054fe:	4619      	mov	r1, r3
 8005500:	4b05      	ldr	r3, [pc, #20]	; (8005518 <USB_DeactivateEndpoint+0x1b4>)
 8005502:	4013      	ands	r3, r2
 8005504:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005506:	2300      	movs	r3, #0
}
 8005508:	4618      	mov	r0, r3
 800550a:	3714      	adds	r7, #20
 800550c:	46bd      	mov	sp, r7
 800550e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005512:	4770      	bx	lr
 8005514:	ec337800 	.word	0xec337800
 8005518:	eff37800 	.word	0xeff37800

0800551c <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b086      	sub	sp, #24
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
 8005524:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	781b      	ldrb	r3, [r3, #0]
 800552e:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	785b      	ldrb	r3, [r3, #1]
 8005534:	2b01      	cmp	r3, #1
 8005536:	f040 8128 	bne.w	800578a <USB_EPStartXfer+0x26e>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	691b      	ldr	r3, [r3, #16]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d132      	bne.n	80055a8 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005542:	693b      	ldr	r3, [r7, #16]
 8005544:	015a      	lsls	r2, r3, #5
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	4413      	add	r3, r2
 800554a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800554e:	691b      	ldr	r3, [r3, #16]
 8005550:	693a      	ldr	r2, [r7, #16]
 8005552:	0151      	lsls	r1, r2, #5
 8005554:	697a      	ldr	r2, [r7, #20]
 8005556:	440a      	add	r2, r1
 8005558:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800555c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005560:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005564:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	015a      	lsls	r2, r3, #5
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	4413      	add	r3, r2
 800556e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005572:	691b      	ldr	r3, [r3, #16]
 8005574:	693a      	ldr	r2, [r7, #16]
 8005576:	0151      	lsls	r1, r2, #5
 8005578:	697a      	ldr	r2, [r7, #20]
 800557a:	440a      	add	r2, r1
 800557c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005580:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005584:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	015a      	lsls	r2, r3, #5
 800558a:	697b      	ldr	r3, [r7, #20]
 800558c:	4413      	add	r3, r2
 800558e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005592:	691b      	ldr	r3, [r3, #16]
 8005594:	693a      	ldr	r2, [r7, #16]
 8005596:	0151      	lsls	r1, r2, #5
 8005598:	697a      	ldr	r2, [r7, #20]
 800559a:	440a      	add	r2, r1
 800559c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055a0:	0cdb      	lsrs	r3, r3, #19
 80055a2:	04db      	lsls	r3, r3, #19
 80055a4:	6113      	str	r3, [r2, #16]
 80055a6:	e092      	b.n	80056ce <USB_EPStartXfer+0x1b2>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80055a8:	693b      	ldr	r3, [r7, #16]
 80055aa:	015a      	lsls	r2, r3, #5
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	4413      	add	r3, r2
 80055b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055b4:	691b      	ldr	r3, [r3, #16]
 80055b6:	693a      	ldr	r2, [r7, #16]
 80055b8:	0151      	lsls	r1, r2, #5
 80055ba:	697a      	ldr	r2, [r7, #20]
 80055bc:	440a      	add	r2, r1
 80055be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055c2:	0cdb      	lsrs	r3, r3, #19
 80055c4:	04db      	lsls	r3, r3, #19
 80055c6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80055c8:	693b      	ldr	r3, [r7, #16]
 80055ca:	015a      	lsls	r2, r3, #5
 80055cc:	697b      	ldr	r3, [r7, #20]
 80055ce:	4413      	add	r3, r2
 80055d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055d4:	691b      	ldr	r3, [r3, #16]
 80055d6:	693a      	ldr	r2, [r7, #16]
 80055d8:	0151      	lsls	r1, r2, #5
 80055da:	697a      	ldr	r2, [r7, #20]
 80055dc:	440a      	add	r2, r1
 80055de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055e2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80055e6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80055ea:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80055ec:	693b      	ldr	r3, [r7, #16]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d11a      	bne.n	8005628 <USB_EPStartXfer+0x10c>
      {
        if (ep->xfer_len > ep->maxpacket)
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	691a      	ldr	r2, [r3, #16]
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	689b      	ldr	r3, [r3, #8]
 80055fa:	429a      	cmp	r2, r3
 80055fc:	d903      	bls.n	8005606 <USB_EPStartXfer+0xea>
        {
          ep->xfer_len = ep->maxpacket;
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	689a      	ldr	r2, [r3, #8]
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	015a      	lsls	r2, r3, #5
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	4413      	add	r3, r2
 800560e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005612:	691b      	ldr	r3, [r3, #16]
 8005614:	693a      	ldr	r2, [r7, #16]
 8005616:	0151      	lsls	r1, r2, #5
 8005618:	697a      	ldr	r2, [r7, #20]
 800561a:	440a      	add	r2, r1
 800561c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005620:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005624:	6113      	str	r3, [r2, #16]
 8005626:	e01b      	b.n	8005660 <USB_EPStartXfer+0x144>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005628:	693b      	ldr	r3, [r7, #16]
 800562a:	015a      	lsls	r2, r3, #5
 800562c:	697b      	ldr	r3, [r7, #20]
 800562e:	4413      	add	r3, r2
 8005630:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005634:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	6919      	ldr	r1, [r3, #16]
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	689b      	ldr	r3, [r3, #8]
 800563e:	440b      	add	r3, r1
 8005640:	1e59      	subs	r1, r3, #1
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	689b      	ldr	r3, [r3, #8]
 8005646:	fbb1 f3f3 	udiv	r3, r1, r3
 800564a:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800564c:	4b8d      	ldr	r3, [pc, #564]	; (8005884 <USB_EPStartXfer+0x368>)
 800564e:	400b      	ands	r3, r1
 8005650:	6939      	ldr	r1, [r7, #16]
 8005652:	0148      	lsls	r0, r1, #5
 8005654:	6979      	ldr	r1, [r7, #20]
 8005656:	4401      	add	r1, r0
 8005658:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800565c:	4313      	orrs	r3, r2
 800565e:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005660:	693b      	ldr	r3, [r7, #16]
 8005662:	015a      	lsls	r2, r3, #5
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	4413      	add	r3, r2
 8005668:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800566c:	691a      	ldr	r2, [r3, #16]
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	691b      	ldr	r3, [r3, #16]
 8005672:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005676:	6939      	ldr	r1, [r7, #16]
 8005678:	0148      	lsls	r0, r1, #5
 800567a:	6979      	ldr	r1, [r7, #20]
 800567c:	4401      	add	r1, r0
 800567e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005682:	4313      	orrs	r3, r2
 8005684:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	791b      	ldrb	r3, [r3, #4]
 800568a:	2b01      	cmp	r3, #1
 800568c:	d11f      	bne.n	80056ce <USB_EPStartXfer+0x1b2>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800568e:	693b      	ldr	r3, [r7, #16]
 8005690:	015a      	lsls	r2, r3, #5
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	4413      	add	r3, r2
 8005696:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800569a:	691b      	ldr	r3, [r3, #16]
 800569c:	693a      	ldr	r2, [r7, #16]
 800569e:	0151      	lsls	r1, r2, #5
 80056a0:	697a      	ldr	r2, [r7, #20]
 80056a2:	440a      	add	r2, r1
 80056a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056a8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80056ac:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	015a      	lsls	r2, r3, #5
 80056b2:	697b      	ldr	r3, [r7, #20]
 80056b4:	4413      	add	r3, r2
 80056b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056ba:	691b      	ldr	r3, [r3, #16]
 80056bc:	693a      	ldr	r2, [r7, #16]
 80056be:	0151      	lsls	r1, r2, #5
 80056c0:	697a      	ldr	r2, [r7, #20]
 80056c2:	440a      	add	r2, r1
 80056c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056c8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80056cc:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80056ce:	693b      	ldr	r3, [r7, #16]
 80056d0:	015a      	lsls	r2, r3, #5
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	4413      	add	r3, r2
 80056d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	693a      	ldr	r2, [r7, #16]
 80056de:	0151      	lsls	r1, r2, #5
 80056e0:	697a      	ldr	r2, [r7, #20]
 80056e2:	440a      	add	r2, r1
 80056e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056e8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80056ec:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	791b      	ldrb	r3, [r3, #4]
 80056f2:	2b01      	cmp	r3, #1
 80056f4:	d015      	beq.n	8005722 <USB_EPStartXfer+0x206>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	691b      	ldr	r3, [r3, #16]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	f000 8139 	beq.w	8005972 <USB_EPStartXfer+0x456>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005700:	697b      	ldr	r3, [r7, #20]
 8005702:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005706:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	781b      	ldrb	r3, [r3, #0]
 800570c:	f003 030f 	and.w	r3, r3, #15
 8005710:	2101      	movs	r1, #1
 8005712:	fa01 f303 	lsl.w	r3, r1, r3
 8005716:	6979      	ldr	r1, [r7, #20]
 8005718:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800571c:	4313      	orrs	r3, r2
 800571e:	634b      	str	r3, [r1, #52]	; 0x34
 8005720:	e127      	b.n	8005972 <USB_EPStartXfer+0x456>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005728:	689b      	ldr	r3, [r3, #8]
 800572a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800572e:	2b00      	cmp	r3, #0
 8005730:	d110      	bne.n	8005754 <USB_EPStartXfer+0x238>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	015a      	lsls	r2, r3, #5
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	4413      	add	r3, r2
 800573a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	693a      	ldr	r2, [r7, #16]
 8005742:	0151      	lsls	r1, r2, #5
 8005744:	697a      	ldr	r2, [r7, #20]
 8005746:	440a      	add	r2, r1
 8005748:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800574c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005750:	6013      	str	r3, [r2, #0]
 8005752:	e00f      	b.n	8005774 <USB_EPStartXfer+0x258>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005754:	693b      	ldr	r3, [r7, #16]
 8005756:	015a      	lsls	r2, r3, #5
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	4413      	add	r3, r2
 800575c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	693a      	ldr	r2, [r7, #16]
 8005764:	0151      	lsls	r1, r2, #5
 8005766:	697a      	ldr	r2, [r7, #20]
 8005768:	440a      	add	r2, r1
 800576a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800576e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005772:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	68d9      	ldr	r1, [r3, #12]
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	781a      	ldrb	r2, [r3, #0]
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	691b      	ldr	r3, [r3, #16]
 8005780:	b29b      	uxth	r3, r3
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	f000 f9a6 	bl	8005ad4 <USB_WritePacket>
 8005788:	e0f3      	b.n	8005972 <USB_EPStartXfer+0x456>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	015a      	lsls	r2, r3, #5
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	4413      	add	r3, r2
 8005792:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005796:	691b      	ldr	r3, [r3, #16]
 8005798:	693a      	ldr	r2, [r7, #16]
 800579a:	0151      	lsls	r1, r2, #5
 800579c:	697a      	ldr	r2, [r7, #20]
 800579e:	440a      	add	r2, r1
 80057a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057a4:	0cdb      	lsrs	r3, r3, #19
 80057a6:	04db      	lsls	r3, r3, #19
 80057a8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80057aa:	693b      	ldr	r3, [r7, #16]
 80057ac:	015a      	lsls	r2, r3, #5
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	4413      	add	r3, r2
 80057b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057b6:	691b      	ldr	r3, [r3, #16]
 80057b8:	693a      	ldr	r2, [r7, #16]
 80057ba:	0151      	lsls	r1, r2, #5
 80057bc:	697a      	ldr	r2, [r7, #20]
 80057be:	440a      	add	r2, r1
 80057c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057c4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80057c8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80057cc:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d12f      	bne.n	8005834 <USB_EPStartXfer+0x318>
    {
      if (ep->xfer_len > 0U)
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	691b      	ldr	r3, [r3, #16]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d003      	beq.n	80057e4 <USB_EPStartXfer+0x2c8>
      {
        ep->xfer_len = ep->maxpacket;
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	689a      	ldr	r2, [r3, #8]
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	689a      	ldr	r2, [r3, #8]
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	015a      	lsls	r2, r3, #5
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	4413      	add	r3, r2
 80057f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057f8:	691a      	ldr	r2, [r3, #16]
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	6a1b      	ldr	r3, [r3, #32]
 80057fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005802:	6939      	ldr	r1, [r7, #16]
 8005804:	0148      	lsls	r0, r1, #5
 8005806:	6979      	ldr	r1, [r7, #20]
 8005808:	4401      	add	r1, r0
 800580a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800580e:	4313      	orrs	r3, r2
 8005810:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	015a      	lsls	r2, r3, #5
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	4413      	add	r3, r2
 800581a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800581e:	691b      	ldr	r3, [r3, #16]
 8005820:	693a      	ldr	r2, [r7, #16]
 8005822:	0151      	lsls	r1, r2, #5
 8005824:	697a      	ldr	r2, [r7, #20]
 8005826:	440a      	add	r2, r1
 8005828:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800582c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005830:	6113      	str	r3, [r2, #16]
 8005832:	e061      	b.n	80058f8 <USB_EPStartXfer+0x3dc>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	691b      	ldr	r3, [r3, #16]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d125      	bne.n	8005888 <USB_EPStartXfer+0x36c>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	015a      	lsls	r2, r3, #5
 8005840:	697b      	ldr	r3, [r7, #20]
 8005842:	4413      	add	r3, r2
 8005844:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005848:	691a      	ldr	r2, [r3, #16]
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	689b      	ldr	r3, [r3, #8]
 800584e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005852:	6939      	ldr	r1, [r7, #16]
 8005854:	0148      	lsls	r0, r1, #5
 8005856:	6979      	ldr	r1, [r7, #20]
 8005858:	4401      	add	r1, r0
 800585a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800585e:	4313      	orrs	r3, r2
 8005860:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005862:	693b      	ldr	r3, [r7, #16]
 8005864:	015a      	lsls	r2, r3, #5
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	4413      	add	r3, r2
 800586a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800586e:	691b      	ldr	r3, [r3, #16]
 8005870:	693a      	ldr	r2, [r7, #16]
 8005872:	0151      	lsls	r1, r2, #5
 8005874:	697a      	ldr	r2, [r7, #20]
 8005876:	440a      	add	r2, r1
 8005878:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800587c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005880:	6113      	str	r3, [r2, #16]
 8005882:	e039      	b.n	80058f8 <USB_EPStartXfer+0x3dc>
 8005884:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	691a      	ldr	r2, [r3, #16]
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	689b      	ldr	r3, [r3, #8]
 8005890:	4413      	add	r3, r2
 8005892:	1e5a      	subs	r2, r3, #1
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	689b      	ldr	r3, [r3, #8]
 8005898:	fbb2 f3f3 	udiv	r3, r2, r3
 800589c:	81fb      	strh	r3, [r7, #14]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	689b      	ldr	r3, [r3, #8]
 80058a2:	89fa      	ldrh	r2, [r7, #14]
 80058a4:	fb03 f202 	mul.w	r2, r3, r2
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80058ac:	693b      	ldr	r3, [r7, #16]
 80058ae:	015a      	lsls	r2, r3, #5
 80058b0:	697b      	ldr	r3, [r7, #20]
 80058b2:	4413      	add	r3, r2
 80058b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058b8:	691a      	ldr	r2, [r3, #16]
 80058ba:	89fb      	ldrh	r3, [r7, #14]
 80058bc:	04d9      	lsls	r1, r3, #19
 80058be:	4b2f      	ldr	r3, [pc, #188]	; (800597c <USB_EPStartXfer+0x460>)
 80058c0:	400b      	ands	r3, r1
 80058c2:	6939      	ldr	r1, [r7, #16]
 80058c4:	0148      	lsls	r0, r1, #5
 80058c6:	6979      	ldr	r1, [r7, #20]
 80058c8:	4401      	add	r1, r0
 80058ca:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80058ce:	4313      	orrs	r3, r2
 80058d0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80058d2:	693b      	ldr	r3, [r7, #16]
 80058d4:	015a      	lsls	r2, r3, #5
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	4413      	add	r3, r2
 80058da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058de:	691a      	ldr	r2, [r3, #16]
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	6a1b      	ldr	r3, [r3, #32]
 80058e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80058e8:	6939      	ldr	r1, [r7, #16]
 80058ea:	0148      	lsls	r0, r1, #5
 80058ec:	6979      	ldr	r1, [r7, #20]
 80058ee:	4401      	add	r1, r0
 80058f0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80058f4:	4313      	orrs	r3, r2
 80058f6:	610b      	str	r3, [r1, #16]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	791b      	ldrb	r3, [r3, #4]
 80058fc:	2b01      	cmp	r3, #1
 80058fe:	d128      	bne.n	8005952 <USB_EPStartXfer+0x436>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005906:	689b      	ldr	r3, [r3, #8]
 8005908:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800590c:	2b00      	cmp	r3, #0
 800590e:	d110      	bne.n	8005932 <USB_EPStartXfer+0x416>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005910:	693b      	ldr	r3, [r7, #16]
 8005912:	015a      	lsls	r2, r3, #5
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	4413      	add	r3, r2
 8005918:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	693a      	ldr	r2, [r7, #16]
 8005920:	0151      	lsls	r1, r2, #5
 8005922:	697a      	ldr	r2, [r7, #20]
 8005924:	440a      	add	r2, r1
 8005926:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800592a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800592e:	6013      	str	r3, [r2, #0]
 8005930:	e00f      	b.n	8005952 <USB_EPStartXfer+0x436>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005932:	693b      	ldr	r3, [r7, #16]
 8005934:	015a      	lsls	r2, r3, #5
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	4413      	add	r3, r2
 800593a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	693a      	ldr	r2, [r7, #16]
 8005942:	0151      	lsls	r1, r2, #5
 8005944:	697a      	ldr	r2, [r7, #20]
 8005946:	440a      	add	r2, r1
 8005948:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800594c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005950:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005952:	693b      	ldr	r3, [r7, #16]
 8005954:	015a      	lsls	r2, r3, #5
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	4413      	add	r3, r2
 800595a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	693a      	ldr	r2, [r7, #16]
 8005962:	0151      	lsls	r1, r2, #5
 8005964:	697a      	ldr	r2, [r7, #20]
 8005966:	440a      	add	r2, r1
 8005968:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800596c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005970:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005972:	2300      	movs	r3, #0
}
 8005974:	4618      	mov	r0, r3
 8005976:	3718      	adds	r7, #24
 8005978:	46bd      	mov	sp, r7
 800597a:	bd80      	pop	{r7, pc}
 800597c:	1ff80000 	.word	0x1ff80000

08005980 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005980:	b480      	push	{r7}
 8005982:	b087      	sub	sp, #28
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
 8005988:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800598a:	2300      	movs	r3, #0
 800598c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800598e:	2300      	movs	r3, #0
 8005990:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	785b      	ldrb	r3, [r3, #1]
 800599a:	2b01      	cmp	r3, #1
 800599c:	d14a      	bne.n	8005a34 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	781b      	ldrb	r3, [r3, #0]
 80059a2:	015a      	lsls	r2, r3, #5
 80059a4:	693b      	ldr	r3, [r7, #16]
 80059a6:	4413      	add	r3, r2
 80059a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80059b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80059b6:	f040 8086 	bne.w	8005ac6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	781b      	ldrb	r3, [r3, #0]
 80059be:	015a      	lsls	r2, r3, #5
 80059c0:	693b      	ldr	r3, [r7, #16]
 80059c2:	4413      	add	r3, r2
 80059c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	683a      	ldr	r2, [r7, #0]
 80059cc:	7812      	ldrb	r2, [r2, #0]
 80059ce:	0151      	lsls	r1, r2, #5
 80059d0:	693a      	ldr	r2, [r7, #16]
 80059d2:	440a      	add	r2, r1
 80059d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059d8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80059dc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	781b      	ldrb	r3, [r3, #0]
 80059e2:	015a      	lsls	r2, r3, #5
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	4413      	add	r3, r2
 80059e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	683a      	ldr	r2, [r7, #0]
 80059f0:	7812      	ldrb	r2, [r2, #0]
 80059f2:	0151      	lsls	r1, r2, #5
 80059f4:	693a      	ldr	r2, [r7, #16]
 80059f6:	440a      	add	r2, r1
 80059f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059fc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005a00:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	3301      	adds	r3, #1
 8005a06:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	f242 7210 	movw	r2, #10000	; 0x2710
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d902      	bls.n	8005a18 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005a12:	2301      	movs	r3, #1
 8005a14:	75fb      	strb	r3, [r7, #23]
          break;
 8005a16:	e056      	b.n	8005ac6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	781b      	ldrb	r3, [r3, #0]
 8005a1c:	015a      	lsls	r2, r3, #5
 8005a1e:	693b      	ldr	r3, [r7, #16]
 8005a20:	4413      	add	r3, r2
 8005a22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a2c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a30:	d0e7      	beq.n	8005a02 <USB_EPStopXfer+0x82>
 8005a32:	e048      	b.n	8005ac6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	781b      	ldrb	r3, [r3, #0]
 8005a38:	015a      	lsls	r2, r3, #5
 8005a3a:	693b      	ldr	r3, [r7, #16]
 8005a3c:	4413      	add	r3, r2
 8005a3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a48:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a4c:	d13b      	bne.n	8005ac6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	781b      	ldrb	r3, [r3, #0]
 8005a52:	015a      	lsls	r2, r3, #5
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	4413      	add	r3, r2
 8005a58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	683a      	ldr	r2, [r7, #0]
 8005a60:	7812      	ldrb	r2, [r2, #0]
 8005a62:	0151      	lsls	r1, r2, #5
 8005a64:	693a      	ldr	r2, [r7, #16]
 8005a66:	440a      	add	r2, r1
 8005a68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a6c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005a70:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	781b      	ldrb	r3, [r3, #0]
 8005a76:	015a      	lsls	r2, r3, #5
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	4413      	add	r3, r2
 8005a7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	683a      	ldr	r2, [r7, #0]
 8005a84:	7812      	ldrb	r2, [r2, #0]
 8005a86:	0151      	lsls	r1, r2, #5
 8005a88:	693a      	ldr	r2, [r7, #16]
 8005a8a:	440a      	add	r2, r1
 8005a8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a90:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005a94:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	3301      	adds	r3, #1
 8005a9a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	f242 7210 	movw	r2, #10000	; 0x2710
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d902      	bls.n	8005aac <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	75fb      	strb	r3, [r7, #23]
          break;
 8005aaa:	e00c      	b.n	8005ac6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	781b      	ldrb	r3, [r3, #0]
 8005ab0:	015a      	lsls	r2, r3, #5
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	4413      	add	r3, r2
 8005ab6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ac0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ac4:	d0e7      	beq.n	8005a96 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005ac6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ac8:	4618      	mov	r0, r3
 8005aca:	371c      	adds	r7, #28
 8005acc:	46bd      	mov	sp, r7
 8005ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad2:	4770      	bx	lr

08005ad4 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b089      	sub	sp, #36	; 0x24
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	60f8      	str	r0, [r7, #12]
 8005adc:	60b9      	str	r1, [r7, #8]
 8005ade:	4611      	mov	r1, r2
 8005ae0:	461a      	mov	r2, r3
 8005ae2:	460b      	mov	r3, r1
 8005ae4:	71fb      	strb	r3, [r7, #7]
 8005ae6:	4613      	mov	r3, r2
 8005ae8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8005af2:	88bb      	ldrh	r3, [r7, #4]
 8005af4:	3303      	adds	r3, #3
 8005af6:	089b      	lsrs	r3, r3, #2
 8005af8:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8005afa:	2300      	movs	r3, #0
 8005afc:	61bb      	str	r3, [r7, #24]
 8005afe:	e018      	b.n	8005b32 <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005b00:	79fb      	ldrb	r3, [r7, #7]
 8005b02:	031a      	lsls	r2, r3, #12
 8005b04:	697b      	ldr	r3, [r7, #20]
 8005b06:	4413      	add	r3, r2
 8005b08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b0c:	461a      	mov	r2, r3
 8005b0e:	69fb      	ldr	r3, [r7, #28]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	6013      	str	r3, [r2, #0]
    pSrc++;
 8005b14:	69fb      	ldr	r3, [r7, #28]
 8005b16:	3301      	adds	r3, #1
 8005b18:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8005b1a:	69fb      	ldr	r3, [r7, #28]
 8005b1c:	3301      	adds	r3, #1
 8005b1e:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8005b20:	69fb      	ldr	r3, [r7, #28]
 8005b22:	3301      	adds	r3, #1
 8005b24:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8005b26:	69fb      	ldr	r3, [r7, #28]
 8005b28:	3301      	adds	r3, #1
 8005b2a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005b2c:	69bb      	ldr	r3, [r7, #24]
 8005b2e:	3301      	adds	r3, #1
 8005b30:	61bb      	str	r3, [r7, #24]
 8005b32:	69ba      	ldr	r2, [r7, #24]
 8005b34:	693b      	ldr	r3, [r7, #16]
 8005b36:	429a      	cmp	r2, r3
 8005b38:	d3e2      	bcc.n	8005b00 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8005b3a:	2300      	movs	r3, #0
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	3724      	adds	r7, #36	; 0x24
 8005b40:	46bd      	mov	sp, r7
 8005b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b46:	4770      	bx	lr

08005b48 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b08b      	sub	sp, #44	; 0x2c
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	60f8      	str	r0, [r7, #12]
 8005b50:	60b9      	str	r1, [r7, #8]
 8005b52:	4613      	mov	r3, r2
 8005b54:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005b5e:	88fb      	ldrh	r3, [r7, #6]
 8005b60:	089b      	lsrs	r3, r3, #2
 8005b62:	b29b      	uxth	r3, r3
 8005b64:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005b66:	88fb      	ldrh	r3, [r7, #6]
 8005b68:	f003 0303 	and.w	r3, r3, #3
 8005b6c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005b6e:	2300      	movs	r3, #0
 8005b70:	623b      	str	r3, [r7, #32]
 8005b72:	e014      	b.n	8005b9e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005b74:	69bb      	ldr	r3, [r7, #24]
 8005b76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b7a:	681a      	ldr	r2, [r3, #0]
 8005b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b7e:	601a      	str	r2, [r3, #0]
    pDest++;
 8005b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b82:	3301      	adds	r3, #1
 8005b84:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b88:	3301      	adds	r3, #1
 8005b8a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b8e:	3301      	adds	r3, #1
 8005b90:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b94:	3301      	adds	r3, #1
 8005b96:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005b98:	6a3b      	ldr	r3, [r7, #32]
 8005b9a:	3301      	adds	r3, #1
 8005b9c:	623b      	str	r3, [r7, #32]
 8005b9e:	6a3a      	ldr	r2, [r7, #32]
 8005ba0:	697b      	ldr	r3, [r7, #20]
 8005ba2:	429a      	cmp	r2, r3
 8005ba4:	d3e6      	bcc.n	8005b74 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005ba6:	8bfb      	ldrh	r3, [r7, #30]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d01e      	beq.n	8005bea <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005bac:	2300      	movs	r3, #0
 8005bae:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005bb0:	69bb      	ldr	r3, [r7, #24]
 8005bb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005bb6:	461a      	mov	r2, r3
 8005bb8:	f107 0310 	add.w	r3, r7, #16
 8005bbc:	6812      	ldr	r2, [r2, #0]
 8005bbe:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005bc0:	693a      	ldr	r2, [r7, #16]
 8005bc2:	6a3b      	ldr	r3, [r7, #32]
 8005bc4:	b2db      	uxtb	r3, r3
 8005bc6:	00db      	lsls	r3, r3, #3
 8005bc8:	fa22 f303 	lsr.w	r3, r2, r3
 8005bcc:	b2da      	uxtb	r2, r3
 8005bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd0:	701a      	strb	r2, [r3, #0]
      i++;
 8005bd2:	6a3b      	ldr	r3, [r7, #32]
 8005bd4:	3301      	adds	r3, #1
 8005bd6:	623b      	str	r3, [r7, #32]
      pDest++;
 8005bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bda:	3301      	adds	r3, #1
 8005bdc:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005bde:	8bfb      	ldrh	r3, [r7, #30]
 8005be0:	3b01      	subs	r3, #1
 8005be2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005be4:	8bfb      	ldrh	r3, [r7, #30]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d1ea      	bne.n	8005bc0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005bec:	4618      	mov	r0, r3
 8005bee:	372c      	adds	r7, #44	; 0x2c
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf6:	4770      	bx	lr

08005bf8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b085      	sub	sp, #20
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
 8005c00:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	781b      	ldrb	r3, [r3, #0]
 8005c0a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	785b      	ldrb	r3, [r3, #1]
 8005c10:	2b01      	cmp	r3, #1
 8005c12:	d12c      	bne.n	8005c6e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	015a      	lsls	r2, r3, #5
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	4413      	add	r3, r2
 8005c1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	db12      	blt.n	8005c4c <USB_EPSetStall+0x54>
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d00f      	beq.n	8005c4c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	015a      	lsls	r2, r3, #5
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	4413      	add	r3, r2
 8005c34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	68ba      	ldr	r2, [r7, #8]
 8005c3c:	0151      	lsls	r1, r2, #5
 8005c3e:	68fa      	ldr	r2, [r7, #12]
 8005c40:	440a      	add	r2, r1
 8005c42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c46:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005c4a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	015a      	lsls	r2, r3, #5
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	4413      	add	r3, r2
 8005c54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	68ba      	ldr	r2, [r7, #8]
 8005c5c:	0151      	lsls	r1, r2, #5
 8005c5e:	68fa      	ldr	r2, [r7, #12]
 8005c60:	440a      	add	r2, r1
 8005c62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c66:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005c6a:	6013      	str	r3, [r2, #0]
 8005c6c:	e02b      	b.n	8005cc6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	015a      	lsls	r2, r3, #5
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	4413      	add	r3, r2
 8005c76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	db12      	blt.n	8005ca6 <USB_EPSetStall+0xae>
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d00f      	beq.n	8005ca6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	015a      	lsls	r2, r3, #5
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	4413      	add	r3, r2
 8005c8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	68ba      	ldr	r2, [r7, #8]
 8005c96:	0151      	lsls	r1, r2, #5
 8005c98:	68fa      	ldr	r2, [r7, #12]
 8005c9a:	440a      	add	r2, r1
 8005c9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ca0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005ca4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	015a      	lsls	r2, r3, #5
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	4413      	add	r3, r2
 8005cae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	68ba      	ldr	r2, [r7, #8]
 8005cb6:	0151      	lsls	r1, r2, #5
 8005cb8:	68fa      	ldr	r2, [r7, #12]
 8005cba:	440a      	add	r2, r1
 8005cbc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cc0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005cc4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005cc6:	2300      	movs	r3, #0
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	3714      	adds	r7, #20
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd2:	4770      	bx	lr

08005cd4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b085      	sub	sp, #20
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
 8005cdc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	781b      	ldrb	r3, [r3, #0]
 8005ce6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	785b      	ldrb	r3, [r3, #1]
 8005cec:	2b01      	cmp	r3, #1
 8005cee:	d128      	bne.n	8005d42 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	015a      	lsls	r2, r3, #5
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	4413      	add	r3, r2
 8005cf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	68ba      	ldr	r2, [r7, #8]
 8005d00:	0151      	lsls	r1, r2, #5
 8005d02:	68fa      	ldr	r2, [r7, #12]
 8005d04:	440a      	add	r2, r1
 8005d06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d0a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005d0e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	791b      	ldrb	r3, [r3, #4]
 8005d14:	2b03      	cmp	r3, #3
 8005d16:	d003      	beq.n	8005d20 <USB_EPClearStall+0x4c>
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	791b      	ldrb	r3, [r3, #4]
 8005d1c:	2b02      	cmp	r3, #2
 8005d1e:	d138      	bne.n	8005d92 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	015a      	lsls	r2, r3, #5
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	4413      	add	r3, r2
 8005d28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	68ba      	ldr	r2, [r7, #8]
 8005d30:	0151      	lsls	r1, r2, #5
 8005d32:	68fa      	ldr	r2, [r7, #12]
 8005d34:	440a      	add	r2, r1
 8005d36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d3e:	6013      	str	r3, [r2, #0]
 8005d40:	e027      	b.n	8005d92 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	015a      	lsls	r2, r3, #5
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	4413      	add	r3, r2
 8005d4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	68ba      	ldr	r2, [r7, #8]
 8005d52:	0151      	lsls	r1, r2, #5
 8005d54:	68fa      	ldr	r2, [r7, #12]
 8005d56:	440a      	add	r2, r1
 8005d58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d5c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005d60:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	791b      	ldrb	r3, [r3, #4]
 8005d66:	2b03      	cmp	r3, #3
 8005d68:	d003      	beq.n	8005d72 <USB_EPClearStall+0x9e>
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	791b      	ldrb	r3, [r3, #4]
 8005d6e:	2b02      	cmp	r3, #2
 8005d70:	d10f      	bne.n	8005d92 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	015a      	lsls	r2, r3, #5
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	4413      	add	r3, r2
 8005d7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	68ba      	ldr	r2, [r7, #8]
 8005d82:	0151      	lsls	r1, r2, #5
 8005d84:	68fa      	ldr	r2, [r7, #12]
 8005d86:	440a      	add	r2, r1
 8005d88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d90:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005d92:	2300      	movs	r3, #0
}
 8005d94:	4618      	mov	r0, r3
 8005d96:	3714      	adds	r7, #20
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9e:	4770      	bx	lr

08005da0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005da0:	b480      	push	{r7}
 8005da2:	b085      	sub	sp, #20
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
 8005da8:	460b      	mov	r3, r1
 8005daa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	68fa      	ldr	r2, [r7, #12]
 8005dba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005dbe:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005dc2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dca:	681a      	ldr	r2, [r3, #0]
 8005dcc:	78fb      	ldrb	r3, [r7, #3]
 8005dce:	011b      	lsls	r3, r3, #4
 8005dd0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005dd4:	68f9      	ldr	r1, [r7, #12]
 8005dd6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005dde:	2300      	movs	r3, #0
}
 8005de0:	4618      	mov	r0, r3
 8005de2:	3714      	adds	r7, #20
 8005de4:	46bd      	mov	sp, r7
 8005de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dea:	4770      	bx	lr

08005dec <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005dec:	b480      	push	{r7}
 8005dee:	b085      	sub	sp, #20
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	68fa      	ldr	r2, [r7, #12]
 8005e02:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005e06:	f023 0303 	bic.w	r3, r3, #3
 8005e0a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e12:	685b      	ldr	r3, [r3, #4]
 8005e14:	68fa      	ldr	r2, [r7, #12]
 8005e16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e1a:	f023 0302 	bic.w	r3, r3, #2
 8005e1e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005e20:	2300      	movs	r3, #0
}
 8005e22:	4618      	mov	r0, r3
 8005e24:	3714      	adds	r7, #20
 8005e26:	46bd      	mov	sp, r7
 8005e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2c:	4770      	bx	lr

08005e2e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005e2e:	b480      	push	{r7}
 8005e30:	b085      	sub	sp, #20
 8005e32:	af00      	add	r7, sp, #0
 8005e34:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	68fa      	ldr	r2, [r7, #12]
 8005e44:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005e48:	f023 0303 	bic.w	r3, r3, #3
 8005e4c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e54:	685b      	ldr	r3, [r3, #4]
 8005e56:	68fa      	ldr	r2, [r7, #12]
 8005e58:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e5c:	f043 0302 	orr.w	r3, r3, #2
 8005e60:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005e62:	2300      	movs	r3, #0
}
 8005e64:	4618      	mov	r0, r3
 8005e66:	3714      	adds	r7, #20
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6e:	4770      	bx	lr

08005e70 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005e70:	b480      	push	{r7}
 8005e72:	b085      	sub	sp, #20
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	695b      	ldr	r3, [r3, #20]
 8005e7c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	699b      	ldr	r3, [r3, #24]
 8005e82:	68fa      	ldr	r2, [r7, #12]
 8005e84:	4013      	ands	r3, r2
 8005e86:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005e88:	68fb      	ldr	r3, [r7, #12]
}
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	3714      	adds	r7, #20
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e94:	4770      	bx	lr

08005e96 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005e96:	b480      	push	{r7}
 8005e98:	b085      	sub	sp, #20
 8005e9a:	af00      	add	r7, sp, #0
 8005e9c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ea8:	699b      	ldr	r3, [r3, #24]
 8005eaa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005eb2:	69db      	ldr	r3, [r3, #28]
 8005eb4:	68ba      	ldr	r2, [r7, #8]
 8005eb6:	4013      	ands	r3, r2
 8005eb8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	0c1b      	lsrs	r3, r3, #16
}
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	3714      	adds	r7, #20
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec8:	4770      	bx	lr

08005eca <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005eca:	b480      	push	{r7}
 8005ecc:	b085      	sub	sp, #20
 8005ece:	af00      	add	r7, sp, #0
 8005ed0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005edc:	699b      	ldr	r3, [r3, #24]
 8005ede:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ee6:	69db      	ldr	r3, [r3, #28]
 8005ee8:	68ba      	ldr	r2, [r7, #8]
 8005eea:	4013      	ands	r3, r2
 8005eec:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	b29b      	uxth	r3, r3
}
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	3714      	adds	r7, #20
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efc:	4770      	bx	lr

08005efe <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005efe:	b480      	push	{r7}
 8005f00:	b085      	sub	sp, #20
 8005f02:	af00      	add	r7, sp, #0
 8005f04:	6078      	str	r0, [r7, #4]
 8005f06:	460b      	mov	r3, r1
 8005f08:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005f0e:	78fb      	ldrb	r3, [r7, #3]
 8005f10:	015a      	lsls	r2, r3, #5
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	4413      	add	r3, r2
 8005f16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f1a:	689b      	ldr	r3, [r3, #8]
 8005f1c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f24:	695b      	ldr	r3, [r3, #20]
 8005f26:	68ba      	ldr	r2, [r7, #8]
 8005f28:	4013      	ands	r3, r2
 8005f2a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005f2c:	68bb      	ldr	r3, [r7, #8]
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	3714      	adds	r7, #20
 8005f32:	46bd      	mov	sp, r7
 8005f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f38:	4770      	bx	lr

08005f3a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005f3a:	b480      	push	{r7}
 8005f3c:	b087      	sub	sp, #28
 8005f3e:	af00      	add	r7, sp, #0
 8005f40:	6078      	str	r0, [r7, #4]
 8005f42:	460b      	mov	r3, r1
 8005f44:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f50:	691b      	ldr	r3, [r3, #16]
 8005f52:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005f54:	697b      	ldr	r3, [r7, #20]
 8005f56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f5c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005f5e:	78fb      	ldrb	r3, [r7, #3]
 8005f60:	f003 030f 	and.w	r3, r3, #15
 8005f64:	68fa      	ldr	r2, [r7, #12]
 8005f66:	fa22 f303 	lsr.w	r3, r2, r3
 8005f6a:	01db      	lsls	r3, r3, #7
 8005f6c:	b2db      	uxtb	r3, r3
 8005f6e:	693a      	ldr	r2, [r7, #16]
 8005f70:	4313      	orrs	r3, r2
 8005f72:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005f74:	78fb      	ldrb	r3, [r7, #3]
 8005f76:	015a      	lsls	r2, r3, #5
 8005f78:	697b      	ldr	r3, [r7, #20]
 8005f7a:	4413      	add	r3, r2
 8005f7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f80:	689b      	ldr	r3, [r3, #8]
 8005f82:	693a      	ldr	r2, [r7, #16]
 8005f84:	4013      	ands	r3, r2
 8005f86:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005f88:	68bb      	ldr	r3, [r7, #8]
}
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	371c      	adds	r7, #28
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f94:	4770      	bx	lr

08005f96 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005f96:	b480      	push	{r7}
 8005f98:	b083      	sub	sp, #12
 8005f9a:	af00      	add	r7, sp, #0
 8005f9c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	695b      	ldr	r3, [r3, #20]
 8005fa2:	f003 0301 	and.w	r3, r3, #1
}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	370c      	adds	r7, #12
 8005faa:	46bd      	mov	sp, r7
 8005fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb0:	4770      	bx	lr

08005fb2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005fb2:	b480      	push	{r7}
 8005fb4:	b085      	sub	sp, #20
 8005fb6:	af00      	add	r7, sp, #0
 8005fb8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	68fa      	ldr	r2, [r7, #12]
 8005fc8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fcc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005fd0:	f023 0307 	bic.w	r3, r3, #7
 8005fd4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	68fa      	ldr	r2, [r7, #12]
 8005fe0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005fe4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fe8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005fea:	2300      	movs	r3, #0
}
 8005fec:	4618      	mov	r0, r3
 8005fee:	3714      	adds	r7, #20
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff6:	4770      	bx	lr

08005ff8 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	b085      	sub	sp, #20
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
 8006000:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	333c      	adds	r3, #60	; 0x3c
 800600a:	3304      	adds	r3, #4
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	4a1c      	ldr	r2, [pc, #112]	; (8006084 <USB_EP0_OutStart+0x8c>)
 8006014:	4293      	cmp	r3, r2
 8006016:	d90a      	bls.n	800602e <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006024:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006028:	d101      	bne.n	800602e <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 800602a:	2300      	movs	r3, #0
 800602c:	e024      	b.n	8006078 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006034:	461a      	mov	r2, r3
 8006036:	2300      	movs	r3, #0
 8006038:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006040:	691b      	ldr	r3, [r3, #16]
 8006042:	68fa      	ldr	r2, [r7, #12]
 8006044:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006048:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800604c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006054:	691b      	ldr	r3, [r3, #16]
 8006056:	68fa      	ldr	r2, [r7, #12]
 8006058:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800605c:	f043 0318 	orr.w	r3, r3, #24
 8006060:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006068:	691b      	ldr	r3, [r3, #16]
 800606a:	68fa      	ldr	r2, [r7, #12]
 800606c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006070:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006074:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8006076:	2300      	movs	r3, #0
}
 8006078:	4618      	mov	r0, r3
 800607a:	3714      	adds	r7, #20
 800607c:	46bd      	mov	sp, r7
 800607e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006082:	4770      	bx	lr
 8006084:	4f54300a 	.word	0x4f54300a

08006088 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006088:	b480      	push	{r7}
 800608a:	b085      	sub	sp, #20
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006090:	2300      	movs	r3, #0
 8006092:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	3301      	adds	r3, #1
 8006098:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	4a13      	ldr	r2, [pc, #76]	; (80060ec <USB_CoreReset+0x64>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d901      	bls.n	80060a6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80060a2:	2303      	movs	r3, #3
 80060a4:	e01b      	b.n	80060de <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	691b      	ldr	r3, [r3, #16]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	daf2      	bge.n	8006094 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80060ae:	2300      	movs	r3, #0
 80060b0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	691b      	ldr	r3, [r3, #16]
 80060b6:	f043 0201 	orr.w	r2, r3, #1
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	3301      	adds	r3, #1
 80060c2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	4a09      	ldr	r2, [pc, #36]	; (80060ec <USB_CoreReset+0x64>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d901      	bls.n	80060d0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80060cc:	2303      	movs	r3, #3
 80060ce:	e006      	b.n	80060de <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	691b      	ldr	r3, [r3, #16]
 80060d4:	f003 0301 	and.w	r3, r3, #1
 80060d8:	2b01      	cmp	r3, #1
 80060da:	d0f0      	beq.n	80060be <USB_CoreReset+0x36>

  return HAL_OK;
 80060dc:	2300      	movs	r3, #0
}
 80060de:	4618      	mov	r0, r3
 80060e0:	3714      	adds	r7, #20
 80060e2:	46bd      	mov	sp, r7
 80060e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e8:	4770      	bx	lr
 80060ea:	bf00      	nop
 80060ec:	00030d40 	.word	0x00030d40

080060f0 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b084      	sub	sp, #16
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
 80060f8:	460b      	mov	r3, r1
 80060fa:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 80060fc:	2010      	movs	r0, #16
 80060fe:	f005 f819 	bl	800b134 <USBD_static_malloc>
 8006102:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d109      	bne.n	800611e <USBD_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	32b0      	adds	r2, #176	; 0xb0
 8006114:	2100      	movs	r1, #0
 8006116:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800611a:	2302      	movs	r3, #2
 800611c:	e048      	b.n	80061b0 <USBD_HID_Init+0xc0>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	32b0      	adds	r2, #176	; 0xb0
 8006128:	68f9      	ldr	r1, [r7, #12]
 800612a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	32b0      	adds	r2, #176	; 0xb0
 8006138:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	7c1b      	ldrb	r3, [r3, #16]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d10d      	bne.n	8006166 <USBD_HID_Init+0x76>
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 800614a:	4b1b      	ldr	r3, [pc, #108]	; (80061b8 <USBD_HID_Init+0xc8>)
 800614c:	781b      	ldrb	r3, [r3, #0]
 800614e:	f003 020f 	and.w	r2, r3, #15
 8006152:	6879      	ldr	r1, [r7, #4]
 8006154:	4613      	mov	r3, r2
 8006156:	009b      	lsls	r3, r3, #2
 8006158:	4413      	add	r3, r2
 800615a:	009b      	lsls	r3, r3, #2
 800615c:	440b      	add	r3, r1
 800615e:	3326      	adds	r3, #38	; 0x26
 8006160:	2207      	movs	r2, #7
 8006162:	801a      	strh	r2, [r3, #0]
 8006164:	e00c      	b.n	8006180 <USBD_HID_Init+0x90>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 8006166:	4b14      	ldr	r3, [pc, #80]	; (80061b8 <USBD_HID_Init+0xc8>)
 8006168:	781b      	ldrb	r3, [r3, #0]
 800616a:	f003 020f 	and.w	r2, r3, #15
 800616e:	6879      	ldr	r1, [r7, #4]
 8006170:	4613      	mov	r3, r2
 8006172:	009b      	lsls	r3, r3, #2
 8006174:	4413      	add	r3, r2
 8006176:	009b      	lsls	r3, r3, #2
 8006178:	440b      	add	r3, r1
 800617a:	3326      	adds	r3, #38	; 0x26
 800617c:	220a      	movs	r2, #10
 800617e:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8006180:	4b0d      	ldr	r3, [pc, #52]	; (80061b8 <USBD_HID_Init+0xc8>)
 8006182:	7819      	ldrb	r1, [r3, #0]
 8006184:	2304      	movs	r3, #4
 8006186:	2203      	movs	r2, #3
 8006188:	6878      	ldr	r0, [r7, #4]
 800618a:	f004 fdd3 	bl	800ad34 <USBD_LL_OpenEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 800618e:	4b0a      	ldr	r3, [pc, #40]	; (80061b8 <USBD_HID_Init+0xc8>)
 8006190:	781b      	ldrb	r3, [r3, #0]
 8006192:	f003 020f 	and.w	r2, r3, #15
 8006196:	6879      	ldr	r1, [r7, #4]
 8006198:	4613      	mov	r3, r2
 800619a:	009b      	lsls	r3, r3, #2
 800619c:	4413      	add	r3, r2
 800619e:	009b      	lsls	r3, r3, #2
 80061a0:	440b      	add	r3, r1
 80061a2:	3324      	adds	r3, #36	; 0x24
 80061a4:	2201      	movs	r2, #1
 80061a6:	801a      	strh	r2, [r3, #0]

  hhid->state = USBD_HID_IDLE;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	2200      	movs	r2, #0
 80061ac:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 80061ae:	2300      	movs	r3, #0
}
 80061b0:	4618      	mov	r0, r3
 80061b2:	3710      	adds	r7, #16
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bd80      	pop	{r7, pc}
 80061b8:	200000ca 	.word	0x200000ca

080061bc <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b082      	sub	sp, #8
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
 80061c4:	460b      	mov	r3, r1
 80061c6:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 80061c8:	4b1f      	ldr	r3, [pc, #124]	; (8006248 <USBD_HID_DeInit+0x8c>)
 80061ca:	781b      	ldrb	r3, [r3, #0]
 80061cc:	4619      	mov	r1, r3
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	f004 fdee 	bl	800adb0 <USBD_LL_CloseEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 80061d4:	4b1c      	ldr	r3, [pc, #112]	; (8006248 <USBD_HID_DeInit+0x8c>)
 80061d6:	781b      	ldrb	r3, [r3, #0]
 80061d8:	f003 020f 	and.w	r2, r3, #15
 80061dc:	6879      	ldr	r1, [r7, #4]
 80061de:	4613      	mov	r3, r2
 80061e0:	009b      	lsls	r3, r3, #2
 80061e2:	4413      	add	r3, r2
 80061e4:	009b      	lsls	r3, r3, #2
 80061e6:	440b      	add	r3, r1
 80061e8:	3324      	adds	r3, #36	; 0x24
 80061ea:	2200      	movs	r2, #0
 80061ec:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 80061ee:	4b16      	ldr	r3, [pc, #88]	; (8006248 <USBD_HID_DeInit+0x8c>)
 80061f0:	781b      	ldrb	r3, [r3, #0]
 80061f2:	f003 020f 	and.w	r2, r3, #15
 80061f6:	6879      	ldr	r1, [r7, #4]
 80061f8:	4613      	mov	r3, r2
 80061fa:	009b      	lsls	r3, r3, #2
 80061fc:	4413      	add	r3, r2
 80061fe:	009b      	lsls	r3, r3, #2
 8006200:	440b      	add	r3, r1
 8006202:	3326      	adds	r3, #38	; 0x26
 8006204:	2200      	movs	r2, #0
 8006206:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	32b0      	adds	r2, #176	; 0xb0
 8006212:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d011      	beq.n	800623e <USBD_HID_DeInit+0x82>
  {
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	32b0      	adds	r2, #176	; 0xb0
 8006224:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006228:	4618      	mov	r0, r3
 800622a:	f004 ff91 	bl	800b150 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	32b0      	adds	r2, #176	; 0xb0
 8006238:	2100      	movs	r1, #0
 800623a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)USBD_OK;
 800623e:	2300      	movs	r3, #0
}
 8006240:	4618      	mov	r0, r3
 8006242:	3708      	adds	r7, #8
 8006244:	46bd      	mov	sp, r7
 8006246:	bd80      	pop	{r7, pc}
 8006248:	200000ca 	.word	0x200000ca

0800624c <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b086      	sub	sp, #24
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
 8006254:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	32b0      	adds	r2, #176	; 0xb0
 8006260:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006264:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8006266:	2300      	movs	r3, #0
 8006268:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 800626a:	2300      	movs	r3, #0
 800626c:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d101      	bne.n	8006278 <USBD_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8006274:	2303      	movs	r3, #3
 8006276:	e0e8      	b.n	800644a <USBD_HID_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	781b      	ldrb	r3, [r3, #0]
 800627c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006280:	2b00      	cmp	r3, #0
 8006282:	d046      	beq.n	8006312 <USBD_HID_Setup+0xc6>
 8006284:	2b20      	cmp	r3, #32
 8006286:	f040 80d8 	bne.w	800643a <USBD_HID_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	785b      	ldrb	r3, [r3, #1]
 800628e:	3b02      	subs	r3, #2
 8006290:	2b09      	cmp	r3, #9
 8006292:	d836      	bhi.n	8006302 <USBD_HID_Setup+0xb6>
 8006294:	a201      	add	r2, pc, #4	; (adr r2, 800629c <USBD_HID_Setup+0x50>)
 8006296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800629a:	bf00      	nop
 800629c:	080062f3 	.word	0x080062f3
 80062a0:	080062d3 	.word	0x080062d3
 80062a4:	08006303 	.word	0x08006303
 80062a8:	08006303 	.word	0x08006303
 80062ac:	08006303 	.word	0x08006303
 80062b0:	08006303 	.word	0x08006303
 80062b4:	08006303 	.word	0x08006303
 80062b8:	08006303 	.word	0x08006303
 80062bc:	080062e1 	.word	0x080062e1
 80062c0:	080062c5 	.word	0x080062c5
      {
        case USBD_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	885b      	ldrh	r3, [r3, #2]
 80062c8:	b2db      	uxtb	r3, r3
 80062ca:	461a      	mov	r2, r3
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	601a      	str	r2, [r3, #0]
          break;
 80062d0:	e01e      	b.n	8006310 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	2201      	movs	r2, #1
 80062d6:	4619      	mov	r1, r3
 80062d8:	6878      	ldr	r0, [r7, #4]
 80062da:	f001 fbd5 	bl	8007a88 <USBD_CtlSendData>
          break;
 80062de:	e017      	b.n	8006310 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	885b      	ldrh	r3, [r3, #2]
 80062e4:	0a1b      	lsrs	r3, r3, #8
 80062e6:	b29b      	uxth	r3, r3
 80062e8:	b2db      	uxtb	r3, r3
 80062ea:	461a      	mov	r2, r3
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	605a      	str	r2, [r3, #4]
          break;
 80062f0:	e00e      	b.n	8006310 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	3304      	adds	r3, #4
 80062f6:	2201      	movs	r2, #1
 80062f8:	4619      	mov	r1, r3
 80062fa:	6878      	ldr	r0, [r7, #4]
 80062fc:	f001 fbc4 	bl	8007a88 <USBD_CtlSendData>
          break;
 8006300:	e006      	b.n	8006310 <USBD_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8006302:	6839      	ldr	r1, [r7, #0]
 8006304:	6878      	ldr	r0, [r7, #4]
 8006306:	f001 fb4e 	bl	80079a6 <USBD_CtlError>
          ret = USBD_FAIL;
 800630a:	2303      	movs	r3, #3
 800630c:	75fb      	strb	r3, [r7, #23]
          break;
 800630e:	bf00      	nop
      }
      break;
 8006310:	e09a      	b.n	8006448 <USBD_HID_Setup+0x1fc>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	785b      	ldrb	r3, [r3, #1]
 8006316:	2b0b      	cmp	r3, #11
 8006318:	f200 8086 	bhi.w	8006428 <USBD_HID_Setup+0x1dc>
 800631c:	a201      	add	r2, pc, #4	; (adr r2, 8006324 <USBD_HID_Setup+0xd8>)
 800631e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006322:	bf00      	nop
 8006324:	08006355 	.word	0x08006355
 8006328:	08006437 	.word	0x08006437
 800632c:	08006429 	.word	0x08006429
 8006330:	08006429 	.word	0x08006429
 8006334:	08006429 	.word	0x08006429
 8006338:	08006429 	.word	0x08006429
 800633c:	0800637f 	.word	0x0800637f
 8006340:	08006429 	.word	0x08006429
 8006344:	08006429 	.word	0x08006429
 8006348:	08006429 	.word	0x08006429
 800634c:	080063d7 	.word	0x080063d7
 8006350:	08006401 	.word	0x08006401
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800635a:	b2db      	uxtb	r3, r3
 800635c:	2b03      	cmp	r3, #3
 800635e:	d107      	bne.n	8006370 <USBD_HID_Setup+0x124>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006360:	f107 030a 	add.w	r3, r7, #10
 8006364:	2202      	movs	r2, #2
 8006366:	4619      	mov	r1, r3
 8006368:	6878      	ldr	r0, [r7, #4]
 800636a:	f001 fb8d 	bl	8007a88 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800636e:	e063      	b.n	8006438 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8006370:	6839      	ldr	r1, [r7, #0]
 8006372:	6878      	ldr	r0, [r7, #4]
 8006374:	f001 fb17 	bl	80079a6 <USBD_CtlError>
            ret = USBD_FAIL;
 8006378:	2303      	movs	r3, #3
 800637a:	75fb      	strb	r3, [r7, #23]
          break;
 800637c:	e05c      	b.n	8006438 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	885b      	ldrh	r3, [r3, #2]
 8006382:	0a1b      	lsrs	r3, r3, #8
 8006384:	b29b      	uxth	r3, r3
 8006386:	2b22      	cmp	r3, #34	; 0x22
 8006388:	d108      	bne.n	800639c <USBD_HID_Setup+0x150>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	88db      	ldrh	r3, [r3, #6]
 800638e:	2b4a      	cmp	r3, #74	; 0x4a
 8006390:	bf28      	it	cs
 8006392:	234a      	movcs	r3, #74	; 0x4a
 8006394:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 8006396:	4b2f      	ldr	r3, [pc, #188]	; (8006454 <USBD_HID_Setup+0x208>)
 8006398:	613b      	str	r3, [r7, #16]
 800639a:	e015      	b.n	80063c8 <USBD_HID_Setup+0x17c>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	885b      	ldrh	r3, [r3, #2]
 80063a0:	0a1b      	lsrs	r3, r3, #8
 80063a2:	b29b      	uxth	r3, r3
 80063a4:	2b21      	cmp	r3, #33	; 0x21
 80063a6:	d108      	bne.n	80063ba <USBD_HID_Setup+0x16e>
          {
            pbuf = USBD_HID_Desc;
 80063a8:	4b2b      	ldr	r3, [pc, #172]	; (8006458 <USBD_HID_Setup+0x20c>)
 80063aa:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	88db      	ldrh	r3, [r3, #6]
 80063b0:	2b09      	cmp	r3, #9
 80063b2:	bf28      	it	cs
 80063b4:	2309      	movcs	r3, #9
 80063b6:	82bb      	strh	r3, [r7, #20]
 80063b8:	e006      	b.n	80063c8 <USBD_HID_Setup+0x17c>
          }
          else
          {
            USBD_CtlError(pdev, req);
 80063ba:	6839      	ldr	r1, [r7, #0]
 80063bc:	6878      	ldr	r0, [r7, #4]
 80063be:	f001 faf2 	bl	80079a6 <USBD_CtlError>
            ret = USBD_FAIL;
 80063c2:	2303      	movs	r3, #3
 80063c4:	75fb      	strb	r3, [r7, #23]
            break;
 80063c6:	e037      	b.n	8006438 <USBD_HID_Setup+0x1ec>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 80063c8:	8abb      	ldrh	r3, [r7, #20]
 80063ca:	461a      	mov	r2, r3
 80063cc:	6939      	ldr	r1, [r7, #16]
 80063ce:	6878      	ldr	r0, [r7, #4]
 80063d0:	f001 fb5a 	bl	8007a88 <USBD_CtlSendData>
          break;
 80063d4:	e030      	b.n	8006438 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063dc:	b2db      	uxtb	r3, r3
 80063de:	2b03      	cmp	r3, #3
 80063e0:	d107      	bne.n	80063f2 <USBD_HID_Setup+0x1a6>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	3308      	adds	r3, #8
 80063e6:	2201      	movs	r2, #1
 80063e8:	4619      	mov	r1, r3
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f001 fb4c 	bl	8007a88 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80063f0:	e022      	b.n	8006438 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 80063f2:	6839      	ldr	r1, [r7, #0]
 80063f4:	6878      	ldr	r0, [r7, #4]
 80063f6:	f001 fad6 	bl	80079a6 <USBD_CtlError>
            ret = USBD_FAIL;
 80063fa:	2303      	movs	r3, #3
 80063fc:	75fb      	strb	r3, [r7, #23]
          break;
 80063fe:	e01b      	b.n	8006438 <USBD_HID_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006406:	b2db      	uxtb	r3, r3
 8006408:	2b03      	cmp	r3, #3
 800640a:	d106      	bne.n	800641a <USBD_HID_Setup+0x1ce>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	885b      	ldrh	r3, [r3, #2]
 8006410:	b2db      	uxtb	r3, r3
 8006412:	461a      	mov	r2, r3
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006418:	e00e      	b.n	8006438 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 800641a:	6839      	ldr	r1, [r7, #0]
 800641c:	6878      	ldr	r0, [r7, #4]
 800641e:	f001 fac2 	bl	80079a6 <USBD_CtlError>
            ret = USBD_FAIL;
 8006422:	2303      	movs	r3, #3
 8006424:	75fb      	strb	r3, [r7, #23]
          break;
 8006426:	e007      	b.n	8006438 <USBD_HID_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006428:	6839      	ldr	r1, [r7, #0]
 800642a:	6878      	ldr	r0, [r7, #4]
 800642c:	f001 fabb 	bl	80079a6 <USBD_CtlError>
          ret = USBD_FAIL;
 8006430:	2303      	movs	r3, #3
 8006432:	75fb      	strb	r3, [r7, #23]
          break;
 8006434:	e000      	b.n	8006438 <USBD_HID_Setup+0x1ec>
          break;
 8006436:	bf00      	nop
      }
      break;
 8006438:	e006      	b.n	8006448 <USBD_HID_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 800643a:	6839      	ldr	r1, [r7, #0]
 800643c:	6878      	ldr	r0, [r7, #4]
 800643e:	f001 fab2 	bl	80079a6 <USBD_CtlError>
      ret = USBD_FAIL;
 8006442:	2303      	movs	r3, #3
 8006444:	75fb      	strb	r3, [r7, #23]
      break;
 8006446:	bf00      	nop
  }

  return (uint8_t)ret;
 8006448:	7dfb      	ldrb	r3, [r7, #23]
}
 800644a:	4618      	mov	r0, r3
 800644c:	3718      	adds	r7, #24
 800644e:	46bd      	mov	sp, r7
 8006450:	bd80      	pop	{r7, pc}
 8006452:	bf00      	nop
 8006454:	20000080 	.word	0x20000080
 8006458:	20000068 	.word	0x20000068

0800645c <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b084      	sub	sp, #16
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8006464:	2181      	movs	r1, #129	; 0x81
 8006466:	4809      	ldr	r0, [pc, #36]	; (800648c <USBD_HID_GetFSCfgDesc+0x30>)
 8006468:	f000 fc3b 	bl	8006ce2 <USBD_GetEpDesc>
 800646c:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d002      	beq.n	800647a <USBD_HID_GetFSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	220a      	movs	r2, #10
 8006478:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2222      	movs	r2, #34	; 0x22
 800647e:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8006480:	4b02      	ldr	r3, [pc, #8]	; (800648c <USBD_HID_GetFSCfgDesc+0x30>)
}
 8006482:	4618      	mov	r0, r3
 8006484:	3710      	adds	r7, #16
 8006486:	46bd      	mov	sp, r7
 8006488:	bd80      	pop	{r7, pc}
 800648a:	bf00      	nop
 800648c:	20000044 	.word	0x20000044

08006490 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b084      	sub	sp, #16
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8006498:	2181      	movs	r1, #129	; 0x81
 800649a:	4809      	ldr	r0, [pc, #36]	; (80064c0 <USBD_HID_GetHSCfgDesc+0x30>)
 800649c:	f000 fc21 	bl	8006ce2 <USBD_GetEpDesc>
 80064a0:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d002      	beq.n	80064ae <USBD_HID_GetHSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_HS_BINTERVAL;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	2207      	movs	r2, #7
 80064ac:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2222      	movs	r2, #34	; 0x22
 80064b2:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 80064b4:	4b02      	ldr	r3, [pc, #8]	; (80064c0 <USBD_HID_GetHSCfgDesc+0x30>)
}
 80064b6:	4618      	mov	r0, r3
 80064b8:	3710      	adds	r7, #16
 80064ba:	46bd      	mov	sp, r7
 80064bc:	bd80      	pop	{r7, pc}
 80064be:	bf00      	nop
 80064c0:	20000044 	.word	0x20000044

080064c4 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b084      	sub	sp, #16
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 80064cc:	2181      	movs	r1, #129	; 0x81
 80064ce:	4809      	ldr	r0, [pc, #36]	; (80064f4 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
 80064d0:	f000 fc07 	bl	8006ce2 <USBD_GetEpDesc>
 80064d4:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d002      	beq.n	80064e2 <USBD_HID_GetOtherSpeedCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	220a      	movs	r2, #10
 80064e0:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2222      	movs	r2, #34	; 0x22
 80064e6:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 80064e8:	4b02      	ldr	r3, [pc, #8]	; (80064f4 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
}
 80064ea:	4618      	mov	r0, r3
 80064ec:	3710      	adds	r7, #16
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bd80      	pop	{r7, pc}
 80064f2:	bf00      	nop
 80064f4:	20000044 	.word	0x20000044

080064f8 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80064f8:	b480      	push	{r7}
 80064fa:	b083      	sub	sp, #12
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
 8006500:	460b      	mov	r3, r1
 8006502:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = USBD_HID_IDLE;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	32b0      	adds	r2, #176	; 0xb0
 800650e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006512:	2200      	movs	r2, #0
 8006514:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8006516:	2300      	movs	r3, #0
}
 8006518:	4618      	mov	r0, r3
 800651a:	370c      	adds	r7, #12
 800651c:	46bd      	mov	sp, r7
 800651e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006522:	4770      	bx	lr

08006524 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8006524:	b480      	push	{r7}
 8006526:	b083      	sub	sp, #12
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	220a      	movs	r2, #10
 8006530:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 8006532:	4b03      	ldr	r3, [pc, #12]	; (8006540 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8006534:	4618      	mov	r0, r3
 8006536:	370c      	adds	r7, #12
 8006538:	46bd      	mov	sp, r7
 800653a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653e:	4770      	bx	lr
 8006540:	20000074 	.word	0x20000074

08006544 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b086      	sub	sp, #24
 8006548:	af00      	add	r7, sp, #0
 800654a:	60f8      	str	r0, [r7, #12]
 800654c:	60b9      	str	r1, [r7, #8]
 800654e:	4613      	mov	r3, r2
 8006550:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d101      	bne.n	800655c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006558:	2303      	movs	r3, #3
 800655a:	e01f      	b.n	800659c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	2200      	movs	r2, #0
 8006560:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	2200      	movs	r2, #0
 8006568:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	2200      	movs	r2, #0
 8006570:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d003      	beq.n	8006582 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	68ba      	ldr	r2, [r7, #8]
 800657e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	2201      	movs	r2, #1
 8006586:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	79fa      	ldrb	r2, [r7, #7]
 800658e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006590:	68f8      	ldr	r0, [r7, #12]
 8006592:	f004 fb51 	bl	800ac38 <USBD_LL_Init>
 8006596:	4603      	mov	r3, r0
 8006598:	75fb      	strb	r3, [r7, #23]

  return ret;
 800659a:	7dfb      	ldrb	r3, [r7, #23]
}
 800659c:	4618      	mov	r0, r3
 800659e:	3718      	adds	r7, #24
 80065a0:	46bd      	mov	sp, r7
 80065a2:	bd80      	pop	{r7, pc}

080065a4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b084      	sub	sp, #16
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
 80065ac:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80065ae:	2300      	movs	r3, #0
 80065b0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d101      	bne.n	80065bc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80065b8:	2303      	movs	r3, #3
 80065ba:	e025      	b.n	8006608 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	683a      	ldr	r2, [r7, #0]
 80065c0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	32ae      	adds	r2, #174	; 0xae
 80065ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d00f      	beq.n	80065f8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	32ae      	adds	r2, #174	; 0xae
 80065e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065e8:	f107 020e 	add.w	r2, r7, #14
 80065ec:	4610      	mov	r0, r2
 80065ee:	4798      	blx	r3
 80065f0:	4602      	mov	r2, r0
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80065fe:	1c5a      	adds	r2, r3, #1
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8006606:	2300      	movs	r3, #0
}
 8006608:	4618      	mov	r0, r3
 800660a:	3710      	adds	r7, #16
 800660c:	46bd      	mov	sp, r7
 800660e:	bd80      	pop	{r7, pc}

08006610 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b082      	sub	sp, #8
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006618:	6878      	ldr	r0, [r7, #4]
 800661a:	f004 fb59 	bl	800acd0 <USBD_LL_Start>
 800661e:	4603      	mov	r3, r0
}
 8006620:	4618      	mov	r0, r3
 8006622:	3708      	adds	r7, #8
 8006624:	46bd      	mov	sp, r7
 8006626:	bd80      	pop	{r7, pc}

08006628 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006628:	b480      	push	{r7}
 800662a:	b083      	sub	sp, #12
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006630:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006632:	4618      	mov	r0, r3
 8006634:	370c      	adds	r7, #12
 8006636:	46bd      	mov	sp, r7
 8006638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663c:	4770      	bx	lr

0800663e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800663e:	b580      	push	{r7, lr}
 8006640:	b084      	sub	sp, #16
 8006642:	af00      	add	r7, sp, #0
 8006644:	6078      	str	r0, [r7, #4]
 8006646:	460b      	mov	r3, r1
 8006648:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800664a:	2300      	movs	r3, #0
 800664c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006654:	2b00      	cmp	r3, #0
 8006656:	d009      	beq.n	800666c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	78fa      	ldrb	r2, [r7, #3]
 8006662:	4611      	mov	r1, r2
 8006664:	6878      	ldr	r0, [r7, #4]
 8006666:	4798      	blx	r3
 8006668:	4603      	mov	r3, r0
 800666a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800666c:	7bfb      	ldrb	r3, [r7, #15]
}
 800666e:	4618      	mov	r0, r3
 8006670:	3710      	adds	r7, #16
 8006672:	46bd      	mov	sp, r7
 8006674:	bd80      	pop	{r7, pc}

08006676 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006676:	b580      	push	{r7, lr}
 8006678:	b084      	sub	sp, #16
 800667a:	af00      	add	r7, sp, #0
 800667c:	6078      	str	r0, [r7, #4]
 800667e:	460b      	mov	r3, r1
 8006680:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006682:	2300      	movs	r3, #0
 8006684:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800668c:	685b      	ldr	r3, [r3, #4]
 800668e:	78fa      	ldrb	r2, [r7, #3]
 8006690:	4611      	mov	r1, r2
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	4798      	blx	r3
 8006696:	4603      	mov	r3, r0
 8006698:	2b00      	cmp	r3, #0
 800669a:	d001      	beq.n	80066a0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800669c:	2303      	movs	r3, #3
 800669e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80066a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80066a2:	4618      	mov	r0, r3
 80066a4:	3710      	adds	r7, #16
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bd80      	pop	{r7, pc}

080066aa <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80066aa:	b580      	push	{r7, lr}
 80066ac:	b084      	sub	sp, #16
 80066ae:	af00      	add	r7, sp, #0
 80066b0:	6078      	str	r0, [r7, #4]
 80066b2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80066ba:	6839      	ldr	r1, [r7, #0]
 80066bc:	4618      	mov	r0, r3
 80066be:	f001 f938 	bl	8007932 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2201      	movs	r2, #1
 80066c6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80066d0:	461a      	mov	r2, r3
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80066de:	f003 031f 	and.w	r3, r3, #31
 80066e2:	2b02      	cmp	r3, #2
 80066e4:	d01a      	beq.n	800671c <USBD_LL_SetupStage+0x72>
 80066e6:	2b02      	cmp	r3, #2
 80066e8:	d822      	bhi.n	8006730 <USBD_LL_SetupStage+0x86>
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d002      	beq.n	80066f4 <USBD_LL_SetupStage+0x4a>
 80066ee:	2b01      	cmp	r3, #1
 80066f0:	d00a      	beq.n	8006708 <USBD_LL_SetupStage+0x5e>
 80066f2:	e01d      	b.n	8006730 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80066fa:	4619      	mov	r1, r3
 80066fc:	6878      	ldr	r0, [r7, #4]
 80066fe:	f000 fb65 	bl	8006dcc <USBD_StdDevReq>
 8006702:	4603      	mov	r3, r0
 8006704:	73fb      	strb	r3, [r7, #15]
      break;
 8006706:	e020      	b.n	800674a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800670e:	4619      	mov	r1, r3
 8006710:	6878      	ldr	r0, [r7, #4]
 8006712:	f000 fbcd 	bl	8006eb0 <USBD_StdItfReq>
 8006716:	4603      	mov	r3, r0
 8006718:	73fb      	strb	r3, [r7, #15]
      break;
 800671a:	e016      	b.n	800674a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006722:	4619      	mov	r1, r3
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	f000 fc2f 	bl	8006f88 <USBD_StdEPReq>
 800672a:	4603      	mov	r3, r0
 800672c:	73fb      	strb	r3, [r7, #15]
      break;
 800672e:	e00c      	b.n	800674a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006736:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800673a:	b2db      	uxtb	r3, r3
 800673c:	4619      	mov	r1, r3
 800673e:	6878      	ldr	r0, [r7, #4]
 8006740:	f004 fb6c 	bl	800ae1c <USBD_LL_StallEP>
 8006744:	4603      	mov	r3, r0
 8006746:	73fb      	strb	r3, [r7, #15]
      break;
 8006748:	bf00      	nop
  }

  return ret;
 800674a:	7bfb      	ldrb	r3, [r7, #15]
}
 800674c:	4618      	mov	r0, r3
 800674e:	3710      	adds	r7, #16
 8006750:	46bd      	mov	sp, r7
 8006752:	bd80      	pop	{r7, pc}

08006754 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b086      	sub	sp, #24
 8006758:	af00      	add	r7, sp, #0
 800675a:	60f8      	str	r0, [r7, #12]
 800675c:	460b      	mov	r3, r1
 800675e:	607a      	str	r2, [r7, #4]
 8006760:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006762:	2300      	movs	r3, #0
 8006764:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006766:	7afb      	ldrb	r3, [r7, #11]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d16e      	bne.n	800684a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006772:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800677a:	2b03      	cmp	r3, #3
 800677c:	f040 8098 	bne.w	80068b0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006780:	693b      	ldr	r3, [r7, #16]
 8006782:	689a      	ldr	r2, [r3, #8]
 8006784:	693b      	ldr	r3, [r7, #16]
 8006786:	68db      	ldr	r3, [r3, #12]
 8006788:	429a      	cmp	r2, r3
 800678a:	d913      	bls.n	80067b4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800678c:	693b      	ldr	r3, [r7, #16]
 800678e:	689a      	ldr	r2, [r3, #8]
 8006790:	693b      	ldr	r3, [r7, #16]
 8006792:	68db      	ldr	r3, [r3, #12]
 8006794:	1ad2      	subs	r2, r2, r3
 8006796:	693b      	ldr	r3, [r7, #16]
 8006798:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800679a:	693b      	ldr	r3, [r7, #16]
 800679c:	68da      	ldr	r2, [r3, #12]
 800679e:	693b      	ldr	r3, [r7, #16]
 80067a0:	689b      	ldr	r3, [r3, #8]
 80067a2:	4293      	cmp	r3, r2
 80067a4:	bf28      	it	cs
 80067a6:	4613      	movcs	r3, r2
 80067a8:	461a      	mov	r2, r3
 80067aa:	6879      	ldr	r1, [r7, #4]
 80067ac:	68f8      	ldr	r0, [r7, #12]
 80067ae:	f001 f997 	bl	8007ae0 <USBD_CtlContinueRx>
 80067b2:	e07d      	b.n	80068b0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80067ba:	f003 031f 	and.w	r3, r3, #31
 80067be:	2b02      	cmp	r3, #2
 80067c0:	d014      	beq.n	80067ec <USBD_LL_DataOutStage+0x98>
 80067c2:	2b02      	cmp	r3, #2
 80067c4:	d81d      	bhi.n	8006802 <USBD_LL_DataOutStage+0xae>
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d002      	beq.n	80067d0 <USBD_LL_DataOutStage+0x7c>
 80067ca:	2b01      	cmp	r3, #1
 80067cc:	d003      	beq.n	80067d6 <USBD_LL_DataOutStage+0x82>
 80067ce:	e018      	b.n	8006802 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80067d0:	2300      	movs	r3, #0
 80067d2:	75bb      	strb	r3, [r7, #22]
            break;
 80067d4:	e018      	b.n	8006808 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80067dc:	b2db      	uxtb	r3, r3
 80067de:	4619      	mov	r1, r3
 80067e0:	68f8      	ldr	r0, [r7, #12]
 80067e2:	f000 fa64 	bl	8006cae <USBD_CoreFindIF>
 80067e6:	4603      	mov	r3, r0
 80067e8:	75bb      	strb	r3, [r7, #22]
            break;
 80067ea:	e00d      	b.n	8006808 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80067f2:	b2db      	uxtb	r3, r3
 80067f4:	4619      	mov	r1, r3
 80067f6:	68f8      	ldr	r0, [r7, #12]
 80067f8:	f000 fa66 	bl	8006cc8 <USBD_CoreFindEP>
 80067fc:	4603      	mov	r3, r0
 80067fe:	75bb      	strb	r3, [r7, #22]
            break;
 8006800:	e002      	b.n	8006808 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006802:	2300      	movs	r3, #0
 8006804:	75bb      	strb	r3, [r7, #22]
            break;
 8006806:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006808:	7dbb      	ldrb	r3, [r7, #22]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d119      	bne.n	8006842 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006814:	b2db      	uxtb	r3, r3
 8006816:	2b03      	cmp	r3, #3
 8006818:	d113      	bne.n	8006842 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800681a:	7dba      	ldrb	r2, [r7, #22]
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	32ae      	adds	r2, #174	; 0xae
 8006820:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006824:	691b      	ldr	r3, [r3, #16]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d00b      	beq.n	8006842 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800682a:	7dba      	ldrb	r2, [r7, #22]
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006832:	7dba      	ldrb	r2, [r7, #22]
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	32ae      	adds	r2, #174	; 0xae
 8006838:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800683c:	691b      	ldr	r3, [r3, #16]
 800683e:	68f8      	ldr	r0, [r7, #12]
 8006840:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006842:	68f8      	ldr	r0, [r7, #12]
 8006844:	f001 f95d 	bl	8007b02 <USBD_CtlSendStatus>
 8006848:	e032      	b.n	80068b0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800684a:	7afb      	ldrb	r3, [r7, #11]
 800684c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006850:	b2db      	uxtb	r3, r3
 8006852:	4619      	mov	r1, r3
 8006854:	68f8      	ldr	r0, [r7, #12]
 8006856:	f000 fa37 	bl	8006cc8 <USBD_CoreFindEP>
 800685a:	4603      	mov	r3, r0
 800685c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800685e:	7dbb      	ldrb	r3, [r7, #22]
 8006860:	2bff      	cmp	r3, #255	; 0xff
 8006862:	d025      	beq.n	80068b0 <USBD_LL_DataOutStage+0x15c>
 8006864:	7dbb      	ldrb	r3, [r7, #22]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d122      	bne.n	80068b0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006870:	b2db      	uxtb	r3, r3
 8006872:	2b03      	cmp	r3, #3
 8006874:	d117      	bne.n	80068a6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006876:	7dba      	ldrb	r2, [r7, #22]
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	32ae      	adds	r2, #174	; 0xae
 800687c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006880:	699b      	ldr	r3, [r3, #24]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d00f      	beq.n	80068a6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006886:	7dba      	ldrb	r2, [r7, #22]
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800688e:	7dba      	ldrb	r2, [r7, #22]
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	32ae      	adds	r2, #174	; 0xae
 8006894:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006898:	699b      	ldr	r3, [r3, #24]
 800689a:	7afa      	ldrb	r2, [r7, #11]
 800689c:	4611      	mov	r1, r2
 800689e:	68f8      	ldr	r0, [r7, #12]
 80068a0:	4798      	blx	r3
 80068a2:	4603      	mov	r3, r0
 80068a4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80068a6:	7dfb      	ldrb	r3, [r7, #23]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d001      	beq.n	80068b0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80068ac:	7dfb      	ldrb	r3, [r7, #23]
 80068ae:	e000      	b.n	80068b2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80068b0:	2300      	movs	r3, #0
}
 80068b2:	4618      	mov	r0, r3
 80068b4:	3718      	adds	r7, #24
 80068b6:	46bd      	mov	sp, r7
 80068b8:	bd80      	pop	{r7, pc}

080068ba <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80068ba:	b580      	push	{r7, lr}
 80068bc:	b086      	sub	sp, #24
 80068be:	af00      	add	r7, sp, #0
 80068c0:	60f8      	str	r0, [r7, #12]
 80068c2:	460b      	mov	r3, r1
 80068c4:	607a      	str	r2, [r7, #4]
 80068c6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80068c8:	7afb      	ldrb	r3, [r7, #11]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d16f      	bne.n	80069ae <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	3314      	adds	r3, #20
 80068d2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80068da:	2b02      	cmp	r3, #2
 80068dc:	d15a      	bne.n	8006994 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80068de:	693b      	ldr	r3, [r7, #16]
 80068e0:	689a      	ldr	r2, [r3, #8]
 80068e2:	693b      	ldr	r3, [r7, #16]
 80068e4:	68db      	ldr	r3, [r3, #12]
 80068e6:	429a      	cmp	r2, r3
 80068e8:	d914      	bls.n	8006914 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80068ea:	693b      	ldr	r3, [r7, #16]
 80068ec:	689a      	ldr	r2, [r3, #8]
 80068ee:	693b      	ldr	r3, [r7, #16]
 80068f0:	68db      	ldr	r3, [r3, #12]
 80068f2:	1ad2      	subs	r2, r2, r3
 80068f4:	693b      	ldr	r3, [r7, #16]
 80068f6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80068f8:	693b      	ldr	r3, [r7, #16]
 80068fa:	689b      	ldr	r3, [r3, #8]
 80068fc:	461a      	mov	r2, r3
 80068fe:	6879      	ldr	r1, [r7, #4]
 8006900:	68f8      	ldr	r0, [r7, #12]
 8006902:	f001 f8dc 	bl	8007abe <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006906:	2300      	movs	r3, #0
 8006908:	2200      	movs	r2, #0
 800690a:	2100      	movs	r1, #0
 800690c:	68f8      	ldr	r0, [r7, #12]
 800690e:	f004 fb8b 	bl	800b028 <USBD_LL_PrepareReceive>
 8006912:	e03f      	b.n	8006994 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006914:	693b      	ldr	r3, [r7, #16]
 8006916:	68da      	ldr	r2, [r3, #12]
 8006918:	693b      	ldr	r3, [r7, #16]
 800691a:	689b      	ldr	r3, [r3, #8]
 800691c:	429a      	cmp	r2, r3
 800691e:	d11c      	bne.n	800695a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006920:	693b      	ldr	r3, [r7, #16]
 8006922:	685a      	ldr	r2, [r3, #4]
 8006924:	693b      	ldr	r3, [r7, #16]
 8006926:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006928:	429a      	cmp	r2, r3
 800692a:	d316      	bcc.n	800695a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800692c:	693b      	ldr	r3, [r7, #16]
 800692e:	685a      	ldr	r2, [r3, #4]
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006936:	429a      	cmp	r2, r3
 8006938:	d20f      	bcs.n	800695a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800693a:	2200      	movs	r2, #0
 800693c:	2100      	movs	r1, #0
 800693e:	68f8      	ldr	r0, [r7, #12]
 8006940:	f001 f8bd 	bl	8007abe <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	2200      	movs	r2, #0
 8006948:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800694c:	2300      	movs	r3, #0
 800694e:	2200      	movs	r2, #0
 8006950:	2100      	movs	r1, #0
 8006952:	68f8      	ldr	r0, [r7, #12]
 8006954:	f004 fb68 	bl	800b028 <USBD_LL_PrepareReceive>
 8006958:	e01c      	b.n	8006994 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006960:	b2db      	uxtb	r3, r3
 8006962:	2b03      	cmp	r3, #3
 8006964:	d10f      	bne.n	8006986 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800696c:	68db      	ldr	r3, [r3, #12]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d009      	beq.n	8006986 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	2200      	movs	r2, #0
 8006976:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006980:	68db      	ldr	r3, [r3, #12]
 8006982:	68f8      	ldr	r0, [r7, #12]
 8006984:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006986:	2180      	movs	r1, #128	; 0x80
 8006988:	68f8      	ldr	r0, [r7, #12]
 800698a:	f004 fa47 	bl	800ae1c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800698e:	68f8      	ldr	r0, [r7, #12]
 8006990:	f001 f8ca 	bl	8007b28 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800699a:	2b00      	cmp	r3, #0
 800699c:	d03a      	beq.n	8006a14 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800699e:	68f8      	ldr	r0, [r7, #12]
 80069a0:	f7ff fe42 	bl	8006628 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	2200      	movs	r2, #0
 80069a8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80069ac:	e032      	b.n	8006a14 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80069ae:	7afb      	ldrb	r3, [r7, #11]
 80069b0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80069b4:	b2db      	uxtb	r3, r3
 80069b6:	4619      	mov	r1, r3
 80069b8:	68f8      	ldr	r0, [r7, #12]
 80069ba:	f000 f985 	bl	8006cc8 <USBD_CoreFindEP>
 80069be:	4603      	mov	r3, r0
 80069c0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80069c2:	7dfb      	ldrb	r3, [r7, #23]
 80069c4:	2bff      	cmp	r3, #255	; 0xff
 80069c6:	d025      	beq.n	8006a14 <USBD_LL_DataInStage+0x15a>
 80069c8:	7dfb      	ldrb	r3, [r7, #23]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d122      	bne.n	8006a14 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069d4:	b2db      	uxtb	r3, r3
 80069d6:	2b03      	cmp	r3, #3
 80069d8:	d11c      	bne.n	8006a14 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80069da:	7dfa      	ldrb	r2, [r7, #23]
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	32ae      	adds	r2, #174	; 0xae
 80069e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069e4:	695b      	ldr	r3, [r3, #20]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d014      	beq.n	8006a14 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80069ea:	7dfa      	ldrb	r2, [r7, #23]
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80069f2:	7dfa      	ldrb	r2, [r7, #23]
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	32ae      	adds	r2, #174	; 0xae
 80069f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069fc:	695b      	ldr	r3, [r3, #20]
 80069fe:	7afa      	ldrb	r2, [r7, #11]
 8006a00:	4611      	mov	r1, r2
 8006a02:	68f8      	ldr	r0, [r7, #12]
 8006a04:	4798      	blx	r3
 8006a06:	4603      	mov	r3, r0
 8006a08:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006a0a:	7dbb      	ldrb	r3, [r7, #22]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d001      	beq.n	8006a14 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006a10:	7dbb      	ldrb	r3, [r7, #22]
 8006a12:	e000      	b.n	8006a16 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006a14:	2300      	movs	r3, #0
}
 8006a16:	4618      	mov	r0, r3
 8006a18:	3718      	adds	r7, #24
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	bd80      	pop	{r7, pc}

08006a1e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006a1e:	b580      	push	{r7, lr}
 8006a20:	b084      	sub	sp, #16
 8006a22:	af00      	add	r7, sp, #0
 8006a24:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006a26:	2300      	movs	r3, #0
 8006a28:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2201      	movs	r2, #1
 8006a2e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2200      	movs	r2, #0
 8006a36:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2200      	movs	r2, #0
 8006a44:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d014      	beq.n	8006a84 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a60:	685b      	ldr	r3, [r3, #4]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d00e      	beq.n	8006a84 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a6c:	685b      	ldr	r3, [r3, #4]
 8006a6e:	687a      	ldr	r2, [r7, #4]
 8006a70:	6852      	ldr	r2, [r2, #4]
 8006a72:	b2d2      	uxtb	r2, r2
 8006a74:	4611      	mov	r1, r2
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	4798      	blx	r3
 8006a7a:	4603      	mov	r3, r0
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d001      	beq.n	8006a84 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006a80:	2303      	movs	r3, #3
 8006a82:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006a84:	2340      	movs	r3, #64	; 0x40
 8006a86:	2200      	movs	r2, #0
 8006a88:	2100      	movs	r1, #0
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f004 f952 	bl	800ad34 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2201      	movs	r2, #1
 8006a94:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2240      	movs	r2, #64	; 0x40
 8006a9c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006aa0:	2340      	movs	r3, #64	; 0x40
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	2180      	movs	r1, #128	; 0x80
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	f004 f944 	bl	800ad34 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2201      	movs	r2, #1
 8006ab0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2240      	movs	r2, #64	; 0x40
 8006ab6:	621a      	str	r2, [r3, #32]

  return ret;
 8006ab8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006aba:	4618      	mov	r0, r3
 8006abc:	3710      	adds	r7, #16
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	bd80      	pop	{r7, pc}

08006ac2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006ac2:	b480      	push	{r7}
 8006ac4:	b083      	sub	sp, #12
 8006ac6:	af00      	add	r7, sp, #0
 8006ac8:	6078      	str	r0, [r7, #4]
 8006aca:	460b      	mov	r3, r1
 8006acc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	78fa      	ldrb	r2, [r7, #3]
 8006ad2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006ad4:	2300      	movs	r3, #0
}
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	370c      	adds	r7, #12
 8006ada:	46bd      	mov	sp, r7
 8006adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae0:	4770      	bx	lr

08006ae2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006ae2:	b480      	push	{r7}
 8006ae4:	b083      	sub	sp, #12
 8006ae6:	af00      	add	r7, sp, #0
 8006ae8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006af0:	b2db      	uxtb	r3, r3
 8006af2:	2b04      	cmp	r3, #4
 8006af4:	d006      	beq.n	8006b04 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006afc:	b2da      	uxtb	r2, r3
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2204      	movs	r2, #4
 8006b08:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006b0c:	2300      	movs	r3, #0
}
 8006b0e:	4618      	mov	r0, r3
 8006b10:	370c      	adds	r7, #12
 8006b12:	46bd      	mov	sp, r7
 8006b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b18:	4770      	bx	lr

08006b1a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006b1a:	b480      	push	{r7}
 8006b1c:	b083      	sub	sp, #12
 8006b1e:	af00      	add	r7, sp, #0
 8006b20:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b28:	b2db      	uxtb	r3, r3
 8006b2a:	2b04      	cmp	r3, #4
 8006b2c:	d106      	bne.n	8006b3c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006b34:	b2da      	uxtb	r2, r3
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006b3c:	2300      	movs	r3, #0
}
 8006b3e:	4618      	mov	r0, r3
 8006b40:	370c      	adds	r7, #12
 8006b42:	46bd      	mov	sp, r7
 8006b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b48:	4770      	bx	lr

08006b4a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006b4a:	b580      	push	{r7, lr}
 8006b4c:	b082      	sub	sp, #8
 8006b4e:	af00      	add	r7, sp, #0
 8006b50:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b58:	b2db      	uxtb	r3, r3
 8006b5a:	2b03      	cmp	r3, #3
 8006b5c:	d110      	bne.n	8006b80 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d00b      	beq.n	8006b80 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b6e:	69db      	ldr	r3, [r3, #28]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d005      	beq.n	8006b80 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b7a:	69db      	ldr	r3, [r3, #28]
 8006b7c:	6878      	ldr	r0, [r7, #4]
 8006b7e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006b80:	2300      	movs	r3, #0
}
 8006b82:	4618      	mov	r0, r3
 8006b84:	3708      	adds	r7, #8
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bd80      	pop	{r7, pc}

08006b8a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006b8a:	b580      	push	{r7, lr}
 8006b8c:	b082      	sub	sp, #8
 8006b8e:	af00      	add	r7, sp, #0
 8006b90:	6078      	str	r0, [r7, #4]
 8006b92:	460b      	mov	r3, r1
 8006b94:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	32ae      	adds	r2, #174	; 0xae
 8006ba0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d101      	bne.n	8006bac <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006ba8:	2303      	movs	r3, #3
 8006baa:	e01c      	b.n	8006be6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bb2:	b2db      	uxtb	r3, r3
 8006bb4:	2b03      	cmp	r3, #3
 8006bb6:	d115      	bne.n	8006be4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	32ae      	adds	r2, #174	; 0xae
 8006bc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bc6:	6a1b      	ldr	r3, [r3, #32]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d00b      	beq.n	8006be4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	32ae      	adds	r2, #174	; 0xae
 8006bd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bda:	6a1b      	ldr	r3, [r3, #32]
 8006bdc:	78fa      	ldrb	r2, [r7, #3]
 8006bde:	4611      	mov	r1, r2
 8006be0:	6878      	ldr	r0, [r7, #4]
 8006be2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006be4:	2300      	movs	r3, #0
}
 8006be6:	4618      	mov	r0, r3
 8006be8:	3708      	adds	r7, #8
 8006bea:	46bd      	mov	sp, r7
 8006bec:	bd80      	pop	{r7, pc}

08006bee <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006bee:	b580      	push	{r7, lr}
 8006bf0:	b082      	sub	sp, #8
 8006bf2:	af00      	add	r7, sp, #0
 8006bf4:	6078      	str	r0, [r7, #4]
 8006bf6:	460b      	mov	r3, r1
 8006bf8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	32ae      	adds	r2, #174	; 0xae
 8006c04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d101      	bne.n	8006c10 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006c0c:	2303      	movs	r3, #3
 8006c0e:	e01c      	b.n	8006c4a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c16:	b2db      	uxtb	r3, r3
 8006c18:	2b03      	cmp	r3, #3
 8006c1a:	d115      	bne.n	8006c48 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	32ae      	adds	r2, #174	; 0xae
 8006c26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d00b      	beq.n	8006c48 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	32ae      	adds	r2, #174	; 0xae
 8006c3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c40:	78fa      	ldrb	r2, [r7, #3]
 8006c42:	4611      	mov	r1, r2
 8006c44:	6878      	ldr	r0, [r7, #4]
 8006c46:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006c48:	2300      	movs	r3, #0
}
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	3708      	adds	r7, #8
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bd80      	pop	{r7, pc}

08006c52 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006c52:	b480      	push	{r7}
 8006c54:	b083      	sub	sp, #12
 8006c56:	af00      	add	r7, sp, #0
 8006c58:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006c5a:	2300      	movs	r3, #0
}
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	370c      	adds	r7, #12
 8006c60:	46bd      	mov	sp, r7
 8006c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c66:	4770      	bx	lr

08006c68 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b084      	sub	sp, #16
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006c70:	2300      	movs	r3, #0
 8006c72:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2201      	movs	r2, #1
 8006c78:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d00e      	beq.n	8006ca4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c8c:	685b      	ldr	r3, [r3, #4]
 8006c8e:	687a      	ldr	r2, [r7, #4]
 8006c90:	6852      	ldr	r2, [r2, #4]
 8006c92:	b2d2      	uxtb	r2, r2
 8006c94:	4611      	mov	r1, r2
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	4798      	blx	r3
 8006c9a:	4603      	mov	r3, r0
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d001      	beq.n	8006ca4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006ca0:	2303      	movs	r3, #3
 8006ca2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006ca4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	3710      	adds	r7, #16
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bd80      	pop	{r7, pc}

08006cae <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006cae:	b480      	push	{r7}
 8006cb0:	b083      	sub	sp, #12
 8006cb2:	af00      	add	r7, sp, #0
 8006cb4:	6078      	str	r0, [r7, #4]
 8006cb6:	460b      	mov	r3, r1
 8006cb8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006cba:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	370c      	adds	r7, #12
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc6:	4770      	bx	lr

08006cc8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b083      	sub	sp, #12
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
 8006cd0:	460b      	mov	r3, r1
 8006cd2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006cd4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	370c      	adds	r7, #12
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce0:	4770      	bx	lr

08006ce2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8006ce2:	b580      	push	{r7, lr}
 8006ce4:	b086      	sub	sp, #24
 8006ce6:	af00      	add	r7, sp, #0
 8006ce8:	6078      	str	r0, [r7, #4]
 8006cea:	460b      	mov	r3, r1
 8006cec:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	885b      	ldrh	r3, [r3, #2]
 8006cfe:	b29a      	uxth	r2, r3
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	781b      	ldrb	r3, [r3, #0]
 8006d04:	b29b      	uxth	r3, r3
 8006d06:	429a      	cmp	r2, r3
 8006d08:	d920      	bls.n	8006d4c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	781b      	ldrb	r3, [r3, #0]
 8006d0e:	b29b      	uxth	r3, r3
 8006d10:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006d12:	e013      	b.n	8006d3c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006d14:	f107 030a 	add.w	r3, r7, #10
 8006d18:	4619      	mov	r1, r3
 8006d1a:	6978      	ldr	r0, [r7, #20]
 8006d1c:	f000 f81b 	bl	8006d56 <USBD_GetNextDesc>
 8006d20:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006d22:	697b      	ldr	r3, [r7, #20]
 8006d24:	785b      	ldrb	r3, [r3, #1]
 8006d26:	2b05      	cmp	r3, #5
 8006d28:	d108      	bne.n	8006d3c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006d2a:	697b      	ldr	r3, [r7, #20]
 8006d2c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006d2e:	693b      	ldr	r3, [r7, #16]
 8006d30:	789b      	ldrb	r3, [r3, #2]
 8006d32:	78fa      	ldrb	r2, [r7, #3]
 8006d34:	429a      	cmp	r2, r3
 8006d36:	d008      	beq.n	8006d4a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006d38:	2300      	movs	r3, #0
 8006d3a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	885b      	ldrh	r3, [r3, #2]
 8006d40:	b29a      	uxth	r2, r3
 8006d42:	897b      	ldrh	r3, [r7, #10]
 8006d44:	429a      	cmp	r2, r3
 8006d46:	d8e5      	bhi.n	8006d14 <USBD_GetEpDesc+0x32>
 8006d48:	e000      	b.n	8006d4c <USBD_GetEpDesc+0x6a>
          break;
 8006d4a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006d4c:	693b      	ldr	r3, [r7, #16]
}
 8006d4e:	4618      	mov	r0, r3
 8006d50:	3718      	adds	r7, #24
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bd80      	pop	{r7, pc}

08006d56 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006d56:	b480      	push	{r7}
 8006d58:	b085      	sub	sp, #20
 8006d5a:	af00      	add	r7, sp, #0
 8006d5c:	6078      	str	r0, [r7, #4]
 8006d5e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	881a      	ldrh	r2, [r3, #0]
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	781b      	ldrb	r3, [r3, #0]
 8006d6c:	b29b      	uxth	r3, r3
 8006d6e:	4413      	add	r3, r2
 8006d70:	b29a      	uxth	r2, r3
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	781b      	ldrb	r3, [r3, #0]
 8006d7a:	461a      	mov	r2, r3
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	4413      	add	r3, r2
 8006d80:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006d82:	68fb      	ldr	r3, [r7, #12]
}
 8006d84:	4618      	mov	r0, r3
 8006d86:	3714      	adds	r7, #20
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8e:	4770      	bx	lr

08006d90 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006d90:	b480      	push	{r7}
 8006d92:	b087      	sub	sp, #28
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006d9c:	697b      	ldr	r3, [r7, #20]
 8006d9e:	781b      	ldrb	r3, [r3, #0]
 8006da0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006da2:	697b      	ldr	r3, [r7, #20]
 8006da4:	3301      	adds	r3, #1
 8006da6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006da8:	697b      	ldr	r3, [r7, #20]
 8006daa:	781b      	ldrb	r3, [r3, #0]
 8006dac:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006dae:	8a3b      	ldrh	r3, [r7, #16]
 8006db0:	021b      	lsls	r3, r3, #8
 8006db2:	b21a      	sxth	r2, r3
 8006db4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006db8:	4313      	orrs	r3, r2
 8006dba:	b21b      	sxth	r3, r3
 8006dbc:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006dbe:	89fb      	ldrh	r3, [r7, #14]
}
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	371c      	adds	r7, #28
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dca:	4770      	bx	lr

08006dcc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b084      	sub	sp, #16
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
 8006dd4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	781b      	ldrb	r3, [r3, #0]
 8006dde:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006de2:	2b40      	cmp	r3, #64	; 0x40
 8006de4:	d005      	beq.n	8006df2 <USBD_StdDevReq+0x26>
 8006de6:	2b40      	cmp	r3, #64	; 0x40
 8006de8:	d857      	bhi.n	8006e9a <USBD_StdDevReq+0xce>
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d00f      	beq.n	8006e0e <USBD_StdDevReq+0x42>
 8006dee:	2b20      	cmp	r3, #32
 8006df0:	d153      	bne.n	8006e9a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	32ae      	adds	r2, #174	; 0xae
 8006dfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e00:	689b      	ldr	r3, [r3, #8]
 8006e02:	6839      	ldr	r1, [r7, #0]
 8006e04:	6878      	ldr	r0, [r7, #4]
 8006e06:	4798      	blx	r3
 8006e08:	4603      	mov	r3, r0
 8006e0a:	73fb      	strb	r3, [r7, #15]
      break;
 8006e0c:	e04a      	b.n	8006ea4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	785b      	ldrb	r3, [r3, #1]
 8006e12:	2b09      	cmp	r3, #9
 8006e14:	d83b      	bhi.n	8006e8e <USBD_StdDevReq+0xc2>
 8006e16:	a201      	add	r2, pc, #4	; (adr r2, 8006e1c <USBD_StdDevReq+0x50>)
 8006e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e1c:	08006e71 	.word	0x08006e71
 8006e20:	08006e85 	.word	0x08006e85
 8006e24:	08006e8f 	.word	0x08006e8f
 8006e28:	08006e7b 	.word	0x08006e7b
 8006e2c:	08006e8f 	.word	0x08006e8f
 8006e30:	08006e4f 	.word	0x08006e4f
 8006e34:	08006e45 	.word	0x08006e45
 8006e38:	08006e8f 	.word	0x08006e8f
 8006e3c:	08006e67 	.word	0x08006e67
 8006e40:	08006e59 	.word	0x08006e59
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006e44:	6839      	ldr	r1, [r7, #0]
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	f000 fa3c 	bl	80072c4 <USBD_GetDescriptor>
          break;
 8006e4c:	e024      	b.n	8006e98 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006e4e:	6839      	ldr	r1, [r7, #0]
 8006e50:	6878      	ldr	r0, [r7, #4]
 8006e52:	f000 fbcb 	bl	80075ec <USBD_SetAddress>
          break;
 8006e56:	e01f      	b.n	8006e98 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006e58:	6839      	ldr	r1, [r7, #0]
 8006e5a:	6878      	ldr	r0, [r7, #4]
 8006e5c:	f000 fc0a 	bl	8007674 <USBD_SetConfig>
 8006e60:	4603      	mov	r3, r0
 8006e62:	73fb      	strb	r3, [r7, #15]
          break;
 8006e64:	e018      	b.n	8006e98 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006e66:	6839      	ldr	r1, [r7, #0]
 8006e68:	6878      	ldr	r0, [r7, #4]
 8006e6a:	f000 fcad 	bl	80077c8 <USBD_GetConfig>
          break;
 8006e6e:	e013      	b.n	8006e98 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006e70:	6839      	ldr	r1, [r7, #0]
 8006e72:	6878      	ldr	r0, [r7, #4]
 8006e74:	f000 fcde 	bl	8007834 <USBD_GetStatus>
          break;
 8006e78:	e00e      	b.n	8006e98 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006e7a:	6839      	ldr	r1, [r7, #0]
 8006e7c:	6878      	ldr	r0, [r7, #4]
 8006e7e:	f000 fd0d 	bl	800789c <USBD_SetFeature>
          break;
 8006e82:	e009      	b.n	8006e98 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006e84:	6839      	ldr	r1, [r7, #0]
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	f000 fd31 	bl	80078ee <USBD_ClrFeature>
          break;
 8006e8c:	e004      	b.n	8006e98 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006e8e:	6839      	ldr	r1, [r7, #0]
 8006e90:	6878      	ldr	r0, [r7, #4]
 8006e92:	f000 fd88 	bl	80079a6 <USBD_CtlError>
          break;
 8006e96:	bf00      	nop
      }
      break;
 8006e98:	e004      	b.n	8006ea4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8006e9a:	6839      	ldr	r1, [r7, #0]
 8006e9c:	6878      	ldr	r0, [r7, #4]
 8006e9e:	f000 fd82 	bl	80079a6 <USBD_CtlError>
      break;
 8006ea2:	bf00      	nop
  }

  return ret;
 8006ea4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	3710      	adds	r7, #16
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	bd80      	pop	{r7, pc}
 8006eae:	bf00      	nop

08006eb0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b084      	sub	sp, #16
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
 8006eb8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006eba:	2300      	movs	r3, #0
 8006ebc:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	781b      	ldrb	r3, [r3, #0]
 8006ec2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006ec6:	2b40      	cmp	r3, #64	; 0x40
 8006ec8:	d005      	beq.n	8006ed6 <USBD_StdItfReq+0x26>
 8006eca:	2b40      	cmp	r3, #64	; 0x40
 8006ecc:	d852      	bhi.n	8006f74 <USBD_StdItfReq+0xc4>
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d001      	beq.n	8006ed6 <USBD_StdItfReq+0x26>
 8006ed2:	2b20      	cmp	r3, #32
 8006ed4:	d14e      	bne.n	8006f74 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006edc:	b2db      	uxtb	r3, r3
 8006ede:	3b01      	subs	r3, #1
 8006ee0:	2b02      	cmp	r3, #2
 8006ee2:	d840      	bhi.n	8006f66 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	889b      	ldrh	r3, [r3, #4]
 8006ee8:	b2db      	uxtb	r3, r3
 8006eea:	2b01      	cmp	r3, #1
 8006eec:	d836      	bhi.n	8006f5c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	889b      	ldrh	r3, [r3, #4]
 8006ef2:	b2db      	uxtb	r3, r3
 8006ef4:	4619      	mov	r1, r3
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	f7ff fed9 	bl	8006cae <USBD_CoreFindIF>
 8006efc:	4603      	mov	r3, r0
 8006efe:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006f00:	7bbb      	ldrb	r3, [r7, #14]
 8006f02:	2bff      	cmp	r3, #255	; 0xff
 8006f04:	d01d      	beq.n	8006f42 <USBD_StdItfReq+0x92>
 8006f06:	7bbb      	ldrb	r3, [r7, #14]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d11a      	bne.n	8006f42 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006f0c:	7bba      	ldrb	r2, [r7, #14]
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	32ae      	adds	r2, #174	; 0xae
 8006f12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f16:	689b      	ldr	r3, [r3, #8]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d00f      	beq.n	8006f3c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006f1c:	7bba      	ldrb	r2, [r7, #14]
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006f24:	7bba      	ldrb	r2, [r7, #14]
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	32ae      	adds	r2, #174	; 0xae
 8006f2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f2e:	689b      	ldr	r3, [r3, #8]
 8006f30:	6839      	ldr	r1, [r7, #0]
 8006f32:	6878      	ldr	r0, [r7, #4]
 8006f34:	4798      	blx	r3
 8006f36:	4603      	mov	r3, r0
 8006f38:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006f3a:	e004      	b.n	8006f46 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006f3c:	2303      	movs	r3, #3
 8006f3e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006f40:	e001      	b.n	8006f46 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006f42:	2303      	movs	r3, #3
 8006f44:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	88db      	ldrh	r3, [r3, #6]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d110      	bne.n	8006f70 <USBD_StdItfReq+0xc0>
 8006f4e:	7bfb      	ldrb	r3, [r7, #15]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d10d      	bne.n	8006f70 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	f000 fdd4 	bl	8007b02 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006f5a:	e009      	b.n	8006f70 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006f5c:	6839      	ldr	r1, [r7, #0]
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f000 fd21 	bl	80079a6 <USBD_CtlError>
          break;
 8006f64:	e004      	b.n	8006f70 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006f66:	6839      	ldr	r1, [r7, #0]
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	f000 fd1c 	bl	80079a6 <USBD_CtlError>
          break;
 8006f6e:	e000      	b.n	8006f72 <USBD_StdItfReq+0xc2>
          break;
 8006f70:	bf00      	nop
      }
      break;
 8006f72:	e004      	b.n	8006f7e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006f74:	6839      	ldr	r1, [r7, #0]
 8006f76:	6878      	ldr	r0, [r7, #4]
 8006f78:	f000 fd15 	bl	80079a6 <USBD_CtlError>
      break;
 8006f7c:	bf00      	nop
  }

  return ret;
 8006f7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f80:	4618      	mov	r0, r3
 8006f82:	3710      	adds	r7, #16
 8006f84:	46bd      	mov	sp, r7
 8006f86:	bd80      	pop	{r7, pc}

08006f88 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b084      	sub	sp, #16
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
 8006f90:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006f92:	2300      	movs	r3, #0
 8006f94:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	889b      	ldrh	r3, [r3, #4]
 8006f9a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	781b      	ldrb	r3, [r3, #0]
 8006fa0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006fa4:	2b40      	cmp	r3, #64	; 0x40
 8006fa6:	d007      	beq.n	8006fb8 <USBD_StdEPReq+0x30>
 8006fa8:	2b40      	cmp	r3, #64	; 0x40
 8006faa:	f200 817f 	bhi.w	80072ac <USBD_StdEPReq+0x324>
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d02a      	beq.n	8007008 <USBD_StdEPReq+0x80>
 8006fb2:	2b20      	cmp	r3, #32
 8006fb4:	f040 817a 	bne.w	80072ac <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006fb8:	7bbb      	ldrb	r3, [r7, #14]
 8006fba:	4619      	mov	r1, r3
 8006fbc:	6878      	ldr	r0, [r7, #4]
 8006fbe:	f7ff fe83 	bl	8006cc8 <USBD_CoreFindEP>
 8006fc2:	4603      	mov	r3, r0
 8006fc4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006fc6:	7b7b      	ldrb	r3, [r7, #13]
 8006fc8:	2bff      	cmp	r3, #255	; 0xff
 8006fca:	f000 8174 	beq.w	80072b6 <USBD_StdEPReq+0x32e>
 8006fce:	7b7b      	ldrb	r3, [r7, #13]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	f040 8170 	bne.w	80072b6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8006fd6:	7b7a      	ldrb	r2, [r7, #13]
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8006fde:	7b7a      	ldrb	r2, [r7, #13]
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	32ae      	adds	r2, #174	; 0xae
 8006fe4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fe8:	689b      	ldr	r3, [r3, #8]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	f000 8163 	beq.w	80072b6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006ff0:	7b7a      	ldrb	r2, [r7, #13]
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	32ae      	adds	r2, #174	; 0xae
 8006ff6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ffa:	689b      	ldr	r3, [r3, #8]
 8006ffc:	6839      	ldr	r1, [r7, #0]
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	4798      	blx	r3
 8007002:	4603      	mov	r3, r0
 8007004:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007006:	e156      	b.n	80072b6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	785b      	ldrb	r3, [r3, #1]
 800700c:	2b03      	cmp	r3, #3
 800700e:	d008      	beq.n	8007022 <USBD_StdEPReq+0x9a>
 8007010:	2b03      	cmp	r3, #3
 8007012:	f300 8145 	bgt.w	80072a0 <USBD_StdEPReq+0x318>
 8007016:	2b00      	cmp	r3, #0
 8007018:	f000 809b 	beq.w	8007152 <USBD_StdEPReq+0x1ca>
 800701c:	2b01      	cmp	r3, #1
 800701e:	d03c      	beq.n	800709a <USBD_StdEPReq+0x112>
 8007020:	e13e      	b.n	80072a0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007028:	b2db      	uxtb	r3, r3
 800702a:	2b02      	cmp	r3, #2
 800702c:	d002      	beq.n	8007034 <USBD_StdEPReq+0xac>
 800702e:	2b03      	cmp	r3, #3
 8007030:	d016      	beq.n	8007060 <USBD_StdEPReq+0xd8>
 8007032:	e02c      	b.n	800708e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007034:	7bbb      	ldrb	r3, [r7, #14]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d00d      	beq.n	8007056 <USBD_StdEPReq+0xce>
 800703a:	7bbb      	ldrb	r3, [r7, #14]
 800703c:	2b80      	cmp	r3, #128	; 0x80
 800703e:	d00a      	beq.n	8007056 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007040:	7bbb      	ldrb	r3, [r7, #14]
 8007042:	4619      	mov	r1, r3
 8007044:	6878      	ldr	r0, [r7, #4]
 8007046:	f003 fee9 	bl	800ae1c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800704a:	2180      	movs	r1, #128	; 0x80
 800704c:	6878      	ldr	r0, [r7, #4]
 800704e:	f003 fee5 	bl	800ae1c <USBD_LL_StallEP>
 8007052:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007054:	e020      	b.n	8007098 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007056:	6839      	ldr	r1, [r7, #0]
 8007058:	6878      	ldr	r0, [r7, #4]
 800705a:	f000 fca4 	bl	80079a6 <USBD_CtlError>
              break;
 800705e:	e01b      	b.n	8007098 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	885b      	ldrh	r3, [r3, #2]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d10e      	bne.n	8007086 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007068:	7bbb      	ldrb	r3, [r7, #14]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d00b      	beq.n	8007086 <USBD_StdEPReq+0xfe>
 800706e:	7bbb      	ldrb	r3, [r7, #14]
 8007070:	2b80      	cmp	r3, #128	; 0x80
 8007072:	d008      	beq.n	8007086 <USBD_StdEPReq+0xfe>
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	88db      	ldrh	r3, [r3, #6]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d104      	bne.n	8007086 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800707c:	7bbb      	ldrb	r3, [r7, #14]
 800707e:	4619      	mov	r1, r3
 8007080:	6878      	ldr	r0, [r7, #4]
 8007082:	f003 fecb 	bl	800ae1c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007086:	6878      	ldr	r0, [r7, #4]
 8007088:	f000 fd3b 	bl	8007b02 <USBD_CtlSendStatus>

              break;
 800708c:	e004      	b.n	8007098 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800708e:	6839      	ldr	r1, [r7, #0]
 8007090:	6878      	ldr	r0, [r7, #4]
 8007092:	f000 fc88 	bl	80079a6 <USBD_CtlError>
              break;
 8007096:	bf00      	nop
          }
          break;
 8007098:	e107      	b.n	80072aa <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070a0:	b2db      	uxtb	r3, r3
 80070a2:	2b02      	cmp	r3, #2
 80070a4:	d002      	beq.n	80070ac <USBD_StdEPReq+0x124>
 80070a6:	2b03      	cmp	r3, #3
 80070a8:	d016      	beq.n	80070d8 <USBD_StdEPReq+0x150>
 80070aa:	e04b      	b.n	8007144 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80070ac:	7bbb      	ldrb	r3, [r7, #14]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d00d      	beq.n	80070ce <USBD_StdEPReq+0x146>
 80070b2:	7bbb      	ldrb	r3, [r7, #14]
 80070b4:	2b80      	cmp	r3, #128	; 0x80
 80070b6:	d00a      	beq.n	80070ce <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80070b8:	7bbb      	ldrb	r3, [r7, #14]
 80070ba:	4619      	mov	r1, r3
 80070bc:	6878      	ldr	r0, [r7, #4]
 80070be:	f003 fead 	bl	800ae1c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80070c2:	2180      	movs	r1, #128	; 0x80
 80070c4:	6878      	ldr	r0, [r7, #4]
 80070c6:	f003 fea9 	bl	800ae1c <USBD_LL_StallEP>
 80070ca:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80070cc:	e040      	b.n	8007150 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80070ce:	6839      	ldr	r1, [r7, #0]
 80070d0:	6878      	ldr	r0, [r7, #4]
 80070d2:	f000 fc68 	bl	80079a6 <USBD_CtlError>
              break;
 80070d6:	e03b      	b.n	8007150 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	885b      	ldrh	r3, [r3, #2]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d136      	bne.n	800714e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80070e0:	7bbb      	ldrb	r3, [r7, #14]
 80070e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d004      	beq.n	80070f4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80070ea:	7bbb      	ldrb	r3, [r7, #14]
 80070ec:	4619      	mov	r1, r3
 80070ee:	6878      	ldr	r0, [r7, #4]
 80070f0:	f003 feca 	bl	800ae88 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80070f4:	6878      	ldr	r0, [r7, #4]
 80070f6:	f000 fd04 	bl	8007b02 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80070fa:	7bbb      	ldrb	r3, [r7, #14]
 80070fc:	4619      	mov	r1, r3
 80070fe:	6878      	ldr	r0, [r7, #4]
 8007100:	f7ff fde2 	bl	8006cc8 <USBD_CoreFindEP>
 8007104:	4603      	mov	r3, r0
 8007106:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007108:	7b7b      	ldrb	r3, [r7, #13]
 800710a:	2bff      	cmp	r3, #255	; 0xff
 800710c:	d01f      	beq.n	800714e <USBD_StdEPReq+0x1c6>
 800710e:	7b7b      	ldrb	r3, [r7, #13]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d11c      	bne.n	800714e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007114:	7b7a      	ldrb	r2, [r7, #13]
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800711c:	7b7a      	ldrb	r2, [r7, #13]
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	32ae      	adds	r2, #174	; 0xae
 8007122:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007126:	689b      	ldr	r3, [r3, #8]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d010      	beq.n	800714e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800712c:	7b7a      	ldrb	r2, [r7, #13]
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	32ae      	adds	r2, #174	; 0xae
 8007132:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007136:	689b      	ldr	r3, [r3, #8]
 8007138:	6839      	ldr	r1, [r7, #0]
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	4798      	blx	r3
 800713e:	4603      	mov	r3, r0
 8007140:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007142:	e004      	b.n	800714e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007144:	6839      	ldr	r1, [r7, #0]
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	f000 fc2d 	bl	80079a6 <USBD_CtlError>
              break;
 800714c:	e000      	b.n	8007150 <USBD_StdEPReq+0x1c8>
              break;
 800714e:	bf00      	nop
          }
          break;
 8007150:	e0ab      	b.n	80072aa <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007158:	b2db      	uxtb	r3, r3
 800715a:	2b02      	cmp	r3, #2
 800715c:	d002      	beq.n	8007164 <USBD_StdEPReq+0x1dc>
 800715e:	2b03      	cmp	r3, #3
 8007160:	d032      	beq.n	80071c8 <USBD_StdEPReq+0x240>
 8007162:	e097      	b.n	8007294 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007164:	7bbb      	ldrb	r3, [r7, #14]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d007      	beq.n	800717a <USBD_StdEPReq+0x1f2>
 800716a:	7bbb      	ldrb	r3, [r7, #14]
 800716c:	2b80      	cmp	r3, #128	; 0x80
 800716e:	d004      	beq.n	800717a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007170:	6839      	ldr	r1, [r7, #0]
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	f000 fc17 	bl	80079a6 <USBD_CtlError>
                break;
 8007178:	e091      	b.n	800729e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800717a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800717e:	2b00      	cmp	r3, #0
 8007180:	da0b      	bge.n	800719a <USBD_StdEPReq+0x212>
 8007182:	7bbb      	ldrb	r3, [r7, #14]
 8007184:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007188:	4613      	mov	r3, r2
 800718a:	009b      	lsls	r3, r3, #2
 800718c:	4413      	add	r3, r2
 800718e:	009b      	lsls	r3, r3, #2
 8007190:	3310      	adds	r3, #16
 8007192:	687a      	ldr	r2, [r7, #4]
 8007194:	4413      	add	r3, r2
 8007196:	3304      	adds	r3, #4
 8007198:	e00b      	b.n	80071b2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800719a:	7bbb      	ldrb	r3, [r7, #14]
 800719c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80071a0:	4613      	mov	r3, r2
 80071a2:	009b      	lsls	r3, r3, #2
 80071a4:	4413      	add	r3, r2
 80071a6:	009b      	lsls	r3, r3, #2
 80071a8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80071ac:	687a      	ldr	r2, [r7, #4]
 80071ae:	4413      	add	r3, r2
 80071b0:	3304      	adds	r3, #4
 80071b2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80071b4:	68bb      	ldr	r3, [r7, #8]
 80071b6:	2200      	movs	r2, #0
 80071b8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80071ba:	68bb      	ldr	r3, [r7, #8]
 80071bc:	2202      	movs	r2, #2
 80071be:	4619      	mov	r1, r3
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	f000 fc61 	bl	8007a88 <USBD_CtlSendData>
              break;
 80071c6:	e06a      	b.n	800729e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80071c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	da11      	bge.n	80071f4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80071d0:	7bbb      	ldrb	r3, [r7, #14]
 80071d2:	f003 020f 	and.w	r2, r3, #15
 80071d6:	6879      	ldr	r1, [r7, #4]
 80071d8:	4613      	mov	r3, r2
 80071da:	009b      	lsls	r3, r3, #2
 80071dc:	4413      	add	r3, r2
 80071de:	009b      	lsls	r3, r3, #2
 80071e0:	440b      	add	r3, r1
 80071e2:	3324      	adds	r3, #36	; 0x24
 80071e4:	881b      	ldrh	r3, [r3, #0]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d117      	bne.n	800721a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80071ea:	6839      	ldr	r1, [r7, #0]
 80071ec:	6878      	ldr	r0, [r7, #4]
 80071ee:	f000 fbda 	bl	80079a6 <USBD_CtlError>
                  break;
 80071f2:	e054      	b.n	800729e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80071f4:	7bbb      	ldrb	r3, [r7, #14]
 80071f6:	f003 020f 	and.w	r2, r3, #15
 80071fa:	6879      	ldr	r1, [r7, #4]
 80071fc:	4613      	mov	r3, r2
 80071fe:	009b      	lsls	r3, r3, #2
 8007200:	4413      	add	r3, r2
 8007202:	009b      	lsls	r3, r3, #2
 8007204:	440b      	add	r3, r1
 8007206:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800720a:	881b      	ldrh	r3, [r3, #0]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d104      	bne.n	800721a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007210:	6839      	ldr	r1, [r7, #0]
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f000 fbc7 	bl	80079a6 <USBD_CtlError>
                  break;
 8007218:	e041      	b.n	800729e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800721a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800721e:	2b00      	cmp	r3, #0
 8007220:	da0b      	bge.n	800723a <USBD_StdEPReq+0x2b2>
 8007222:	7bbb      	ldrb	r3, [r7, #14]
 8007224:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007228:	4613      	mov	r3, r2
 800722a:	009b      	lsls	r3, r3, #2
 800722c:	4413      	add	r3, r2
 800722e:	009b      	lsls	r3, r3, #2
 8007230:	3310      	adds	r3, #16
 8007232:	687a      	ldr	r2, [r7, #4]
 8007234:	4413      	add	r3, r2
 8007236:	3304      	adds	r3, #4
 8007238:	e00b      	b.n	8007252 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800723a:	7bbb      	ldrb	r3, [r7, #14]
 800723c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007240:	4613      	mov	r3, r2
 8007242:	009b      	lsls	r3, r3, #2
 8007244:	4413      	add	r3, r2
 8007246:	009b      	lsls	r3, r3, #2
 8007248:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800724c:	687a      	ldr	r2, [r7, #4]
 800724e:	4413      	add	r3, r2
 8007250:	3304      	adds	r3, #4
 8007252:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007254:	7bbb      	ldrb	r3, [r7, #14]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d002      	beq.n	8007260 <USBD_StdEPReq+0x2d8>
 800725a:	7bbb      	ldrb	r3, [r7, #14]
 800725c:	2b80      	cmp	r3, #128	; 0x80
 800725e:	d103      	bne.n	8007268 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007260:	68bb      	ldr	r3, [r7, #8]
 8007262:	2200      	movs	r2, #0
 8007264:	601a      	str	r2, [r3, #0]
 8007266:	e00e      	b.n	8007286 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007268:	7bbb      	ldrb	r3, [r7, #14]
 800726a:	4619      	mov	r1, r3
 800726c:	6878      	ldr	r0, [r7, #4]
 800726e:	f003 fe41 	bl	800aef4 <USBD_LL_IsStallEP>
 8007272:	4603      	mov	r3, r0
 8007274:	2b00      	cmp	r3, #0
 8007276:	d003      	beq.n	8007280 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	2201      	movs	r2, #1
 800727c:	601a      	str	r2, [r3, #0]
 800727e:	e002      	b.n	8007286 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007280:	68bb      	ldr	r3, [r7, #8]
 8007282:	2200      	movs	r2, #0
 8007284:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007286:	68bb      	ldr	r3, [r7, #8]
 8007288:	2202      	movs	r2, #2
 800728a:	4619      	mov	r1, r3
 800728c:	6878      	ldr	r0, [r7, #4]
 800728e:	f000 fbfb 	bl	8007a88 <USBD_CtlSendData>
              break;
 8007292:	e004      	b.n	800729e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007294:	6839      	ldr	r1, [r7, #0]
 8007296:	6878      	ldr	r0, [r7, #4]
 8007298:	f000 fb85 	bl	80079a6 <USBD_CtlError>
              break;
 800729c:	bf00      	nop
          }
          break;
 800729e:	e004      	b.n	80072aa <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80072a0:	6839      	ldr	r1, [r7, #0]
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f000 fb7f 	bl	80079a6 <USBD_CtlError>
          break;
 80072a8:	bf00      	nop
      }
      break;
 80072aa:	e005      	b.n	80072b8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80072ac:	6839      	ldr	r1, [r7, #0]
 80072ae:	6878      	ldr	r0, [r7, #4]
 80072b0:	f000 fb79 	bl	80079a6 <USBD_CtlError>
      break;
 80072b4:	e000      	b.n	80072b8 <USBD_StdEPReq+0x330>
      break;
 80072b6:	bf00      	nop
  }

  return ret;
 80072b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80072ba:	4618      	mov	r0, r3
 80072bc:	3710      	adds	r7, #16
 80072be:	46bd      	mov	sp, r7
 80072c0:	bd80      	pop	{r7, pc}
	...

080072c4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b084      	sub	sp, #16
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
 80072cc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80072ce:	2300      	movs	r3, #0
 80072d0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80072d2:	2300      	movs	r3, #0
 80072d4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80072d6:	2300      	movs	r3, #0
 80072d8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	885b      	ldrh	r3, [r3, #2]
 80072de:	0a1b      	lsrs	r3, r3, #8
 80072e0:	b29b      	uxth	r3, r3
 80072e2:	3b01      	subs	r3, #1
 80072e4:	2b0e      	cmp	r3, #14
 80072e6:	f200 8152 	bhi.w	800758e <USBD_GetDescriptor+0x2ca>
 80072ea:	a201      	add	r2, pc, #4	; (adr r2, 80072f0 <USBD_GetDescriptor+0x2c>)
 80072ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072f0:	08007361 	.word	0x08007361
 80072f4:	08007379 	.word	0x08007379
 80072f8:	080073b9 	.word	0x080073b9
 80072fc:	0800758f 	.word	0x0800758f
 8007300:	0800758f 	.word	0x0800758f
 8007304:	0800752f 	.word	0x0800752f
 8007308:	0800755b 	.word	0x0800755b
 800730c:	0800758f 	.word	0x0800758f
 8007310:	0800758f 	.word	0x0800758f
 8007314:	0800758f 	.word	0x0800758f
 8007318:	0800758f 	.word	0x0800758f
 800731c:	0800758f 	.word	0x0800758f
 8007320:	0800758f 	.word	0x0800758f
 8007324:	0800758f 	.word	0x0800758f
 8007328:	0800732d 	.word	0x0800732d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007332:	69db      	ldr	r3, [r3, #28]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d00b      	beq.n	8007350 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800733e:	69db      	ldr	r3, [r3, #28]
 8007340:	687a      	ldr	r2, [r7, #4]
 8007342:	7c12      	ldrb	r2, [r2, #16]
 8007344:	f107 0108 	add.w	r1, r7, #8
 8007348:	4610      	mov	r0, r2
 800734a:	4798      	blx	r3
 800734c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800734e:	e126      	b.n	800759e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007350:	6839      	ldr	r1, [r7, #0]
 8007352:	6878      	ldr	r0, [r7, #4]
 8007354:	f000 fb27 	bl	80079a6 <USBD_CtlError>
        err++;
 8007358:	7afb      	ldrb	r3, [r7, #11]
 800735a:	3301      	adds	r3, #1
 800735c:	72fb      	strb	r3, [r7, #11]
      break;
 800735e:	e11e      	b.n	800759e <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	687a      	ldr	r2, [r7, #4]
 800736a:	7c12      	ldrb	r2, [r2, #16]
 800736c:	f107 0108 	add.w	r1, r7, #8
 8007370:	4610      	mov	r0, r2
 8007372:	4798      	blx	r3
 8007374:	60f8      	str	r0, [r7, #12]
      break;
 8007376:	e112      	b.n	800759e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	7c1b      	ldrb	r3, [r3, #16]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d10d      	bne.n	800739c <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007388:	f107 0208 	add.w	r2, r7, #8
 800738c:	4610      	mov	r0, r2
 800738e:	4798      	blx	r3
 8007390:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	3301      	adds	r3, #1
 8007396:	2202      	movs	r2, #2
 8007398:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800739a:	e100      	b.n	800759e <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073a4:	f107 0208 	add.w	r2, r7, #8
 80073a8:	4610      	mov	r0, r2
 80073aa:	4798      	blx	r3
 80073ac:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	3301      	adds	r3, #1
 80073b2:	2202      	movs	r2, #2
 80073b4:	701a      	strb	r2, [r3, #0]
      break;
 80073b6:	e0f2      	b.n	800759e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	885b      	ldrh	r3, [r3, #2]
 80073bc:	b2db      	uxtb	r3, r3
 80073be:	2b05      	cmp	r3, #5
 80073c0:	f200 80ac 	bhi.w	800751c <USBD_GetDescriptor+0x258>
 80073c4:	a201      	add	r2, pc, #4	; (adr r2, 80073cc <USBD_GetDescriptor+0x108>)
 80073c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073ca:	bf00      	nop
 80073cc:	080073e5 	.word	0x080073e5
 80073d0:	08007419 	.word	0x08007419
 80073d4:	0800744d 	.word	0x0800744d
 80073d8:	08007481 	.word	0x08007481
 80073dc:	080074b5 	.word	0x080074b5
 80073e0:	080074e9 	.word	0x080074e9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073ea:	685b      	ldr	r3, [r3, #4]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d00b      	beq.n	8007408 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073f6:	685b      	ldr	r3, [r3, #4]
 80073f8:	687a      	ldr	r2, [r7, #4]
 80073fa:	7c12      	ldrb	r2, [r2, #16]
 80073fc:	f107 0108 	add.w	r1, r7, #8
 8007400:	4610      	mov	r0, r2
 8007402:	4798      	blx	r3
 8007404:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007406:	e091      	b.n	800752c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007408:	6839      	ldr	r1, [r7, #0]
 800740a:	6878      	ldr	r0, [r7, #4]
 800740c:	f000 facb 	bl	80079a6 <USBD_CtlError>
            err++;
 8007410:	7afb      	ldrb	r3, [r7, #11]
 8007412:	3301      	adds	r3, #1
 8007414:	72fb      	strb	r3, [r7, #11]
          break;
 8007416:	e089      	b.n	800752c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800741e:	689b      	ldr	r3, [r3, #8]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d00b      	beq.n	800743c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800742a:	689b      	ldr	r3, [r3, #8]
 800742c:	687a      	ldr	r2, [r7, #4]
 800742e:	7c12      	ldrb	r2, [r2, #16]
 8007430:	f107 0108 	add.w	r1, r7, #8
 8007434:	4610      	mov	r0, r2
 8007436:	4798      	blx	r3
 8007438:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800743a:	e077      	b.n	800752c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800743c:	6839      	ldr	r1, [r7, #0]
 800743e:	6878      	ldr	r0, [r7, #4]
 8007440:	f000 fab1 	bl	80079a6 <USBD_CtlError>
            err++;
 8007444:	7afb      	ldrb	r3, [r7, #11]
 8007446:	3301      	adds	r3, #1
 8007448:	72fb      	strb	r3, [r7, #11]
          break;
 800744a:	e06f      	b.n	800752c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007452:	68db      	ldr	r3, [r3, #12]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d00b      	beq.n	8007470 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800745e:	68db      	ldr	r3, [r3, #12]
 8007460:	687a      	ldr	r2, [r7, #4]
 8007462:	7c12      	ldrb	r2, [r2, #16]
 8007464:	f107 0108 	add.w	r1, r7, #8
 8007468:	4610      	mov	r0, r2
 800746a:	4798      	blx	r3
 800746c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800746e:	e05d      	b.n	800752c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007470:	6839      	ldr	r1, [r7, #0]
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	f000 fa97 	bl	80079a6 <USBD_CtlError>
            err++;
 8007478:	7afb      	ldrb	r3, [r7, #11]
 800747a:	3301      	adds	r3, #1
 800747c:	72fb      	strb	r3, [r7, #11]
          break;
 800747e:	e055      	b.n	800752c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007486:	691b      	ldr	r3, [r3, #16]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d00b      	beq.n	80074a4 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007492:	691b      	ldr	r3, [r3, #16]
 8007494:	687a      	ldr	r2, [r7, #4]
 8007496:	7c12      	ldrb	r2, [r2, #16]
 8007498:	f107 0108 	add.w	r1, r7, #8
 800749c:	4610      	mov	r0, r2
 800749e:	4798      	blx	r3
 80074a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80074a2:	e043      	b.n	800752c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80074a4:	6839      	ldr	r1, [r7, #0]
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	f000 fa7d 	bl	80079a6 <USBD_CtlError>
            err++;
 80074ac:	7afb      	ldrb	r3, [r7, #11]
 80074ae:	3301      	adds	r3, #1
 80074b0:	72fb      	strb	r3, [r7, #11]
          break;
 80074b2:	e03b      	b.n	800752c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074ba:	695b      	ldr	r3, [r3, #20]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d00b      	beq.n	80074d8 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074c6:	695b      	ldr	r3, [r3, #20]
 80074c8:	687a      	ldr	r2, [r7, #4]
 80074ca:	7c12      	ldrb	r2, [r2, #16]
 80074cc:	f107 0108 	add.w	r1, r7, #8
 80074d0:	4610      	mov	r0, r2
 80074d2:	4798      	blx	r3
 80074d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80074d6:	e029      	b.n	800752c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80074d8:	6839      	ldr	r1, [r7, #0]
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	f000 fa63 	bl	80079a6 <USBD_CtlError>
            err++;
 80074e0:	7afb      	ldrb	r3, [r7, #11]
 80074e2:	3301      	adds	r3, #1
 80074e4:	72fb      	strb	r3, [r7, #11]
          break;
 80074e6:	e021      	b.n	800752c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074ee:	699b      	ldr	r3, [r3, #24]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d00b      	beq.n	800750c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074fa:	699b      	ldr	r3, [r3, #24]
 80074fc:	687a      	ldr	r2, [r7, #4]
 80074fe:	7c12      	ldrb	r2, [r2, #16]
 8007500:	f107 0108 	add.w	r1, r7, #8
 8007504:	4610      	mov	r0, r2
 8007506:	4798      	blx	r3
 8007508:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800750a:	e00f      	b.n	800752c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800750c:	6839      	ldr	r1, [r7, #0]
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f000 fa49 	bl	80079a6 <USBD_CtlError>
            err++;
 8007514:	7afb      	ldrb	r3, [r7, #11]
 8007516:	3301      	adds	r3, #1
 8007518:	72fb      	strb	r3, [r7, #11]
          break;
 800751a:	e007      	b.n	800752c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800751c:	6839      	ldr	r1, [r7, #0]
 800751e:	6878      	ldr	r0, [r7, #4]
 8007520:	f000 fa41 	bl	80079a6 <USBD_CtlError>
          err++;
 8007524:	7afb      	ldrb	r3, [r7, #11]
 8007526:	3301      	adds	r3, #1
 8007528:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800752a:	bf00      	nop
      }
      break;
 800752c:	e037      	b.n	800759e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	7c1b      	ldrb	r3, [r3, #16]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d109      	bne.n	800754a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800753c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800753e:	f107 0208 	add.w	r2, r7, #8
 8007542:	4610      	mov	r0, r2
 8007544:	4798      	blx	r3
 8007546:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007548:	e029      	b.n	800759e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800754a:	6839      	ldr	r1, [r7, #0]
 800754c:	6878      	ldr	r0, [r7, #4]
 800754e:	f000 fa2a 	bl	80079a6 <USBD_CtlError>
        err++;
 8007552:	7afb      	ldrb	r3, [r7, #11]
 8007554:	3301      	adds	r3, #1
 8007556:	72fb      	strb	r3, [r7, #11]
      break;
 8007558:	e021      	b.n	800759e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	7c1b      	ldrb	r3, [r3, #16]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d10d      	bne.n	800757e <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800756a:	f107 0208 	add.w	r2, r7, #8
 800756e:	4610      	mov	r0, r2
 8007570:	4798      	blx	r3
 8007572:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	3301      	adds	r3, #1
 8007578:	2207      	movs	r2, #7
 800757a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800757c:	e00f      	b.n	800759e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800757e:	6839      	ldr	r1, [r7, #0]
 8007580:	6878      	ldr	r0, [r7, #4]
 8007582:	f000 fa10 	bl	80079a6 <USBD_CtlError>
        err++;
 8007586:	7afb      	ldrb	r3, [r7, #11]
 8007588:	3301      	adds	r3, #1
 800758a:	72fb      	strb	r3, [r7, #11]
      break;
 800758c:	e007      	b.n	800759e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800758e:	6839      	ldr	r1, [r7, #0]
 8007590:	6878      	ldr	r0, [r7, #4]
 8007592:	f000 fa08 	bl	80079a6 <USBD_CtlError>
      err++;
 8007596:	7afb      	ldrb	r3, [r7, #11]
 8007598:	3301      	adds	r3, #1
 800759a:	72fb      	strb	r3, [r7, #11]
      break;
 800759c:	bf00      	nop
  }

  if (err != 0U)
 800759e:	7afb      	ldrb	r3, [r7, #11]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d11e      	bne.n	80075e2 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	88db      	ldrh	r3, [r3, #6]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d016      	beq.n	80075da <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80075ac:	893b      	ldrh	r3, [r7, #8]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d00e      	beq.n	80075d0 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	88da      	ldrh	r2, [r3, #6]
 80075b6:	893b      	ldrh	r3, [r7, #8]
 80075b8:	4293      	cmp	r3, r2
 80075ba:	bf28      	it	cs
 80075bc:	4613      	movcs	r3, r2
 80075be:	b29b      	uxth	r3, r3
 80075c0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80075c2:	893b      	ldrh	r3, [r7, #8]
 80075c4:	461a      	mov	r2, r3
 80075c6:	68f9      	ldr	r1, [r7, #12]
 80075c8:	6878      	ldr	r0, [r7, #4]
 80075ca:	f000 fa5d 	bl	8007a88 <USBD_CtlSendData>
 80075ce:	e009      	b.n	80075e4 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80075d0:	6839      	ldr	r1, [r7, #0]
 80075d2:	6878      	ldr	r0, [r7, #4]
 80075d4:	f000 f9e7 	bl	80079a6 <USBD_CtlError>
 80075d8:	e004      	b.n	80075e4 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80075da:	6878      	ldr	r0, [r7, #4]
 80075dc:	f000 fa91 	bl	8007b02 <USBD_CtlSendStatus>
 80075e0:	e000      	b.n	80075e4 <USBD_GetDescriptor+0x320>
    return;
 80075e2:	bf00      	nop
  }
}
 80075e4:	3710      	adds	r7, #16
 80075e6:	46bd      	mov	sp, r7
 80075e8:	bd80      	pop	{r7, pc}
 80075ea:	bf00      	nop

080075ec <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b084      	sub	sp, #16
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
 80075f4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	889b      	ldrh	r3, [r3, #4]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d131      	bne.n	8007662 <USBD_SetAddress+0x76>
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	88db      	ldrh	r3, [r3, #6]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d12d      	bne.n	8007662 <USBD_SetAddress+0x76>
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	885b      	ldrh	r3, [r3, #2]
 800760a:	2b7f      	cmp	r3, #127	; 0x7f
 800760c:	d829      	bhi.n	8007662 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	885b      	ldrh	r3, [r3, #2]
 8007612:	b2db      	uxtb	r3, r3
 8007614:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007618:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007620:	b2db      	uxtb	r3, r3
 8007622:	2b03      	cmp	r3, #3
 8007624:	d104      	bne.n	8007630 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007626:	6839      	ldr	r1, [r7, #0]
 8007628:	6878      	ldr	r0, [r7, #4]
 800762a:	f000 f9bc 	bl	80079a6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800762e:	e01d      	b.n	800766c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	7bfa      	ldrb	r2, [r7, #15]
 8007634:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007638:	7bfb      	ldrb	r3, [r7, #15]
 800763a:	4619      	mov	r1, r3
 800763c:	6878      	ldr	r0, [r7, #4]
 800763e:	f003 fc85 	bl	800af4c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007642:	6878      	ldr	r0, [r7, #4]
 8007644:	f000 fa5d 	bl	8007b02 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007648:	7bfb      	ldrb	r3, [r7, #15]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d004      	beq.n	8007658 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2202      	movs	r2, #2
 8007652:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007656:	e009      	b.n	800766c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2201      	movs	r2, #1
 800765c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007660:	e004      	b.n	800766c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007662:	6839      	ldr	r1, [r7, #0]
 8007664:	6878      	ldr	r0, [r7, #4]
 8007666:	f000 f99e 	bl	80079a6 <USBD_CtlError>
  }
}
 800766a:	bf00      	nop
 800766c:	bf00      	nop
 800766e:	3710      	adds	r7, #16
 8007670:	46bd      	mov	sp, r7
 8007672:	bd80      	pop	{r7, pc}

08007674 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007674:	b580      	push	{r7, lr}
 8007676:	b084      	sub	sp, #16
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
 800767c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800767e:	2300      	movs	r3, #0
 8007680:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	885b      	ldrh	r3, [r3, #2]
 8007686:	b2da      	uxtb	r2, r3
 8007688:	4b4e      	ldr	r3, [pc, #312]	; (80077c4 <USBD_SetConfig+0x150>)
 800768a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800768c:	4b4d      	ldr	r3, [pc, #308]	; (80077c4 <USBD_SetConfig+0x150>)
 800768e:	781b      	ldrb	r3, [r3, #0]
 8007690:	2b01      	cmp	r3, #1
 8007692:	d905      	bls.n	80076a0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007694:	6839      	ldr	r1, [r7, #0]
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	f000 f985 	bl	80079a6 <USBD_CtlError>
    return USBD_FAIL;
 800769c:	2303      	movs	r3, #3
 800769e:	e08c      	b.n	80077ba <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076a6:	b2db      	uxtb	r3, r3
 80076a8:	2b02      	cmp	r3, #2
 80076aa:	d002      	beq.n	80076b2 <USBD_SetConfig+0x3e>
 80076ac:	2b03      	cmp	r3, #3
 80076ae:	d029      	beq.n	8007704 <USBD_SetConfig+0x90>
 80076b0:	e075      	b.n	800779e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80076b2:	4b44      	ldr	r3, [pc, #272]	; (80077c4 <USBD_SetConfig+0x150>)
 80076b4:	781b      	ldrb	r3, [r3, #0]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d020      	beq.n	80076fc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80076ba:	4b42      	ldr	r3, [pc, #264]	; (80077c4 <USBD_SetConfig+0x150>)
 80076bc:	781b      	ldrb	r3, [r3, #0]
 80076be:	461a      	mov	r2, r3
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80076c4:	4b3f      	ldr	r3, [pc, #252]	; (80077c4 <USBD_SetConfig+0x150>)
 80076c6:	781b      	ldrb	r3, [r3, #0]
 80076c8:	4619      	mov	r1, r3
 80076ca:	6878      	ldr	r0, [r7, #4]
 80076cc:	f7fe ffb7 	bl	800663e <USBD_SetClassConfig>
 80076d0:	4603      	mov	r3, r0
 80076d2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80076d4:	7bfb      	ldrb	r3, [r7, #15]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d008      	beq.n	80076ec <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80076da:	6839      	ldr	r1, [r7, #0]
 80076dc:	6878      	ldr	r0, [r7, #4]
 80076de:	f000 f962 	bl	80079a6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2202      	movs	r2, #2
 80076e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80076ea:	e065      	b.n	80077b8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80076ec:	6878      	ldr	r0, [r7, #4]
 80076ee:	f000 fa08 	bl	8007b02 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2203      	movs	r2, #3
 80076f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80076fa:	e05d      	b.n	80077b8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80076fc:	6878      	ldr	r0, [r7, #4]
 80076fe:	f000 fa00 	bl	8007b02 <USBD_CtlSendStatus>
      break;
 8007702:	e059      	b.n	80077b8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007704:	4b2f      	ldr	r3, [pc, #188]	; (80077c4 <USBD_SetConfig+0x150>)
 8007706:	781b      	ldrb	r3, [r3, #0]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d112      	bne.n	8007732 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2202      	movs	r2, #2
 8007710:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007714:	4b2b      	ldr	r3, [pc, #172]	; (80077c4 <USBD_SetConfig+0x150>)
 8007716:	781b      	ldrb	r3, [r3, #0]
 8007718:	461a      	mov	r2, r3
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800771e:	4b29      	ldr	r3, [pc, #164]	; (80077c4 <USBD_SetConfig+0x150>)
 8007720:	781b      	ldrb	r3, [r3, #0]
 8007722:	4619      	mov	r1, r3
 8007724:	6878      	ldr	r0, [r7, #4]
 8007726:	f7fe ffa6 	bl	8006676 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800772a:	6878      	ldr	r0, [r7, #4]
 800772c:	f000 f9e9 	bl	8007b02 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007730:	e042      	b.n	80077b8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007732:	4b24      	ldr	r3, [pc, #144]	; (80077c4 <USBD_SetConfig+0x150>)
 8007734:	781b      	ldrb	r3, [r3, #0]
 8007736:	461a      	mov	r2, r3
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	685b      	ldr	r3, [r3, #4]
 800773c:	429a      	cmp	r2, r3
 800773e:	d02a      	beq.n	8007796 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	685b      	ldr	r3, [r3, #4]
 8007744:	b2db      	uxtb	r3, r3
 8007746:	4619      	mov	r1, r3
 8007748:	6878      	ldr	r0, [r7, #4]
 800774a:	f7fe ff94 	bl	8006676 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800774e:	4b1d      	ldr	r3, [pc, #116]	; (80077c4 <USBD_SetConfig+0x150>)
 8007750:	781b      	ldrb	r3, [r3, #0]
 8007752:	461a      	mov	r2, r3
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007758:	4b1a      	ldr	r3, [pc, #104]	; (80077c4 <USBD_SetConfig+0x150>)
 800775a:	781b      	ldrb	r3, [r3, #0]
 800775c:	4619      	mov	r1, r3
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f7fe ff6d 	bl	800663e <USBD_SetClassConfig>
 8007764:	4603      	mov	r3, r0
 8007766:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007768:	7bfb      	ldrb	r3, [r7, #15]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d00f      	beq.n	800778e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800776e:	6839      	ldr	r1, [r7, #0]
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	f000 f918 	bl	80079a6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	685b      	ldr	r3, [r3, #4]
 800777a:	b2db      	uxtb	r3, r3
 800777c:	4619      	mov	r1, r3
 800777e:	6878      	ldr	r0, [r7, #4]
 8007780:	f7fe ff79 	bl	8006676 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2202      	movs	r2, #2
 8007788:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800778c:	e014      	b.n	80077b8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800778e:	6878      	ldr	r0, [r7, #4]
 8007790:	f000 f9b7 	bl	8007b02 <USBD_CtlSendStatus>
      break;
 8007794:	e010      	b.n	80077b8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007796:	6878      	ldr	r0, [r7, #4]
 8007798:	f000 f9b3 	bl	8007b02 <USBD_CtlSendStatus>
      break;
 800779c:	e00c      	b.n	80077b8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800779e:	6839      	ldr	r1, [r7, #0]
 80077a0:	6878      	ldr	r0, [r7, #4]
 80077a2:	f000 f900 	bl	80079a6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80077a6:	4b07      	ldr	r3, [pc, #28]	; (80077c4 <USBD_SetConfig+0x150>)
 80077a8:	781b      	ldrb	r3, [r3, #0]
 80077aa:	4619      	mov	r1, r3
 80077ac:	6878      	ldr	r0, [r7, #4]
 80077ae:	f7fe ff62 	bl	8006676 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80077b2:	2303      	movs	r3, #3
 80077b4:	73fb      	strb	r3, [r7, #15]
      break;
 80077b6:	bf00      	nop
  }

  return ret;
 80077b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80077ba:	4618      	mov	r0, r3
 80077bc:	3710      	adds	r7, #16
 80077be:	46bd      	mov	sp, r7
 80077c0:	bd80      	pop	{r7, pc}
 80077c2:	bf00      	nop
 80077c4:	20000228 	.word	0x20000228

080077c8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b082      	sub	sp, #8
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
 80077d0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	88db      	ldrh	r3, [r3, #6]
 80077d6:	2b01      	cmp	r3, #1
 80077d8:	d004      	beq.n	80077e4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80077da:	6839      	ldr	r1, [r7, #0]
 80077dc:	6878      	ldr	r0, [r7, #4]
 80077de:	f000 f8e2 	bl	80079a6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80077e2:	e023      	b.n	800782c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077ea:	b2db      	uxtb	r3, r3
 80077ec:	2b02      	cmp	r3, #2
 80077ee:	dc02      	bgt.n	80077f6 <USBD_GetConfig+0x2e>
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	dc03      	bgt.n	80077fc <USBD_GetConfig+0x34>
 80077f4:	e015      	b.n	8007822 <USBD_GetConfig+0x5a>
 80077f6:	2b03      	cmp	r3, #3
 80077f8:	d00b      	beq.n	8007812 <USBD_GetConfig+0x4a>
 80077fa:	e012      	b.n	8007822 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2200      	movs	r2, #0
 8007800:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	3308      	adds	r3, #8
 8007806:	2201      	movs	r2, #1
 8007808:	4619      	mov	r1, r3
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	f000 f93c 	bl	8007a88 <USBD_CtlSendData>
        break;
 8007810:	e00c      	b.n	800782c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	3304      	adds	r3, #4
 8007816:	2201      	movs	r2, #1
 8007818:	4619      	mov	r1, r3
 800781a:	6878      	ldr	r0, [r7, #4]
 800781c:	f000 f934 	bl	8007a88 <USBD_CtlSendData>
        break;
 8007820:	e004      	b.n	800782c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007822:	6839      	ldr	r1, [r7, #0]
 8007824:	6878      	ldr	r0, [r7, #4]
 8007826:	f000 f8be 	bl	80079a6 <USBD_CtlError>
        break;
 800782a:	bf00      	nop
}
 800782c:	bf00      	nop
 800782e:	3708      	adds	r7, #8
 8007830:	46bd      	mov	sp, r7
 8007832:	bd80      	pop	{r7, pc}

08007834 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b082      	sub	sp, #8
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
 800783c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007844:	b2db      	uxtb	r3, r3
 8007846:	3b01      	subs	r3, #1
 8007848:	2b02      	cmp	r3, #2
 800784a:	d81e      	bhi.n	800788a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	88db      	ldrh	r3, [r3, #6]
 8007850:	2b02      	cmp	r3, #2
 8007852:	d004      	beq.n	800785e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007854:	6839      	ldr	r1, [r7, #0]
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f000 f8a5 	bl	80079a6 <USBD_CtlError>
        break;
 800785c:	e01a      	b.n	8007894 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2201      	movs	r2, #1
 8007862:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800786a:	2b00      	cmp	r3, #0
 800786c:	d005      	beq.n	800787a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	68db      	ldr	r3, [r3, #12]
 8007872:	f043 0202 	orr.w	r2, r3, #2
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	330c      	adds	r3, #12
 800787e:	2202      	movs	r2, #2
 8007880:	4619      	mov	r1, r3
 8007882:	6878      	ldr	r0, [r7, #4]
 8007884:	f000 f900 	bl	8007a88 <USBD_CtlSendData>
      break;
 8007888:	e004      	b.n	8007894 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800788a:	6839      	ldr	r1, [r7, #0]
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	f000 f88a 	bl	80079a6 <USBD_CtlError>
      break;
 8007892:	bf00      	nop
  }
}
 8007894:	bf00      	nop
 8007896:	3708      	adds	r7, #8
 8007898:	46bd      	mov	sp, r7
 800789a:	bd80      	pop	{r7, pc}

0800789c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b082      	sub	sp, #8
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
 80078a4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	885b      	ldrh	r3, [r3, #2]
 80078aa:	2b01      	cmp	r3, #1
 80078ac:	d107      	bne.n	80078be <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	2201      	movs	r2, #1
 80078b2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	f000 f923 	bl	8007b02 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80078bc:	e013      	b.n	80078e6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	885b      	ldrh	r3, [r3, #2]
 80078c2:	2b02      	cmp	r3, #2
 80078c4:	d10b      	bne.n	80078de <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	889b      	ldrh	r3, [r3, #4]
 80078ca:	0a1b      	lsrs	r3, r3, #8
 80078cc:	b29b      	uxth	r3, r3
 80078ce:	b2da      	uxtb	r2, r3
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80078d6:	6878      	ldr	r0, [r7, #4]
 80078d8:	f000 f913 	bl	8007b02 <USBD_CtlSendStatus>
}
 80078dc:	e003      	b.n	80078e6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80078de:	6839      	ldr	r1, [r7, #0]
 80078e0:	6878      	ldr	r0, [r7, #4]
 80078e2:	f000 f860 	bl	80079a6 <USBD_CtlError>
}
 80078e6:	bf00      	nop
 80078e8:	3708      	adds	r7, #8
 80078ea:	46bd      	mov	sp, r7
 80078ec:	bd80      	pop	{r7, pc}

080078ee <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078ee:	b580      	push	{r7, lr}
 80078f0:	b082      	sub	sp, #8
 80078f2:	af00      	add	r7, sp, #0
 80078f4:	6078      	str	r0, [r7, #4]
 80078f6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078fe:	b2db      	uxtb	r3, r3
 8007900:	3b01      	subs	r3, #1
 8007902:	2b02      	cmp	r3, #2
 8007904:	d80b      	bhi.n	800791e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	885b      	ldrh	r3, [r3, #2]
 800790a:	2b01      	cmp	r3, #1
 800790c:	d10c      	bne.n	8007928 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2200      	movs	r2, #0
 8007912:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007916:	6878      	ldr	r0, [r7, #4]
 8007918:	f000 f8f3 	bl	8007b02 <USBD_CtlSendStatus>
      }
      break;
 800791c:	e004      	b.n	8007928 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800791e:	6839      	ldr	r1, [r7, #0]
 8007920:	6878      	ldr	r0, [r7, #4]
 8007922:	f000 f840 	bl	80079a6 <USBD_CtlError>
      break;
 8007926:	e000      	b.n	800792a <USBD_ClrFeature+0x3c>
      break;
 8007928:	bf00      	nop
  }
}
 800792a:	bf00      	nop
 800792c:	3708      	adds	r7, #8
 800792e:	46bd      	mov	sp, r7
 8007930:	bd80      	pop	{r7, pc}

08007932 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007932:	b580      	push	{r7, lr}
 8007934:	b084      	sub	sp, #16
 8007936:	af00      	add	r7, sp, #0
 8007938:	6078      	str	r0, [r7, #4]
 800793a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	781a      	ldrb	r2, [r3, #0]
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	3301      	adds	r3, #1
 800794c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	781a      	ldrb	r2, [r3, #0]
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	3301      	adds	r3, #1
 800795a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800795c:	68f8      	ldr	r0, [r7, #12]
 800795e:	f7ff fa17 	bl	8006d90 <SWAPBYTE>
 8007962:	4603      	mov	r3, r0
 8007964:	461a      	mov	r2, r3
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	3301      	adds	r3, #1
 800796e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	3301      	adds	r3, #1
 8007974:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007976:	68f8      	ldr	r0, [r7, #12]
 8007978:	f7ff fa0a 	bl	8006d90 <SWAPBYTE>
 800797c:	4603      	mov	r3, r0
 800797e:	461a      	mov	r2, r3
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	3301      	adds	r3, #1
 8007988:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	3301      	adds	r3, #1
 800798e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007990:	68f8      	ldr	r0, [r7, #12]
 8007992:	f7ff f9fd 	bl	8006d90 <SWAPBYTE>
 8007996:	4603      	mov	r3, r0
 8007998:	461a      	mov	r2, r3
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	80da      	strh	r2, [r3, #6]
}
 800799e:	bf00      	nop
 80079a0:	3710      	adds	r7, #16
 80079a2:	46bd      	mov	sp, r7
 80079a4:	bd80      	pop	{r7, pc}

080079a6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80079a6:	b580      	push	{r7, lr}
 80079a8:	b082      	sub	sp, #8
 80079aa:	af00      	add	r7, sp, #0
 80079ac:	6078      	str	r0, [r7, #4]
 80079ae:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80079b0:	2180      	movs	r1, #128	; 0x80
 80079b2:	6878      	ldr	r0, [r7, #4]
 80079b4:	f003 fa32 	bl	800ae1c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80079b8:	2100      	movs	r1, #0
 80079ba:	6878      	ldr	r0, [r7, #4]
 80079bc:	f003 fa2e 	bl	800ae1c <USBD_LL_StallEP>
}
 80079c0:	bf00      	nop
 80079c2:	3708      	adds	r7, #8
 80079c4:	46bd      	mov	sp, r7
 80079c6:	bd80      	pop	{r7, pc}

080079c8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b086      	sub	sp, #24
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	60f8      	str	r0, [r7, #12]
 80079d0:	60b9      	str	r1, [r7, #8]
 80079d2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80079d4:	2300      	movs	r3, #0
 80079d6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d036      	beq.n	8007a4c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80079e2:	6938      	ldr	r0, [r7, #16]
 80079e4:	f000 f836 	bl	8007a54 <USBD_GetLen>
 80079e8:	4603      	mov	r3, r0
 80079ea:	3301      	adds	r3, #1
 80079ec:	b29b      	uxth	r3, r3
 80079ee:	005b      	lsls	r3, r3, #1
 80079f0:	b29a      	uxth	r2, r3
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80079f6:	7dfb      	ldrb	r3, [r7, #23]
 80079f8:	68ba      	ldr	r2, [r7, #8]
 80079fa:	4413      	add	r3, r2
 80079fc:	687a      	ldr	r2, [r7, #4]
 80079fe:	7812      	ldrb	r2, [r2, #0]
 8007a00:	701a      	strb	r2, [r3, #0]
  idx++;
 8007a02:	7dfb      	ldrb	r3, [r7, #23]
 8007a04:	3301      	adds	r3, #1
 8007a06:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007a08:	7dfb      	ldrb	r3, [r7, #23]
 8007a0a:	68ba      	ldr	r2, [r7, #8]
 8007a0c:	4413      	add	r3, r2
 8007a0e:	2203      	movs	r2, #3
 8007a10:	701a      	strb	r2, [r3, #0]
  idx++;
 8007a12:	7dfb      	ldrb	r3, [r7, #23]
 8007a14:	3301      	adds	r3, #1
 8007a16:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007a18:	e013      	b.n	8007a42 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007a1a:	7dfb      	ldrb	r3, [r7, #23]
 8007a1c:	68ba      	ldr	r2, [r7, #8]
 8007a1e:	4413      	add	r3, r2
 8007a20:	693a      	ldr	r2, [r7, #16]
 8007a22:	7812      	ldrb	r2, [r2, #0]
 8007a24:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007a26:	693b      	ldr	r3, [r7, #16]
 8007a28:	3301      	adds	r3, #1
 8007a2a:	613b      	str	r3, [r7, #16]
    idx++;
 8007a2c:	7dfb      	ldrb	r3, [r7, #23]
 8007a2e:	3301      	adds	r3, #1
 8007a30:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007a32:	7dfb      	ldrb	r3, [r7, #23]
 8007a34:	68ba      	ldr	r2, [r7, #8]
 8007a36:	4413      	add	r3, r2
 8007a38:	2200      	movs	r2, #0
 8007a3a:	701a      	strb	r2, [r3, #0]
    idx++;
 8007a3c:	7dfb      	ldrb	r3, [r7, #23]
 8007a3e:	3301      	adds	r3, #1
 8007a40:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007a42:	693b      	ldr	r3, [r7, #16]
 8007a44:	781b      	ldrb	r3, [r3, #0]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d1e7      	bne.n	8007a1a <USBD_GetString+0x52>
 8007a4a:	e000      	b.n	8007a4e <USBD_GetString+0x86>
    return;
 8007a4c:	bf00      	nop
  }
}
 8007a4e:	3718      	adds	r7, #24
 8007a50:	46bd      	mov	sp, r7
 8007a52:	bd80      	pop	{r7, pc}

08007a54 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007a54:	b480      	push	{r7}
 8007a56:	b085      	sub	sp, #20
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007a64:	e005      	b.n	8007a72 <USBD_GetLen+0x1e>
  {
    len++;
 8007a66:	7bfb      	ldrb	r3, [r7, #15]
 8007a68:	3301      	adds	r3, #1
 8007a6a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007a6c:	68bb      	ldr	r3, [r7, #8]
 8007a6e:	3301      	adds	r3, #1
 8007a70:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007a72:	68bb      	ldr	r3, [r7, #8]
 8007a74:	781b      	ldrb	r3, [r3, #0]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d1f5      	bne.n	8007a66 <USBD_GetLen+0x12>
  }

  return len;
 8007a7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	3714      	adds	r7, #20
 8007a80:	46bd      	mov	sp, r7
 8007a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a86:	4770      	bx	lr

08007a88 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b084      	sub	sp, #16
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	60f8      	str	r0, [r7, #12]
 8007a90:	60b9      	str	r1, [r7, #8]
 8007a92:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	2202      	movs	r2, #2
 8007a98:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	687a      	ldr	r2, [r7, #4]
 8007aa0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	687a      	ldr	r2, [r7, #4]
 8007aa6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	68ba      	ldr	r2, [r7, #8]
 8007aac:	2100      	movs	r1, #0
 8007aae:	68f8      	ldr	r0, [r7, #12]
 8007ab0:	f003 fa82 	bl	800afb8 <USBD_LL_Transmit>

  return USBD_OK;
 8007ab4:	2300      	movs	r3, #0
}
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	3710      	adds	r7, #16
 8007aba:	46bd      	mov	sp, r7
 8007abc:	bd80      	pop	{r7, pc}

08007abe <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007abe:	b580      	push	{r7, lr}
 8007ac0:	b084      	sub	sp, #16
 8007ac2:	af00      	add	r7, sp, #0
 8007ac4:	60f8      	str	r0, [r7, #12]
 8007ac6:	60b9      	str	r1, [r7, #8]
 8007ac8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	68ba      	ldr	r2, [r7, #8]
 8007ace:	2100      	movs	r1, #0
 8007ad0:	68f8      	ldr	r0, [r7, #12]
 8007ad2:	f003 fa71 	bl	800afb8 <USBD_LL_Transmit>

  return USBD_OK;
 8007ad6:	2300      	movs	r3, #0
}
 8007ad8:	4618      	mov	r0, r3
 8007ada:	3710      	adds	r7, #16
 8007adc:	46bd      	mov	sp, r7
 8007ade:	bd80      	pop	{r7, pc}

08007ae0 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b084      	sub	sp, #16
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	60f8      	str	r0, [r7, #12]
 8007ae8:	60b9      	str	r1, [r7, #8]
 8007aea:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	68ba      	ldr	r2, [r7, #8]
 8007af0:	2100      	movs	r1, #0
 8007af2:	68f8      	ldr	r0, [r7, #12]
 8007af4:	f003 fa98 	bl	800b028 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007af8:	2300      	movs	r3, #0
}
 8007afa:	4618      	mov	r0, r3
 8007afc:	3710      	adds	r7, #16
 8007afe:	46bd      	mov	sp, r7
 8007b00:	bd80      	pop	{r7, pc}

08007b02 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007b02:	b580      	push	{r7, lr}
 8007b04:	b082      	sub	sp, #8
 8007b06:	af00      	add	r7, sp, #0
 8007b08:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	2204      	movs	r2, #4
 8007b0e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007b12:	2300      	movs	r3, #0
 8007b14:	2200      	movs	r2, #0
 8007b16:	2100      	movs	r1, #0
 8007b18:	6878      	ldr	r0, [r7, #4]
 8007b1a:	f003 fa4d 	bl	800afb8 <USBD_LL_Transmit>

  return USBD_OK;
 8007b1e:	2300      	movs	r3, #0
}
 8007b20:	4618      	mov	r0, r3
 8007b22:	3708      	adds	r7, #8
 8007b24:	46bd      	mov	sp, r7
 8007b26:	bd80      	pop	{r7, pc}

08007b28 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b082      	sub	sp, #8
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2205      	movs	r2, #5
 8007b34:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007b38:	2300      	movs	r3, #0
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	2100      	movs	r1, #0
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	f003 fa72 	bl	800b028 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007b44:	2300      	movs	r3, #0
}
 8007b46:	4618      	mov	r0, r3
 8007b48:	3708      	adds	r7, #8
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	bd80      	pop	{r7, pc}
	...

08007b50 <__NVIC_SetPriority>:
{
 8007b50:	b480      	push	{r7}
 8007b52:	b083      	sub	sp, #12
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	4603      	mov	r3, r0
 8007b58:	6039      	str	r1, [r7, #0]
 8007b5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007b5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	db0a      	blt.n	8007b7a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	b2da      	uxtb	r2, r3
 8007b68:	490c      	ldr	r1, [pc, #48]	; (8007b9c <__NVIC_SetPriority+0x4c>)
 8007b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b6e:	0112      	lsls	r2, r2, #4
 8007b70:	b2d2      	uxtb	r2, r2
 8007b72:	440b      	add	r3, r1
 8007b74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007b78:	e00a      	b.n	8007b90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	b2da      	uxtb	r2, r3
 8007b7e:	4908      	ldr	r1, [pc, #32]	; (8007ba0 <__NVIC_SetPriority+0x50>)
 8007b80:	79fb      	ldrb	r3, [r7, #7]
 8007b82:	f003 030f 	and.w	r3, r3, #15
 8007b86:	3b04      	subs	r3, #4
 8007b88:	0112      	lsls	r2, r2, #4
 8007b8a:	b2d2      	uxtb	r2, r2
 8007b8c:	440b      	add	r3, r1
 8007b8e:	761a      	strb	r2, [r3, #24]
}
 8007b90:	bf00      	nop
 8007b92:	370c      	adds	r7, #12
 8007b94:	46bd      	mov	sp, r7
 8007b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9a:	4770      	bx	lr
 8007b9c:	e000e100 	.word	0xe000e100
 8007ba0:	e000ed00 	.word	0xe000ed00

08007ba4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007ba8:	2100      	movs	r1, #0
 8007baa:	f06f 0004 	mvn.w	r0, #4
 8007bae:	f7ff ffcf 	bl	8007b50 <__NVIC_SetPriority>
#endif
}
 8007bb2:	bf00      	nop
 8007bb4:	bd80      	pop	{r7, pc}
	...

08007bb8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007bb8:	b480      	push	{r7}
 8007bba:	b083      	sub	sp, #12
 8007bbc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007bbe:	f3ef 8305 	mrs	r3, IPSR
 8007bc2:	603b      	str	r3, [r7, #0]
  return(result);
 8007bc4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d003      	beq.n	8007bd2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007bca:	f06f 0305 	mvn.w	r3, #5
 8007bce:	607b      	str	r3, [r7, #4]
 8007bd0:	e00c      	b.n	8007bec <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007bd2:	4b0a      	ldr	r3, [pc, #40]	; (8007bfc <osKernelInitialize+0x44>)
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d105      	bne.n	8007be6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007bda:	4b08      	ldr	r3, [pc, #32]	; (8007bfc <osKernelInitialize+0x44>)
 8007bdc:	2201      	movs	r2, #1
 8007bde:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007be0:	2300      	movs	r3, #0
 8007be2:	607b      	str	r3, [r7, #4]
 8007be4:	e002      	b.n	8007bec <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007be6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007bea:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007bec:	687b      	ldr	r3, [r7, #4]
}
 8007bee:	4618      	mov	r0, r3
 8007bf0:	370c      	adds	r7, #12
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf8:	4770      	bx	lr
 8007bfa:	bf00      	nop
 8007bfc:	2000022c 	.word	0x2000022c

08007c00 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b082      	sub	sp, #8
 8007c04:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007c06:	f3ef 8305 	mrs	r3, IPSR
 8007c0a:	603b      	str	r3, [r7, #0]
  return(result);
 8007c0c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d003      	beq.n	8007c1a <osKernelStart+0x1a>
    stat = osErrorISR;
 8007c12:	f06f 0305 	mvn.w	r3, #5
 8007c16:	607b      	str	r3, [r7, #4]
 8007c18:	e010      	b.n	8007c3c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007c1a:	4b0b      	ldr	r3, [pc, #44]	; (8007c48 <osKernelStart+0x48>)
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	2b01      	cmp	r3, #1
 8007c20:	d109      	bne.n	8007c36 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007c22:	f7ff ffbf 	bl	8007ba4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007c26:	4b08      	ldr	r3, [pc, #32]	; (8007c48 <osKernelStart+0x48>)
 8007c28:	2202      	movs	r2, #2
 8007c2a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007c2c:	f001 f866 	bl	8008cfc <vTaskStartScheduler>
      stat = osOK;
 8007c30:	2300      	movs	r3, #0
 8007c32:	607b      	str	r3, [r7, #4]
 8007c34:	e002      	b.n	8007c3c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007c36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007c3a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007c3c:	687b      	ldr	r3, [r7, #4]
}
 8007c3e:	4618      	mov	r0, r3
 8007c40:	3708      	adds	r7, #8
 8007c42:	46bd      	mov	sp, r7
 8007c44:	bd80      	pop	{r7, pc}
 8007c46:	bf00      	nop
 8007c48:	2000022c 	.word	0x2000022c

08007c4c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b08e      	sub	sp, #56	; 0x38
 8007c50:	af04      	add	r7, sp, #16
 8007c52:	60f8      	str	r0, [r7, #12]
 8007c54:	60b9      	str	r1, [r7, #8]
 8007c56:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007c58:	2300      	movs	r3, #0
 8007c5a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007c5c:	f3ef 8305 	mrs	r3, IPSR
 8007c60:	617b      	str	r3, [r7, #20]
  return(result);
 8007c62:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d17e      	bne.n	8007d66 <osThreadNew+0x11a>
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d07b      	beq.n	8007d66 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007c6e:	2380      	movs	r3, #128	; 0x80
 8007c70:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007c72:	2318      	movs	r3, #24
 8007c74:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007c76:	2300      	movs	r3, #0
 8007c78:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8007c7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007c7e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d045      	beq.n	8007d12 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d002      	beq.n	8007c94 <osThreadNew+0x48>
        name = attr->name;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	699b      	ldr	r3, [r3, #24]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d002      	beq.n	8007ca2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	699b      	ldr	r3, [r3, #24]
 8007ca0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007ca2:	69fb      	ldr	r3, [r7, #28]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d008      	beq.n	8007cba <osThreadNew+0x6e>
 8007ca8:	69fb      	ldr	r3, [r7, #28]
 8007caa:	2b38      	cmp	r3, #56	; 0x38
 8007cac:	d805      	bhi.n	8007cba <osThreadNew+0x6e>
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	685b      	ldr	r3, [r3, #4]
 8007cb2:	f003 0301 	and.w	r3, r3, #1
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d001      	beq.n	8007cbe <osThreadNew+0x72>
        return (NULL);
 8007cba:	2300      	movs	r3, #0
 8007cbc:	e054      	b.n	8007d68 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	695b      	ldr	r3, [r3, #20]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d003      	beq.n	8007cce <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	695b      	ldr	r3, [r3, #20]
 8007cca:	089b      	lsrs	r3, r3, #2
 8007ccc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	689b      	ldr	r3, [r3, #8]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d00e      	beq.n	8007cf4 <osThreadNew+0xa8>
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	68db      	ldr	r3, [r3, #12]
 8007cda:	2b5b      	cmp	r3, #91	; 0x5b
 8007cdc:	d90a      	bls.n	8007cf4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d006      	beq.n	8007cf4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	695b      	ldr	r3, [r3, #20]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d002      	beq.n	8007cf4 <osThreadNew+0xa8>
        mem = 1;
 8007cee:	2301      	movs	r3, #1
 8007cf0:	61bb      	str	r3, [r7, #24]
 8007cf2:	e010      	b.n	8007d16 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	689b      	ldr	r3, [r3, #8]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d10c      	bne.n	8007d16 <osThreadNew+0xca>
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	68db      	ldr	r3, [r3, #12]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d108      	bne.n	8007d16 <osThreadNew+0xca>
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	691b      	ldr	r3, [r3, #16]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d104      	bne.n	8007d16 <osThreadNew+0xca>
          mem = 0;
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	61bb      	str	r3, [r7, #24]
 8007d10:	e001      	b.n	8007d16 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007d12:	2300      	movs	r3, #0
 8007d14:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007d16:	69bb      	ldr	r3, [r7, #24]
 8007d18:	2b01      	cmp	r3, #1
 8007d1a:	d110      	bne.n	8007d3e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007d20:	687a      	ldr	r2, [r7, #4]
 8007d22:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007d24:	9202      	str	r2, [sp, #8]
 8007d26:	9301      	str	r3, [sp, #4]
 8007d28:	69fb      	ldr	r3, [r7, #28]
 8007d2a:	9300      	str	r3, [sp, #0]
 8007d2c:	68bb      	ldr	r3, [r7, #8]
 8007d2e:	6a3a      	ldr	r2, [r7, #32]
 8007d30:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007d32:	68f8      	ldr	r0, [r7, #12]
 8007d34:	f000 fe0c 	bl	8008950 <xTaskCreateStatic>
 8007d38:	4603      	mov	r3, r0
 8007d3a:	613b      	str	r3, [r7, #16]
 8007d3c:	e013      	b.n	8007d66 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007d3e:	69bb      	ldr	r3, [r7, #24]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d110      	bne.n	8007d66 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007d44:	6a3b      	ldr	r3, [r7, #32]
 8007d46:	b29a      	uxth	r2, r3
 8007d48:	f107 0310 	add.w	r3, r7, #16
 8007d4c:	9301      	str	r3, [sp, #4]
 8007d4e:	69fb      	ldr	r3, [r7, #28]
 8007d50:	9300      	str	r3, [sp, #0]
 8007d52:	68bb      	ldr	r3, [r7, #8]
 8007d54:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007d56:	68f8      	ldr	r0, [r7, #12]
 8007d58:	f000 fe57 	bl	8008a0a <xTaskCreate>
 8007d5c:	4603      	mov	r3, r0
 8007d5e:	2b01      	cmp	r3, #1
 8007d60:	d001      	beq.n	8007d66 <osThreadNew+0x11a>
            hTask = NULL;
 8007d62:	2300      	movs	r3, #0
 8007d64:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007d66:	693b      	ldr	r3, [r7, #16]
}
 8007d68:	4618      	mov	r0, r3
 8007d6a:	3728      	adds	r7, #40	; 0x28
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	bd80      	pop	{r7, pc}

08007d70 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b084      	sub	sp, #16
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007d78:	f3ef 8305 	mrs	r3, IPSR
 8007d7c:	60bb      	str	r3, [r7, #8]
  return(result);
 8007d7e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d003      	beq.n	8007d8c <osDelay+0x1c>
    stat = osErrorISR;
 8007d84:	f06f 0305 	mvn.w	r3, #5
 8007d88:	60fb      	str	r3, [r7, #12]
 8007d8a:	e007      	b.n	8007d9c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d002      	beq.n	8007d9c <osDelay+0x2c>
      vTaskDelay(ticks);
 8007d96:	6878      	ldr	r0, [r7, #4]
 8007d98:	f000 ff7c 	bl	8008c94 <vTaskDelay>
    }
  }

  return (stat);
 8007d9c:	68fb      	ldr	r3, [r7, #12]
}
 8007d9e:	4618      	mov	r0, r3
 8007da0:	3710      	adds	r7, #16
 8007da2:	46bd      	mov	sp, r7
 8007da4:	bd80      	pop	{r7, pc}
	...

08007da8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007da8:	b480      	push	{r7}
 8007daa:	b085      	sub	sp, #20
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	60f8      	str	r0, [r7, #12]
 8007db0:	60b9      	str	r1, [r7, #8]
 8007db2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	4a07      	ldr	r2, [pc, #28]	; (8007dd4 <vApplicationGetIdleTaskMemory+0x2c>)
 8007db8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007dba:	68bb      	ldr	r3, [r7, #8]
 8007dbc:	4a06      	ldr	r2, [pc, #24]	; (8007dd8 <vApplicationGetIdleTaskMemory+0x30>)
 8007dbe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2280      	movs	r2, #128	; 0x80
 8007dc4:	601a      	str	r2, [r3, #0]
}
 8007dc6:	bf00      	nop
 8007dc8:	3714      	adds	r7, #20
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd0:	4770      	bx	lr
 8007dd2:	bf00      	nop
 8007dd4:	20000230 	.word	0x20000230
 8007dd8:	2000028c 	.word	0x2000028c

08007ddc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007ddc:	b480      	push	{r7}
 8007dde:	b085      	sub	sp, #20
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	60f8      	str	r0, [r7, #12]
 8007de4:	60b9      	str	r1, [r7, #8]
 8007de6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	4a07      	ldr	r2, [pc, #28]	; (8007e08 <vApplicationGetTimerTaskMemory+0x2c>)
 8007dec:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007dee:	68bb      	ldr	r3, [r7, #8]
 8007df0:	4a06      	ldr	r2, [pc, #24]	; (8007e0c <vApplicationGetTimerTaskMemory+0x30>)
 8007df2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007dfa:	601a      	str	r2, [r3, #0]
}
 8007dfc:	bf00      	nop
 8007dfe:	3714      	adds	r7, #20
 8007e00:	46bd      	mov	sp, r7
 8007e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e06:	4770      	bx	lr
 8007e08:	2000048c 	.word	0x2000048c
 8007e0c:	200004e8 	.word	0x200004e8

08007e10 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007e10:	b480      	push	{r7}
 8007e12:	b083      	sub	sp, #12
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	f103 0208 	add.w	r2, r3, #8
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007e28:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	f103 0208 	add.w	r2, r3, #8
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	f103 0208 	add.w	r2, r3, #8
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2200      	movs	r2, #0
 8007e42:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007e44:	bf00      	nop
 8007e46:	370c      	adds	r7, #12
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4e:	4770      	bx	lr

08007e50 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007e50:	b480      	push	{r7}
 8007e52:	b083      	sub	sp, #12
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007e5e:	bf00      	nop
 8007e60:	370c      	adds	r7, #12
 8007e62:	46bd      	mov	sp, r7
 8007e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e68:	4770      	bx	lr

08007e6a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007e6a:	b480      	push	{r7}
 8007e6c:	b085      	sub	sp, #20
 8007e6e:	af00      	add	r7, sp, #0
 8007e70:	6078      	str	r0, [r7, #4]
 8007e72:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	685b      	ldr	r3, [r3, #4]
 8007e78:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007e7a:	683b      	ldr	r3, [r7, #0]
 8007e7c:	68fa      	ldr	r2, [r7, #12]
 8007e7e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	689a      	ldr	r2, [r3, #8]
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	689b      	ldr	r3, [r3, #8]
 8007e8c:	683a      	ldr	r2, [r7, #0]
 8007e8e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	683a      	ldr	r2, [r7, #0]
 8007e94:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	687a      	ldr	r2, [r7, #4]
 8007e9a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	1c5a      	adds	r2, r3, #1
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	601a      	str	r2, [r3, #0]
}
 8007ea6:	bf00      	nop
 8007ea8:	3714      	adds	r7, #20
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb0:	4770      	bx	lr

08007eb2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007eb2:	b480      	push	{r7}
 8007eb4:	b085      	sub	sp, #20
 8007eb6:	af00      	add	r7, sp, #0
 8007eb8:	6078      	str	r0, [r7, #4]
 8007eba:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007ec2:	68bb      	ldr	r3, [r7, #8]
 8007ec4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007ec8:	d103      	bne.n	8007ed2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	691b      	ldr	r3, [r3, #16]
 8007ece:	60fb      	str	r3, [r7, #12]
 8007ed0:	e00c      	b.n	8007eec <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	3308      	adds	r3, #8
 8007ed6:	60fb      	str	r3, [r7, #12]
 8007ed8:	e002      	b.n	8007ee0 <vListInsert+0x2e>
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	685b      	ldr	r3, [r3, #4]
 8007ede:	60fb      	str	r3, [r7, #12]
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	685b      	ldr	r3, [r3, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	68ba      	ldr	r2, [r7, #8]
 8007ee8:	429a      	cmp	r2, r3
 8007eea:	d2f6      	bcs.n	8007eda <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	685a      	ldr	r2, [r3, #4]
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	685b      	ldr	r3, [r3, #4]
 8007ef8:	683a      	ldr	r2, [r7, #0]
 8007efa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	68fa      	ldr	r2, [r7, #12]
 8007f00:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	683a      	ldr	r2, [r7, #0]
 8007f06:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007f08:	683b      	ldr	r3, [r7, #0]
 8007f0a:	687a      	ldr	r2, [r7, #4]
 8007f0c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	1c5a      	adds	r2, r3, #1
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	601a      	str	r2, [r3, #0]
}
 8007f18:	bf00      	nop
 8007f1a:	3714      	adds	r7, #20
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f22:	4770      	bx	lr

08007f24 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007f24:	b480      	push	{r7}
 8007f26:	b085      	sub	sp, #20
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	691b      	ldr	r3, [r3, #16]
 8007f30:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	685b      	ldr	r3, [r3, #4]
 8007f36:	687a      	ldr	r2, [r7, #4]
 8007f38:	6892      	ldr	r2, [r2, #8]
 8007f3a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	689b      	ldr	r3, [r3, #8]
 8007f40:	687a      	ldr	r2, [r7, #4]
 8007f42:	6852      	ldr	r2, [r2, #4]
 8007f44:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	685b      	ldr	r3, [r3, #4]
 8007f4a:	687a      	ldr	r2, [r7, #4]
 8007f4c:	429a      	cmp	r2, r3
 8007f4e:	d103      	bne.n	8007f58 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	689a      	ldr	r2, [r3, #8]
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	1e5a      	subs	r2, r3, #1
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	681b      	ldr	r3, [r3, #0]
}
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	3714      	adds	r7, #20
 8007f70:	46bd      	mov	sp, r7
 8007f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f76:	4770      	bx	lr

08007f78 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b084      	sub	sp, #16
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
 8007f80:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d10a      	bne.n	8007fa2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f90:	f383 8811 	msr	BASEPRI, r3
 8007f94:	f3bf 8f6f 	isb	sy
 8007f98:	f3bf 8f4f 	dsb	sy
 8007f9c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007f9e:	bf00      	nop
 8007fa0:	e7fe      	b.n	8007fa0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007fa2:	f002 f84f 	bl	800a044 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	681a      	ldr	r2, [r3, #0]
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fae:	68f9      	ldr	r1, [r7, #12]
 8007fb0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007fb2:	fb01 f303 	mul.w	r3, r1, r3
 8007fb6:	441a      	add	r2, r3
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	681a      	ldr	r2, [r3, #0]
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	681a      	ldr	r2, [r3, #0]
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fd2:	3b01      	subs	r3, #1
 8007fd4:	68f9      	ldr	r1, [r7, #12]
 8007fd6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007fd8:	fb01 f303 	mul.w	r3, r1, r3
 8007fdc:	441a      	add	r2, r3
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	22ff      	movs	r2, #255	; 0xff
 8007fe6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	22ff      	movs	r2, #255	; 0xff
 8007fee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d114      	bne.n	8008022 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	691b      	ldr	r3, [r3, #16]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d01a      	beq.n	8008036 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	3310      	adds	r3, #16
 8008004:	4618      	mov	r0, r3
 8008006:	f001 f903 	bl	8009210 <xTaskRemoveFromEventList>
 800800a:	4603      	mov	r3, r0
 800800c:	2b00      	cmp	r3, #0
 800800e:	d012      	beq.n	8008036 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008010:	4b0c      	ldr	r3, [pc, #48]	; (8008044 <xQueueGenericReset+0xcc>)
 8008012:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008016:	601a      	str	r2, [r3, #0]
 8008018:	f3bf 8f4f 	dsb	sy
 800801c:	f3bf 8f6f 	isb	sy
 8008020:	e009      	b.n	8008036 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	3310      	adds	r3, #16
 8008026:	4618      	mov	r0, r3
 8008028:	f7ff fef2 	bl	8007e10 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	3324      	adds	r3, #36	; 0x24
 8008030:	4618      	mov	r0, r3
 8008032:	f7ff feed 	bl	8007e10 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008036:	f002 f835 	bl	800a0a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800803a:	2301      	movs	r3, #1
}
 800803c:	4618      	mov	r0, r3
 800803e:	3710      	adds	r7, #16
 8008040:	46bd      	mov	sp, r7
 8008042:	bd80      	pop	{r7, pc}
 8008044:	e000ed04 	.word	0xe000ed04

08008048 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008048:	b580      	push	{r7, lr}
 800804a:	b08e      	sub	sp, #56	; 0x38
 800804c:	af02      	add	r7, sp, #8
 800804e:	60f8      	str	r0, [r7, #12]
 8008050:	60b9      	str	r1, [r7, #8]
 8008052:	607a      	str	r2, [r7, #4]
 8008054:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d10a      	bne.n	8008072 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800805c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008060:	f383 8811 	msr	BASEPRI, r3
 8008064:	f3bf 8f6f 	isb	sy
 8008068:	f3bf 8f4f 	dsb	sy
 800806c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800806e:	bf00      	nop
 8008070:	e7fe      	b.n	8008070 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008072:	683b      	ldr	r3, [r7, #0]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d10a      	bne.n	800808e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800807c:	f383 8811 	msr	BASEPRI, r3
 8008080:	f3bf 8f6f 	isb	sy
 8008084:	f3bf 8f4f 	dsb	sy
 8008088:	627b      	str	r3, [r7, #36]	; 0x24
}
 800808a:	bf00      	nop
 800808c:	e7fe      	b.n	800808c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d002      	beq.n	800809a <xQueueGenericCreateStatic+0x52>
 8008094:	68bb      	ldr	r3, [r7, #8]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d001      	beq.n	800809e <xQueueGenericCreateStatic+0x56>
 800809a:	2301      	movs	r3, #1
 800809c:	e000      	b.n	80080a0 <xQueueGenericCreateStatic+0x58>
 800809e:	2300      	movs	r3, #0
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d10a      	bne.n	80080ba <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80080a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080a8:	f383 8811 	msr	BASEPRI, r3
 80080ac:	f3bf 8f6f 	isb	sy
 80080b0:	f3bf 8f4f 	dsb	sy
 80080b4:	623b      	str	r3, [r7, #32]
}
 80080b6:	bf00      	nop
 80080b8:	e7fe      	b.n	80080b8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d102      	bne.n	80080c6 <xQueueGenericCreateStatic+0x7e>
 80080c0:	68bb      	ldr	r3, [r7, #8]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d101      	bne.n	80080ca <xQueueGenericCreateStatic+0x82>
 80080c6:	2301      	movs	r3, #1
 80080c8:	e000      	b.n	80080cc <xQueueGenericCreateStatic+0x84>
 80080ca:	2300      	movs	r3, #0
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d10a      	bne.n	80080e6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80080d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080d4:	f383 8811 	msr	BASEPRI, r3
 80080d8:	f3bf 8f6f 	isb	sy
 80080dc:	f3bf 8f4f 	dsb	sy
 80080e0:	61fb      	str	r3, [r7, #28]
}
 80080e2:	bf00      	nop
 80080e4:	e7fe      	b.n	80080e4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80080e6:	2350      	movs	r3, #80	; 0x50
 80080e8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80080ea:	697b      	ldr	r3, [r7, #20]
 80080ec:	2b50      	cmp	r3, #80	; 0x50
 80080ee:	d00a      	beq.n	8008106 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80080f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080f4:	f383 8811 	msr	BASEPRI, r3
 80080f8:	f3bf 8f6f 	isb	sy
 80080fc:	f3bf 8f4f 	dsb	sy
 8008100:	61bb      	str	r3, [r7, #24]
}
 8008102:	bf00      	nop
 8008104:	e7fe      	b.n	8008104 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008106:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800810c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800810e:	2b00      	cmp	r3, #0
 8008110:	d00d      	beq.n	800812e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008114:	2201      	movs	r2, #1
 8008116:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800811a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800811e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008120:	9300      	str	r3, [sp, #0]
 8008122:	4613      	mov	r3, r2
 8008124:	687a      	ldr	r2, [r7, #4]
 8008126:	68b9      	ldr	r1, [r7, #8]
 8008128:	68f8      	ldr	r0, [r7, #12]
 800812a:	f000 f805 	bl	8008138 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800812e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008130:	4618      	mov	r0, r3
 8008132:	3730      	adds	r7, #48	; 0x30
 8008134:	46bd      	mov	sp, r7
 8008136:	bd80      	pop	{r7, pc}

08008138 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b084      	sub	sp, #16
 800813c:	af00      	add	r7, sp, #0
 800813e:	60f8      	str	r0, [r7, #12]
 8008140:	60b9      	str	r1, [r7, #8]
 8008142:	607a      	str	r2, [r7, #4]
 8008144:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008146:	68bb      	ldr	r3, [r7, #8]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d103      	bne.n	8008154 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800814c:	69bb      	ldr	r3, [r7, #24]
 800814e:	69ba      	ldr	r2, [r7, #24]
 8008150:	601a      	str	r2, [r3, #0]
 8008152:	e002      	b.n	800815a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008154:	69bb      	ldr	r3, [r7, #24]
 8008156:	687a      	ldr	r2, [r7, #4]
 8008158:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800815a:	69bb      	ldr	r3, [r7, #24]
 800815c:	68fa      	ldr	r2, [r7, #12]
 800815e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008160:	69bb      	ldr	r3, [r7, #24]
 8008162:	68ba      	ldr	r2, [r7, #8]
 8008164:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008166:	2101      	movs	r1, #1
 8008168:	69b8      	ldr	r0, [r7, #24]
 800816a:	f7ff ff05 	bl	8007f78 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800816e:	69bb      	ldr	r3, [r7, #24]
 8008170:	78fa      	ldrb	r2, [r7, #3]
 8008172:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008176:	bf00      	nop
 8008178:	3710      	adds	r7, #16
 800817a:	46bd      	mov	sp, r7
 800817c:	bd80      	pop	{r7, pc}
	...

08008180 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b08e      	sub	sp, #56	; 0x38
 8008184:	af00      	add	r7, sp, #0
 8008186:	60f8      	str	r0, [r7, #12]
 8008188:	60b9      	str	r1, [r7, #8]
 800818a:	607a      	str	r2, [r7, #4]
 800818c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800818e:	2300      	movs	r3, #0
 8008190:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008198:	2b00      	cmp	r3, #0
 800819a:	d10a      	bne.n	80081b2 <xQueueGenericSend+0x32>
	__asm volatile
 800819c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081a0:	f383 8811 	msr	BASEPRI, r3
 80081a4:	f3bf 8f6f 	isb	sy
 80081a8:	f3bf 8f4f 	dsb	sy
 80081ac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80081ae:	bf00      	nop
 80081b0:	e7fe      	b.n	80081b0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80081b2:	68bb      	ldr	r3, [r7, #8]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d103      	bne.n	80081c0 <xQueueGenericSend+0x40>
 80081b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d101      	bne.n	80081c4 <xQueueGenericSend+0x44>
 80081c0:	2301      	movs	r3, #1
 80081c2:	e000      	b.n	80081c6 <xQueueGenericSend+0x46>
 80081c4:	2300      	movs	r3, #0
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d10a      	bne.n	80081e0 <xQueueGenericSend+0x60>
	__asm volatile
 80081ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081ce:	f383 8811 	msr	BASEPRI, r3
 80081d2:	f3bf 8f6f 	isb	sy
 80081d6:	f3bf 8f4f 	dsb	sy
 80081da:	627b      	str	r3, [r7, #36]	; 0x24
}
 80081dc:	bf00      	nop
 80081de:	e7fe      	b.n	80081de <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	2b02      	cmp	r3, #2
 80081e4:	d103      	bne.n	80081ee <xQueueGenericSend+0x6e>
 80081e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081ea:	2b01      	cmp	r3, #1
 80081ec:	d101      	bne.n	80081f2 <xQueueGenericSend+0x72>
 80081ee:	2301      	movs	r3, #1
 80081f0:	e000      	b.n	80081f4 <xQueueGenericSend+0x74>
 80081f2:	2300      	movs	r3, #0
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d10a      	bne.n	800820e <xQueueGenericSend+0x8e>
	__asm volatile
 80081f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081fc:	f383 8811 	msr	BASEPRI, r3
 8008200:	f3bf 8f6f 	isb	sy
 8008204:	f3bf 8f4f 	dsb	sy
 8008208:	623b      	str	r3, [r7, #32]
}
 800820a:	bf00      	nop
 800820c:	e7fe      	b.n	800820c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800820e:	f001 f9bd 	bl	800958c <xTaskGetSchedulerState>
 8008212:	4603      	mov	r3, r0
 8008214:	2b00      	cmp	r3, #0
 8008216:	d102      	bne.n	800821e <xQueueGenericSend+0x9e>
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d101      	bne.n	8008222 <xQueueGenericSend+0xa2>
 800821e:	2301      	movs	r3, #1
 8008220:	e000      	b.n	8008224 <xQueueGenericSend+0xa4>
 8008222:	2300      	movs	r3, #0
 8008224:	2b00      	cmp	r3, #0
 8008226:	d10a      	bne.n	800823e <xQueueGenericSend+0xbe>
	__asm volatile
 8008228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800822c:	f383 8811 	msr	BASEPRI, r3
 8008230:	f3bf 8f6f 	isb	sy
 8008234:	f3bf 8f4f 	dsb	sy
 8008238:	61fb      	str	r3, [r7, #28]
}
 800823a:	bf00      	nop
 800823c:	e7fe      	b.n	800823c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800823e:	f001 ff01 	bl	800a044 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008244:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008248:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800824a:	429a      	cmp	r2, r3
 800824c:	d302      	bcc.n	8008254 <xQueueGenericSend+0xd4>
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	2b02      	cmp	r3, #2
 8008252:	d129      	bne.n	80082a8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008254:	683a      	ldr	r2, [r7, #0]
 8008256:	68b9      	ldr	r1, [r7, #8]
 8008258:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800825a:	f000 fa0b 	bl	8008674 <prvCopyDataToQueue>
 800825e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008264:	2b00      	cmp	r3, #0
 8008266:	d010      	beq.n	800828a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800826a:	3324      	adds	r3, #36	; 0x24
 800826c:	4618      	mov	r0, r3
 800826e:	f000 ffcf 	bl	8009210 <xTaskRemoveFromEventList>
 8008272:	4603      	mov	r3, r0
 8008274:	2b00      	cmp	r3, #0
 8008276:	d013      	beq.n	80082a0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008278:	4b3f      	ldr	r3, [pc, #252]	; (8008378 <xQueueGenericSend+0x1f8>)
 800827a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800827e:	601a      	str	r2, [r3, #0]
 8008280:	f3bf 8f4f 	dsb	sy
 8008284:	f3bf 8f6f 	isb	sy
 8008288:	e00a      	b.n	80082a0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800828a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800828c:	2b00      	cmp	r3, #0
 800828e:	d007      	beq.n	80082a0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008290:	4b39      	ldr	r3, [pc, #228]	; (8008378 <xQueueGenericSend+0x1f8>)
 8008292:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008296:	601a      	str	r2, [r3, #0]
 8008298:	f3bf 8f4f 	dsb	sy
 800829c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80082a0:	f001 ff00 	bl	800a0a4 <vPortExitCritical>
				return pdPASS;
 80082a4:	2301      	movs	r3, #1
 80082a6:	e063      	b.n	8008370 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d103      	bne.n	80082b6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80082ae:	f001 fef9 	bl	800a0a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80082b2:	2300      	movs	r3, #0
 80082b4:	e05c      	b.n	8008370 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80082b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d106      	bne.n	80082ca <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80082bc:	f107 0314 	add.w	r3, r7, #20
 80082c0:	4618      	mov	r0, r3
 80082c2:	f001 f809 	bl	80092d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80082c6:	2301      	movs	r3, #1
 80082c8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80082ca:	f001 feeb 	bl	800a0a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80082ce:	f000 fd7b 	bl	8008dc8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80082d2:	f001 feb7 	bl	800a044 <vPortEnterCritical>
 80082d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80082dc:	b25b      	sxtb	r3, r3
 80082de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80082e2:	d103      	bne.n	80082ec <xQueueGenericSend+0x16c>
 80082e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082e6:	2200      	movs	r2, #0
 80082e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80082ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80082f2:	b25b      	sxtb	r3, r3
 80082f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80082f8:	d103      	bne.n	8008302 <xQueueGenericSend+0x182>
 80082fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082fc:	2200      	movs	r2, #0
 80082fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008302:	f001 fecf 	bl	800a0a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008306:	1d3a      	adds	r2, r7, #4
 8008308:	f107 0314 	add.w	r3, r7, #20
 800830c:	4611      	mov	r1, r2
 800830e:	4618      	mov	r0, r3
 8008310:	f000 fff8 	bl	8009304 <xTaskCheckForTimeOut>
 8008314:	4603      	mov	r3, r0
 8008316:	2b00      	cmp	r3, #0
 8008318:	d124      	bne.n	8008364 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800831a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800831c:	f000 faa2 	bl	8008864 <prvIsQueueFull>
 8008320:	4603      	mov	r3, r0
 8008322:	2b00      	cmp	r3, #0
 8008324:	d018      	beq.n	8008358 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008328:	3310      	adds	r3, #16
 800832a:	687a      	ldr	r2, [r7, #4]
 800832c:	4611      	mov	r1, r2
 800832e:	4618      	mov	r0, r3
 8008330:	f000 ff1e 	bl	8009170 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008334:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008336:	f000 fa2d 	bl	8008794 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800833a:	f000 fd53 	bl	8008de4 <xTaskResumeAll>
 800833e:	4603      	mov	r3, r0
 8008340:	2b00      	cmp	r3, #0
 8008342:	f47f af7c 	bne.w	800823e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8008346:	4b0c      	ldr	r3, [pc, #48]	; (8008378 <xQueueGenericSend+0x1f8>)
 8008348:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800834c:	601a      	str	r2, [r3, #0]
 800834e:	f3bf 8f4f 	dsb	sy
 8008352:	f3bf 8f6f 	isb	sy
 8008356:	e772      	b.n	800823e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008358:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800835a:	f000 fa1b 	bl	8008794 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800835e:	f000 fd41 	bl	8008de4 <xTaskResumeAll>
 8008362:	e76c      	b.n	800823e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008364:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008366:	f000 fa15 	bl	8008794 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800836a:	f000 fd3b 	bl	8008de4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800836e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008370:	4618      	mov	r0, r3
 8008372:	3738      	adds	r7, #56	; 0x38
 8008374:	46bd      	mov	sp, r7
 8008376:	bd80      	pop	{r7, pc}
 8008378:	e000ed04 	.word	0xe000ed04

0800837c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800837c:	b580      	push	{r7, lr}
 800837e:	b090      	sub	sp, #64	; 0x40
 8008380:	af00      	add	r7, sp, #0
 8008382:	60f8      	str	r0, [r7, #12]
 8008384:	60b9      	str	r1, [r7, #8]
 8008386:	607a      	str	r2, [r7, #4]
 8008388:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800838e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008390:	2b00      	cmp	r3, #0
 8008392:	d10a      	bne.n	80083aa <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008398:	f383 8811 	msr	BASEPRI, r3
 800839c:	f3bf 8f6f 	isb	sy
 80083a0:	f3bf 8f4f 	dsb	sy
 80083a4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80083a6:	bf00      	nop
 80083a8:	e7fe      	b.n	80083a8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80083aa:	68bb      	ldr	r3, [r7, #8]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d103      	bne.n	80083b8 <xQueueGenericSendFromISR+0x3c>
 80083b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d101      	bne.n	80083bc <xQueueGenericSendFromISR+0x40>
 80083b8:	2301      	movs	r3, #1
 80083ba:	e000      	b.n	80083be <xQueueGenericSendFromISR+0x42>
 80083bc:	2300      	movs	r3, #0
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d10a      	bne.n	80083d8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80083c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083c6:	f383 8811 	msr	BASEPRI, r3
 80083ca:	f3bf 8f6f 	isb	sy
 80083ce:	f3bf 8f4f 	dsb	sy
 80083d2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80083d4:	bf00      	nop
 80083d6:	e7fe      	b.n	80083d6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	2b02      	cmp	r3, #2
 80083dc:	d103      	bne.n	80083e6 <xQueueGenericSendFromISR+0x6a>
 80083de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083e2:	2b01      	cmp	r3, #1
 80083e4:	d101      	bne.n	80083ea <xQueueGenericSendFromISR+0x6e>
 80083e6:	2301      	movs	r3, #1
 80083e8:	e000      	b.n	80083ec <xQueueGenericSendFromISR+0x70>
 80083ea:	2300      	movs	r3, #0
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d10a      	bne.n	8008406 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80083f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083f4:	f383 8811 	msr	BASEPRI, r3
 80083f8:	f3bf 8f6f 	isb	sy
 80083fc:	f3bf 8f4f 	dsb	sy
 8008400:	623b      	str	r3, [r7, #32]
}
 8008402:	bf00      	nop
 8008404:	e7fe      	b.n	8008404 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008406:	f001 feff 	bl	800a208 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800840a:	f3ef 8211 	mrs	r2, BASEPRI
 800840e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008412:	f383 8811 	msr	BASEPRI, r3
 8008416:	f3bf 8f6f 	isb	sy
 800841a:	f3bf 8f4f 	dsb	sy
 800841e:	61fa      	str	r2, [r7, #28]
 8008420:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008422:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008424:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008428:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800842a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800842c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800842e:	429a      	cmp	r2, r3
 8008430:	d302      	bcc.n	8008438 <xQueueGenericSendFromISR+0xbc>
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	2b02      	cmp	r3, #2
 8008436:	d12f      	bne.n	8008498 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800843a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800843e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008446:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008448:	683a      	ldr	r2, [r7, #0]
 800844a:	68b9      	ldr	r1, [r7, #8]
 800844c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800844e:	f000 f911 	bl	8008674 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008452:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8008456:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800845a:	d112      	bne.n	8008482 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800845c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800845e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008460:	2b00      	cmp	r3, #0
 8008462:	d016      	beq.n	8008492 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008466:	3324      	adds	r3, #36	; 0x24
 8008468:	4618      	mov	r0, r3
 800846a:	f000 fed1 	bl	8009210 <xTaskRemoveFromEventList>
 800846e:	4603      	mov	r3, r0
 8008470:	2b00      	cmp	r3, #0
 8008472:	d00e      	beq.n	8008492 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d00b      	beq.n	8008492 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	2201      	movs	r2, #1
 800847e:	601a      	str	r2, [r3, #0]
 8008480:	e007      	b.n	8008492 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008482:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008486:	3301      	adds	r3, #1
 8008488:	b2db      	uxtb	r3, r3
 800848a:	b25a      	sxtb	r2, r3
 800848c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800848e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008492:	2301      	movs	r3, #1
 8008494:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8008496:	e001      	b.n	800849c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008498:	2300      	movs	r3, #0
 800849a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800849c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800849e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80084a0:	697b      	ldr	r3, [r7, #20]
 80084a2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80084a6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80084a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80084aa:	4618      	mov	r0, r3
 80084ac:	3740      	adds	r7, #64	; 0x40
 80084ae:	46bd      	mov	sp, r7
 80084b0:	bd80      	pop	{r7, pc}
	...

080084b4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b08c      	sub	sp, #48	; 0x30
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	60f8      	str	r0, [r7, #12]
 80084bc:	60b9      	str	r1, [r7, #8]
 80084be:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80084c0:	2300      	movs	r3, #0
 80084c2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80084c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d10a      	bne.n	80084e4 <xQueueReceive+0x30>
	__asm volatile
 80084ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084d2:	f383 8811 	msr	BASEPRI, r3
 80084d6:	f3bf 8f6f 	isb	sy
 80084da:	f3bf 8f4f 	dsb	sy
 80084de:	623b      	str	r3, [r7, #32]
}
 80084e0:	bf00      	nop
 80084e2:	e7fe      	b.n	80084e2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80084e4:	68bb      	ldr	r3, [r7, #8]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d103      	bne.n	80084f2 <xQueueReceive+0x3e>
 80084ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d101      	bne.n	80084f6 <xQueueReceive+0x42>
 80084f2:	2301      	movs	r3, #1
 80084f4:	e000      	b.n	80084f8 <xQueueReceive+0x44>
 80084f6:	2300      	movs	r3, #0
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d10a      	bne.n	8008512 <xQueueReceive+0x5e>
	__asm volatile
 80084fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008500:	f383 8811 	msr	BASEPRI, r3
 8008504:	f3bf 8f6f 	isb	sy
 8008508:	f3bf 8f4f 	dsb	sy
 800850c:	61fb      	str	r3, [r7, #28]
}
 800850e:	bf00      	nop
 8008510:	e7fe      	b.n	8008510 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008512:	f001 f83b 	bl	800958c <xTaskGetSchedulerState>
 8008516:	4603      	mov	r3, r0
 8008518:	2b00      	cmp	r3, #0
 800851a:	d102      	bne.n	8008522 <xQueueReceive+0x6e>
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d101      	bne.n	8008526 <xQueueReceive+0x72>
 8008522:	2301      	movs	r3, #1
 8008524:	e000      	b.n	8008528 <xQueueReceive+0x74>
 8008526:	2300      	movs	r3, #0
 8008528:	2b00      	cmp	r3, #0
 800852a:	d10a      	bne.n	8008542 <xQueueReceive+0x8e>
	__asm volatile
 800852c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008530:	f383 8811 	msr	BASEPRI, r3
 8008534:	f3bf 8f6f 	isb	sy
 8008538:	f3bf 8f4f 	dsb	sy
 800853c:	61bb      	str	r3, [r7, #24]
}
 800853e:	bf00      	nop
 8008540:	e7fe      	b.n	8008540 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008542:	f001 fd7f 	bl	800a044 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800854a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800854c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800854e:	2b00      	cmp	r3, #0
 8008550:	d01f      	beq.n	8008592 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008552:	68b9      	ldr	r1, [r7, #8]
 8008554:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008556:	f000 f8f7 	bl	8008748 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800855a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800855c:	1e5a      	subs	r2, r3, #1
 800855e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008560:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008564:	691b      	ldr	r3, [r3, #16]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d00f      	beq.n	800858a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800856a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800856c:	3310      	adds	r3, #16
 800856e:	4618      	mov	r0, r3
 8008570:	f000 fe4e 	bl	8009210 <xTaskRemoveFromEventList>
 8008574:	4603      	mov	r3, r0
 8008576:	2b00      	cmp	r3, #0
 8008578:	d007      	beq.n	800858a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800857a:	4b3d      	ldr	r3, [pc, #244]	; (8008670 <xQueueReceive+0x1bc>)
 800857c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008580:	601a      	str	r2, [r3, #0]
 8008582:	f3bf 8f4f 	dsb	sy
 8008586:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800858a:	f001 fd8b 	bl	800a0a4 <vPortExitCritical>
				return pdPASS;
 800858e:	2301      	movs	r3, #1
 8008590:	e069      	b.n	8008666 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d103      	bne.n	80085a0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008598:	f001 fd84 	bl	800a0a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800859c:	2300      	movs	r3, #0
 800859e:	e062      	b.n	8008666 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80085a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d106      	bne.n	80085b4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80085a6:	f107 0310 	add.w	r3, r7, #16
 80085aa:	4618      	mov	r0, r3
 80085ac:	f000 fe94 	bl	80092d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80085b0:	2301      	movs	r3, #1
 80085b2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80085b4:	f001 fd76 	bl	800a0a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80085b8:	f000 fc06 	bl	8008dc8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80085bc:	f001 fd42 	bl	800a044 <vPortEnterCritical>
 80085c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085c2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80085c6:	b25b      	sxtb	r3, r3
 80085c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80085cc:	d103      	bne.n	80085d6 <xQueueReceive+0x122>
 80085ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085d0:	2200      	movs	r2, #0
 80085d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80085d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80085dc:	b25b      	sxtb	r3, r3
 80085de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80085e2:	d103      	bne.n	80085ec <xQueueReceive+0x138>
 80085e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085e6:	2200      	movs	r2, #0
 80085e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80085ec:	f001 fd5a 	bl	800a0a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80085f0:	1d3a      	adds	r2, r7, #4
 80085f2:	f107 0310 	add.w	r3, r7, #16
 80085f6:	4611      	mov	r1, r2
 80085f8:	4618      	mov	r0, r3
 80085fa:	f000 fe83 	bl	8009304 <xTaskCheckForTimeOut>
 80085fe:	4603      	mov	r3, r0
 8008600:	2b00      	cmp	r3, #0
 8008602:	d123      	bne.n	800864c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008604:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008606:	f000 f917 	bl	8008838 <prvIsQueueEmpty>
 800860a:	4603      	mov	r3, r0
 800860c:	2b00      	cmp	r3, #0
 800860e:	d017      	beq.n	8008640 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008612:	3324      	adds	r3, #36	; 0x24
 8008614:	687a      	ldr	r2, [r7, #4]
 8008616:	4611      	mov	r1, r2
 8008618:	4618      	mov	r0, r3
 800861a:	f000 fda9 	bl	8009170 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800861e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008620:	f000 f8b8 	bl	8008794 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008624:	f000 fbde 	bl	8008de4 <xTaskResumeAll>
 8008628:	4603      	mov	r3, r0
 800862a:	2b00      	cmp	r3, #0
 800862c:	d189      	bne.n	8008542 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800862e:	4b10      	ldr	r3, [pc, #64]	; (8008670 <xQueueReceive+0x1bc>)
 8008630:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008634:	601a      	str	r2, [r3, #0]
 8008636:	f3bf 8f4f 	dsb	sy
 800863a:	f3bf 8f6f 	isb	sy
 800863e:	e780      	b.n	8008542 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008640:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008642:	f000 f8a7 	bl	8008794 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008646:	f000 fbcd 	bl	8008de4 <xTaskResumeAll>
 800864a:	e77a      	b.n	8008542 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800864c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800864e:	f000 f8a1 	bl	8008794 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008652:	f000 fbc7 	bl	8008de4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008656:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008658:	f000 f8ee 	bl	8008838 <prvIsQueueEmpty>
 800865c:	4603      	mov	r3, r0
 800865e:	2b00      	cmp	r3, #0
 8008660:	f43f af6f 	beq.w	8008542 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008664:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008666:	4618      	mov	r0, r3
 8008668:	3730      	adds	r7, #48	; 0x30
 800866a:	46bd      	mov	sp, r7
 800866c:	bd80      	pop	{r7, pc}
 800866e:	bf00      	nop
 8008670:	e000ed04 	.word	0xe000ed04

08008674 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b086      	sub	sp, #24
 8008678:	af00      	add	r7, sp, #0
 800867a:	60f8      	str	r0, [r7, #12]
 800867c:	60b9      	str	r1, [r7, #8]
 800867e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008680:	2300      	movs	r3, #0
 8008682:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008688:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800868e:	2b00      	cmp	r3, #0
 8008690:	d10d      	bne.n	80086ae <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d14d      	bne.n	8008736 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	689b      	ldr	r3, [r3, #8]
 800869e:	4618      	mov	r0, r3
 80086a0:	f000 ff92 	bl	80095c8 <xTaskPriorityDisinherit>
 80086a4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	2200      	movs	r2, #0
 80086aa:	609a      	str	r2, [r3, #8]
 80086ac:	e043      	b.n	8008736 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d119      	bne.n	80086e8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	6858      	ldr	r0, [r3, #4]
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086bc:	461a      	mov	r2, r3
 80086be:	68b9      	ldr	r1, [r7, #8]
 80086c0:	f002 fd82 	bl	800b1c8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	685a      	ldr	r2, [r3, #4]
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086cc:	441a      	add	r2, r3
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	685a      	ldr	r2, [r3, #4]
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	689b      	ldr	r3, [r3, #8]
 80086da:	429a      	cmp	r2, r3
 80086dc:	d32b      	bcc.n	8008736 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	681a      	ldr	r2, [r3, #0]
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	605a      	str	r2, [r3, #4]
 80086e6:	e026      	b.n	8008736 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	68d8      	ldr	r0, [r3, #12]
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086f0:	461a      	mov	r2, r3
 80086f2:	68b9      	ldr	r1, [r7, #8]
 80086f4:	f002 fd68 	bl	800b1c8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	68da      	ldr	r2, [r3, #12]
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008700:	425b      	negs	r3, r3
 8008702:	441a      	add	r2, r3
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	68da      	ldr	r2, [r3, #12]
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	429a      	cmp	r2, r3
 8008712:	d207      	bcs.n	8008724 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	689a      	ldr	r2, [r3, #8]
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800871c:	425b      	negs	r3, r3
 800871e:	441a      	add	r2, r3
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	2b02      	cmp	r3, #2
 8008728:	d105      	bne.n	8008736 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800872a:	693b      	ldr	r3, [r7, #16]
 800872c:	2b00      	cmp	r3, #0
 800872e:	d002      	beq.n	8008736 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008730:	693b      	ldr	r3, [r7, #16]
 8008732:	3b01      	subs	r3, #1
 8008734:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008736:	693b      	ldr	r3, [r7, #16]
 8008738:	1c5a      	adds	r2, r3, #1
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800873e:	697b      	ldr	r3, [r7, #20]
}
 8008740:	4618      	mov	r0, r3
 8008742:	3718      	adds	r7, #24
 8008744:	46bd      	mov	sp, r7
 8008746:	bd80      	pop	{r7, pc}

08008748 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008748:	b580      	push	{r7, lr}
 800874a:	b082      	sub	sp, #8
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
 8008750:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008756:	2b00      	cmp	r3, #0
 8008758:	d018      	beq.n	800878c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	68da      	ldr	r2, [r3, #12]
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008762:	441a      	add	r2, r3
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	68da      	ldr	r2, [r3, #12]
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	689b      	ldr	r3, [r3, #8]
 8008770:	429a      	cmp	r2, r3
 8008772:	d303      	bcc.n	800877c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681a      	ldr	r2, [r3, #0]
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	68d9      	ldr	r1, [r3, #12]
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008784:	461a      	mov	r2, r3
 8008786:	6838      	ldr	r0, [r7, #0]
 8008788:	f002 fd1e 	bl	800b1c8 <memcpy>
	}
}
 800878c:	bf00      	nop
 800878e:	3708      	adds	r7, #8
 8008790:	46bd      	mov	sp, r7
 8008792:	bd80      	pop	{r7, pc}

08008794 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008794:	b580      	push	{r7, lr}
 8008796:	b084      	sub	sp, #16
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800879c:	f001 fc52 	bl	800a044 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80087a6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80087a8:	e011      	b.n	80087ce <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d012      	beq.n	80087d8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	3324      	adds	r3, #36	; 0x24
 80087b6:	4618      	mov	r0, r3
 80087b8:	f000 fd2a 	bl	8009210 <xTaskRemoveFromEventList>
 80087bc:	4603      	mov	r3, r0
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d001      	beq.n	80087c6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80087c2:	f000 fe01 	bl	80093c8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80087c6:	7bfb      	ldrb	r3, [r7, #15]
 80087c8:	3b01      	subs	r3, #1
 80087ca:	b2db      	uxtb	r3, r3
 80087cc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80087ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	dce9      	bgt.n	80087aa <prvUnlockQueue+0x16>
 80087d6:	e000      	b.n	80087da <prvUnlockQueue+0x46>
					break;
 80087d8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	22ff      	movs	r2, #255	; 0xff
 80087de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80087e2:	f001 fc5f 	bl	800a0a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80087e6:	f001 fc2d 	bl	800a044 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80087f0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80087f2:	e011      	b.n	8008818 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	691b      	ldr	r3, [r3, #16]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d012      	beq.n	8008822 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	3310      	adds	r3, #16
 8008800:	4618      	mov	r0, r3
 8008802:	f000 fd05 	bl	8009210 <xTaskRemoveFromEventList>
 8008806:	4603      	mov	r3, r0
 8008808:	2b00      	cmp	r3, #0
 800880a:	d001      	beq.n	8008810 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800880c:	f000 fddc 	bl	80093c8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008810:	7bbb      	ldrb	r3, [r7, #14]
 8008812:	3b01      	subs	r3, #1
 8008814:	b2db      	uxtb	r3, r3
 8008816:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008818:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800881c:	2b00      	cmp	r3, #0
 800881e:	dce9      	bgt.n	80087f4 <prvUnlockQueue+0x60>
 8008820:	e000      	b.n	8008824 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008822:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	22ff      	movs	r2, #255	; 0xff
 8008828:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800882c:	f001 fc3a 	bl	800a0a4 <vPortExitCritical>
}
 8008830:	bf00      	nop
 8008832:	3710      	adds	r7, #16
 8008834:	46bd      	mov	sp, r7
 8008836:	bd80      	pop	{r7, pc}

08008838 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008838:	b580      	push	{r7, lr}
 800883a:	b084      	sub	sp, #16
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008840:	f001 fc00 	bl	800a044 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008848:	2b00      	cmp	r3, #0
 800884a:	d102      	bne.n	8008852 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800884c:	2301      	movs	r3, #1
 800884e:	60fb      	str	r3, [r7, #12]
 8008850:	e001      	b.n	8008856 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008852:	2300      	movs	r3, #0
 8008854:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008856:	f001 fc25 	bl	800a0a4 <vPortExitCritical>

	return xReturn;
 800885a:	68fb      	ldr	r3, [r7, #12]
}
 800885c:	4618      	mov	r0, r3
 800885e:	3710      	adds	r7, #16
 8008860:	46bd      	mov	sp, r7
 8008862:	bd80      	pop	{r7, pc}

08008864 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008864:	b580      	push	{r7, lr}
 8008866:	b084      	sub	sp, #16
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800886c:	f001 fbea 	bl	800a044 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008878:	429a      	cmp	r2, r3
 800887a:	d102      	bne.n	8008882 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800887c:	2301      	movs	r3, #1
 800887e:	60fb      	str	r3, [r7, #12]
 8008880:	e001      	b.n	8008886 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008882:	2300      	movs	r3, #0
 8008884:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008886:	f001 fc0d 	bl	800a0a4 <vPortExitCritical>

	return xReturn;
 800888a:	68fb      	ldr	r3, [r7, #12]
}
 800888c:	4618      	mov	r0, r3
 800888e:	3710      	adds	r7, #16
 8008890:	46bd      	mov	sp, r7
 8008892:	bd80      	pop	{r7, pc}

08008894 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008894:	b480      	push	{r7}
 8008896:	b085      	sub	sp, #20
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
 800889c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800889e:	2300      	movs	r3, #0
 80088a0:	60fb      	str	r3, [r7, #12]
 80088a2:	e014      	b.n	80088ce <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80088a4:	4a0f      	ldr	r2, [pc, #60]	; (80088e4 <vQueueAddToRegistry+0x50>)
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d10b      	bne.n	80088c8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80088b0:	490c      	ldr	r1, [pc, #48]	; (80088e4 <vQueueAddToRegistry+0x50>)
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	683a      	ldr	r2, [r7, #0]
 80088b6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80088ba:	4a0a      	ldr	r2, [pc, #40]	; (80088e4 <vQueueAddToRegistry+0x50>)
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	00db      	lsls	r3, r3, #3
 80088c0:	4413      	add	r3, r2
 80088c2:	687a      	ldr	r2, [r7, #4]
 80088c4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80088c6:	e006      	b.n	80088d6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	3301      	adds	r3, #1
 80088cc:	60fb      	str	r3, [r7, #12]
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	2b07      	cmp	r3, #7
 80088d2:	d9e7      	bls.n	80088a4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80088d4:	bf00      	nop
 80088d6:	bf00      	nop
 80088d8:	3714      	adds	r7, #20
 80088da:	46bd      	mov	sp, r7
 80088dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e0:	4770      	bx	lr
 80088e2:	bf00      	nop
 80088e4:	200008e8 	.word	0x200008e8

080088e8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80088e8:	b580      	push	{r7, lr}
 80088ea:	b086      	sub	sp, #24
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	60f8      	str	r0, [r7, #12]
 80088f0:	60b9      	str	r1, [r7, #8]
 80088f2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80088f8:	f001 fba4 	bl	800a044 <vPortEnterCritical>
 80088fc:	697b      	ldr	r3, [r7, #20]
 80088fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008902:	b25b      	sxtb	r3, r3
 8008904:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008908:	d103      	bne.n	8008912 <vQueueWaitForMessageRestricted+0x2a>
 800890a:	697b      	ldr	r3, [r7, #20]
 800890c:	2200      	movs	r2, #0
 800890e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008912:	697b      	ldr	r3, [r7, #20]
 8008914:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008918:	b25b      	sxtb	r3, r3
 800891a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800891e:	d103      	bne.n	8008928 <vQueueWaitForMessageRestricted+0x40>
 8008920:	697b      	ldr	r3, [r7, #20]
 8008922:	2200      	movs	r2, #0
 8008924:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008928:	f001 fbbc 	bl	800a0a4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800892c:	697b      	ldr	r3, [r7, #20]
 800892e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008930:	2b00      	cmp	r3, #0
 8008932:	d106      	bne.n	8008942 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008934:	697b      	ldr	r3, [r7, #20]
 8008936:	3324      	adds	r3, #36	; 0x24
 8008938:	687a      	ldr	r2, [r7, #4]
 800893a:	68b9      	ldr	r1, [r7, #8]
 800893c:	4618      	mov	r0, r3
 800893e:	f000 fc3b 	bl	80091b8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008942:	6978      	ldr	r0, [r7, #20]
 8008944:	f7ff ff26 	bl	8008794 <prvUnlockQueue>
	}
 8008948:	bf00      	nop
 800894a:	3718      	adds	r7, #24
 800894c:	46bd      	mov	sp, r7
 800894e:	bd80      	pop	{r7, pc}

08008950 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008950:	b580      	push	{r7, lr}
 8008952:	b08e      	sub	sp, #56	; 0x38
 8008954:	af04      	add	r7, sp, #16
 8008956:	60f8      	str	r0, [r7, #12]
 8008958:	60b9      	str	r1, [r7, #8]
 800895a:	607a      	str	r2, [r7, #4]
 800895c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800895e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008960:	2b00      	cmp	r3, #0
 8008962:	d10a      	bne.n	800897a <xTaskCreateStatic+0x2a>
	__asm volatile
 8008964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008968:	f383 8811 	msr	BASEPRI, r3
 800896c:	f3bf 8f6f 	isb	sy
 8008970:	f3bf 8f4f 	dsb	sy
 8008974:	623b      	str	r3, [r7, #32]
}
 8008976:	bf00      	nop
 8008978:	e7fe      	b.n	8008978 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800897a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800897c:	2b00      	cmp	r3, #0
 800897e:	d10a      	bne.n	8008996 <xTaskCreateStatic+0x46>
	__asm volatile
 8008980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008984:	f383 8811 	msr	BASEPRI, r3
 8008988:	f3bf 8f6f 	isb	sy
 800898c:	f3bf 8f4f 	dsb	sy
 8008990:	61fb      	str	r3, [r7, #28]
}
 8008992:	bf00      	nop
 8008994:	e7fe      	b.n	8008994 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008996:	235c      	movs	r3, #92	; 0x5c
 8008998:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800899a:	693b      	ldr	r3, [r7, #16]
 800899c:	2b5c      	cmp	r3, #92	; 0x5c
 800899e:	d00a      	beq.n	80089b6 <xTaskCreateStatic+0x66>
	__asm volatile
 80089a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089a4:	f383 8811 	msr	BASEPRI, r3
 80089a8:	f3bf 8f6f 	isb	sy
 80089ac:	f3bf 8f4f 	dsb	sy
 80089b0:	61bb      	str	r3, [r7, #24]
}
 80089b2:	bf00      	nop
 80089b4:	e7fe      	b.n	80089b4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80089b6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80089b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d01e      	beq.n	80089fc <xTaskCreateStatic+0xac>
 80089be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d01b      	beq.n	80089fc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80089c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089c6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80089c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80089cc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80089ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089d0:	2202      	movs	r2, #2
 80089d2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80089d6:	2300      	movs	r3, #0
 80089d8:	9303      	str	r3, [sp, #12]
 80089da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089dc:	9302      	str	r3, [sp, #8]
 80089de:	f107 0314 	add.w	r3, r7, #20
 80089e2:	9301      	str	r3, [sp, #4]
 80089e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089e6:	9300      	str	r3, [sp, #0]
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	687a      	ldr	r2, [r7, #4]
 80089ec:	68b9      	ldr	r1, [r7, #8]
 80089ee:	68f8      	ldr	r0, [r7, #12]
 80089f0:	f000 f850 	bl	8008a94 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80089f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80089f6:	f000 f8dd 	bl	8008bb4 <prvAddNewTaskToReadyList>
 80089fa:	e001      	b.n	8008a00 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80089fc:	2300      	movs	r3, #0
 80089fe:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008a00:	697b      	ldr	r3, [r7, #20]
	}
 8008a02:	4618      	mov	r0, r3
 8008a04:	3728      	adds	r7, #40	; 0x28
 8008a06:	46bd      	mov	sp, r7
 8008a08:	bd80      	pop	{r7, pc}

08008a0a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008a0a:	b580      	push	{r7, lr}
 8008a0c:	b08c      	sub	sp, #48	; 0x30
 8008a0e:	af04      	add	r7, sp, #16
 8008a10:	60f8      	str	r0, [r7, #12]
 8008a12:	60b9      	str	r1, [r7, #8]
 8008a14:	603b      	str	r3, [r7, #0]
 8008a16:	4613      	mov	r3, r2
 8008a18:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008a1a:	88fb      	ldrh	r3, [r7, #6]
 8008a1c:	009b      	lsls	r3, r3, #2
 8008a1e:	4618      	mov	r0, r3
 8008a20:	f001 fc32 	bl	800a288 <pvPortMalloc>
 8008a24:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008a26:	697b      	ldr	r3, [r7, #20]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d00e      	beq.n	8008a4a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008a2c:	205c      	movs	r0, #92	; 0x5c
 8008a2e:	f001 fc2b 	bl	800a288 <pvPortMalloc>
 8008a32:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008a34:	69fb      	ldr	r3, [r7, #28]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d003      	beq.n	8008a42 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008a3a:	69fb      	ldr	r3, [r7, #28]
 8008a3c:	697a      	ldr	r2, [r7, #20]
 8008a3e:	631a      	str	r2, [r3, #48]	; 0x30
 8008a40:	e005      	b.n	8008a4e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008a42:	6978      	ldr	r0, [r7, #20]
 8008a44:	f001 fcec 	bl	800a420 <vPortFree>
 8008a48:	e001      	b.n	8008a4e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008a4e:	69fb      	ldr	r3, [r7, #28]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d017      	beq.n	8008a84 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008a54:	69fb      	ldr	r3, [r7, #28]
 8008a56:	2200      	movs	r2, #0
 8008a58:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008a5c:	88fa      	ldrh	r2, [r7, #6]
 8008a5e:	2300      	movs	r3, #0
 8008a60:	9303      	str	r3, [sp, #12]
 8008a62:	69fb      	ldr	r3, [r7, #28]
 8008a64:	9302      	str	r3, [sp, #8]
 8008a66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a68:	9301      	str	r3, [sp, #4]
 8008a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a6c:	9300      	str	r3, [sp, #0]
 8008a6e:	683b      	ldr	r3, [r7, #0]
 8008a70:	68b9      	ldr	r1, [r7, #8]
 8008a72:	68f8      	ldr	r0, [r7, #12]
 8008a74:	f000 f80e 	bl	8008a94 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008a78:	69f8      	ldr	r0, [r7, #28]
 8008a7a:	f000 f89b 	bl	8008bb4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008a7e:	2301      	movs	r3, #1
 8008a80:	61bb      	str	r3, [r7, #24]
 8008a82:	e002      	b.n	8008a8a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008a84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008a88:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008a8a:	69bb      	ldr	r3, [r7, #24]
	}
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	3720      	adds	r7, #32
 8008a90:	46bd      	mov	sp, r7
 8008a92:	bd80      	pop	{r7, pc}

08008a94 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008a94:	b580      	push	{r7, lr}
 8008a96:	b088      	sub	sp, #32
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	60f8      	str	r0, [r7, #12]
 8008a9c:	60b9      	str	r1, [r7, #8]
 8008a9e:	607a      	str	r2, [r7, #4]
 8008aa0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aa4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	009b      	lsls	r3, r3, #2
 8008aaa:	461a      	mov	r2, r3
 8008aac:	21a5      	movs	r1, #165	; 0xa5
 8008aae:	f002 fb5f 	bl	800b170 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ab4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008abc:	3b01      	subs	r3, #1
 8008abe:	009b      	lsls	r3, r3, #2
 8008ac0:	4413      	add	r3, r2
 8008ac2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008ac4:	69bb      	ldr	r3, [r7, #24]
 8008ac6:	f023 0307 	bic.w	r3, r3, #7
 8008aca:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008acc:	69bb      	ldr	r3, [r7, #24]
 8008ace:	f003 0307 	and.w	r3, r3, #7
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d00a      	beq.n	8008aec <prvInitialiseNewTask+0x58>
	__asm volatile
 8008ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ada:	f383 8811 	msr	BASEPRI, r3
 8008ade:	f3bf 8f6f 	isb	sy
 8008ae2:	f3bf 8f4f 	dsb	sy
 8008ae6:	617b      	str	r3, [r7, #20]
}
 8008ae8:	bf00      	nop
 8008aea:	e7fe      	b.n	8008aea <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008aec:	68bb      	ldr	r3, [r7, #8]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d01f      	beq.n	8008b32 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008af2:	2300      	movs	r3, #0
 8008af4:	61fb      	str	r3, [r7, #28]
 8008af6:	e012      	b.n	8008b1e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008af8:	68ba      	ldr	r2, [r7, #8]
 8008afa:	69fb      	ldr	r3, [r7, #28]
 8008afc:	4413      	add	r3, r2
 8008afe:	7819      	ldrb	r1, [r3, #0]
 8008b00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b02:	69fb      	ldr	r3, [r7, #28]
 8008b04:	4413      	add	r3, r2
 8008b06:	3334      	adds	r3, #52	; 0x34
 8008b08:	460a      	mov	r2, r1
 8008b0a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008b0c:	68ba      	ldr	r2, [r7, #8]
 8008b0e:	69fb      	ldr	r3, [r7, #28]
 8008b10:	4413      	add	r3, r2
 8008b12:	781b      	ldrb	r3, [r3, #0]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d006      	beq.n	8008b26 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008b18:	69fb      	ldr	r3, [r7, #28]
 8008b1a:	3301      	adds	r3, #1
 8008b1c:	61fb      	str	r3, [r7, #28]
 8008b1e:	69fb      	ldr	r3, [r7, #28]
 8008b20:	2b0f      	cmp	r3, #15
 8008b22:	d9e9      	bls.n	8008af8 <prvInitialiseNewTask+0x64>
 8008b24:	e000      	b.n	8008b28 <prvInitialiseNewTask+0x94>
			{
				break;
 8008b26:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008b30:	e003      	b.n	8008b3a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b34:	2200      	movs	r2, #0
 8008b36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b3c:	2b37      	cmp	r3, #55	; 0x37
 8008b3e:	d901      	bls.n	8008b44 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008b40:	2337      	movs	r3, #55	; 0x37
 8008b42:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008b48:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008b4e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b52:	2200      	movs	r2, #0
 8008b54:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b58:	3304      	adds	r3, #4
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	f7ff f978 	bl	8007e50 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b62:	3318      	adds	r3, #24
 8008b64:	4618      	mov	r0, r3
 8008b66:	f7ff f973 	bl	8007e50 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b6e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b72:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b78:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b7e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b82:	2200      	movs	r2, #0
 8008b84:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b88:	2200      	movs	r2, #0
 8008b8a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008b8e:	683a      	ldr	r2, [r7, #0]
 8008b90:	68f9      	ldr	r1, [r7, #12]
 8008b92:	69b8      	ldr	r0, [r7, #24]
 8008b94:	f001 f928 	bl	8009de8 <pxPortInitialiseStack>
 8008b98:	4602      	mov	r2, r0
 8008b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b9c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d002      	beq.n	8008baa <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ba6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ba8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008baa:	bf00      	nop
 8008bac:	3720      	adds	r7, #32
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	bd80      	pop	{r7, pc}
	...

08008bb4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	b082      	sub	sp, #8
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008bbc:	f001 fa42 	bl	800a044 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008bc0:	4b2d      	ldr	r3, [pc, #180]	; (8008c78 <prvAddNewTaskToReadyList+0xc4>)
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	3301      	adds	r3, #1
 8008bc6:	4a2c      	ldr	r2, [pc, #176]	; (8008c78 <prvAddNewTaskToReadyList+0xc4>)
 8008bc8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008bca:	4b2c      	ldr	r3, [pc, #176]	; (8008c7c <prvAddNewTaskToReadyList+0xc8>)
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d109      	bne.n	8008be6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008bd2:	4a2a      	ldr	r2, [pc, #168]	; (8008c7c <prvAddNewTaskToReadyList+0xc8>)
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008bd8:	4b27      	ldr	r3, [pc, #156]	; (8008c78 <prvAddNewTaskToReadyList+0xc4>)
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	2b01      	cmp	r3, #1
 8008bde:	d110      	bne.n	8008c02 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008be0:	f000 fc16 	bl	8009410 <prvInitialiseTaskLists>
 8008be4:	e00d      	b.n	8008c02 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008be6:	4b26      	ldr	r3, [pc, #152]	; (8008c80 <prvAddNewTaskToReadyList+0xcc>)
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d109      	bne.n	8008c02 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008bee:	4b23      	ldr	r3, [pc, #140]	; (8008c7c <prvAddNewTaskToReadyList+0xc8>)
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bf8:	429a      	cmp	r2, r3
 8008bfa:	d802      	bhi.n	8008c02 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008bfc:	4a1f      	ldr	r2, [pc, #124]	; (8008c7c <prvAddNewTaskToReadyList+0xc8>)
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008c02:	4b20      	ldr	r3, [pc, #128]	; (8008c84 <prvAddNewTaskToReadyList+0xd0>)
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	3301      	adds	r3, #1
 8008c08:	4a1e      	ldr	r2, [pc, #120]	; (8008c84 <prvAddNewTaskToReadyList+0xd0>)
 8008c0a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008c0c:	4b1d      	ldr	r3, [pc, #116]	; (8008c84 <prvAddNewTaskToReadyList+0xd0>)
 8008c0e:	681a      	ldr	r2, [r3, #0]
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c18:	4b1b      	ldr	r3, [pc, #108]	; (8008c88 <prvAddNewTaskToReadyList+0xd4>)
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	429a      	cmp	r2, r3
 8008c1e:	d903      	bls.n	8008c28 <prvAddNewTaskToReadyList+0x74>
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c24:	4a18      	ldr	r2, [pc, #96]	; (8008c88 <prvAddNewTaskToReadyList+0xd4>)
 8008c26:	6013      	str	r3, [r2, #0]
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c2c:	4613      	mov	r3, r2
 8008c2e:	009b      	lsls	r3, r3, #2
 8008c30:	4413      	add	r3, r2
 8008c32:	009b      	lsls	r3, r3, #2
 8008c34:	4a15      	ldr	r2, [pc, #84]	; (8008c8c <prvAddNewTaskToReadyList+0xd8>)
 8008c36:	441a      	add	r2, r3
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	3304      	adds	r3, #4
 8008c3c:	4619      	mov	r1, r3
 8008c3e:	4610      	mov	r0, r2
 8008c40:	f7ff f913 	bl	8007e6a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008c44:	f001 fa2e 	bl	800a0a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008c48:	4b0d      	ldr	r3, [pc, #52]	; (8008c80 <prvAddNewTaskToReadyList+0xcc>)
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d00e      	beq.n	8008c6e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008c50:	4b0a      	ldr	r3, [pc, #40]	; (8008c7c <prvAddNewTaskToReadyList+0xc8>)
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c5a:	429a      	cmp	r2, r3
 8008c5c:	d207      	bcs.n	8008c6e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008c5e:	4b0c      	ldr	r3, [pc, #48]	; (8008c90 <prvAddNewTaskToReadyList+0xdc>)
 8008c60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c64:	601a      	str	r2, [r3, #0]
 8008c66:	f3bf 8f4f 	dsb	sy
 8008c6a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008c6e:	bf00      	nop
 8008c70:	3708      	adds	r7, #8
 8008c72:	46bd      	mov	sp, r7
 8008c74:	bd80      	pop	{r7, pc}
 8008c76:	bf00      	nop
 8008c78:	20000dfc 	.word	0x20000dfc
 8008c7c:	20000928 	.word	0x20000928
 8008c80:	20000e08 	.word	0x20000e08
 8008c84:	20000e18 	.word	0x20000e18
 8008c88:	20000e04 	.word	0x20000e04
 8008c8c:	2000092c 	.word	0x2000092c
 8008c90:	e000ed04 	.word	0xe000ed04

08008c94 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008c94:	b580      	push	{r7, lr}
 8008c96:	b084      	sub	sp, #16
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d017      	beq.n	8008cd6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008ca6:	4b13      	ldr	r3, [pc, #76]	; (8008cf4 <vTaskDelay+0x60>)
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d00a      	beq.n	8008cc4 <vTaskDelay+0x30>
	__asm volatile
 8008cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cb2:	f383 8811 	msr	BASEPRI, r3
 8008cb6:	f3bf 8f6f 	isb	sy
 8008cba:	f3bf 8f4f 	dsb	sy
 8008cbe:	60bb      	str	r3, [r7, #8]
}
 8008cc0:	bf00      	nop
 8008cc2:	e7fe      	b.n	8008cc2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008cc4:	f000 f880 	bl	8008dc8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008cc8:	2100      	movs	r1, #0
 8008cca:	6878      	ldr	r0, [r7, #4]
 8008ccc:	f000 fcea 	bl	80096a4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008cd0:	f000 f888 	bl	8008de4 <xTaskResumeAll>
 8008cd4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d107      	bne.n	8008cec <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008cdc:	4b06      	ldr	r3, [pc, #24]	; (8008cf8 <vTaskDelay+0x64>)
 8008cde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ce2:	601a      	str	r2, [r3, #0]
 8008ce4:	f3bf 8f4f 	dsb	sy
 8008ce8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008cec:	bf00      	nop
 8008cee:	3710      	adds	r7, #16
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	bd80      	pop	{r7, pc}
 8008cf4:	20000e24 	.word	0x20000e24
 8008cf8:	e000ed04 	.word	0xe000ed04

08008cfc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b08a      	sub	sp, #40	; 0x28
 8008d00:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008d02:	2300      	movs	r3, #0
 8008d04:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008d06:	2300      	movs	r3, #0
 8008d08:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008d0a:	463a      	mov	r2, r7
 8008d0c:	1d39      	adds	r1, r7, #4
 8008d0e:	f107 0308 	add.w	r3, r7, #8
 8008d12:	4618      	mov	r0, r3
 8008d14:	f7ff f848 	bl	8007da8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008d18:	6839      	ldr	r1, [r7, #0]
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	68ba      	ldr	r2, [r7, #8]
 8008d1e:	9202      	str	r2, [sp, #8]
 8008d20:	9301      	str	r3, [sp, #4]
 8008d22:	2300      	movs	r3, #0
 8008d24:	9300      	str	r3, [sp, #0]
 8008d26:	2300      	movs	r3, #0
 8008d28:	460a      	mov	r2, r1
 8008d2a:	4921      	ldr	r1, [pc, #132]	; (8008db0 <vTaskStartScheduler+0xb4>)
 8008d2c:	4821      	ldr	r0, [pc, #132]	; (8008db4 <vTaskStartScheduler+0xb8>)
 8008d2e:	f7ff fe0f 	bl	8008950 <xTaskCreateStatic>
 8008d32:	4603      	mov	r3, r0
 8008d34:	4a20      	ldr	r2, [pc, #128]	; (8008db8 <vTaskStartScheduler+0xbc>)
 8008d36:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008d38:	4b1f      	ldr	r3, [pc, #124]	; (8008db8 <vTaskStartScheduler+0xbc>)
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d002      	beq.n	8008d46 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008d40:	2301      	movs	r3, #1
 8008d42:	617b      	str	r3, [r7, #20]
 8008d44:	e001      	b.n	8008d4a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008d46:	2300      	movs	r3, #0
 8008d48:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008d4a:	697b      	ldr	r3, [r7, #20]
 8008d4c:	2b01      	cmp	r3, #1
 8008d4e:	d102      	bne.n	8008d56 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008d50:	f000 fcfc 	bl	800974c <xTimerCreateTimerTask>
 8008d54:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008d56:	697b      	ldr	r3, [r7, #20]
 8008d58:	2b01      	cmp	r3, #1
 8008d5a:	d116      	bne.n	8008d8a <vTaskStartScheduler+0x8e>
	__asm volatile
 8008d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d60:	f383 8811 	msr	BASEPRI, r3
 8008d64:	f3bf 8f6f 	isb	sy
 8008d68:	f3bf 8f4f 	dsb	sy
 8008d6c:	613b      	str	r3, [r7, #16]
}
 8008d6e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008d70:	4b12      	ldr	r3, [pc, #72]	; (8008dbc <vTaskStartScheduler+0xc0>)
 8008d72:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008d76:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008d78:	4b11      	ldr	r3, [pc, #68]	; (8008dc0 <vTaskStartScheduler+0xc4>)
 8008d7a:	2201      	movs	r2, #1
 8008d7c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008d7e:	4b11      	ldr	r3, [pc, #68]	; (8008dc4 <vTaskStartScheduler+0xc8>)
 8008d80:	2200      	movs	r2, #0
 8008d82:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008d84:	f001 f8bc 	bl	8009f00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008d88:	e00e      	b.n	8008da8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008d8a:	697b      	ldr	r3, [r7, #20]
 8008d8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008d90:	d10a      	bne.n	8008da8 <vTaskStartScheduler+0xac>
	__asm volatile
 8008d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d96:	f383 8811 	msr	BASEPRI, r3
 8008d9a:	f3bf 8f6f 	isb	sy
 8008d9e:	f3bf 8f4f 	dsb	sy
 8008da2:	60fb      	str	r3, [r7, #12]
}
 8008da4:	bf00      	nop
 8008da6:	e7fe      	b.n	8008da6 <vTaskStartScheduler+0xaa>
}
 8008da8:	bf00      	nop
 8008daa:	3718      	adds	r7, #24
 8008dac:	46bd      	mov	sp, r7
 8008dae:	bd80      	pop	{r7, pc}
 8008db0:	0800b218 	.word	0x0800b218
 8008db4:	080093e1 	.word	0x080093e1
 8008db8:	20000e20 	.word	0x20000e20
 8008dbc:	20000e1c 	.word	0x20000e1c
 8008dc0:	20000e08 	.word	0x20000e08
 8008dc4:	20000e00 	.word	0x20000e00

08008dc8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008dc8:	b480      	push	{r7}
 8008dca:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008dcc:	4b04      	ldr	r3, [pc, #16]	; (8008de0 <vTaskSuspendAll+0x18>)
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	3301      	adds	r3, #1
 8008dd2:	4a03      	ldr	r2, [pc, #12]	; (8008de0 <vTaskSuspendAll+0x18>)
 8008dd4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008dd6:	bf00      	nop
 8008dd8:	46bd      	mov	sp, r7
 8008dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dde:	4770      	bx	lr
 8008de0:	20000e24 	.word	0x20000e24

08008de4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b084      	sub	sp, #16
 8008de8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008dea:	2300      	movs	r3, #0
 8008dec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008dee:	2300      	movs	r3, #0
 8008df0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008df2:	4b42      	ldr	r3, [pc, #264]	; (8008efc <xTaskResumeAll+0x118>)
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d10a      	bne.n	8008e10 <xTaskResumeAll+0x2c>
	__asm volatile
 8008dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dfe:	f383 8811 	msr	BASEPRI, r3
 8008e02:	f3bf 8f6f 	isb	sy
 8008e06:	f3bf 8f4f 	dsb	sy
 8008e0a:	603b      	str	r3, [r7, #0]
}
 8008e0c:	bf00      	nop
 8008e0e:	e7fe      	b.n	8008e0e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008e10:	f001 f918 	bl	800a044 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008e14:	4b39      	ldr	r3, [pc, #228]	; (8008efc <xTaskResumeAll+0x118>)
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	3b01      	subs	r3, #1
 8008e1a:	4a38      	ldr	r2, [pc, #224]	; (8008efc <xTaskResumeAll+0x118>)
 8008e1c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008e1e:	4b37      	ldr	r3, [pc, #220]	; (8008efc <xTaskResumeAll+0x118>)
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d162      	bne.n	8008eec <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008e26:	4b36      	ldr	r3, [pc, #216]	; (8008f00 <xTaskResumeAll+0x11c>)
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d05e      	beq.n	8008eec <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008e2e:	e02f      	b.n	8008e90 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e30:	4b34      	ldr	r3, [pc, #208]	; (8008f04 <xTaskResumeAll+0x120>)
 8008e32:	68db      	ldr	r3, [r3, #12]
 8008e34:	68db      	ldr	r3, [r3, #12]
 8008e36:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	3318      	adds	r3, #24
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	f7ff f871 	bl	8007f24 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	3304      	adds	r3, #4
 8008e46:	4618      	mov	r0, r3
 8008e48:	f7ff f86c 	bl	8007f24 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e50:	4b2d      	ldr	r3, [pc, #180]	; (8008f08 <xTaskResumeAll+0x124>)
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	429a      	cmp	r2, r3
 8008e56:	d903      	bls.n	8008e60 <xTaskResumeAll+0x7c>
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e5c:	4a2a      	ldr	r2, [pc, #168]	; (8008f08 <xTaskResumeAll+0x124>)
 8008e5e:	6013      	str	r3, [r2, #0]
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e64:	4613      	mov	r3, r2
 8008e66:	009b      	lsls	r3, r3, #2
 8008e68:	4413      	add	r3, r2
 8008e6a:	009b      	lsls	r3, r3, #2
 8008e6c:	4a27      	ldr	r2, [pc, #156]	; (8008f0c <xTaskResumeAll+0x128>)
 8008e6e:	441a      	add	r2, r3
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	3304      	adds	r3, #4
 8008e74:	4619      	mov	r1, r3
 8008e76:	4610      	mov	r0, r2
 8008e78:	f7fe fff7 	bl	8007e6a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e80:	4b23      	ldr	r3, [pc, #140]	; (8008f10 <xTaskResumeAll+0x12c>)
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e86:	429a      	cmp	r2, r3
 8008e88:	d302      	bcc.n	8008e90 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008e8a:	4b22      	ldr	r3, [pc, #136]	; (8008f14 <xTaskResumeAll+0x130>)
 8008e8c:	2201      	movs	r2, #1
 8008e8e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008e90:	4b1c      	ldr	r3, [pc, #112]	; (8008f04 <xTaskResumeAll+0x120>)
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d1cb      	bne.n	8008e30 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d001      	beq.n	8008ea2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008e9e:	f000 fb55 	bl	800954c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008ea2:	4b1d      	ldr	r3, [pc, #116]	; (8008f18 <xTaskResumeAll+0x134>)
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d010      	beq.n	8008ed0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008eae:	f000 f847 	bl	8008f40 <xTaskIncrementTick>
 8008eb2:	4603      	mov	r3, r0
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d002      	beq.n	8008ebe <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008eb8:	4b16      	ldr	r3, [pc, #88]	; (8008f14 <xTaskResumeAll+0x130>)
 8008eba:	2201      	movs	r2, #1
 8008ebc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	3b01      	subs	r3, #1
 8008ec2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d1f1      	bne.n	8008eae <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8008eca:	4b13      	ldr	r3, [pc, #76]	; (8008f18 <xTaskResumeAll+0x134>)
 8008ecc:	2200      	movs	r2, #0
 8008ece:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008ed0:	4b10      	ldr	r3, [pc, #64]	; (8008f14 <xTaskResumeAll+0x130>)
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d009      	beq.n	8008eec <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008ed8:	2301      	movs	r3, #1
 8008eda:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008edc:	4b0f      	ldr	r3, [pc, #60]	; (8008f1c <xTaskResumeAll+0x138>)
 8008ede:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ee2:	601a      	str	r2, [r3, #0]
 8008ee4:	f3bf 8f4f 	dsb	sy
 8008ee8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008eec:	f001 f8da 	bl	800a0a4 <vPortExitCritical>

	return xAlreadyYielded;
 8008ef0:	68bb      	ldr	r3, [r7, #8]
}
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	3710      	adds	r7, #16
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	bd80      	pop	{r7, pc}
 8008efa:	bf00      	nop
 8008efc:	20000e24 	.word	0x20000e24
 8008f00:	20000dfc 	.word	0x20000dfc
 8008f04:	20000dbc 	.word	0x20000dbc
 8008f08:	20000e04 	.word	0x20000e04
 8008f0c:	2000092c 	.word	0x2000092c
 8008f10:	20000928 	.word	0x20000928
 8008f14:	20000e10 	.word	0x20000e10
 8008f18:	20000e0c 	.word	0x20000e0c
 8008f1c:	e000ed04 	.word	0xe000ed04

08008f20 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008f20:	b480      	push	{r7}
 8008f22:	b083      	sub	sp, #12
 8008f24:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008f26:	4b05      	ldr	r3, [pc, #20]	; (8008f3c <xTaskGetTickCount+0x1c>)
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008f2c:	687b      	ldr	r3, [r7, #4]
}
 8008f2e:	4618      	mov	r0, r3
 8008f30:	370c      	adds	r7, #12
 8008f32:	46bd      	mov	sp, r7
 8008f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f38:	4770      	bx	lr
 8008f3a:	bf00      	nop
 8008f3c:	20000e00 	.word	0x20000e00

08008f40 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b086      	sub	sp, #24
 8008f44:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008f46:	2300      	movs	r3, #0
 8008f48:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008f4a:	4b4f      	ldr	r3, [pc, #316]	; (8009088 <xTaskIncrementTick+0x148>)
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	f040 808f 	bne.w	8009072 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008f54:	4b4d      	ldr	r3, [pc, #308]	; (800908c <xTaskIncrementTick+0x14c>)
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	3301      	adds	r3, #1
 8008f5a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008f5c:	4a4b      	ldr	r2, [pc, #300]	; (800908c <xTaskIncrementTick+0x14c>)
 8008f5e:	693b      	ldr	r3, [r7, #16]
 8008f60:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008f62:	693b      	ldr	r3, [r7, #16]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d120      	bne.n	8008faa <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008f68:	4b49      	ldr	r3, [pc, #292]	; (8009090 <xTaskIncrementTick+0x150>)
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d00a      	beq.n	8008f88 <xTaskIncrementTick+0x48>
	__asm volatile
 8008f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f76:	f383 8811 	msr	BASEPRI, r3
 8008f7a:	f3bf 8f6f 	isb	sy
 8008f7e:	f3bf 8f4f 	dsb	sy
 8008f82:	603b      	str	r3, [r7, #0]
}
 8008f84:	bf00      	nop
 8008f86:	e7fe      	b.n	8008f86 <xTaskIncrementTick+0x46>
 8008f88:	4b41      	ldr	r3, [pc, #260]	; (8009090 <xTaskIncrementTick+0x150>)
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	60fb      	str	r3, [r7, #12]
 8008f8e:	4b41      	ldr	r3, [pc, #260]	; (8009094 <xTaskIncrementTick+0x154>)
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	4a3f      	ldr	r2, [pc, #252]	; (8009090 <xTaskIncrementTick+0x150>)
 8008f94:	6013      	str	r3, [r2, #0]
 8008f96:	4a3f      	ldr	r2, [pc, #252]	; (8009094 <xTaskIncrementTick+0x154>)
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	6013      	str	r3, [r2, #0]
 8008f9c:	4b3e      	ldr	r3, [pc, #248]	; (8009098 <xTaskIncrementTick+0x158>)
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	3301      	adds	r3, #1
 8008fa2:	4a3d      	ldr	r2, [pc, #244]	; (8009098 <xTaskIncrementTick+0x158>)
 8008fa4:	6013      	str	r3, [r2, #0]
 8008fa6:	f000 fad1 	bl	800954c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008faa:	4b3c      	ldr	r3, [pc, #240]	; (800909c <xTaskIncrementTick+0x15c>)
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	693a      	ldr	r2, [r7, #16]
 8008fb0:	429a      	cmp	r2, r3
 8008fb2:	d349      	bcc.n	8009048 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008fb4:	4b36      	ldr	r3, [pc, #216]	; (8009090 <xTaskIncrementTick+0x150>)
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d104      	bne.n	8008fc8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008fbe:	4b37      	ldr	r3, [pc, #220]	; (800909c <xTaskIncrementTick+0x15c>)
 8008fc0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008fc4:	601a      	str	r2, [r3, #0]
					break;
 8008fc6:	e03f      	b.n	8009048 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008fc8:	4b31      	ldr	r3, [pc, #196]	; (8009090 <xTaskIncrementTick+0x150>)
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	68db      	ldr	r3, [r3, #12]
 8008fce:	68db      	ldr	r3, [r3, #12]
 8008fd0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008fd2:	68bb      	ldr	r3, [r7, #8]
 8008fd4:	685b      	ldr	r3, [r3, #4]
 8008fd6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008fd8:	693a      	ldr	r2, [r7, #16]
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	429a      	cmp	r2, r3
 8008fde:	d203      	bcs.n	8008fe8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008fe0:	4a2e      	ldr	r2, [pc, #184]	; (800909c <xTaskIncrementTick+0x15c>)
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008fe6:	e02f      	b.n	8009048 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008fe8:	68bb      	ldr	r3, [r7, #8]
 8008fea:	3304      	adds	r3, #4
 8008fec:	4618      	mov	r0, r3
 8008fee:	f7fe ff99 	bl	8007f24 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008ff2:	68bb      	ldr	r3, [r7, #8]
 8008ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d004      	beq.n	8009004 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008ffa:	68bb      	ldr	r3, [r7, #8]
 8008ffc:	3318      	adds	r3, #24
 8008ffe:	4618      	mov	r0, r3
 8009000:	f7fe ff90 	bl	8007f24 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009004:	68bb      	ldr	r3, [r7, #8]
 8009006:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009008:	4b25      	ldr	r3, [pc, #148]	; (80090a0 <xTaskIncrementTick+0x160>)
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	429a      	cmp	r2, r3
 800900e:	d903      	bls.n	8009018 <xTaskIncrementTick+0xd8>
 8009010:	68bb      	ldr	r3, [r7, #8]
 8009012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009014:	4a22      	ldr	r2, [pc, #136]	; (80090a0 <xTaskIncrementTick+0x160>)
 8009016:	6013      	str	r3, [r2, #0]
 8009018:	68bb      	ldr	r3, [r7, #8]
 800901a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800901c:	4613      	mov	r3, r2
 800901e:	009b      	lsls	r3, r3, #2
 8009020:	4413      	add	r3, r2
 8009022:	009b      	lsls	r3, r3, #2
 8009024:	4a1f      	ldr	r2, [pc, #124]	; (80090a4 <xTaskIncrementTick+0x164>)
 8009026:	441a      	add	r2, r3
 8009028:	68bb      	ldr	r3, [r7, #8]
 800902a:	3304      	adds	r3, #4
 800902c:	4619      	mov	r1, r3
 800902e:	4610      	mov	r0, r2
 8009030:	f7fe ff1b 	bl	8007e6a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009034:	68bb      	ldr	r3, [r7, #8]
 8009036:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009038:	4b1b      	ldr	r3, [pc, #108]	; (80090a8 <xTaskIncrementTick+0x168>)
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800903e:	429a      	cmp	r2, r3
 8009040:	d3b8      	bcc.n	8008fb4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009042:	2301      	movs	r3, #1
 8009044:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009046:	e7b5      	b.n	8008fb4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009048:	4b17      	ldr	r3, [pc, #92]	; (80090a8 <xTaskIncrementTick+0x168>)
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800904e:	4915      	ldr	r1, [pc, #84]	; (80090a4 <xTaskIncrementTick+0x164>)
 8009050:	4613      	mov	r3, r2
 8009052:	009b      	lsls	r3, r3, #2
 8009054:	4413      	add	r3, r2
 8009056:	009b      	lsls	r3, r3, #2
 8009058:	440b      	add	r3, r1
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	2b01      	cmp	r3, #1
 800905e:	d901      	bls.n	8009064 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009060:	2301      	movs	r3, #1
 8009062:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009064:	4b11      	ldr	r3, [pc, #68]	; (80090ac <xTaskIncrementTick+0x16c>)
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	2b00      	cmp	r3, #0
 800906a:	d007      	beq.n	800907c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800906c:	2301      	movs	r3, #1
 800906e:	617b      	str	r3, [r7, #20]
 8009070:	e004      	b.n	800907c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009072:	4b0f      	ldr	r3, [pc, #60]	; (80090b0 <xTaskIncrementTick+0x170>)
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	3301      	adds	r3, #1
 8009078:	4a0d      	ldr	r2, [pc, #52]	; (80090b0 <xTaskIncrementTick+0x170>)
 800907a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800907c:	697b      	ldr	r3, [r7, #20]
}
 800907e:	4618      	mov	r0, r3
 8009080:	3718      	adds	r7, #24
 8009082:	46bd      	mov	sp, r7
 8009084:	bd80      	pop	{r7, pc}
 8009086:	bf00      	nop
 8009088:	20000e24 	.word	0x20000e24
 800908c:	20000e00 	.word	0x20000e00
 8009090:	20000db4 	.word	0x20000db4
 8009094:	20000db8 	.word	0x20000db8
 8009098:	20000e14 	.word	0x20000e14
 800909c:	20000e1c 	.word	0x20000e1c
 80090a0:	20000e04 	.word	0x20000e04
 80090a4:	2000092c 	.word	0x2000092c
 80090a8:	20000928 	.word	0x20000928
 80090ac:	20000e10 	.word	0x20000e10
 80090b0:	20000e0c 	.word	0x20000e0c

080090b4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80090b4:	b480      	push	{r7}
 80090b6:	b085      	sub	sp, #20
 80090b8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80090ba:	4b28      	ldr	r3, [pc, #160]	; (800915c <vTaskSwitchContext+0xa8>)
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d003      	beq.n	80090ca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80090c2:	4b27      	ldr	r3, [pc, #156]	; (8009160 <vTaskSwitchContext+0xac>)
 80090c4:	2201      	movs	r2, #1
 80090c6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80090c8:	e041      	b.n	800914e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80090ca:	4b25      	ldr	r3, [pc, #148]	; (8009160 <vTaskSwitchContext+0xac>)
 80090cc:	2200      	movs	r2, #0
 80090ce:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80090d0:	4b24      	ldr	r3, [pc, #144]	; (8009164 <vTaskSwitchContext+0xb0>)
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	60fb      	str	r3, [r7, #12]
 80090d6:	e010      	b.n	80090fa <vTaskSwitchContext+0x46>
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d10a      	bne.n	80090f4 <vTaskSwitchContext+0x40>
	__asm volatile
 80090de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090e2:	f383 8811 	msr	BASEPRI, r3
 80090e6:	f3bf 8f6f 	isb	sy
 80090ea:	f3bf 8f4f 	dsb	sy
 80090ee:	607b      	str	r3, [r7, #4]
}
 80090f0:	bf00      	nop
 80090f2:	e7fe      	b.n	80090f2 <vTaskSwitchContext+0x3e>
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	3b01      	subs	r3, #1
 80090f8:	60fb      	str	r3, [r7, #12]
 80090fa:	491b      	ldr	r1, [pc, #108]	; (8009168 <vTaskSwitchContext+0xb4>)
 80090fc:	68fa      	ldr	r2, [r7, #12]
 80090fe:	4613      	mov	r3, r2
 8009100:	009b      	lsls	r3, r3, #2
 8009102:	4413      	add	r3, r2
 8009104:	009b      	lsls	r3, r3, #2
 8009106:	440b      	add	r3, r1
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	2b00      	cmp	r3, #0
 800910c:	d0e4      	beq.n	80090d8 <vTaskSwitchContext+0x24>
 800910e:	68fa      	ldr	r2, [r7, #12]
 8009110:	4613      	mov	r3, r2
 8009112:	009b      	lsls	r3, r3, #2
 8009114:	4413      	add	r3, r2
 8009116:	009b      	lsls	r3, r3, #2
 8009118:	4a13      	ldr	r2, [pc, #76]	; (8009168 <vTaskSwitchContext+0xb4>)
 800911a:	4413      	add	r3, r2
 800911c:	60bb      	str	r3, [r7, #8]
 800911e:	68bb      	ldr	r3, [r7, #8]
 8009120:	685b      	ldr	r3, [r3, #4]
 8009122:	685a      	ldr	r2, [r3, #4]
 8009124:	68bb      	ldr	r3, [r7, #8]
 8009126:	605a      	str	r2, [r3, #4]
 8009128:	68bb      	ldr	r3, [r7, #8]
 800912a:	685a      	ldr	r2, [r3, #4]
 800912c:	68bb      	ldr	r3, [r7, #8]
 800912e:	3308      	adds	r3, #8
 8009130:	429a      	cmp	r2, r3
 8009132:	d104      	bne.n	800913e <vTaskSwitchContext+0x8a>
 8009134:	68bb      	ldr	r3, [r7, #8]
 8009136:	685b      	ldr	r3, [r3, #4]
 8009138:	685a      	ldr	r2, [r3, #4]
 800913a:	68bb      	ldr	r3, [r7, #8]
 800913c:	605a      	str	r2, [r3, #4]
 800913e:	68bb      	ldr	r3, [r7, #8]
 8009140:	685b      	ldr	r3, [r3, #4]
 8009142:	68db      	ldr	r3, [r3, #12]
 8009144:	4a09      	ldr	r2, [pc, #36]	; (800916c <vTaskSwitchContext+0xb8>)
 8009146:	6013      	str	r3, [r2, #0]
 8009148:	4a06      	ldr	r2, [pc, #24]	; (8009164 <vTaskSwitchContext+0xb0>)
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	6013      	str	r3, [r2, #0]
}
 800914e:	bf00      	nop
 8009150:	3714      	adds	r7, #20
 8009152:	46bd      	mov	sp, r7
 8009154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009158:	4770      	bx	lr
 800915a:	bf00      	nop
 800915c:	20000e24 	.word	0x20000e24
 8009160:	20000e10 	.word	0x20000e10
 8009164:	20000e04 	.word	0x20000e04
 8009168:	2000092c 	.word	0x2000092c
 800916c:	20000928 	.word	0x20000928

08009170 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009170:	b580      	push	{r7, lr}
 8009172:	b084      	sub	sp, #16
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
 8009178:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d10a      	bne.n	8009196 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009184:	f383 8811 	msr	BASEPRI, r3
 8009188:	f3bf 8f6f 	isb	sy
 800918c:	f3bf 8f4f 	dsb	sy
 8009190:	60fb      	str	r3, [r7, #12]
}
 8009192:	bf00      	nop
 8009194:	e7fe      	b.n	8009194 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009196:	4b07      	ldr	r3, [pc, #28]	; (80091b4 <vTaskPlaceOnEventList+0x44>)
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	3318      	adds	r3, #24
 800919c:	4619      	mov	r1, r3
 800919e:	6878      	ldr	r0, [r7, #4]
 80091a0:	f7fe fe87 	bl	8007eb2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80091a4:	2101      	movs	r1, #1
 80091a6:	6838      	ldr	r0, [r7, #0]
 80091a8:	f000 fa7c 	bl	80096a4 <prvAddCurrentTaskToDelayedList>
}
 80091ac:	bf00      	nop
 80091ae:	3710      	adds	r7, #16
 80091b0:	46bd      	mov	sp, r7
 80091b2:	bd80      	pop	{r7, pc}
 80091b4:	20000928 	.word	0x20000928

080091b8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b086      	sub	sp, #24
 80091bc:	af00      	add	r7, sp, #0
 80091be:	60f8      	str	r0, [r7, #12]
 80091c0:	60b9      	str	r1, [r7, #8]
 80091c2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d10a      	bne.n	80091e0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80091ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091ce:	f383 8811 	msr	BASEPRI, r3
 80091d2:	f3bf 8f6f 	isb	sy
 80091d6:	f3bf 8f4f 	dsb	sy
 80091da:	617b      	str	r3, [r7, #20]
}
 80091dc:	bf00      	nop
 80091de:	e7fe      	b.n	80091de <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80091e0:	4b0a      	ldr	r3, [pc, #40]	; (800920c <vTaskPlaceOnEventListRestricted+0x54>)
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	3318      	adds	r3, #24
 80091e6:	4619      	mov	r1, r3
 80091e8:	68f8      	ldr	r0, [r7, #12]
 80091ea:	f7fe fe3e 	bl	8007e6a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d002      	beq.n	80091fa <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80091f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80091f8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80091fa:	6879      	ldr	r1, [r7, #4]
 80091fc:	68b8      	ldr	r0, [r7, #8]
 80091fe:	f000 fa51 	bl	80096a4 <prvAddCurrentTaskToDelayedList>
	}
 8009202:	bf00      	nop
 8009204:	3718      	adds	r7, #24
 8009206:	46bd      	mov	sp, r7
 8009208:	bd80      	pop	{r7, pc}
 800920a:	bf00      	nop
 800920c:	20000928 	.word	0x20000928

08009210 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009210:	b580      	push	{r7, lr}
 8009212:	b086      	sub	sp, #24
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	68db      	ldr	r3, [r3, #12]
 800921c:	68db      	ldr	r3, [r3, #12]
 800921e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009220:	693b      	ldr	r3, [r7, #16]
 8009222:	2b00      	cmp	r3, #0
 8009224:	d10a      	bne.n	800923c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8009226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800922a:	f383 8811 	msr	BASEPRI, r3
 800922e:	f3bf 8f6f 	isb	sy
 8009232:	f3bf 8f4f 	dsb	sy
 8009236:	60fb      	str	r3, [r7, #12]
}
 8009238:	bf00      	nop
 800923a:	e7fe      	b.n	800923a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800923c:	693b      	ldr	r3, [r7, #16]
 800923e:	3318      	adds	r3, #24
 8009240:	4618      	mov	r0, r3
 8009242:	f7fe fe6f 	bl	8007f24 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009246:	4b1e      	ldr	r3, [pc, #120]	; (80092c0 <xTaskRemoveFromEventList+0xb0>)
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	2b00      	cmp	r3, #0
 800924c:	d11d      	bne.n	800928a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800924e:	693b      	ldr	r3, [r7, #16]
 8009250:	3304      	adds	r3, #4
 8009252:	4618      	mov	r0, r3
 8009254:	f7fe fe66 	bl	8007f24 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009258:	693b      	ldr	r3, [r7, #16]
 800925a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800925c:	4b19      	ldr	r3, [pc, #100]	; (80092c4 <xTaskRemoveFromEventList+0xb4>)
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	429a      	cmp	r2, r3
 8009262:	d903      	bls.n	800926c <xTaskRemoveFromEventList+0x5c>
 8009264:	693b      	ldr	r3, [r7, #16]
 8009266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009268:	4a16      	ldr	r2, [pc, #88]	; (80092c4 <xTaskRemoveFromEventList+0xb4>)
 800926a:	6013      	str	r3, [r2, #0]
 800926c:	693b      	ldr	r3, [r7, #16]
 800926e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009270:	4613      	mov	r3, r2
 8009272:	009b      	lsls	r3, r3, #2
 8009274:	4413      	add	r3, r2
 8009276:	009b      	lsls	r3, r3, #2
 8009278:	4a13      	ldr	r2, [pc, #76]	; (80092c8 <xTaskRemoveFromEventList+0xb8>)
 800927a:	441a      	add	r2, r3
 800927c:	693b      	ldr	r3, [r7, #16]
 800927e:	3304      	adds	r3, #4
 8009280:	4619      	mov	r1, r3
 8009282:	4610      	mov	r0, r2
 8009284:	f7fe fdf1 	bl	8007e6a <vListInsertEnd>
 8009288:	e005      	b.n	8009296 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800928a:	693b      	ldr	r3, [r7, #16]
 800928c:	3318      	adds	r3, #24
 800928e:	4619      	mov	r1, r3
 8009290:	480e      	ldr	r0, [pc, #56]	; (80092cc <xTaskRemoveFromEventList+0xbc>)
 8009292:	f7fe fdea 	bl	8007e6a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009296:	693b      	ldr	r3, [r7, #16]
 8009298:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800929a:	4b0d      	ldr	r3, [pc, #52]	; (80092d0 <xTaskRemoveFromEventList+0xc0>)
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092a0:	429a      	cmp	r2, r3
 80092a2:	d905      	bls.n	80092b0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80092a4:	2301      	movs	r3, #1
 80092a6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80092a8:	4b0a      	ldr	r3, [pc, #40]	; (80092d4 <xTaskRemoveFromEventList+0xc4>)
 80092aa:	2201      	movs	r2, #1
 80092ac:	601a      	str	r2, [r3, #0]
 80092ae:	e001      	b.n	80092b4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80092b0:	2300      	movs	r3, #0
 80092b2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80092b4:	697b      	ldr	r3, [r7, #20]
}
 80092b6:	4618      	mov	r0, r3
 80092b8:	3718      	adds	r7, #24
 80092ba:	46bd      	mov	sp, r7
 80092bc:	bd80      	pop	{r7, pc}
 80092be:	bf00      	nop
 80092c0:	20000e24 	.word	0x20000e24
 80092c4:	20000e04 	.word	0x20000e04
 80092c8:	2000092c 	.word	0x2000092c
 80092cc:	20000dbc 	.word	0x20000dbc
 80092d0:	20000928 	.word	0x20000928
 80092d4:	20000e10 	.word	0x20000e10

080092d8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80092d8:	b480      	push	{r7}
 80092da:	b083      	sub	sp, #12
 80092dc:	af00      	add	r7, sp, #0
 80092de:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80092e0:	4b06      	ldr	r3, [pc, #24]	; (80092fc <vTaskInternalSetTimeOutState+0x24>)
 80092e2:	681a      	ldr	r2, [r3, #0]
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80092e8:	4b05      	ldr	r3, [pc, #20]	; (8009300 <vTaskInternalSetTimeOutState+0x28>)
 80092ea:	681a      	ldr	r2, [r3, #0]
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	605a      	str	r2, [r3, #4]
}
 80092f0:	bf00      	nop
 80092f2:	370c      	adds	r7, #12
 80092f4:	46bd      	mov	sp, r7
 80092f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fa:	4770      	bx	lr
 80092fc:	20000e14 	.word	0x20000e14
 8009300:	20000e00 	.word	0x20000e00

08009304 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009304:	b580      	push	{r7, lr}
 8009306:	b088      	sub	sp, #32
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
 800930c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d10a      	bne.n	800932a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009318:	f383 8811 	msr	BASEPRI, r3
 800931c:	f3bf 8f6f 	isb	sy
 8009320:	f3bf 8f4f 	dsb	sy
 8009324:	613b      	str	r3, [r7, #16]
}
 8009326:	bf00      	nop
 8009328:	e7fe      	b.n	8009328 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800932a:	683b      	ldr	r3, [r7, #0]
 800932c:	2b00      	cmp	r3, #0
 800932e:	d10a      	bne.n	8009346 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009334:	f383 8811 	msr	BASEPRI, r3
 8009338:	f3bf 8f6f 	isb	sy
 800933c:	f3bf 8f4f 	dsb	sy
 8009340:	60fb      	str	r3, [r7, #12]
}
 8009342:	bf00      	nop
 8009344:	e7fe      	b.n	8009344 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8009346:	f000 fe7d 	bl	800a044 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800934a:	4b1d      	ldr	r3, [pc, #116]	; (80093c0 <xTaskCheckForTimeOut+0xbc>)
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	685b      	ldr	r3, [r3, #4]
 8009354:	69ba      	ldr	r2, [r7, #24]
 8009356:	1ad3      	subs	r3, r2, r3
 8009358:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800935a:	683b      	ldr	r3, [r7, #0]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009362:	d102      	bne.n	800936a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009364:	2300      	movs	r3, #0
 8009366:	61fb      	str	r3, [r7, #28]
 8009368:	e023      	b.n	80093b2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681a      	ldr	r2, [r3, #0]
 800936e:	4b15      	ldr	r3, [pc, #84]	; (80093c4 <xTaskCheckForTimeOut+0xc0>)
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	429a      	cmp	r2, r3
 8009374:	d007      	beq.n	8009386 <xTaskCheckForTimeOut+0x82>
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	685b      	ldr	r3, [r3, #4]
 800937a:	69ba      	ldr	r2, [r7, #24]
 800937c:	429a      	cmp	r2, r3
 800937e:	d302      	bcc.n	8009386 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009380:	2301      	movs	r3, #1
 8009382:	61fb      	str	r3, [r7, #28]
 8009384:	e015      	b.n	80093b2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009386:	683b      	ldr	r3, [r7, #0]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	697a      	ldr	r2, [r7, #20]
 800938c:	429a      	cmp	r2, r3
 800938e:	d20b      	bcs.n	80093a8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009390:	683b      	ldr	r3, [r7, #0]
 8009392:	681a      	ldr	r2, [r3, #0]
 8009394:	697b      	ldr	r3, [r7, #20]
 8009396:	1ad2      	subs	r2, r2, r3
 8009398:	683b      	ldr	r3, [r7, #0]
 800939a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800939c:	6878      	ldr	r0, [r7, #4]
 800939e:	f7ff ff9b 	bl	80092d8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80093a2:	2300      	movs	r3, #0
 80093a4:	61fb      	str	r3, [r7, #28]
 80093a6:	e004      	b.n	80093b2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80093a8:	683b      	ldr	r3, [r7, #0]
 80093aa:	2200      	movs	r2, #0
 80093ac:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80093ae:	2301      	movs	r3, #1
 80093b0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80093b2:	f000 fe77 	bl	800a0a4 <vPortExitCritical>

	return xReturn;
 80093b6:	69fb      	ldr	r3, [r7, #28]
}
 80093b8:	4618      	mov	r0, r3
 80093ba:	3720      	adds	r7, #32
 80093bc:	46bd      	mov	sp, r7
 80093be:	bd80      	pop	{r7, pc}
 80093c0:	20000e00 	.word	0x20000e00
 80093c4:	20000e14 	.word	0x20000e14

080093c8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80093c8:	b480      	push	{r7}
 80093ca:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80093cc:	4b03      	ldr	r3, [pc, #12]	; (80093dc <vTaskMissedYield+0x14>)
 80093ce:	2201      	movs	r2, #1
 80093d0:	601a      	str	r2, [r3, #0]
}
 80093d2:	bf00      	nop
 80093d4:	46bd      	mov	sp, r7
 80093d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093da:	4770      	bx	lr
 80093dc:	20000e10 	.word	0x20000e10

080093e0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80093e0:	b580      	push	{r7, lr}
 80093e2:	b082      	sub	sp, #8
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80093e8:	f000 f852 	bl	8009490 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80093ec:	4b06      	ldr	r3, [pc, #24]	; (8009408 <prvIdleTask+0x28>)
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	2b01      	cmp	r3, #1
 80093f2:	d9f9      	bls.n	80093e8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80093f4:	4b05      	ldr	r3, [pc, #20]	; (800940c <prvIdleTask+0x2c>)
 80093f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80093fa:	601a      	str	r2, [r3, #0]
 80093fc:	f3bf 8f4f 	dsb	sy
 8009400:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009404:	e7f0      	b.n	80093e8 <prvIdleTask+0x8>
 8009406:	bf00      	nop
 8009408:	2000092c 	.word	0x2000092c
 800940c:	e000ed04 	.word	0xe000ed04

08009410 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009410:	b580      	push	{r7, lr}
 8009412:	b082      	sub	sp, #8
 8009414:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009416:	2300      	movs	r3, #0
 8009418:	607b      	str	r3, [r7, #4]
 800941a:	e00c      	b.n	8009436 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800941c:	687a      	ldr	r2, [r7, #4]
 800941e:	4613      	mov	r3, r2
 8009420:	009b      	lsls	r3, r3, #2
 8009422:	4413      	add	r3, r2
 8009424:	009b      	lsls	r3, r3, #2
 8009426:	4a12      	ldr	r2, [pc, #72]	; (8009470 <prvInitialiseTaskLists+0x60>)
 8009428:	4413      	add	r3, r2
 800942a:	4618      	mov	r0, r3
 800942c:	f7fe fcf0 	bl	8007e10 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	3301      	adds	r3, #1
 8009434:	607b      	str	r3, [r7, #4]
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	2b37      	cmp	r3, #55	; 0x37
 800943a:	d9ef      	bls.n	800941c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800943c:	480d      	ldr	r0, [pc, #52]	; (8009474 <prvInitialiseTaskLists+0x64>)
 800943e:	f7fe fce7 	bl	8007e10 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009442:	480d      	ldr	r0, [pc, #52]	; (8009478 <prvInitialiseTaskLists+0x68>)
 8009444:	f7fe fce4 	bl	8007e10 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009448:	480c      	ldr	r0, [pc, #48]	; (800947c <prvInitialiseTaskLists+0x6c>)
 800944a:	f7fe fce1 	bl	8007e10 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800944e:	480c      	ldr	r0, [pc, #48]	; (8009480 <prvInitialiseTaskLists+0x70>)
 8009450:	f7fe fcde 	bl	8007e10 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009454:	480b      	ldr	r0, [pc, #44]	; (8009484 <prvInitialiseTaskLists+0x74>)
 8009456:	f7fe fcdb 	bl	8007e10 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800945a:	4b0b      	ldr	r3, [pc, #44]	; (8009488 <prvInitialiseTaskLists+0x78>)
 800945c:	4a05      	ldr	r2, [pc, #20]	; (8009474 <prvInitialiseTaskLists+0x64>)
 800945e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009460:	4b0a      	ldr	r3, [pc, #40]	; (800948c <prvInitialiseTaskLists+0x7c>)
 8009462:	4a05      	ldr	r2, [pc, #20]	; (8009478 <prvInitialiseTaskLists+0x68>)
 8009464:	601a      	str	r2, [r3, #0]
}
 8009466:	bf00      	nop
 8009468:	3708      	adds	r7, #8
 800946a:	46bd      	mov	sp, r7
 800946c:	bd80      	pop	{r7, pc}
 800946e:	bf00      	nop
 8009470:	2000092c 	.word	0x2000092c
 8009474:	20000d8c 	.word	0x20000d8c
 8009478:	20000da0 	.word	0x20000da0
 800947c:	20000dbc 	.word	0x20000dbc
 8009480:	20000dd0 	.word	0x20000dd0
 8009484:	20000de8 	.word	0x20000de8
 8009488:	20000db4 	.word	0x20000db4
 800948c:	20000db8 	.word	0x20000db8

08009490 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009490:	b580      	push	{r7, lr}
 8009492:	b082      	sub	sp, #8
 8009494:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009496:	e019      	b.n	80094cc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009498:	f000 fdd4 	bl	800a044 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800949c:	4b10      	ldr	r3, [pc, #64]	; (80094e0 <prvCheckTasksWaitingTermination+0x50>)
 800949e:	68db      	ldr	r3, [r3, #12]
 80094a0:	68db      	ldr	r3, [r3, #12]
 80094a2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	3304      	adds	r3, #4
 80094a8:	4618      	mov	r0, r3
 80094aa:	f7fe fd3b 	bl	8007f24 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80094ae:	4b0d      	ldr	r3, [pc, #52]	; (80094e4 <prvCheckTasksWaitingTermination+0x54>)
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	3b01      	subs	r3, #1
 80094b4:	4a0b      	ldr	r2, [pc, #44]	; (80094e4 <prvCheckTasksWaitingTermination+0x54>)
 80094b6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80094b8:	4b0b      	ldr	r3, [pc, #44]	; (80094e8 <prvCheckTasksWaitingTermination+0x58>)
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	3b01      	subs	r3, #1
 80094be:	4a0a      	ldr	r2, [pc, #40]	; (80094e8 <prvCheckTasksWaitingTermination+0x58>)
 80094c0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80094c2:	f000 fdef 	bl	800a0a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80094c6:	6878      	ldr	r0, [r7, #4]
 80094c8:	f000 f810 	bl	80094ec <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80094cc:	4b06      	ldr	r3, [pc, #24]	; (80094e8 <prvCheckTasksWaitingTermination+0x58>)
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d1e1      	bne.n	8009498 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80094d4:	bf00      	nop
 80094d6:	bf00      	nop
 80094d8:	3708      	adds	r7, #8
 80094da:	46bd      	mov	sp, r7
 80094dc:	bd80      	pop	{r7, pc}
 80094de:	bf00      	nop
 80094e0:	20000dd0 	.word	0x20000dd0
 80094e4:	20000dfc 	.word	0x20000dfc
 80094e8:	20000de4 	.word	0x20000de4

080094ec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80094ec:	b580      	push	{r7, lr}
 80094ee:	b084      	sub	sp, #16
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d108      	bne.n	8009510 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009502:	4618      	mov	r0, r3
 8009504:	f000 ff8c 	bl	800a420 <vPortFree>
				vPortFree( pxTCB );
 8009508:	6878      	ldr	r0, [r7, #4]
 800950a:	f000 ff89 	bl	800a420 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800950e:	e018      	b.n	8009542 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009516:	2b01      	cmp	r3, #1
 8009518:	d103      	bne.n	8009522 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800951a:	6878      	ldr	r0, [r7, #4]
 800951c:	f000 ff80 	bl	800a420 <vPortFree>
	}
 8009520:	e00f      	b.n	8009542 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009528:	2b02      	cmp	r3, #2
 800952a:	d00a      	beq.n	8009542 <prvDeleteTCB+0x56>
	__asm volatile
 800952c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009530:	f383 8811 	msr	BASEPRI, r3
 8009534:	f3bf 8f6f 	isb	sy
 8009538:	f3bf 8f4f 	dsb	sy
 800953c:	60fb      	str	r3, [r7, #12]
}
 800953e:	bf00      	nop
 8009540:	e7fe      	b.n	8009540 <prvDeleteTCB+0x54>
	}
 8009542:	bf00      	nop
 8009544:	3710      	adds	r7, #16
 8009546:	46bd      	mov	sp, r7
 8009548:	bd80      	pop	{r7, pc}
	...

0800954c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800954c:	b480      	push	{r7}
 800954e:	b083      	sub	sp, #12
 8009550:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009552:	4b0c      	ldr	r3, [pc, #48]	; (8009584 <prvResetNextTaskUnblockTime+0x38>)
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	2b00      	cmp	r3, #0
 800955a:	d104      	bne.n	8009566 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800955c:	4b0a      	ldr	r3, [pc, #40]	; (8009588 <prvResetNextTaskUnblockTime+0x3c>)
 800955e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009562:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009564:	e008      	b.n	8009578 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009566:	4b07      	ldr	r3, [pc, #28]	; (8009584 <prvResetNextTaskUnblockTime+0x38>)
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	68db      	ldr	r3, [r3, #12]
 800956c:	68db      	ldr	r3, [r3, #12]
 800956e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	685b      	ldr	r3, [r3, #4]
 8009574:	4a04      	ldr	r2, [pc, #16]	; (8009588 <prvResetNextTaskUnblockTime+0x3c>)
 8009576:	6013      	str	r3, [r2, #0]
}
 8009578:	bf00      	nop
 800957a:	370c      	adds	r7, #12
 800957c:	46bd      	mov	sp, r7
 800957e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009582:	4770      	bx	lr
 8009584:	20000db4 	.word	0x20000db4
 8009588:	20000e1c 	.word	0x20000e1c

0800958c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800958c:	b480      	push	{r7}
 800958e:	b083      	sub	sp, #12
 8009590:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009592:	4b0b      	ldr	r3, [pc, #44]	; (80095c0 <xTaskGetSchedulerState+0x34>)
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	2b00      	cmp	r3, #0
 8009598:	d102      	bne.n	80095a0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800959a:	2301      	movs	r3, #1
 800959c:	607b      	str	r3, [r7, #4]
 800959e:	e008      	b.n	80095b2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80095a0:	4b08      	ldr	r3, [pc, #32]	; (80095c4 <xTaskGetSchedulerState+0x38>)
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d102      	bne.n	80095ae <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80095a8:	2302      	movs	r3, #2
 80095aa:	607b      	str	r3, [r7, #4]
 80095ac:	e001      	b.n	80095b2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80095ae:	2300      	movs	r3, #0
 80095b0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80095b2:	687b      	ldr	r3, [r7, #4]
	}
 80095b4:	4618      	mov	r0, r3
 80095b6:	370c      	adds	r7, #12
 80095b8:	46bd      	mov	sp, r7
 80095ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095be:	4770      	bx	lr
 80095c0:	20000e08 	.word	0x20000e08
 80095c4:	20000e24 	.word	0x20000e24

080095c8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b086      	sub	sp, #24
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80095d4:	2300      	movs	r3, #0
 80095d6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d056      	beq.n	800968c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80095de:	4b2e      	ldr	r3, [pc, #184]	; (8009698 <xTaskPriorityDisinherit+0xd0>)
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	693a      	ldr	r2, [r7, #16]
 80095e4:	429a      	cmp	r2, r3
 80095e6:	d00a      	beq.n	80095fe <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80095e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095ec:	f383 8811 	msr	BASEPRI, r3
 80095f0:	f3bf 8f6f 	isb	sy
 80095f4:	f3bf 8f4f 	dsb	sy
 80095f8:	60fb      	str	r3, [r7, #12]
}
 80095fa:	bf00      	nop
 80095fc:	e7fe      	b.n	80095fc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80095fe:	693b      	ldr	r3, [r7, #16]
 8009600:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009602:	2b00      	cmp	r3, #0
 8009604:	d10a      	bne.n	800961c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800960a:	f383 8811 	msr	BASEPRI, r3
 800960e:	f3bf 8f6f 	isb	sy
 8009612:	f3bf 8f4f 	dsb	sy
 8009616:	60bb      	str	r3, [r7, #8]
}
 8009618:	bf00      	nop
 800961a:	e7fe      	b.n	800961a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800961c:	693b      	ldr	r3, [r7, #16]
 800961e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009620:	1e5a      	subs	r2, r3, #1
 8009622:	693b      	ldr	r3, [r7, #16]
 8009624:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009626:	693b      	ldr	r3, [r7, #16]
 8009628:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800962a:	693b      	ldr	r3, [r7, #16]
 800962c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800962e:	429a      	cmp	r2, r3
 8009630:	d02c      	beq.n	800968c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009632:	693b      	ldr	r3, [r7, #16]
 8009634:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009636:	2b00      	cmp	r3, #0
 8009638:	d128      	bne.n	800968c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800963a:	693b      	ldr	r3, [r7, #16]
 800963c:	3304      	adds	r3, #4
 800963e:	4618      	mov	r0, r3
 8009640:	f7fe fc70 	bl	8007f24 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009644:	693b      	ldr	r3, [r7, #16]
 8009646:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009648:	693b      	ldr	r3, [r7, #16]
 800964a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800964c:	693b      	ldr	r3, [r7, #16]
 800964e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009650:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009654:	693b      	ldr	r3, [r7, #16]
 8009656:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009658:	693b      	ldr	r3, [r7, #16]
 800965a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800965c:	4b0f      	ldr	r3, [pc, #60]	; (800969c <xTaskPriorityDisinherit+0xd4>)
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	429a      	cmp	r2, r3
 8009662:	d903      	bls.n	800966c <xTaskPriorityDisinherit+0xa4>
 8009664:	693b      	ldr	r3, [r7, #16]
 8009666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009668:	4a0c      	ldr	r2, [pc, #48]	; (800969c <xTaskPriorityDisinherit+0xd4>)
 800966a:	6013      	str	r3, [r2, #0]
 800966c:	693b      	ldr	r3, [r7, #16]
 800966e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009670:	4613      	mov	r3, r2
 8009672:	009b      	lsls	r3, r3, #2
 8009674:	4413      	add	r3, r2
 8009676:	009b      	lsls	r3, r3, #2
 8009678:	4a09      	ldr	r2, [pc, #36]	; (80096a0 <xTaskPriorityDisinherit+0xd8>)
 800967a:	441a      	add	r2, r3
 800967c:	693b      	ldr	r3, [r7, #16]
 800967e:	3304      	adds	r3, #4
 8009680:	4619      	mov	r1, r3
 8009682:	4610      	mov	r0, r2
 8009684:	f7fe fbf1 	bl	8007e6a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009688:	2301      	movs	r3, #1
 800968a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800968c:	697b      	ldr	r3, [r7, #20]
	}
 800968e:	4618      	mov	r0, r3
 8009690:	3718      	adds	r7, #24
 8009692:	46bd      	mov	sp, r7
 8009694:	bd80      	pop	{r7, pc}
 8009696:	bf00      	nop
 8009698:	20000928 	.word	0x20000928
 800969c:	20000e04 	.word	0x20000e04
 80096a0:	2000092c 	.word	0x2000092c

080096a4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80096a4:	b580      	push	{r7, lr}
 80096a6:	b084      	sub	sp, #16
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
 80096ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80096ae:	4b21      	ldr	r3, [pc, #132]	; (8009734 <prvAddCurrentTaskToDelayedList+0x90>)
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80096b4:	4b20      	ldr	r3, [pc, #128]	; (8009738 <prvAddCurrentTaskToDelayedList+0x94>)
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	3304      	adds	r3, #4
 80096ba:	4618      	mov	r0, r3
 80096bc:	f7fe fc32 	bl	8007f24 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80096c6:	d10a      	bne.n	80096de <prvAddCurrentTaskToDelayedList+0x3a>
 80096c8:	683b      	ldr	r3, [r7, #0]
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d007      	beq.n	80096de <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80096ce:	4b1a      	ldr	r3, [pc, #104]	; (8009738 <prvAddCurrentTaskToDelayedList+0x94>)
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	3304      	adds	r3, #4
 80096d4:	4619      	mov	r1, r3
 80096d6:	4819      	ldr	r0, [pc, #100]	; (800973c <prvAddCurrentTaskToDelayedList+0x98>)
 80096d8:	f7fe fbc7 	bl	8007e6a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80096dc:	e026      	b.n	800972c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80096de:	68fa      	ldr	r2, [r7, #12]
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	4413      	add	r3, r2
 80096e4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80096e6:	4b14      	ldr	r3, [pc, #80]	; (8009738 <prvAddCurrentTaskToDelayedList+0x94>)
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	68ba      	ldr	r2, [r7, #8]
 80096ec:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80096ee:	68ba      	ldr	r2, [r7, #8]
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	429a      	cmp	r2, r3
 80096f4:	d209      	bcs.n	800970a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80096f6:	4b12      	ldr	r3, [pc, #72]	; (8009740 <prvAddCurrentTaskToDelayedList+0x9c>)
 80096f8:	681a      	ldr	r2, [r3, #0]
 80096fa:	4b0f      	ldr	r3, [pc, #60]	; (8009738 <prvAddCurrentTaskToDelayedList+0x94>)
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	3304      	adds	r3, #4
 8009700:	4619      	mov	r1, r3
 8009702:	4610      	mov	r0, r2
 8009704:	f7fe fbd5 	bl	8007eb2 <vListInsert>
}
 8009708:	e010      	b.n	800972c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800970a:	4b0e      	ldr	r3, [pc, #56]	; (8009744 <prvAddCurrentTaskToDelayedList+0xa0>)
 800970c:	681a      	ldr	r2, [r3, #0]
 800970e:	4b0a      	ldr	r3, [pc, #40]	; (8009738 <prvAddCurrentTaskToDelayedList+0x94>)
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	3304      	adds	r3, #4
 8009714:	4619      	mov	r1, r3
 8009716:	4610      	mov	r0, r2
 8009718:	f7fe fbcb 	bl	8007eb2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800971c:	4b0a      	ldr	r3, [pc, #40]	; (8009748 <prvAddCurrentTaskToDelayedList+0xa4>)
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	68ba      	ldr	r2, [r7, #8]
 8009722:	429a      	cmp	r2, r3
 8009724:	d202      	bcs.n	800972c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009726:	4a08      	ldr	r2, [pc, #32]	; (8009748 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009728:	68bb      	ldr	r3, [r7, #8]
 800972a:	6013      	str	r3, [r2, #0]
}
 800972c:	bf00      	nop
 800972e:	3710      	adds	r7, #16
 8009730:	46bd      	mov	sp, r7
 8009732:	bd80      	pop	{r7, pc}
 8009734:	20000e00 	.word	0x20000e00
 8009738:	20000928 	.word	0x20000928
 800973c:	20000de8 	.word	0x20000de8
 8009740:	20000db8 	.word	0x20000db8
 8009744:	20000db4 	.word	0x20000db4
 8009748:	20000e1c 	.word	0x20000e1c

0800974c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800974c:	b580      	push	{r7, lr}
 800974e:	b08a      	sub	sp, #40	; 0x28
 8009750:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009752:	2300      	movs	r3, #0
 8009754:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009756:	f000 fb07 	bl	8009d68 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800975a:	4b1c      	ldr	r3, [pc, #112]	; (80097cc <xTimerCreateTimerTask+0x80>)
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	2b00      	cmp	r3, #0
 8009760:	d021      	beq.n	80097a6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009762:	2300      	movs	r3, #0
 8009764:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009766:	2300      	movs	r3, #0
 8009768:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800976a:	1d3a      	adds	r2, r7, #4
 800976c:	f107 0108 	add.w	r1, r7, #8
 8009770:	f107 030c 	add.w	r3, r7, #12
 8009774:	4618      	mov	r0, r3
 8009776:	f7fe fb31 	bl	8007ddc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800977a:	6879      	ldr	r1, [r7, #4]
 800977c:	68bb      	ldr	r3, [r7, #8]
 800977e:	68fa      	ldr	r2, [r7, #12]
 8009780:	9202      	str	r2, [sp, #8]
 8009782:	9301      	str	r3, [sp, #4]
 8009784:	2302      	movs	r3, #2
 8009786:	9300      	str	r3, [sp, #0]
 8009788:	2300      	movs	r3, #0
 800978a:	460a      	mov	r2, r1
 800978c:	4910      	ldr	r1, [pc, #64]	; (80097d0 <xTimerCreateTimerTask+0x84>)
 800978e:	4811      	ldr	r0, [pc, #68]	; (80097d4 <xTimerCreateTimerTask+0x88>)
 8009790:	f7ff f8de 	bl	8008950 <xTaskCreateStatic>
 8009794:	4603      	mov	r3, r0
 8009796:	4a10      	ldr	r2, [pc, #64]	; (80097d8 <xTimerCreateTimerTask+0x8c>)
 8009798:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800979a:	4b0f      	ldr	r3, [pc, #60]	; (80097d8 <xTimerCreateTimerTask+0x8c>)
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d001      	beq.n	80097a6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80097a2:	2301      	movs	r3, #1
 80097a4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80097a6:	697b      	ldr	r3, [r7, #20]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d10a      	bne.n	80097c2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80097ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097b0:	f383 8811 	msr	BASEPRI, r3
 80097b4:	f3bf 8f6f 	isb	sy
 80097b8:	f3bf 8f4f 	dsb	sy
 80097bc:	613b      	str	r3, [r7, #16]
}
 80097be:	bf00      	nop
 80097c0:	e7fe      	b.n	80097c0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80097c2:	697b      	ldr	r3, [r7, #20]
}
 80097c4:	4618      	mov	r0, r3
 80097c6:	3718      	adds	r7, #24
 80097c8:	46bd      	mov	sp, r7
 80097ca:	bd80      	pop	{r7, pc}
 80097cc:	20000e58 	.word	0x20000e58
 80097d0:	0800b220 	.word	0x0800b220
 80097d4:	08009911 	.word	0x08009911
 80097d8:	20000e5c 	.word	0x20000e5c

080097dc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80097dc:	b580      	push	{r7, lr}
 80097de:	b08a      	sub	sp, #40	; 0x28
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	60f8      	str	r0, [r7, #12]
 80097e4:	60b9      	str	r1, [r7, #8]
 80097e6:	607a      	str	r2, [r7, #4]
 80097e8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80097ea:	2300      	movs	r3, #0
 80097ec:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d10a      	bne.n	800980a <xTimerGenericCommand+0x2e>
	__asm volatile
 80097f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097f8:	f383 8811 	msr	BASEPRI, r3
 80097fc:	f3bf 8f6f 	isb	sy
 8009800:	f3bf 8f4f 	dsb	sy
 8009804:	623b      	str	r3, [r7, #32]
}
 8009806:	bf00      	nop
 8009808:	e7fe      	b.n	8009808 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800980a:	4b1a      	ldr	r3, [pc, #104]	; (8009874 <xTimerGenericCommand+0x98>)
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	2b00      	cmp	r3, #0
 8009810:	d02a      	beq.n	8009868 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009812:	68bb      	ldr	r3, [r7, #8]
 8009814:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800981e:	68bb      	ldr	r3, [r7, #8]
 8009820:	2b05      	cmp	r3, #5
 8009822:	dc18      	bgt.n	8009856 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009824:	f7ff feb2 	bl	800958c <xTaskGetSchedulerState>
 8009828:	4603      	mov	r3, r0
 800982a:	2b02      	cmp	r3, #2
 800982c:	d109      	bne.n	8009842 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800982e:	4b11      	ldr	r3, [pc, #68]	; (8009874 <xTimerGenericCommand+0x98>)
 8009830:	6818      	ldr	r0, [r3, #0]
 8009832:	f107 0110 	add.w	r1, r7, #16
 8009836:	2300      	movs	r3, #0
 8009838:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800983a:	f7fe fca1 	bl	8008180 <xQueueGenericSend>
 800983e:	6278      	str	r0, [r7, #36]	; 0x24
 8009840:	e012      	b.n	8009868 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009842:	4b0c      	ldr	r3, [pc, #48]	; (8009874 <xTimerGenericCommand+0x98>)
 8009844:	6818      	ldr	r0, [r3, #0]
 8009846:	f107 0110 	add.w	r1, r7, #16
 800984a:	2300      	movs	r3, #0
 800984c:	2200      	movs	r2, #0
 800984e:	f7fe fc97 	bl	8008180 <xQueueGenericSend>
 8009852:	6278      	str	r0, [r7, #36]	; 0x24
 8009854:	e008      	b.n	8009868 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009856:	4b07      	ldr	r3, [pc, #28]	; (8009874 <xTimerGenericCommand+0x98>)
 8009858:	6818      	ldr	r0, [r3, #0]
 800985a:	f107 0110 	add.w	r1, r7, #16
 800985e:	2300      	movs	r3, #0
 8009860:	683a      	ldr	r2, [r7, #0]
 8009862:	f7fe fd8b 	bl	800837c <xQueueGenericSendFromISR>
 8009866:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800986a:	4618      	mov	r0, r3
 800986c:	3728      	adds	r7, #40	; 0x28
 800986e:	46bd      	mov	sp, r7
 8009870:	bd80      	pop	{r7, pc}
 8009872:	bf00      	nop
 8009874:	20000e58 	.word	0x20000e58

08009878 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009878:	b580      	push	{r7, lr}
 800987a:	b088      	sub	sp, #32
 800987c:	af02      	add	r7, sp, #8
 800987e:	6078      	str	r0, [r7, #4]
 8009880:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009882:	4b22      	ldr	r3, [pc, #136]	; (800990c <prvProcessExpiredTimer+0x94>)
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	68db      	ldr	r3, [r3, #12]
 8009888:	68db      	ldr	r3, [r3, #12]
 800988a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800988c:	697b      	ldr	r3, [r7, #20]
 800988e:	3304      	adds	r3, #4
 8009890:	4618      	mov	r0, r3
 8009892:	f7fe fb47 	bl	8007f24 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009896:	697b      	ldr	r3, [r7, #20]
 8009898:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800989c:	f003 0304 	and.w	r3, r3, #4
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d022      	beq.n	80098ea <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80098a4:	697b      	ldr	r3, [r7, #20]
 80098a6:	699a      	ldr	r2, [r3, #24]
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	18d1      	adds	r1, r2, r3
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	683a      	ldr	r2, [r7, #0]
 80098b0:	6978      	ldr	r0, [r7, #20]
 80098b2:	f000 f8d1 	bl	8009a58 <prvInsertTimerInActiveList>
 80098b6:	4603      	mov	r3, r0
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d01f      	beq.n	80098fc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80098bc:	2300      	movs	r3, #0
 80098be:	9300      	str	r3, [sp, #0]
 80098c0:	2300      	movs	r3, #0
 80098c2:	687a      	ldr	r2, [r7, #4]
 80098c4:	2100      	movs	r1, #0
 80098c6:	6978      	ldr	r0, [r7, #20]
 80098c8:	f7ff ff88 	bl	80097dc <xTimerGenericCommand>
 80098cc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80098ce:	693b      	ldr	r3, [r7, #16]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d113      	bne.n	80098fc <prvProcessExpiredTimer+0x84>
	__asm volatile
 80098d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098d8:	f383 8811 	msr	BASEPRI, r3
 80098dc:	f3bf 8f6f 	isb	sy
 80098e0:	f3bf 8f4f 	dsb	sy
 80098e4:	60fb      	str	r3, [r7, #12]
}
 80098e6:	bf00      	nop
 80098e8:	e7fe      	b.n	80098e8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80098ea:	697b      	ldr	r3, [r7, #20]
 80098ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80098f0:	f023 0301 	bic.w	r3, r3, #1
 80098f4:	b2da      	uxtb	r2, r3
 80098f6:	697b      	ldr	r3, [r7, #20]
 80098f8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80098fc:	697b      	ldr	r3, [r7, #20]
 80098fe:	6a1b      	ldr	r3, [r3, #32]
 8009900:	6978      	ldr	r0, [r7, #20]
 8009902:	4798      	blx	r3
}
 8009904:	bf00      	nop
 8009906:	3718      	adds	r7, #24
 8009908:	46bd      	mov	sp, r7
 800990a:	bd80      	pop	{r7, pc}
 800990c:	20000e50 	.word	0x20000e50

08009910 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009910:	b580      	push	{r7, lr}
 8009912:	b084      	sub	sp, #16
 8009914:	af00      	add	r7, sp, #0
 8009916:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009918:	f107 0308 	add.w	r3, r7, #8
 800991c:	4618      	mov	r0, r3
 800991e:	f000 f857 	bl	80099d0 <prvGetNextExpireTime>
 8009922:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009924:	68bb      	ldr	r3, [r7, #8]
 8009926:	4619      	mov	r1, r3
 8009928:	68f8      	ldr	r0, [r7, #12]
 800992a:	f000 f803 	bl	8009934 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800992e:	f000 f8d5 	bl	8009adc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009932:	e7f1      	b.n	8009918 <prvTimerTask+0x8>

08009934 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009934:	b580      	push	{r7, lr}
 8009936:	b084      	sub	sp, #16
 8009938:	af00      	add	r7, sp, #0
 800993a:	6078      	str	r0, [r7, #4]
 800993c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800993e:	f7ff fa43 	bl	8008dc8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009942:	f107 0308 	add.w	r3, r7, #8
 8009946:	4618      	mov	r0, r3
 8009948:	f000 f866 	bl	8009a18 <prvSampleTimeNow>
 800994c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800994e:	68bb      	ldr	r3, [r7, #8]
 8009950:	2b00      	cmp	r3, #0
 8009952:	d130      	bne.n	80099b6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009954:	683b      	ldr	r3, [r7, #0]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d10a      	bne.n	8009970 <prvProcessTimerOrBlockTask+0x3c>
 800995a:	687a      	ldr	r2, [r7, #4]
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	429a      	cmp	r2, r3
 8009960:	d806      	bhi.n	8009970 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009962:	f7ff fa3f 	bl	8008de4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009966:	68f9      	ldr	r1, [r7, #12]
 8009968:	6878      	ldr	r0, [r7, #4]
 800996a:	f7ff ff85 	bl	8009878 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800996e:	e024      	b.n	80099ba <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009970:	683b      	ldr	r3, [r7, #0]
 8009972:	2b00      	cmp	r3, #0
 8009974:	d008      	beq.n	8009988 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009976:	4b13      	ldr	r3, [pc, #76]	; (80099c4 <prvProcessTimerOrBlockTask+0x90>)
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	2b00      	cmp	r3, #0
 800997e:	d101      	bne.n	8009984 <prvProcessTimerOrBlockTask+0x50>
 8009980:	2301      	movs	r3, #1
 8009982:	e000      	b.n	8009986 <prvProcessTimerOrBlockTask+0x52>
 8009984:	2300      	movs	r3, #0
 8009986:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009988:	4b0f      	ldr	r3, [pc, #60]	; (80099c8 <prvProcessTimerOrBlockTask+0x94>)
 800998a:	6818      	ldr	r0, [r3, #0]
 800998c:	687a      	ldr	r2, [r7, #4]
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	1ad3      	subs	r3, r2, r3
 8009992:	683a      	ldr	r2, [r7, #0]
 8009994:	4619      	mov	r1, r3
 8009996:	f7fe ffa7 	bl	80088e8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800999a:	f7ff fa23 	bl	8008de4 <xTaskResumeAll>
 800999e:	4603      	mov	r3, r0
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d10a      	bne.n	80099ba <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80099a4:	4b09      	ldr	r3, [pc, #36]	; (80099cc <prvProcessTimerOrBlockTask+0x98>)
 80099a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80099aa:	601a      	str	r2, [r3, #0]
 80099ac:	f3bf 8f4f 	dsb	sy
 80099b0:	f3bf 8f6f 	isb	sy
}
 80099b4:	e001      	b.n	80099ba <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80099b6:	f7ff fa15 	bl	8008de4 <xTaskResumeAll>
}
 80099ba:	bf00      	nop
 80099bc:	3710      	adds	r7, #16
 80099be:	46bd      	mov	sp, r7
 80099c0:	bd80      	pop	{r7, pc}
 80099c2:	bf00      	nop
 80099c4:	20000e54 	.word	0x20000e54
 80099c8:	20000e58 	.word	0x20000e58
 80099cc:	e000ed04 	.word	0xe000ed04

080099d0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80099d0:	b480      	push	{r7}
 80099d2:	b085      	sub	sp, #20
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80099d8:	4b0e      	ldr	r3, [pc, #56]	; (8009a14 <prvGetNextExpireTime+0x44>)
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d101      	bne.n	80099e6 <prvGetNextExpireTime+0x16>
 80099e2:	2201      	movs	r2, #1
 80099e4:	e000      	b.n	80099e8 <prvGetNextExpireTime+0x18>
 80099e6:	2200      	movs	r2, #0
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d105      	bne.n	8009a00 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80099f4:	4b07      	ldr	r3, [pc, #28]	; (8009a14 <prvGetNextExpireTime+0x44>)
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	68db      	ldr	r3, [r3, #12]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	60fb      	str	r3, [r7, #12]
 80099fe:	e001      	b.n	8009a04 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009a00:	2300      	movs	r3, #0
 8009a02:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009a04:	68fb      	ldr	r3, [r7, #12]
}
 8009a06:	4618      	mov	r0, r3
 8009a08:	3714      	adds	r7, #20
 8009a0a:	46bd      	mov	sp, r7
 8009a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a10:	4770      	bx	lr
 8009a12:	bf00      	nop
 8009a14:	20000e50 	.word	0x20000e50

08009a18 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009a18:	b580      	push	{r7, lr}
 8009a1a:	b084      	sub	sp, #16
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009a20:	f7ff fa7e 	bl	8008f20 <xTaskGetTickCount>
 8009a24:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009a26:	4b0b      	ldr	r3, [pc, #44]	; (8009a54 <prvSampleTimeNow+0x3c>)
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	68fa      	ldr	r2, [r7, #12]
 8009a2c:	429a      	cmp	r2, r3
 8009a2e:	d205      	bcs.n	8009a3c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009a30:	f000 f936 	bl	8009ca0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	2201      	movs	r2, #1
 8009a38:	601a      	str	r2, [r3, #0]
 8009a3a:	e002      	b.n	8009a42 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	2200      	movs	r2, #0
 8009a40:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009a42:	4a04      	ldr	r2, [pc, #16]	; (8009a54 <prvSampleTimeNow+0x3c>)
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009a48:	68fb      	ldr	r3, [r7, #12]
}
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	3710      	adds	r7, #16
 8009a4e:	46bd      	mov	sp, r7
 8009a50:	bd80      	pop	{r7, pc}
 8009a52:	bf00      	nop
 8009a54:	20000e60 	.word	0x20000e60

08009a58 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009a58:	b580      	push	{r7, lr}
 8009a5a:	b086      	sub	sp, #24
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	60f8      	str	r0, [r7, #12]
 8009a60:	60b9      	str	r1, [r7, #8]
 8009a62:	607a      	str	r2, [r7, #4]
 8009a64:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009a66:	2300      	movs	r3, #0
 8009a68:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	68ba      	ldr	r2, [r7, #8]
 8009a6e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	68fa      	ldr	r2, [r7, #12]
 8009a74:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009a76:	68ba      	ldr	r2, [r7, #8]
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	429a      	cmp	r2, r3
 8009a7c:	d812      	bhi.n	8009aa4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009a7e:	687a      	ldr	r2, [r7, #4]
 8009a80:	683b      	ldr	r3, [r7, #0]
 8009a82:	1ad2      	subs	r2, r2, r3
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	699b      	ldr	r3, [r3, #24]
 8009a88:	429a      	cmp	r2, r3
 8009a8a:	d302      	bcc.n	8009a92 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009a8c:	2301      	movs	r3, #1
 8009a8e:	617b      	str	r3, [r7, #20]
 8009a90:	e01b      	b.n	8009aca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009a92:	4b10      	ldr	r3, [pc, #64]	; (8009ad4 <prvInsertTimerInActiveList+0x7c>)
 8009a94:	681a      	ldr	r2, [r3, #0]
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	3304      	adds	r3, #4
 8009a9a:	4619      	mov	r1, r3
 8009a9c:	4610      	mov	r0, r2
 8009a9e:	f7fe fa08 	bl	8007eb2 <vListInsert>
 8009aa2:	e012      	b.n	8009aca <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009aa4:	687a      	ldr	r2, [r7, #4]
 8009aa6:	683b      	ldr	r3, [r7, #0]
 8009aa8:	429a      	cmp	r2, r3
 8009aaa:	d206      	bcs.n	8009aba <prvInsertTimerInActiveList+0x62>
 8009aac:	68ba      	ldr	r2, [r7, #8]
 8009aae:	683b      	ldr	r3, [r7, #0]
 8009ab0:	429a      	cmp	r2, r3
 8009ab2:	d302      	bcc.n	8009aba <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009ab4:	2301      	movs	r3, #1
 8009ab6:	617b      	str	r3, [r7, #20]
 8009ab8:	e007      	b.n	8009aca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009aba:	4b07      	ldr	r3, [pc, #28]	; (8009ad8 <prvInsertTimerInActiveList+0x80>)
 8009abc:	681a      	ldr	r2, [r3, #0]
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	3304      	adds	r3, #4
 8009ac2:	4619      	mov	r1, r3
 8009ac4:	4610      	mov	r0, r2
 8009ac6:	f7fe f9f4 	bl	8007eb2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009aca:	697b      	ldr	r3, [r7, #20]
}
 8009acc:	4618      	mov	r0, r3
 8009ace:	3718      	adds	r7, #24
 8009ad0:	46bd      	mov	sp, r7
 8009ad2:	bd80      	pop	{r7, pc}
 8009ad4:	20000e54 	.word	0x20000e54
 8009ad8:	20000e50 	.word	0x20000e50

08009adc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009adc:	b580      	push	{r7, lr}
 8009ade:	b08e      	sub	sp, #56	; 0x38
 8009ae0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009ae2:	e0ca      	b.n	8009c7a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	da18      	bge.n	8009b1c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009aea:	1d3b      	adds	r3, r7, #4
 8009aec:	3304      	adds	r3, #4
 8009aee:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d10a      	bne.n	8009b0c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8009af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009afa:	f383 8811 	msr	BASEPRI, r3
 8009afe:	f3bf 8f6f 	isb	sy
 8009b02:	f3bf 8f4f 	dsb	sy
 8009b06:	61fb      	str	r3, [r7, #28]
}
 8009b08:	bf00      	nop
 8009b0a:	e7fe      	b.n	8009b0a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009b12:	6850      	ldr	r0, [r2, #4]
 8009b14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009b16:	6892      	ldr	r2, [r2, #8]
 8009b18:	4611      	mov	r1, r2
 8009b1a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	f2c0 80ab 	blt.w	8009c7a <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b2a:	695b      	ldr	r3, [r3, #20]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d004      	beq.n	8009b3a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b32:	3304      	adds	r3, #4
 8009b34:	4618      	mov	r0, r3
 8009b36:	f7fe f9f5 	bl	8007f24 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009b3a:	463b      	mov	r3, r7
 8009b3c:	4618      	mov	r0, r3
 8009b3e:	f7ff ff6b 	bl	8009a18 <prvSampleTimeNow>
 8009b42:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	2b09      	cmp	r3, #9
 8009b48:	f200 8096 	bhi.w	8009c78 <prvProcessReceivedCommands+0x19c>
 8009b4c:	a201      	add	r2, pc, #4	; (adr r2, 8009b54 <prvProcessReceivedCommands+0x78>)
 8009b4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b52:	bf00      	nop
 8009b54:	08009b7d 	.word	0x08009b7d
 8009b58:	08009b7d 	.word	0x08009b7d
 8009b5c:	08009b7d 	.word	0x08009b7d
 8009b60:	08009bf1 	.word	0x08009bf1
 8009b64:	08009c05 	.word	0x08009c05
 8009b68:	08009c4f 	.word	0x08009c4f
 8009b6c:	08009b7d 	.word	0x08009b7d
 8009b70:	08009b7d 	.word	0x08009b7d
 8009b74:	08009bf1 	.word	0x08009bf1
 8009b78:	08009c05 	.word	0x08009c05
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b7e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009b82:	f043 0301 	orr.w	r3, r3, #1
 8009b86:	b2da      	uxtb	r2, r3
 8009b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b8a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009b8e:	68ba      	ldr	r2, [r7, #8]
 8009b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b92:	699b      	ldr	r3, [r3, #24]
 8009b94:	18d1      	adds	r1, r2, r3
 8009b96:	68bb      	ldr	r3, [r7, #8]
 8009b98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009b9c:	f7ff ff5c 	bl	8009a58 <prvInsertTimerInActiveList>
 8009ba0:	4603      	mov	r3, r0
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d069      	beq.n	8009c7a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ba8:	6a1b      	ldr	r3, [r3, #32]
 8009baa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009bac:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bb0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009bb4:	f003 0304 	and.w	r3, r3, #4
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d05e      	beq.n	8009c7a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009bbc:	68ba      	ldr	r2, [r7, #8]
 8009bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bc0:	699b      	ldr	r3, [r3, #24]
 8009bc2:	441a      	add	r2, r3
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	9300      	str	r3, [sp, #0]
 8009bc8:	2300      	movs	r3, #0
 8009bca:	2100      	movs	r1, #0
 8009bcc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009bce:	f7ff fe05 	bl	80097dc <xTimerGenericCommand>
 8009bd2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009bd4:	6a3b      	ldr	r3, [r7, #32]
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d14f      	bne.n	8009c7a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8009bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bde:	f383 8811 	msr	BASEPRI, r3
 8009be2:	f3bf 8f6f 	isb	sy
 8009be6:	f3bf 8f4f 	dsb	sy
 8009bea:	61bb      	str	r3, [r7, #24]
}
 8009bec:	bf00      	nop
 8009bee:	e7fe      	b.n	8009bee <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bf2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009bf6:	f023 0301 	bic.w	r3, r3, #1
 8009bfa:	b2da      	uxtb	r2, r3
 8009bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bfe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009c02:	e03a      	b.n	8009c7a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c06:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009c0a:	f043 0301 	orr.w	r3, r3, #1
 8009c0e:	b2da      	uxtb	r2, r3
 8009c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c12:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009c16:	68ba      	ldr	r2, [r7, #8]
 8009c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c1a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c1e:	699b      	ldr	r3, [r3, #24]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d10a      	bne.n	8009c3a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8009c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c28:	f383 8811 	msr	BASEPRI, r3
 8009c2c:	f3bf 8f6f 	isb	sy
 8009c30:	f3bf 8f4f 	dsb	sy
 8009c34:	617b      	str	r3, [r7, #20]
}
 8009c36:	bf00      	nop
 8009c38:	e7fe      	b.n	8009c38 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c3c:	699a      	ldr	r2, [r3, #24]
 8009c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c40:	18d1      	adds	r1, r2, r3
 8009c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009c48:	f7ff ff06 	bl	8009a58 <prvInsertTimerInActiveList>
					break;
 8009c4c:	e015      	b.n	8009c7a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c50:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009c54:	f003 0302 	and.w	r3, r3, #2
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d103      	bne.n	8009c64 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009c5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009c5e:	f000 fbdf 	bl	800a420 <vPortFree>
 8009c62:	e00a      	b.n	8009c7a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c66:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009c6a:	f023 0301 	bic.w	r3, r3, #1
 8009c6e:	b2da      	uxtb	r2, r3
 8009c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c72:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009c76:	e000      	b.n	8009c7a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8009c78:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009c7a:	4b08      	ldr	r3, [pc, #32]	; (8009c9c <prvProcessReceivedCommands+0x1c0>)
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	1d39      	adds	r1, r7, #4
 8009c80:	2200      	movs	r2, #0
 8009c82:	4618      	mov	r0, r3
 8009c84:	f7fe fc16 	bl	80084b4 <xQueueReceive>
 8009c88:	4603      	mov	r3, r0
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	f47f af2a 	bne.w	8009ae4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009c90:	bf00      	nop
 8009c92:	bf00      	nop
 8009c94:	3730      	adds	r7, #48	; 0x30
 8009c96:	46bd      	mov	sp, r7
 8009c98:	bd80      	pop	{r7, pc}
 8009c9a:	bf00      	nop
 8009c9c:	20000e58 	.word	0x20000e58

08009ca0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009ca0:	b580      	push	{r7, lr}
 8009ca2:	b088      	sub	sp, #32
 8009ca4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009ca6:	e048      	b.n	8009d3a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009ca8:	4b2d      	ldr	r3, [pc, #180]	; (8009d60 <prvSwitchTimerLists+0xc0>)
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	68db      	ldr	r3, [r3, #12]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009cb2:	4b2b      	ldr	r3, [pc, #172]	; (8009d60 <prvSwitchTimerLists+0xc0>)
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	68db      	ldr	r3, [r3, #12]
 8009cb8:	68db      	ldr	r3, [r3, #12]
 8009cba:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	3304      	adds	r3, #4
 8009cc0:	4618      	mov	r0, r3
 8009cc2:	f7fe f92f 	bl	8007f24 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	6a1b      	ldr	r3, [r3, #32]
 8009cca:	68f8      	ldr	r0, [r7, #12]
 8009ccc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009cd4:	f003 0304 	and.w	r3, r3, #4
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d02e      	beq.n	8009d3a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	699b      	ldr	r3, [r3, #24]
 8009ce0:	693a      	ldr	r2, [r7, #16]
 8009ce2:	4413      	add	r3, r2
 8009ce4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009ce6:	68ba      	ldr	r2, [r7, #8]
 8009ce8:	693b      	ldr	r3, [r7, #16]
 8009cea:	429a      	cmp	r2, r3
 8009cec:	d90e      	bls.n	8009d0c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	68ba      	ldr	r2, [r7, #8]
 8009cf2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	68fa      	ldr	r2, [r7, #12]
 8009cf8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009cfa:	4b19      	ldr	r3, [pc, #100]	; (8009d60 <prvSwitchTimerLists+0xc0>)
 8009cfc:	681a      	ldr	r2, [r3, #0]
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	3304      	adds	r3, #4
 8009d02:	4619      	mov	r1, r3
 8009d04:	4610      	mov	r0, r2
 8009d06:	f7fe f8d4 	bl	8007eb2 <vListInsert>
 8009d0a:	e016      	b.n	8009d3a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009d0c:	2300      	movs	r3, #0
 8009d0e:	9300      	str	r3, [sp, #0]
 8009d10:	2300      	movs	r3, #0
 8009d12:	693a      	ldr	r2, [r7, #16]
 8009d14:	2100      	movs	r1, #0
 8009d16:	68f8      	ldr	r0, [r7, #12]
 8009d18:	f7ff fd60 	bl	80097dc <xTimerGenericCommand>
 8009d1c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d10a      	bne.n	8009d3a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d28:	f383 8811 	msr	BASEPRI, r3
 8009d2c:	f3bf 8f6f 	isb	sy
 8009d30:	f3bf 8f4f 	dsb	sy
 8009d34:	603b      	str	r3, [r7, #0]
}
 8009d36:	bf00      	nop
 8009d38:	e7fe      	b.n	8009d38 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009d3a:	4b09      	ldr	r3, [pc, #36]	; (8009d60 <prvSwitchTimerLists+0xc0>)
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d1b1      	bne.n	8009ca8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009d44:	4b06      	ldr	r3, [pc, #24]	; (8009d60 <prvSwitchTimerLists+0xc0>)
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009d4a:	4b06      	ldr	r3, [pc, #24]	; (8009d64 <prvSwitchTimerLists+0xc4>)
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	4a04      	ldr	r2, [pc, #16]	; (8009d60 <prvSwitchTimerLists+0xc0>)
 8009d50:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009d52:	4a04      	ldr	r2, [pc, #16]	; (8009d64 <prvSwitchTimerLists+0xc4>)
 8009d54:	697b      	ldr	r3, [r7, #20]
 8009d56:	6013      	str	r3, [r2, #0]
}
 8009d58:	bf00      	nop
 8009d5a:	3718      	adds	r7, #24
 8009d5c:	46bd      	mov	sp, r7
 8009d5e:	bd80      	pop	{r7, pc}
 8009d60:	20000e50 	.word	0x20000e50
 8009d64:	20000e54 	.word	0x20000e54

08009d68 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009d68:	b580      	push	{r7, lr}
 8009d6a:	b082      	sub	sp, #8
 8009d6c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009d6e:	f000 f969 	bl	800a044 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009d72:	4b15      	ldr	r3, [pc, #84]	; (8009dc8 <prvCheckForValidListAndQueue+0x60>)
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d120      	bne.n	8009dbc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009d7a:	4814      	ldr	r0, [pc, #80]	; (8009dcc <prvCheckForValidListAndQueue+0x64>)
 8009d7c:	f7fe f848 	bl	8007e10 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009d80:	4813      	ldr	r0, [pc, #76]	; (8009dd0 <prvCheckForValidListAndQueue+0x68>)
 8009d82:	f7fe f845 	bl	8007e10 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009d86:	4b13      	ldr	r3, [pc, #76]	; (8009dd4 <prvCheckForValidListAndQueue+0x6c>)
 8009d88:	4a10      	ldr	r2, [pc, #64]	; (8009dcc <prvCheckForValidListAndQueue+0x64>)
 8009d8a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009d8c:	4b12      	ldr	r3, [pc, #72]	; (8009dd8 <prvCheckForValidListAndQueue+0x70>)
 8009d8e:	4a10      	ldr	r2, [pc, #64]	; (8009dd0 <prvCheckForValidListAndQueue+0x68>)
 8009d90:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009d92:	2300      	movs	r3, #0
 8009d94:	9300      	str	r3, [sp, #0]
 8009d96:	4b11      	ldr	r3, [pc, #68]	; (8009ddc <prvCheckForValidListAndQueue+0x74>)
 8009d98:	4a11      	ldr	r2, [pc, #68]	; (8009de0 <prvCheckForValidListAndQueue+0x78>)
 8009d9a:	2110      	movs	r1, #16
 8009d9c:	200a      	movs	r0, #10
 8009d9e:	f7fe f953 	bl	8008048 <xQueueGenericCreateStatic>
 8009da2:	4603      	mov	r3, r0
 8009da4:	4a08      	ldr	r2, [pc, #32]	; (8009dc8 <prvCheckForValidListAndQueue+0x60>)
 8009da6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009da8:	4b07      	ldr	r3, [pc, #28]	; (8009dc8 <prvCheckForValidListAndQueue+0x60>)
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d005      	beq.n	8009dbc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009db0:	4b05      	ldr	r3, [pc, #20]	; (8009dc8 <prvCheckForValidListAndQueue+0x60>)
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	490b      	ldr	r1, [pc, #44]	; (8009de4 <prvCheckForValidListAndQueue+0x7c>)
 8009db6:	4618      	mov	r0, r3
 8009db8:	f7fe fd6c 	bl	8008894 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009dbc:	f000 f972 	bl	800a0a4 <vPortExitCritical>
}
 8009dc0:	bf00      	nop
 8009dc2:	46bd      	mov	sp, r7
 8009dc4:	bd80      	pop	{r7, pc}
 8009dc6:	bf00      	nop
 8009dc8:	20000e58 	.word	0x20000e58
 8009dcc:	20000e28 	.word	0x20000e28
 8009dd0:	20000e3c 	.word	0x20000e3c
 8009dd4:	20000e50 	.word	0x20000e50
 8009dd8:	20000e54 	.word	0x20000e54
 8009ddc:	20000f04 	.word	0x20000f04
 8009de0:	20000e64 	.word	0x20000e64
 8009de4:	0800b228 	.word	0x0800b228

08009de8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009de8:	b480      	push	{r7}
 8009dea:	b085      	sub	sp, #20
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	60f8      	str	r0, [r7, #12]
 8009df0:	60b9      	str	r1, [r7, #8]
 8009df2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	3b04      	subs	r3, #4
 8009df8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009e00:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	3b04      	subs	r3, #4
 8009e06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009e08:	68bb      	ldr	r3, [r7, #8]
 8009e0a:	f023 0201 	bic.w	r2, r3, #1
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	3b04      	subs	r3, #4
 8009e16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009e18:	4a0c      	ldr	r2, [pc, #48]	; (8009e4c <pxPortInitialiseStack+0x64>)
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	3b14      	subs	r3, #20
 8009e22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009e24:	687a      	ldr	r2, [r7, #4]
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	3b04      	subs	r3, #4
 8009e2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	f06f 0202 	mvn.w	r2, #2
 8009e36:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	3b20      	subs	r3, #32
 8009e3c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009e3e:	68fb      	ldr	r3, [r7, #12]
}
 8009e40:	4618      	mov	r0, r3
 8009e42:	3714      	adds	r7, #20
 8009e44:	46bd      	mov	sp, r7
 8009e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4a:	4770      	bx	lr
 8009e4c:	08009e51 	.word	0x08009e51

08009e50 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009e50:	b480      	push	{r7}
 8009e52:	b085      	sub	sp, #20
 8009e54:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009e56:	2300      	movs	r3, #0
 8009e58:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009e5a:	4b12      	ldr	r3, [pc, #72]	; (8009ea4 <prvTaskExitError+0x54>)
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009e62:	d00a      	beq.n	8009e7a <prvTaskExitError+0x2a>
	__asm volatile
 8009e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e68:	f383 8811 	msr	BASEPRI, r3
 8009e6c:	f3bf 8f6f 	isb	sy
 8009e70:	f3bf 8f4f 	dsb	sy
 8009e74:	60fb      	str	r3, [r7, #12]
}
 8009e76:	bf00      	nop
 8009e78:	e7fe      	b.n	8009e78 <prvTaskExitError+0x28>
	__asm volatile
 8009e7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e7e:	f383 8811 	msr	BASEPRI, r3
 8009e82:	f3bf 8f6f 	isb	sy
 8009e86:	f3bf 8f4f 	dsb	sy
 8009e8a:	60bb      	str	r3, [r7, #8]
}
 8009e8c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009e8e:	bf00      	nop
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d0fc      	beq.n	8009e90 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009e96:	bf00      	nop
 8009e98:	bf00      	nop
 8009e9a:	3714      	adds	r7, #20
 8009e9c:	46bd      	mov	sp, r7
 8009e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea2:	4770      	bx	lr
 8009ea4:	200000cc 	.word	0x200000cc
	...

08009eb0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009eb0:	4b07      	ldr	r3, [pc, #28]	; (8009ed0 <pxCurrentTCBConst2>)
 8009eb2:	6819      	ldr	r1, [r3, #0]
 8009eb4:	6808      	ldr	r0, [r1, #0]
 8009eb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009eba:	f380 8809 	msr	PSP, r0
 8009ebe:	f3bf 8f6f 	isb	sy
 8009ec2:	f04f 0000 	mov.w	r0, #0
 8009ec6:	f380 8811 	msr	BASEPRI, r0
 8009eca:	4770      	bx	lr
 8009ecc:	f3af 8000 	nop.w

08009ed0 <pxCurrentTCBConst2>:
 8009ed0:	20000928 	.word	0x20000928
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009ed4:	bf00      	nop
 8009ed6:	bf00      	nop

08009ed8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009ed8:	4808      	ldr	r0, [pc, #32]	; (8009efc <prvPortStartFirstTask+0x24>)
 8009eda:	6800      	ldr	r0, [r0, #0]
 8009edc:	6800      	ldr	r0, [r0, #0]
 8009ede:	f380 8808 	msr	MSP, r0
 8009ee2:	f04f 0000 	mov.w	r0, #0
 8009ee6:	f380 8814 	msr	CONTROL, r0
 8009eea:	b662      	cpsie	i
 8009eec:	b661      	cpsie	f
 8009eee:	f3bf 8f4f 	dsb	sy
 8009ef2:	f3bf 8f6f 	isb	sy
 8009ef6:	df00      	svc	0
 8009ef8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009efa:	bf00      	nop
 8009efc:	e000ed08 	.word	0xe000ed08

08009f00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009f00:	b580      	push	{r7, lr}
 8009f02:	b086      	sub	sp, #24
 8009f04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009f06:	4b46      	ldr	r3, [pc, #280]	; (800a020 <xPortStartScheduler+0x120>)
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	4a46      	ldr	r2, [pc, #280]	; (800a024 <xPortStartScheduler+0x124>)
 8009f0c:	4293      	cmp	r3, r2
 8009f0e:	d10a      	bne.n	8009f26 <xPortStartScheduler+0x26>
	__asm volatile
 8009f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f14:	f383 8811 	msr	BASEPRI, r3
 8009f18:	f3bf 8f6f 	isb	sy
 8009f1c:	f3bf 8f4f 	dsb	sy
 8009f20:	613b      	str	r3, [r7, #16]
}
 8009f22:	bf00      	nop
 8009f24:	e7fe      	b.n	8009f24 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009f26:	4b3e      	ldr	r3, [pc, #248]	; (800a020 <xPortStartScheduler+0x120>)
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	4a3f      	ldr	r2, [pc, #252]	; (800a028 <xPortStartScheduler+0x128>)
 8009f2c:	4293      	cmp	r3, r2
 8009f2e:	d10a      	bne.n	8009f46 <xPortStartScheduler+0x46>
	__asm volatile
 8009f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f34:	f383 8811 	msr	BASEPRI, r3
 8009f38:	f3bf 8f6f 	isb	sy
 8009f3c:	f3bf 8f4f 	dsb	sy
 8009f40:	60fb      	str	r3, [r7, #12]
}
 8009f42:	bf00      	nop
 8009f44:	e7fe      	b.n	8009f44 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009f46:	4b39      	ldr	r3, [pc, #228]	; (800a02c <xPortStartScheduler+0x12c>)
 8009f48:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009f4a:	697b      	ldr	r3, [r7, #20]
 8009f4c:	781b      	ldrb	r3, [r3, #0]
 8009f4e:	b2db      	uxtb	r3, r3
 8009f50:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009f52:	697b      	ldr	r3, [r7, #20]
 8009f54:	22ff      	movs	r2, #255	; 0xff
 8009f56:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009f58:	697b      	ldr	r3, [r7, #20]
 8009f5a:	781b      	ldrb	r3, [r3, #0]
 8009f5c:	b2db      	uxtb	r3, r3
 8009f5e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009f60:	78fb      	ldrb	r3, [r7, #3]
 8009f62:	b2db      	uxtb	r3, r3
 8009f64:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009f68:	b2da      	uxtb	r2, r3
 8009f6a:	4b31      	ldr	r3, [pc, #196]	; (800a030 <xPortStartScheduler+0x130>)
 8009f6c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009f6e:	4b31      	ldr	r3, [pc, #196]	; (800a034 <xPortStartScheduler+0x134>)
 8009f70:	2207      	movs	r2, #7
 8009f72:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009f74:	e009      	b.n	8009f8a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009f76:	4b2f      	ldr	r3, [pc, #188]	; (800a034 <xPortStartScheduler+0x134>)
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	3b01      	subs	r3, #1
 8009f7c:	4a2d      	ldr	r2, [pc, #180]	; (800a034 <xPortStartScheduler+0x134>)
 8009f7e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009f80:	78fb      	ldrb	r3, [r7, #3]
 8009f82:	b2db      	uxtb	r3, r3
 8009f84:	005b      	lsls	r3, r3, #1
 8009f86:	b2db      	uxtb	r3, r3
 8009f88:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009f8a:	78fb      	ldrb	r3, [r7, #3]
 8009f8c:	b2db      	uxtb	r3, r3
 8009f8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f92:	2b80      	cmp	r3, #128	; 0x80
 8009f94:	d0ef      	beq.n	8009f76 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009f96:	4b27      	ldr	r3, [pc, #156]	; (800a034 <xPortStartScheduler+0x134>)
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	f1c3 0307 	rsb	r3, r3, #7
 8009f9e:	2b04      	cmp	r3, #4
 8009fa0:	d00a      	beq.n	8009fb8 <xPortStartScheduler+0xb8>
	__asm volatile
 8009fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fa6:	f383 8811 	msr	BASEPRI, r3
 8009faa:	f3bf 8f6f 	isb	sy
 8009fae:	f3bf 8f4f 	dsb	sy
 8009fb2:	60bb      	str	r3, [r7, #8]
}
 8009fb4:	bf00      	nop
 8009fb6:	e7fe      	b.n	8009fb6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009fb8:	4b1e      	ldr	r3, [pc, #120]	; (800a034 <xPortStartScheduler+0x134>)
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	021b      	lsls	r3, r3, #8
 8009fbe:	4a1d      	ldr	r2, [pc, #116]	; (800a034 <xPortStartScheduler+0x134>)
 8009fc0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009fc2:	4b1c      	ldr	r3, [pc, #112]	; (800a034 <xPortStartScheduler+0x134>)
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009fca:	4a1a      	ldr	r2, [pc, #104]	; (800a034 <xPortStartScheduler+0x134>)
 8009fcc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	b2da      	uxtb	r2, r3
 8009fd2:	697b      	ldr	r3, [r7, #20]
 8009fd4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009fd6:	4b18      	ldr	r3, [pc, #96]	; (800a038 <xPortStartScheduler+0x138>)
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	4a17      	ldr	r2, [pc, #92]	; (800a038 <xPortStartScheduler+0x138>)
 8009fdc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009fe0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009fe2:	4b15      	ldr	r3, [pc, #84]	; (800a038 <xPortStartScheduler+0x138>)
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	4a14      	ldr	r2, [pc, #80]	; (800a038 <xPortStartScheduler+0x138>)
 8009fe8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009fec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009fee:	f000 f8dd 	bl	800a1ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009ff2:	4b12      	ldr	r3, [pc, #72]	; (800a03c <xPortStartScheduler+0x13c>)
 8009ff4:	2200      	movs	r2, #0
 8009ff6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009ff8:	f000 f8fc 	bl	800a1f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009ffc:	4b10      	ldr	r3, [pc, #64]	; (800a040 <xPortStartScheduler+0x140>)
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	4a0f      	ldr	r2, [pc, #60]	; (800a040 <xPortStartScheduler+0x140>)
 800a002:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a006:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a008:	f7ff ff66 	bl	8009ed8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a00c:	f7ff f852 	bl	80090b4 <vTaskSwitchContext>
	prvTaskExitError();
 800a010:	f7ff ff1e 	bl	8009e50 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a014:	2300      	movs	r3, #0
}
 800a016:	4618      	mov	r0, r3
 800a018:	3718      	adds	r7, #24
 800a01a:	46bd      	mov	sp, r7
 800a01c:	bd80      	pop	{r7, pc}
 800a01e:	bf00      	nop
 800a020:	e000ed00 	.word	0xe000ed00
 800a024:	410fc271 	.word	0x410fc271
 800a028:	410fc270 	.word	0x410fc270
 800a02c:	e000e400 	.word	0xe000e400
 800a030:	20000f54 	.word	0x20000f54
 800a034:	20000f58 	.word	0x20000f58
 800a038:	e000ed20 	.word	0xe000ed20
 800a03c:	200000cc 	.word	0x200000cc
 800a040:	e000ef34 	.word	0xe000ef34

0800a044 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a044:	b480      	push	{r7}
 800a046:	b083      	sub	sp, #12
 800a048:	af00      	add	r7, sp, #0
	__asm volatile
 800a04a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a04e:	f383 8811 	msr	BASEPRI, r3
 800a052:	f3bf 8f6f 	isb	sy
 800a056:	f3bf 8f4f 	dsb	sy
 800a05a:	607b      	str	r3, [r7, #4]
}
 800a05c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a05e:	4b0f      	ldr	r3, [pc, #60]	; (800a09c <vPortEnterCritical+0x58>)
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	3301      	adds	r3, #1
 800a064:	4a0d      	ldr	r2, [pc, #52]	; (800a09c <vPortEnterCritical+0x58>)
 800a066:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a068:	4b0c      	ldr	r3, [pc, #48]	; (800a09c <vPortEnterCritical+0x58>)
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	2b01      	cmp	r3, #1
 800a06e:	d10f      	bne.n	800a090 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a070:	4b0b      	ldr	r3, [pc, #44]	; (800a0a0 <vPortEnterCritical+0x5c>)
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	b2db      	uxtb	r3, r3
 800a076:	2b00      	cmp	r3, #0
 800a078:	d00a      	beq.n	800a090 <vPortEnterCritical+0x4c>
	__asm volatile
 800a07a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a07e:	f383 8811 	msr	BASEPRI, r3
 800a082:	f3bf 8f6f 	isb	sy
 800a086:	f3bf 8f4f 	dsb	sy
 800a08a:	603b      	str	r3, [r7, #0]
}
 800a08c:	bf00      	nop
 800a08e:	e7fe      	b.n	800a08e <vPortEnterCritical+0x4a>
	}
}
 800a090:	bf00      	nop
 800a092:	370c      	adds	r7, #12
 800a094:	46bd      	mov	sp, r7
 800a096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a09a:	4770      	bx	lr
 800a09c:	200000cc 	.word	0x200000cc
 800a0a0:	e000ed04 	.word	0xe000ed04

0800a0a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a0a4:	b480      	push	{r7}
 800a0a6:	b083      	sub	sp, #12
 800a0a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a0aa:	4b12      	ldr	r3, [pc, #72]	; (800a0f4 <vPortExitCritical+0x50>)
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d10a      	bne.n	800a0c8 <vPortExitCritical+0x24>
	__asm volatile
 800a0b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0b6:	f383 8811 	msr	BASEPRI, r3
 800a0ba:	f3bf 8f6f 	isb	sy
 800a0be:	f3bf 8f4f 	dsb	sy
 800a0c2:	607b      	str	r3, [r7, #4]
}
 800a0c4:	bf00      	nop
 800a0c6:	e7fe      	b.n	800a0c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a0c8:	4b0a      	ldr	r3, [pc, #40]	; (800a0f4 <vPortExitCritical+0x50>)
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	3b01      	subs	r3, #1
 800a0ce:	4a09      	ldr	r2, [pc, #36]	; (800a0f4 <vPortExitCritical+0x50>)
 800a0d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a0d2:	4b08      	ldr	r3, [pc, #32]	; (800a0f4 <vPortExitCritical+0x50>)
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d105      	bne.n	800a0e6 <vPortExitCritical+0x42>
 800a0da:	2300      	movs	r3, #0
 800a0dc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a0de:	683b      	ldr	r3, [r7, #0]
 800a0e0:	f383 8811 	msr	BASEPRI, r3
}
 800a0e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a0e6:	bf00      	nop
 800a0e8:	370c      	adds	r7, #12
 800a0ea:	46bd      	mov	sp, r7
 800a0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f0:	4770      	bx	lr
 800a0f2:	bf00      	nop
 800a0f4:	200000cc 	.word	0x200000cc
	...

0800a100 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a100:	f3ef 8009 	mrs	r0, PSP
 800a104:	f3bf 8f6f 	isb	sy
 800a108:	4b15      	ldr	r3, [pc, #84]	; (800a160 <pxCurrentTCBConst>)
 800a10a:	681a      	ldr	r2, [r3, #0]
 800a10c:	f01e 0f10 	tst.w	lr, #16
 800a110:	bf08      	it	eq
 800a112:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a116:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a11a:	6010      	str	r0, [r2, #0]
 800a11c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a120:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a124:	f380 8811 	msr	BASEPRI, r0
 800a128:	f3bf 8f4f 	dsb	sy
 800a12c:	f3bf 8f6f 	isb	sy
 800a130:	f7fe ffc0 	bl	80090b4 <vTaskSwitchContext>
 800a134:	f04f 0000 	mov.w	r0, #0
 800a138:	f380 8811 	msr	BASEPRI, r0
 800a13c:	bc09      	pop	{r0, r3}
 800a13e:	6819      	ldr	r1, [r3, #0]
 800a140:	6808      	ldr	r0, [r1, #0]
 800a142:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a146:	f01e 0f10 	tst.w	lr, #16
 800a14a:	bf08      	it	eq
 800a14c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a150:	f380 8809 	msr	PSP, r0
 800a154:	f3bf 8f6f 	isb	sy
 800a158:	4770      	bx	lr
 800a15a:	bf00      	nop
 800a15c:	f3af 8000 	nop.w

0800a160 <pxCurrentTCBConst>:
 800a160:	20000928 	.word	0x20000928
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a164:	bf00      	nop
 800a166:	bf00      	nop

0800a168 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a168:	b580      	push	{r7, lr}
 800a16a:	b082      	sub	sp, #8
 800a16c:	af00      	add	r7, sp, #0
	__asm volatile
 800a16e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a172:	f383 8811 	msr	BASEPRI, r3
 800a176:	f3bf 8f6f 	isb	sy
 800a17a:	f3bf 8f4f 	dsb	sy
 800a17e:	607b      	str	r3, [r7, #4]
}
 800a180:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a182:	f7fe fedd 	bl	8008f40 <xTaskIncrementTick>
 800a186:	4603      	mov	r3, r0
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d003      	beq.n	800a194 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a18c:	4b06      	ldr	r3, [pc, #24]	; (800a1a8 <xPortSysTickHandler+0x40>)
 800a18e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a192:	601a      	str	r2, [r3, #0]
 800a194:	2300      	movs	r3, #0
 800a196:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a198:	683b      	ldr	r3, [r7, #0]
 800a19a:	f383 8811 	msr	BASEPRI, r3
}
 800a19e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a1a0:	bf00      	nop
 800a1a2:	3708      	adds	r7, #8
 800a1a4:	46bd      	mov	sp, r7
 800a1a6:	bd80      	pop	{r7, pc}
 800a1a8:	e000ed04 	.word	0xe000ed04

0800a1ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a1ac:	b480      	push	{r7}
 800a1ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a1b0:	4b0b      	ldr	r3, [pc, #44]	; (800a1e0 <vPortSetupTimerInterrupt+0x34>)
 800a1b2:	2200      	movs	r2, #0
 800a1b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a1b6:	4b0b      	ldr	r3, [pc, #44]	; (800a1e4 <vPortSetupTimerInterrupt+0x38>)
 800a1b8:	2200      	movs	r2, #0
 800a1ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a1bc:	4b0a      	ldr	r3, [pc, #40]	; (800a1e8 <vPortSetupTimerInterrupt+0x3c>)
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	4a0a      	ldr	r2, [pc, #40]	; (800a1ec <vPortSetupTimerInterrupt+0x40>)
 800a1c2:	fba2 2303 	umull	r2, r3, r2, r3
 800a1c6:	099b      	lsrs	r3, r3, #6
 800a1c8:	4a09      	ldr	r2, [pc, #36]	; (800a1f0 <vPortSetupTimerInterrupt+0x44>)
 800a1ca:	3b01      	subs	r3, #1
 800a1cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a1ce:	4b04      	ldr	r3, [pc, #16]	; (800a1e0 <vPortSetupTimerInterrupt+0x34>)
 800a1d0:	2207      	movs	r2, #7
 800a1d2:	601a      	str	r2, [r3, #0]
}
 800a1d4:	bf00      	nop
 800a1d6:	46bd      	mov	sp, r7
 800a1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1dc:	4770      	bx	lr
 800a1de:	bf00      	nop
 800a1e0:	e000e010 	.word	0xe000e010
 800a1e4:	e000e018 	.word	0xe000e018
 800a1e8:	20000000 	.word	0x20000000
 800a1ec:	10624dd3 	.word	0x10624dd3
 800a1f0:	e000e014 	.word	0xe000e014

0800a1f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a1f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a204 <vPortEnableVFP+0x10>
 800a1f8:	6801      	ldr	r1, [r0, #0]
 800a1fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a1fe:	6001      	str	r1, [r0, #0]
 800a200:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a202:	bf00      	nop
 800a204:	e000ed88 	.word	0xe000ed88

0800a208 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a208:	b480      	push	{r7}
 800a20a:	b085      	sub	sp, #20
 800a20c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a20e:	f3ef 8305 	mrs	r3, IPSR
 800a212:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	2b0f      	cmp	r3, #15
 800a218:	d914      	bls.n	800a244 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a21a:	4a17      	ldr	r2, [pc, #92]	; (800a278 <vPortValidateInterruptPriority+0x70>)
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	4413      	add	r3, r2
 800a220:	781b      	ldrb	r3, [r3, #0]
 800a222:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a224:	4b15      	ldr	r3, [pc, #84]	; (800a27c <vPortValidateInterruptPriority+0x74>)
 800a226:	781b      	ldrb	r3, [r3, #0]
 800a228:	7afa      	ldrb	r2, [r7, #11]
 800a22a:	429a      	cmp	r2, r3
 800a22c:	d20a      	bcs.n	800a244 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a22e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a232:	f383 8811 	msr	BASEPRI, r3
 800a236:	f3bf 8f6f 	isb	sy
 800a23a:	f3bf 8f4f 	dsb	sy
 800a23e:	607b      	str	r3, [r7, #4]
}
 800a240:	bf00      	nop
 800a242:	e7fe      	b.n	800a242 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a244:	4b0e      	ldr	r3, [pc, #56]	; (800a280 <vPortValidateInterruptPriority+0x78>)
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a24c:	4b0d      	ldr	r3, [pc, #52]	; (800a284 <vPortValidateInterruptPriority+0x7c>)
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	429a      	cmp	r2, r3
 800a252:	d90a      	bls.n	800a26a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a254:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a258:	f383 8811 	msr	BASEPRI, r3
 800a25c:	f3bf 8f6f 	isb	sy
 800a260:	f3bf 8f4f 	dsb	sy
 800a264:	603b      	str	r3, [r7, #0]
}
 800a266:	bf00      	nop
 800a268:	e7fe      	b.n	800a268 <vPortValidateInterruptPriority+0x60>
	}
 800a26a:	bf00      	nop
 800a26c:	3714      	adds	r7, #20
 800a26e:	46bd      	mov	sp, r7
 800a270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a274:	4770      	bx	lr
 800a276:	bf00      	nop
 800a278:	e000e3f0 	.word	0xe000e3f0
 800a27c:	20000f54 	.word	0x20000f54
 800a280:	e000ed0c 	.word	0xe000ed0c
 800a284:	20000f58 	.word	0x20000f58

0800a288 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a288:	b580      	push	{r7, lr}
 800a28a:	b08a      	sub	sp, #40	; 0x28
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a290:	2300      	movs	r3, #0
 800a292:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a294:	f7fe fd98 	bl	8008dc8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a298:	4b5b      	ldr	r3, [pc, #364]	; (800a408 <pvPortMalloc+0x180>)
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d101      	bne.n	800a2a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a2a0:	f000 f920 	bl	800a4e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a2a4:	4b59      	ldr	r3, [pc, #356]	; (800a40c <pvPortMalloc+0x184>)
 800a2a6:	681a      	ldr	r2, [r3, #0]
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	4013      	ands	r3, r2
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	f040 8093 	bne.w	800a3d8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d01d      	beq.n	800a2f4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a2b8:	2208      	movs	r2, #8
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	4413      	add	r3, r2
 800a2be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	f003 0307 	and.w	r3, r3, #7
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d014      	beq.n	800a2f4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	f023 0307 	bic.w	r3, r3, #7
 800a2d0:	3308      	adds	r3, #8
 800a2d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	f003 0307 	and.w	r3, r3, #7
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d00a      	beq.n	800a2f4 <pvPortMalloc+0x6c>
	__asm volatile
 800a2de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2e2:	f383 8811 	msr	BASEPRI, r3
 800a2e6:	f3bf 8f6f 	isb	sy
 800a2ea:	f3bf 8f4f 	dsb	sy
 800a2ee:	617b      	str	r3, [r7, #20]
}
 800a2f0:	bf00      	nop
 800a2f2:	e7fe      	b.n	800a2f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d06e      	beq.n	800a3d8 <pvPortMalloc+0x150>
 800a2fa:	4b45      	ldr	r3, [pc, #276]	; (800a410 <pvPortMalloc+0x188>)
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	687a      	ldr	r2, [r7, #4]
 800a300:	429a      	cmp	r2, r3
 800a302:	d869      	bhi.n	800a3d8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a304:	4b43      	ldr	r3, [pc, #268]	; (800a414 <pvPortMalloc+0x18c>)
 800a306:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a308:	4b42      	ldr	r3, [pc, #264]	; (800a414 <pvPortMalloc+0x18c>)
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a30e:	e004      	b.n	800a31a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a312:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a31a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a31c:	685b      	ldr	r3, [r3, #4]
 800a31e:	687a      	ldr	r2, [r7, #4]
 800a320:	429a      	cmp	r2, r3
 800a322:	d903      	bls.n	800a32c <pvPortMalloc+0xa4>
 800a324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d1f1      	bne.n	800a310 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a32c:	4b36      	ldr	r3, [pc, #216]	; (800a408 <pvPortMalloc+0x180>)
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a332:	429a      	cmp	r2, r3
 800a334:	d050      	beq.n	800a3d8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a336:	6a3b      	ldr	r3, [r7, #32]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	2208      	movs	r2, #8
 800a33c:	4413      	add	r3, r2
 800a33e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a342:	681a      	ldr	r2, [r3, #0]
 800a344:	6a3b      	ldr	r3, [r7, #32]
 800a346:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a34a:	685a      	ldr	r2, [r3, #4]
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	1ad2      	subs	r2, r2, r3
 800a350:	2308      	movs	r3, #8
 800a352:	005b      	lsls	r3, r3, #1
 800a354:	429a      	cmp	r2, r3
 800a356:	d91f      	bls.n	800a398 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a358:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	4413      	add	r3, r2
 800a35e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a360:	69bb      	ldr	r3, [r7, #24]
 800a362:	f003 0307 	and.w	r3, r3, #7
 800a366:	2b00      	cmp	r3, #0
 800a368:	d00a      	beq.n	800a380 <pvPortMalloc+0xf8>
	__asm volatile
 800a36a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a36e:	f383 8811 	msr	BASEPRI, r3
 800a372:	f3bf 8f6f 	isb	sy
 800a376:	f3bf 8f4f 	dsb	sy
 800a37a:	613b      	str	r3, [r7, #16]
}
 800a37c:	bf00      	nop
 800a37e:	e7fe      	b.n	800a37e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a382:	685a      	ldr	r2, [r3, #4]
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	1ad2      	subs	r2, r2, r3
 800a388:	69bb      	ldr	r3, [r7, #24]
 800a38a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a38c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a38e:	687a      	ldr	r2, [r7, #4]
 800a390:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a392:	69b8      	ldr	r0, [r7, #24]
 800a394:	f000 f908 	bl	800a5a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a398:	4b1d      	ldr	r3, [pc, #116]	; (800a410 <pvPortMalloc+0x188>)
 800a39a:	681a      	ldr	r2, [r3, #0]
 800a39c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a39e:	685b      	ldr	r3, [r3, #4]
 800a3a0:	1ad3      	subs	r3, r2, r3
 800a3a2:	4a1b      	ldr	r2, [pc, #108]	; (800a410 <pvPortMalloc+0x188>)
 800a3a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a3a6:	4b1a      	ldr	r3, [pc, #104]	; (800a410 <pvPortMalloc+0x188>)
 800a3a8:	681a      	ldr	r2, [r3, #0]
 800a3aa:	4b1b      	ldr	r3, [pc, #108]	; (800a418 <pvPortMalloc+0x190>)
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	429a      	cmp	r2, r3
 800a3b0:	d203      	bcs.n	800a3ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a3b2:	4b17      	ldr	r3, [pc, #92]	; (800a410 <pvPortMalloc+0x188>)
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	4a18      	ldr	r2, [pc, #96]	; (800a418 <pvPortMalloc+0x190>)
 800a3b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a3ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3bc:	685a      	ldr	r2, [r3, #4]
 800a3be:	4b13      	ldr	r3, [pc, #76]	; (800a40c <pvPortMalloc+0x184>)
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	431a      	orrs	r2, r3
 800a3c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a3c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3ca:	2200      	movs	r2, #0
 800a3cc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a3ce:	4b13      	ldr	r3, [pc, #76]	; (800a41c <pvPortMalloc+0x194>)
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	3301      	adds	r3, #1
 800a3d4:	4a11      	ldr	r2, [pc, #68]	; (800a41c <pvPortMalloc+0x194>)
 800a3d6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a3d8:	f7fe fd04 	bl	8008de4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a3dc:	69fb      	ldr	r3, [r7, #28]
 800a3de:	f003 0307 	and.w	r3, r3, #7
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d00a      	beq.n	800a3fc <pvPortMalloc+0x174>
	__asm volatile
 800a3e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3ea:	f383 8811 	msr	BASEPRI, r3
 800a3ee:	f3bf 8f6f 	isb	sy
 800a3f2:	f3bf 8f4f 	dsb	sy
 800a3f6:	60fb      	str	r3, [r7, #12]
}
 800a3f8:	bf00      	nop
 800a3fa:	e7fe      	b.n	800a3fa <pvPortMalloc+0x172>
	return pvReturn;
 800a3fc:	69fb      	ldr	r3, [r7, #28]
}
 800a3fe:	4618      	mov	r0, r3
 800a400:	3728      	adds	r7, #40	; 0x28
 800a402:	46bd      	mov	sp, r7
 800a404:	bd80      	pop	{r7, pc}
 800a406:	bf00      	nop
 800a408:	20001b1c 	.word	0x20001b1c
 800a40c:	20001b30 	.word	0x20001b30
 800a410:	20001b20 	.word	0x20001b20
 800a414:	20001b14 	.word	0x20001b14
 800a418:	20001b24 	.word	0x20001b24
 800a41c:	20001b28 	.word	0x20001b28

0800a420 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a420:	b580      	push	{r7, lr}
 800a422:	b086      	sub	sp, #24
 800a424:	af00      	add	r7, sp, #0
 800a426:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d04d      	beq.n	800a4ce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a432:	2308      	movs	r3, #8
 800a434:	425b      	negs	r3, r3
 800a436:	697a      	ldr	r2, [r7, #20]
 800a438:	4413      	add	r3, r2
 800a43a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a43c:	697b      	ldr	r3, [r7, #20]
 800a43e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a440:	693b      	ldr	r3, [r7, #16]
 800a442:	685a      	ldr	r2, [r3, #4]
 800a444:	4b24      	ldr	r3, [pc, #144]	; (800a4d8 <vPortFree+0xb8>)
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	4013      	ands	r3, r2
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d10a      	bne.n	800a464 <vPortFree+0x44>
	__asm volatile
 800a44e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a452:	f383 8811 	msr	BASEPRI, r3
 800a456:	f3bf 8f6f 	isb	sy
 800a45a:	f3bf 8f4f 	dsb	sy
 800a45e:	60fb      	str	r3, [r7, #12]
}
 800a460:	bf00      	nop
 800a462:	e7fe      	b.n	800a462 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a464:	693b      	ldr	r3, [r7, #16]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d00a      	beq.n	800a482 <vPortFree+0x62>
	__asm volatile
 800a46c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a470:	f383 8811 	msr	BASEPRI, r3
 800a474:	f3bf 8f6f 	isb	sy
 800a478:	f3bf 8f4f 	dsb	sy
 800a47c:	60bb      	str	r3, [r7, #8]
}
 800a47e:	bf00      	nop
 800a480:	e7fe      	b.n	800a480 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a482:	693b      	ldr	r3, [r7, #16]
 800a484:	685a      	ldr	r2, [r3, #4]
 800a486:	4b14      	ldr	r3, [pc, #80]	; (800a4d8 <vPortFree+0xb8>)
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	4013      	ands	r3, r2
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d01e      	beq.n	800a4ce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a490:	693b      	ldr	r3, [r7, #16]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	2b00      	cmp	r3, #0
 800a496:	d11a      	bne.n	800a4ce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a498:	693b      	ldr	r3, [r7, #16]
 800a49a:	685a      	ldr	r2, [r3, #4]
 800a49c:	4b0e      	ldr	r3, [pc, #56]	; (800a4d8 <vPortFree+0xb8>)
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	43db      	mvns	r3, r3
 800a4a2:	401a      	ands	r2, r3
 800a4a4:	693b      	ldr	r3, [r7, #16]
 800a4a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a4a8:	f7fe fc8e 	bl	8008dc8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a4ac:	693b      	ldr	r3, [r7, #16]
 800a4ae:	685a      	ldr	r2, [r3, #4]
 800a4b0:	4b0a      	ldr	r3, [pc, #40]	; (800a4dc <vPortFree+0xbc>)
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	4413      	add	r3, r2
 800a4b6:	4a09      	ldr	r2, [pc, #36]	; (800a4dc <vPortFree+0xbc>)
 800a4b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a4ba:	6938      	ldr	r0, [r7, #16]
 800a4bc:	f000 f874 	bl	800a5a8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a4c0:	4b07      	ldr	r3, [pc, #28]	; (800a4e0 <vPortFree+0xc0>)
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	3301      	adds	r3, #1
 800a4c6:	4a06      	ldr	r2, [pc, #24]	; (800a4e0 <vPortFree+0xc0>)
 800a4c8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a4ca:	f7fe fc8b 	bl	8008de4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a4ce:	bf00      	nop
 800a4d0:	3718      	adds	r7, #24
 800a4d2:	46bd      	mov	sp, r7
 800a4d4:	bd80      	pop	{r7, pc}
 800a4d6:	bf00      	nop
 800a4d8:	20001b30 	.word	0x20001b30
 800a4dc:	20001b20 	.word	0x20001b20
 800a4e0:	20001b2c 	.word	0x20001b2c

0800a4e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a4e4:	b480      	push	{r7}
 800a4e6:	b085      	sub	sp, #20
 800a4e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a4ea:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800a4ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a4f0:	4b27      	ldr	r3, [pc, #156]	; (800a590 <prvHeapInit+0xac>)
 800a4f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	f003 0307 	and.w	r3, r3, #7
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d00c      	beq.n	800a518 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	3307      	adds	r3, #7
 800a502:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	f023 0307 	bic.w	r3, r3, #7
 800a50a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a50c:	68ba      	ldr	r2, [r7, #8]
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	1ad3      	subs	r3, r2, r3
 800a512:	4a1f      	ldr	r2, [pc, #124]	; (800a590 <prvHeapInit+0xac>)
 800a514:	4413      	add	r3, r2
 800a516:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a51c:	4a1d      	ldr	r2, [pc, #116]	; (800a594 <prvHeapInit+0xb0>)
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a522:	4b1c      	ldr	r3, [pc, #112]	; (800a594 <prvHeapInit+0xb0>)
 800a524:	2200      	movs	r2, #0
 800a526:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	68ba      	ldr	r2, [r7, #8]
 800a52c:	4413      	add	r3, r2
 800a52e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a530:	2208      	movs	r2, #8
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	1a9b      	subs	r3, r3, r2
 800a536:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	f023 0307 	bic.w	r3, r3, #7
 800a53e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	4a15      	ldr	r2, [pc, #84]	; (800a598 <prvHeapInit+0xb4>)
 800a544:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a546:	4b14      	ldr	r3, [pc, #80]	; (800a598 <prvHeapInit+0xb4>)
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	2200      	movs	r2, #0
 800a54c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a54e:	4b12      	ldr	r3, [pc, #72]	; (800a598 <prvHeapInit+0xb4>)
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	2200      	movs	r2, #0
 800a554:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a55a:	683b      	ldr	r3, [r7, #0]
 800a55c:	68fa      	ldr	r2, [r7, #12]
 800a55e:	1ad2      	subs	r2, r2, r3
 800a560:	683b      	ldr	r3, [r7, #0]
 800a562:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a564:	4b0c      	ldr	r3, [pc, #48]	; (800a598 <prvHeapInit+0xb4>)
 800a566:	681a      	ldr	r2, [r3, #0]
 800a568:	683b      	ldr	r3, [r7, #0]
 800a56a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a56c:	683b      	ldr	r3, [r7, #0]
 800a56e:	685b      	ldr	r3, [r3, #4]
 800a570:	4a0a      	ldr	r2, [pc, #40]	; (800a59c <prvHeapInit+0xb8>)
 800a572:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a574:	683b      	ldr	r3, [r7, #0]
 800a576:	685b      	ldr	r3, [r3, #4]
 800a578:	4a09      	ldr	r2, [pc, #36]	; (800a5a0 <prvHeapInit+0xbc>)
 800a57a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a57c:	4b09      	ldr	r3, [pc, #36]	; (800a5a4 <prvHeapInit+0xc0>)
 800a57e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a582:	601a      	str	r2, [r3, #0]
}
 800a584:	bf00      	nop
 800a586:	3714      	adds	r7, #20
 800a588:	46bd      	mov	sp, r7
 800a58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58e:	4770      	bx	lr
 800a590:	20000f5c 	.word	0x20000f5c
 800a594:	20001b14 	.word	0x20001b14
 800a598:	20001b1c 	.word	0x20001b1c
 800a59c:	20001b24 	.word	0x20001b24
 800a5a0:	20001b20 	.word	0x20001b20
 800a5a4:	20001b30 	.word	0x20001b30

0800a5a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a5a8:	b480      	push	{r7}
 800a5aa:	b085      	sub	sp, #20
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a5b0:	4b28      	ldr	r3, [pc, #160]	; (800a654 <prvInsertBlockIntoFreeList+0xac>)
 800a5b2:	60fb      	str	r3, [r7, #12]
 800a5b4:	e002      	b.n	800a5bc <prvInsertBlockIntoFreeList+0x14>
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	60fb      	str	r3, [r7, #12]
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	687a      	ldr	r2, [r7, #4]
 800a5c2:	429a      	cmp	r2, r3
 800a5c4:	d8f7      	bhi.n	800a5b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	685b      	ldr	r3, [r3, #4]
 800a5ce:	68ba      	ldr	r2, [r7, #8]
 800a5d0:	4413      	add	r3, r2
 800a5d2:	687a      	ldr	r2, [r7, #4]
 800a5d4:	429a      	cmp	r2, r3
 800a5d6:	d108      	bne.n	800a5ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	685a      	ldr	r2, [r3, #4]
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	685b      	ldr	r3, [r3, #4]
 800a5e0:	441a      	add	r2, r3
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	685b      	ldr	r3, [r3, #4]
 800a5f2:	68ba      	ldr	r2, [r7, #8]
 800a5f4:	441a      	add	r2, r3
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	429a      	cmp	r2, r3
 800a5fc:	d118      	bne.n	800a630 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	681a      	ldr	r2, [r3, #0]
 800a602:	4b15      	ldr	r3, [pc, #84]	; (800a658 <prvInsertBlockIntoFreeList+0xb0>)
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	429a      	cmp	r2, r3
 800a608:	d00d      	beq.n	800a626 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	685a      	ldr	r2, [r3, #4]
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	685b      	ldr	r3, [r3, #4]
 800a614:	441a      	add	r2, r3
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	681a      	ldr	r2, [r3, #0]
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	601a      	str	r2, [r3, #0]
 800a624:	e008      	b.n	800a638 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a626:	4b0c      	ldr	r3, [pc, #48]	; (800a658 <prvInsertBlockIntoFreeList+0xb0>)
 800a628:	681a      	ldr	r2, [r3, #0]
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	601a      	str	r2, [r3, #0]
 800a62e:	e003      	b.n	800a638 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	681a      	ldr	r2, [r3, #0]
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a638:	68fa      	ldr	r2, [r7, #12]
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	429a      	cmp	r2, r3
 800a63e:	d002      	beq.n	800a646 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	687a      	ldr	r2, [r7, #4]
 800a644:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a646:	bf00      	nop
 800a648:	3714      	adds	r7, #20
 800a64a:	46bd      	mov	sp, r7
 800a64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a650:	4770      	bx	lr
 800a652:	bf00      	nop
 800a654:	20001b14 	.word	0x20001b14
 800a658:	20001b1c 	.word	0x20001b1c

0800a65c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a65c:	b580      	push	{r7, lr}
 800a65e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a660:	2200      	movs	r2, #0
 800a662:	490e      	ldr	r1, [pc, #56]	; (800a69c <MX_USB_DEVICE_Init+0x40>)
 800a664:	480e      	ldr	r0, [pc, #56]	; (800a6a0 <MX_USB_DEVICE_Init+0x44>)
 800a666:	f7fb ff6d 	bl	8006544 <USBD_Init>
 800a66a:	4603      	mov	r3, r0
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d001      	beq.n	800a674 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a670:	f7f6 f93e 	bl	80008f0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 800a674:	490b      	ldr	r1, [pc, #44]	; (800a6a4 <MX_USB_DEVICE_Init+0x48>)
 800a676:	480a      	ldr	r0, [pc, #40]	; (800a6a0 <MX_USB_DEVICE_Init+0x44>)
 800a678:	f7fb ff94 	bl	80065a4 <USBD_RegisterClass>
 800a67c:	4603      	mov	r3, r0
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d001      	beq.n	800a686 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a682:	f7f6 f935 	bl	80008f0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a686:	4806      	ldr	r0, [pc, #24]	; (800a6a0 <MX_USB_DEVICE_Init+0x44>)
 800a688:	f7fb ffc2 	bl	8006610 <USBD_Start>
 800a68c:	4603      	mov	r3, r0
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d001      	beq.n	800a696 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 800a692:	f7f6 f92d 	bl	80008f0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a696:	bf00      	nop
 800a698:	bd80      	pop	{r7, pc}
 800a69a:	bf00      	nop
 800a69c:	200000d0 	.word	0x200000d0
 800a6a0:	20001b34 	.word	0x20001b34
 800a6a4:	2000000c 	.word	0x2000000c

0800a6a8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a6a8:	b480      	push	{r7}
 800a6aa:	b083      	sub	sp, #12
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	4603      	mov	r3, r0
 800a6b0:	6039      	str	r1, [r7, #0]
 800a6b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a6b4:	683b      	ldr	r3, [r7, #0]
 800a6b6:	2212      	movs	r2, #18
 800a6b8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a6ba:	4b03      	ldr	r3, [pc, #12]	; (800a6c8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a6bc:	4618      	mov	r0, r3
 800a6be:	370c      	adds	r7, #12
 800a6c0:	46bd      	mov	sp, r7
 800a6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c6:	4770      	bx	lr
 800a6c8:	200000f0 	.word	0x200000f0

0800a6cc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a6cc:	b480      	push	{r7}
 800a6ce:	b083      	sub	sp, #12
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	4603      	mov	r3, r0
 800a6d4:	6039      	str	r1, [r7, #0]
 800a6d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a6d8:	683b      	ldr	r3, [r7, #0]
 800a6da:	2204      	movs	r2, #4
 800a6dc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a6de:	4b03      	ldr	r3, [pc, #12]	; (800a6ec <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a6e0:	4618      	mov	r0, r3
 800a6e2:	370c      	adds	r7, #12
 800a6e4:	46bd      	mov	sp, r7
 800a6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ea:	4770      	bx	lr
 800a6ec:	20000110 	.word	0x20000110

0800a6f0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a6f0:	b580      	push	{r7, lr}
 800a6f2:	b082      	sub	sp, #8
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	4603      	mov	r3, r0
 800a6f8:	6039      	str	r1, [r7, #0]
 800a6fa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a6fc:	79fb      	ldrb	r3, [r7, #7]
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d105      	bne.n	800a70e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a702:	683a      	ldr	r2, [r7, #0]
 800a704:	4907      	ldr	r1, [pc, #28]	; (800a724 <USBD_FS_ProductStrDescriptor+0x34>)
 800a706:	4808      	ldr	r0, [pc, #32]	; (800a728 <USBD_FS_ProductStrDescriptor+0x38>)
 800a708:	f7fd f95e 	bl	80079c8 <USBD_GetString>
 800a70c:	e004      	b.n	800a718 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a70e:	683a      	ldr	r2, [r7, #0]
 800a710:	4904      	ldr	r1, [pc, #16]	; (800a724 <USBD_FS_ProductStrDescriptor+0x34>)
 800a712:	4805      	ldr	r0, [pc, #20]	; (800a728 <USBD_FS_ProductStrDescriptor+0x38>)
 800a714:	f7fd f958 	bl	80079c8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a718:	4b02      	ldr	r3, [pc, #8]	; (800a724 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a71a:	4618      	mov	r0, r3
 800a71c:	3708      	adds	r7, #8
 800a71e:	46bd      	mov	sp, r7
 800a720:	bd80      	pop	{r7, pc}
 800a722:	bf00      	nop
 800a724:	20001e10 	.word	0x20001e10
 800a728:	0800b230 	.word	0x0800b230

0800a72c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a72c:	b580      	push	{r7, lr}
 800a72e:	b082      	sub	sp, #8
 800a730:	af00      	add	r7, sp, #0
 800a732:	4603      	mov	r3, r0
 800a734:	6039      	str	r1, [r7, #0]
 800a736:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a738:	683a      	ldr	r2, [r7, #0]
 800a73a:	4904      	ldr	r1, [pc, #16]	; (800a74c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a73c:	4804      	ldr	r0, [pc, #16]	; (800a750 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a73e:	f7fd f943 	bl	80079c8 <USBD_GetString>
  return USBD_StrDesc;
 800a742:	4b02      	ldr	r3, [pc, #8]	; (800a74c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a744:	4618      	mov	r0, r3
 800a746:	3708      	adds	r7, #8
 800a748:	46bd      	mov	sp, r7
 800a74a:	bd80      	pop	{r7, pc}
 800a74c:	20001e10 	.word	0x20001e10
 800a750:	0800b248 	.word	0x0800b248

0800a754 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a754:	b580      	push	{r7, lr}
 800a756:	b082      	sub	sp, #8
 800a758:	af00      	add	r7, sp, #0
 800a75a:	4603      	mov	r3, r0
 800a75c:	6039      	str	r1, [r7, #0]
 800a75e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a760:	683b      	ldr	r3, [r7, #0]
 800a762:	221a      	movs	r2, #26
 800a764:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a766:	f000 f855 	bl	800a814 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a76a:	4b02      	ldr	r3, [pc, #8]	; (800a774 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a76c:	4618      	mov	r0, r3
 800a76e:	3708      	adds	r7, #8
 800a770:	46bd      	mov	sp, r7
 800a772:	bd80      	pop	{r7, pc}
 800a774:	20000114 	.word	0x20000114

0800a778 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a778:	b580      	push	{r7, lr}
 800a77a:	b082      	sub	sp, #8
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	4603      	mov	r3, r0
 800a780:	6039      	str	r1, [r7, #0]
 800a782:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a784:	79fb      	ldrb	r3, [r7, #7]
 800a786:	2b00      	cmp	r3, #0
 800a788:	d105      	bne.n	800a796 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a78a:	683a      	ldr	r2, [r7, #0]
 800a78c:	4907      	ldr	r1, [pc, #28]	; (800a7ac <USBD_FS_ConfigStrDescriptor+0x34>)
 800a78e:	4808      	ldr	r0, [pc, #32]	; (800a7b0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a790:	f7fd f91a 	bl	80079c8 <USBD_GetString>
 800a794:	e004      	b.n	800a7a0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a796:	683a      	ldr	r2, [r7, #0]
 800a798:	4904      	ldr	r1, [pc, #16]	; (800a7ac <USBD_FS_ConfigStrDescriptor+0x34>)
 800a79a:	4805      	ldr	r0, [pc, #20]	; (800a7b0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a79c:	f7fd f914 	bl	80079c8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a7a0:	4b02      	ldr	r3, [pc, #8]	; (800a7ac <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	3708      	adds	r7, #8
 800a7a6:	46bd      	mov	sp, r7
 800a7a8:	bd80      	pop	{r7, pc}
 800a7aa:	bf00      	nop
 800a7ac:	20001e10 	.word	0x20001e10
 800a7b0:	0800b25c 	.word	0x0800b25c

0800a7b4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a7b4:	b580      	push	{r7, lr}
 800a7b6:	b082      	sub	sp, #8
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	4603      	mov	r3, r0
 800a7bc:	6039      	str	r1, [r7, #0]
 800a7be:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a7c0:	79fb      	ldrb	r3, [r7, #7]
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d105      	bne.n	800a7d2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a7c6:	683a      	ldr	r2, [r7, #0]
 800a7c8:	4907      	ldr	r1, [pc, #28]	; (800a7e8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a7ca:	4808      	ldr	r0, [pc, #32]	; (800a7ec <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a7cc:	f7fd f8fc 	bl	80079c8 <USBD_GetString>
 800a7d0:	e004      	b.n	800a7dc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a7d2:	683a      	ldr	r2, [r7, #0]
 800a7d4:	4904      	ldr	r1, [pc, #16]	; (800a7e8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a7d6:	4805      	ldr	r0, [pc, #20]	; (800a7ec <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a7d8:	f7fd f8f6 	bl	80079c8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a7dc:	4b02      	ldr	r3, [pc, #8]	; (800a7e8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a7de:	4618      	mov	r0, r3
 800a7e0:	3708      	adds	r7, #8
 800a7e2:	46bd      	mov	sp, r7
 800a7e4:	bd80      	pop	{r7, pc}
 800a7e6:	bf00      	nop
 800a7e8:	20001e10 	.word	0x20001e10
 800a7ec:	0800b268 	.word	0x0800b268

0800a7f0 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a7f0:	b480      	push	{r7}
 800a7f2:	b083      	sub	sp, #12
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	4603      	mov	r3, r0
 800a7f8:	6039      	str	r1, [r7, #0]
 800a7fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800a7fc:	683b      	ldr	r3, [r7, #0]
 800a7fe:	220c      	movs	r2, #12
 800a800:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800a802:	4b03      	ldr	r3, [pc, #12]	; (800a810 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800a804:	4618      	mov	r0, r3
 800a806:	370c      	adds	r7, #12
 800a808:	46bd      	mov	sp, r7
 800a80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a80e:	4770      	bx	lr
 800a810:	20000104 	.word	0x20000104

0800a814 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a814:	b580      	push	{r7, lr}
 800a816:	b084      	sub	sp, #16
 800a818:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a81a:	4b0f      	ldr	r3, [pc, #60]	; (800a858 <Get_SerialNum+0x44>)
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a820:	4b0e      	ldr	r3, [pc, #56]	; (800a85c <Get_SerialNum+0x48>)
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a826:	4b0e      	ldr	r3, [pc, #56]	; (800a860 <Get_SerialNum+0x4c>)
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a82c:	68fa      	ldr	r2, [r7, #12]
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	4413      	add	r3, r2
 800a832:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	2b00      	cmp	r3, #0
 800a838:	d009      	beq.n	800a84e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a83a:	2208      	movs	r2, #8
 800a83c:	4909      	ldr	r1, [pc, #36]	; (800a864 <Get_SerialNum+0x50>)
 800a83e:	68f8      	ldr	r0, [r7, #12]
 800a840:	f000 f814 	bl	800a86c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a844:	2204      	movs	r2, #4
 800a846:	4908      	ldr	r1, [pc, #32]	; (800a868 <Get_SerialNum+0x54>)
 800a848:	68b8      	ldr	r0, [r7, #8]
 800a84a:	f000 f80f 	bl	800a86c <IntToUnicode>
  }
}
 800a84e:	bf00      	nop
 800a850:	3710      	adds	r7, #16
 800a852:	46bd      	mov	sp, r7
 800a854:	bd80      	pop	{r7, pc}
 800a856:	bf00      	nop
 800a858:	1fff7590 	.word	0x1fff7590
 800a85c:	1fff7594 	.word	0x1fff7594
 800a860:	1fff7598 	.word	0x1fff7598
 800a864:	20000116 	.word	0x20000116
 800a868:	20000126 	.word	0x20000126

0800a86c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a86c:	b480      	push	{r7}
 800a86e:	b087      	sub	sp, #28
 800a870:	af00      	add	r7, sp, #0
 800a872:	60f8      	str	r0, [r7, #12]
 800a874:	60b9      	str	r1, [r7, #8]
 800a876:	4613      	mov	r3, r2
 800a878:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a87a:	2300      	movs	r3, #0
 800a87c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a87e:	2300      	movs	r3, #0
 800a880:	75fb      	strb	r3, [r7, #23]
 800a882:	e027      	b.n	800a8d4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	0f1b      	lsrs	r3, r3, #28
 800a888:	2b09      	cmp	r3, #9
 800a88a:	d80b      	bhi.n	800a8a4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	0f1b      	lsrs	r3, r3, #28
 800a890:	b2da      	uxtb	r2, r3
 800a892:	7dfb      	ldrb	r3, [r7, #23]
 800a894:	005b      	lsls	r3, r3, #1
 800a896:	4619      	mov	r1, r3
 800a898:	68bb      	ldr	r3, [r7, #8]
 800a89a:	440b      	add	r3, r1
 800a89c:	3230      	adds	r2, #48	; 0x30
 800a89e:	b2d2      	uxtb	r2, r2
 800a8a0:	701a      	strb	r2, [r3, #0]
 800a8a2:	e00a      	b.n	800a8ba <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	0f1b      	lsrs	r3, r3, #28
 800a8a8:	b2da      	uxtb	r2, r3
 800a8aa:	7dfb      	ldrb	r3, [r7, #23]
 800a8ac:	005b      	lsls	r3, r3, #1
 800a8ae:	4619      	mov	r1, r3
 800a8b0:	68bb      	ldr	r3, [r7, #8]
 800a8b2:	440b      	add	r3, r1
 800a8b4:	3237      	adds	r2, #55	; 0x37
 800a8b6:	b2d2      	uxtb	r2, r2
 800a8b8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	011b      	lsls	r3, r3, #4
 800a8be:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a8c0:	7dfb      	ldrb	r3, [r7, #23]
 800a8c2:	005b      	lsls	r3, r3, #1
 800a8c4:	3301      	adds	r3, #1
 800a8c6:	68ba      	ldr	r2, [r7, #8]
 800a8c8:	4413      	add	r3, r2
 800a8ca:	2200      	movs	r2, #0
 800a8cc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a8ce:	7dfb      	ldrb	r3, [r7, #23]
 800a8d0:	3301      	adds	r3, #1
 800a8d2:	75fb      	strb	r3, [r7, #23]
 800a8d4:	7dfa      	ldrb	r2, [r7, #23]
 800a8d6:	79fb      	ldrb	r3, [r7, #7]
 800a8d8:	429a      	cmp	r2, r3
 800a8da:	d3d3      	bcc.n	800a884 <IntToUnicode+0x18>
  }
}
 800a8dc:	bf00      	nop
 800a8de:	bf00      	nop
 800a8e0:	371c      	adds	r7, #28
 800a8e2:	46bd      	mov	sp, r7
 800a8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e8:	4770      	bx	lr
	...

0800a8ec <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a8ec:	b580      	push	{r7, lr}
 800a8ee:	b0ae      	sub	sp, #184	; 0xb8
 800a8f0:	af00      	add	r7, sp, #0
 800a8f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a8f4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800a8f8:	2200      	movs	r2, #0
 800a8fa:	601a      	str	r2, [r3, #0]
 800a8fc:	605a      	str	r2, [r3, #4]
 800a8fe:	609a      	str	r2, [r3, #8]
 800a900:	60da      	str	r2, [r3, #12]
 800a902:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800a904:	f107 0318 	add.w	r3, r7, #24
 800a908:	228c      	movs	r2, #140	; 0x8c
 800a90a:	2100      	movs	r1, #0
 800a90c:	4618      	mov	r0, r3
 800a90e:	f000 fc2f 	bl	800b170 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a91a:	f040 8085 	bne.w	800aa28 <HAL_PCD_MspInit+0x13c>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800a91e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a922:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800a924:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800a928:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800a92c:	2301      	movs	r3, #1
 800a92e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800a930:	2301      	movs	r3, #1
 800a932:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800a934:	2318      	movs	r3, #24
 800a936:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 800a938:	2302      	movs	r3, #2
 800a93a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800a93c:	2302      	movs	r3, #2
 800a93e:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800a940:	2302      	movs	r3, #2
 800a942:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800a944:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800a948:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800a94a:	f107 0318 	add.w	r3, r7, #24
 800a94e:	4618      	mov	r0, r3
 800a950:	f7f8 fc9a 	bl	8003288 <HAL_RCCEx_PeriphCLKConfig>
 800a954:	4603      	mov	r3, r0
 800a956:	2b00      	cmp	r3, #0
 800a958:	d001      	beq.n	800a95e <HAL_PCD_MspInit+0x72>
    {
      Error_Handler();
 800a95a:	f7f5 ffc9 	bl	80008f0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a95e:	4b34      	ldr	r3, [pc, #208]	; (800aa30 <HAL_PCD_MspInit+0x144>)
 800a960:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a962:	4a33      	ldr	r2, [pc, #204]	; (800aa30 <HAL_PCD_MspInit+0x144>)
 800a964:	f043 0301 	orr.w	r3, r3, #1
 800a968:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a96a:	4b31      	ldr	r3, [pc, #196]	; (800aa30 <HAL_PCD_MspInit+0x144>)
 800a96c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a96e:	f003 0301 	and.w	r3, r3, #1
 800a972:	617b      	str	r3, [r7, #20]
 800a974:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800a976:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800a97a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a97e:	2302      	movs	r3, #2
 800a980:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a984:	2300      	movs	r3, #0
 800a986:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a98a:	2303      	movs	r3, #3
 800a98c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a990:	230a      	movs	r3, #10
 800a992:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a996:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800a99a:	4619      	mov	r1, r3
 800a99c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a9a0:	f7f6 fa66 	bl	8000e70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800a9a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a9a8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a9ac:	2300      	movs	r3, #0
 800a9ae:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a9b2:	2300      	movs	r3, #0
 800a9b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800a9b8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800a9bc:	4619      	mov	r1, r3
 800a9be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a9c2:	f7f6 fa55 	bl	8000e70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a9c6:	4b1a      	ldr	r3, [pc, #104]	; (800aa30 <HAL_PCD_MspInit+0x144>)
 800a9c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a9ca:	4a19      	ldr	r2, [pc, #100]	; (800aa30 <HAL_PCD_MspInit+0x144>)
 800a9cc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a9d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a9d2:	4b17      	ldr	r3, [pc, #92]	; (800aa30 <HAL_PCD_MspInit+0x144>)
 800a9d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a9d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a9da:	613b      	str	r3, [r7, #16]
 800a9dc:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a9de:	4b14      	ldr	r3, [pc, #80]	; (800aa30 <HAL_PCD_MspInit+0x144>)
 800a9e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a9e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d114      	bne.n	800aa14 <HAL_PCD_MspInit+0x128>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a9ea:	4b11      	ldr	r3, [pc, #68]	; (800aa30 <HAL_PCD_MspInit+0x144>)
 800a9ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a9ee:	4a10      	ldr	r2, [pc, #64]	; (800aa30 <HAL_PCD_MspInit+0x144>)
 800a9f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a9f4:	6593      	str	r3, [r2, #88]	; 0x58
 800a9f6:	4b0e      	ldr	r3, [pc, #56]	; (800aa30 <HAL_PCD_MspInit+0x144>)
 800a9f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a9fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a9fe:	60fb      	str	r3, [r7, #12]
 800aa00:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 800aa02:	f7f7 fde3 	bl	80025cc <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800aa06:	4b0a      	ldr	r3, [pc, #40]	; (800aa30 <HAL_PCD_MspInit+0x144>)
 800aa08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa0a:	4a09      	ldr	r2, [pc, #36]	; (800aa30 <HAL_PCD_MspInit+0x144>)
 800aa0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800aa10:	6593      	str	r3, [r2, #88]	; 0x58
 800aa12:	e001      	b.n	800aa18 <HAL_PCD_MspInit+0x12c>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800aa14:	f7f7 fdda 	bl	80025cc <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800aa18:	2200      	movs	r2, #0
 800aa1a:	2105      	movs	r1, #5
 800aa1c:	2043      	movs	r0, #67	; 0x43
 800aa1e:	f7f6 f9f0 	bl	8000e02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800aa22:	2043      	movs	r0, #67	; 0x43
 800aa24:	f7f6 fa09 	bl	8000e3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800aa28:	bf00      	nop
 800aa2a:	37b8      	adds	r7, #184	; 0xb8
 800aa2c:	46bd      	mov	sp, r7
 800aa2e:	bd80      	pop	{r7, pc}
 800aa30:	40021000 	.word	0x40021000

0800aa34 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa34:	b580      	push	{r7, lr}
 800aa36:	b082      	sub	sp, #8
 800aa38:	af00      	add	r7, sp, #0
 800aa3a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800aa48:	4619      	mov	r1, r3
 800aa4a:	4610      	mov	r0, r2
 800aa4c:	f7fb fe2d 	bl	80066aa <USBD_LL_SetupStage>
}
 800aa50:	bf00      	nop
 800aa52:	3708      	adds	r7, #8
 800aa54:	46bd      	mov	sp, r7
 800aa56:	bd80      	pop	{r7, pc}

0800aa58 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa58:	b580      	push	{r7, lr}
 800aa5a:	b082      	sub	sp, #8
 800aa5c:	af00      	add	r7, sp, #0
 800aa5e:	6078      	str	r0, [r7, #4]
 800aa60:	460b      	mov	r3, r1
 800aa62:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800aa6a:	78fa      	ldrb	r2, [r7, #3]
 800aa6c:	6879      	ldr	r1, [r7, #4]
 800aa6e:	4613      	mov	r3, r2
 800aa70:	00db      	lsls	r3, r3, #3
 800aa72:	4413      	add	r3, r2
 800aa74:	009b      	lsls	r3, r3, #2
 800aa76:	440b      	add	r3, r1
 800aa78:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800aa7c:	681a      	ldr	r2, [r3, #0]
 800aa7e:	78fb      	ldrb	r3, [r7, #3]
 800aa80:	4619      	mov	r1, r3
 800aa82:	f7fb fe67 	bl	8006754 <USBD_LL_DataOutStage>
}
 800aa86:	bf00      	nop
 800aa88:	3708      	adds	r7, #8
 800aa8a:	46bd      	mov	sp, r7
 800aa8c:	bd80      	pop	{r7, pc}

0800aa8e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa8e:	b580      	push	{r7, lr}
 800aa90:	b082      	sub	sp, #8
 800aa92:	af00      	add	r7, sp, #0
 800aa94:	6078      	str	r0, [r7, #4]
 800aa96:	460b      	mov	r3, r1
 800aa98:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800aaa0:	78fa      	ldrb	r2, [r7, #3]
 800aaa2:	6879      	ldr	r1, [r7, #4]
 800aaa4:	4613      	mov	r3, r2
 800aaa6:	00db      	lsls	r3, r3, #3
 800aaa8:	4413      	add	r3, r2
 800aaaa:	009b      	lsls	r3, r3, #2
 800aaac:	440b      	add	r3, r1
 800aaae:	3348      	adds	r3, #72	; 0x48
 800aab0:	681a      	ldr	r2, [r3, #0]
 800aab2:	78fb      	ldrb	r3, [r7, #3]
 800aab4:	4619      	mov	r1, r3
 800aab6:	f7fb ff00 	bl	80068ba <USBD_LL_DataInStage>
}
 800aaba:	bf00      	nop
 800aabc:	3708      	adds	r7, #8
 800aabe:	46bd      	mov	sp, r7
 800aac0:	bd80      	pop	{r7, pc}

0800aac2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aac2:	b580      	push	{r7, lr}
 800aac4:	b082      	sub	sp, #8
 800aac6:	af00      	add	r7, sp, #0
 800aac8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800aad0:	4618      	mov	r0, r3
 800aad2:	f7fc f83a 	bl	8006b4a <USBD_LL_SOF>
}
 800aad6:	bf00      	nop
 800aad8:	3708      	adds	r7, #8
 800aada:	46bd      	mov	sp, r7
 800aadc:	bd80      	pop	{r7, pc}

0800aade <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aade:	b580      	push	{r7, lr}
 800aae0:	b084      	sub	sp, #16
 800aae2:	af00      	add	r7, sp, #0
 800aae4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800aae6:	2301      	movs	r3, #1
 800aae8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	691b      	ldr	r3, [r3, #16]
 800aaee:	2b02      	cmp	r3, #2
 800aaf0:	d001      	beq.n	800aaf6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800aaf2:	f7f5 fefd 	bl	80008f0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800aafc:	7bfa      	ldrb	r2, [r7, #15]
 800aafe:	4611      	mov	r1, r2
 800ab00:	4618      	mov	r0, r3
 800ab02:	f7fb ffde 	bl	8006ac2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	f7fb ff86 	bl	8006a1e <USBD_LL_Reset>
}
 800ab12:	bf00      	nop
 800ab14:	3710      	adds	r7, #16
 800ab16:	46bd      	mov	sp, r7
 800ab18:	bd80      	pop	{r7, pc}
	...

0800ab1c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab1c:	b580      	push	{r7, lr}
 800ab1e:	b082      	sub	sp, #8
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	687a      	ldr	r2, [r7, #4]
 800ab30:	6812      	ldr	r2, [r2, #0]
 800ab32:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ab36:	f043 0301 	orr.w	r3, r3, #1
 800ab3a:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ab42:	4618      	mov	r0, r3
 800ab44:	f7fb ffcd 	bl	8006ae2 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	6a1b      	ldr	r3, [r3, #32]
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d005      	beq.n	800ab5c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ab50:	4b04      	ldr	r3, [pc, #16]	; (800ab64 <HAL_PCD_SuspendCallback+0x48>)
 800ab52:	691b      	ldr	r3, [r3, #16]
 800ab54:	4a03      	ldr	r2, [pc, #12]	; (800ab64 <HAL_PCD_SuspendCallback+0x48>)
 800ab56:	f043 0306 	orr.w	r3, r3, #6
 800ab5a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ab5c:	bf00      	nop
 800ab5e:	3708      	adds	r7, #8
 800ab60:	46bd      	mov	sp, r7
 800ab62:	bd80      	pop	{r7, pc}
 800ab64:	e000ed00 	.word	0xe000ed00

0800ab68 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab68:	b580      	push	{r7, lr}
 800ab6a:	b082      	sub	sp, #8
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	687a      	ldr	r2, [r7, #4]
 800ab7c:	6812      	ldr	r2, [r2, #0]
 800ab7e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ab82:	f023 0301 	bic.w	r3, r3, #1
 800ab86:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	6a1b      	ldr	r3, [r3, #32]
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d007      	beq.n	800aba0 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ab90:	4b08      	ldr	r3, [pc, #32]	; (800abb4 <HAL_PCD_ResumeCallback+0x4c>)
 800ab92:	691b      	ldr	r3, [r3, #16]
 800ab94:	4a07      	ldr	r2, [pc, #28]	; (800abb4 <HAL_PCD_ResumeCallback+0x4c>)
 800ab96:	f023 0306 	bic.w	r3, r3, #6
 800ab9a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800ab9c:	f000 fae2 	bl	800b164 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800aba6:	4618      	mov	r0, r3
 800aba8:	f7fb ffb7 	bl	8006b1a <USBD_LL_Resume>
}
 800abac:	bf00      	nop
 800abae:	3708      	adds	r7, #8
 800abb0:	46bd      	mov	sp, r7
 800abb2:	bd80      	pop	{r7, pc}
 800abb4:	e000ed00 	.word	0xe000ed00

0800abb8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800abb8:	b580      	push	{r7, lr}
 800abba:	b082      	sub	sp, #8
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	6078      	str	r0, [r7, #4]
 800abc0:	460b      	mov	r3, r1
 800abc2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800abca:	78fa      	ldrb	r2, [r7, #3]
 800abcc:	4611      	mov	r1, r2
 800abce:	4618      	mov	r0, r3
 800abd0:	f7fc f80d 	bl	8006bee <USBD_LL_IsoOUTIncomplete>
}
 800abd4:	bf00      	nop
 800abd6:	3708      	adds	r7, #8
 800abd8:	46bd      	mov	sp, r7
 800abda:	bd80      	pop	{r7, pc}

0800abdc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800abdc:	b580      	push	{r7, lr}
 800abde:	b082      	sub	sp, #8
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	6078      	str	r0, [r7, #4]
 800abe4:	460b      	mov	r3, r1
 800abe6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800abee:	78fa      	ldrb	r2, [r7, #3]
 800abf0:	4611      	mov	r1, r2
 800abf2:	4618      	mov	r0, r3
 800abf4:	f7fb ffc9 	bl	8006b8a <USBD_LL_IsoINIncomplete>
}
 800abf8:	bf00      	nop
 800abfa:	3708      	adds	r7, #8
 800abfc:	46bd      	mov	sp, r7
 800abfe:	bd80      	pop	{r7, pc}

0800ac00 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac00:	b580      	push	{r7, lr}
 800ac02:	b082      	sub	sp, #8
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ac0e:	4618      	mov	r0, r3
 800ac10:	f7fc f81f 	bl	8006c52 <USBD_LL_DevConnected>
}
 800ac14:	bf00      	nop
 800ac16:	3708      	adds	r7, #8
 800ac18:	46bd      	mov	sp, r7
 800ac1a:	bd80      	pop	{r7, pc}

0800ac1c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac1c:	b580      	push	{r7, lr}
 800ac1e:	b082      	sub	sp, #8
 800ac20:	af00      	add	r7, sp, #0
 800ac22:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	f7fc f81c 	bl	8006c68 <USBD_LL_DevDisconnected>
}
 800ac30:	bf00      	nop
 800ac32:	3708      	adds	r7, #8
 800ac34:	46bd      	mov	sp, r7
 800ac36:	bd80      	pop	{r7, pc}

0800ac38 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ac38:	b580      	push	{r7, lr}
 800ac3a:	b082      	sub	sp, #8
 800ac3c:	af00      	add	r7, sp, #0
 800ac3e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	781b      	ldrb	r3, [r3, #0]
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d13c      	bne.n	800acc2 <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800ac48:	4a20      	ldr	r2, [pc, #128]	; (800accc <USBD_LL_Init+0x94>)
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	4a1e      	ldr	r2, [pc, #120]	; (800accc <USBD_LL_Init+0x94>)
 800ac54:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ac58:	4b1c      	ldr	r3, [pc, #112]	; (800accc <USBD_LL_Init+0x94>)
 800ac5a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800ac5e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800ac60:	4b1a      	ldr	r3, [pc, #104]	; (800accc <USBD_LL_Init+0x94>)
 800ac62:	2206      	movs	r2, #6
 800ac64:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800ac66:	4b19      	ldr	r3, [pc, #100]	; (800accc <USBD_LL_Init+0x94>)
 800ac68:	2202      	movs	r2, #2
 800ac6a:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ac6c:	4b17      	ldr	r3, [pc, #92]	; (800accc <USBD_LL_Init+0x94>)
 800ac6e:	2202      	movs	r2, #2
 800ac70:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800ac72:	4b16      	ldr	r3, [pc, #88]	; (800accc <USBD_LL_Init+0x94>)
 800ac74:	2201      	movs	r2, #1
 800ac76:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800ac78:	4b14      	ldr	r3, [pc, #80]	; (800accc <USBD_LL_Init+0x94>)
 800ac7a:	2200      	movs	r2, #0
 800ac7c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800ac7e:	4b13      	ldr	r3, [pc, #76]	; (800accc <USBD_LL_Init+0x94>)
 800ac80:	2200      	movs	r2, #0
 800ac82:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 800ac84:	4b11      	ldr	r3, [pc, #68]	; (800accc <USBD_LL_Init+0x94>)
 800ac86:	2201      	movs	r2, #1
 800ac88:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800ac8a:	4b10      	ldr	r3, [pc, #64]	; (800accc <USBD_LL_Init+0x94>)
 800ac8c:	2200      	movs	r2, #0
 800ac8e:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800ac90:	4b0e      	ldr	r3, [pc, #56]	; (800accc <USBD_LL_Init+0x94>)
 800ac92:	2201      	movs	r2, #1
 800ac94:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800ac96:	480d      	ldr	r0, [pc, #52]	; (800accc <USBD_LL_Init+0x94>)
 800ac98:	f7f6 fa94 	bl	80011c4 <HAL_PCD_Init>
 800ac9c:	4603      	mov	r3, r0
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d001      	beq.n	800aca6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800aca2:	f7f5 fe25 	bl	80008f0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800aca6:	2180      	movs	r1, #128	; 0x80
 800aca8:	4808      	ldr	r0, [pc, #32]	; (800accc <USBD_LL_Init+0x94>)
 800acaa:	f7f7 fbe6 	bl	800247a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800acae:	2240      	movs	r2, #64	; 0x40
 800acb0:	2100      	movs	r1, #0
 800acb2:	4806      	ldr	r0, [pc, #24]	; (800accc <USBD_LL_Init+0x94>)
 800acb4:	f7f7 fb9a 	bl	80023ec <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800acb8:	2280      	movs	r2, #128	; 0x80
 800acba:	2101      	movs	r1, #1
 800acbc:	4803      	ldr	r0, [pc, #12]	; (800accc <USBD_LL_Init+0x94>)
 800acbe:	f7f7 fb95 	bl	80023ec <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800acc2:	2300      	movs	r3, #0
}
 800acc4:	4618      	mov	r0, r3
 800acc6:	3708      	adds	r7, #8
 800acc8:	46bd      	mov	sp, r7
 800acca:	bd80      	pop	{r7, pc}
 800accc:	20002010 	.word	0x20002010

0800acd0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800acd0:	b580      	push	{r7, lr}
 800acd2:	b084      	sub	sp, #16
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800acd8:	2300      	movs	r3, #0
 800acda:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800acdc:	2300      	movs	r3, #0
 800acde:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ace6:	4618      	mov	r0, r3
 800ace8:	f7f6 fb90 	bl	800140c <HAL_PCD_Start>
 800acec:	4603      	mov	r3, r0
 800acee:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800acf0:	7bbb      	ldrb	r3, [r7, #14]
 800acf2:	2b03      	cmp	r3, #3
 800acf4:	d816      	bhi.n	800ad24 <USBD_LL_Start+0x54>
 800acf6:	a201      	add	r2, pc, #4	; (adr r2, 800acfc <USBD_LL_Start+0x2c>)
 800acf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acfc:	0800ad0d 	.word	0x0800ad0d
 800ad00:	0800ad13 	.word	0x0800ad13
 800ad04:	0800ad19 	.word	0x0800ad19
 800ad08:	0800ad1f 	.word	0x0800ad1f
    case HAL_OK :
      usb_status = USBD_OK;
 800ad0c:	2300      	movs	r3, #0
 800ad0e:	73fb      	strb	r3, [r7, #15]
    break;
 800ad10:	e00b      	b.n	800ad2a <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ad12:	2303      	movs	r3, #3
 800ad14:	73fb      	strb	r3, [r7, #15]
    break;
 800ad16:	e008      	b.n	800ad2a <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ad18:	2301      	movs	r3, #1
 800ad1a:	73fb      	strb	r3, [r7, #15]
    break;
 800ad1c:	e005      	b.n	800ad2a <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ad1e:	2303      	movs	r3, #3
 800ad20:	73fb      	strb	r3, [r7, #15]
    break;
 800ad22:	e002      	b.n	800ad2a <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800ad24:	2303      	movs	r3, #3
 800ad26:	73fb      	strb	r3, [r7, #15]
    break;
 800ad28:	bf00      	nop
  }
  return usb_status;
 800ad2a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad2c:	4618      	mov	r0, r3
 800ad2e:	3710      	adds	r7, #16
 800ad30:	46bd      	mov	sp, r7
 800ad32:	bd80      	pop	{r7, pc}

0800ad34 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ad34:	b580      	push	{r7, lr}
 800ad36:	b084      	sub	sp, #16
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	6078      	str	r0, [r7, #4]
 800ad3c:	4608      	mov	r0, r1
 800ad3e:	4611      	mov	r1, r2
 800ad40:	461a      	mov	r2, r3
 800ad42:	4603      	mov	r3, r0
 800ad44:	70fb      	strb	r3, [r7, #3]
 800ad46:	460b      	mov	r3, r1
 800ad48:	70bb      	strb	r3, [r7, #2]
 800ad4a:	4613      	mov	r3, r2
 800ad4c:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad4e:	2300      	movs	r3, #0
 800ad50:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad52:	2300      	movs	r3, #0
 800ad54:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ad5c:	78bb      	ldrb	r3, [r7, #2]
 800ad5e:	883a      	ldrh	r2, [r7, #0]
 800ad60:	78f9      	ldrb	r1, [r7, #3]
 800ad62:	f7f7 f83a 	bl	8001dda <HAL_PCD_EP_Open>
 800ad66:	4603      	mov	r3, r0
 800ad68:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800ad6a:	7bbb      	ldrb	r3, [r7, #14]
 800ad6c:	2b03      	cmp	r3, #3
 800ad6e:	d817      	bhi.n	800ada0 <USBD_LL_OpenEP+0x6c>
 800ad70:	a201      	add	r2, pc, #4	; (adr r2, 800ad78 <USBD_LL_OpenEP+0x44>)
 800ad72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad76:	bf00      	nop
 800ad78:	0800ad89 	.word	0x0800ad89
 800ad7c:	0800ad8f 	.word	0x0800ad8f
 800ad80:	0800ad95 	.word	0x0800ad95
 800ad84:	0800ad9b 	.word	0x0800ad9b
    case HAL_OK :
      usb_status = USBD_OK;
 800ad88:	2300      	movs	r3, #0
 800ad8a:	73fb      	strb	r3, [r7, #15]
    break;
 800ad8c:	e00b      	b.n	800ada6 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ad8e:	2303      	movs	r3, #3
 800ad90:	73fb      	strb	r3, [r7, #15]
    break;
 800ad92:	e008      	b.n	800ada6 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ad94:	2301      	movs	r3, #1
 800ad96:	73fb      	strb	r3, [r7, #15]
    break;
 800ad98:	e005      	b.n	800ada6 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ad9a:	2303      	movs	r3, #3
 800ad9c:	73fb      	strb	r3, [r7, #15]
    break;
 800ad9e:	e002      	b.n	800ada6 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800ada0:	2303      	movs	r3, #3
 800ada2:	73fb      	strb	r3, [r7, #15]
    break;
 800ada4:	bf00      	nop
  }
  return usb_status;
 800ada6:	7bfb      	ldrb	r3, [r7, #15]
}
 800ada8:	4618      	mov	r0, r3
 800adaa:	3710      	adds	r7, #16
 800adac:	46bd      	mov	sp, r7
 800adae:	bd80      	pop	{r7, pc}

0800adb0 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800adb0:	b580      	push	{r7, lr}
 800adb2:	b084      	sub	sp, #16
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	6078      	str	r0, [r7, #4]
 800adb8:	460b      	mov	r3, r1
 800adba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800adbc:	2300      	movs	r3, #0
 800adbe:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800adc0:	2300      	movs	r3, #0
 800adc2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800adca:	78fa      	ldrb	r2, [r7, #3]
 800adcc:	4611      	mov	r1, r2
 800adce:	4618      	mov	r0, r3
 800add0:	f7f7 f86b 	bl	8001eaa <HAL_PCD_EP_Close>
 800add4:	4603      	mov	r3, r0
 800add6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800add8:	7bbb      	ldrb	r3, [r7, #14]
 800adda:	2b03      	cmp	r3, #3
 800addc:	d816      	bhi.n	800ae0c <USBD_LL_CloseEP+0x5c>
 800adde:	a201      	add	r2, pc, #4	; (adr r2, 800ade4 <USBD_LL_CloseEP+0x34>)
 800ade0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ade4:	0800adf5 	.word	0x0800adf5
 800ade8:	0800adfb 	.word	0x0800adfb
 800adec:	0800ae01 	.word	0x0800ae01
 800adf0:	0800ae07 	.word	0x0800ae07
    case HAL_OK :
      usb_status = USBD_OK;
 800adf4:	2300      	movs	r3, #0
 800adf6:	73fb      	strb	r3, [r7, #15]
    break;
 800adf8:	e00b      	b.n	800ae12 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800adfa:	2303      	movs	r3, #3
 800adfc:	73fb      	strb	r3, [r7, #15]
    break;
 800adfe:	e008      	b.n	800ae12 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ae00:	2301      	movs	r3, #1
 800ae02:	73fb      	strb	r3, [r7, #15]
    break;
 800ae04:	e005      	b.n	800ae12 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ae06:	2303      	movs	r3, #3
 800ae08:	73fb      	strb	r3, [r7, #15]
    break;
 800ae0a:	e002      	b.n	800ae12 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800ae0c:	2303      	movs	r3, #3
 800ae0e:	73fb      	strb	r3, [r7, #15]
    break;
 800ae10:	bf00      	nop
  }
  return usb_status;
 800ae12:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae14:	4618      	mov	r0, r3
 800ae16:	3710      	adds	r7, #16
 800ae18:	46bd      	mov	sp, r7
 800ae1a:	bd80      	pop	{r7, pc}

0800ae1c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ae1c:	b580      	push	{r7, lr}
 800ae1e:	b084      	sub	sp, #16
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	6078      	str	r0, [r7, #4]
 800ae24:	460b      	mov	r3, r1
 800ae26:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae28:	2300      	movs	r3, #0
 800ae2a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae2c:	2300      	movs	r3, #0
 800ae2e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ae36:	78fa      	ldrb	r2, [r7, #3]
 800ae38:	4611      	mov	r1, r2
 800ae3a:	4618      	mov	r0, r3
 800ae3c:	f7f7 f8e2 	bl	8002004 <HAL_PCD_EP_SetStall>
 800ae40:	4603      	mov	r3, r0
 800ae42:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800ae44:	7bbb      	ldrb	r3, [r7, #14]
 800ae46:	2b03      	cmp	r3, #3
 800ae48:	d816      	bhi.n	800ae78 <USBD_LL_StallEP+0x5c>
 800ae4a:	a201      	add	r2, pc, #4	; (adr r2, 800ae50 <USBD_LL_StallEP+0x34>)
 800ae4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae50:	0800ae61 	.word	0x0800ae61
 800ae54:	0800ae67 	.word	0x0800ae67
 800ae58:	0800ae6d 	.word	0x0800ae6d
 800ae5c:	0800ae73 	.word	0x0800ae73
    case HAL_OK :
      usb_status = USBD_OK;
 800ae60:	2300      	movs	r3, #0
 800ae62:	73fb      	strb	r3, [r7, #15]
    break;
 800ae64:	e00b      	b.n	800ae7e <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ae66:	2303      	movs	r3, #3
 800ae68:	73fb      	strb	r3, [r7, #15]
    break;
 800ae6a:	e008      	b.n	800ae7e <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ae6c:	2301      	movs	r3, #1
 800ae6e:	73fb      	strb	r3, [r7, #15]
    break;
 800ae70:	e005      	b.n	800ae7e <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ae72:	2303      	movs	r3, #3
 800ae74:	73fb      	strb	r3, [r7, #15]
    break;
 800ae76:	e002      	b.n	800ae7e <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800ae78:	2303      	movs	r3, #3
 800ae7a:	73fb      	strb	r3, [r7, #15]
    break;
 800ae7c:	bf00      	nop
  }
  return usb_status;
 800ae7e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae80:	4618      	mov	r0, r3
 800ae82:	3710      	adds	r7, #16
 800ae84:	46bd      	mov	sp, r7
 800ae86:	bd80      	pop	{r7, pc}

0800ae88 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ae88:	b580      	push	{r7, lr}
 800ae8a:	b084      	sub	sp, #16
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	6078      	str	r0, [r7, #4]
 800ae90:	460b      	mov	r3, r1
 800ae92:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae94:	2300      	movs	r3, #0
 800ae96:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae98:	2300      	movs	r3, #0
 800ae9a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800aea2:	78fa      	ldrb	r2, [r7, #3]
 800aea4:	4611      	mov	r1, r2
 800aea6:	4618      	mov	r0, r3
 800aea8:	f7f7 f90e 	bl	80020c8 <HAL_PCD_EP_ClrStall>
 800aeac:	4603      	mov	r3, r0
 800aeae:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800aeb0:	7bbb      	ldrb	r3, [r7, #14]
 800aeb2:	2b03      	cmp	r3, #3
 800aeb4:	d816      	bhi.n	800aee4 <USBD_LL_ClearStallEP+0x5c>
 800aeb6:	a201      	add	r2, pc, #4	; (adr r2, 800aebc <USBD_LL_ClearStallEP+0x34>)
 800aeb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aebc:	0800aecd 	.word	0x0800aecd
 800aec0:	0800aed3 	.word	0x0800aed3
 800aec4:	0800aed9 	.word	0x0800aed9
 800aec8:	0800aedf 	.word	0x0800aedf
    case HAL_OK :
      usb_status = USBD_OK;
 800aecc:	2300      	movs	r3, #0
 800aece:	73fb      	strb	r3, [r7, #15]
    break;
 800aed0:	e00b      	b.n	800aeea <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800aed2:	2303      	movs	r3, #3
 800aed4:	73fb      	strb	r3, [r7, #15]
    break;
 800aed6:	e008      	b.n	800aeea <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800aed8:	2301      	movs	r3, #1
 800aeda:	73fb      	strb	r3, [r7, #15]
    break;
 800aedc:	e005      	b.n	800aeea <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800aede:	2303      	movs	r3, #3
 800aee0:	73fb      	strb	r3, [r7, #15]
    break;
 800aee2:	e002      	b.n	800aeea <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800aee4:	2303      	movs	r3, #3
 800aee6:	73fb      	strb	r3, [r7, #15]
    break;
 800aee8:	bf00      	nop
  }
  return usb_status;
 800aeea:	7bfb      	ldrb	r3, [r7, #15]
}
 800aeec:	4618      	mov	r0, r3
 800aeee:	3710      	adds	r7, #16
 800aef0:	46bd      	mov	sp, r7
 800aef2:	bd80      	pop	{r7, pc}

0800aef4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aef4:	b480      	push	{r7}
 800aef6:	b085      	sub	sp, #20
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	6078      	str	r0, [r7, #4]
 800aefc:	460b      	mov	r3, r1
 800aefe:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800af06:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800af08:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	da0b      	bge.n	800af28 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800af10:	78fb      	ldrb	r3, [r7, #3]
 800af12:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800af16:	68f9      	ldr	r1, [r7, #12]
 800af18:	4613      	mov	r3, r2
 800af1a:	00db      	lsls	r3, r3, #3
 800af1c:	4413      	add	r3, r2
 800af1e:	009b      	lsls	r3, r3, #2
 800af20:	440b      	add	r3, r1
 800af22:	333e      	adds	r3, #62	; 0x3e
 800af24:	781b      	ldrb	r3, [r3, #0]
 800af26:	e00b      	b.n	800af40 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800af28:	78fb      	ldrb	r3, [r7, #3]
 800af2a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800af2e:	68f9      	ldr	r1, [r7, #12]
 800af30:	4613      	mov	r3, r2
 800af32:	00db      	lsls	r3, r3, #3
 800af34:	4413      	add	r3, r2
 800af36:	009b      	lsls	r3, r3, #2
 800af38:	440b      	add	r3, r1
 800af3a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800af3e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800af40:	4618      	mov	r0, r3
 800af42:	3714      	adds	r7, #20
 800af44:	46bd      	mov	sp, r7
 800af46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af4a:	4770      	bx	lr

0800af4c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800af4c:	b580      	push	{r7, lr}
 800af4e:	b084      	sub	sp, #16
 800af50:	af00      	add	r7, sp, #0
 800af52:	6078      	str	r0, [r7, #4]
 800af54:	460b      	mov	r3, r1
 800af56:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af58:	2300      	movs	r3, #0
 800af5a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af5c:	2300      	movs	r3, #0
 800af5e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800af66:	78fa      	ldrb	r2, [r7, #3]
 800af68:	4611      	mov	r1, r2
 800af6a:	4618      	mov	r0, r3
 800af6c:	f7f6 ff10 	bl	8001d90 <HAL_PCD_SetAddress>
 800af70:	4603      	mov	r3, r0
 800af72:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800af74:	7bbb      	ldrb	r3, [r7, #14]
 800af76:	2b03      	cmp	r3, #3
 800af78:	d816      	bhi.n	800afa8 <USBD_LL_SetUSBAddress+0x5c>
 800af7a:	a201      	add	r2, pc, #4	; (adr r2, 800af80 <USBD_LL_SetUSBAddress+0x34>)
 800af7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af80:	0800af91 	.word	0x0800af91
 800af84:	0800af97 	.word	0x0800af97
 800af88:	0800af9d 	.word	0x0800af9d
 800af8c:	0800afa3 	.word	0x0800afa3
    case HAL_OK :
      usb_status = USBD_OK;
 800af90:	2300      	movs	r3, #0
 800af92:	73fb      	strb	r3, [r7, #15]
    break;
 800af94:	e00b      	b.n	800afae <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800af96:	2303      	movs	r3, #3
 800af98:	73fb      	strb	r3, [r7, #15]
    break;
 800af9a:	e008      	b.n	800afae <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800af9c:	2301      	movs	r3, #1
 800af9e:	73fb      	strb	r3, [r7, #15]
    break;
 800afa0:	e005      	b.n	800afae <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800afa2:	2303      	movs	r3, #3
 800afa4:	73fb      	strb	r3, [r7, #15]
    break;
 800afa6:	e002      	b.n	800afae <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800afa8:	2303      	movs	r3, #3
 800afaa:	73fb      	strb	r3, [r7, #15]
    break;
 800afac:	bf00      	nop
  }
  return usb_status;
 800afae:	7bfb      	ldrb	r3, [r7, #15]
}
 800afb0:	4618      	mov	r0, r3
 800afb2:	3710      	adds	r7, #16
 800afb4:	46bd      	mov	sp, r7
 800afb6:	bd80      	pop	{r7, pc}

0800afb8 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800afb8:	b580      	push	{r7, lr}
 800afba:	b086      	sub	sp, #24
 800afbc:	af00      	add	r7, sp, #0
 800afbe:	60f8      	str	r0, [r7, #12]
 800afc0:	607a      	str	r2, [r7, #4]
 800afc2:	603b      	str	r3, [r7, #0]
 800afc4:	460b      	mov	r3, r1
 800afc6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800afc8:	2300      	movs	r3, #0
 800afca:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800afcc:	2300      	movs	r3, #0
 800afce:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800afd6:	7af9      	ldrb	r1, [r7, #11]
 800afd8:	683b      	ldr	r3, [r7, #0]
 800afda:	687a      	ldr	r2, [r7, #4]
 800afdc:	f7f6 ffe1 	bl	8001fa2 <HAL_PCD_EP_Transmit>
 800afe0:	4603      	mov	r3, r0
 800afe2:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800afe4:	7dbb      	ldrb	r3, [r7, #22]
 800afe6:	2b03      	cmp	r3, #3
 800afe8:	d816      	bhi.n	800b018 <USBD_LL_Transmit+0x60>
 800afea:	a201      	add	r2, pc, #4	; (adr r2, 800aff0 <USBD_LL_Transmit+0x38>)
 800afec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aff0:	0800b001 	.word	0x0800b001
 800aff4:	0800b007 	.word	0x0800b007
 800aff8:	0800b00d 	.word	0x0800b00d
 800affc:	0800b013 	.word	0x0800b013
    case HAL_OK :
      usb_status = USBD_OK;
 800b000:	2300      	movs	r3, #0
 800b002:	75fb      	strb	r3, [r7, #23]
    break;
 800b004:	e00b      	b.n	800b01e <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b006:	2303      	movs	r3, #3
 800b008:	75fb      	strb	r3, [r7, #23]
    break;
 800b00a:	e008      	b.n	800b01e <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b00c:	2301      	movs	r3, #1
 800b00e:	75fb      	strb	r3, [r7, #23]
    break;
 800b010:	e005      	b.n	800b01e <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b012:	2303      	movs	r3, #3
 800b014:	75fb      	strb	r3, [r7, #23]
    break;
 800b016:	e002      	b.n	800b01e <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800b018:	2303      	movs	r3, #3
 800b01a:	75fb      	strb	r3, [r7, #23]
    break;
 800b01c:	bf00      	nop
  }
  return usb_status;
 800b01e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b020:	4618      	mov	r0, r3
 800b022:	3718      	adds	r7, #24
 800b024:	46bd      	mov	sp, r7
 800b026:	bd80      	pop	{r7, pc}

0800b028 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b028:	b580      	push	{r7, lr}
 800b02a:	b086      	sub	sp, #24
 800b02c:	af00      	add	r7, sp, #0
 800b02e:	60f8      	str	r0, [r7, #12]
 800b030:	607a      	str	r2, [r7, #4]
 800b032:	603b      	str	r3, [r7, #0]
 800b034:	460b      	mov	r3, r1
 800b036:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b038:	2300      	movs	r3, #0
 800b03a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b03c:	2300      	movs	r3, #0
 800b03e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b046:	7af9      	ldrb	r1, [r7, #11]
 800b048:	683b      	ldr	r3, [r7, #0]
 800b04a:	687a      	ldr	r2, [r7, #4]
 800b04c:	f7f6 ff77 	bl	8001f3e <HAL_PCD_EP_Receive>
 800b050:	4603      	mov	r3, r0
 800b052:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800b054:	7dbb      	ldrb	r3, [r7, #22]
 800b056:	2b03      	cmp	r3, #3
 800b058:	d816      	bhi.n	800b088 <USBD_LL_PrepareReceive+0x60>
 800b05a:	a201      	add	r2, pc, #4	; (adr r2, 800b060 <USBD_LL_PrepareReceive+0x38>)
 800b05c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b060:	0800b071 	.word	0x0800b071
 800b064:	0800b077 	.word	0x0800b077
 800b068:	0800b07d 	.word	0x0800b07d
 800b06c:	0800b083 	.word	0x0800b083
    case HAL_OK :
      usb_status = USBD_OK;
 800b070:	2300      	movs	r3, #0
 800b072:	75fb      	strb	r3, [r7, #23]
    break;
 800b074:	e00b      	b.n	800b08e <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b076:	2303      	movs	r3, #3
 800b078:	75fb      	strb	r3, [r7, #23]
    break;
 800b07a:	e008      	b.n	800b08e <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b07c:	2301      	movs	r3, #1
 800b07e:	75fb      	strb	r3, [r7, #23]
    break;
 800b080:	e005      	b.n	800b08e <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b082:	2303      	movs	r3, #3
 800b084:	75fb      	strb	r3, [r7, #23]
    break;
 800b086:	e002      	b.n	800b08e <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800b088:	2303      	movs	r3, #3
 800b08a:	75fb      	strb	r3, [r7, #23]
    break;
 800b08c:	bf00      	nop
  }
  return usb_status;
 800b08e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b090:	4618      	mov	r0, r3
 800b092:	3718      	adds	r7, #24
 800b094:	46bd      	mov	sp, r7
 800b096:	bd80      	pop	{r7, pc}

0800b098 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800b098:	b580      	push	{r7, lr}
 800b09a:	b082      	sub	sp, #8
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	6078      	str	r0, [r7, #4]
 800b0a0:	460b      	mov	r3, r1
 800b0a2:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800b0a4:	78fb      	ldrb	r3, [r7, #3]
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d002      	beq.n	800b0b0 <HAL_PCDEx_LPM_Callback+0x18>
 800b0aa:	2b01      	cmp	r3, #1
 800b0ac:	d01f      	beq.n	800b0ee <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800b0ae:	e03b      	b.n	800b128 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	6a1b      	ldr	r3, [r3, #32]
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d007      	beq.n	800b0c8 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800b0b8:	f000 f854 	bl	800b164 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b0bc:	4b1c      	ldr	r3, [pc, #112]	; (800b130 <HAL_PCDEx_LPM_Callback+0x98>)
 800b0be:	691b      	ldr	r3, [r3, #16]
 800b0c0:	4a1b      	ldr	r2, [pc, #108]	; (800b130 <HAL_PCDEx_LPM_Callback+0x98>)
 800b0c2:	f023 0306 	bic.w	r3, r3, #6
 800b0c6:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	687a      	ldr	r2, [r7, #4]
 800b0d4:	6812      	ldr	r2, [r2, #0]
 800b0d6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b0da:	f023 0301 	bic.w	r3, r3, #1
 800b0de:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b0e6:	4618      	mov	r0, r3
 800b0e8:	f7fb fd17 	bl	8006b1a <USBD_LL_Resume>
    break;
 800b0ec:	e01c      	b.n	800b128 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	687a      	ldr	r2, [r7, #4]
 800b0fa:	6812      	ldr	r2, [r2, #0]
 800b0fc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b100:	f043 0301 	orr.w	r3, r3, #1
 800b104:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b10c:	4618      	mov	r0, r3
 800b10e:	f7fb fce8 	bl	8006ae2 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	6a1b      	ldr	r3, [r3, #32]
 800b116:	2b00      	cmp	r3, #0
 800b118:	d005      	beq.n	800b126 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b11a:	4b05      	ldr	r3, [pc, #20]	; (800b130 <HAL_PCDEx_LPM_Callback+0x98>)
 800b11c:	691b      	ldr	r3, [r3, #16]
 800b11e:	4a04      	ldr	r2, [pc, #16]	; (800b130 <HAL_PCDEx_LPM_Callback+0x98>)
 800b120:	f043 0306 	orr.w	r3, r3, #6
 800b124:	6113      	str	r3, [r2, #16]
    break;
 800b126:	bf00      	nop
}
 800b128:	bf00      	nop
 800b12a:	3708      	adds	r7, #8
 800b12c:	46bd      	mov	sp, r7
 800b12e:	bd80      	pop	{r7, pc}
 800b130:	e000ed00 	.word	0xe000ed00

0800b134 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b134:	b480      	push	{r7}
 800b136:	b083      	sub	sp, #12
 800b138:	af00      	add	r7, sp, #0
 800b13a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b13c:	4b03      	ldr	r3, [pc, #12]	; (800b14c <USBD_static_malloc+0x18>)
}
 800b13e:	4618      	mov	r0, r3
 800b140:	370c      	adds	r7, #12
 800b142:	46bd      	mov	sp, r7
 800b144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b148:	4770      	bx	lr
 800b14a:	bf00      	nop
 800b14c:	2000251c 	.word	0x2000251c

0800b150 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b150:	b480      	push	{r7}
 800b152:	b083      	sub	sp, #12
 800b154:	af00      	add	r7, sp, #0
 800b156:	6078      	str	r0, [r7, #4]

}
 800b158:	bf00      	nop
 800b15a:	370c      	adds	r7, #12
 800b15c:	46bd      	mov	sp, r7
 800b15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b162:	4770      	bx	lr

0800b164 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800b164:	b580      	push	{r7, lr}
 800b166:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800b168:	f7f5 f9e0 	bl	800052c <SystemClock_Config>
}
 800b16c:	bf00      	nop
 800b16e:	bd80      	pop	{r7, pc}

0800b170 <memset>:
 800b170:	4402      	add	r2, r0
 800b172:	4603      	mov	r3, r0
 800b174:	4293      	cmp	r3, r2
 800b176:	d100      	bne.n	800b17a <memset+0xa>
 800b178:	4770      	bx	lr
 800b17a:	f803 1b01 	strb.w	r1, [r3], #1
 800b17e:	e7f9      	b.n	800b174 <memset+0x4>

0800b180 <__libc_init_array>:
 800b180:	b570      	push	{r4, r5, r6, lr}
 800b182:	4d0d      	ldr	r5, [pc, #52]	; (800b1b8 <__libc_init_array+0x38>)
 800b184:	4c0d      	ldr	r4, [pc, #52]	; (800b1bc <__libc_init_array+0x3c>)
 800b186:	1b64      	subs	r4, r4, r5
 800b188:	10a4      	asrs	r4, r4, #2
 800b18a:	2600      	movs	r6, #0
 800b18c:	42a6      	cmp	r6, r4
 800b18e:	d109      	bne.n	800b1a4 <__libc_init_array+0x24>
 800b190:	4d0b      	ldr	r5, [pc, #44]	; (800b1c0 <__libc_init_array+0x40>)
 800b192:	4c0c      	ldr	r4, [pc, #48]	; (800b1c4 <__libc_init_array+0x44>)
 800b194:	f000 f826 	bl	800b1e4 <_init>
 800b198:	1b64      	subs	r4, r4, r5
 800b19a:	10a4      	asrs	r4, r4, #2
 800b19c:	2600      	movs	r6, #0
 800b19e:	42a6      	cmp	r6, r4
 800b1a0:	d105      	bne.n	800b1ae <__libc_init_array+0x2e>
 800b1a2:	bd70      	pop	{r4, r5, r6, pc}
 800b1a4:	f855 3b04 	ldr.w	r3, [r5], #4
 800b1a8:	4798      	blx	r3
 800b1aa:	3601      	adds	r6, #1
 800b1ac:	e7ee      	b.n	800b18c <__libc_init_array+0xc>
 800b1ae:	f855 3b04 	ldr.w	r3, [r5], #4
 800b1b2:	4798      	blx	r3
 800b1b4:	3601      	adds	r6, #1
 800b1b6:	e7f2      	b.n	800b19e <__libc_init_array+0x1e>
 800b1b8:	0800b2ec 	.word	0x0800b2ec
 800b1bc:	0800b2ec 	.word	0x0800b2ec
 800b1c0:	0800b2ec 	.word	0x0800b2ec
 800b1c4:	0800b2f0 	.word	0x0800b2f0

0800b1c8 <memcpy>:
 800b1c8:	440a      	add	r2, r1
 800b1ca:	4291      	cmp	r1, r2
 800b1cc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800b1d0:	d100      	bne.n	800b1d4 <memcpy+0xc>
 800b1d2:	4770      	bx	lr
 800b1d4:	b510      	push	{r4, lr}
 800b1d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b1da:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b1de:	4291      	cmp	r1, r2
 800b1e0:	d1f9      	bne.n	800b1d6 <memcpy+0xe>
 800b1e2:	bd10      	pop	{r4, pc}

0800b1e4 <_init>:
 800b1e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1e6:	bf00      	nop
 800b1e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b1ea:	bc08      	pop	{r3}
 800b1ec:	469e      	mov	lr, r3
 800b1ee:	4770      	bx	lr

0800b1f0 <_fini>:
 800b1f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1f2:	bf00      	nop
 800b1f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b1f6:	bc08      	pop	{r3}
 800b1f8:	469e      	mov	lr, r3
 800b1fa:	4770      	bx	lr
