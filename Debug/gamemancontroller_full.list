
gamemancontroller_full.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b2ac  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000010c  0800b45c  0800b45c  0001b45c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b568  0800b568  00020130  2**0
                  CONTENTS
  4 .ARM          00000008  0800b568  0800b568  0001b568  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b570  0800b570  00020130  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b570  0800b570  0001b570  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b574  0800b574  0001b574  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000130  20000000  0800b578  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002404  20000130  0800b6a8  00020130  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002534  0800b6a8  00022534  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020130  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020160  2**0
                  CONTENTS, READONLY
 13 .debug_info   00022aa0  00000000  00000000  000201a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004d10  00000000  00000000  00042c43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001df8  00000000  00000000  00047958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000171d  00000000  00000000  00049750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000063eb  00000000  00000000  0004ae6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000216b8  00000000  00000000  00051258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010f020  00000000  00000000  00072910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007ea4  00000000  00000000  00181930  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  001897d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000130 	.word	0x20000130
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800b444 	.word	0x0800b444

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000134 	.word	0x20000134
 80001ec:	0800b444 	.word	0x0800b444

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000200:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000204:	f000 b970 	b.w	80004e8 <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9e08      	ldr	r6, [sp, #32]
 8000226:	460d      	mov	r5, r1
 8000228:	4604      	mov	r4, r0
 800022a:	460f      	mov	r7, r1
 800022c:	2b00      	cmp	r3, #0
 800022e:	d14a      	bne.n	80002c6 <__udivmoddi4+0xa6>
 8000230:	428a      	cmp	r2, r1
 8000232:	4694      	mov	ip, r2
 8000234:	d965      	bls.n	8000302 <__udivmoddi4+0xe2>
 8000236:	fab2 f382 	clz	r3, r2
 800023a:	b143      	cbz	r3, 800024e <__udivmoddi4+0x2e>
 800023c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000240:	f1c3 0220 	rsb	r2, r3, #32
 8000244:	409f      	lsls	r7, r3
 8000246:	fa20 f202 	lsr.w	r2, r0, r2
 800024a:	4317      	orrs	r7, r2
 800024c:	409c      	lsls	r4, r3
 800024e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000252:	fa1f f58c 	uxth.w	r5, ip
 8000256:	fbb7 f1fe 	udiv	r1, r7, lr
 800025a:	0c22      	lsrs	r2, r4, #16
 800025c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000260:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000264:	fb01 f005 	mul.w	r0, r1, r5
 8000268:	4290      	cmp	r0, r2
 800026a:	d90a      	bls.n	8000282 <__udivmoddi4+0x62>
 800026c:	eb1c 0202 	adds.w	r2, ip, r2
 8000270:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000274:	f080 811c 	bcs.w	80004b0 <__udivmoddi4+0x290>
 8000278:	4290      	cmp	r0, r2
 800027a:	f240 8119 	bls.w	80004b0 <__udivmoddi4+0x290>
 800027e:	3902      	subs	r1, #2
 8000280:	4462      	add	r2, ip
 8000282:	1a12      	subs	r2, r2, r0
 8000284:	b2a4      	uxth	r4, r4
 8000286:	fbb2 f0fe 	udiv	r0, r2, lr
 800028a:	fb0e 2210 	mls	r2, lr, r0, r2
 800028e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000292:	fb00 f505 	mul.w	r5, r0, r5
 8000296:	42a5      	cmp	r5, r4
 8000298:	d90a      	bls.n	80002b0 <__udivmoddi4+0x90>
 800029a:	eb1c 0404 	adds.w	r4, ip, r4
 800029e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002a2:	f080 8107 	bcs.w	80004b4 <__udivmoddi4+0x294>
 80002a6:	42a5      	cmp	r5, r4
 80002a8:	f240 8104 	bls.w	80004b4 <__udivmoddi4+0x294>
 80002ac:	4464      	add	r4, ip
 80002ae:	3802      	subs	r0, #2
 80002b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002b4:	1b64      	subs	r4, r4, r5
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11e      	cbz	r6, 80002c2 <__udivmoddi4+0xa2>
 80002ba:	40dc      	lsrs	r4, r3
 80002bc:	2300      	movs	r3, #0
 80002be:	e9c6 4300 	strd	r4, r3, [r6]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d908      	bls.n	80002dc <__udivmoddi4+0xbc>
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	f000 80ed 	beq.w	80004aa <__udivmoddi4+0x28a>
 80002d0:	2100      	movs	r1, #0
 80002d2:	e9c6 0500 	strd	r0, r5, [r6]
 80002d6:	4608      	mov	r0, r1
 80002d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002dc:	fab3 f183 	clz	r1, r3
 80002e0:	2900      	cmp	r1, #0
 80002e2:	d149      	bne.n	8000378 <__udivmoddi4+0x158>
 80002e4:	42ab      	cmp	r3, r5
 80002e6:	d302      	bcc.n	80002ee <__udivmoddi4+0xce>
 80002e8:	4282      	cmp	r2, r0
 80002ea:	f200 80f8 	bhi.w	80004de <__udivmoddi4+0x2be>
 80002ee:	1a84      	subs	r4, r0, r2
 80002f0:	eb65 0203 	sbc.w	r2, r5, r3
 80002f4:	2001      	movs	r0, #1
 80002f6:	4617      	mov	r7, r2
 80002f8:	2e00      	cmp	r6, #0
 80002fa:	d0e2      	beq.n	80002c2 <__udivmoddi4+0xa2>
 80002fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000300:	e7df      	b.n	80002c2 <__udivmoddi4+0xa2>
 8000302:	b902      	cbnz	r2, 8000306 <__udivmoddi4+0xe6>
 8000304:	deff      	udf	#255	; 0xff
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	2b00      	cmp	r3, #0
 800030c:	f040 8090 	bne.w	8000430 <__udivmoddi4+0x210>
 8000310:	1a8a      	subs	r2, r1, r2
 8000312:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000316:	fa1f fe8c 	uxth.w	lr, ip
 800031a:	2101      	movs	r1, #1
 800031c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000320:	fb07 2015 	mls	r0, r7, r5, r2
 8000324:	0c22      	lsrs	r2, r4, #16
 8000326:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800032a:	fb0e f005 	mul.w	r0, lr, r5
 800032e:	4290      	cmp	r0, r2
 8000330:	d908      	bls.n	8000344 <__udivmoddi4+0x124>
 8000332:	eb1c 0202 	adds.w	r2, ip, r2
 8000336:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x122>
 800033c:	4290      	cmp	r0, r2
 800033e:	f200 80cb 	bhi.w	80004d8 <__udivmoddi4+0x2b8>
 8000342:	4645      	mov	r5, r8
 8000344:	1a12      	subs	r2, r2, r0
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb2 f0f7 	udiv	r0, r2, r7
 800034c:	fb07 2210 	mls	r2, r7, r0, r2
 8000350:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000354:	fb0e fe00 	mul.w	lr, lr, r0
 8000358:	45a6      	cmp	lr, r4
 800035a:	d908      	bls.n	800036e <__udivmoddi4+0x14e>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000364:	d202      	bcs.n	800036c <__udivmoddi4+0x14c>
 8000366:	45a6      	cmp	lr, r4
 8000368:	f200 80bb 	bhi.w	80004e2 <__udivmoddi4+0x2c2>
 800036c:	4610      	mov	r0, r2
 800036e:	eba4 040e 	sub.w	r4, r4, lr
 8000372:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000376:	e79f      	b.n	80002b8 <__udivmoddi4+0x98>
 8000378:	f1c1 0720 	rsb	r7, r1, #32
 800037c:	408b      	lsls	r3, r1
 800037e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000382:	ea4c 0c03 	orr.w	ip, ip, r3
 8000386:	fa05 f401 	lsl.w	r4, r5, r1
 800038a:	fa20 f307 	lsr.w	r3, r0, r7
 800038e:	40fd      	lsrs	r5, r7
 8000390:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000394:	4323      	orrs	r3, r4
 8000396:	fbb5 f8f9 	udiv	r8, r5, r9
 800039a:	fa1f fe8c 	uxth.w	lr, ip
 800039e:	fb09 5518 	mls	r5, r9, r8, r5
 80003a2:	0c1c      	lsrs	r4, r3, #16
 80003a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003a8:	fb08 f50e 	mul.w	r5, r8, lr
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	fa02 f201 	lsl.w	r2, r2, r1
 80003b2:	fa00 f001 	lsl.w	r0, r0, r1
 80003b6:	d90b      	bls.n	80003d0 <__udivmoddi4+0x1b0>
 80003b8:	eb1c 0404 	adds.w	r4, ip, r4
 80003bc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003c0:	f080 8088 	bcs.w	80004d4 <__udivmoddi4+0x2b4>
 80003c4:	42a5      	cmp	r5, r4
 80003c6:	f240 8085 	bls.w	80004d4 <__udivmoddi4+0x2b4>
 80003ca:	f1a8 0802 	sub.w	r8, r8, #2
 80003ce:	4464      	add	r4, ip
 80003d0:	1b64      	subs	r4, r4, r5
 80003d2:	b29d      	uxth	r5, r3
 80003d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003d8:	fb09 4413 	mls	r4, r9, r3, r4
 80003dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003e4:	45a6      	cmp	lr, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x1da>
 80003e8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ec:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003f0:	d26c      	bcs.n	80004cc <__udivmoddi4+0x2ac>
 80003f2:	45a6      	cmp	lr, r4
 80003f4:	d96a      	bls.n	80004cc <__udivmoddi4+0x2ac>
 80003f6:	3b02      	subs	r3, #2
 80003f8:	4464      	add	r4, ip
 80003fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000402:	eba4 040e 	sub.w	r4, r4, lr
 8000406:	42ac      	cmp	r4, r5
 8000408:	46c8      	mov	r8, r9
 800040a:	46ae      	mov	lr, r5
 800040c:	d356      	bcc.n	80004bc <__udivmoddi4+0x29c>
 800040e:	d053      	beq.n	80004b8 <__udivmoddi4+0x298>
 8000410:	b156      	cbz	r6, 8000428 <__udivmoddi4+0x208>
 8000412:	ebb0 0208 	subs.w	r2, r0, r8
 8000416:	eb64 040e 	sbc.w	r4, r4, lr
 800041a:	fa04 f707 	lsl.w	r7, r4, r7
 800041e:	40ca      	lsrs	r2, r1
 8000420:	40cc      	lsrs	r4, r1
 8000422:	4317      	orrs	r7, r2
 8000424:	e9c6 7400 	strd	r7, r4, [r6]
 8000428:	4618      	mov	r0, r3
 800042a:	2100      	movs	r1, #0
 800042c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000430:	f1c3 0120 	rsb	r1, r3, #32
 8000434:	fa02 fc03 	lsl.w	ip, r2, r3
 8000438:	fa20 f201 	lsr.w	r2, r0, r1
 800043c:	fa25 f101 	lsr.w	r1, r5, r1
 8000440:	409d      	lsls	r5, r3
 8000442:	432a      	orrs	r2, r5
 8000444:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000450:	fb07 1510 	mls	r5, r7, r0, r1
 8000454:	0c11      	lsrs	r1, r2, #16
 8000456:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800045a:	fb00 f50e 	mul.w	r5, r0, lr
 800045e:	428d      	cmp	r5, r1
 8000460:	fa04 f403 	lsl.w	r4, r4, r3
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x258>
 8000466:	eb1c 0101 	adds.w	r1, ip, r1
 800046a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800046e:	d22f      	bcs.n	80004d0 <__udivmoddi4+0x2b0>
 8000470:	428d      	cmp	r5, r1
 8000472:	d92d      	bls.n	80004d0 <__udivmoddi4+0x2b0>
 8000474:	3802      	subs	r0, #2
 8000476:	4461      	add	r1, ip
 8000478:	1b49      	subs	r1, r1, r5
 800047a:	b292      	uxth	r2, r2
 800047c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000480:	fb07 1115 	mls	r1, r7, r5, r1
 8000484:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000488:	fb05 f10e 	mul.w	r1, r5, lr
 800048c:	4291      	cmp	r1, r2
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x282>
 8000490:	eb1c 0202 	adds.w	r2, ip, r2
 8000494:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000498:	d216      	bcs.n	80004c8 <__udivmoddi4+0x2a8>
 800049a:	4291      	cmp	r1, r2
 800049c:	d914      	bls.n	80004c8 <__udivmoddi4+0x2a8>
 800049e:	3d02      	subs	r5, #2
 80004a0:	4462      	add	r2, ip
 80004a2:	1a52      	subs	r2, r2, r1
 80004a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004a8:	e738      	b.n	800031c <__udivmoddi4+0xfc>
 80004aa:	4631      	mov	r1, r6
 80004ac:	4630      	mov	r0, r6
 80004ae:	e708      	b.n	80002c2 <__udivmoddi4+0xa2>
 80004b0:	4639      	mov	r1, r7
 80004b2:	e6e6      	b.n	8000282 <__udivmoddi4+0x62>
 80004b4:	4610      	mov	r0, r2
 80004b6:	e6fb      	b.n	80002b0 <__udivmoddi4+0x90>
 80004b8:	4548      	cmp	r0, r9
 80004ba:	d2a9      	bcs.n	8000410 <__udivmoddi4+0x1f0>
 80004bc:	ebb9 0802 	subs.w	r8, r9, r2
 80004c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004c4:	3b01      	subs	r3, #1
 80004c6:	e7a3      	b.n	8000410 <__udivmoddi4+0x1f0>
 80004c8:	4645      	mov	r5, r8
 80004ca:	e7ea      	b.n	80004a2 <__udivmoddi4+0x282>
 80004cc:	462b      	mov	r3, r5
 80004ce:	e794      	b.n	80003fa <__udivmoddi4+0x1da>
 80004d0:	4640      	mov	r0, r8
 80004d2:	e7d1      	b.n	8000478 <__udivmoddi4+0x258>
 80004d4:	46d0      	mov	r8, sl
 80004d6:	e77b      	b.n	80003d0 <__udivmoddi4+0x1b0>
 80004d8:	3d02      	subs	r5, #2
 80004da:	4462      	add	r2, ip
 80004dc:	e732      	b.n	8000344 <__udivmoddi4+0x124>
 80004de:	4608      	mov	r0, r1
 80004e0:	e70a      	b.n	80002f8 <__udivmoddi4+0xd8>
 80004e2:	4464      	add	r4, ip
 80004e4:	3802      	subs	r0, #2
 80004e6:	e742      	b.n	800036e <__udivmoddi4+0x14e>

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f0:	f000 fc43 	bl	8000d7a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f4:	f000 f828 	bl	8000548 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f8:	f000 f906 	bl	8000708 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 80004fc:	f000 f888 	bl	8000610 <MX_LPUART1_UART_Init>
  MX_TIM2_Init();
 8000500:	f000 f8b4 	bl	800066c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000504:	f007 fc88 	bl	8007e18 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000508:	4a09      	ldr	r2, [pc, #36]	; (8000530 <main+0x44>)
 800050a:	2100      	movs	r1, #0
 800050c:	4809      	ldr	r0, [pc, #36]	; (8000534 <main+0x48>)
 800050e:	f007 fccd 	bl	8007eac <osThreadNew>
 8000512:	4603      	mov	r3, r0
 8000514:	4a08      	ldr	r2, [pc, #32]	; (8000538 <main+0x4c>)
 8000516:	6013      	str	r3, [r2, #0]
  checkkeysTaskHandle = osThreadNew(checkkeys, NULL,&checkkeysTaskHandle_attributes);
 8000518:	4a08      	ldr	r2, [pc, #32]	; (800053c <main+0x50>)
 800051a:	2100      	movs	r1, #0
 800051c:	4808      	ldr	r0, [pc, #32]	; (8000540 <main+0x54>)
 800051e:	f007 fcc5 	bl	8007eac <osThreadNew>
 8000522:	4603      	mov	r3, r0
 8000524:	4a07      	ldr	r2, [pc, #28]	; (8000544 <main+0x58>)
 8000526:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000528:	f007 fc9a 	bl	8007e60 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800052c:	e7fe      	b.n	800052c <main+0x40>
 800052e:	bf00      	nop
 8000530:	0800b4d8 	.word	0x0800b4d8
 8000534:	08000b3d 	.word	0x08000b3d
 8000538:	20000220 	.word	0x20000220
 800053c:	0800b4fc 	.word	0x0800b4fc
 8000540:	080008f9 	.word	0x080008f9
 8000544:	20000224 	.word	0x20000224

08000548 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b096      	sub	sp, #88	; 0x58
 800054c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800054e:	f107 0314 	add.w	r3, r7, #20
 8000552:	2244      	movs	r2, #68	; 0x44
 8000554:	2100      	movs	r1, #0
 8000556:	4618      	mov	r0, r3
 8000558:	f00a ff3a 	bl	800b3d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800055c:	463b      	mov	r3, r7
 800055e:	2200      	movs	r2, #0
 8000560:	601a      	str	r2, [r3, #0]
 8000562:	605a      	str	r2, [r3, #4]
 8000564:	609a      	str	r2, [r3, #8]
 8000566:	60da      	str	r2, [r3, #12]
 8000568:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800056a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800056e:	f002 f907 	bl	8002780 <HAL_PWREx_ControlVoltageScaling>
 8000572:	4603      	mov	r3, r0
 8000574:	2b00      	cmp	r3, #0
 8000576:	d001      	beq.n	800057c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000578:	f000 faea 	bl	8000b50 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800057c:	f002 f8e2 	bl	8002744 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000580:	4b22      	ldr	r3, [pc, #136]	; (800060c <SystemClock_Config+0xc4>)
 8000582:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000586:	4a21      	ldr	r2, [pc, #132]	; (800060c <SystemClock_Config+0xc4>)
 8000588:	f023 0318 	bic.w	r3, r3, #24
 800058c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000590:	2314      	movs	r3, #20
 8000592:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000594:	2301      	movs	r3, #1
 8000596:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000598:	2301      	movs	r3, #1
 800059a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800059c:	2300      	movs	r3, #0
 800059e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80005a0:	2360      	movs	r3, #96	; 0x60
 80005a2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005a4:	2302      	movs	r3, #2
 80005a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80005a8:	2301      	movs	r3, #1
 80005aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005ac:	2301      	movs	r3, #1
 80005ae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 71;
 80005b0:	2347      	movs	r3, #71	; 0x47
 80005b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005b4:	2302      	movs	r3, #2
 80005b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005b8:	2302      	movs	r3, #2
 80005ba:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV6;
 80005bc:	2306      	movs	r3, #6
 80005be:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c0:	f107 0314 	add.w	r3, r7, #20
 80005c4:	4618      	mov	r0, r3
 80005c6:	f002 f951 	bl	800286c <HAL_RCC_OscConfig>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d001      	beq.n	80005d4 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80005d0:	f000 fabe 	bl	8000b50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d4:	230f      	movs	r3, #15
 80005d6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005d8:	2303      	movs	r3, #3
 80005da:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005dc:	2300      	movs	r3, #0
 80005de:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005e4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005e6:	2300      	movs	r3, #0
 80005e8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005ea:	463b      	mov	r3, r7
 80005ec:	2102      	movs	r1, #2
 80005ee:	4618      	mov	r0, r3
 80005f0:	f002 fd56 	bl	80030a0 <HAL_RCC_ClockConfig>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80005fa:	f000 faa9 	bl	8000b50 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80005fe:	f003 fa6f 	bl	8003ae0 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000602:	bf00      	nop
 8000604:	3758      	adds	r7, #88	; 0x58
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	40021000 	.word	0x40021000

08000610 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000614:	4b12      	ldr	r3, [pc, #72]	; (8000660 <MX_LPUART1_UART_Init+0x50>)
 8000616:	4a13      	ldr	r2, [pc, #76]	; (8000664 <MX_LPUART1_UART_Init+0x54>)
 8000618:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 800061a:	4b11      	ldr	r3, [pc, #68]	; (8000660 <MX_LPUART1_UART_Init+0x50>)
 800061c:	4a12      	ldr	r2, [pc, #72]	; (8000668 <MX_LPUART1_UART_Init+0x58>)
 800061e:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 8000620:	4b0f      	ldr	r3, [pc, #60]	; (8000660 <MX_LPUART1_UART_Init+0x50>)
 8000622:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000626:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000628:	4b0d      	ldr	r3, [pc, #52]	; (8000660 <MX_LPUART1_UART_Init+0x50>)
 800062a:	2200      	movs	r2, #0
 800062c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800062e:	4b0c      	ldr	r3, [pc, #48]	; (8000660 <MX_LPUART1_UART_Init+0x50>)
 8000630:	2200      	movs	r2, #0
 8000632:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000634:	4b0a      	ldr	r3, [pc, #40]	; (8000660 <MX_LPUART1_UART_Init+0x50>)
 8000636:	220c      	movs	r2, #12
 8000638:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800063a:	4b09      	ldr	r3, [pc, #36]	; (8000660 <MX_LPUART1_UART_Init+0x50>)
 800063c:	2200      	movs	r2, #0
 800063e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000640:	4b07      	ldr	r3, [pc, #28]	; (8000660 <MX_LPUART1_UART_Init+0x50>)
 8000642:	2200      	movs	r2, #0
 8000644:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000646:	4b06      	ldr	r3, [pc, #24]	; (8000660 <MX_LPUART1_UART_Init+0x50>)
 8000648:	2200      	movs	r2, #0
 800064a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800064c:	4804      	ldr	r0, [pc, #16]	; (8000660 <MX_LPUART1_UART_Init+0x50>)
 800064e:	f003 ff01 	bl	8004454 <HAL_UART_Init>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8000658:	f000 fa7a 	bl	8000b50 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800065c:	bf00      	nop
 800065e:	bd80      	pop	{r7, pc}
 8000660:	2000014c 	.word	0x2000014c
 8000664:	40008000 	.word	0x40008000
 8000668:	00033324 	.word	0x00033324

0800066c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b088      	sub	sp, #32
 8000670:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000672:	f107 0310 	add.w	r3, r7, #16
 8000676:	2200      	movs	r2, #0
 8000678:	601a      	str	r2, [r3, #0]
 800067a:	605a      	str	r2, [r3, #4]
 800067c:	609a      	str	r2, [r3, #8]
 800067e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000680:	1d3b      	adds	r3, r7, #4
 8000682:	2200      	movs	r2, #0
 8000684:	601a      	str	r2, [r3, #0]
 8000686:	605a      	str	r2, [r3, #4]
 8000688:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800068a:	4b1e      	ldr	r3, [pc, #120]	; (8000704 <MX_TIM2_Init+0x98>)
 800068c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000690:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000692:	4b1c      	ldr	r3, [pc, #112]	; (8000704 <MX_TIM2_Init+0x98>)
 8000694:	2200      	movs	r2, #0
 8000696:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000698:	4b1a      	ldr	r3, [pc, #104]	; (8000704 <MX_TIM2_Init+0x98>)
 800069a:	2200      	movs	r2, #0
 800069c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800069e:	4b19      	ldr	r3, [pc, #100]	; (8000704 <MX_TIM2_Init+0x98>)
 80006a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80006a4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006a6:	4b17      	ldr	r3, [pc, #92]	; (8000704 <MX_TIM2_Init+0x98>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006ac:	4b15      	ldr	r3, [pc, #84]	; (8000704 <MX_TIM2_Init+0x98>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80006b2:	4814      	ldr	r0, [pc, #80]	; (8000704 <MX_TIM2_Init+0x98>)
 80006b4:	f003 fbf2 	bl	8003e9c <HAL_TIM_Base_Init>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80006be:	f000 fa47 	bl	8000b50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006c6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80006c8:	f107 0310 	add.w	r3, r7, #16
 80006cc:	4619      	mov	r1, r3
 80006ce:	480d      	ldr	r0, [pc, #52]	; (8000704 <MX_TIM2_Init+0x98>)
 80006d0:	f003 fc3b 	bl	8003f4a <HAL_TIM_ConfigClockSource>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80006da:	f000 fa39 	bl	8000b50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006de:	2300      	movs	r3, #0
 80006e0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006e2:	2300      	movs	r3, #0
 80006e4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80006e6:	1d3b      	adds	r3, r7, #4
 80006e8:	4619      	mov	r1, r3
 80006ea:	4806      	ldr	r0, [pc, #24]	; (8000704 <MX_TIM2_Init+0x98>)
 80006ec:	f003 fe2a 	bl	8004344 <HAL_TIMEx_MasterConfigSynchronization>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80006f6:	f000 fa2b 	bl	8000b50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80006fa:	bf00      	nop
 80006fc:	3720      	adds	r7, #32
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	200001d4 	.word	0x200001d4

08000708 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b08c      	sub	sp, #48	; 0x30
 800070c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800070e:	f107 031c 	add.w	r3, r7, #28
 8000712:	2200      	movs	r2, #0
 8000714:	601a      	str	r2, [r3, #0]
 8000716:	605a      	str	r2, [r3, #4]
 8000718:	609a      	str	r2, [r3, #8]
 800071a:	60da      	str	r2, [r3, #12]
 800071c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800071e:	4b70      	ldr	r3, [pc, #448]	; (80008e0 <MX_GPIO_Init+0x1d8>)
 8000720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000722:	4a6f      	ldr	r2, [pc, #444]	; (80008e0 <MX_GPIO_Init+0x1d8>)
 8000724:	f043 0304 	orr.w	r3, r3, #4
 8000728:	64d3      	str	r3, [r2, #76]	; 0x4c
 800072a:	4b6d      	ldr	r3, [pc, #436]	; (80008e0 <MX_GPIO_Init+0x1d8>)
 800072c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800072e:	f003 0304 	and.w	r3, r3, #4
 8000732:	61bb      	str	r3, [r7, #24]
 8000734:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000736:	4b6a      	ldr	r3, [pc, #424]	; (80008e0 <MX_GPIO_Init+0x1d8>)
 8000738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800073a:	4a69      	ldr	r2, [pc, #420]	; (80008e0 <MX_GPIO_Init+0x1d8>)
 800073c:	f043 0320 	orr.w	r3, r3, #32
 8000740:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000742:	4b67      	ldr	r3, [pc, #412]	; (80008e0 <MX_GPIO_Init+0x1d8>)
 8000744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000746:	f003 0320 	and.w	r3, r3, #32
 800074a:	617b      	str	r3, [r7, #20]
 800074c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800074e:	4b64      	ldr	r3, [pc, #400]	; (80008e0 <MX_GPIO_Init+0x1d8>)
 8000750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000752:	4a63      	ldr	r2, [pc, #396]	; (80008e0 <MX_GPIO_Init+0x1d8>)
 8000754:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000758:	64d3      	str	r3, [r2, #76]	; 0x4c
 800075a:	4b61      	ldr	r3, [pc, #388]	; (80008e0 <MX_GPIO_Init+0x1d8>)
 800075c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800075e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000762:	613b      	str	r3, [r7, #16]
 8000764:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000766:	4b5e      	ldr	r3, [pc, #376]	; (80008e0 <MX_GPIO_Init+0x1d8>)
 8000768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800076a:	4a5d      	ldr	r2, [pc, #372]	; (80008e0 <MX_GPIO_Init+0x1d8>)
 800076c:	f043 0301 	orr.w	r3, r3, #1
 8000770:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000772:	4b5b      	ldr	r3, [pc, #364]	; (80008e0 <MX_GPIO_Init+0x1d8>)
 8000774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000776:	f003 0301 	and.w	r3, r3, #1
 800077a:	60fb      	str	r3, [r7, #12]
 800077c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800077e:	4b58      	ldr	r3, [pc, #352]	; (80008e0 <MX_GPIO_Init+0x1d8>)
 8000780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000782:	4a57      	ldr	r2, [pc, #348]	; (80008e0 <MX_GPIO_Init+0x1d8>)
 8000784:	f043 0302 	orr.w	r3, r3, #2
 8000788:	64d3      	str	r3, [r2, #76]	; 0x4c
 800078a:	4b55      	ldr	r3, [pc, #340]	; (80008e0 <MX_GPIO_Init+0x1d8>)
 800078c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800078e:	f003 0302 	and.w	r3, r3, #2
 8000792:	60bb      	str	r3, [r7, #8]
 8000794:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000796:	4b52      	ldr	r3, [pc, #328]	; (80008e0 <MX_GPIO_Init+0x1d8>)
 8000798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800079a:	4a51      	ldr	r2, [pc, #324]	; (80008e0 <MX_GPIO_Init+0x1d8>)
 800079c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007a2:	4b4f      	ldr	r3, [pc, #316]	; (80008e0 <MX_GPIO_Init+0x1d8>)
 80007a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007aa:	607b      	str	r3, [r7, #4]
 80007ac:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 80007ae:	f002 f84d 	bl	800284c <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007b2:	4b4b      	ldr	r3, [pc, #300]	; (80008e0 <MX_GPIO_Init+0x1d8>)
 80007b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007b6:	4a4a      	ldr	r2, [pc, #296]	; (80008e0 <MX_GPIO_Init+0x1d8>)
 80007b8:	f043 0308 	orr.w	r3, r3, #8
 80007bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007be:	4b48      	ldr	r3, [pc, #288]	; (80008e0 <MX_GPIO_Init+0x1d8>)
 80007c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007c2:	f003 0308 	and.w	r3, r3, #8
 80007c6:	603b      	str	r3, [r7, #0]
 80007c8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(driverpin_GPIO_Port, driverpin_Pin, GPIO_PIN_RESET);
 80007ca:	2200      	movs	r2, #0
 80007cc:	2108      	movs	r1, #8
 80007ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007d2:	f000 fe0f 	bl	80013f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80007d6:	2200      	movs	r2, #0
 80007d8:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 80007dc:	4841      	ldr	r0, [pc, #260]	; (80008e4 <MX_GPIO_Init+0x1dc>)
 80007de:	f000 fe09 	bl	80013f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80007e2:	2200      	movs	r2, #0
 80007e4:	2140      	movs	r1, #64	; 0x40
 80007e6:	4840      	ldr	r0, [pc, #256]	; (80008e8 <MX_GPIO_Init+0x1e0>)
 80007e8:	f000 fe04 	bl	80013f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007f2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80007f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f8:	2300      	movs	r3, #0
 80007fa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007fc:	f107 031c 	add.w	r3, r7, #28
 8000800:	4619      	mov	r1, r3
 8000802:	483a      	ldr	r0, [pc, #232]	; (80008ec <MX_GPIO_Init+0x1e4>)
 8000804:	f000 fc64 	bl	80010d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : btnLEFT_Pin btnDOWN_Pin */
  GPIO_InitStruct.Pin = btnLEFT_Pin|btnDOWN_Pin;
 8000808:	2306      	movs	r3, #6
 800080a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800080c:	2300      	movs	r3, #0
 800080e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000810:	2300      	movs	r3, #0
 8000812:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000814:	f107 031c 	add.w	r3, r7, #28
 8000818:	4619      	mov	r1, r3
 800081a:	4835      	ldr	r0, [pc, #212]	; (80008f0 <MX_GPIO_Init+0x1e8>)
 800081c:	f000 fc58 	bl	80010d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : btnA_Pin btnX_Pin btnB_Pin btnY_Pin
                           btnSTART_Pin */
  GPIO_InitStruct.Pin = btnA_Pin|btnX_Pin|btnB_Pin|btnY_Pin
 8000820:	233b      	movs	r3, #59	; 0x3b
 8000822:	61fb      	str	r3, [r7, #28]
                          |btnSTART_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000824:	2300      	movs	r3, #0
 8000826:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000828:	2300      	movs	r3, #0
 800082a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800082c:	f107 031c 	add.w	r3, r7, #28
 8000830:	4619      	mov	r1, r3
 8000832:	482e      	ldr	r0, [pc, #184]	; (80008ec <MX_GPIO_Init+0x1e4>)
 8000834:	f000 fc4c 	bl	80010d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : driverpin_Pin */
  GPIO_InitStruct.Pin = driverpin_Pin;
 8000838:	2308      	movs	r3, #8
 800083a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800083c:	2301      	movs	r3, #1
 800083e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000840:	2300      	movs	r3, #0
 8000842:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000844:	2300      	movs	r3, #0
 8000846:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(driverpin_GPIO_Port, &GPIO_InitStruct);
 8000848:	f107 031c 	add.w	r3, r7, #28
 800084c:	4619      	mov	r1, r3
 800084e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000852:	f000 fc3d 	bl	80010d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : btnSELECT_Pin btnUP_Pin */
  GPIO_InitStruct.Pin = btnSELECT_Pin|btnUP_Pin;
 8000856:	2344      	movs	r3, #68	; 0x44
 8000858:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800085a:	2300      	movs	r3, #0
 800085c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085e:	2300      	movs	r3, #0
 8000860:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000862:	f107 031c 	add.w	r3, r7, #28
 8000866:	4619      	mov	r1, r3
 8000868:	481e      	ldr	r0, [pc, #120]	; (80008e4 <MX_GPIO_Init+0x1dc>)
 800086a:	f000 fc31 	bl	80010d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 800086e:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000872:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000874:	2301      	movs	r3, #1
 8000876:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000878:	2300      	movs	r3, #0
 800087a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087c:	2300      	movs	r3, #0
 800087e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000880:	f107 031c 	add.w	r3, r7, #28
 8000884:	4619      	mov	r1, r3
 8000886:	4817      	ldr	r0, [pc, #92]	; (80008e4 <MX_GPIO_Init+0x1dc>)
 8000888:	f000 fc22 	bl	80010d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800088c:	2320      	movs	r3, #32
 800088e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000890:	2300      	movs	r3, #0
 8000892:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000894:	2300      	movs	r3, #0
 8000896:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000898:	f107 031c 	add.w	r3, r7, #28
 800089c:	4619      	mov	r1, r3
 800089e:	4812      	ldr	r0, [pc, #72]	; (80008e8 <MX_GPIO_Init+0x1e0>)
 80008a0:	f000 fc16 	bl	80010d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008a4:	2340      	movs	r3, #64	; 0x40
 80008a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a8:	2301      	movs	r3, #1
 80008aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ac:	2300      	movs	r3, #0
 80008ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b0:	2300      	movs	r3, #0
 80008b2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008b4:	f107 031c 	add.w	r3, r7, #28
 80008b8:	4619      	mov	r1, r3
 80008ba:	480b      	ldr	r0, [pc, #44]	; (80008e8 <MX_GPIO_Init+0x1e0>)
 80008bc:	f000 fc08 	bl	80010d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : HOTKEY_Pin btnRIGHT_Pin */
  GPIO_InitStruct.Pin = HOTKEY_Pin|btnRIGHT_Pin;
 80008c0:	23c0      	movs	r3, #192	; 0xc0
 80008c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008c4:	2300      	movs	r3, #0
 80008c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c8:	2300      	movs	r3, #0
 80008ca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008cc:	f107 031c 	add.w	r3, r7, #28
 80008d0:	4619      	mov	r1, r3
 80008d2:	4808      	ldr	r0, [pc, #32]	; (80008f4 <MX_GPIO_Init+0x1ec>)
 80008d4:	f000 fbfc 	bl	80010d0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008d8:	bf00      	nop
 80008da:	3730      	adds	r7, #48	; 0x30
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	40021000 	.word	0x40021000
 80008e4:	48000400 	.word	0x48000400
 80008e8:	48001800 	.word	0x48001800
 80008ec:	48000800 	.word	0x48000800
 80008f0:	48001400 	.word	0x48001400
 80008f4:	48000c00 	.word	0x48000c00

080008f8 <checkkeys>:

/* USER CODE BEGIN 4 */
void checkkeys(void *argument)
{
 80008f8:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 80008fc:	b0b3      	sub	sp, #204	; 0xcc
 80008fe:	af00      	add	r7, sp, #0
 8000900:	6078      	str	r0, [r7, #4]
	// setup the list of keys
	const uint8_t keycount = 11; // 4 buttons + 4 directional + start + select + hotkey
 8000902:	230b      	movs	r3, #11
 8000904:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7

	// A button
	capkey_t buttonA;
	buttonA.pinIndex = 0;
 8000908:	2300      	movs	r3, #0
 800090a:	f887 30ae 	strb.w	r3, [r7, #174]	; 0xae
	//buttonA.pinName = "btnA";
	buttonA.gpioport = btnA_GPIO_Port;
 800090e:	4b87      	ldr	r3, [pc, #540]	; (8000b2c <checkkeys+0x234>)
 8000910:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	buttonA.gpiopin = btnA_Pin;
 8000914:	2301      	movs	r3, #1
 8000916:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
	buttonA.triggerTime = 3000;
 800091a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800091e:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

	// B button
	capkey_t buttonB;
	buttonB.pinIndex = 1;
 8000922:	2301      	movs	r3, #1
 8000924:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
	buttonB.gpioport = btnB_GPIO_Port;
 8000928:	4b80      	ldr	r3, [pc, #512]	; (8000b2c <checkkeys+0x234>)
 800092a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	buttonB.gpiopin = btnB_Pin;
 800092e:	2308      	movs	r3, #8
 8000930:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
	buttonB.triggerTime = 3000;
 8000934:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000938:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6

	// X button
	capkey_t buttonX;
	buttonX.pinIndex = 2;
 800093c:	2302      	movs	r3, #2
 800093e:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
	buttonX.gpioport = btnX_GPIO_Port;
 8000942:	4b7a      	ldr	r3, [pc, #488]	; (8000b2c <checkkeys+0x234>)
 8000944:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	buttonX.gpiopin = btnX_Pin;
 8000948:	2302      	movs	r3, #2
 800094a:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
	buttonX.triggerTime = 3000;
 800094e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000952:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

	// Y button
	capkey_t buttonY;
	buttonY.pinIndex = 3;
 8000956:	2303      	movs	r3, #3
 8000958:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
	buttonY.gpioport = btnY_GPIO_Port;
 800095c:	4b73      	ldr	r3, [pc, #460]	; (8000b2c <checkkeys+0x234>)
 800095e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	buttonY.gpiopin = btnY_Pin;
 8000962:	2310      	movs	r3, #16
 8000964:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
	buttonY.triggerTime = 3000;
 8000968:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800096c:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

	// up button
	capkey_t buttonUp;
	buttonUp.pinIndex = 4;
 8000970:	2304      	movs	r3, #4
 8000972:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
	buttonUp.gpioport = btnUP_GPIO_Port;
 8000976:	4b6e      	ldr	r3, [pc, #440]	; (8000b30 <checkkeys+0x238>)
 8000978:	673b      	str	r3, [r7, #112]	; 0x70
	buttonUp.gpiopin = btnUP_Pin;
 800097a:	2340      	movs	r3, #64	; 0x40
 800097c:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
	buttonUp.triggerTime = 3000;
 8000980:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000984:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

	// down button
	capkey_t buttonDown;
	buttonUp.pinIndex = 5;
 8000988:	2305      	movs	r3, #5
 800098a:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
	buttonUp.gpioport = btnDOWN_GPIO_Port;
 800098e:	4b69      	ldr	r3, [pc, #420]	; (8000b34 <checkkeys+0x23c>)
 8000990:	673b      	str	r3, [r7, #112]	; 0x70
	buttonUp.gpiopin = btnDOWN_Pin;
 8000992:	2304      	movs	r3, #4
 8000994:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
	buttonUp.triggerTime = 3000;
 8000998:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800099c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

	// left button
	capkey_t buttonLeft;
	buttonUp.pinIndex = 6;
 80009a0:	2306      	movs	r3, #6
 80009a2:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
	buttonUp.gpioport = btnLEFT_GPIO_Port;
 80009a6:	4b63      	ldr	r3, [pc, #396]	; (8000b34 <checkkeys+0x23c>)
 80009a8:	673b      	str	r3, [r7, #112]	; 0x70
	buttonUp.gpiopin = btnLEFT_Pin;
 80009aa:	2302      	movs	r3, #2
 80009ac:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
	buttonUp.triggerTime = 3000;
 80009b0:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80009b4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

	// right button
	capkey_t buttonRight;
	buttonUp.pinIndex = 7;
 80009b8:	2307      	movs	r3, #7
 80009ba:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
	buttonUp.gpioport = btnRIGHT_GPIO_Port;
 80009be:	4b5e      	ldr	r3, [pc, #376]	; (8000b38 <checkkeys+0x240>)
 80009c0:	673b      	str	r3, [r7, #112]	; 0x70
	buttonUp.gpiopin = btnRIGHT_Pin;
 80009c2:	2380      	movs	r3, #128	; 0x80
 80009c4:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
	buttonUp.triggerTime = 3000;
 80009c8:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80009cc:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

	// select button
	capkey_t buttonSelect;
	buttonSelect.pinIndex = 8;
 80009d0:	2308      	movs	r3, #8
 80009d2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	buttonSelect.gpioport = btnSELECT_GPIO_Port;
 80009d6:	4b56      	ldr	r3, [pc, #344]	; (8000b30 <checkkeys+0x238>)
 80009d8:	633b      	str	r3, [r7, #48]	; 0x30
	buttonSelect.gpiopin = btnSELECT_Pin;
 80009da:	2304      	movs	r3, #4
 80009dc:	86bb      	strh	r3, [r7, #52]	; 0x34
	buttonSelect.triggerTime = 3000;
 80009de:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80009e2:	86fb      	strh	r3, [r7, #54]	; 0x36

	// start button
	capkey_t buttonStart;
	buttonStart.pinIndex = 9;
 80009e4:	2309      	movs	r3, #9
 80009e6:	77bb      	strb	r3, [r7, #30]
	buttonStart.gpioport = btnSTART_GPIO_Port;
 80009e8:	4b50      	ldr	r3, [pc, #320]	; (8000b2c <checkkeys+0x234>)
 80009ea:	623b      	str	r3, [r7, #32]
	buttonStart.gpiopin = btnSTART_Pin;
 80009ec:	2320      	movs	r3, #32
 80009ee:	84bb      	strh	r3, [r7, #36]	; 0x24
	buttonStart.triggerTime = 3000;
 80009f0:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80009f4:	84fb      	strh	r3, [r7, #38]	; 0x26

	// HOTKEY
	capkey_t buttonHotkey;
	buttonHotkey.pinIndex = 10;
 80009f6:	230a      	movs	r3, #10
 80009f8:	73bb      	strb	r3, [r7, #14]
	buttonHotkey.gpioport = HOTKEY_GPIO_Port;
 80009fa:	4b4f      	ldr	r3, [pc, #316]	; (8000b38 <checkkeys+0x240>)
 80009fc:	613b      	str	r3, [r7, #16]
	buttonHotkey.gpiopin = HOTKEY_Pin;
 80009fe:	2340      	movs	r3, #64	; 0x40
 8000a00:	82bb      	strh	r3, [r7, #20]
	buttonHotkey.triggerTime = 3000;
 8000a02:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000a06:	82fb      	strh	r3, [r7, #22]

	capkey_t buttons[keycount];
 8000a08:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8000a0c:	3b01      	subs	r3, #1
 8000a0e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8000a12:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8000a16:	2200      	movs	r2, #0
 8000a18:	4698      	mov	r8, r3
 8000a1a:	4691      	mov	r9, r2
 8000a1c:	f04f 0200 	mov.w	r2, #0
 8000a20:	f04f 0300 	mov.w	r3, #0
 8000a24:	ea4f 13c9 	mov.w	r3, r9, lsl #7
 8000a28:	ea43 6358 	orr.w	r3, r3, r8, lsr #25
 8000a2c:	ea4f 12c8 	mov.w	r2, r8, lsl #7
 8000a30:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8000a34:	2200      	movs	r2, #0
 8000a36:	461c      	mov	r4, r3
 8000a38:	4615      	mov	r5, r2
 8000a3a:	f04f 0200 	mov.w	r2, #0
 8000a3e:	f04f 0300 	mov.w	r3, #0
 8000a42:	01eb      	lsls	r3, r5, #7
 8000a44:	ea43 6354 	orr.w	r3, r3, r4, lsr #25
 8000a48:	01e2      	lsls	r2, r4, #7
 8000a4a:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8000a4e:	011b      	lsls	r3, r3, #4
 8000a50:	3307      	adds	r3, #7
 8000a52:	08db      	lsrs	r3, r3, #3
 8000a54:	00db      	lsls	r3, r3, #3
 8000a56:	ebad 0d03 	sub.w	sp, sp, r3
 8000a5a:	466b      	mov	r3, sp
 8000a5c:	3303      	adds	r3, #3
 8000a5e:	089b      	lsrs	r3, r3, #2
 8000a60:	009b      	lsls	r3, r3, #2
 8000a62:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	buttons[0] = buttonA;
 8000a66:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8000a6a:	461c      	mov	r4, r3
 8000a6c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000a70:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a72:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	buttons[1] = buttonB;
 8000a76:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8000a7a:	f103 0410 	add.w	r4, r3, #16
 8000a7e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a82:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a84:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	buttons[2] = buttonX;
 8000a88:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8000a8c:	f103 0420 	add.w	r4, r3, #32
 8000a90:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000a94:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a96:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	buttons[3] = buttonY;
 8000a9a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8000a9e:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8000aa2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000aa6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000aa8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	buttons[4] = buttonUp;
 8000aac:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8000ab0:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8000ab4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000ab8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000aba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	buttons[5] = buttonDown;
 8000abe:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8000ac2:	f103 0450 	add.w	r4, r3, #80	; 0x50
 8000ac6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000aca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000acc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	buttons[6] = buttonLeft;
 8000ad0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8000ad4:	f103 0460 	add.w	r4, r3, #96	; 0x60
 8000ad8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000adc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ade:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	buttons[7] = buttonRight;
 8000ae2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8000ae6:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8000aea:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000aee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000af0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	buttons[8] = buttonSelect;
 8000af4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8000af8:	f103 0480 	add.w	r4, r3, #128	; 0x80
 8000afc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b00:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b02:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	buttons[9] = buttonStart;
 8000b06:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8000b0a:	f103 0490 	add.w	r4, r3, #144	; 0x90
 8000b0e:	f107 031c 	add.w	r3, r7, #28
 8000b12:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b14:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	buttons[10] = buttonHotkey;
 8000b18:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8000b1c:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 8000b20:	f107 030c 	add.w	r3, r7, #12
 8000b24:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b26:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	// and then interate through that list
	for(;;)
 8000b2a:	e7fe      	b.n	8000b2a <checkkeys+0x232>
 8000b2c:	48000800 	.word	0x48000800
 8000b30:	48000400 	.word	0x48000400
 8000b34:	48001400 	.word	0x48001400
 8000b38:	48000c00 	.word	0x48000c00

08000b3c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000b44:	f009 feba 	bl	800a8bc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000b48:	2001      	movs	r0, #1
 8000b4a:	f007 fa41 	bl	8007fd0 <osDelay>
 8000b4e:	e7fb      	b.n	8000b48 <StartDefaultTask+0xc>

08000b50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b54:	b672      	cpsid	i
}
 8000b56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b58:	e7fe      	b.n	8000b58 <Error_Handler+0x8>
	...

08000b5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b62:	4b11      	ldr	r3, [pc, #68]	; (8000ba8 <HAL_MspInit+0x4c>)
 8000b64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b66:	4a10      	ldr	r2, [pc, #64]	; (8000ba8 <HAL_MspInit+0x4c>)
 8000b68:	f043 0301 	orr.w	r3, r3, #1
 8000b6c:	6613      	str	r3, [r2, #96]	; 0x60
 8000b6e:	4b0e      	ldr	r3, [pc, #56]	; (8000ba8 <HAL_MspInit+0x4c>)
 8000b70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b72:	f003 0301 	and.w	r3, r3, #1
 8000b76:	607b      	str	r3, [r7, #4]
 8000b78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b7a:	4b0b      	ldr	r3, [pc, #44]	; (8000ba8 <HAL_MspInit+0x4c>)
 8000b7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b7e:	4a0a      	ldr	r2, [pc, #40]	; (8000ba8 <HAL_MspInit+0x4c>)
 8000b80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b84:	6593      	str	r3, [r2, #88]	; 0x58
 8000b86:	4b08      	ldr	r3, [pc, #32]	; (8000ba8 <HAL_MspInit+0x4c>)
 8000b88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b8e:	603b      	str	r3, [r7, #0]
 8000b90:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b92:	2200      	movs	r2, #0
 8000b94:	210f      	movs	r1, #15
 8000b96:	f06f 0001 	mvn.w	r0, #1
 8000b9a:	f000 fa62 	bl	8001062 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b9e:	bf00      	nop
 8000ba0:	3708      	adds	r7, #8
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	40021000 	.word	0x40021000

08000bac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b0ac      	sub	sp, #176	; 0xb0
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000bb8:	2200      	movs	r2, #0
 8000bba:	601a      	str	r2, [r3, #0]
 8000bbc:	605a      	str	r2, [r3, #4]
 8000bbe:	609a      	str	r2, [r3, #8]
 8000bc0:	60da      	str	r2, [r3, #12]
 8000bc2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bc4:	f107 0310 	add.w	r3, r7, #16
 8000bc8:	228c      	movs	r2, #140	; 0x8c
 8000bca:	2100      	movs	r1, #0
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f00a fbff 	bl	800b3d0 <memset>
  if(huart->Instance==LPUART1)
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	4a22      	ldr	r2, [pc, #136]	; (8000c60 <HAL_UART_MspInit+0xb4>)
 8000bd8:	4293      	cmp	r3, r2
 8000bda:	d13d      	bne.n	8000c58 <HAL_UART_MspInit+0xac>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000bdc:	2320      	movs	r3, #32
 8000bde:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000be0:	2300      	movs	r3, #0
 8000be2:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000be4:	f107 0310 	add.w	r3, r7, #16
 8000be8:	4618      	mov	r0, r3
 8000bea:	f002 fc7d 	bl	80034e8 <HAL_RCCEx_PeriphCLKConfig>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000bf4:	f7ff ffac 	bl	8000b50 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000bf8:	4b1a      	ldr	r3, [pc, #104]	; (8000c64 <HAL_UART_MspInit+0xb8>)
 8000bfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bfc:	4a19      	ldr	r2, [pc, #100]	; (8000c64 <HAL_UART_MspInit+0xb8>)
 8000bfe:	f043 0301 	orr.w	r3, r3, #1
 8000c02:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000c04:	4b17      	ldr	r3, [pc, #92]	; (8000c64 <HAL_UART_MspInit+0xb8>)
 8000c06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c08:	f003 0301 	and.w	r3, r3, #1
 8000c0c:	60fb      	str	r3, [r7, #12]
 8000c0e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c10:	4b14      	ldr	r3, [pc, #80]	; (8000c64 <HAL_UART_MspInit+0xb8>)
 8000c12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c14:	4a13      	ldr	r2, [pc, #76]	; (8000c64 <HAL_UART_MspInit+0xb8>)
 8000c16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c1a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c1c:	4b11      	ldr	r3, [pc, #68]	; (8000c64 <HAL_UART_MspInit+0xb8>)
 8000c1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c24:	60bb      	str	r3, [r7, #8]
 8000c26:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8000c28:	f001 fe10 	bl	800284c <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000c2c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000c30:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c34:	2302      	movs	r3, #2
 8000c36:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c40:	2303      	movs	r3, #3
 8000c42:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000c46:	2308      	movs	r3, #8
 8000c48:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c4c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000c50:	4619      	mov	r1, r3
 8000c52:	4805      	ldr	r0, [pc, #20]	; (8000c68 <HAL_UART_MspInit+0xbc>)
 8000c54:	f000 fa3c 	bl	80010d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000c58:	bf00      	nop
 8000c5a:	37b0      	adds	r7, #176	; 0xb0
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	40008000 	.word	0x40008000
 8000c64:	40021000 	.word	0x40021000
 8000c68:	48001800 	.word	0x48001800

08000c6c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b085      	sub	sp, #20
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c7c:	d10b      	bne.n	8000c96 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c7e:	4b09      	ldr	r3, [pc, #36]	; (8000ca4 <HAL_TIM_Base_MspInit+0x38>)
 8000c80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c82:	4a08      	ldr	r2, [pc, #32]	; (8000ca4 <HAL_TIM_Base_MspInit+0x38>)
 8000c84:	f043 0301 	orr.w	r3, r3, #1
 8000c88:	6593      	str	r3, [r2, #88]	; 0x58
 8000c8a:	4b06      	ldr	r3, [pc, #24]	; (8000ca4 <HAL_TIM_Base_MspInit+0x38>)
 8000c8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c8e:	f003 0301 	and.w	r3, r3, #1
 8000c92:	60fb      	str	r3, [r7, #12]
 8000c94:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000c96:	bf00      	nop
 8000c98:	3714      	adds	r7, #20
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	40021000 	.word	0x40021000

08000ca8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cac:	e7fe      	b.n	8000cac <NMI_Handler+0x4>

08000cae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cae:	b480      	push	{r7}
 8000cb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cb2:	e7fe      	b.n	8000cb2 <HardFault_Handler+0x4>

08000cb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cb8:	e7fe      	b.n	8000cb8 <MemManage_Handler+0x4>

08000cba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cba:	b480      	push	{r7}
 8000cbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cbe:	e7fe      	b.n	8000cbe <BusFault_Handler+0x4>

08000cc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cc4:	e7fe      	b.n	8000cc4 <UsageFault_Handler+0x4>

08000cc6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cca:	bf00      	nop
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr

08000cd4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cd8:	f000 f8a4 	bl	8000e24 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000cdc:	f008 fd86 	bl	80097ec <xTaskGetSchedulerState>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b01      	cmp	r3, #1
 8000ce4:	d001      	beq.n	8000cea <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000ce6:	f009 fb6f 	bl	800a3c8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cea:	bf00      	nop
 8000cec:	bd80      	pop	{r7, pc}
	...

08000cf0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000cf4:	4802      	ldr	r0, [pc, #8]	; (8000d00 <OTG_FS_IRQHandler+0x10>)
 8000cf6:	f000 fce8 	bl	80016ca <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000cfa:	bf00      	nop
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	20002014 	.word	0x20002014

08000d04 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000d08:	4b06      	ldr	r3, [pc, #24]	; (8000d24 <SystemInit+0x20>)
 8000d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d0e:	4a05      	ldr	r2, [pc, #20]	; (8000d24 <SystemInit+0x20>)
 8000d10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000d18:	bf00      	nop
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	e000ed00 	.word	0xe000ed00

08000d28 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000d28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d60 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d2c:	f7ff ffea 	bl	8000d04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d30:	480c      	ldr	r0, [pc, #48]	; (8000d64 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d32:	490d      	ldr	r1, [pc, #52]	; (8000d68 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d34:	4a0d      	ldr	r2, [pc, #52]	; (8000d6c <LoopForever+0xe>)
  movs r3, #0
 8000d36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d38:	e002      	b.n	8000d40 <LoopCopyDataInit>

08000d3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d3e:	3304      	adds	r3, #4

08000d40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d44:	d3f9      	bcc.n	8000d3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d46:	4a0a      	ldr	r2, [pc, #40]	; (8000d70 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d48:	4c0a      	ldr	r4, [pc, #40]	; (8000d74 <LoopForever+0x16>)
  movs r3, #0
 8000d4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d4c:	e001      	b.n	8000d52 <LoopFillZerobss>

08000d4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d50:	3204      	adds	r2, #4

08000d52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d54:	d3fb      	bcc.n	8000d4e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d56:	f00a fb43 	bl	800b3e0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d5a:	f7ff fbc7 	bl	80004ec <main>

08000d5e <LoopForever>:

LoopForever:
    b LoopForever
 8000d5e:	e7fe      	b.n	8000d5e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000d60:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000d64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d68:	20000130 	.word	0x20000130
  ldr r2, =_sidata
 8000d6c:	0800b578 	.word	0x0800b578
  ldr r2, =_sbss
 8000d70:	20000130 	.word	0x20000130
  ldr r4, =_ebss
 8000d74:	20002534 	.word	0x20002534

08000d78 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d78:	e7fe      	b.n	8000d78 <ADC1_2_IRQHandler>

08000d7a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d7a:	b580      	push	{r7, lr}
 8000d7c:	b082      	sub	sp, #8
 8000d7e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d80:	2300      	movs	r3, #0
 8000d82:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d84:	2003      	movs	r0, #3
 8000d86:	f000 f961 	bl	800104c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d8a:	200f      	movs	r0, #15
 8000d8c:	f000 f80e 	bl	8000dac <HAL_InitTick>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d002      	beq.n	8000d9c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000d96:	2301      	movs	r3, #1
 8000d98:	71fb      	strb	r3, [r7, #7]
 8000d9a:	e001      	b.n	8000da0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d9c:	f7ff fede 	bl	8000b5c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000da0:	79fb      	ldrb	r3, [r7, #7]
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
	...

08000dac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b084      	sub	sp, #16
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000db4:	2300      	movs	r3, #0
 8000db6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000db8:	4b17      	ldr	r3, [pc, #92]	; (8000e18 <HAL_InitTick+0x6c>)
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d023      	beq.n	8000e08 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000dc0:	4b16      	ldr	r3, [pc, #88]	; (8000e1c <HAL_InitTick+0x70>)
 8000dc2:	681a      	ldr	r2, [r3, #0]
 8000dc4:	4b14      	ldr	r3, [pc, #80]	; (8000e18 <HAL_InitTick+0x6c>)
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	4619      	mov	r1, r3
 8000dca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dce:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f000 f96d 	bl	80010b6 <HAL_SYSTICK_Config>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d10f      	bne.n	8000e02 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	2b0f      	cmp	r3, #15
 8000de6:	d809      	bhi.n	8000dfc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000de8:	2200      	movs	r2, #0
 8000dea:	6879      	ldr	r1, [r7, #4]
 8000dec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000df0:	f000 f937 	bl	8001062 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000df4:	4a0a      	ldr	r2, [pc, #40]	; (8000e20 <HAL_InitTick+0x74>)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	6013      	str	r3, [r2, #0]
 8000dfa:	e007      	b.n	8000e0c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	73fb      	strb	r3, [r7, #15]
 8000e00:	e004      	b.n	8000e0c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e02:	2301      	movs	r3, #1
 8000e04:	73fb      	strb	r3, [r7, #15]
 8000e06:	e001      	b.n	8000e0c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e08:	2301      	movs	r3, #1
 8000e0a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	3710      	adds	r7, #16
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	20000008 	.word	0x20000008
 8000e1c:	20000000 	.word	0x20000000
 8000e20:	20000004 	.word	0x20000004

08000e24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e28:	4b06      	ldr	r3, [pc, #24]	; (8000e44 <HAL_IncTick+0x20>)
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	461a      	mov	r2, r3
 8000e2e:	4b06      	ldr	r3, [pc, #24]	; (8000e48 <HAL_IncTick+0x24>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4413      	add	r3, r2
 8000e34:	4a04      	ldr	r2, [pc, #16]	; (8000e48 <HAL_IncTick+0x24>)
 8000e36:	6013      	str	r3, [r2, #0]
}
 8000e38:	bf00      	nop
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	20000008 	.word	0x20000008
 8000e48:	20000228 	.word	0x20000228

08000e4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e50:	4b03      	ldr	r3, [pc, #12]	; (8000e60 <HAL_GetTick+0x14>)
 8000e52:	681b      	ldr	r3, [r3, #0]
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	20000228 	.word	0x20000228

08000e64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b084      	sub	sp, #16
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e6c:	f7ff ffee 	bl	8000e4c <HAL_GetTick>
 8000e70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000e7c:	d005      	beq.n	8000e8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000e7e:	4b0a      	ldr	r3, [pc, #40]	; (8000ea8 <HAL_Delay+0x44>)
 8000e80:	781b      	ldrb	r3, [r3, #0]
 8000e82:	461a      	mov	r2, r3
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	4413      	add	r3, r2
 8000e88:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e8a:	bf00      	nop
 8000e8c:	f7ff ffde 	bl	8000e4c <HAL_GetTick>
 8000e90:	4602      	mov	r2, r0
 8000e92:	68bb      	ldr	r3, [r7, #8]
 8000e94:	1ad3      	subs	r3, r2, r3
 8000e96:	68fa      	ldr	r2, [r7, #12]
 8000e98:	429a      	cmp	r2, r3
 8000e9a:	d8f7      	bhi.n	8000e8c <HAL_Delay+0x28>
  {
  }
}
 8000e9c:	bf00      	nop
 8000e9e:	bf00      	nop
 8000ea0:	3710      	adds	r7, #16
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	20000008 	.word	0x20000008

08000eac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b085      	sub	sp, #20
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	f003 0307 	and.w	r3, r3, #7
 8000eba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ebc:	4b0c      	ldr	r3, [pc, #48]	; (8000ef0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ebe:	68db      	ldr	r3, [r3, #12]
 8000ec0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ec2:	68ba      	ldr	r2, [r7, #8]
 8000ec4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ec8:	4013      	ands	r3, r2
 8000eca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ed0:	68bb      	ldr	r3, [r7, #8]
 8000ed2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ed4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ed8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000edc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ede:	4a04      	ldr	r2, [pc, #16]	; (8000ef0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ee0:	68bb      	ldr	r3, [r7, #8]
 8000ee2:	60d3      	str	r3, [r2, #12]
}
 8000ee4:	bf00      	nop
 8000ee6:	3714      	adds	r7, #20
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr
 8000ef0:	e000ed00 	.word	0xe000ed00

08000ef4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ef8:	4b04      	ldr	r3, [pc, #16]	; (8000f0c <__NVIC_GetPriorityGrouping+0x18>)
 8000efa:	68db      	ldr	r3, [r3, #12]
 8000efc:	0a1b      	lsrs	r3, r3, #8
 8000efe:	f003 0307 	and.w	r3, r3, #7
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr
 8000f0c:	e000ed00 	.word	0xe000ed00

08000f10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b083      	sub	sp, #12
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	4603      	mov	r3, r0
 8000f18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	db0b      	blt.n	8000f3a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f22:	79fb      	ldrb	r3, [r7, #7]
 8000f24:	f003 021f 	and.w	r2, r3, #31
 8000f28:	4907      	ldr	r1, [pc, #28]	; (8000f48 <__NVIC_EnableIRQ+0x38>)
 8000f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2e:	095b      	lsrs	r3, r3, #5
 8000f30:	2001      	movs	r0, #1
 8000f32:	fa00 f202 	lsl.w	r2, r0, r2
 8000f36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f3a:	bf00      	nop
 8000f3c:	370c      	adds	r7, #12
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	e000e100 	.word	0xe000e100

08000f4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	4603      	mov	r3, r0
 8000f54:	6039      	str	r1, [r7, #0]
 8000f56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	db0a      	blt.n	8000f76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	b2da      	uxtb	r2, r3
 8000f64:	490c      	ldr	r1, [pc, #48]	; (8000f98 <__NVIC_SetPriority+0x4c>)
 8000f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6a:	0112      	lsls	r2, r2, #4
 8000f6c:	b2d2      	uxtb	r2, r2
 8000f6e:	440b      	add	r3, r1
 8000f70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f74:	e00a      	b.n	8000f8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	b2da      	uxtb	r2, r3
 8000f7a:	4908      	ldr	r1, [pc, #32]	; (8000f9c <__NVIC_SetPriority+0x50>)
 8000f7c:	79fb      	ldrb	r3, [r7, #7]
 8000f7e:	f003 030f 	and.w	r3, r3, #15
 8000f82:	3b04      	subs	r3, #4
 8000f84:	0112      	lsls	r2, r2, #4
 8000f86:	b2d2      	uxtb	r2, r2
 8000f88:	440b      	add	r3, r1
 8000f8a:	761a      	strb	r2, [r3, #24]
}
 8000f8c:	bf00      	nop
 8000f8e:	370c      	adds	r7, #12
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr
 8000f98:	e000e100 	.word	0xe000e100
 8000f9c:	e000ed00 	.word	0xe000ed00

08000fa0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b089      	sub	sp, #36	; 0x24
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	60f8      	str	r0, [r7, #12]
 8000fa8:	60b9      	str	r1, [r7, #8]
 8000faa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	f003 0307 	and.w	r3, r3, #7
 8000fb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fb4:	69fb      	ldr	r3, [r7, #28]
 8000fb6:	f1c3 0307 	rsb	r3, r3, #7
 8000fba:	2b04      	cmp	r3, #4
 8000fbc:	bf28      	it	cs
 8000fbe:	2304      	movcs	r3, #4
 8000fc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	3304      	adds	r3, #4
 8000fc6:	2b06      	cmp	r3, #6
 8000fc8:	d902      	bls.n	8000fd0 <NVIC_EncodePriority+0x30>
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	3b03      	subs	r3, #3
 8000fce:	e000      	b.n	8000fd2 <NVIC_EncodePriority+0x32>
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fd4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000fd8:	69bb      	ldr	r3, [r7, #24]
 8000fda:	fa02 f303 	lsl.w	r3, r2, r3
 8000fde:	43da      	mvns	r2, r3
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	401a      	ands	r2, r3
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fe8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	fa01 f303 	lsl.w	r3, r1, r3
 8000ff2:	43d9      	mvns	r1, r3
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ff8:	4313      	orrs	r3, r2
         );
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3724      	adds	r7, #36	; 0x24
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
	...

08001008 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	3b01      	subs	r3, #1
 8001014:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001018:	d301      	bcc.n	800101e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800101a:	2301      	movs	r3, #1
 800101c:	e00f      	b.n	800103e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800101e:	4a0a      	ldr	r2, [pc, #40]	; (8001048 <SysTick_Config+0x40>)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	3b01      	subs	r3, #1
 8001024:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001026:	210f      	movs	r1, #15
 8001028:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800102c:	f7ff ff8e 	bl	8000f4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001030:	4b05      	ldr	r3, [pc, #20]	; (8001048 <SysTick_Config+0x40>)
 8001032:	2200      	movs	r2, #0
 8001034:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001036:	4b04      	ldr	r3, [pc, #16]	; (8001048 <SysTick_Config+0x40>)
 8001038:	2207      	movs	r2, #7
 800103a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800103c:	2300      	movs	r3, #0
}
 800103e:	4618      	mov	r0, r3
 8001040:	3708      	adds	r7, #8
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	e000e010 	.word	0xe000e010

0800104c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001054:	6878      	ldr	r0, [r7, #4]
 8001056:	f7ff ff29 	bl	8000eac <__NVIC_SetPriorityGrouping>
}
 800105a:	bf00      	nop
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}

08001062 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001062:	b580      	push	{r7, lr}
 8001064:	b086      	sub	sp, #24
 8001066:	af00      	add	r7, sp, #0
 8001068:	4603      	mov	r3, r0
 800106a:	60b9      	str	r1, [r7, #8]
 800106c:	607a      	str	r2, [r7, #4]
 800106e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001070:	2300      	movs	r3, #0
 8001072:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001074:	f7ff ff3e 	bl	8000ef4 <__NVIC_GetPriorityGrouping>
 8001078:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800107a:	687a      	ldr	r2, [r7, #4]
 800107c:	68b9      	ldr	r1, [r7, #8]
 800107e:	6978      	ldr	r0, [r7, #20]
 8001080:	f7ff ff8e 	bl	8000fa0 <NVIC_EncodePriority>
 8001084:	4602      	mov	r2, r0
 8001086:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800108a:	4611      	mov	r1, r2
 800108c:	4618      	mov	r0, r3
 800108e:	f7ff ff5d 	bl	8000f4c <__NVIC_SetPriority>
}
 8001092:	bf00      	nop
 8001094:	3718      	adds	r7, #24
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}

0800109a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800109a:	b580      	push	{r7, lr}
 800109c:	b082      	sub	sp, #8
 800109e:	af00      	add	r7, sp, #0
 80010a0:	4603      	mov	r3, r0
 80010a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a8:	4618      	mov	r0, r3
 80010aa:	f7ff ff31 	bl	8000f10 <__NVIC_EnableIRQ>
}
 80010ae:	bf00      	nop
 80010b0:	3708      	adds	r7, #8
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}

080010b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010b6:	b580      	push	{r7, lr}
 80010b8:	b082      	sub	sp, #8
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010be:	6878      	ldr	r0, [r7, #4]
 80010c0:	f7ff ffa2 	bl	8001008 <SysTick_Config>
 80010c4:	4603      	mov	r3, r0
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	3708      	adds	r7, #8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
	...

080010d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b087      	sub	sp, #28
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
 80010d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010da:	2300      	movs	r3, #0
 80010dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010de:	e166      	b.n	80013ae <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	681a      	ldr	r2, [r3, #0]
 80010e4:	2101      	movs	r1, #1
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	fa01 f303 	lsl.w	r3, r1, r3
 80010ec:	4013      	ands	r3, r2
 80010ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	f000 8158 	beq.w	80013a8 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f003 0303 	and.w	r3, r3, #3
 8001100:	2b01      	cmp	r3, #1
 8001102:	d005      	beq.n	8001110 <HAL_GPIO_Init+0x40>
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	f003 0303 	and.w	r3, r3, #3
 800110c:	2b02      	cmp	r3, #2
 800110e:	d130      	bne.n	8001172 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	689b      	ldr	r3, [r3, #8]
 8001114:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	005b      	lsls	r3, r3, #1
 800111a:	2203      	movs	r2, #3
 800111c:	fa02 f303 	lsl.w	r3, r2, r3
 8001120:	43db      	mvns	r3, r3
 8001122:	693a      	ldr	r2, [r7, #16]
 8001124:	4013      	ands	r3, r2
 8001126:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	68da      	ldr	r2, [r3, #12]
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	005b      	lsls	r3, r3, #1
 8001130:	fa02 f303 	lsl.w	r3, r2, r3
 8001134:	693a      	ldr	r2, [r7, #16]
 8001136:	4313      	orrs	r3, r2
 8001138:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	693a      	ldr	r2, [r7, #16]
 800113e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001146:	2201      	movs	r2, #1
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	fa02 f303 	lsl.w	r3, r2, r3
 800114e:	43db      	mvns	r3, r3
 8001150:	693a      	ldr	r2, [r7, #16]
 8001152:	4013      	ands	r3, r2
 8001154:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	091b      	lsrs	r3, r3, #4
 800115c:	f003 0201 	and.w	r2, r3, #1
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	fa02 f303 	lsl.w	r3, r2, r3
 8001166:	693a      	ldr	r2, [r7, #16]
 8001168:	4313      	orrs	r3, r2
 800116a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	693a      	ldr	r2, [r7, #16]
 8001170:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	f003 0303 	and.w	r3, r3, #3
 800117a:	2b03      	cmp	r3, #3
 800117c:	d017      	beq.n	80011ae <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	68db      	ldr	r3, [r3, #12]
 8001182:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	005b      	lsls	r3, r3, #1
 8001188:	2203      	movs	r2, #3
 800118a:	fa02 f303 	lsl.w	r3, r2, r3
 800118e:	43db      	mvns	r3, r3
 8001190:	693a      	ldr	r2, [r7, #16]
 8001192:	4013      	ands	r3, r2
 8001194:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	689a      	ldr	r2, [r3, #8]
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	005b      	lsls	r3, r3, #1
 800119e:	fa02 f303 	lsl.w	r3, r2, r3
 80011a2:	693a      	ldr	r2, [r7, #16]
 80011a4:	4313      	orrs	r3, r2
 80011a6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	693a      	ldr	r2, [r7, #16]
 80011ac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	f003 0303 	and.w	r3, r3, #3
 80011b6:	2b02      	cmp	r3, #2
 80011b8:	d123      	bne.n	8001202 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	08da      	lsrs	r2, r3, #3
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	3208      	adds	r2, #8
 80011c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	f003 0307 	and.w	r3, r3, #7
 80011ce:	009b      	lsls	r3, r3, #2
 80011d0:	220f      	movs	r2, #15
 80011d2:	fa02 f303 	lsl.w	r3, r2, r3
 80011d6:	43db      	mvns	r3, r3
 80011d8:	693a      	ldr	r2, [r7, #16]
 80011da:	4013      	ands	r3, r2
 80011dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	691a      	ldr	r2, [r3, #16]
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	f003 0307 	and.w	r3, r3, #7
 80011e8:	009b      	lsls	r3, r3, #2
 80011ea:	fa02 f303 	lsl.w	r3, r2, r3
 80011ee:	693a      	ldr	r2, [r7, #16]
 80011f0:	4313      	orrs	r3, r2
 80011f2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	08da      	lsrs	r2, r3, #3
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	3208      	adds	r2, #8
 80011fc:	6939      	ldr	r1, [r7, #16]
 80011fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	005b      	lsls	r3, r3, #1
 800120c:	2203      	movs	r2, #3
 800120e:	fa02 f303 	lsl.w	r3, r2, r3
 8001212:	43db      	mvns	r3, r3
 8001214:	693a      	ldr	r2, [r7, #16]
 8001216:	4013      	ands	r3, r2
 8001218:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	f003 0203 	and.w	r2, r3, #3
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	005b      	lsls	r3, r3, #1
 8001226:	fa02 f303 	lsl.w	r3, r2, r3
 800122a:	693a      	ldr	r2, [r7, #16]
 800122c:	4313      	orrs	r3, r2
 800122e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	693a      	ldr	r2, [r7, #16]
 8001234:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800123e:	2b00      	cmp	r3, #0
 8001240:	f000 80b2 	beq.w	80013a8 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001244:	4b61      	ldr	r3, [pc, #388]	; (80013cc <HAL_GPIO_Init+0x2fc>)
 8001246:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001248:	4a60      	ldr	r2, [pc, #384]	; (80013cc <HAL_GPIO_Init+0x2fc>)
 800124a:	f043 0301 	orr.w	r3, r3, #1
 800124e:	6613      	str	r3, [r2, #96]	; 0x60
 8001250:	4b5e      	ldr	r3, [pc, #376]	; (80013cc <HAL_GPIO_Init+0x2fc>)
 8001252:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001254:	f003 0301 	and.w	r3, r3, #1
 8001258:	60bb      	str	r3, [r7, #8]
 800125a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800125c:	4a5c      	ldr	r2, [pc, #368]	; (80013d0 <HAL_GPIO_Init+0x300>)
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	089b      	lsrs	r3, r3, #2
 8001262:	3302      	adds	r3, #2
 8001264:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001268:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	f003 0303 	and.w	r3, r3, #3
 8001270:	009b      	lsls	r3, r3, #2
 8001272:	220f      	movs	r2, #15
 8001274:	fa02 f303 	lsl.w	r3, r2, r3
 8001278:	43db      	mvns	r3, r3
 800127a:	693a      	ldr	r2, [r7, #16]
 800127c:	4013      	ands	r3, r2
 800127e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001286:	d02b      	beq.n	80012e0 <HAL_GPIO_Init+0x210>
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	4a52      	ldr	r2, [pc, #328]	; (80013d4 <HAL_GPIO_Init+0x304>)
 800128c:	4293      	cmp	r3, r2
 800128e:	d025      	beq.n	80012dc <HAL_GPIO_Init+0x20c>
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	4a51      	ldr	r2, [pc, #324]	; (80013d8 <HAL_GPIO_Init+0x308>)
 8001294:	4293      	cmp	r3, r2
 8001296:	d01f      	beq.n	80012d8 <HAL_GPIO_Init+0x208>
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	4a50      	ldr	r2, [pc, #320]	; (80013dc <HAL_GPIO_Init+0x30c>)
 800129c:	4293      	cmp	r3, r2
 800129e:	d019      	beq.n	80012d4 <HAL_GPIO_Init+0x204>
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	4a4f      	ldr	r2, [pc, #316]	; (80013e0 <HAL_GPIO_Init+0x310>)
 80012a4:	4293      	cmp	r3, r2
 80012a6:	d013      	beq.n	80012d0 <HAL_GPIO_Init+0x200>
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	4a4e      	ldr	r2, [pc, #312]	; (80013e4 <HAL_GPIO_Init+0x314>)
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d00d      	beq.n	80012cc <HAL_GPIO_Init+0x1fc>
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	4a4d      	ldr	r2, [pc, #308]	; (80013e8 <HAL_GPIO_Init+0x318>)
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d007      	beq.n	80012c8 <HAL_GPIO_Init+0x1f8>
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	4a4c      	ldr	r2, [pc, #304]	; (80013ec <HAL_GPIO_Init+0x31c>)
 80012bc:	4293      	cmp	r3, r2
 80012be:	d101      	bne.n	80012c4 <HAL_GPIO_Init+0x1f4>
 80012c0:	2307      	movs	r3, #7
 80012c2:	e00e      	b.n	80012e2 <HAL_GPIO_Init+0x212>
 80012c4:	2308      	movs	r3, #8
 80012c6:	e00c      	b.n	80012e2 <HAL_GPIO_Init+0x212>
 80012c8:	2306      	movs	r3, #6
 80012ca:	e00a      	b.n	80012e2 <HAL_GPIO_Init+0x212>
 80012cc:	2305      	movs	r3, #5
 80012ce:	e008      	b.n	80012e2 <HAL_GPIO_Init+0x212>
 80012d0:	2304      	movs	r3, #4
 80012d2:	e006      	b.n	80012e2 <HAL_GPIO_Init+0x212>
 80012d4:	2303      	movs	r3, #3
 80012d6:	e004      	b.n	80012e2 <HAL_GPIO_Init+0x212>
 80012d8:	2302      	movs	r3, #2
 80012da:	e002      	b.n	80012e2 <HAL_GPIO_Init+0x212>
 80012dc:	2301      	movs	r3, #1
 80012de:	e000      	b.n	80012e2 <HAL_GPIO_Init+0x212>
 80012e0:	2300      	movs	r3, #0
 80012e2:	697a      	ldr	r2, [r7, #20]
 80012e4:	f002 0203 	and.w	r2, r2, #3
 80012e8:	0092      	lsls	r2, r2, #2
 80012ea:	4093      	lsls	r3, r2
 80012ec:	693a      	ldr	r2, [r7, #16]
 80012ee:	4313      	orrs	r3, r2
 80012f0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80012f2:	4937      	ldr	r1, [pc, #220]	; (80013d0 <HAL_GPIO_Init+0x300>)
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	089b      	lsrs	r3, r3, #2
 80012f8:	3302      	adds	r3, #2
 80012fa:	693a      	ldr	r2, [r7, #16]
 80012fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001300:	4b3b      	ldr	r3, [pc, #236]	; (80013f0 <HAL_GPIO_Init+0x320>)
 8001302:	689b      	ldr	r3, [r3, #8]
 8001304:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	43db      	mvns	r3, r3
 800130a:	693a      	ldr	r2, [r7, #16]
 800130c:	4013      	ands	r3, r2
 800130e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001318:	2b00      	cmp	r3, #0
 800131a:	d003      	beq.n	8001324 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800131c:	693a      	ldr	r2, [r7, #16]
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	4313      	orrs	r3, r2
 8001322:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001324:	4a32      	ldr	r2, [pc, #200]	; (80013f0 <HAL_GPIO_Init+0x320>)
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800132a:	4b31      	ldr	r3, [pc, #196]	; (80013f0 <HAL_GPIO_Init+0x320>)
 800132c:	68db      	ldr	r3, [r3, #12]
 800132e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	43db      	mvns	r3, r3
 8001334:	693a      	ldr	r2, [r7, #16]
 8001336:	4013      	ands	r3, r2
 8001338:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001342:	2b00      	cmp	r3, #0
 8001344:	d003      	beq.n	800134e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001346:	693a      	ldr	r2, [r7, #16]
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	4313      	orrs	r3, r2
 800134c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800134e:	4a28      	ldr	r2, [pc, #160]	; (80013f0 <HAL_GPIO_Init+0x320>)
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001354:	4b26      	ldr	r3, [pc, #152]	; (80013f0 <HAL_GPIO_Init+0x320>)
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	43db      	mvns	r3, r3
 800135e:	693a      	ldr	r2, [r7, #16]
 8001360:	4013      	ands	r3, r2
 8001362:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800136c:	2b00      	cmp	r3, #0
 800136e:	d003      	beq.n	8001378 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001370:	693a      	ldr	r2, [r7, #16]
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	4313      	orrs	r3, r2
 8001376:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001378:	4a1d      	ldr	r2, [pc, #116]	; (80013f0 <HAL_GPIO_Init+0x320>)
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800137e:	4b1c      	ldr	r3, [pc, #112]	; (80013f0 <HAL_GPIO_Init+0x320>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	43db      	mvns	r3, r3
 8001388:	693a      	ldr	r2, [r7, #16]
 800138a:	4013      	ands	r3, r2
 800138c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001396:	2b00      	cmp	r3, #0
 8001398:	d003      	beq.n	80013a2 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800139a:	693a      	ldr	r2, [r7, #16]
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	4313      	orrs	r3, r2
 80013a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80013a2:	4a13      	ldr	r2, [pc, #76]	; (80013f0 <HAL_GPIO_Init+0x320>)
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	3301      	adds	r3, #1
 80013ac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	fa22 f303 	lsr.w	r3, r2, r3
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	f47f ae91 	bne.w	80010e0 <HAL_GPIO_Init+0x10>
  }
}
 80013be:	bf00      	nop
 80013c0:	bf00      	nop
 80013c2:	371c      	adds	r7, #28
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr
 80013cc:	40021000 	.word	0x40021000
 80013d0:	40010000 	.word	0x40010000
 80013d4:	48000400 	.word	0x48000400
 80013d8:	48000800 	.word	0x48000800
 80013dc:	48000c00 	.word	0x48000c00
 80013e0:	48001000 	.word	0x48001000
 80013e4:	48001400 	.word	0x48001400
 80013e8:	48001800 	.word	0x48001800
 80013ec:	48001c00 	.word	0x48001c00
 80013f0:	40010400 	.word	0x40010400

080013f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
 80013fc:	460b      	mov	r3, r1
 80013fe:	807b      	strh	r3, [r7, #2]
 8001400:	4613      	mov	r3, r2
 8001402:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001404:	787b      	ldrb	r3, [r7, #1]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d003      	beq.n	8001412 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800140a:	887a      	ldrh	r2, [r7, #2]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001410:	e002      	b.n	8001418 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001412:	887a      	ldrh	r2, [r7, #2]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001418:	bf00      	nop
 800141a:	370c      	adds	r7, #12
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr

08001424 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001424:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001426:	b08f      	sub	sp, #60	; 0x3c
 8001428:	af0a      	add	r7, sp, #40	; 0x28
 800142a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d101      	bne.n	8001436 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001432:	2301      	movs	r3, #1
 8001434:	e116      	b.n	8001664 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001442:	b2db      	uxtb	r3, r3
 8001444:	2b00      	cmp	r3, #0
 8001446:	d106      	bne.n	8001456 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2200      	movs	r2, #0
 800144c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001450:	6878      	ldr	r0, [r7, #4]
 8001452:	f009 fb7b 	bl	800ab4c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2203      	movs	r2, #3
 800145a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800145e:	68bb      	ldr	r3, [r7, #8]
 8001460:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001462:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001466:	2b00      	cmp	r3, #0
 8001468:	d102      	bne.n	8001470 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2200      	movs	r2, #0
 800146e:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4618      	mov	r0, r3
 8001476:	f003 fde2 	bl	800503e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	603b      	str	r3, [r7, #0]
 8001480:	687e      	ldr	r6, [r7, #4]
 8001482:	466d      	mov	r5, sp
 8001484:	f106 0410 	add.w	r4, r6, #16
 8001488:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800148a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800148c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800148e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001490:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001494:	e885 0003 	stmia.w	r5, {r0, r1}
 8001498:	1d33      	adds	r3, r6, #4
 800149a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800149c:	6838      	ldr	r0, [r7, #0]
 800149e:	f003 fcf4 	bl	8004e8a <USB_CoreInit>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d005      	beq.n	80014b4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2202      	movs	r2, #2
 80014ac:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80014b0:	2301      	movs	r3, #1
 80014b2:	e0d7      	b.n	8001664 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	2100      	movs	r1, #0
 80014ba:	4618      	mov	r0, r3
 80014bc:	f003 fdd0 	bl	8005060 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014c0:	2300      	movs	r3, #0
 80014c2:	73fb      	strb	r3, [r7, #15]
 80014c4:	e04a      	b.n	800155c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80014c6:	7bfa      	ldrb	r2, [r7, #15]
 80014c8:	6879      	ldr	r1, [r7, #4]
 80014ca:	4613      	mov	r3, r2
 80014cc:	00db      	lsls	r3, r3, #3
 80014ce:	4413      	add	r3, r2
 80014d0:	009b      	lsls	r3, r3, #2
 80014d2:	440b      	add	r3, r1
 80014d4:	333d      	adds	r3, #61	; 0x3d
 80014d6:	2201      	movs	r2, #1
 80014d8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80014da:	7bfa      	ldrb	r2, [r7, #15]
 80014dc:	6879      	ldr	r1, [r7, #4]
 80014de:	4613      	mov	r3, r2
 80014e0:	00db      	lsls	r3, r3, #3
 80014e2:	4413      	add	r3, r2
 80014e4:	009b      	lsls	r3, r3, #2
 80014e6:	440b      	add	r3, r1
 80014e8:	333c      	adds	r3, #60	; 0x3c
 80014ea:	7bfa      	ldrb	r2, [r7, #15]
 80014ec:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 80014ee:	7bfa      	ldrb	r2, [r7, #15]
 80014f0:	7bfb      	ldrb	r3, [r7, #15]
 80014f2:	b298      	uxth	r0, r3
 80014f4:	6879      	ldr	r1, [r7, #4]
 80014f6:	4613      	mov	r3, r2
 80014f8:	00db      	lsls	r3, r3, #3
 80014fa:	4413      	add	r3, r2
 80014fc:	009b      	lsls	r3, r3, #2
 80014fe:	440b      	add	r3, r1
 8001500:	3356      	adds	r3, #86	; 0x56
 8001502:	4602      	mov	r2, r0
 8001504:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001506:	7bfa      	ldrb	r2, [r7, #15]
 8001508:	6879      	ldr	r1, [r7, #4]
 800150a:	4613      	mov	r3, r2
 800150c:	00db      	lsls	r3, r3, #3
 800150e:	4413      	add	r3, r2
 8001510:	009b      	lsls	r3, r3, #2
 8001512:	440b      	add	r3, r1
 8001514:	3340      	adds	r3, #64	; 0x40
 8001516:	2200      	movs	r2, #0
 8001518:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800151a:	7bfa      	ldrb	r2, [r7, #15]
 800151c:	6879      	ldr	r1, [r7, #4]
 800151e:	4613      	mov	r3, r2
 8001520:	00db      	lsls	r3, r3, #3
 8001522:	4413      	add	r3, r2
 8001524:	009b      	lsls	r3, r3, #2
 8001526:	440b      	add	r3, r1
 8001528:	3344      	adds	r3, #68	; 0x44
 800152a:	2200      	movs	r2, #0
 800152c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800152e:	7bfa      	ldrb	r2, [r7, #15]
 8001530:	6879      	ldr	r1, [r7, #4]
 8001532:	4613      	mov	r3, r2
 8001534:	00db      	lsls	r3, r3, #3
 8001536:	4413      	add	r3, r2
 8001538:	009b      	lsls	r3, r3, #2
 800153a:	440b      	add	r3, r1
 800153c:	3348      	adds	r3, #72	; 0x48
 800153e:	2200      	movs	r2, #0
 8001540:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001542:	7bfa      	ldrb	r2, [r7, #15]
 8001544:	6879      	ldr	r1, [r7, #4]
 8001546:	4613      	mov	r3, r2
 8001548:	00db      	lsls	r3, r3, #3
 800154a:	4413      	add	r3, r2
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	440b      	add	r3, r1
 8001550:	334c      	adds	r3, #76	; 0x4c
 8001552:	2200      	movs	r2, #0
 8001554:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001556:	7bfb      	ldrb	r3, [r7, #15]
 8001558:	3301      	adds	r3, #1
 800155a:	73fb      	strb	r3, [r7, #15]
 800155c:	7bfa      	ldrb	r2, [r7, #15]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	429a      	cmp	r2, r3
 8001564:	d3af      	bcc.n	80014c6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001566:	2300      	movs	r3, #0
 8001568:	73fb      	strb	r3, [r7, #15]
 800156a:	e044      	b.n	80015f6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800156c:	7bfa      	ldrb	r2, [r7, #15]
 800156e:	6879      	ldr	r1, [r7, #4]
 8001570:	4613      	mov	r3, r2
 8001572:	00db      	lsls	r3, r3, #3
 8001574:	4413      	add	r3, r2
 8001576:	009b      	lsls	r3, r3, #2
 8001578:	440b      	add	r3, r1
 800157a:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800157e:	2200      	movs	r2, #0
 8001580:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001582:	7bfa      	ldrb	r2, [r7, #15]
 8001584:	6879      	ldr	r1, [r7, #4]
 8001586:	4613      	mov	r3, r2
 8001588:	00db      	lsls	r3, r3, #3
 800158a:	4413      	add	r3, r2
 800158c:	009b      	lsls	r3, r3, #2
 800158e:	440b      	add	r3, r1
 8001590:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001594:	7bfa      	ldrb	r2, [r7, #15]
 8001596:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001598:	7bfa      	ldrb	r2, [r7, #15]
 800159a:	6879      	ldr	r1, [r7, #4]
 800159c:	4613      	mov	r3, r2
 800159e:	00db      	lsls	r3, r3, #3
 80015a0:	4413      	add	r3, r2
 80015a2:	009b      	lsls	r3, r3, #2
 80015a4:	440b      	add	r3, r1
 80015a6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80015aa:	2200      	movs	r2, #0
 80015ac:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80015ae:	7bfa      	ldrb	r2, [r7, #15]
 80015b0:	6879      	ldr	r1, [r7, #4]
 80015b2:	4613      	mov	r3, r2
 80015b4:	00db      	lsls	r3, r3, #3
 80015b6:	4413      	add	r3, r2
 80015b8:	009b      	lsls	r3, r3, #2
 80015ba:	440b      	add	r3, r1
 80015bc:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80015c0:	2200      	movs	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80015c4:	7bfa      	ldrb	r2, [r7, #15]
 80015c6:	6879      	ldr	r1, [r7, #4]
 80015c8:	4613      	mov	r3, r2
 80015ca:	00db      	lsls	r3, r3, #3
 80015cc:	4413      	add	r3, r2
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	440b      	add	r3, r1
 80015d2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80015d6:	2200      	movs	r2, #0
 80015d8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80015da:	7bfa      	ldrb	r2, [r7, #15]
 80015dc:	6879      	ldr	r1, [r7, #4]
 80015de:	4613      	mov	r3, r2
 80015e0:	00db      	lsls	r3, r3, #3
 80015e2:	4413      	add	r3, r2
 80015e4:	009b      	lsls	r3, r3, #2
 80015e6:	440b      	add	r3, r1
 80015e8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80015ec:	2200      	movs	r2, #0
 80015ee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015f0:	7bfb      	ldrb	r3, [r7, #15]
 80015f2:	3301      	adds	r3, #1
 80015f4:	73fb      	strb	r3, [r7, #15]
 80015f6:	7bfa      	ldrb	r2, [r7, #15]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	429a      	cmp	r2, r3
 80015fe:	d3b5      	bcc.n	800156c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	603b      	str	r3, [r7, #0]
 8001606:	687e      	ldr	r6, [r7, #4]
 8001608:	466d      	mov	r5, sp
 800160a:	f106 0410 	add.w	r4, r6, #16
 800160e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001610:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001612:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001614:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001616:	e894 0003 	ldmia.w	r4, {r0, r1}
 800161a:	e885 0003 	stmia.w	r5, {r0, r1}
 800161e:	1d33      	adds	r3, r6, #4
 8001620:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001622:	6838      	ldr	r0, [r7, #0]
 8001624:	f003 fd68 	bl	80050f8 <USB_DevInit>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d005      	beq.n	800163a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2202      	movs	r2, #2
 8001632:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001636:	2301      	movs	r3, #1
 8001638:	e014      	b.n	8001664 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2200      	movs	r2, #0
 800163e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2201      	movs	r2, #1
 8001646:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800164e:	2b01      	cmp	r3, #1
 8001650:	d102      	bne.n	8001658 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001652:	6878      	ldr	r0, [r7, #4]
 8001654:	f001 f852 	bl	80026fc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4618      	mov	r0, r3
 800165e:	f004 fd16 	bl	800608e <USB_DevDisconnect>

  return HAL_OK;
 8001662:	2300      	movs	r3, #0
}
 8001664:	4618      	mov	r0, r3
 8001666:	3714      	adds	r7, #20
 8001668:	46bd      	mov	sp, r7
 800166a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800166c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b084      	sub	sp, #16
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001680:	2b01      	cmp	r3, #1
 8001682:	d101      	bne.n	8001688 <HAL_PCD_Start+0x1c>
 8001684:	2302      	movs	r3, #2
 8001686:	e01c      	b.n	80016c2 <HAL_PCD_Start+0x56>
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2201      	movs	r2, #1
 800168c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001694:	2b01      	cmp	r3, #1
 8001696:	d105      	bne.n	80016a4 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800169c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4618      	mov	r0, r3
 80016aa:	f003 fcb7 	bl	800501c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4618      	mov	r0, r3
 80016b4:	f004 fcca 	bl	800604c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2200      	movs	r2, #0
 80016bc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80016c0:	2300      	movs	r3, #0
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	3710      	adds	r7, #16
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}

080016ca <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80016ca:	b590      	push	{r4, r7, lr}
 80016cc:	b08d      	sub	sp, #52	; 0x34
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80016d8:	6a3b      	ldr	r3, [r7, #32]
 80016da:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4618      	mov	r0, r3
 80016e2:	f004 fd88 	bl	80061f6 <USB_GetMode>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	f040 847e 	bne.w	8001fea <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4618      	mov	r0, r3
 80016f4:	f004 fcec 	bl	80060d0 <USB_ReadInterrupts>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	f000 8474 	beq.w	8001fe8 <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001700:	69fb      	ldr	r3, [r7, #28]
 8001702:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	0a1b      	lsrs	r3, r3, #8
 800170a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4618      	mov	r0, r3
 800171a:	f004 fcd9 	bl	80060d0 <USB_ReadInterrupts>
 800171e:	4603      	mov	r3, r0
 8001720:	f003 0302 	and.w	r3, r3, #2
 8001724:	2b02      	cmp	r3, #2
 8001726:	d107      	bne.n	8001738 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	695a      	ldr	r2, [r3, #20]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f002 0202 	and.w	r2, r2, #2
 8001736:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4618      	mov	r0, r3
 800173e:	f004 fcc7 	bl	80060d0 <USB_ReadInterrupts>
 8001742:	4603      	mov	r3, r0
 8001744:	f003 0310 	and.w	r3, r3, #16
 8001748:	2b10      	cmp	r3, #16
 800174a:	d161      	bne.n	8001810 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	699a      	ldr	r2, [r3, #24]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f022 0210 	bic.w	r2, r2, #16
 800175a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800175c:	6a3b      	ldr	r3, [r7, #32]
 800175e:	6a1b      	ldr	r3, [r3, #32]
 8001760:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001762:	69bb      	ldr	r3, [r7, #24]
 8001764:	f003 020f 	and.w	r2, r3, #15
 8001768:	4613      	mov	r3, r2
 800176a:	00db      	lsls	r3, r3, #3
 800176c:	4413      	add	r3, r2
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001774:	687a      	ldr	r2, [r7, #4]
 8001776:	4413      	add	r3, r2
 8001778:	3304      	adds	r3, #4
 800177a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800177c:	69bb      	ldr	r3, [r7, #24]
 800177e:	0c5b      	lsrs	r3, r3, #17
 8001780:	f003 030f 	and.w	r3, r3, #15
 8001784:	2b02      	cmp	r3, #2
 8001786:	d124      	bne.n	80017d2 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001788:	69ba      	ldr	r2, [r7, #24]
 800178a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800178e:	4013      	ands	r3, r2
 8001790:	2b00      	cmp	r3, #0
 8001792:	d035      	beq.n	8001800 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001798:	69bb      	ldr	r3, [r7, #24]
 800179a:	091b      	lsrs	r3, r3, #4
 800179c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800179e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80017a2:	b29b      	uxth	r3, r3
 80017a4:	461a      	mov	r2, r3
 80017a6:	6a38      	ldr	r0, [r7, #32]
 80017a8:	f004 fafe 	bl	8005da8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	68da      	ldr	r2, [r3, #12]
 80017b0:	69bb      	ldr	r3, [r7, #24]
 80017b2:	091b      	lsrs	r3, r3, #4
 80017b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80017b8:	441a      	add	r2, r3
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	695a      	ldr	r2, [r3, #20]
 80017c2:	69bb      	ldr	r3, [r7, #24]
 80017c4:	091b      	lsrs	r3, r3, #4
 80017c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80017ca:	441a      	add	r2, r3
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	615a      	str	r2, [r3, #20]
 80017d0:	e016      	b.n	8001800 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80017d2:	69bb      	ldr	r3, [r7, #24]
 80017d4:	0c5b      	lsrs	r3, r3, #17
 80017d6:	f003 030f 	and.w	r3, r3, #15
 80017da:	2b06      	cmp	r3, #6
 80017dc:	d110      	bne.n	8001800 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80017e4:	2208      	movs	r2, #8
 80017e6:	4619      	mov	r1, r3
 80017e8:	6a38      	ldr	r0, [r7, #32]
 80017ea:	f004 fadd 	bl	8005da8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	695a      	ldr	r2, [r3, #20]
 80017f2:	69bb      	ldr	r3, [r7, #24]
 80017f4:	091b      	lsrs	r3, r3, #4
 80017f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80017fa:	441a      	add	r2, r3
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	699a      	ldr	r2, [r3, #24]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f042 0210 	orr.w	r2, r2, #16
 800180e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4618      	mov	r0, r3
 8001816:	f004 fc5b 	bl	80060d0 <USB_ReadInterrupts>
 800181a:	4603      	mov	r3, r0
 800181c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001820:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001824:	f040 80a7 	bne.w	8001976 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001828:	2300      	movs	r3, #0
 800182a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4618      	mov	r0, r3
 8001832:	f004 fc60 	bl	80060f6 <USB_ReadDevAllOutEpInterrupt>
 8001836:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001838:	e099      	b.n	800196e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800183a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800183c:	f003 0301 	and.w	r3, r3, #1
 8001840:	2b00      	cmp	r3, #0
 8001842:	f000 808e 	beq.w	8001962 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800184c:	b2d2      	uxtb	r2, r2
 800184e:	4611      	mov	r1, r2
 8001850:	4618      	mov	r0, r3
 8001852:	f004 fc84 	bl	800615e <USB_ReadDevOutEPInterrupt>
 8001856:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	f003 0301 	and.w	r3, r3, #1
 800185e:	2b00      	cmp	r3, #0
 8001860:	d00c      	beq.n	800187c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001864:	015a      	lsls	r2, r3, #5
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	4413      	add	r3, r2
 800186a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800186e:	461a      	mov	r2, r3
 8001870:	2301      	movs	r3, #1
 8001872:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001874:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	f000 fe66 	bl	8002548 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	f003 0308 	and.w	r3, r3, #8
 8001882:	2b00      	cmp	r3, #0
 8001884:	d00c      	beq.n	80018a0 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001888:	015a      	lsls	r2, r3, #5
 800188a:	69fb      	ldr	r3, [r7, #28]
 800188c:	4413      	add	r3, r2
 800188e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001892:	461a      	mov	r2, r3
 8001894:	2308      	movs	r3, #8
 8001896:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001898:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800189a:	6878      	ldr	r0, [r7, #4]
 800189c:	f000 fea2 	bl	80025e4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	f003 0310 	and.w	r3, r3, #16
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d008      	beq.n	80018bc <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80018aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ac:	015a      	lsls	r2, r3, #5
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	4413      	add	r3, r2
 80018b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80018b6:	461a      	mov	r2, r3
 80018b8:	2310      	movs	r3, #16
 80018ba:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80018bc:	693b      	ldr	r3, [r7, #16]
 80018be:	f003 0302 	and.w	r3, r3, #2
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d030      	beq.n	8001928 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80018c6:	6a3b      	ldr	r3, [r7, #32]
 80018c8:	695b      	ldr	r3, [r3, #20]
 80018ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018ce:	2b80      	cmp	r3, #128	; 0x80
 80018d0:	d109      	bne.n	80018e6 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	69fa      	ldr	r2, [r7, #28]
 80018dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018e0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018e4:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80018e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018e8:	4613      	mov	r3, r2
 80018ea:	00db      	lsls	r3, r3, #3
 80018ec:	4413      	add	r3, r2
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80018f4:	687a      	ldr	r2, [r7, #4]
 80018f6:	4413      	add	r3, r2
 80018f8:	3304      	adds	r3, #4
 80018fa:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	78db      	ldrb	r3, [r3, #3]
 8001900:	2b01      	cmp	r3, #1
 8001902:	d108      	bne.n	8001916 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	2200      	movs	r2, #0
 8001908:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800190a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800190c:	b2db      	uxtb	r3, r3
 800190e:	4619      	mov	r1, r3
 8001910:	6878      	ldr	r0, [r7, #4]
 8001912:	f009 fa81 	bl	800ae18 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001918:	015a      	lsls	r2, r3, #5
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	4413      	add	r3, r2
 800191e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001922:	461a      	mov	r2, r3
 8001924:	2302      	movs	r3, #2
 8001926:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	f003 0320 	and.w	r3, r3, #32
 800192e:	2b00      	cmp	r3, #0
 8001930:	d008      	beq.n	8001944 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001934:	015a      	lsls	r2, r3, #5
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	4413      	add	r3, r2
 800193a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800193e:	461a      	mov	r2, r3
 8001940:	2320      	movs	r3, #32
 8001942:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800194a:	2b00      	cmp	r3, #0
 800194c:	d009      	beq.n	8001962 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800194e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001950:	015a      	lsls	r2, r3, #5
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	4413      	add	r3, r2
 8001956:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800195a:	461a      	mov	r2, r3
 800195c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001960:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001964:	3301      	adds	r3, #1
 8001966:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800196a:	085b      	lsrs	r3, r3, #1
 800196c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800196e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001970:	2b00      	cmp	r3, #0
 8001972:	f47f af62 	bne.w	800183a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4618      	mov	r0, r3
 800197c:	f004 fba8 	bl	80060d0 <USB_ReadInterrupts>
 8001980:	4603      	mov	r3, r0
 8001982:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001986:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800198a:	f040 80a4 	bne.w	8001ad6 <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4618      	mov	r0, r3
 8001994:	f004 fbc9 	bl	800612a <USB_ReadDevAllInEpInterrupt>
 8001998:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800199a:	2300      	movs	r3, #0
 800199c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800199e:	e096      	b.n	8001ace <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80019a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019a2:	f003 0301 	and.w	r3, r3, #1
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	f000 808b 	beq.w	8001ac2 <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019b2:	b2d2      	uxtb	r2, r2
 80019b4:	4611      	mov	r1, r2
 80019b6:	4618      	mov	r0, r3
 80019b8:	f004 fbef 	bl	800619a <USB_ReadDevInEPInterrupt>
 80019bc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	f003 0301 	and.w	r3, r3, #1
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d020      	beq.n	8001a0a <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80019c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ca:	f003 030f 	and.w	r3, r3, #15
 80019ce:	2201      	movs	r2, #1
 80019d0:	fa02 f303 	lsl.w	r3, r2, r3
 80019d4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	43db      	mvns	r3, r3
 80019e2:	69f9      	ldr	r1, [r7, #28]
 80019e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80019e8:	4013      	ands	r3, r2
 80019ea:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80019ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ee:	015a      	lsls	r2, r3, #5
 80019f0:	69fb      	ldr	r3, [r7, #28]
 80019f2:	4413      	add	r3, r2
 80019f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80019f8:	461a      	mov	r2, r3
 80019fa:	2301      	movs	r3, #1
 80019fc:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80019fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	4619      	mov	r1, r3
 8001a04:	6878      	ldr	r0, [r7, #4]
 8001a06:	f009 f972 	bl	800acee <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	f003 0308 	and.w	r3, r3, #8
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d008      	beq.n	8001a26 <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a16:	015a      	lsls	r2, r3, #5
 8001a18:	69fb      	ldr	r3, [r7, #28]
 8001a1a:	4413      	add	r3, r2
 8001a1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a20:	461a      	mov	r2, r3
 8001a22:	2308      	movs	r3, #8
 8001a24:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	f003 0310 	and.w	r3, r3, #16
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d008      	beq.n	8001a42 <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a32:	015a      	lsls	r2, r3, #5
 8001a34:	69fb      	ldr	r3, [r7, #28]
 8001a36:	4413      	add	r3, r2
 8001a38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a3c:	461a      	mov	r2, r3
 8001a3e:	2310      	movs	r3, #16
 8001a40:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d008      	beq.n	8001a5e <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4e:	015a      	lsls	r2, r3, #5
 8001a50:	69fb      	ldr	r3, [r7, #28]
 8001a52:	4413      	add	r3, r2
 8001a54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a58:	461a      	mov	r2, r3
 8001a5a:	2340      	movs	r3, #64	; 0x40
 8001a5c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	f003 0302 	and.w	r3, r3, #2
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d023      	beq.n	8001ab0 <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001a68:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001a6a:	6a38      	ldr	r0, [r7, #32]
 8001a6c:	f003 fc86 	bl	800537c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001a70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a72:	4613      	mov	r3, r2
 8001a74:	00db      	lsls	r3, r3, #3
 8001a76:	4413      	add	r3, r2
 8001a78:	009b      	lsls	r3, r3, #2
 8001a7a:	3338      	adds	r3, #56	; 0x38
 8001a7c:	687a      	ldr	r2, [r7, #4]
 8001a7e:	4413      	add	r3, r2
 8001a80:	3304      	adds	r3, #4
 8001a82:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	78db      	ldrb	r3, [r3, #3]
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	d108      	bne.n	8001a9e <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	2200      	movs	r2, #0
 8001a90:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	4619      	mov	r1, r3
 8001a98:	6878      	ldr	r0, [r7, #4]
 8001a9a:	f009 f9cf 	bl	800ae3c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa0:	015a      	lsls	r2, r3, #5
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	4413      	add	r3, r2
 8001aa6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001aaa:	461a      	mov	r2, r3
 8001aac:	2302      	movs	r3, #2
 8001aae:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d003      	beq.n	8001ac2 <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001aba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001abc:	6878      	ldr	r0, [r7, #4]
 8001abe:	f000 fcba 	bl	8002436 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac4:	3301      	adds	r3, #1
 8001ac6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001aca:	085b      	lsrs	r3, r3, #1
 8001acc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	f47f af65 	bne.w	80019a0 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4618      	mov	r0, r3
 8001adc:	f004 faf8 	bl	80060d0 <USB_ReadInterrupts>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001ae6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001aea:	d122      	bne.n	8001b32 <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001aec:	69fb      	ldr	r3, [r7, #28]
 8001aee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	69fa      	ldr	r2, [r7, #28]
 8001af6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001afa:	f023 0301 	bic.w	r3, r3, #1
 8001afe:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	d108      	bne.n	8001b1c <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001b12:	2100      	movs	r1, #0
 8001b14:	6878      	ldr	r0, [r7, #4]
 8001b16:	f009 fbef 	bl	800b2f8 <HAL_PCDEx_LPM_Callback>
 8001b1a:	e002      	b.n	8001b22 <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001b1c:	6878      	ldr	r0, [r7, #4]
 8001b1e:	f009 f953 	bl	800adc8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	695a      	ldr	r2, [r3, #20]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001b30:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4618      	mov	r0, r3
 8001b38:	f004 faca 	bl	80060d0 <USB_ReadInterrupts>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001b46:	d112      	bne.n	8001b6e <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001b48:	69fb      	ldr	r3, [r7, #28]
 8001b4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	f003 0301 	and.w	r3, r3, #1
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d102      	bne.n	8001b5e <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001b58:	6878      	ldr	r0, [r7, #4]
 8001b5a:	f009 f90f 	bl	800ad7c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	695a      	ldr	r2, [r3, #20]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001b6c:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4618      	mov	r0, r3
 8001b74:	f004 faac 	bl	80060d0 <USB_ReadInterrupts>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001b7e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001b82:	d121      	bne.n	8001bc8 <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	695a      	ldr	r2, [r3, #20]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8001b92:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d111      	bne.n	8001bc2 <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bac:	089b      	lsrs	r3, r3, #2
 8001bae:	f003 020f 	and.w	r2, r3, #15
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001bb8:	2101      	movs	r1, #1
 8001bba:	6878      	ldr	r0, [r7, #4]
 8001bbc:	f009 fb9c 	bl	800b2f8 <HAL_PCDEx_LPM_Callback>
 8001bc0:	e002      	b.n	8001bc8 <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001bc2:	6878      	ldr	r0, [r7, #4]
 8001bc4:	f009 f8da 	bl	800ad7c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f004 fa7f 	bl	80060d0 <USB_ReadInterrupts>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001bdc:	f040 80b5 	bne.w	8001d4a <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001be0:	69fb      	ldr	r3, [r7, #28]
 8001be2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	69fa      	ldr	r2, [r7, #28]
 8001bea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001bee:	f023 0301 	bic.w	r3, r3, #1
 8001bf2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	2110      	movs	r1, #16
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f003 fbbe 	bl	800537c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c00:	2300      	movs	r3, #0
 8001c02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c04:	e046      	b.n	8001c94 <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c08:	015a      	lsls	r2, r3, #5
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	4413      	add	r3, r2
 8001c0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001c12:	461a      	mov	r2, r3
 8001c14:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001c18:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c1c:	015a      	lsls	r2, r3, #5
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	4413      	add	r3, r2
 8001c22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c2a:	0151      	lsls	r1, r2, #5
 8001c2c:	69fa      	ldr	r2, [r7, #28]
 8001c2e:	440a      	add	r2, r1
 8001c30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001c34:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001c38:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c3c:	015a      	lsls	r2, r3, #5
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	4413      	add	r3, r2
 8001c42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c46:	461a      	mov	r2, r3
 8001c48:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001c4c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c50:	015a      	lsls	r2, r3, #5
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	4413      	add	r3, r2
 8001c56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c5e:	0151      	lsls	r1, r2, #5
 8001c60:	69fa      	ldr	r2, [r7, #28]
 8001c62:	440a      	add	r2, r1
 8001c64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001c68:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001c6c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c70:	015a      	lsls	r2, r3, #5
 8001c72:	69fb      	ldr	r3, [r7, #28]
 8001c74:	4413      	add	r3, r2
 8001c76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c7e:	0151      	lsls	r1, r2, #5
 8001c80:	69fa      	ldr	r2, [r7, #28]
 8001c82:	440a      	add	r2, r1
 8001c84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001c88:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001c8c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c90:	3301      	adds	r3, #1
 8001c92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c9a:	429a      	cmp	r2, r3
 8001c9c:	d3b3      	bcc.n	8001c06 <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ca4:	69db      	ldr	r3, [r3, #28]
 8001ca6:	69fa      	ldr	r2, [r7, #28]
 8001ca8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001cac:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001cb0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d016      	beq.n	8001ce8 <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001cc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001cc4:	69fa      	ldr	r2, [r7, #28]
 8001cc6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001cca:	f043 030b 	orr.w	r3, r3, #11
 8001cce:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cda:	69fa      	ldr	r2, [r7, #28]
 8001cdc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ce0:	f043 030b 	orr.w	r3, r3, #11
 8001ce4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ce6:	e015      	b.n	8001d14 <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001ce8:	69fb      	ldr	r3, [r7, #28]
 8001cea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001cee:	695b      	ldr	r3, [r3, #20]
 8001cf0:	69fa      	ldr	r2, [r7, #28]
 8001cf2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001cf6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001cfa:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001cfe:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d06:	691b      	ldr	r3, [r3, #16]
 8001d08:	69fa      	ldr	r2, [r7, #28]
 8001d0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001d0e:	f043 030b 	orr.w	r3, r3, #11
 8001d12:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001d14:	69fb      	ldr	r3, [r7, #28]
 8001d16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	69fa      	ldr	r2, [r7, #28]
 8001d1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001d22:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001d26:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001d32:	4619      	mov	r1, r3
 8001d34:	4610      	mov	r0, r2
 8001d36:	f004 fa8f 	bl	8006258 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	695a      	ldr	r2, [r3, #20]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001d48:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f004 f9be 	bl	80060d0 <USB_ReadInterrupts>
 8001d54:	4603      	mov	r3, r0
 8001d56:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d5e:	d124      	bne.n	8001daa <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4618      	mov	r0, r3
 8001d66:	f004 fa54 	bl	8006212 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f003 fb81 	bl	8005476 <USB_GetDevSpeed>
 8001d74:	4603      	mov	r3, r0
 8001d76:	461a      	mov	r2, r3
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681c      	ldr	r4, [r3, #0]
 8001d80:	f001 fb1a 	bl	80033b8 <HAL_RCC_GetHCLKFreq>
 8001d84:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001d8a:	b2db      	uxtb	r3, r3
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	4620      	mov	r0, r4
 8001d90:	f003 f8a8 	bl	8004ee4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001d94:	6878      	ldr	r0, [r7, #4]
 8001d96:	f008 ffd2 	bl	800ad3e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	695a      	ldr	r2, [r3, #20]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001da8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4618      	mov	r0, r3
 8001db0:	f004 f98e 	bl	80060d0 <USB_ReadInterrupts>
 8001db4:	4603      	mov	r3, r0
 8001db6:	f003 0308 	and.w	r3, r3, #8
 8001dba:	2b08      	cmp	r3, #8
 8001dbc:	d10a      	bne.n	8001dd4 <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f008 ffaf 	bl	800ad22 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	695a      	ldr	r2, [r3, #20]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f002 0208 	and.w	r2, r2, #8
 8001dd2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f004 f979 	bl	80060d0 <USB_ReadInterrupts>
 8001dde:	4603      	mov	r3, r0
 8001de0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001de4:	2b80      	cmp	r3, #128	; 0x80
 8001de6:	d122      	bne.n	8001e2e <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001de8:	6a3b      	ldr	r3, [r7, #32]
 8001dea:	699b      	ldr	r3, [r3, #24]
 8001dec:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001df0:	6a3b      	ldr	r3, [r7, #32]
 8001df2:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001df4:	2301      	movs	r3, #1
 8001df6:	627b      	str	r3, [r7, #36]	; 0x24
 8001df8:	e014      	b.n	8001e24 <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001dfa:	6879      	ldr	r1, [r7, #4]
 8001dfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dfe:	4613      	mov	r3, r2
 8001e00:	00db      	lsls	r3, r3, #3
 8001e02:	4413      	add	r3, r2
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	440b      	add	r3, r1
 8001e08:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001e0c:	781b      	ldrb	r3, [r3, #0]
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d105      	bne.n	8001e1e <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	4619      	mov	r1, r3
 8001e18:	6878      	ldr	r0, [r7, #4]
 8001e1a:	f000 fadb 	bl	80023d4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e20:	3301      	adds	r3, #1
 8001e22:	627b      	str	r3, [r7, #36]	; 0x24
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e2a:	429a      	cmp	r2, r3
 8001e2c:	d3e5      	bcc.n	8001dfa <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4618      	mov	r0, r3
 8001e34:	f004 f94c 	bl	80060d0 <USB_ReadInterrupts>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001e42:	d13b      	bne.n	8001ebc <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001e44:	2301      	movs	r3, #1
 8001e46:	627b      	str	r3, [r7, #36]	; 0x24
 8001e48:	e02b      	b.n	8001ea2 <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e4c:	015a      	lsls	r2, r3, #5
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	4413      	add	r3, r2
 8001e52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001e5a:	6879      	ldr	r1, [r7, #4]
 8001e5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e5e:	4613      	mov	r3, r2
 8001e60:	00db      	lsls	r3, r3, #3
 8001e62:	4413      	add	r3, r2
 8001e64:	009b      	lsls	r3, r3, #2
 8001e66:	440b      	add	r3, r1
 8001e68:	3340      	adds	r3, #64	; 0x40
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d115      	bne.n	8001e9c <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001e70:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	da12      	bge.n	8001e9c <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001e76:	6879      	ldr	r1, [r7, #4]
 8001e78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e7a:	4613      	mov	r3, r2
 8001e7c:	00db      	lsls	r3, r3, #3
 8001e7e:	4413      	add	r3, r2
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	440b      	add	r3, r1
 8001e84:	333f      	adds	r3, #63	; 0x3f
 8001e86:	2201      	movs	r2, #1
 8001e88:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001e92:	b2db      	uxtb	r3, r3
 8001e94:	4619      	mov	r1, r3
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	f000 fa9c 	bl	80023d4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9e:	3301      	adds	r3, #1
 8001ea0:	627b      	str	r3, [r7, #36]	; 0x24
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d3ce      	bcc.n	8001e4a <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	695a      	ldr	r2, [r3, #20]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001eba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f004 f905 	bl	80060d0 <USB_ReadInterrupts>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ecc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001ed0:	d155      	bne.n	8001f7e <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	627b      	str	r3, [r7, #36]	; 0x24
 8001ed6:	e045      	b.n	8001f64 <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eda:	015a      	lsls	r2, r3, #5
 8001edc:	69fb      	ldr	r3, [r7, #28]
 8001ede:	4413      	add	r3, r2
 8001ee0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001ee8:	6879      	ldr	r1, [r7, #4]
 8001eea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001eec:	4613      	mov	r3, r2
 8001eee:	00db      	lsls	r3, r3, #3
 8001ef0:	4413      	add	r3, r2
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	440b      	add	r3, r1
 8001ef6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d12e      	bne.n	8001f5e <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001f00:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	da2b      	bge.n	8001f5e <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001f06:	69bb      	ldr	r3, [r7, #24]
 8001f08:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001f12:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001f16:	429a      	cmp	r2, r3
 8001f18:	d121      	bne.n	8001f5e <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001f1a:	6879      	ldr	r1, [r7, #4]
 8001f1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f1e:	4613      	mov	r3, r2
 8001f20:	00db      	lsls	r3, r3, #3
 8001f22:	4413      	add	r3, r2
 8001f24:	009b      	lsls	r3, r3, #2
 8001f26:	440b      	add	r3, r1
 8001f28:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001f30:	6a3b      	ldr	r3, [r7, #32]
 8001f32:	699b      	ldr	r3, [r3, #24]
 8001f34:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001f38:	6a3b      	ldr	r3, [r7, #32]
 8001f3a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001f3c:	6a3b      	ldr	r3, [r7, #32]
 8001f3e:	695b      	ldr	r3, [r3, #20]
 8001f40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d10a      	bne.n	8001f5e <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001f48:	69fb      	ldr	r3, [r7, #28]
 8001f4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	69fa      	ldr	r2, [r7, #28]
 8001f52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f5a:	6053      	str	r3, [r2, #4]
            break;
 8001f5c:	e007      	b.n	8001f6e <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f60:	3301      	adds	r3, #1
 8001f62:	627b      	str	r3, [r7, #36]	; 0x24
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f6a:	429a      	cmp	r2, r3
 8001f6c:	d3b4      	bcc.n	8001ed8 <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	695a      	ldr	r2, [r3, #20]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001f7c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4618      	mov	r0, r3
 8001f84:	f004 f8a4 	bl	80060d0 <USB_ReadInterrupts>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001f8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f92:	d10a      	bne.n	8001faa <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001f94:	6878      	ldr	r0, [r7, #4]
 8001f96:	f008 ff63 	bl	800ae60 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	695a      	ldr	r2, [r3, #20]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001fa8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f004 f88e 	bl	80060d0 <USB_ReadInterrupts>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	f003 0304 	and.w	r3, r3, #4
 8001fba:	2b04      	cmp	r3, #4
 8001fbc:	d115      	bne.n	8001fea <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001fc6:	69bb      	ldr	r3, [r7, #24]
 8001fc8:	f003 0304 	and.w	r3, r3, #4
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d002      	beq.n	8001fd6 <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	f008 ff53 	bl	800ae7c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	6859      	ldr	r1, [r3, #4]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	69ba      	ldr	r2, [r7, #24]
 8001fe2:	430a      	orrs	r2, r1
 8001fe4:	605a      	str	r2, [r3, #4]
 8001fe6:	e000      	b.n	8001fea <HAL_PCD_IRQHandler+0x920>
      return;
 8001fe8:	bf00      	nop
    }
  }
}
 8001fea:	3734      	adds	r7, #52	; 0x34
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd90      	pop	{r4, r7, pc}

08001ff0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
 8001ff8:	460b      	mov	r3, r1
 8001ffa:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002002:	2b01      	cmp	r3, #1
 8002004:	d101      	bne.n	800200a <HAL_PCD_SetAddress+0x1a>
 8002006:	2302      	movs	r3, #2
 8002008:	e013      	b.n	8002032 <HAL_PCD_SetAddress+0x42>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2201      	movs	r2, #1
 800200e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	78fa      	ldrb	r2, [r7, #3]
 8002016:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	78fa      	ldrb	r2, [r7, #3]
 8002020:	4611      	mov	r1, r2
 8002022:	4618      	mov	r0, r3
 8002024:	f003 ffec 	bl	8006000 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2200      	movs	r2, #0
 800202c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002030:	2300      	movs	r3, #0
}
 8002032:	4618      	mov	r0, r3
 8002034:	3708      	adds	r7, #8
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}

0800203a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800203a:	b580      	push	{r7, lr}
 800203c:	b084      	sub	sp, #16
 800203e:	af00      	add	r7, sp, #0
 8002040:	6078      	str	r0, [r7, #4]
 8002042:	4608      	mov	r0, r1
 8002044:	4611      	mov	r1, r2
 8002046:	461a      	mov	r2, r3
 8002048:	4603      	mov	r3, r0
 800204a:	70fb      	strb	r3, [r7, #3]
 800204c:	460b      	mov	r3, r1
 800204e:	803b      	strh	r3, [r7, #0]
 8002050:	4613      	mov	r3, r2
 8002052:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002054:	2300      	movs	r3, #0
 8002056:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002058:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800205c:	2b00      	cmp	r3, #0
 800205e:	da0f      	bge.n	8002080 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002060:	78fb      	ldrb	r3, [r7, #3]
 8002062:	f003 020f 	and.w	r2, r3, #15
 8002066:	4613      	mov	r3, r2
 8002068:	00db      	lsls	r3, r3, #3
 800206a:	4413      	add	r3, r2
 800206c:	009b      	lsls	r3, r3, #2
 800206e:	3338      	adds	r3, #56	; 0x38
 8002070:	687a      	ldr	r2, [r7, #4]
 8002072:	4413      	add	r3, r2
 8002074:	3304      	adds	r3, #4
 8002076:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	2201      	movs	r2, #1
 800207c:	705a      	strb	r2, [r3, #1]
 800207e:	e00f      	b.n	80020a0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002080:	78fb      	ldrb	r3, [r7, #3]
 8002082:	f003 020f 	and.w	r2, r3, #15
 8002086:	4613      	mov	r3, r2
 8002088:	00db      	lsls	r3, r3, #3
 800208a:	4413      	add	r3, r2
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002092:	687a      	ldr	r2, [r7, #4]
 8002094:	4413      	add	r3, r2
 8002096:	3304      	adds	r3, #4
 8002098:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	2200      	movs	r2, #0
 800209e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80020a0:	78fb      	ldrb	r3, [r7, #3]
 80020a2:	f003 030f 	and.w	r3, r3, #15
 80020a6:	b2da      	uxtb	r2, r3
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80020ac:	883a      	ldrh	r2, [r7, #0]
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	78ba      	ldrb	r2, [r7, #2]
 80020b6:	711a      	strb	r2, [r3, #4]

#if defined (USB_OTG_FS)
  if (ep->is_in != 0U)
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	785b      	ldrb	r3, [r3, #1]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d004      	beq.n	80020ca <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	781b      	ldrb	r3, [r3, #0]
 80020c4:	b29a      	uxth	r2, r3
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	835a      	strh	r2, [r3, #26]
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80020ca:	78bb      	ldrb	r3, [r7, #2]
 80020cc:	2b02      	cmp	r3, #2
 80020ce:	d102      	bne.n	80020d6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	2200      	movs	r2, #0
 80020d4:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d101      	bne.n	80020e4 <HAL_PCD_EP_Open+0xaa>
 80020e0:	2302      	movs	r3, #2
 80020e2:	e00e      	b.n	8002102 <HAL_PCD_EP_Open+0xc8>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2201      	movs	r2, #1
 80020e8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	68f9      	ldr	r1, [r7, #12]
 80020f2:	4618      	mov	r0, r3
 80020f4:	f003 f9de 	bl	80054b4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2200      	movs	r2, #0
 80020fc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002100:	7afb      	ldrb	r3, [r7, #11]
}
 8002102:	4618      	mov	r0, r3
 8002104:	3710      	adds	r7, #16
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}

0800210a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800210a:	b580      	push	{r7, lr}
 800210c:	b084      	sub	sp, #16
 800210e:	af00      	add	r7, sp, #0
 8002110:	6078      	str	r0, [r7, #4]
 8002112:	460b      	mov	r3, r1
 8002114:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002116:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800211a:	2b00      	cmp	r3, #0
 800211c:	da0f      	bge.n	800213e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800211e:	78fb      	ldrb	r3, [r7, #3]
 8002120:	f003 020f 	and.w	r2, r3, #15
 8002124:	4613      	mov	r3, r2
 8002126:	00db      	lsls	r3, r3, #3
 8002128:	4413      	add	r3, r2
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	3338      	adds	r3, #56	; 0x38
 800212e:	687a      	ldr	r2, [r7, #4]
 8002130:	4413      	add	r3, r2
 8002132:	3304      	adds	r3, #4
 8002134:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	2201      	movs	r2, #1
 800213a:	705a      	strb	r2, [r3, #1]
 800213c:	e00f      	b.n	800215e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800213e:	78fb      	ldrb	r3, [r7, #3]
 8002140:	f003 020f 	and.w	r2, r3, #15
 8002144:	4613      	mov	r3, r2
 8002146:	00db      	lsls	r3, r3, #3
 8002148:	4413      	add	r3, r2
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002150:	687a      	ldr	r2, [r7, #4]
 8002152:	4413      	add	r3, r2
 8002154:	3304      	adds	r3, #4
 8002156:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	2200      	movs	r2, #0
 800215c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800215e:	78fb      	ldrb	r3, [r7, #3]
 8002160:	f003 030f 	and.w	r3, r3, #15
 8002164:	b2da      	uxtb	r2, r3
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002170:	2b01      	cmp	r3, #1
 8002172:	d101      	bne.n	8002178 <HAL_PCD_EP_Close+0x6e>
 8002174:	2302      	movs	r3, #2
 8002176:	e00e      	b.n	8002196 <HAL_PCD_EP_Close+0x8c>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2201      	movs	r2, #1
 800217c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	68f9      	ldr	r1, [r7, #12]
 8002186:	4618      	mov	r0, r3
 8002188:	f003 fa1c 	bl	80055c4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2200      	movs	r2, #0
 8002190:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002194:	2300      	movs	r3, #0
}
 8002196:	4618      	mov	r0, r3
 8002198:	3710      	adds	r7, #16
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}

0800219e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800219e:	b580      	push	{r7, lr}
 80021a0:	b086      	sub	sp, #24
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	60f8      	str	r0, [r7, #12]
 80021a6:	607a      	str	r2, [r7, #4]
 80021a8:	603b      	str	r3, [r7, #0]
 80021aa:	460b      	mov	r3, r1
 80021ac:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80021ae:	7afb      	ldrb	r3, [r7, #11]
 80021b0:	f003 020f 	and.w	r2, r3, #15
 80021b4:	4613      	mov	r3, r2
 80021b6:	00db      	lsls	r3, r3, #3
 80021b8:	4413      	add	r3, r2
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80021c0:	68fa      	ldr	r2, [r7, #12]
 80021c2:	4413      	add	r3, r2
 80021c4:	3304      	adds	r3, #4
 80021c6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	687a      	ldr	r2, [r7, #4]
 80021cc:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	683a      	ldr	r2, [r7, #0]
 80021d2:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	2200      	movs	r2, #0
 80021d8:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	2200      	movs	r2, #0
 80021de:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80021e0:	7afb      	ldrb	r3, [r7, #11]
 80021e2:	f003 030f 	and.w	r3, r3, #15
 80021e6:	b2da      	uxtb	r2, r3
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	6979      	ldr	r1, [r7, #20]
 80021f2:	4618      	mov	r0, r3
 80021f4:	f003 fac2 	bl	800577c <USB_EPStartXfer>

  return HAL_OK;
 80021f8:	2300      	movs	r3, #0
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3718      	adds	r7, #24
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}

08002202 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002202:	b580      	push	{r7, lr}
 8002204:	b086      	sub	sp, #24
 8002206:	af00      	add	r7, sp, #0
 8002208:	60f8      	str	r0, [r7, #12]
 800220a:	607a      	str	r2, [r7, #4]
 800220c:	603b      	str	r3, [r7, #0]
 800220e:	460b      	mov	r3, r1
 8002210:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002212:	7afb      	ldrb	r3, [r7, #11]
 8002214:	f003 020f 	and.w	r2, r3, #15
 8002218:	4613      	mov	r3, r2
 800221a:	00db      	lsls	r3, r3, #3
 800221c:	4413      	add	r3, r2
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	3338      	adds	r3, #56	; 0x38
 8002222:	68fa      	ldr	r2, [r7, #12]
 8002224:	4413      	add	r3, r2
 8002226:	3304      	adds	r3, #4
 8002228:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	687a      	ldr	r2, [r7, #4]
 800222e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	683a      	ldr	r2, [r7, #0]
 8002234:	611a      	str	r2, [r3, #16]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	2200      	movs	r2, #0
 800223a:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	2201      	movs	r2, #1
 8002240:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002242:	7afb      	ldrb	r3, [r7, #11]
 8002244:	f003 030f 	and.w	r3, r3, #15
 8002248:	b2da      	uxtb	r2, r3
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	6979      	ldr	r1, [r7, #20]
 8002254:	4618      	mov	r0, r3
 8002256:	f003 fa91 	bl	800577c <USB_EPStartXfer>

  return HAL_OK;
 800225a:	2300      	movs	r3, #0
}
 800225c:	4618      	mov	r0, r3
 800225e:	3718      	adds	r7, #24
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}

08002264 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b084      	sub	sp, #16
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
 800226c:	460b      	mov	r3, r1
 800226e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002270:	78fb      	ldrb	r3, [r7, #3]
 8002272:	f003 020f 	and.w	r2, r3, #15
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	429a      	cmp	r2, r3
 800227c:	d901      	bls.n	8002282 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e04e      	b.n	8002320 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002282:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002286:	2b00      	cmp	r3, #0
 8002288:	da0f      	bge.n	80022aa <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800228a:	78fb      	ldrb	r3, [r7, #3]
 800228c:	f003 020f 	and.w	r2, r3, #15
 8002290:	4613      	mov	r3, r2
 8002292:	00db      	lsls	r3, r3, #3
 8002294:	4413      	add	r3, r2
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	3338      	adds	r3, #56	; 0x38
 800229a:	687a      	ldr	r2, [r7, #4]
 800229c:	4413      	add	r3, r2
 800229e:	3304      	adds	r3, #4
 80022a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	2201      	movs	r2, #1
 80022a6:	705a      	strb	r2, [r3, #1]
 80022a8:	e00d      	b.n	80022c6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80022aa:	78fa      	ldrb	r2, [r7, #3]
 80022ac:	4613      	mov	r3, r2
 80022ae:	00db      	lsls	r3, r3, #3
 80022b0:	4413      	add	r3, r2
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80022b8:	687a      	ldr	r2, [r7, #4]
 80022ba:	4413      	add	r3, r2
 80022bc:	3304      	adds	r3, #4
 80022be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	2200      	movs	r2, #0
 80022c4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	2201      	movs	r2, #1
 80022ca:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80022cc:	78fb      	ldrb	r3, [r7, #3]
 80022ce:	f003 030f 	and.w	r3, r3, #15
 80022d2:	b2da      	uxtb	r2, r3
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d101      	bne.n	80022e6 <HAL_PCD_EP_SetStall+0x82>
 80022e2:	2302      	movs	r3, #2
 80022e4:	e01c      	b.n	8002320 <HAL_PCD_EP_SetStall+0xbc>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2201      	movs	r2, #1
 80022ea:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	68f9      	ldr	r1, [r7, #12]
 80022f4:	4618      	mov	r0, r3
 80022f6:	f003 fdaf 	bl	8005e58 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80022fa:	78fb      	ldrb	r3, [r7, #3]
 80022fc:	f003 030f 	and.w	r3, r3, #15
 8002300:	2b00      	cmp	r3, #0
 8002302:	d108      	bne.n	8002316 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800230e:	4619      	mov	r1, r3
 8002310:	4610      	mov	r0, r2
 8002312:	f003 ffa1 	bl	8006258 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2200      	movs	r2, #0
 800231a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800231e:	2300      	movs	r3, #0
}
 8002320:	4618      	mov	r0, r3
 8002322:	3710      	adds	r7, #16
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}

08002328 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b084      	sub	sp, #16
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
 8002330:	460b      	mov	r3, r1
 8002332:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002334:	78fb      	ldrb	r3, [r7, #3]
 8002336:	f003 020f 	and.w	r2, r3, #15
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	429a      	cmp	r2, r3
 8002340:	d901      	bls.n	8002346 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e042      	b.n	80023cc <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002346:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800234a:	2b00      	cmp	r3, #0
 800234c:	da0f      	bge.n	800236e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800234e:	78fb      	ldrb	r3, [r7, #3]
 8002350:	f003 020f 	and.w	r2, r3, #15
 8002354:	4613      	mov	r3, r2
 8002356:	00db      	lsls	r3, r3, #3
 8002358:	4413      	add	r3, r2
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	3338      	adds	r3, #56	; 0x38
 800235e:	687a      	ldr	r2, [r7, #4]
 8002360:	4413      	add	r3, r2
 8002362:	3304      	adds	r3, #4
 8002364:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	2201      	movs	r2, #1
 800236a:	705a      	strb	r2, [r3, #1]
 800236c:	e00f      	b.n	800238e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800236e:	78fb      	ldrb	r3, [r7, #3]
 8002370:	f003 020f 	and.w	r2, r3, #15
 8002374:	4613      	mov	r3, r2
 8002376:	00db      	lsls	r3, r3, #3
 8002378:	4413      	add	r3, r2
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002380:	687a      	ldr	r2, [r7, #4]
 8002382:	4413      	add	r3, r2
 8002384:	3304      	adds	r3, #4
 8002386:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	2200      	movs	r2, #0
 800238c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	2200      	movs	r2, #0
 8002392:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002394:	78fb      	ldrb	r3, [r7, #3]
 8002396:	f003 030f 	and.w	r3, r3, #15
 800239a:	b2da      	uxtb	r2, r3
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d101      	bne.n	80023ae <HAL_PCD_EP_ClrStall+0x86>
 80023aa:	2302      	movs	r3, #2
 80023ac:	e00e      	b.n	80023cc <HAL_PCD_EP_ClrStall+0xa4>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2201      	movs	r2, #1
 80023b2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	68f9      	ldr	r1, [r7, #12]
 80023bc:	4618      	mov	r0, r3
 80023be:	f003 fdb9 	bl	8005f34 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2200      	movs	r2, #0
 80023c6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80023ca:	2300      	movs	r3, #0
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	3710      	adds	r7, #16
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}

080023d4 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b084      	sub	sp, #16
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
 80023dc:	460b      	mov	r3, r1
 80023de:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80023e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	da0c      	bge.n	8002402 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80023e8:	78fb      	ldrb	r3, [r7, #3]
 80023ea:	f003 020f 	and.w	r2, r3, #15
 80023ee:	4613      	mov	r3, r2
 80023f0:	00db      	lsls	r3, r3, #3
 80023f2:	4413      	add	r3, r2
 80023f4:	009b      	lsls	r3, r3, #2
 80023f6:	3338      	adds	r3, #56	; 0x38
 80023f8:	687a      	ldr	r2, [r7, #4]
 80023fa:	4413      	add	r3, r2
 80023fc:	3304      	adds	r3, #4
 80023fe:	60fb      	str	r3, [r7, #12]
 8002400:	e00c      	b.n	800241c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002402:	78fb      	ldrb	r3, [r7, #3]
 8002404:	f003 020f 	and.w	r2, r3, #15
 8002408:	4613      	mov	r3, r2
 800240a:	00db      	lsls	r3, r3, #3
 800240c:	4413      	add	r3, r2
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002414:	687a      	ldr	r2, [r7, #4]
 8002416:	4413      	add	r3, r2
 8002418:	3304      	adds	r3, #4
 800241a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	68f9      	ldr	r1, [r7, #12]
 8002422:	4618      	mov	r0, r3
 8002424:	f003 fbdc 	bl	8005be0 <USB_EPStopXfer>
 8002428:	4603      	mov	r3, r0
 800242a:	72fb      	strb	r3, [r7, #11]

  return ret;
 800242c:	7afb      	ldrb	r3, [r7, #11]
}
 800242e:	4618      	mov	r0, r3
 8002430:	3710      	adds	r7, #16
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}

08002436 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002436:	b580      	push	{r7, lr}
 8002438:	b088      	sub	sp, #32
 800243a:	af00      	add	r7, sp, #0
 800243c:	6078      	str	r0, [r7, #4]
 800243e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800244a:	683a      	ldr	r2, [r7, #0]
 800244c:	4613      	mov	r3, r2
 800244e:	00db      	lsls	r3, r3, #3
 8002450:	4413      	add	r3, r2
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	3338      	adds	r3, #56	; 0x38
 8002456:	687a      	ldr	r2, [r7, #4]
 8002458:	4413      	add	r3, r2
 800245a:	3304      	adds	r3, #4
 800245c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	695a      	ldr	r2, [r3, #20]
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	691b      	ldr	r3, [r3, #16]
 8002466:	429a      	cmp	r2, r3
 8002468:	d901      	bls.n	800246e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e067      	b.n	800253e <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	691a      	ldr	r2, [r3, #16]
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	695b      	ldr	r3, [r3, #20]
 8002476:	1ad3      	subs	r3, r2, r3
 8002478:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	69fa      	ldr	r2, [r7, #28]
 8002480:	429a      	cmp	r2, r3
 8002482:	d902      	bls.n	800248a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	3303      	adds	r3, #3
 800248e:	089b      	lsrs	r3, r3, #2
 8002490:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002492:	e026      	b.n	80024e2 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	691a      	ldr	r2, [r3, #16]
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	695b      	ldr	r3, [r3, #20]
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	69fa      	ldr	r2, [r7, #28]
 80024a6:	429a      	cmp	r2, r3
 80024a8:	d902      	bls.n	80024b0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80024b0:	69fb      	ldr	r3, [r7, #28]
 80024b2:	3303      	adds	r3, #3
 80024b4:	089b      	lsrs	r3, r3, #2
 80024b6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	68d9      	ldr	r1, [r3, #12]
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	b2da      	uxtb	r2, r3
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	b29b      	uxth	r3, r3
 80024c4:	6978      	ldr	r0, [r7, #20]
 80024c6:	f003 fc35 	bl	8005d34 <USB_WritePacket>

    ep->xfer_buff  += len;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	68da      	ldr	r2, [r3, #12]
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	441a      	add	r2, r3
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	695a      	ldr	r2, [r3, #20]
 80024da:	69fb      	ldr	r3, [r7, #28]
 80024dc:	441a      	add	r2, r3
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	015a      	lsls	r2, r3, #5
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	4413      	add	r3, r2
 80024ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024ee:	699b      	ldr	r3, [r3, #24]
 80024f0:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80024f2:	69ba      	ldr	r2, [r7, #24]
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d809      	bhi.n	800250c <PCD_WriteEmptyTxFifo+0xd6>
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	695a      	ldr	r2, [r3, #20]
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002500:	429a      	cmp	r2, r3
 8002502:	d203      	bcs.n	800250c <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	691b      	ldr	r3, [r3, #16]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d1c3      	bne.n	8002494 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	691a      	ldr	r2, [r3, #16]
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	695b      	ldr	r3, [r3, #20]
 8002514:	429a      	cmp	r2, r3
 8002516:	d811      	bhi.n	800253c <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	f003 030f 	and.w	r3, r3, #15
 800251e:	2201      	movs	r2, #1
 8002520:	fa02 f303 	lsl.w	r3, r2, r3
 8002524:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800252c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	43db      	mvns	r3, r3
 8002532:	6939      	ldr	r1, [r7, #16]
 8002534:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002538:	4013      	ands	r3, r2
 800253a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800253c:	2300      	movs	r3, #0
}
 800253e:	4618      	mov	r0, r3
 8002540:	3720      	adds	r7, #32
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
	...

08002548 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b086      	sub	sp, #24
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
 8002550:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	333c      	adds	r3, #60	; 0x3c
 8002560:	3304      	adds	r3, #4
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	015a      	lsls	r2, r3, #5
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	4413      	add	r3, r2
 800256e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	4a19      	ldr	r2, [pc, #100]	; (80025e0 <PCD_EP_OutXfrComplete_int+0x98>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d124      	bne.n	80025c8 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002584:	2b00      	cmp	r3, #0
 8002586:	d00a      	beq.n	800259e <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	015a      	lsls	r2, r3, #5
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	4413      	add	r3, r2
 8002590:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002594:	461a      	mov	r2, r3
 8002596:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800259a:	6093      	str	r3, [r2, #8]
 800259c:	e01a      	b.n	80025d4 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	f003 0320 	and.w	r3, r3, #32
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d008      	beq.n	80025ba <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	015a      	lsls	r2, r3, #5
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	4413      	add	r3, r2
 80025b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025b4:	461a      	mov	r2, r3
 80025b6:	2320      	movs	r3, #32
 80025b8:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	4619      	mov	r1, r3
 80025c0:	6878      	ldr	r0, [r7, #4]
 80025c2:	f008 fb79 	bl	800acb8 <HAL_PCD_DataOutStageCallback>
 80025c6:	e005      	b.n	80025d4 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	4619      	mov	r1, r3
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f008 fb72 	bl	800acb8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 80025d4:	2300      	movs	r3, #0
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3718      	adds	r7, #24
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	4f54310a 	.word	0x4f54310a

080025e4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b086      	sub	sp, #24
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
 80025ec:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	333c      	adds	r3, #60	; 0x3c
 80025fc:	3304      	adds	r3, #4
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	015a      	lsls	r2, r3, #5
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	4413      	add	r3, r2
 800260a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	4a0c      	ldr	r2, [pc, #48]	; (8002648 <PCD_EP_OutSetupPacket_int+0x64>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d90e      	bls.n	8002638 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002620:	2b00      	cmp	r3, #0
 8002622:	d009      	beq.n	8002638 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	015a      	lsls	r2, r3, #5
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	4413      	add	r3, r2
 800262c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002630:	461a      	mov	r2, r3
 8002632:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002636:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002638:	6878      	ldr	r0, [r7, #4]
 800263a:	f008 fb2b 	bl	800ac94 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 800263e:	2300      	movs	r3, #0
}
 8002640:	4618      	mov	r0, r3
 8002642:	3718      	adds	r7, #24
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}
 8002648:	4f54300a 	.word	0x4f54300a

0800264c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800264c:	b480      	push	{r7}
 800264e:	b085      	sub	sp, #20
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	460b      	mov	r3, r1
 8002656:	70fb      	strb	r3, [r7, #3]
 8002658:	4613      	mov	r3, r2
 800265a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002662:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002664:	78fb      	ldrb	r3, [r7, #3]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d107      	bne.n	800267a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800266a:	883b      	ldrh	r3, [r7, #0]
 800266c:	0419      	lsls	r1, r3, #16
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	68ba      	ldr	r2, [r7, #8]
 8002674:	430a      	orrs	r2, r1
 8002676:	629a      	str	r2, [r3, #40]	; 0x28
 8002678:	e028      	b.n	80026cc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002680:	0c1b      	lsrs	r3, r3, #16
 8002682:	68ba      	ldr	r2, [r7, #8]
 8002684:	4413      	add	r3, r2
 8002686:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002688:	2300      	movs	r3, #0
 800268a:	73fb      	strb	r3, [r7, #15]
 800268c:	e00d      	b.n	80026aa <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	7bfb      	ldrb	r3, [r7, #15]
 8002694:	3340      	adds	r3, #64	; 0x40
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	4413      	add	r3, r2
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	0c1b      	lsrs	r3, r3, #16
 800269e:	68ba      	ldr	r2, [r7, #8]
 80026a0:	4413      	add	r3, r2
 80026a2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80026a4:	7bfb      	ldrb	r3, [r7, #15]
 80026a6:	3301      	adds	r3, #1
 80026a8:	73fb      	strb	r3, [r7, #15]
 80026aa:	7bfa      	ldrb	r2, [r7, #15]
 80026ac:	78fb      	ldrb	r3, [r7, #3]
 80026ae:	3b01      	subs	r3, #1
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d3ec      	bcc.n	800268e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80026b4:	883b      	ldrh	r3, [r7, #0]
 80026b6:	0418      	lsls	r0, r3, #16
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6819      	ldr	r1, [r3, #0]
 80026bc:	78fb      	ldrb	r3, [r7, #3]
 80026be:	3b01      	subs	r3, #1
 80026c0:	68ba      	ldr	r2, [r7, #8]
 80026c2:	4302      	orrs	r2, r0
 80026c4:	3340      	adds	r3, #64	; 0x40
 80026c6:	009b      	lsls	r3, r3, #2
 80026c8:	440b      	add	r3, r1
 80026ca:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80026cc:	2300      	movs	r3, #0
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3714      	adds	r7, #20
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr

080026da <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80026da:	b480      	push	{r7}
 80026dc:	b083      	sub	sp, #12
 80026de:	af00      	add	r7, sp, #0
 80026e0:	6078      	str	r0, [r7, #4]
 80026e2:	460b      	mov	r3, r1
 80026e4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	887a      	ldrh	r2, [r7, #2]
 80026ec:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80026ee:	2300      	movs	r3, #0
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	370c      	adds	r7, #12
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr

080026fc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b085      	sub	sp, #20
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2201      	movs	r2, #1
 800270e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2200      	movs	r2, #0
 8002716:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	699b      	ldr	r3, [r3, #24]
 800271e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800272a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800272e:	f043 0303 	orr.w	r3, r3, #3
 8002732:	68fa      	ldr	r2, [r7, #12]
 8002734:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002736:	2300      	movs	r3, #0
}
 8002738:	4618      	mov	r0, r3
 800273a:	3714      	adds	r7, #20
 800273c:	46bd      	mov	sp, r7
 800273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002742:	4770      	bx	lr

08002744 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002744:	b480      	push	{r7}
 8002746:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002748:	4b05      	ldr	r3, [pc, #20]	; (8002760 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a04      	ldr	r2, [pc, #16]	; (8002760 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800274e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002752:	6013      	str	r3, [r2, #0]
}
 8002754:	bf00      	nop
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr
 800275e:	bf00      	nop
 8002760:	40007000 	.word	0x40007000

08002764 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002764:	b480      	push	{r7}
 8002766:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002768:	4b04      	ldr	r3, [pc, #16]	; (800277c <HAL_PWREx_GetVoltageRange+0x18>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002770:	4618      	mov	r0, r3
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr
 800277a:	bf00      	nop
 800277c:	40007000 	.word	0x40007000

08002780 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002780:	b480      	push	{r7}
 8002782:	b085      	sub	sp, #20
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800278e:	d130      	bne.n	80027f2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002790:	4b23      	ldr	r3, [pc, #140]	; (8002820 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002798:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800279c:	d038      	beq.n	8002810 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800279e:	4b20      	ldr	r3, [pc, #128]	; (8002820 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80027a6:	4a1e      	ldr	r2, [pc, #120]	; (8002820 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027ac:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80027ae:	4b1d      	ldr	r3, [pc, #116]	; (8002824 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	2232      	movs	r2, #50	; 0x32
 80027b4:	fb02 f303 	mul.w	r3, r2, r3
 80027b8:	4a1b      	ldr	r2, [pc, #108]	; (8002828 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80027ba:	fba2 2303 	umull	r2, r3, r2, r3
 80027be:	0c9b      	lsrs	r3, r3, #18
 80027c0:	3301      	adds	r3, #1
 80027c2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80027c4:	e002      	b.n	80027cc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	3b01      	subs	r3, #1
 80027ca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80027cc:	4b14      	ldr	r3, [pc, #80]	; (8002820 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027ce:	695b      	ldr	r3, [r3, #20]
 80027d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027d8:	d102      	bne.n	80027e0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d1f2      	bne.n	80027c6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80027e0:	4b0f      	ldr	r3, [pc, #60]	; (8002820 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027e2:	695b      	ldr	r3, [r3, #20]
 80027e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027ec:	d110      	bne.n	8002810 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80027ee:	2303      	movs	r3, #3
 80027f0:	e00f      	b.n	8002812 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80027f2:	4b0b      	ldr	r3, [pc, #44]	; (8002820 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80027fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027fe:	d007      	beq.n	8002810 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002800:	4b07      	ldr	r3, [pc, #28]	; (8002820 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002808:	4a05      	ldr	r2, [pc, #20]	; (8002820 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800280a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800280e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002810:	2300      	movs	r3, #0
}
 8002812:	4618      	mov	r0, r3
 8002814:	3714      	adds	r7, #20
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr
 800281e:	bf00      	nop
 8002820:	40007000 	.word	0x40007000
 8002824:	20000000 	.word	0x20000000
 8002828:	431bde83 	.word	0x431bde83

0800282c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800282c:	b480      	push	{r7}
 800282e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002830:	4b05      	ldr	r3, [pc, #20]	; (8002848 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	4a04      	ldr	r2, [pc, #16]	; (8002848 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002836:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800283a:	6053      	str	r3, [r2, #4]
}
 800283c:	bf00      	nop
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr
 8002846:	bf00      	nop
 8002848:	40007000 	.word	0x40007000

0800284c <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 800284c:	b480      	push	{r7}
 800284e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8002850:	4b05      	ldr	r3, [pc, #20]	; (8002868 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	4a04      	ldr	r2, [pc, #16]	; (8002868 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002856:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800285a:	6053      	str	r3, [r2, #4]
}
 800285c:	bf00      	nop
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr
 8002866:	bf00      	nop
 8002868:	40007000 	.word	0x40007000

0800286c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b088      	sub	sp, #32
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d102      	bne.n	8002880 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	f000 bc08 	b.w	8003090 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002880:	4b96      	ldr	r3, [pc, #600]	; (8002adc <HAL_RCC_OscConfig+0x270>)
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	f003 030c 	and.w	r3, r3, #12
 8002888:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800288a:	4b94      	ldr	r3, [pc, #592]	; (8002adc <HAL_RCC_OscConfig+0x270>)
 800288c:	68db      	ldr	r3, [r3, #12]
 800288e:	f003 0303 	and.w	r3, r3, #3
 8002892:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 0310 	and.w	r3, r3, #16
 800289c:	2b00      	cmp	r3, #0
 800289e:	f000 80e4 	beq.w	8002a6a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80028a2:	69bb      	ldr	r3, [r7, #24]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d007      	beq.n	80028b8 <HAL_RCC_OscConfig+0x4c>
 80028a8:	69bb      	ldr	r3, [r7, #24]
 80028aa:	2b0c      	cmp	r3, #12
 80028ac:	f040 808b 	bne.w	80029c6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	f040 8087 	bne.w	80029c6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80028b8:	4b88      	ldr	r3, [pc, #544]	; (8002adc <HAL_RCC_OscConfig+0x270>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 0302 	and.w	r3, r3, #2
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d005      	beq.n	80028d0 <HAL_RCC_OscConfig+0x64>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	699b      	ldr	r3, [r3, #24]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d101      	bne.n	80028d0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	e3df      	b.n	8003090 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6a1a      	ldr	r2, [r3, #32]
 80028d4:	4b81      	ldr	r3, [pc, #516]	; (8002adc <HAL_RCC_OscConfig+0x270>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 0308 	and.w	r3, r3, #8
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d004      	beq.n	80028ea <HAL_RCC_OscConfig+0x7e>
 80028e0:	4b7e      	ldr	r3, [pc, #504]	; (8002adc <HAL_RCC_OscConfig+0x270>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028e8:	e005      	b.n	80028f6 <HAL_RCC_OscConfig+0x8a>
 80028ea:	4b7c      	ldr	r3, [pc, #496]	; (8002adc <HAL_RCC_OscConfig+0x270>)
 80028ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028f0:	091b      	lsrs	r3, r3, #4
 80028f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d223      	bcs.n	8002942 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6a1b      	ldr	r3, [r3, #32]
 80028fe:	4618      	mov	r0, r3
 8002900:	f000 fd92 	bl	8003428 <RCC_SetFlashLatencyFromMSIRange>
 8002904:	4603      	mov	r3, r0
 8002906:	2b00      	cmp	r3, #0
 8002908:	d001      	beq.n	800290e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e3c0      	b.n	8003090 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800290e:	4b73      	ldr	r3, [pc, #460]	; (8002adc <HAL_RCC_OscConfig+0x270>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a72      	ldr	r2, [pc, #456]	; (8002adc <HAL_RCC_OscConfig+0x270>)
 8002914:	f043 0308 	orr.w	r3, r3, #8
 8002918:	6013      	str	r3, [r2, #0]
 800291a:	4b70      	ldr	r3, [pc, #448]	; (8002adc <HAL_RCC_OscConfig+0x270>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6a1b      	ldr	r3, [r3, #32]
 8002926:	496d      	ldr	r1, [pc, #436]	; (8002adc <HAL_RCC_OscConfig+0x270>)
 8002928:	4313      	orrs	r3, r2
 800292a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800292c:	4b6b      	ldr	r3, [pc, #428]	; (8002adc <HAL_RCC_OscConfig+0x270>)
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	69db      	ldr	r3, [r3, #28]
 8002938:	021b      	lsls	r3, r3, #8
 800293a:	4968      	ldr	r1, [pc, #416]	; (8002adc <HAL_RCC_OscConfig+0x270>)
 800293c:	4313      	orrs	r3, r2
 800293e:	604b      	str	r3, [r1, #4]
 8002940:	e025      	b.n	800298e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002942:	4b66      	ldr	r3, [pc, #408]	; (8002adc <HAL_RCC_OscConfig+0x270>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a65      	ldr	r2, [pc, #404]	; (8002adc <HAL_RCC_OscConfig+0x270>)
 8002948:	f043 0308 	orr.w	r3, r3, #8
 800294c:	6013      	str	r3, [r2, #0]
 800294e:	4b63      	ldr	r3, [pc, #396]	; (8002adc <HAL_RCC_OscConfig+0x270>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6a1b      	ldr	r3, [r3, #32]
 800295a:	4960      	ldr	r1, [pc, #384]	; (8002adc <HAL_RCC_OscConfig+0x270>)
 800295c:	4313      	orrs	r3, r2
 800295e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002960:	4b5e      	ldr	r3, [pc, #376]	; (8002adc <HAL_RCC_OscConfig+0x270>)
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	69db      	ldr	r3, [r3, #28]
 800296c:	021b      	lsls	r3, r3, #8
 800296e:	495b      	ldr	r1, [pc, #364]	; (8002adc <HAL_RCC_OscConfig+0x270>)
 8002970:	4313      	orrs	r3, r2
 8002972:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002974:	69bb      	ldr	r3, [r7, #24]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d109      	bne.n	800298e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6a1b      	ldr	r3, [r3, #32]
 800297e:	4618      	mov	r0, r3
 8002980:	f000 fd52 	bl	8003428 <RCC_SetFlashLatencyFromMSIRange>
 8002984:	4603      	mov	r3, r0
 8002986:	2b00      	cmp	r3, #0
 8002988:	d001      	beq.n	800298e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e380      	b.n	8003090 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800298e:	f000 fc87 	bl	80032a0 <HAL_RCC_GetSysClockFreq>
 8002992:	4602      	mov	r2, r0
 8002994:	4b51      	ldr	r3, [pc, #324]	; (8002adc <HAL_RCC_OscConfig+0x270>)
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	091b      	lsrs	r3, r3, #4
 800299a:	f003 030f 	and.w	r3, r3, #15
 800299e:	4950      	ldr	r1, [pc, #320]	; (8002ae0 <HAL_RCC_OscConfig+0x274>)
 80029a0:	5ccb      	ldrb	r3, [r1, r3]
 80029a2:	f003 031f 	and.w	r3, r3, #31
 80029a6:	fa22 f303 	lsr.w	r3, r2, r3
 80029aa:	4a4e      	ldr	r2, [pc, #312]	; (8002ae4 <HAL_RCC_OscConfig+0x278>)
 80029ac:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80029ae:	4b4e      	ldr	r3, [pc, #312]	; (8002ae8 <HAL_RCC_OscConfig+0x27c>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4618      	mov	r0, r3
 80029b4:	f7fe f9fa 	bl	8000dac <HAL_InitTick>
 80029b8:	4603      	mov	r3, r0
 80029ba:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80029bc:	7bfb      	ldrb	r3, [r7, #15]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d052      	beq.n	8002a68 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80029c2:	7bfb      	ldrb	r3, [r7, #15]
 80029c4:	e364      	b.n	8003090 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	699b      	ldr	r3, [r3, #24]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d032      	beq.n	8002a34 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80029ce:	4b43      	ldr	r3, [pc, #268]	; (8002adc <HAL_RCC_OscConfig+0x270>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a42      	ldr	r2, [pc, #264]	; (8002adc <HAL_RCC_OscConfig+0x270>)
 80029d4:	f043 0301 	orr.w	r3, r3, #1
 80029d8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80029da:	f7fe fa37 	bl	8000e4c <HAL_GetTick>
 80029de:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80029e0:	e008      	b.n	80029f4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80029e2:	f7fe fa33 	bl	8000e4c <HAL_GetTick>
 80029e6:	4602      	mov	r2, r0
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	1ad3      	subs	r3, r2, r3
 80029ec:	2b02      	cmp	r3, #2
 80029ee:	d901      	bls.n	80029f4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80029f0:	2303      	movs	r3, #3
 80029f2:	e34d      	b.n	8003090 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80029f4:	4b39      	ldr	r3, [pc, #228]	; (8002adc <HAL_RCC_OscConfig+0x270>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 0302 	and.w	r3, r3, #2
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d0f0      	beq.n	80029e2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a00:	4b36      	ldr	r3, [pc, #216]	; (8002adc <HAL_RCC_OscConfig+0x270>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a35      	ldr	r2, [pc, #212]	; (8002adc <HAL_RCC_OscConfig+0x270>)
 8002a06:	f043 0308 	orr.w	r3, r3, #8
 8002a0a:	6013      	str	r3, [r2, #0]
 8002a0c:	4b33      	ldr	r3, [pc, #204]	; (8002adc <HAL_RCC_OscConfig+0x270>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6a1b      	ldr	r3, [r3, #32]
 8002a18:	4930      	ldr	r1, [pc, #192]	; (8002adc <HAL_RCC_OscConfig+0x270>)
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a1e:	4b2f      	ldr	r3, [pc, #188]	; (8002adc <HAL_RCC_OscConfig+0x270>)
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	69db      	ldr	r3, [r3, #28]
 8002a2a:	021b      	lsls	r3, r3, #8
 8002a2c:	492b      	ldr	r1, [pc, #172]	; (8002adc <HAL_RCC_OscConfig+0x270>)
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	604b      	str	r3, [r1, #4]
 8002a32:	e01a      	b.n	8002a6a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002a34:	4b29      	ldr	r3, [pc, #164]	; (8002adc <HAL_RCC_OscConfig+0x270>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a28      	ldr	r2, [pc, #160]	; (8002adc <HAL_RCC_OscConfig+0x270>)
 8002a3a:	f023 0301 	bic.w	r3, r3, #1
 8002a3e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002a40:	f7fe fa04 	bl	8000e4c <HAL_GetTick>
 8002a44:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002a46:	e008      	b.n	8002a5a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a48:	f7fe fa00 	bl	8000e4c <HAL_GetTick>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	2b02      	cmp	r3, #2
 8002a54:	d901      	bls.n	8002a5a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002a56:	2303      	movs	r3, #3
 8002a58:	e31a      	b.n	8003090 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002a5a:	4b20      	ldr	r3, [pc, #128]	; (8002adc <HAL_RCC_OscConfig+0x270>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 0302 	and.w	r3, r3, #2
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d1f0      	bne.n	8002a48 <HAL_RCC_OscConfig+0x1dc>
 8002a66:	e000      	b.n	8002a6a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002a68:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 0301 	and.w	r3, r3, #1
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d073      	beq.n	8002b5e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002a76:	69bb      	ldr	r3, [r7, #24]
 8002a78:	2b08      	cmp	r3, #8
 8002a7a:	d005      	beq.n	8002a88 <HAL_RCC_OscConfig+0x21c>
 8002a7c:	69bb      	ldr	r3, [r7, #24]
 8002a7e:	2b0c      	cmp	r3, #12
 8002a80:	d10e      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	2b03      	cmp	r3, #3
 8002a86:	d10b      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a88:	4b14      	ldr	r3, [pc, #80]	; (8002adc <HAL_RCC_OscConfig+0x270>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d063      	beq.n	8002b5c <HAL_RCC_OscConfig+0x2f0>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d15f      	bne.n	8002b5c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e2f7      	b.n	8003090 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002aa8:	d106      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x24c>
 8002aaa:	4b0c      	ldr	r3, [pc, #48]	; (8002adc <HAL_RCC_OscConfig+0x270>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a0b      	ldr	r2, [pc, #44]	; (8002adc <HAL_RCC_OscConfig+0x270>)
 8002ab0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ab4:	6013      	str	r3, [r2, #0]
 8002ab6:	e025      	b.n	8002b04 <HAL_RCC_OscConfig+0x298>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ac0:	d114      	bne.n	8002aec <HAL_RCC_OscConfig+0x280>
 8002ac2:	4b06      	ldr	r3, [pc, #24]	; (8002adc <HAL_RCC_OscConfig+0x270>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a05      	ldr	r2, [pc, #20]	; (8002adc <HAL_RCC_OscConfig+0x270>)
 8002ac8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002acc:	6013      	str	r3, [r2, #0]
 8002ace:	4b03      	ldr	r3, [pc, #12]	; (8002adc <HAL_RCC_OscConfig+0x270>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a02      	ldr	r2, [pc, #8]	; (8002adc <HAL_RCC_OscConfig+0x270>)
 8002ad4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ad8:	6013      	str	r3, [r2, #0]
 8002ada:	e013      	b.n	8002b04 <HAL_RCC_OscConfig+0x298>
 8002adc:	40021000 	.word	0x40021000
 8002ae0:	0800b520 	.word	0x0800b520
 8002ae4:	20000000 	.word	0x20000000
 8002ae8:	20000004 	.word	0x20000004
 8002aec:	4ba0      	ldr	r3, [pc, #640]	; (8002d70 <HAL_RCC_OscConfig+0x504>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a9f      	ldr	r2, [pc, #636]	; (8002d70 <HAL_RCC_OscConfig+0x504>)
 8002af2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002af6:	6013      	str	r3, [r2, #0]
 8002af8:	4b9d      	ldr	r3, [pc, #628]	; (8002d70 <HAL_RCC_OscConfig+0x504>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a9c      	ldr	r2, [pc, #624]	; (8002d70 <HAL_RCC_OscConfig+0x504>)
 8002afe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d013      	beq.n	8002b34 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b0c:	f7fe f99e 	bl	8000e4c <HAL_GetTick>
 8002b10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b12:	e008      	b.n	8002b26 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b14:	f7fe f99a 	bl	8000e4c <HAL_GetTick>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	2b64      	cmp	r3, #100	; 0x64
 8002b20:	d901      	bls.n	8002b26 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002b22:	2303      	movs	r3, #3
 8002b24:	e2b4      	b.n	8003090 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b26:	4b92      	ldr	r3, [pc, #584]	; (8002d70 <HAL_RCC_OscConfig+0x504>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d0f0      	beq.n	8002b14 <HAL_RCC_OscConfig+0x2a8>
 8002b32:	e014      	b.n	8002b5e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b34:	f7fe f98a 	bl	8000e4c <HAL_GetTick>
 8002b38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b3a:	e008      	b.n	8002b4e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b3c:	f7fe f986 	bl	8000e4c <HAL_GetTick>
 8002b40:	4602      	mov	r2, r0
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	1ad3      	subs	r3, r2, r3
 8002b46:	2b64      	cmp	r3, #100	; 0x64
 8002b48:	d901      	bls.n	8002b4e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002b4a:	2303      	movs	r3, #3
 8002b4c:	e2a0      	b.n	8003090 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b4e:	4b88      	ldr	r3, [pc, #544]	; (8002d70 <HAL_RCC_OscConfig+0x504>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d1f0      	bne.n	8002b3c <HAL_RCC_OscConfig+0x2d0>
 8002b5a:	e000      	b.n	8002b5e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 0302 	and.w	r3, r3, #2
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d060      	beq.n	8002c2c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002b6a:	69bb      	ldr	r3, [r7, #24]
 8002b6c:	2b04      	cmp	r3, #4
 8002b6e:	d005      	beq.n	8002b7c <HAL_RCC_OscConfig+0x310>
 8002b70:	69bb      	ldr	r3, [r7, #24]
 8002b72:	2b0c      	cmp	r3, #12
 8002b74:	d119      	bne.n	8002baa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	2b02      	cmp	r3, #2
 8002b7a:	d116      	bne.n	8002baa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b7c:	4b7c      	ldr	r3, [pc, #496]	; (8002d70 <HAL_RCC_OscConfig+0x504>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d005      	beq.n	8002b94 <HAL_RCC_OscConfig+0x328>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	68db      	ldr	r3, [r3, #12]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d101      	bne.n	8002b94 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	e27d      	b.n	8003090 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b94:	4b76      	ldr	r3, [pc, #472]	; (8002d70 <HAL_RCC_OscConfig+0x504>)
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	691b      	ldr	r3, [r3, #16]
 8002ba0:	061b      	lsls	r3, r3, #24
 8002ba2:	4973      	ldr	r1, [pc, #460]	; (8002d70 <HAL_RCC_OscConfig+0x504>)
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ba8:	e040      	b.n	8002c2c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	68db      	ldr	r3, [r3, #12]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d023      	beq.n	8002bfa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bb2:	4b6f      	ldr	r3, [pc, #444]	; (8002d70 <HAL_RCC_OscConfig+0x504>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a6e      	ldr	r2, [pc, #440]	; (8002d70 <HAL_RCC_OscConfig+0x504>)
 8002bb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bbc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bbe:	f7fe f945 	bl	8000e4c <HAL_GetTick>
 8002bc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002bc4:	e008      	b.n	8002bd8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bc6:	f7fe f941 	bl	8000e4c <HAL_GetTick>
 8002bca:	4602      	mov	r2, r0
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	1ad3      	subs	r3, r2, r3
 8002bd0:	2b02      	cmp	r3, #2
 8002bd2:	d901      	bls.n	8002bd8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002bd4:	2303      	movs	r3, #3
 8002bd6:	e25b      	b.n	8003090 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002bd8:	4b65      	ldr	r3, [pc, #404]	; (8002d70 <HAL_RCC_OscConfig+0x504>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d0f0      	beq.n	8002bc6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002be4:	4b62      	ldr	r3, [pc, #392]	; (8002d70 <HAL_RCC_OscConfig+0x504>)
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	691b      	ldr	r3, [r3, #16]
 8002bf0:	061b      	lsls	r3, r3, #24
 8002bf2:	495f      	ldr	r1, [pc, #380]	; (8002d70 <HAL_RCC_OscConfig+0x504>)
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	604b      	str	r3, [r1, #4]
 8002bf8:	e018      	b.n	8002c2c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bfa:	4b5d      	ldr	r3, [pc, #372]	; (8002d70 <HAL_RCC_OscConfig+0x504>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a5c      	ldr	r2, [pc, #368]	; (8002d70 <HAL_RCC_OscConfig+0x504>)
 8002c00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c06:	f7fe f921 	bl	8000e4c <HAL_GetTick>
 8002c0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c0c:	e008      	b.n	8002c20 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c0e:	f7fe f91d 	bl	8000e4c <HAL_GetTick>
 8002c12:	4602      	mov	r2, r0
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	1ad3      	subs	r3, r2, r3
 8002c18:	2b02      	cmp	r3, #2
 8002c1a:	d901      	bls.n	8002c20 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002c1c:	2303      	movs	r3, #3
 8002c1e:	e237      	b.n	8003090 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c20:	4b53      	ldr	r3, [pc, #332]	; (8002d70 <HAL_RCC_OscConfig+0x504>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d1f0      	bne.n	8002c0e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 0308 	and.w	r3, r3, #8
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d03c      	beq.n	8002cb2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	695b      	ldr	r3, [r3, #20]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d01c      	beq.n	8002c7a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c40:	4b4b      	ldr	r3, [pc, #300]	; (8002d70 <HAL_RCC_OscConfig+0x504>)
 8002c42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c46:	4a4a      	ldr	r2, [pc, #296]	; (8002d70 <HAL_RCC_OscConfig+0x504>)
 8002c48:	f043 0301 	orr.w	r3, r3, #1
 8002c4c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c50:	f7fe f8fc 	bl	8000e4c <HAL_GetTick>
 8002c54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c56:	e008      	b.n	8002c6a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c58:	f7fe f8f8 	bl	8000e4c <HAL_GetTick>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	2b02      	cmp	r3, #2
 8002c64:	d901      	bls.n	8002c6a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	e212      	b.n	8003090 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c6a:	4b41      	ldr	r3, [pc, #260]	; (8002d70 <HAL_RCC_OscConfig+0x504>)
 8002c6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c70:	f003 0302 	and.w	r3, r3, #2
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d0ef      	beq.n	8002c58 <HAL_RCC_OscConfig+0x3ec>
 8002c78:	e01b      	b.n	8002cb2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c7a:	4b3d      	ldr	r3, [pc, #244]	; (8002d70 <HAL_RCC_OscConfig+0x504>)
 8002c7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c80:	4a3b      	ldr	r2, [pc, #236]	; (8002d70 <HAL_RCC_OscConfig+0x504>)
 8002c82:	f023 0301 	bic.w	r3, r3, #1
 8002c86:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c8a:	f7fe f8df 	bl	8000e4c <HAL_GetTick>
 8002c8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002c90:	e008      	b.n	8002ca4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c92:	f7fe f8db 	bl	8000e4c <HAL_GetTick>
 8002c96:	4602      	mov	r2, r0
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	1ad3      	subs	r3, r2, r3
 8002c9c:	2b02      	cmp	r3, #2
 8002c9e:	d901      	bls.n	8002ca4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002ca0:	2303      	movs	r3, #3
 8002ca2:	e1f5      	b.n	8003090 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ca4:	4b32      	ldr	r3, [pc, #200]	; (8002d70 <HAL_RCC_OscConfig+0x504>)
 8002ca6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002caa:	f003 0302 	and.w	r3, r3, #2
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d1ef      	bne.n	8002c92 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 0304 	and.w	r3, r3, #4
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	f000 80a6 	beq.w	8002e0c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002cc4:	4b2a      	ldr	r3, [pc, #168]	; (8002d70 <HAL_RCC_OscConfig+0x504>)
 8002cc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d10d      	bne.n	8002cec <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cd0:	4b27      	ldr	r3, [pc, #156]	; (8002d70 <HAL_RCC_OscConfig+0x504>)
 8002cd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cd4:	4a26      	ldr	r2, [pc, #152]	; (8002d70 <HAL_RCC_OscConfig+0x504>)
 8002cd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cda:	6593      	str	r3, [r2, #88]	; 0x58
 8002cdc:	4b24      	ldr	r3, [pc, #144]	; (8002d70 <HAL_RCC_OscConfig+0x504>)
 8002cde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ce0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ce4:	60bb      	str	r3, [r7, #8]
 8002ce6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cec:	4b21      	ldr	r3, [pc, #132]	; (8002d74 <HAL_RCC_OscConfig+0x508>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d118      	bne.n	8002d2a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002cf8:	4b1e      	ldr	r3, [pc, #120]	; (8002d74 <HAL_RCC_OscConfig+0x508>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a1d      	ldr	r2, [pc, #116]	; (8002d74 <HAL_RCC_OscConfig+0x508>)
 8002cfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d02:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d04:	f7fe f8a2 	bl	8000e4c <HAL_GetTick>
 8002d08:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d0a:	e008      	b.n	8002d1e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d0c:	f7fe f89e 	bl	8000e4c <HAL_GetTick>
 8002d10:	4602      	mov	r2, r0
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	2b02      	cmp	r3, #2
 8002d18:	d901      	bls.n	8002d1e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	e1b8      	b.n	8003090 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d1e:	4b15      	ldr	r3, [pc, #84]	; (8002d74 <HAL_RCC_OscConfig+0x508>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d0f0      	beq.n	8002d0c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d108      	bne.n	8002d44 <HAL_RCC_OscConfig+0x4d8>
 8002d32:	4b0f      	ldr	r3, [pc, #60]	; (8002d70 <HAL_RCC_OscConfig+0x504>)
 8002d34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d38:	4a0d      	ldr	r2, [pc, #52]	; (8002d70 <HAL_RCC_OscConfig+0x504>)
 8002d3a:	f043 0301 	orr.w	r3, r3, #1
 8002d3e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d42:	e029      	b.n	8002d98 <HAL_RCC_OscConfig+0x52c>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	2b05      	cmp	r3, #5
 8002d4a:	d115      	bne.n	8002d78 <HAL_RCC_OscConfig+0x50c>
 8002d4c:	4b08      	ldr	r3, [pc, #32]	; (8002d70 <HAL_RCC_OscConfig+0x504>)
 8002d4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d52:	4a07      	ldr	r2, [pc, #28]	; (8002d70 <HAL_RCC_OscConfig+0x504>)
 8002d54:	f043 0304 	orr.w	r3, r3, #4
 8002d58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d5c:	4b04      	ldr	r3, [pc, #16]	; (8002d70 <HAL_RCC_OscConfig+0x504>)
 8002d5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d62:	4a03      	ldr	r2, [pc, #12]	; (8002d70 <HAL_RCC_OscConfig+0x504>)
 8002d64:	f043 0301 	orr.w	r3, r3, #1
 8002d68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d6c:	e014      	b.n	8002d98 <HAL_RCC_OscConfig+0x52c>
 8002d6e:	bf00      	nop
 8002d70:	40021000 	.word	0x40021000
 8002d74:	40007000 	.word	0x40007000
 8002d78:	4b9d      	ldr	r3, [pc, #628]	; (8002ff0 <HAL_RCC_OscConfig+0x784>)
 8002d7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d7e:	4a9c      	ldr	r2, [pc, #624]	; (8002ff0 <HAL_RCC_OscConfig+0x784>)
 8002d80:	f023 0301 	bic.w	r3, r3, #1
 8002d84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d88:	4b99      	ldr	r3, [pc, #612]	; (8002ff0 <HAL_RCC_OscConfig+0x784>)
 8002d8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d8e:	4a98      	ldr	r2, [pc, #608]	; (8002ff0 <HAL_RCC_OscConfig+0x784>)
 8002d90:	f023 0304 	bic.w	r3, r3, #4
 8002d94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d016      	beq.n	8002dce <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002da0:	f7fe f854 	bl	8000e4c <HAL_GetTick>
 8002da4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002da6:	e00a      	b.n	8002dbe <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002da8:	f7fe f850 	bl	8000e4c <HAL_GetTick>
 8002dac:	4602      	mov	r2, r0
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d901      	bls.n	8002dbe <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002dba:	2303      	movs	r3, #3
 8002dbc:	e168      	b.n	8003090 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002dbe:	4b8c      	ldr	r3, [pc, #560]	; (8002ff0 <HAL_RCC_OscConfig+0x784>)
 8002dc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dc4:	f003 0302 	and.w	r3, r3, #2
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d0ed      	beq.n	8002da8 <HAL_RCC_OscConfig+0x53c>
 8002dcc:	e015      	b.n	8002dfa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dce:	f7fe f83d 	bl	8000e4c <HAL_GetTick>
 8002dd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002dd4:	e00a      	b.n	8002dec <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dd6:	f7fe f839 	bl	8000e4c <HAL_GetTick>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	1ad3      	subs	r3, r2, r3
 8002de0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d901      	bls.n	8002dec <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002de8:	2303      	movs	r3, #3
 8002dea:	e151      	b.n	8003090 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002dec:	4b80      	ldr	r3, [pc, #512]	; (8002ff0 <HAL_RCC_OscConfig+0x784>)
 8002dee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002df2:	f003 0302 	and.w	r3, r3, #2
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d1ed      	bne.n	8002dd6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002dfa:	7ffb      	ldrb	r3, [r7, #31]
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	d105      	bne.n	8002e0c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e00:	4b7b      	ldr	r3, [pc, #492]	; (8002ff0 <HAL_RCC_OscConfig+0x784>)
 8002e02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e04:	4a7a      	ldr	r2, [pc, #488]	; (8002ff0 <HAL_RCC_OscConfig+0x784>)
 8002e06:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e0a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 0320 	and.w	r3, r3, #32
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d03c      	beq.n	8002e92 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d01c      	beq.n	8002e5a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002e20:	4b73      	ldr	r3, [pc, #460]	; (8002ff0 <HAL_RCC_OscConfig+0x784>)
 8002e22:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002e26:	4a72      	ldr	r2, [pc, #456]	; (8002ff0 <HAL_RCC_OscConfig+0x784>)
 8002e28:	f043 0301 	orr.w	r3, r3, #1
 8002e2c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e30:	f7fe f80c 	bl	8000e4c <HAL_GetTick>
 8002e34:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002e36:	e008      	b.n	8002e4a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e38:	f7fe f808 	bl	8000e4c <HAL_GetTick>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	2b02      	cmp	r3, #2
 8002e44:	d901      	bls.n	8002e4a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002e46:	2303      	movs	r3, #3
 8002e48:	e122      	b.n	8003090 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002e4a:	4b69      	ldr	r3, [pc, #420]	; (8002ff0 <HAL_RCC_OscConfig+0x784>)
 8002e4c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002e50:	f003 0302 	and.w	r3, r3, #2
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d0ef      	beq.n	8002e38 <HAL_RCC_OscConfig+0x5cc>
 8002e58:	e01b      	b.n	8002e92 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002e5a:	4b65      	ldr	r3, [pc, #404]	; (8002ff0 <HAL_RCC_OscConfig+0x784>)
 8002e5c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002e60:	4a63      	ldr	r2, [pc, #396]	; (8002ff0 <HAL_RCC_OscConfig+0x784>)
 8002e62:	f023 0301 	bic.w	r3, r3, #1
 8002e66:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e6a:	f7fd ffef 	bl	8000e4c <HAL_GetTick>
 8002e6e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002e70:	e008      	b.n	8002e84 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e72:	f7fd ffeb 	bl	8000e4c <HAL_GetTick>
 8002e76:	4602      	mov	r2, r0
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	1ad3      	subs	r3, r2, r3
 8002e7c:	2b02      	cmp	r3, #2
 8002e7e:	d901      	bls.n	8002e84 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002e80:	2303      	movs	r3, #3
 8002e82:	e105      	b.n	8003090 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002e84:	4b5a      	ldr	r3, [pc, #360]	; (8002ff0 <HAL_RCC_OscConfig+0x784>)
 8002e86:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002e8a:	f003 0302 	and.w	r3, r3, #2
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d1ef      	bne.n	8002e72 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	f000 80f9 	beq.w	800308e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ea0:	2b02      	cmp	r3, #2
 8002ea2:	f040 80cf 	bne.w	8003044 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002ea6:	4b52      	ldr	r3, [pc, #328]	; (8002ff0 <HAL_RCC_OscConfig+0x784>)
 8002ea8:	68db      	ldr	r3, [r3, #12]
 8002eaa:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	f003 0203 	and.w	r2, r3, #3
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	d12c      	bne.n	8002f14 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec4:	3b01      	subs	r3, #1
 8002ec6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d123      	bne.n	8002f14 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ed6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	d11b      	bne.n	8002f14 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ee6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d113      	bne.n	8002f14 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ef6:	085b      	lsrs	r3, r3, #1
 8002ef8:	3b01      	subs	r3, #1
 8002efa:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002efc:	429a      	cmp	r2, r3
 8002efe:	d109      	bne.n	8002f14 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0a:	085b      	lsrs	r3, r3, #1
 8002f0c:	3b01      	subs	r3, #1
 8002f0e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f10:	429a      	cmp	r2, r3
 8002f12:	d071      	beq.n	8002ff8 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f14:	69bb      	ldr	r3, [r7, #24]
 8002f16:	2b0c      	cmp	r3, #12
 8002f18:	d068      	beq.n	8002fec <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002f1a:	4b35      	ldr	r3, [pc, #212]	; (8002ff0 <HAL_RCC_OscConfig+0x784>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d105      	bne.n	8002f32 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002f26:	4b32      	ldr	r3, [pc, #200]	; (8002ff0 <HAL_RCC_OscConfig+0x784>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d001      	beq.n	8002f36 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e0ac      	b.n	8003090 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002f36:	4b2e      	ldr	r3, [pc, #184]	; (8002ff0 <HAL_RCC_OscConfig+0x784>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a2d      	ldr	r2, [pc, #180]	; (8002ff0 <HAL_RCC_OscConfig+0x784>)
 8002f3c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f40:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002f42:	f7fd ff83 	bl	8000e4c <HAL_GetTick>
 8002f46:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f48:	e008      	b.n	8002f5c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f4a:	f7fd ff7f 	bl	8000e4c <HAL_GetTick>
 8002f4e:	4602      	mov	r2, r0
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	1ad3      	subs	r3, r2, r3
 8002f54:	2b02      	cmp	r3, #2
 8002f56:	d901      	bls.n	8002f5c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8002f58:	2303      	movs	r3, #3
 8002f5a:	e099      	b.n	8003090 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f5c:	4b24      	ldr	r3, [pc, #144]	; (8002ff0 <HAL_RCC_OscConfig+0x784>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d1f0      	bne.n	8002f4a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f68:	4b21      	ldr	r3, [pc, #132]	; (8002ff0 <HAL_RCC_OscConfig+0x784>)
 8002f6a:	68da      	ldr	r2, [r3, #12]
 8002f6c:	4b21      	ldr	r3, [pc, #132]	; (8002ff4 <HAL_RCC_OscConfig+0x788>)
 8002f6e:	4013      	ands	r3, r2
 8002f70:	687a      	ldr	r2, [r7, #4]
 8002f72:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002f74:	687a      	ldr	r2, [r7, #4]
 8002f76:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002f78:	3a01      	subs	r2, #1
 8002f7a:	0112      	lsls	r2, r2, #4
 8002f7c:	4311      	orrs	r1, r2
 8002f7e:	687a      	ldr	r2, [r7, #4]
 8002f80:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002f82:	0212      	lsls	r2, r2, #8
 8002f84:	4311      	orrs	r1, r2
 8002f86:	687a      	ldr	r2, [r7, #4]
 8002f88:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002f8a:	0852      	lsrs	r2, r2, #1
 8002f8c:	3a01      	subs	r2, #1
 8002f8e:	0552      	lsls	r2, r2, #21
 8002f90:	4311      	orrs	r1, r2
 8002f92:	687a      	ldr	r2, [r7, #4]
 8002f94:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002f96:	0852      	lsrs	r2, r2, #1
 8002f98:	3a01      	subs	r2, #1
 8002f9a:	0652      	lsls	r2, r2, #25
 8002f9c:	4311      	orrs	r1, r2
 8002f9e:	687a      	ldr	r2, [r7, #4]
 8002fa0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002fa2:	06d2      	lsls	r2, r2, #27
 8002fa4:	430a      	orrs	r2, r1
 8002fa6:	4912      	ldr	r1, [pc, #72]	; (8002ff0 <HAL_RCC_OscConfig+0x784>)
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002fac:	4b10      	ldr	r3, [pc, #64]	; (8002ff0 <HAL_RCC_OscConfig+0x784>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a0f      	ldr	r2, [pc, #60]	; (8002ff0 <HAL_RCC_OscConfig+0x784>)
 8002fb2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fb6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002fb8:	4b0d      	ldr	r3, [pc, #52]	; (8002ff0 <HAL_RCC_OscConfig+0x784>)
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	4a0c      	ldr	r2, [pc, #48]	; (8002ff0 <HAL_RCC_OscConfig+0x784>)
 8002fbe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fc2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002fc4:	f7fd ff42 	bl	8000e4c <HAL_GetTick>
 8002fc8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fca:	e008      	b.n	8002fde <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fcc:	f7fd ff3e 	bl	8000e4c <HAL_GetTick>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	1ad3      	subs	r3, r2, r3
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	d901      	bls.n	8002fde <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	e058      	b.n	8003090 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fde:	4b04      	ldr	r3, [pc, #16]	; (8002ff0 <HAL_RCC_OscConfig+0x784>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d0f0      	beq.n	8002fcc <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002fea:	e050      	b.n	800308e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	e04f      	b.n	8003090 <HAL_RCC_OscConfig+0x824>
 8002ff0:	40021000 	.word	0x40021000
 8002ff4:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ff8:	4b27      	ldr	r3, [pc, #156]	; (8003098 <HAL_RCC_OscConfig+0x82c>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003000:	2b00      	cmp	r3, #0
 8003002:	d144      	bne.n	800308e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003004:	4b24      	ldr	r3, [pc, #144]	; (8003098 <HAL_RCC_OscConfig+0x82c>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a23      	ldr	r2, [pc, #140]	; (8003098 <HAL_RCC_OscConfig+0x82c>)
 800300a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800300e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003010:	4b21      	ldr	r3, [pc, #132]	; (8003098 <HAL_RCC_OscConfig+0x82c>)
 8003012:	68db      	ldr	r3, [r3, #12]
 8003014:	4a20      	ldr	r2, [pc, #128]	; (8003098 <HAL_RCC_OscConfig+0x82c>)
 8003016:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800301a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800301c:	f7fd ff16 	bl	8000e4c <HAL_GetTick>
 8003020:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003022:	e008      	b.n	8003036 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003024:	f7fd ff12 	bl	8000e4c <HAL_GetTick>
 8003028:	4602      	mov	r2, r0
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	2b02      	cmp	r3, #2
 8003030:	d901      	bls.n	8003036 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8003032:	2303      	movs	r3, #3
 8003034:	e02c      	b.n	8003090 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003036:	4b18      	ldr	r3, [pc, #96]	; (8003098 <HAL_RCC_OscConfig+0x82c>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800303e:	2b00      	cmp	r3, #0
 8003040:	d0f0      	beq.n	8003024 <HAL_RCC_OscConfig+0x7b8>
 8003042:	e024      	b.n	800308e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003044:	69bb      	ldr	r3, [r7, #24]
 8003046:	2b0c      	cmp	r3, #12
 8003048:	d01f      	beq.n	800308a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800304a:	4b13      	ldr	r3, [pc, #76]	; (8003098 <HAL_RCC_OscConfig+0x82c>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a12      	ldr	r2, [pc, #72]	; (8003098 <HAL_RCC_OscConfig+0x82c>)
 8003050:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003054:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003056:	f7fd fef9 	bl	8000e4c <HAL_GetTick>
 800305a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800305c:	e008      	b.n	8003070 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800305e:	f7fd fef5 	bl	8000e4c <HAL_GetTick>
 8003062:	4602      	mov	r2, r0
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	1ad3      	subs	r3, r2, r3
 8003068:	2b02      	cmp	r3, #2
 800306a:	d901      	bls.n	8003070 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 800306c:	2303      	movs	r3, #3
 800306e:	e00f      	b.n	8003090 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003070:	4b09      	ldr	r3, [pc, #36]	; (8003098 <HAL_RCC_OscConfig+0x82c>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003078:	2b00      	cmp	r3, #0
 800307a:	d1f0      	bne.n	800305e <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800307c:	4b06      	ldr	r3, [pc, #24]	; (8003098 <HAL_RCC_OscConfig+0x82c>)
 800307e:	68da      	ldr	r2, [r3, #12]
 8003080:	4905      	ldr	r1, [pc, #20]	; (8003098 <HAL_RCC_OscConfig+0x82c>)
 8003082:	4b06      	ldr	r3, [pc, #24]	; (800309c <HAL_RCC_OscConfig+0x830>)
 8003084:	4013      	ands	r3, r2
 8003086:	60cb      	str	r3, [r1, #12]
 8003088:	e001      	b.n	800308e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e000      	b.n	8003090 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800308e:	2300      	movs	r3, #0
}
 8003090:	4618      	mov	r0, r3
 8003092:	3720      	adds	r7, #32
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}
 8003098:	40021000 	.word	0x40021000
 800309c:	feeefffc 	.word	0xfeeefffc

080030a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b084      	sub	sp, #16
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
 80030a8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d101      	bne.n	80030b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	e0e7      	b.n	8003284 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030b4:	4b75      	ldr	r3, [pc, #468]	; (800328c <HAL_RCC_ClockConfig+0x1ec>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 0307 	and.w	r3, r3, #7
 80030bc:	683a      	ldr	r2, [r7, #0]
 80030be:	429a      	cmp	r2, r3
 80030c0:	d910      	bls.n	80030e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030c2:	4b72      	ldr	r3, [pc, #456]	; (800328c <HAL_RCC_ClockConfig+0x1ec>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f023 0207 	bic.w	r2, r3, #7
 80030ca:	4970      	ldr	r1, [pc, #448]	; (800328c <HAL_RCC_ClockConfig+0x1ec>)
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	4313      	orrs	r3, r2
 80030d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030d2:	4b6e      	ldr	r3, [pc, #440]	; (800328c <HAL_RCC_ClockConfig+0x1ec>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 0307 	and.w	r3, r3, #7
 80030da:	683a      	ldr	r2, [r7, #0]
 80030dc:	429a      	cmp	r2, r3
 80030de:	d001      	beq.n	80030e4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e0cf      	b.n	8003284 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 0302 	and.w	r3, r3, #2
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d010      	beq.n	8003112 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	689a      	ldr	r2, [r3, #8]
 80030f4:	4b66      	ldr	r3, [pc, #408]	; (8003290 <HAL_RCC_ClockConfig+0x1f0>)
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030fc:	429a      	cmp	r2, r3
 80030fe:	d908      	bls.n	8003112 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003100:	4b63      	ldr	r3, [pc, #396]	; (8003290 <HAL_RCC_ClockConfig+0x1f0>)
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	4960      	ldr	r1, [pc, #384]	; (8003290 <HAL_RCC_ClockConfig+0x1f0>)
 800310e:	4313      	orrs	r3, r2
 8003110:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 0301 	and.w	r3, r3, #1
 800311a:	2b00      	cmp	r3, #0
 800311c:	d04c      	beq.n	80031b8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	2b03      	cmp	r3, #3
 8003124:	d107      	bne.n	8003136 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003126:	4b5a      	ldr	r3, [pc, #360]	; (8003290 <HAL_RCC_ClockConfig+0x1f0>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800312e:	2b00      	cmp	r3, #0
 8003130:	d121      	bne.n	8003176 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	e0a6      	b.n	8003284 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	2b02      	cmp	r3, #2
 800313c:	d107      	bne.n	800314e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800313e:	4b54      	ldr	r3, [pc, #336]	; (8003290 <HAL_RCC_ClockConfig+0x1f0>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d115      	bne.n	8003176 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e09a      	b.n	8003284 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d107      	bne.n	8003166 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003156:	4b4e      	ldr	r3, [pc, #312]	; (8003290 <HAL_RCC_ClockConfig+0x1f0>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 0302 	and.w	r3, r3, #2
 800315e:	2b00      	cmp	r3, #0
 8003160:	d109      	bne.n	8003176 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e08e      	b.n	8003284 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003166:	4b4a      	ldr	r3, [pc, #296]	; (8003290 <HAL_RCC_ClockConfig+0x1f0>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800316e:	2b00      	cmp	r3, #0
 8003170:	d101      	bne.n	8003176 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e086      	b.n	8003284 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003176:	4b46      	ldr	r3, [pc, #280]	; (8003290 <HAL_RCC_ClockConfig+0x1f0>)
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	f023 0203 	bic.w	r2, r3, #3
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	4943      	ldr	r1, [pc, #268]	; (8003290 <HAL_RCC_ClockConfig+0x1f0>)
 8003184:	4313      	orrs	r3, r2
 8003186:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003188:	f7fd fe60 	bl	8000e4c <HAL_GetTick>
 800318c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800318e:	e00a      	b.n	80031a6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003190:	f7fd fe5c 	bl	8000e4c <HAL_GetTick>
 8003194:	4602      	mov	r2, r0
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	1ad3      	subs	r3, r2, r3
 800319a:	f241 3288 	movw	r2, #5000	; 0x1388
 800319e:	4293      	cmp	r3, r2
 80031a0:	d901      	bls.n	80031a6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80031a2:	2303      	movs	r3, #3
 80031a4:	e06e      	b.n	8003284 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031a6:	4b3a      	ldr	r3, [pc, #232]	; (8003290 <HAL_RCC_ClockConfig+0x1f0>)
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	f003 020c 	and.w	r2, r3, #12
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d1eb      	bne.n	8003190 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 0302 	and.w	r3, r3, #2
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d010      	beq.n	80031e6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	689a      	ldr	r2, [r3, #8]
 80031c8:	4b31      	ldr	r3, [pc, #196]	; (8003290 <HAL_RCC_ClockConfig+0x1f0>)
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031d0:	429a      	cmp	r2, r3
 80031d2:	d208      	bcs.n	80031e6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031d4:	4b2e      	ldr	r3, [pc, #184]	; (8003290 <HAL_RCC_ClockConfig+0x1f0>)
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	492b      	ldr	r1, [pc, #172]	; (8003290 <HAL_RCC_ClockConfig+0x1f0>)
 80031e2:	4313      	orrs	r3, r2
 80031e4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80031e6:	4b29      	ldr	r3, [pc, #164]	; (800328c <HAL_RCC_ClockConfig+0x1ec>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 0307 	and.w	r3, r3, #7
 80031ee:	683a      	ldr	r2, [r7, #0]
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d210      	bcs.n	8003216 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031f4:	4b25      	ldr	r3, [pc, #148]	; (800328c <HAL_RCC_ClockConfig+0x1ec>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f023 0207 	bic.w	r2, r3, #7
 80031fc:	4923      	ldr	r1, [pc, #140]	; (800328c <HAL_RCC_ClockConfig+0x1ec>)
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	4313      	orrs	r3, r2
 8003202:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003204:	4b21      	ldr	r3, [pc, #132]	; (800328c <HAL_RCC_ClockConfig+0x1ec>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 0307 	and.w	r3, r3, #7
 800320c:	683a      	ldr	r2, [r7, #0]
 800320e:	429a      	cmp	r2, r3
 8003210:	d001      	beq.n	8003216 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e036      	b.n	8003284 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 0304 	and.w	r3, r3, #4
 800321e:	2b00      	cmp	r3, #0
 8003220:	d008      	beq.n	8003234 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003222:	4b1b      	ldr	r3, [pc, #108]	; (8003290 <HAL_RCC_ClockConfig+0x1f0>)
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	68db      	ldr	r3, [r3, #12]
 800322e:	4918      	ldr	r1, [pc, #96]	; (8003290 <HAL_RCC_ClockConfig+0x1f0>)
 8003230:	4313      	orrs	r3, r2
 8003232:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 0308 	and.w	r3, r3, #8
 800323c:	2b00      	cmp	r3, #0
 800323e:	d009      	beq.n	8003254 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003240:	4b13      	ldr	r3, [pc, #76]	; (8003290 <HAL_RCC_ClockConfig+0x1f0>)
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	691b      	ldr	r3, [r3, #16]
 800324c:	00db      	lsls	r3, r3, #3
 800324e:	4910      	ldr	r1, [pc, #64]	; (8003290 <HAL_RCC_ClockConfig+0x1f0>)
 8003250:	4313      	orrs	r3, r2
 8003252:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003254:	f000 f824 	bl	80032a0 <HAL_RCC_GetSysClockFreq>
 8003258:	4602      	mov	r2, r0
 800325a:	4b0d      	ldr	r3, [pc, #52]	; (8003290 <HAL_RCC_ClockConfig+0x1f0>)
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	091b      	lsrs	r3, r3, #4
 8003260:	f003 030f 	and.w	r3, r3, #15
 8003264:	490b      	ldr	r1, [pc, #44]	; (8003294 <HAL_RCC_ClockConfig+0x1f4>)
 8003266:	5ccb      	ldrb	r3, [r1, r3]
 8003268:	f003 031f 	and.w	r3, r3, #31
 800326c:	fa22 f303 	lsr.w	r3, r2, r3
 8003270:	4a09      	ldr	r2, [pc, #36]	; (8003298 <HAL_RCC_ClockConfig+0x1f8>)
 8003272:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003274:	4b09      	ldr	r3, [pc, #36]	; (800329c <HAL_RCC_ClockConfig+0x1fc>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4618      	mov	r0, r3
 800327a:	f7fd fd97 	bl	8000dac <HAL_InitTick>
 800327e:	4603      	mov	r3, r0
 8003280:	72fb      	strb	r3, [r7, #11]

  return status;
 8003282:	7afb      	ldrb	r3, [r7, #11]
}
 8003284:	4618      	mov	r0, r3
 8003286:	3710      	adds	r7, #16
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}
 800328c:	40022000 	.word	0x40022000
 8003290:	40021000 	.word	0x40021000
 8003294:	0800b520 	.word	0x0800b520
 8003298:	20000000 	.word	0x20000000
 800329c:	20000004 	.word	0x20000004

080032a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b089      	sub	sp, #36	; 0x24
 80032a4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80032a6:	2300      	movs	r3, #0
 80032a8:	61fb      	str	r3, [r7, #28]
 80032aa:	2300      	movs	r3, #0
 80032ac:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032ae:	4b3e      	ldr	r3, [pc, #248]	; (80033a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	f003 030c 	and.w	r3, r3, #12
 80032b6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80032b8:	4b3b      	ldr	r3, [pc, #236]	; (80033a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80032ba:	68db      	ldr	r3, [r3, #12]
 80032bc:	f003 0303 	and.w	r3, r3, #3
 80032c0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d005      	beq.n	80032d4 <HAL_RCC_GetSysClockFreq+0x34>
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	2b0c      	cmp	r3, #12
 80032cc:	d121      	bne.n	8003312 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d11e      	bne.n	8003312 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80032d4:	4b34      	ldr	r3, [pc, #208]	; (80033a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 0308 	and.w	r3, r3, #8
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d107      	bne.n	80032f0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80032e0:	4b31      	ldr	r3, [pc, #196]	; (80033a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80032e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032e6:	0a1b      	lsrs	r3, r3, #8
 80032e8:	f003 030f 	and.w	r3, r3, #15
 80032ec:	61fb      	str	r3, [r7, #28]
 80032ee:	e005      	b.n	80032fc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80032f0:	4b2d      	ldr	r3, [pc, #180]	; (80033a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	091b      	lsrs	r3, r3, #4
 80032f6:	f003 030f 	and.w	r3, r3, #15
 80032fa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80032fc:	4a2b      	ldr	r2, [pc, #172]	; (80033ac <HAL_RCC_GetSysClockFreq+0x10c>)
 80032fe:	69fb      	ldr	r3, [r7, #28]
 8003300:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003304:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d10d      	bne.n	8003328 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800330c:	69fb      	ldr	r3, [r7, #28]
 800330e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003310:	e00a      	b.n	8003328 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	2b04      	cmp	r3, #4
 8003316:	d102      	bne.n	800331e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003318:	4b25      	ldr	r3, [pc, #148]	; (80033b0 <HAL_RCC_GetSysClockFreq+0x110>)
 800331a:	61bb      	str	r3, [r7, #24]
 800331c:	e004      	b.n	8003328 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	2b08      	cmp	r3, #8
 8003322:	d101      	bne.n	8003328 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003324:	4b23      	ldr	r3, [pc, #140]	; (80033b4 <HAL_RCC_GetSysClockFreq+0x114>)
 8003326:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	2b0c      	cmp	r3, #12
 800332c:	d134      	bne.n	8003398 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800332e:	4b1e      	ldr	r3, [pc, #120]	; (80033a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003330:	68db      	ldr	r3, [r3, #12]
 8003332:	f003 0303 	and.w	r3, r3, #3
 8003336:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	2b02      	cmp	r3, #2
 800333c:	d003      	beq.n	8003346 <HAL_RCC_GetSysClockFreq+0xa6>
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	2b03      	cmp	r3, #3
 8003342:	d003      	beq.n	800334c <HAL_RCC_GetSysClockFreq+0xac>
 8003344:	e005      	b.n	8003352 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003346:	4b1a      	ldr	r3, [pc, #104]	; (80033b0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003348:	617b      	str	r3, [r7, #20]
      break;
 800334a:	e005      	b.n	8003358 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800334c:	4b19      	ldr	r3, [pc, #100]	; (80033b4 <HAL_RCC_GetSysClockFreq+0x114>)
 800334e:	617b      	str	r3, [r7, #20]
      break;
 8003350:	e002      	b.n	8003358 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003352:	69fb      	ldr	r3, [r7, #28]
 8003354:	617b      	str	r3, [r7, #20]
      break;
 8003356:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003358:	4b13      	ldr	r3, [pc, #76]	; (80033a8 <HAL_RCC_GetSysClockFreq+0x108>)
 800335a:	68db      	ldr	r3, [r3, #12]
 800335c:	091b      	lsrs	r3, r3, #4
 800335e:	f003 0307 	and.w	r3, r3, #7
 8003362:	3301      	adds	r3, #1
 8003364:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003366:	4b10      	ldr	r3, [pc, #64]	; (80033a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003368:	68db      	ldr	r3, [r3, #12]
 800336a:	0a1b      	lsrs	r3, r3, #8
 800336c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003370:	697a      	ldr	r2, [r7, #20]
 8003372:	fb03 f202 	mul.w	r2, r3, r2
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	fbb2 f3f3 	udiv	r3, r2, r3
 800337c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800337e:	4b0a      	ldr	r3, [pc, #40]	; (80033a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003380:	68db      	ldr	r3, [r3, #12]
 8003382:	0e5b      	lsrs	r3, r3, #25
 8003384:	f003 0303 	and.w	r3, r3, #3
 8003388:	3301      	adds	r3, #1
 800338a:	005b      	lsls	r3, r3, #1
 800338c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800338e:	697a      	ldr	r2, [r7, #20]
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	fbb2 f3f3 	udiv	r3, r2, r3
 8003396:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003398:	69bb      	ldr	r3, [r7, #24]
}
 800339a:	4618      	mov	r0, r3
 800339c:	3724      	adds	r7, #36	; 0x24
 800339e:	46bd      	mov	sp, r7
 80033a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a4:	4770      	bx	lr
 80033a6:	bf00      	nop
 80033a8:	40021000 	.word	0x40021000
 80033ac:	0800b538 	.word	0x0800b538
 80033b0:	00f42400 	.word	0x00f42400
 80033b4:	007a1200 	.word	0x007a1200

080033b8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033b8:	b480      	push	{r7}
 80033ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033bc:	4b03      	ldr	r3, [pc, #12]	; (80033cc <HAL_RCC_GetHCLKFreq+0x14>)
 80033be:	681b      	ldr	r3, [r3, #0]
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr
 80033ca:	bf00      	nop
 80033cc:	20000000 	.word	0x20000000

080033d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80033d4:	f7ff fff0 	bl	80033b8 <HAL_RCC_GetHCLKFreq>
 80033d8:	4602      	mov	r2, r0
 80033da:	4b06      	ldr	r3, [pc, #24]	; (80033f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	0a1b      	lsrs	r3, r3, #8
 80033e0:	f003 0307 	and.w	r3, r3, #7
 80033e4:	4904      	ldr	r1, [pc, #16]	; (80033f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80033e6:	5ccb      	ldrb	r3, [r1, r3]
 80033e8:	f003 031f 	and.w	r3, r3, #31
 80033ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	bd80      	pop	{r7, pc}
 80033f4:	40021000 	.word	0x40021000
 80033f8:	0800b530 	.word	0x0800b530

080033fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003400:	f7ff ffda 	bl	80033b8 <HAL_RCC_GetHCLKFreq>
 8003404:	4602      	mov	r2, r0
 8003406:	4b06      	ldr	r3, [pc, #24]	; (8003420 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	0adb      	lsrs	r3, r3, #11
 800340c:	f003 0307 	and.w	r3, r3, #7
 8003410:	4904      	ldr	r1, [pc, #16]	; (8003424 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003412:	5ccb      	ldrb	r3, [r1, r3]
 8003414:	f003 031f 	and.w	r3, r3, #31
 8003418:	fa22 f303 	lsr.w	r3, r2, r3
}
 800341c:	4618      	mov	r0, r3
 800341e:	bd80      	pop	{r7, pc}
 8003420:	40021000 	.word	0x40021000
 8003424:	0800b530 	.word	0x0800b530

08003428 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b086      	sub	sp, #24
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003430:	2300      	movs	r3, #0
 8003432:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003434:	4b2a      	ldr	r3, [pc, #168]	; (80034e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003436:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003438:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800343c:	2b00      	cmp	r3, #0
 800343e:	d003      	beq.n	8003448 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003440:	f7ff f990 	bl	8002764 <HAL_PWREx_GetVoltageRange>
 8003444:	6178      	str	r0, [r7, #20]
 8003446:	e014      	b.n	8003472 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003448:	4b25      	ldr	r3, [pc, #148]	; (80034e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800344a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800344c:	4a24      	ldr	r2, [pc, #144]	; (80034e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800344e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003452:	6593      	str	r3, [r2, #88]	; 0x58
 8003454:	4b22      	ldr	r3, [pc, #136]	; (80034e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003456:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003458:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800345c:	60fb      	str	r3, [r7, #12]
 800345e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003460:	f7ff f980 	bl	8002764 <HAL_PWREx_GetVoltageRange>
 8003464:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003466:	4b1e      	ldr	r3, [pc, #120]	; (80034e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003468:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800346a:	4a1d      	ldr	r2, [pc, #116]	; (80034e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800346c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003470:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003478:	d10b      	bne.n	8003492 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2b80      	cmp	r3, #128	; 0x80
 800347e:	d919      	bls.n	80034b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2ba0      	cmp	r3, #160	; 0xa0
 8003484:	d902      	bls.n	800348c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003486:	2302      	movs	r3, #2
 8003488:	613b      	str	r3, [r7, #16]
 800348a:	e013      	b.n	80034b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800348c:	2301      	movs	r3, #1
 800348e:	613b      	str	r3, [r7, #16]
 8003490:	e010      	b.n	80034b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2b80      	cmp	r3, #128	; 0x80
 8003496:	d902      	bls.n	800349e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003498:	2303      	movs	r3, #3
 800349a:	613b      	str	r3, [r7, #16]
 800349c:	e00a      	b.n	80034b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2b80      	cmp	r3, #128	; 0x80
 80034a2:	d102      	bne.n	80034aa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80034a4:	2302      	movs	r3, #2
 80034a6:	613b      	str	r3, [r7, #16]
 80034a8:	e004      	b.n	80034b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2b70      	cmp	r3, #112	; 0x70
 80034ae:	d101      	bne.n	80034b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80034b0:	2301      	movs	r3, #1
 80034b2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80034b4:	4b0b      	ldr	r3, [pc, #44]	; (80034e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f023 0207 	bic.w	r2, r3, #7
 80034bc:	4909      	ldr	r1, [pc, #36]	; (80034e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	4313      	orrs	r3, r2
 80034c2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80034c4:	4b07      	ldr	r3, [pc, #28]	; (80034e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 0307 	and.w	r3, r3, #7
 80034cc:	693a      	ldr	r2, [r7, #16]
 80034ce:	429a      	cmp	r2, r3
 80034d0:	d001      	beq.n	80034d6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	e000      	b.n	80034d8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80034d6:	2300      	movs	r3, #0
}
 80034d8:	4618      	mov	r0, r3
 80034da:	3718      	adds	r7, #24
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}
 80034e0:	40021000 	.word	0x40021000
 80034e4:	40022000 	.word	0x40022000

080034e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b086      	sub	sp, #24
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80034f0:	2300      	movs	r3, #0
 80034f2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80034f4:	2300      	movs	r3, #0
 80034f6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003500:	2b00      	cmp	r3, #0
 8003502:	d041      	beq.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003508:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800350c:	d02a      	beq.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800350e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003512:	d824      	bhi.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003514:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003518:	d008      	beq.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800351a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800351e:	d81e      	bhi.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003520:	2b00      	cmp	r3, #0
 8003522:	d00a      	beq.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003524:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003528:	d010      	beq.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800352a:	e018      	b.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800352c:	4b86      	ldr	r3, [pc, #536]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800352e:	68db      	ldr	r3, [r3, #12]
 8003530:	4a85      	ldr	r2, [pc, #532]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003532:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003536:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003538:	e015      	b.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	3304      	adds	r3, #4
 800353e:	2100      	movs	r1, #0
 8003540:	4618      	mov	r0, r3
 8003542:	f000 fadd 	bl	8003b00 <RCCEx_PLLSAI1_Config>
 8003546:	4603      	mov	r3, r0
 8003548:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800354a:	e00c      	b.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	3320      	adds	r3, #32
 8003550:	2100      	movs	r1, #0
 8003552:	4618      	mov	r0, r3
 8003554:	f000 fbc6 	bl	8003ce4 <RCCEx_PLLSAI2_Config>
 8003558:	4603      	mov	r3, r0
 800355a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800355c:	e003      	b.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	74fb      	strb	r3, [r7, #19]
      break;
 8003562:	e000      	b.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003564:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003566:	7cfb      	ldrb	r3, [r7, #19]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d10b      	bne.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800356c:	4b76      	ldr	r3, [pc, #472]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800356e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003572:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800357a:	4973      	ldr	r1, [pc, #460]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800357c:	4313      	orrs	r3, r2
 800357e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003582:	e001      	b.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003584:	7cfb      	ldrb	r3, [r7, #19]
 8003586:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003590:	2b00      	cmp	r3, #0
 8003592:	d041      	beq.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003598:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800359c:	d02a      	beq.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800359e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80035a2:	d824      	bhi.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x106>
 80035a4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80035a8:	d008      	beq.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80035aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80035ae:	d81e      	bhi.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x106>
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d00a      	beq.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80035b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80035b8:	d010      	beq.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80035ba:	e018      	b.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80035bc:	4b62      	ldr	r3, [pc, #392]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035be:	68db      	ldr	r3, [r3, #12]
 80035c0:	4a61      	ldr	r2, [pc, #388]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035c6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80035c8:	e015      	b.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	3304      	adds	r3, #4
 80035ce:	2100      	movs	r1, #0
 80035d0:	4618      	mov	r0, r3
 80035d2:	f000 fa95 	bl	8003b00 <RCCEx_PLLSAI1_Config>
 80035d6:	4603      	mov	r3, r0
 80035d8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80035da:	e00c      	b.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	3320      	adds	r3, #32
 80035e0:	2100      	movs	r1, #0
 80035e2:	4618      	mov	r0, r3
 80035e4:	f000 fb7e 	bl	8003ce4 <RCCEx_PLLSAI2_Config>
 80035e8:	4603      	mov	r3, r0
 80035ea:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80035ec:	e003      	b.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	74fb      	strb	r3, [r7, #19]
      break;
 80035f2:	e000      	b.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80035f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035f6:	7cfb      	ldrb	r3, [r7, #19]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d10b      	bne.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80035fc:	4b52      	ldr	r3, [pc, #328]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003602:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800360a:	494f      	ldr	r1, [pc, #316]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800360c:	4313      	orrs	r3, r2
 800360e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003612:	e001      	b.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003614:	7cfb      	ldrb	r3, [r7, #19]
 8003616:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003620:	2b00      	cmp	r3, #0
 8003622:	f000 80a0 	beq.w	8003766 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003626:	2300      	movs	r3, #0
 8003628:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800362a:	4b47      	ldr	r3, [pc, #284]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800362c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800362e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003632:	2b00      	cmp	r3, #0
 8003634:	d101      	bne.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003636:	2301      	movs	r3, #1
 8003638:	e000      	b.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800363a:	2300      	movs	r3, #0
 800363c:	2b00      	cmp	r3, #0
 800363e:	d00d      	beq.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003640:	4b41      	ldr	r3, [pc, #260]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003642:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003644:	4a40      	ldr	r2, [pc, #256]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003646:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800364a:	6593      	str	r3, [r2, #88]	; 0x58
 800364c:	4b3e      	ldr	r3, [pc, #248]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800364e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003650:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003654:	60bb      	str	r3, [r7, #8]
 8003656:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003658:	2301      	movs	r3, #1
 800365a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800365c:	4b3b      	ldr	r3, [pc, #236]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a3a      	ldr	r2, [pc, #232]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003662:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003666:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003668:	f7fd fbf0 	bl	8000e4c <HAL_GetTick>
 800366c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800366e:	e009      	b.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003670:	f7fd fbec 	bl	8000e4c <HAL_GetTick>
 8003674:	4602      	mov	r2, r0
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	1ad3      	subs	r3, r2, r3
 800367a:	2b02      	cmp	r3, #2
 800367c:	d902      	bls.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800367e:	2303      	movs	r3, #3
 8003680:	74fb      	strb	r3, [r7, #19]
        break;
 8003682:	e005      	b.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003684:	4b31      	ldr	r3, [pc, #196]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800368c:	2b00      	cmp	r3, #0
 800368e:	d0ef      	beq.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003690:	7cfb      	ldrb	r3, [r7, #19]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d15c      	bne.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003696:	4b2c      	ldr	r3, [pc, #176]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003698:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800369c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036a0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d01f      	beq.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036ae:	697a      	ldr	r2, [r7, #20]
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d019      	beq.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80036b4:	4b24      	ldr	r3, [pc, #144]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036be:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80036c0:	4b21      	ldr	r3, [pc, #132]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036c6:	4a20      	ldr	r2, [pc, #128]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80036d0:	4b1d      	ldr	r3, [pc, #116]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036d6:	4a1c      	ldr	r2, [pc, #112]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80036e0:	4a19      	ldr	r2, [pc, #100]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	f003 0301 	and.w	r3, r3, #1
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d016      	beq.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036f2:	f7fd fbab 	bl	8000e4c <HAL_GetTick>
 80036f6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036f8:	e00b      	b.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036fa:	f7fd fba7 	bl	8000e4c <HAL_GetTick>
 80036fe:	4602      	mov	r2, r0
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	1ad3      	subs	r3, r2, r3
 8003704:	f241 3288 	movw	r2, #5000	; 0x1388
 8003708:	4293      	cmp	r3, r2
 800370a:	d902      	bls.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800370c:	2303      	movs	r3, #3
 800370e:	74fb      	strb	r3, [r7, #19]
            break;
 8003710:	e006      	b.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003712:	4b0d      	ldr	r3, [pc, #52]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003714:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003718:	f003 0302 	and.w	r3, r3, #2
 800371c:	2b00      	cmp	r3, #0
 800371e:	d0ec      	beq.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003720:	7cfb      	ldrb	r3, [r7, #19]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d10c      	bne.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003726:	4b08      	ldr	r3, [pc, #32]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003728:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800372c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003736:	4904      	ldr	r1, [pc, #16]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003738:	4313      	orrs	r3, r2
 800373a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800373e:	e009      	b.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003740:	7cfb      	ldrb	r3, [r7, #19]
 8003742:	74bb      	strb	r3, [r7, #18]
 8003744:	e006      	b.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003746:	bf00      	nop
 8003748:	40021000 	.word	0x40021000
 800374c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003750:	7cfb      	ldrb	r3, [r7, #19]
 8003752:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003754:	7c7b      	ldrb	r3, [r7, #17]
 8003756:	2b01      	cmp	r3, #1
 8003758:	d105      	bne.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800375a:	4ba6      	ldr	r3, [pc, #664]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800375c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800375e:	4aa5      	ldr	r2, [pc, #660]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003760:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003764:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f003 0301 	and.w	r3, r3, #1
 800376e:	2b00      	cmp	r3, #0
 8003770:	d00a      	beq.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003772:	4ba0      	ldr	r3, [pc, #640]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003774:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003778:	f023 0203 	bic.w	r2, r3, #3
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003780:	499c      	ldr	r1, [pc, #624]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003782:	4313      	orrs	r3, r2
 8003784:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 0302 	and.w	r3, r3, #2
 8003790:	2b00      	cmp	r3, #0
 8003792:	d00a      	beq.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003794:	4b97      	ldr	r3, [pc, #604]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003796:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800379a:	f023 020c 	bic.w	r2, r3, #12
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037a2:	4994      	ldr	r1, [pc, #592]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80037a4:	4313      	orrs	r3, r2
 80037a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 0304 	and.w	r3, r3, #4
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d00a      	beq.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80037b6:	4b8f      	ldr	r3, [pc, #572]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80037b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037bc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c4:	498b      	ldr	r1, [pc, #556]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80037c6:	4313      	orrs	r3, r2
 80037c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 0308 	and.w	r3, r3, #8
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d00a      	beq.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80037d8:	4b86      	ldr	r3, [pc, #536]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80037da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037de:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037e6:	4983      	ldr	r1, [pc, #524]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80037e8:	4313      	orrs	r3, r2
 80037ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 0310 	and.w	r3, r3, #16
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d00a      	beq.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80037fa:	4b7e      	ldr	r3, [pc, #504]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80037fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003800:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003808:	497a      	ldr	r1, [pc, #488]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800380a:	4313      	orrs	r3, r2
 800380c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 0320 	and.w	r3, r3, #32
 8003818:	2b00      	cmp	r3, #0
 800381a:	d00a      	beq.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800381c:	4b75      	ldr	r3, [pc, #468]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800381e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003822:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800382a:	4972      	ldr	r1, [pc, #456]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800382c:	4313      	orrs	r3, r2
 800382e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800383a:	2b00      	cmp	r3, #0
 800383c:	d00a      	beq.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800383e:	4b6d      	ldr	r3, [pc, #436]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003840:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003844:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800384c:	4969      	ldr	r1, [pc, #420]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800384e:	4313      	orrs	r3, r2
 8003850:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800385c:	2b00      	cmp	r3, #0
 800385e:	d00a      	beq.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003860:	4b64      	ldr	r3, [pc, #400]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003862:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003866:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800386e:	4961      	ldr	r1, [pc, #388]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003870:	4313      	orrs	r3, r2
 8003872:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800387e:	2b00      	cmp	r3, #0
 8003880:	d00a      	beq.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003882:	4b5c      	ldr	r3, [pc, #368]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003884:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003888:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003890:	4958      	ldr	r1, [pc, #352]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003892:	4313      	orrs	r3, r2
 8003894:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d00a      	beq.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80038a4:	4b53      	ldr	r3, [pc, #332]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80038a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038aa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038b2:	4950      	ldr	r1, [pc, #320]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80038b4:	4313      	orrs	r3, r2
 80038b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d00a      	beq.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80038c6:	4b4b      	ldr	r3, [pc, #300]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80038c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038cc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038d4:	4947      	ldr	r1, [pc, #284]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80038d6:	4313      	orrs	r3, r2
 80038d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d00a      	beq.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80038e8:	4b42      	ldr	r3, [pc, #264]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80038ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80038ee:	f023 0203 	bic.w	r2, r3, #3
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038f6:	493f      	ldr	r1, [pc, #252]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80038f8:	4313      	orrs	r3, r2
 80038fa:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003906:	2b00      	cmp	r3, #0
 8003908:	d028      	beq.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800390a:	4b3a      	ldr	r3, [pc, #232]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800390c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003910:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003918:	4936      	ldr	r1, [pc, #216]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800391a:	4313      	orrs	r3, r2
 800391c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003924:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003928:	d106      	bne.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800392a:	4b32      	ldr	r3, [pc, #200]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800392c:	68db      	ldr	r3, [r3, #12]
 800392e:	4a31      	ldr	r2, [pc, #196]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003930:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003934:	60d3      	str	r3, [r2, #12]
 8003936:	e011      	b.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800393c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003940:	d10c      	bne.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	3304      	adds	r3, #4
 8003946:	2101      	movs	r1, #1
 8003948:	4618      	mov	r0, r3
 800394a:	f000 f8d9 	bl	8003b00 <RCCEx_PLLSAI1_Config>
 800394e:	4603      	mov	r3, r0
 8003950:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003952:	7cfb      	ldrb	r3, [r7, #19]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d001      	beq.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 8003958:	7cfb      	ldrb	r3, [r7, #19]
 800395a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003964:	2b00      	cmp	r3, #0
 8003966:	d028      	beq.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003968:	4b22      	ldr	r3, [pc, #136]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800396a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800396e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003976:	491f      	ldr	r1, [pc, #124]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003978:	4313      	orrs	r3, r2
 800397a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003982:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003986:	d106      	bne.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003988:	4b1a      	ldr	r3, [pc, #104]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800398a:	68db      	ldr	r3, [r3, #12]
 800398c:	4a19      	ldr	r2, [pc, #100]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800398e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003992:	60d3      	str	r3, [r2, #12]
 8003994:	e011      	b.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800399a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800399e:	d10c      	bne.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	3304      	adds	r3, #4
 80039a4:	2101      	movs	r1, #1
 80039a6:	4618      	mov	r0, r3
 80039a8:	f000 f8aa 	bl	8003b00 <RCCEx_PLLSAI1_Config>
 80039ac:	4603      	mov	r3, r0
 80039ae:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80039b0:	7cfb      	ldrb	r3, [r7, #19]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d001      	beq.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 80039b6:	7cfb      	ldrb	r3, [r7, #19]
 80039b8:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d02a      	beq.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80039c6:	4b0b      	ldr	r3, [pc, #44]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80039c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039cc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80039d4:	4907      	ldr	r1, [pc, #28]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80039d6:	4313      	orrs	r3, r2
 80039d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80039e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80039e4:	d108      	bne.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80039e6:	4b03      	ldr	r3, [pc, #12]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80039e8:	68db      	ldr	r3, [r3, #12]
 80039ea:	4a02      	ldr	r2, [pc, #8]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80039ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80039f0:	60d3      	str	r3, [r2, #12]
 80039f2:	e013      	b.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x534>
 80039f4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80039fc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a00:	d10c      	bne.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	3304      	adds	r3, #4
 8003a06:	2101      	movs	r1, #1
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f000 f879 	bl	8003b00 <RCCEx_PLLSAI1_Config>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a12:	7cfb      	ldrb	r3, [r7, #19]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d001      	beq.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8003a18:	7cfb      	ldrb	r3, [r7, #19]
 8003a1a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d02f      	beq.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003a28:	4b2c      	ldr	r3, [pc, #176]	; (8003adc <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a2e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a36:	4929      	ldr	r1, [pc, #164]	; (8003adc <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a42:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a46:	d10d      	bne.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	3304      	adds	r3, #4
 8003a4c:	2102      	movs	r1, #2
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f000 f856 	bl	8003b00 <RCCEx_PLLSAI1_Config>
 8003a54:	4603      	mov	r3, r0
 8003a56:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a58:	7cfb      	ldrb	r3, [r7, #19]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d014      	beq.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8003a5e:	7cfb      	ldrb	r3, [r7, #19]
 8003a60:	74bb      	strb	r3, [r7, #18]
 8003a62:	e011      	b.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a6c:	d10c      	bne.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	3320      	adds	r3, #32
 8003a72:	2102      	movs	r1, #2
 8003a74:	4618      	mov	r0, r3
 8003a76:	f000 f935 	bl	8003ce4 <RCCEx_PLLSAI2_Config>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a7e:	7cfb      	ldrb	r3, [r7, #19]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d001      	beq.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8003a84:	7cfb      	ldrb	r3, [r7, #19]
 8003a86:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d00b      	beq.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003a94:	4b11      	ldr	r3, [pc, #68]	; (8003adc <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a9a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003aa4:	490d      	ldr	r1, [pc, #52]	; (8003adc <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d00b      	beq.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003ab8:	4b08      	ldr	r3, [pc, #32]	; (8003adc <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003abe:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ac8:	4904      	ldr	r1, [pc, #16]	; (8003adc <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003aca:	4313      	orrs	r3, r2
 8003acc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003ad0:	7cbb      	ldrb	r3, [r7, #18]
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3718      	adds	r7, #24
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}
 8003ada:	bf00      	nop
 8003adc:	40021000 	.word	0x40021000

08003ae0 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003ae4:	4b05      	ldr	r3, [pc, #20]	; (8003afc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a04      	ldr	r2, [pc, #16]	; (8003afc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003aea:	f043 0304 	orr.w	r3, r3, #4
 8003aee:	6013      	str	r3, [r2, #0]
}
 8003af0:	bf00      	nop
 8003af2:	46bd      	mov	sp, r7
 8003af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af8:	4770      	bx	lr
 8003afa:	bf00      	nop
 8003afc:	40021000 	.word	0x40021000

08003b00 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b084      	sub	sp, #16
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
 8003b08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003b0e:	4b74      	ldr	r3, [pc, #464]	; (8003ce0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b10:	68db      	ldr	r3, [r3, #12]
 8003b12:	f003 0303 	and.w	r3, r3, #3
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d018      	beq.n	8003b4c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003b1a:	4b71      	ldr	r3, [pc, #452]	; (8003ce0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b1c:	68db      	ldr	r3, [r3, #12]
 8003b1e:	f003 0203 	and.w	r2, r3, #3
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	429a      	cmp	r2, r3
 8003b28:	d10d      	bne.n	8003b46 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
       ||
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d009      	beq.n	8003b46 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003b32:	4b6b      	ldr	r3, [pc, #428]	; (8003ce0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b34:	68db      	ldr	r3, [r3, #12]
 8003b36:	091b      	lsrs	r3, r3, #4
 8003b38:	f003 0307 	and.w	r3, r3, #7
 8003b3c:	1c5a      	adds	r2, r3, #1
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	685b      	ldr	r3, [r3, #4]
       ||
 8003b42:	429a      	cmp	r2, r3
 8003b44:	d047      	beq.n	8003bd6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	73fb      	strb	r3, [r7, #15]
 8003b4a:	e044      	b.n	8003bd6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	2b03      	cmp	r3, #3
 8003b52:	d018      	beq.n	8003b86 <RCCEx_PLLSAI1_Config+0x86>
 8003b54:	2b03      	cmp	r3, #3
 8003b56:	d825      	bhi.n	8003ba4 <RCCEx_PLLSAI1_Config+0xa4>
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	d002      	beq.n	8003b62 <RCCEx_PLLSAI1_Config+0x62>
 8003b5c:	2b02      	cmp	r3, #2
 8003b5e:	d009      	beq.n	8003b74 <RCCEx_PLLSAI1_Config+0x74>
 8003b60:	e020      	b.n	8003ba4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003b62:	4b5f      	ldr	r3, [pc, #380]	; (8003ce0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f003 0302 	and.w	r3, r3, #2
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d11d      	bne.n	8003baa <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b72:	e01a      	b.n	8003baa <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003b74:	4b5a      	ldr	r3, [pc, #360]	; (8003ce0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d116      	bne.n	8003bae <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b84:	e013      	b.n	8003bae <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003b86:	4b56      	ldr	r3, [pc, #344]	; (8003ce0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d10f      	bne.n	8003bb2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003b92:	4b53      	ldr	r3, [pc, #332]	; (8003ce0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d109      	bne.n	8003bb2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003ba2:	e006      	b.n	8003bb2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	73fb      	strb	r3, [r7, #15]
      break;
 8003ba8:	e004      	b.n	8003bb4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003baa:	bf00      	nop
 8003bac:	e002      	b.n	8003bb4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003bae:	bf00      	nop
 8003bb0:	e000      	b.n	8003bb4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003bb2:	bf00      	nop
    }

    if(status == HAL_OK)
 8003bb4:	7bfb      	ldrb	r3, [r7, #15]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d10d      	bne.n	8003bd6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003bba:	4b49      	ldr	r3, [pc, #292]	; (8003ce0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bbc:	68db      	ldr	r3, [r3, #12]
 8003bbe:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6819      	ldr	r1, [r3, #0]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	3b01      	subs	r3, #1
 8003bcc:	011b      	lsls	r3, r3, #4
 8003bce:	430b      	orrs	r3, r1
 8003bd0:	4943      	ldr	r1, [pc, #268]	; (8003ce0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003bd6:	7bfb      	ldrb	r3, [r7, #15]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d17c      	bne.n	8003cd6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003bdc:	4b40      	ldr	r3, [pc, #256]	; (8003ce0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a3f      	ldr	r2, [pc, #252]	; (8003ce0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003be2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003be6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003be8:	f7fd f930 	bl	8000e4c <HAL_GetTick>
 8003bec:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003bee:	e009      	b.n	8003c04 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003bf0:	f7fd f92c 	bl	8000e4c <HAL_GetTick>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	1ad3      	subs	r3, r2, r3
 8003bfa:	2b02      	cmp	r3, #2
 8003bfc:	d902      	bls.n	8003c04 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003bfe:	2303      	movs	r3, #3
 8003c00:	73fb      	strb	r3, [r7, #15]
        break;
 8003c02:	e005      	b.n	8003c10 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003c04:	4b36      	ldr	r3, [pc, #216]	; (8003ce0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d1ef      	bne.n	8003bf0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003c10:	7bfb      	ldrb	r3, [r7, #15]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d15f      	bne.n	8003cd6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d110      	bne.n	8003c3e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003c1c:	4b30      	ldr	r3, [pc, #192]	; (8003ce0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c1e:	691b      	ldr	r3, [r3, #16]
 8003c20:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003c24:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003c28:	687a      	ldr	r2, [r7, #4]
 8003c2a:	6892      	ldr	r2, [r2, #8]
 8003c2c:	0211      	lsls	r1, r2, #8
 8003c2e:	687a      	ldr	r2, [r7, #4]
 8003c30:	68d2      	ldr	r2, [r2, #12]
 8003c32:	06d2      	lsls	r2, r2, #27
 8003c34:	430a      	orrs	r2, r1
 8003c36:	492a      	ldr	r1, [pc, #168]	; (8003ce0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	610b      	str	r3, [r1, #16]
 8003c3c:	e027      	b.n	8003c8e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	d112      	bne.n	8003c6a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003c44:	4b26      	ldr	r3, [pc, #152]	; (8003ce0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c46:	691b      	ldr	r3, [r3, #16]
 8003c48:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003c4c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003c50:	687a      	ldr	r2, [r7, #4]
 8003c52:	6892      	ldr	r2, [r2, #8]
 8003c54:	0211      	lsls	r1, r2, #8
 8003c56:	687a      	ldr	r2, [r7, #4]
 8003c58:	6912      	ldr	r2, [r2, #16]
 8003c5a:	0852      	lsrs	r2, r2, #1
 8003c5c:	3a01      	subs	r2, #1
 8003c5e:	0552      	lsls	r2, r2, #21
 8003c60:	430a      	orrs	r2, r1
 8003c62:	491f      	ldr	r1, [pc, #124]	; (8003ce0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c64:	4313      	orrs	r3, r2
 8003c66:	610b      	str	r3, [r1, #16]
 8003c68:	e011      	b.n	8003c8e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003c6a:	4b1d      	ldr	r3, [pc, #116]	; (8003ce0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c6c:	691b      	ldr	r3, [r3, #16]
 8003c6e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003c72:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003c76:	687a      	ldr	r2, [r7, #4]
 8003c78:	6892      	ldr	r2, [r2, #8]
 8003c7a:	0211      	lsls	r1, r2, #8
 8003c7c:	687a      	ldr	r2, [r7, #4]
 8003c7e:	6952      	ldr	r2, [r2, #20]
 8003c80:	0852      	lsrs	r2, r2, #1
 8003c82:	3a01      	subs	r2, #1
 8003c84:	0652      	lsls	r2, r2, #25
 8003c86:	430a      	orrs	r2, r1
 8003c88:	4915      	ldr	r1, [pc, #84]	; (8003ce0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003c8e:	4b14      	ldr	r3, [pc, #80]	; (8003ce0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a13      	ldr	r2, [pc, #76]	; (8003ce0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c94:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003c98:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c9a:	f7fd f8d7 	bl	8000e4c <HAL_GetTick>
 8003c9e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003ca0:	e009      	b.n	8003cb6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003ca2:	f7fd f8d3 	bl	8000e4c <HAL_GetTick>
 8003ca6:	4602      	mov	r2, r0
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	1ad3      	subs	r3, r2, r3
 8003cac:	2b02      	cmp	r3, #2
 8003cae:	d902      	bls.n	8003cb6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003cb0:	2303      	movs	r3, #3
 8003cb2:	73fb      	strb	r3, [r7, #15]
          break;
 8003cb4:	e005      	b.n	8003cc2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003cb6:	4b0a      	ldr	r3, [pc, #40]	; (8003ce0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d0ef      	beq.n	8003ca2 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003cc2:	7bfb      	ldrb	r3, [r7, #15]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d106      	bne.n	8003cd6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003cc8:	4b05      	ldr	r3, [pc, #20]	; (8003ce0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003cca:	691a      	ldr	r2, [r3, #16]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	699b      	ldr	r3, [r3, #24]
 8003cd0:	4903      	ldr	r1, [pc, #12]	; (8003ce0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003cd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	3710      	adds	r7, #16
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}
 8003ce0:	40021000 	.word	0x40021000

08003ce4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b084      	sub	sp, #16
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
 8003cec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003cf2:	4b69      	ldr	r3, [pc, #420]	; (8003e98 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003cf4:	68db      	ldr	r3, [r3, #12]
 8003cf6:	f003 0303 	and.w	r3, r3, #3
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d018      	beq.n	8003d30 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003cfe:	4b66      	ldr	r3, [pc, #408]	; (8003e98 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003d00:	68db      	ldr	r3, [r3, #12]
 8003d02:	f003 0203 	and.w	r2, r3, #3
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	429a      	cmp	r2, r3
 8003d0c:	d10d      	bne.n	8003d2a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
       ||
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d009      	beq.n	8003d2a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003d16:	4b60      	ldr	r3, [pc, #384]	; (8003e98 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003d18:	68db      	ldr	r3, [r3, #12]
 8003d1a:	091b      	lsrs	r3, r3, #4
 8003d1c:	f003 0307 	and.w	r3, r3, #7
 8003d20:	1c5a      	adds	r2, r3, #1
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	685b      	ldr	r3, [r3, #4]
       ||
 8003d26:	429a      	cmp	r2, r3
 8003d28:	d047      	beq.n	8003dba <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	73fb      	strb	r3, [r7, #15]
 8003d2e:	e044      	b.n	8003dba <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	2b03      	cmp	r3, #3
 8003d36:	d018      	beq.n	8003d6a <RCCEx_PLLSAI2_Config+0x86>
 8003d38:	2b03      	cmp	r3, #3
 8003d3a:	d825      	bhi.n	8003d88 <RCCEx_PLLSAI2_Config+0xa4>
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	d002      	beq.n	8003d46 <RCCEx_PLLSAI2_Config+0x62>
 8003d40:	2b02      	cmp	r3, #2
 8003d42:	d009      	beq.n	8003d58 <RCCEx_PLLSAI2_Config+0x74>
 8003d44:	e020      	b.n	8003d88 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003d46:	4b54      	ldr	r3, [pc, #336]	; (8003e98 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 0302 	and.w	r3, r3, #2
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d11d      	bne.n	8003d8e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d56:	e01a      	b.n	8003d8e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003d58:	4b4f      	ldr	r3, [pc, #316]	; (8003e98 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d116      	bne.n	8003d92 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003d64:	2301      	movs	r3, #1
 8003d66:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d68:	e013      	b.n	8003d92 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003d6a:	4b4b      	ldr	r3, [pc, #300]	; (8003e98 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d10f      	bne.n	8003d96 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003d76:	4b48      	ldr	r3, [pc, #288]	; (8003e98 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d109      	bne.n	8003d96 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003d86:	e006      	b.n	8003d96 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	73fb      	strb	r3, [r7, #15]
      break;
 8003d8c:	e004      	b.n	8003d98 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003d8e:	bf00      	nop
 8003d90:	e002      	b.n	8003d98 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003d92:	bf00      	nop
 8003d94:	e000      	b.n	8003d98 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003d96:	bf00      	nop
    }

    if(status == HAL_OK)
 8003d98:	7bfb      	ldrb	r3, [r7, #15]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d10d      	bne.n	8003dba <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003d9e:	4b3e      	ldr	r3, [pc, #248]	; (8003e98 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003da0:	68db      	ldr	r3, [r3, #12]
 8003da2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6819      	ldr	r1, [r3, #0]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	3b01      	subs	r3, #1
 8003db0:	011b      	lsls	r3, r3, #4
 8003db2:	430b      	orrs	r3, r1
 8003db4:	4938      	ldr	r1, [pc, #224]	; (8003e98 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003db6:	4313      	orrs	r3, r2
 8003db8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003dba:	7bfb      	ldrb	r3, [r7, #15]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d166      	bne.n	8003e8e <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003dc0:	4b35      	ldr	r3, [pc, #212]	; (8003e98 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a34      	ldr	r2, [pc, #208]	; (8003e98 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003dc6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003dca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003dcc:	f7fd f83e 	bl	8000e4c <HAL_GetTick>
 8003dd0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003dd2:	e009      	b.n	8003de8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003dd4:	f7fd f83a 	bl	8000e4c <HAL_GetTick>
 8003dd8:	4602      	mov	r2, r0
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	1ad3      	subs	r3, r2, r3
 8003dde:	2b02      	cmp	r3, #2
 8003de0:	d902      	bls.n	8003de8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003de2:	2303      	movs	r3, #3
 8003de4:	73fb      	strb	r3, [r7, #15]
        break;
 8003de6:	e005      	b.n	8003df4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003de8:	4b2b      	ldr	r3, [pc, #172]	; (8003e98 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d1ef      	bne.n	8003dd4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003df4:	7bfb      	ldrb	r3, [r7, #15]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d149      	bne.n	8003e8e <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d110      	bne.n	8003e22 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003e00:	4b25      	ldr	r3, [pc, #148]	; (8003e98 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003e02:	695b      	ldr	r3, [r3, #20]
 8003e04:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003e08:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003e0c:	687a      	ldr	r2, [r7, #4]
 8003e0e:	6892      	ldr	r2, [r2, #8]
 8003e10:	0211      	lsls	r1, r2, #8
 8003e12:	687a      	ldr	r2, [r7, #4]
 8003e14:	68d2      	ldr	r2, [r2, #12]
 8003e16:	06d2      	lsls	r2, r2, #27
 8003e18:	430a      	orrs	r2, r1
 8003e1a:	491f      	ldr	r1, [pc, #124]	; (8003e98 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	614b      	str	r3, [r1, #20]
 8003e20:	e011      	b.n	8003e46 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003e22:	4b1d      	ldr	r3, [pc, #116]	; (8003e98 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003e24:	695b      	ldr	r3, [r3, #20]
 8003e26:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003e2a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	6892      	ldr	r2, [r2, #8]
 8003e32:	0211      	lsls	r1, r2, #8
 8003e34:	687a      	ldr	r2, [r7, #4]
 8003e36:	6912      	ldr	r2, [r2, #16]
 8003e38:	0852      	lsrs	r2, r2, #1
 8003e3a:	3a01      	subs	r2, #1
 8003e3c:	0652      	lsls	r2, r2, #25
 8003e3e:	430a      	orrs	r2, r1
 8003e40:	4915      	ldr	r1, [pc, #84]	; (8003e98 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003e42:	4313      	orrs	r3, r2
 8003e44:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003e46:	4b14      	ldr	r3, [pc, #80]	; (8003e98 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a13      	ldr	r2, [pc, #76]	; (8003e98 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003e4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e50:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e52:	f7fc fffb 	bl	8000e4c <HAL_GetTick>
 8003e56:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003e58:	e009      	b.n	8003e6e <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003e5a:	f7fc fff7 	bl	8000e4c <HAL_GetTick>
 8003e5e:	4602      	mov	r2, r0
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	1ad3      	subs	r3, r2, r3
 8003e64:	2b02      	cmp	r3, #2
 8003e66:	d902      	bls.n	8003e6e <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8003e68:	2303      	movs	r3, #3
 8003e6a:	73fb      	strb	r3, [r7, #15]
          break;
 8003e6c:	e005      	b.n	8003e7a <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003e6e:	4b0a      	ldr	r3, [pc, #40]	; (8003e98 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d0ef      	beq.n	8003e5a <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8003e7a:	7bfb      	ldrb	r3, [r7, #15]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d106      	bne.n	8003e8e <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003e80:	4b05      	ldr	r3, [pc, #20]	; (8003e98 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003e82:	695a      	ldr	r2, [r3, #20]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	695b      	ldr	r3, [r3, #20]
 8003e88:	4903      	ldr	r1, [pc, #12]	; (8003e98 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003e8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	3710      	adds	r7, #16
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}
 8003e98:	40021000 	.word	0x40021000

08003e9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b082      	sub	sp, #8
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d101      	bne.n	8003eae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e049      	b.n	8003f42 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d106      	bne.n	8003ec8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	f7fc fed2 	bl	8000c6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2202      	movs	r2, #2
 8003ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	3304      	adds	r3, #4
 8003ed8:	4619      	mov	r1, r3
 8003eda:	4610      	mov	r0, r2
 8003edc:	f000 f8fe 	bl	80040dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2201      	movs	r2, #1
 8003eec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2201      	movs	r2, #1
 8003efc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2201      	movs	r2, #1
 8003f04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2201      	movs	r2, #1
 8003f14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2201      	movs	r2, #1
 8003f24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2201      	movs	r2, #1
 8003f34:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f40:	2300      	movs	r3, #0
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	3708      	adds	r7, #8
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}

08003f4a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003f4a:	b580      	push	{r7, lr}
 8003f4c:	b084      	sub	sp, #16
 8003f4e:	af00      	add	r7, sp, #0
 8003f50:	6078      	str	r0, [r7, #4]
 8003f52:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f54:	2300      	movs	r3, #0
 8003f56:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f5e:	2b01      	cmp	r3, #1
 8003f60:	d101      	bne.n	8003f66 <HAL_TIM_ConfigClockSource+0x1c>
 8003f62:	2302      	movs	r3, #2
 8003f64:	e0b6      	b.n	80040d4 <HAL_TIM_ConfigClockSource+0x18a>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2201      	movs	r2, #1
 8003f6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2202      	movs	r2, #2
 8003f72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f84:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003f88:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f90:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	68ba      	ldr	r2, [r7, #8]
 8003f98:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fa2:	d03e      	beq.n	8004022 <HAL_TIM_ConfigClockSource+0xd8>
 8003fa4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fa8:	f200 8087 	bhi.w	80040ba <HAL_TIM_ConfigClockSource+0x170>
 8003fac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fb0:	f000 8086 	beq.w	80040c0 <HAL_TIM_ConfigClockSource+0x176>
 8003fb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fb8:	d87f      	bhi.n	80040ba <HAL_TIM_ConfigClockSource+0x170>
 8003fba:	2b70      	cmp	r3, #112	; 0x70
 8003fbc:	d01a      	beq.n	8003ff4 <HAL_TIM_ConfigClockSource+0xaa>
 8003fbe:	2b70      	cmp	r3, #112	; 0x70
 8003fc0:	d87b      	bhi.n	80040ba <HAL_TIM_ConfigClockSource+0x170>
 8003fc2:	2b60      	cmp	r3, #96	; 0x60
 8003fc4:	d050      	beq.n	8004068 <HAL_TIM_ConfigClockSource+0x11e>
 8003fc6:	2b60      	cmp	r3, #96	; 0x60
 8003fc8:	d877      	bhi.n	80040ba <HAL_TIM_ConfigClockSource+0x170>
 8003fca:	2b50      	cmp	r3, #80	; 0x50
 8003fcc:	d03c      	beq.n	8004048 <HAL_TIM_ConfigClockSource+0xfe>
 8003fce:	2b50      	cmp	r3, #80	; 0x50
 8003fd0:	d873      	bhi.n	80040ba <HAL_TIM_ConfigClockSource+0x170>
 8003fd2:	2b40      	cmp	r3, #64	; 0x40
 8003fd4:	d058      	beq.n	8004088 <HAL_TIM_ConfigClockSource+0x13e>
 8003fd6:	2b40      	cmp	r3, #64	; 0x40
 8003fd8:	d86f      	bhi.n	80040ba <HAL_TIM_ConfigClockSource+0x170>
 8003fda:	2b30      	cmp	r3, #48	; 0x30
 8003fdc:	d064      	beq.n	80040a8 <HAL_TIM_ConfigClockSource+0x15e>
 8003fde:	2b30      	cmp	r3, #48	; 0x30
 8003fe0:	d86b      	bhi.n	80040ba <HAL_TIM_ConfigClockSource+0x170>
 8003fe2:	2b20      	cmp	r3, #32
 8003fe4:	d060      	beq.n	80040a8 <HAL_TIM_ConfigClockSource+0x15e>
 8003fe6:	2b20      	cmp	r3, #32
 8003fe8:	d867      	bhi.n	80040ba <HAL_TIM_ConfigClockSource+0x170>
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d05c      	beq.n	80040a8 <HAL_TIM_ConfigClockSource+0x15e>
 8003fee:	2b10      	cmp	r3, #16
 8003ff0:	d05a      	beq.n	80040a8 <HAL_TIM_ConfigClockSource+0x15e>
 8003ff2:	e062      	b.n	80040ba <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004004:	f000 f97e 	bl	8004304 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004016:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	68ba      	ldr	r2, [r7, #8]
 800401e:	609a      	str	r2, [r3, #8]
      break;
 8004020:	e04f      	b.n	80040c2 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004032:	f000 f967 	bl	8004304 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	689a      	ldr	r2, [r3, #8]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004044:	609a      	str	r2, [r3, #8]
      break;
 8004046:	e03c      	b.n	80040c2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004054:	461a      	mov	r2, r3
 8004056:	f000 f8db 	bl	8004210 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	2150      	movs	r1, #80	; 0x50
 8004060:	4618      	mov	r0, r3
 8004062:	f000 f934 	bl	80042ce <TIM_ITRx_SetConfig>
      break;
 8004066:	e02c      	b.n	80040c2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004074:	461a      	mov	r2, r3
 8004076:	f000 f8fa 	bl	800426e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	2160      	movs	r1, #96	; 0x60
 8004080:	4618      	mov	r0, r3
 8004082:	f000 f924 	bl	80042ce <TIM_ITRx_SetConfig>
      break;
 8004086:	e01c      	b.n	80040c2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004094:	461a      	mov	r2, r3
 8004096:	f000 f8bb 	bl	8004210 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	2140      	movs	r1, #64	; 0x40
 80040a0:	4618      	mov	r0, r3
 80040a2:	f000 f914 	bl	80042ce <TIM_ITRx_SetConfig>
      break;
 80040a6:	e00c      	b.n	80040c2 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681a      	ldr	r2, [r3, #0]
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4619      	mov	r1, r3
 80040b2:	4610      	mov	r0, r2
 80040b4:	f000 f90b 	bl	80042ce <TIM_ITRx_SetConfig>
      break;
 80040b8:	e003      	b.n	80040c2 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	73fb      	strb	r3, [r7, #15]
      break;
 80040be:	e000      	b.n	80040c2 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80040c0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2201      	movs	r2, #1
 80040c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2200      	movs	r2, #0
 80040ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80040d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	3710      	adds	r7, #16
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}

080040dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80040dc:	b480      	push	{r7}
 80040de:	b085      	sub	sp, #20
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
 80040e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	4a40      	ldr	r2, [pc, #256]	; (80041f0 <TIM_Base_SetConfig+0x114>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d013      	beq.n	800411c <TIM_Base_SetConfig+0x40>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040fa:	d00f      	beq.n	800411c <TIM_Base_SetConfig+0x40>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	4a3d      	ldr	r2, [pc, #244]	; (80041f4 <TIM_Base_SetConfig+0x118>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d00b      	beq.n	800411c <TIM_Base_SetConfig+0x40>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	4a3c      	ldr	r2, [pc, #240]	; (80041f8 <TIM_Base_SetConfig+0x11c>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d007      	beq.n	800411c <TIM_Base_SetConfig+0x40>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	4a3b      	ldr	r2, [pc, #236]	; (80041fc <TIM_Base_SetConfig+0x120>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d003      	beq.n	800411c <TIM_Base_SetConfig+0x40>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	4a3a      	ldr	r2, [pc, #232]	; (8004200 <TIM_Base_SetConfig+0x124>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d108      	bne.n	800412e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004122:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	68fa      	ldr	r2, [r7, #12]
 800412a:	4313      	orrs	r3, r2
 800412c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	4a2f      	ldr	r2, [pc, #188]	; (80041f0 <TIM_Base_SetConfig+0x114>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d01f      	beq.n	8004176 <TIM_Base_SetConfig+0x9a>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800413c:	d01b      	beq.n	8004176 <TIM_Base_SetConfig+0x9a>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	4a2c      	ldr	r2, [pc, #176]	; (80041f4 <TIM_Base_SetConfig+0x118>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d017      	beq.n	8004176 <TIM_Base_SetConfig+0x9a>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	4a2b      	ldr	r2, [pc, #172]	; (80041f8 <TIM_Base_SetConfig+0x11c>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d013      	beq.n	8004176 <TIM_Base_SetConfig+0x9a>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	4a2a      	ldr	r2, [pc, #168]	; (80041fc <TIM_Base_SetConfig+0x120>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d00f      	beq.n	8004176 <TIM_Base_SetConfig+0x9a>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	4a29      	ldr	r2, [pc, #164]	; (8004200 <TIM_Base_SetConfig+0x124>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d00b      	beq.n	8004176 <TIM_Base_SetConfig+0x9a>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	4a28      	ldr	r2, [pc, #160]	; (8004204 <TIM_Base_SetConfig+0x128>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d007      	beq.n	8004176 <TIM_Base_SetConfig+0x9a>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	4a27      	ldr	r2, [pc, #156]	; (8004208 <TIM_Base_SetConfig+0x12c>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d003      	beq.n	8004176 <TIM_Base_SetConfig+0x9a>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	4a26      	ldr	r2, [pc, #152]	; (800420c <TIM_Base_SetConfig+0x130>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d108      	bne.n	8004188 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800417c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	68db      	ldr	r3, [r3, #12]
 8004182:	68fa      	ldr	r2, [r7, #12]
 8004184:	4313      	orrs	r3, r2
 8004186:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	695b      	ldr	r3, [r3, #20]
 8004192:	4313      	orrs	r3, r2
 8004194:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	68fa      	ldr	r2, [r7, #12]
 800419a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	689a      	ldr	r2, [r3, #8]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	681a      	ldr	r2, [r3, #0]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	4a10      	ldr	r2, [pc, #64]	; (80041f0 <TIM_Base_SetConfig+0x114>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d00f      	beq.n	80041d4 <TIM_Base_SetConfig+0xf8>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	4a12      	ldr	r2, [pc, #72]	; (8004200 <TIM_Base_SetConfig+0x124>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d00b      	beq.n	80041d4 <TIM_Base_SetConfig+0xf8>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	4a11      	ldr	r2, [pc, #68]	; (8004204 <TIM_Base_SetConfig+0x128>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d007      	beq.n	80041d4 <TIM_Base_SetConfig+0xf8>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	4a10      	ldr	r2, [pc, #64]	; (8004208 <TIM_Base_SetConfig+0x12c>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d003      	beq.n	80041d4 <TIM_Base_SetConfig+0xf8>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	4a0f      	ldr	r2, [pc, #60]	; (800420c <TIM_Base_SetConfig+0x130>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d103      	bne.n	80041dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	691a      	ldr	r2, [r3, #16]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2201      	movs	r2, #1
 80041e0:	615a      	str	r2, [r3, #20]
}
 80041e2:	bf00      	nop
 80041e4:	3714      	adds	r7, #20
 80041e6:	46bd      	mov	sp, r7
 80041e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ec:	4770      	bx	lr
 80041ee:	bf00      	nop
 80041f0:	40012c00 	.word	0x40012c00
 80041f4:	40000400 	.word	0x40000400
 80041f8:	40000800 	.word	0x40000800
 80041fc:	40000c00 	.word	0x40000c00
 8004200:	40013400 	.word	0x40013400
 8004204:	40014000 	.word	0x40014000
 8004208:	40014400 	.word	0x40014400
 800420c:	40014800 	.word	0x40014800

08004210 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004210:	b480      	push	{r7}
 8004212:	b087      	sub	sp, #28
 8004214:	af00      	add	r7, sp, #0
 8004216:	60f8      	str	r0, [r7, #12]
 8004218:	60b9      	str	r1, [r7, #8]
 800421a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	6a1b      	ldr	r3, [r3, #32]
 8004220:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	6a1b      	ldr	r3, [r3, #32]
 8004226:	f023 0201 	bic.w	r2, r3, #1
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	699b      	ldr	r3, [r3, #24]
 8004232:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800423a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	011b      	lsls	r3, r3, #4
 8004240:	693a      	ldr	r2, [r7, #16]
 8004242:	4313      	orrs	r3, r2
 8004244:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	f023 030a 	bic.w	r3, r3, #10
 800424c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800424e:	697a      	ldr	r2, [r7, #20]
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	4313      	orrs	r3, r2
 8004254:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	693a      	ldr	r2, [r7, #16]
 800425a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	697a      	ldr	r2, [r7, #20]
 8004260:	621a      	str	r2, [r3, #32]
}
 8004262:	bf00      	nop
 8004264:	371c      	adds	r7, #28
 8004266:	46bd      	mov	sp, r7
 8004268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426c:	4770      	bx	lr

0800426e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800426e:	b480      	push	{r7}
 8004270:	b087      	sub	sp, #28
 8004272:	af00      	add	r7, sp, #0
 8004274:	60f8      	str	r0, [r7, #12]
 8004276:	60b9      	str	r1, [r7, #8]
 8004278:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	6a1b      	ldr	r3, [r3, #32]
 800427e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	6a1b      	ldr	r3, [r3, #32]
 8004284:	f023 0210 	bic.w	r2, r3, #16
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	699b      	ldr	r3, [r3, #24]
 8004290:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004298:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	031b      	lsls	r3, r3, #12
 800429e:	693a      	ldr	r2, [r7, #16]
 80042a0:	4313      	orrs	r3, r2
 80042a2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80042aa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	011b      	lsls	r3, r3, #4
 80042b0:	697a      	ldr	r2, [r7, #20]
 80042b2:	4313      	orrs	r3, r2
 80042b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	693a      	ldr	r2, [r7, #16]
 80042ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	697a      	ldr	r2, [r7, #20]
 80042c0:	621a      	str	r2, [r3, #32]
}
 80042c2:	bf00      	nop
 80042c4:	371c      	adds	r7, #28
 80042c6:	46bd      	mov	sp, r7
 80042c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042cc:	4770      	bx	lr

080042ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80042ce:	b480      	push	{r7}
 80042d0:	b085      	sub	sp, #20
 80042d2:	af00      	add	r7, sp, #0
 80042d4:	6078      	str	r0, [r7, #4]
 80042d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80042e6:	683a      	ldr	r2, [r7, #0]
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	4313      	orrs	r3, r2
 80042ec:	f043 0307 	orr.w	r3, r3, #7
 80042f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	68fa      	ldr	r2, [r7, #12]
 80042f6:	609a      	str	r2, [r3, #8]
}
 80042f8:	bf00      	nop
 80042fa:	3714      	adds	r7, #20
 80042fc:	46bd      	mov	sp, r7
 80042fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004302:	4770      	bx	lr

08004304 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004304:	b480      	push	{r7}
 8004306:	b087      	sub	sp, #28
 8004308:	af00      	add	r7, sp, #0
 800430a:	60f8      	str	r0, [r7, #12]
 800430c:	60b9      	str	r1, [r7, #8]
 800430e:	607a      	str	r2, [r7, #4]
 8004310:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004318:	697b      	ldr	r3, [r7, #20]
 800431a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800431e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	021a      	lsls	r2, r3, #8
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	431a      	orrs	r2, r3
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	4313      	orrs	r3, r2
 800432c:	697a      	ldr	r2, [r7, #20]
 800432e:	4313      	orrs	r3, r2
 8004330:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	697a      	ldr	r2, [r7, #20]
 8004336:	609a      	str	r2, [r3, #8]
}
 8004338:	bf00      	nop
 800433a:	371c      	adds	r7, #28
 800433c:	46bd      	mov	sp, r7
 800433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004342:	4770      	bx	lr

08004344 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004344:	b480      	push	{r7}
 8004346:	b085      	sub	sp, #20
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
 800434c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004354:	2b01      	cmp	r3, #1
 8004356:	d101      	bne.n	800435c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004358:	2302      	movs	r3, #2
 800435a:	e068      	b.n	800442e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2201      	movs	r2, #1
 8004360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2202      	movs	r2, #2
 8004368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a2e      	ldr	r2, [pc, #184]	; (800443c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d004      	beq.n	8004390 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a2d      	ldr	r2, [pc, #180]	; (8004440 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d108      	bne.n	80043a2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004396:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	68fa      	ldr	r2, [r7, #12]
 800439e:	4313      	orrs	r3, r2
 80043a0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043a8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	68fa      	ldr	r2, [r7, #12]
 80043b0:	4313      	orrs	r3, r2
 80043b2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	68fa      	ldr	r2, [r7, #12]
 80043ba:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a1e      	ldr	r2, [pc, #120]	; (800443c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d01d      	beq.n	8004402 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043ce:	d018      	beq.n	8004402 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a1b      	ldr	r2, [pc, #108]	; (8004444 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d013      	beq.n	8004402 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a1a      	ldr	r2, [pc, #104]	; (8004448 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d00e      	beq.n	8004402 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a18      	ldr	r2, [pc, #96]	; (800444c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d009      	beq.n	8004402 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a13      	ldr	r2, [pc, #76]	; (8004440 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d004      	beq.n	8004402 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a14      	ldr	r2, [pc, #80]	; (8004450 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d10c      	bne.n	800441c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004408:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	68ba      	ldr	r2, [r7, #8]
 8004410:	4313      	orrs	r3, r2
 8004412:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	68ba      	ldr	r2, [r7, #8]
 800441a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2201      	movs	r2, #1
 8004420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2200      	movs	r2, #0
 8004428:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800442c:	2300      	movs	r3, #0
}
 800442e:	4618      	mov	r0, r3
 8004430:	3714      	adds	r7, #20
 8004432:	46bd      	mov	sp, r7
 8004434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004438:	4770      	bx	lr
 800443a:	bf00      	nop
 800443c:	40012c00 	.word	0x40012c00
 8004440:	40013400 	.word	0x40013400
 8004444:	40000400 	.word	0x40000400
 8004448:	40000800 	.word	0x40000800
 800444c:	40000c00 	.word	0x40000c00
 8004450:	40014000 	.word	0x40014000

08004454 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b082      	sub	sp, #8
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d101      	bne.n	8004466 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	e040      	b.n	80044e8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800446a:	2b00      	cmp	r3, #0
 800446c:	d106      	bne.n	800447c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2200      	movs	r2, #0
 8004472:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f7fc fb98 	bl	8000bac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2224      	movs	r2, #36	; 0x24
 8004480:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f022 0201 	bic.w	r2, r2, #1
 8004490:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004496:	2b00      	cmp	r3, #0
 8004498:	d002      	beq.n	80044a0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f000 fae0 	bl	8004a60 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	f000 f825 	bl	80044f0 <UART_SetConfig>
 80044a6:	4603      	mov	r3, r0
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	d101      	bne.n	80044b0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80044ac:	2301      	movs	r3, #1
 80044ae:	e01b      	b.n	80044e8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	685a      	ldr	r2, [r3, #4]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80044be:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	689a      	ldr	r2, [r3, #8]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80044ce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	681a      	ldr	r2, [r3, #0]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f042 0201 	orr.w	r2, r2, #1
 80044de:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80044e0:	6878      	ldr	r0, [r7, #4]
 80044e2:	f000 fb5f 	bl	8004ba4 <UART_CheckIdleState>
 80044e6:	4603      	mov	r3, r0
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	3708      	adds	r7, #8
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}

080044f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80044f4:	b08a      	sub	sp, #40	; 0x28
 80044f6:	af00      	add	r7, sp, #0
 80044f8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80044fa:	2300      	movs	r3, #0
 80044fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	689a      	ldr	r2, [r3, #8]
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	691b      	ldr	r3, [r3, #16]
 8004508:	431a      	orrs	r2, r3
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	695b      	ldr	r3, [r3, #20]
 800450e:	431a      	orrs	r2, r3
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	69db      	ldr	r3, [r3, #28]
 8004514:	4313      	orrs	r3, r2
 8004516:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	4ba4      	ldr	r3, [pc, #656]	; (80047b0 <UART_SetConfig+0x2c0>)
 8004520:	4013      	ands	r3, r2
 8004522:	68fa      	ldr	r2, [r7, #12]
 8004524:	6812      	ldr	r2, [r2, #0]
 8004526:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004528:	430b      	orrs	r3, r1
 800452a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	68da      	ldr	r2, [r3, #12]
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	430a      	orrs	r2, r1
 8004540:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	699b      	ldr	r3, [r3, #24]
 8004546:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a99      	ldr	r2, [pc, #612]	; (80047b4 <UART_SetConfig+0x2c4>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d004      	beq.n	800455c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	6a1b      	ldr	r3, [r3, #32]
 8004556:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004558:	4313      	orrs	r3, r2
 800455a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800456c:	430a      	orrs	r2, r1
 800456e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a90      	ldr	r2, [pc, #576]	; (80047b8 <UART_SetConfig+0x2c8>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d126      	bne.n	80045c8 <UART_SetConfig+0xd8>
 800457a:	4b90      	ldr	r3, [pc, #576]	; (80047bc <UART_SetConfig+0x2cc>)
 800457c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004580:	f003 0303 	and.w	r3, r3, #3
 8004584:	2b03      	cmp	r3, #3
 8004586:	d81b      	bhi.n	80045c0 <UART_SetConfig+0xd0>
 8004588:	a201      	add	r2, pc, #4	; (adr r2, 8004590 <UART_SetConfig+0xa0>)
 800458a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800458e:	bf00      	nop
 8004590:	080045a1 	.word	0x080045a1
 8004594:	080045b1 	.word	0x080045b1
 8004598:	080045a9 	.word	0x080045a9
 800459c:	080045b9 	.word	0x080045b9
 80045a0:	2301      	movs	r3, #1
 80045a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045a6:	e116      	b.n	80047d6 <UART_SetConfig+0x2e6>
 80045a8:	2302      	movs	r3, #2
 80045aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045ae:	e112      	b.n	80047d6 <UART_SetConfig+0x2e6>
 80045b0:	2304      	movs	r3, #4
 80045b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045b6:	e10e      	b.n	80047d6 <UART_SetConfig+0x2e6>
 80045b8:	2308      	movs	r3, #8
 80045ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045be:	e10a      	b.n	80047d6 <UART_SetConfig+0x2e6>
 80045c0:	2310      	movs	r3, #16
 80045c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045c6:	e106      	b.n	80047d6 <UART_SetConfig+0x2e6>
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a7c      	ldr	r2, [pc, #496]	; (80047c0 <UART_SetConfig+0x2d0>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d138      	bne.n	8004644 <UART_SetConfig+0x154>
 80045d2:	4b7a      	ldr	r3, [pc, #488]	; (80047bc <UART_SetConfig+0x2cc>)
 80045d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045d8:	f003 030c 	and.w	r3, r3, #12
 80045dc:	2b0c      	cmp	r3, #12
 80045de:	d82d      	bhi.n	800463c <UART_SetConfig+0x14c>
 80045e0:	a201      	add	r2, pc, #4	; (adr r2, 80045e8 <UART_SetConfig+0xf8>)
 80045e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045e6:	bf00      	nop
 80045e8:	0800461d 	.word	0x0800461d
 80045ec:	0800463d 	.word	0x0800463d
 80045f0:	0800463d 	.word	0x0800463d
 80045f4:	0800463d 	.word	0x0800463d
 80045f8:	0800462d 	.word	0x0800462d
 80045fc:	0800463d 	.word	0x0800463d
 8004600:	0800463d 	.word	0x0800463d
 8004604:	0800463d 	.word	0x0800463d
 8004608:	08004625 	.word	0x08004625
 800460c:	0800463d 	.word	0x0800463d
 8004610:	0800463d 	.word	0x0800463d
 8004614:	0800463d 	.word	0x0800463d
 8004618:	08004635 	.word	0x08004635
 800461c:	2300      	movs	r3, #0
 800461e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004622:	e0d8      	b.n	80047d6 <UART_SetConfig+0x2e6>
 8004624:	2302      	movs	r3, #2
 8004626:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800462a:	e0d4      	b.n	80047d6 <UART_SetConfig+0x2e6>
 800462c:	2304      	movs	r3, #4
 800462e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004632:	e0d0      	b.n	80047d6 <UART_SetConfig+0x2e6>
 8004634:	2308      	movs	r3, #8
 8004636:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800463a:	e0cc      	b.n	80047d6 <UART_SetConfig+0x2e6>
 800463c:	2310      	movs	r3, #16
 800463e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004642:	e0c8      	b.n	80047d6 <UART_SetConfig+0x2e6>
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a5e      	ldr	r2, [pc, #376]	; (80047c4 <UART_SetConfig+0x2d4>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d125      	bne.n	800469a <UART_SetConfig+0x1aa>
 800464e:	4b5b      	ldr	r3, [pc, #364]	; (80047bc <UART_SetConfig+0x2cc>)
 8004650:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004654:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004658:	2b30      	cmp	r3, #48	; 0x30
 800465a:	d016      	beq.n	800468a <UART_SetConfig+0x19a>
 800465c:	2b30      	cmp	r3, #48	; 0x30
 800465e:	d818      	bhi.n	8004692 <UART_SetConfig+0x1a2>
 8004660:	2b20      	cmp	r3, #32
 8004662:	d00a      	beq.n	800467a <UART_SetConfig+0x18a>
 8004664:	2b20      	cmp	r3, #32
 8004666:	d814      	bhi.n	8004692 <UART_SetConfig+0x1a2>
 8004668:	2b00      	cmp	r3, #0
 800466a:	d002      	beq.n	8004672 <UART_SetConfig+0x182>
 800466c:	2b10      	cmp	r3, #16
 800466e:	d008      	beq.n	8004682 <UART_SetConfig+0x192>
 8004670:	e00f      	b.n	8004692 <UART_SetConfig+0x1a2>
 8004672:	2300      	movs	r3, #0
 8004674:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004678:	e0ad      	b.n	80047d6 <UART_SetConfig+0x2e6>
 800467a:	2302      	movs	r3, #2
 800467c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004680:	e0a9      	b.n	80047d6 <UART_SetConfig+0x2e6>
 8004682:	2304      	movs	r3, #4
 8004684:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004688:	e0a5      	b.n	80047d6 <UART_SetConfig+0x2e6>
 800468a:	2308      	movs	r3, #8
 800468c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004690:	e0a1      	b.n	80047d6 <UART_SetConfig+0x2e6>
 8004692:	2310      	movs	r3, #16
 8004694:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004698:	e09d      	b.n	80047d6 <UART_SetConfig+0x2e6>
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a4a      	ldr	r2, [pc, #296]	; (80047c8 <UART_SetConfig+0x2d8>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d125      	bne.n	80046f0 <UART_SetConfig+0x200>
 80046a4:	4b45      	ldr	r3, [pc, #276]	; (80047bc <UART_SetConfig+0x2cc>)
 80046a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046aa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80046ae:	2bc0      	cmp	r3, #192	; 0xc0
 80046b0:	d016      	beq.n	80046e0 <UART_SetConfig+0x1f0>
 80046b2:	2bc0      	cmp	r3, #192	; 0xc0
 80046b4:	d818      	bhi.n	80046e8 <UART_SetConfig+0x1f8>
 80046b6:	2b80      	cmp	r3, #128	; 0x80
 80046b8:	d00a      	beq.n	80046d0 <UART_SetConfig+0x1e0>
 80046ba:	2b80      	cmp	r3, #128	; 0x80
 80046bc:	d814      	bhi.n	80046e8 <UART_SetConfig+0x1f8>
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d002      	beq.n	80046c8 <UART_SetConfig+0x1d8>
 80046c2:	2b40      	cmp	r3, #64	; 0x40
 80046c4:	d008      	beq.n	80046d8 <UART_SetConfig+0x1e8>
 80046c6:	e00f      	b.n	80046e8 <UART_SetConfig+0x1f8>
 80046c8:	2300      	movs	r3, #0
 80046ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046ce:	e082      	b.n	80047d6 <UART_SetConfig+0x2e6>
 80046d0:	2302      	movs	r3, #2
 80046d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046d6:	e07e      	b.n	80047d6 <UART_SetConfig+0x2e6>
 80046d8:	2304      	movs	r3, #4
 80046da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046de:	e07a      	b.n	80047d6 <UART_SetConfig+0x2e6>
 80046e0:	2308      	movs	r3, #8
 80046e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046e6:	e076      	b.n	80047d6 <UART_SetConfig+0x2e6>
 80046e8:	2310      	movs	r3, #16
 80046ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046ee:	e072      	b.n	80047d6 <UART_SetConfig+0x2e6>
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a35      	ldr	r2, [pc, #212]	; (80047cc <UART_SetConfig+0x2dc>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d12a      	bne.n	8004750 <UART_SetConfig+0x260>
 80046fa:	4b30      	ldr	r3, [pc, #192]	; (80047bc <UART_SetConfig+0x2cc>)
 80046fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004700:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004704:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004708:	d01a      	beq.n	8004740 <UART_SetConfig+0x250>
 800470a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800470e:	d81b      	bhi.n	8004748 <UART_SetConfig+0x258>
 8004710:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004714:	d00c      	beq.n	8004730 <UART_SetConfig+0x240>
 8004716:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800471a:	d815      	bhi.n	8004748 <UART_SetConfig+0x258>
 800471c:	2b00      	cmp	r3, #0
 800471e:	d003      	beq.n	8004728 <UART_SetConfig+0x238>
 8004720:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004724:	d008      	beq.n	8004738 <UART_SetConfig+0x248>
 8004726:	e00f      	b.n	8004748 <UART_SetConfig+0x258>
 8004728:	2300      	movs	r3, #0
 800472a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800472e:	e052      	b.n	80047d6 <UART_SetConfig+0x2e6>
 8004730:	2302      	movs	r3, #2
 8004732:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004736:	e04e      	b.n	80047d6 <UART_SetConfig+0x2e6>
 8004738:	2304      	movs	r3, #4
 800473a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800473e:	e04a      	b.n	80047d6 <UART_SetConfig+0x2e6>
 8004740:	2308      	movs	r3, #8
 8004742:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004746:	e046      	b.n	80047d6 <UART_SetConfig+0x2e6>
 8004748:	2310      	movs	r3, #16
 800474a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800474e:	e042      	b.n	80047d6 <UART_SetConfig+0x2e6>
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a17      	ldr	r2, [pc, #92]	; (80047b4 <UART_SetConfig+0x2c4>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d13a      	bne.n	80047d0 <UART_SetConfig+0x2e0>
 800475a:	4b18      	ldr	r3, [pc, #96]	; (80047bc <UART_SetConfig+0x2cc>)
 800475c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004760:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004764:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004768:	d01a      	beq.n	80047a0 <UART_SetConfig+0x2b0>
 800476a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800476e:	d81b      	bhi.n	80047a8 <UART_SetConfig+0x2b8>
 8004770:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004774:	d00c      	beq.n	8004790 <UART_SetConfig+0x2a0>
 8004776:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800477a:	d815      	bhi.n	80047a8 <UART_SetConfig+0x2b8>
 800477c:	2b00      	cmp	r3, #0
 800477e:	d003      	beq.n	8004788 <UART_SetConfig+0x298>
 8004780:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004784:	d008      	beq.n	8004798 <UART_SetConfig+0x2a8>
 8004786:	e00f      	b.n	80047a8 <UART_SetConfig+0x2b8>
 8004788:	2300      	movs	r3, #0
 800478a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800478e:	e022      	b.n	80047d6 <UART_SetConfig+0x2e6>
 8004790:	2302      	movs	r3, #2
 8004792:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004796:	e01e      	b.n	80047d6 <UART_SetConfig+0x2e6>
 8004798:	2304      	movs	r3, #4
 800479a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800479e:	e01a      	b.n	80047d6 <UART_SetConfig+0x2e6>
 80047a0:	2308      	movs	r3, #8
 80047a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047a6:	e016      	b.n	80047d6 <UART_SetConfig+0x2e6>
 80047a8:	2310      	movs	r3, #16
 80047aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047ae:	e012      	b.n	80047d6 <UART_SetConfig+0x2e6>
 80047b0:	efff69f3 	.word	0xefff69f3
 80047b4:	40008000 	.word	0x40008000
 80047b8:	40013800 	.word	0x40013800
 80047bc:	40021000 	.word	0x40021000
 80047c0:	40004400 	.word	0x40004400
 80047c4:	40004800 	.word	0x40004800
 80047c8:	40004c00 	.word	0x40004c00
 80047cc:	40005000 	.word	0x40005000
 80047d0:	2310      	movs	r3, #16
 80047d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a9f      	ldr	r2, [pc, #636]	; (8004a58 <UART_SetConfig+0x568>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d17a      	bne.n	80048d6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80047e0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80047e4:	2b08      	cmp	r3, #8
 80047e6:	d824      	bhi.n	8004832 <UART_SetConfig+0x342>
 80047e8:	a201      	add	r2, pc, #4	; (adr r2, 80047f0 <UART_SetConfig+0x300>)
 80047ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047ee:	bf00      	nop
 80047f0:	08004815 	.word	0x08004815
 80047f4:	08004833 	.word	0x08004833
 80047f8:	0800481d 	.word	0x0800481d
 80047fc:	08004833 	.word	0x08004833
 8004800:	08004823 	.word	0x08004823
 8004804:	08004833 	.word	0x08004833
 8004808:	08004833 	.word	0x08004833
 800480c:	08004833 	.word	0x08004833
 8004810:	0800482b 	.word	0x0800482b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004814:	f7fe fddc 	bl	80033d0 <HAL_RCC_GetPCLK1Freq>
 8004818:	61f8      	str	r0, [r7, #28]
        break;
 800481a:	e010      	b.n	800483e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800481c:	4b8f      	ldr	r3, [pc, #572]	; (8004a5c <UART_SetConfig+0x56c>)
 800481e:	61fb      	str	r3, [r7, #28]
        break;
 8004820:	e00d      	b.n	800483e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004822:	f7fe fd3d 	bl	80032a0 <HAL_RCC_GetSysClockFreq>
 8004826:	61f8      	str	r0, [r7, #28]
        break;
 8004828:	e009      	b.n	800483e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800482a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800482e:	61fb      	str	r3, [r7, #28]
        break;
 8004830:	e005      	b.n	800483e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004832:	2300      	movs	r3, #0
 8004834:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004836:	2301      	movs	r3, #1
 8004838:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800483c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800483e:	69fb      	ldr	r3, [r7, #28]
 8004840:	2b00      	cmp	r3, #0
 8004842:	f000 80fb 	beq.w	8004a3c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	685a      	ldr	r2, [r3, #4]
 800484a:	4613      	mov	r3, r2
 800484c:	005b      	lsls	r3, r3, #1
 800484e:	4413      	add	r3, r2
 8004850:	69fa      	ldr	r2, [r7, #28]
 8004852:	429a      	cmp	r2, r3
 8004854:	d305      	bcc.n	8004862 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800485c:	69fa      	ldr	r2, [r7, #28]
 800485e:	429a      	cmp	r2, r3
 8004860:	d903      	bls.n	800486a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004868:	e0e8      	b.n	8004a3c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800486a:	69fb      	ldr	r3, [r7, #28]
 800486c:	2200      	movs	r2, #0
 800486e:	461c      	mov	r4, r3
 8004870:	4615      	mov	r5, r2
 8004872:	f04f 0200 	mov.w	r2, #0
 8004876:	f04f 0300 	mov.w	r3, #0
 800487a:	022b      	lsls	r3, r5, #8
 800487c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004880:	0222      	lsls	r2, r4, #8
 8004882:	68f9      	ldr	r1, [r7, #12]
 8004884:	6849      	ldr	r1, [r1, #4]
 8004886:	0849      	lsrs	r1, r1, #1
 8004888:	2000      	movs	r0, #0
 800488a:	4688      	mov	r8, r1
 800488c:	4681      	mov	r9, r0
 800488e:	eb12 0a08 	adds.w	sl, r2, r8
 8004892:	eb43 0b09 	adc.w	fp, r3, r9
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	2200      	movs	r2, #0
 800489c:	603b      	str	r3, [r7, #0]
 800489e:	607a      	str	r2, [r7, #4]
 80048a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80048a4:	4650      	mov	r0, sl
 80048a6:	4659      	mov	r1, fp
 80048a8:	f7fb fca2 	bl	80001f0 <__aeabi_uldivmod>
 80048ac:	4602      	mov	r2, r0
 80048ae:	460b      	mov	r3, r1
 80048b0:	4613      	mov	r3, r2
 80048b2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80048b4:	69bb      	ldr	r3, [r7, #24]
 80048b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80048ba:	d308      	bcc.n	80048ce <UART_SetConfig+0x3de>
 80048bc:	69bb      	ldr	r3, [r7, #24]
 80048be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80048c2:	d204      	bcs.n	80048ce <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	69ba      	ldr	r2, [r7, #24]
 80048ca:	60da      	str	r2, [r3, #12]
 80048cc:	e0b6      	b.n	8004a3c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80048d4:	e0b2      	b.n	8004a3c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	69db      	ldr	r3, [r3, #28]
 80048da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048de:	d15e      	bne.n	800499e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80048e0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80048e4:	2b08      	cmp	r3, #8
 80048e6:	d828      	bhi.n	800493a <UART_SetConfig+0x44a>
 80048e8:	a201      	add	r2, pc, #4	; (adr r2, 80048f0 <UART_SetConfig+0x400>)
 80048ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048ee:	bf00      	nop
 80048f0:	08004915 	.word	0x08004915
 80048f4:	0800491d 	.word	0x0800491d
 80048f8:	08004925 	.word	0x08004925
 80048fc:	0800493b 	.word	0x0800493b
 8004900:	0800492b 	.word	0x0800492b
 8004904:	0800493b 	.word	0x0800493b
 8004908:	0800493b 	.word	0x0800493b
 800490c:	0800493b 	.word	0x0800493b
 8004910:	08004933 	.word	0x08004933
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004914:	f7fe fd5c 	bl	80033d0 <HAL_RCC_GetPCLK1Freq>
 8004918:	61f8      	str	r0, [r7, #28]
        break;
 800491a:	e014      	b.n	8004946 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800491c:	f7fe fd6e 	bl	80033fc <HAL_RCC_GetPCLK2Freq>
 8004920:	61f8      	str	r0, [r7, #28]
        break;
 8004922:	e010      	b.n	8004946 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004924:	4b4d      	ldr	r3, [pc, #308]	; (8004a5c <UART_SetConfig+0x56c>)
 8004926:	61fb      	str	r3, [r7, #28]
        break;
 8004928:	e00d      	b.n	8004946 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800492a:	f7fe fcb9 	bl	80032a0 <HAL_RCC_GetSysClockFreq>
 800492e:	61f8      	str	r0, [r7, #28]
        break;
 8004930:	e009      	b.n	8004946 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004932:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004936:	61fb      	str	r3, [r7, #28]
        break;
 8004938:	e005      	b.n	8004946 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800493a:	2300      	movs	r3, #0
 800493c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004944:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004946:	69fb      	ldr	r3, [r7, #28]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d077      	beq.n	8004a3c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800494c:	69fb      	ldr	r3, [r7, #28]
 800494e:	005a      	lsls	r2, r3, #1
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	085b      	lsrs	r3, r3, #1
 8004956:	441a      	add	r2, r3
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004960:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004962:	69bb      	ldr	r3, [r7, #24]
 8004964:	2b0f      	cmp	r3, #15
 8004966:	d916      	bls.n	8004996 <UART_SetConfig+0x4a6>
 8004968:	69bb      	ldr	r3, [r7, #24]
 800496a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800496e:	d212      	bcs.n	8004996 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004970:	69bb      	ldr	r3, [r7, #24]
 8004972:	b29b      	uxth	r3, r3
 8004974:	f023 030f 	bic.w	r3, r3, #15
 8004978:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800497a:	69bb      	ldr	r3, [r7, #24]
 800497c:	085b      	lsrs	r3, r3, #1
 800497e:	b29b      	uxth	r3, r3
 8004980:	f003 0307 	and.w	r3, r3, #7
 8004984:	b29a      	uxth	r2, r3
 8004986:	8afb      	ldrh	r3, [r7, #22]
 8004988:	4313      	orrs	r3, r2
 800498a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	8afa      	ldrh	r2, [r7, #22]
 8004992:	60da      	str	r2, [r3, #12]
 8004994:	e052      	b.n	8004a3c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004996:	2301      	movs	r3, #1
 8004998:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800499c:	e04e      	b.n	8004a3c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800499e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80049a2:	2b08      	cmp	r3, #8
 80049a4:	d827      	bhi.n	80049f6 <UART_SetConfig+0x506>
 80049a6:	a201      	add	r2, pc, #4	; (adr r2, 80049ac <UART_SetConfig+0x4bc>)
 80049a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049ac:	080049d1 	.word	0x080049d1
 80049b0:	080049d9 	.word	0x080049d9
 80049b4:	080049e1 	.word	0x080049e1
 80049b8:	080049f7 	.word	0x080049f7
 80049bc:	080049e7 	.word	0x080049e7
 80049c0:	080049f7 	.word	0x080049f7
 80049c4:	080049f7 	.word	0x080049f7
 80049c8:	080049f7 	.word	0x080049f7
 80049cc:	080049ef 	.word	0x080049ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049d0:	f7fe fcfe 	bl	80033d0 <HAL_RCC_GetPCLK1Freq>
 80049d4:	61f8      	str	r0, [r7, #28]
        break;
 80049d6:	e014      	b.n	8004a02 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80049d8:	f7fe fd10 	bl	80033fc <HAL_RCC_GetPCLK2Freq>
 80049dc:	61f8      	str	r0, [r7, #28]
        break;
 80049de:	e010      	b.n	8004a02 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049e0:	4b1e      	ldr	r3, [pc, #120]	; (8004a5c <UART_SetConfig+0x56c>)
 80049e2:	61fb      	str	r3, [r7, #28]
        break;
 80049e4:	e00d      	b.n	8004a02 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049e6:	f7fe fc5b 	bl	80032a0 <HAL_RCC_GetSysClockFreq>
 80049ea:	61f8      	str	r0, [r7, #28]
        break;
 80049ec:	e009      	b.n	8004a02 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049f2:	61fb      	str	r3, [r7, #28]
        break;
 80049f4:	e005      	b.n	8004a02 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80049f6:	2300      	movs	r3, #0
 80049f8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004a00:	bf00      	nop
    }

    if (pclk != 0U)
 8004a02:	69fb      	ldr	r3, [r7, #28]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d019      	beq.n	8004a3c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	085a      	lsrs	r2, r3, #1
 8004a0e:	69fb      	ldr	r3, [r7, #28]
 8004a10:	441a      	add	r2, r3
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a1a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a1c:	69bb      	ldr	r3, [r7, #24]
 8004a1e:	2b0f      	cmp	r3, #15
 8004a20:	d909      	bls.n	8004a36 <UART_SetConfig+0x546>
 8004a22:	69bb      	ldr	r3, [r7, #24]
 8004a24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a28:	d205      	bcs.n	8004a36 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004a2a:	69bb      	ldr	r3, [r7, #24]
 8004a2c:	b29a      	uxth	r2, r3
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	60da      	str	r2, [r3, #12]
 8004a34:	e002      	b.n	8004a3c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2200      	movs	r2, #0
 8004a46:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004a48:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	3728      	adds	r7, #40	; 0x28
 8004a50:	46bd      	mov	sp, r7
 8004a52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a56:	bf00      	nop
 8004a58:	40008000 	.word	0x40008000
 8004a5c:	00f42400 	.word	0x00f42400

08004a60 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b083      	sub	sp, #12
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a6c:	f003 0308 	and.w	r3, r3, #8
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d00a      	beq.n	8004a8a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	430a      	orrs	r2, r1
 8004a88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a8e:	f003 0301 	and.w	r3, r3, #1
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d00a      	beq.n	8004aac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	430a      	orrs	r2, r1
 8004aaa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab0:	f003 0302 	and.w	r3, r3, #2
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d00a      	beq.n	8004ace <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	430a      	orrs	r2, r1
 8004acc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad2:	f003 0304 	and.w	r3, r3, #4
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d00a      	beq.n	8004af0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	430a      	orrs	r2, r1
 8004aee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af4:	f003 0310 	and.w	r3, r3, #16
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d00a      	beq.n	8004b12 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	430a      	orrs	r2, r1
 8004b10:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b16:	f003 0320 	and.w	r3, r3, #32
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d00a      	beq.n	8004b34 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	689b      	ldr	r3, [r3, #8]
 8004b24:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	430a      	orrs	r2, r1
 8004b32:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d01a      	beq.n	8004b76 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	430a      	orrs	r2, r1
 8004b54:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b5e:	d10a      	bne.n	8004b76 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	430a      	orrs	r2, r1
 8004b74:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d00a      	beq.n	8004b98 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	430a      	orrs	r2, r1
 8004b96:	605a      	str	r2, [r3, #4]
  }
}
 8004b98:	bf00      	nop
 8004b9a:	370c      	adds	r7, #12
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba2:	4770      	bx	lr

08004ba4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b098      	sub	sp, #96	; 0x60
 8004ba8:	af02      	add	r7, sp, #8
 8004baa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004bb4:	f7fc f94a 	bl	8000e4c <HAL_GetTick>
 8004bb8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f003 0308 	and.w	r3, r3, #8
 8004bc4:	2b08      	cmp	r3, #8
 8004bc6:	d12e      	bne.n	8004c26 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004bc8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004bcc:	9300      	str	r3, [sp, #0]
 8004bce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	f000 f88c 	bl	8004cf4 <UART_WaitOnFlagUntilTimeout>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d021      	beq.n	8004c26 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bea:	e853 3f00 	ldrex	r3, [r3]
 8004bee:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004bf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bf2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004bf6:	653b      	str	r3, [r7, #80]	; 0x50
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	461a      	mov	r2, r3
 8004bfe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c00:	647b      	str	r3, [r7, #68]	; 0x44
 8004c02:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c04:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004c06:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004c08:	e841 2300 	strex	r3, r2, [r1]
 8004c0c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004c0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d1e6      	bne.n	8004be2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2220      	movs	r2, #32
 8004c18:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c22:	2303      	movs	r3, #3
 8004c24:	e062      	b.n	8004cec <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f003 0304 	and.w	r3, r3, #4
 8004c30:	2b04      	cmp	r3, #4
 8004c32:	d149      	bne.n	8004cc8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c34:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004c38:	9300      	str	r3, [sp, #0]
 8004c3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f000 f856 	bl	8004cf4 <UART_WaitOnFlagUntilTimeout>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d03c      	beq.n	8004cc8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c56:	e853 3f00 	ldrex	r3, [r3]
 8004c5a:	623b      	str	r3, [r7, #32]
   return(result);
 8004c5c:	6a3b      	ldr	r3, [r7, #32]
 8004c5e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004c62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	461a      	mov	r2, r3
 8004c6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c6c:	633b      	str	r3, [r7, #48]	; 0x30
 8004c6e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c70:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004c72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c74:	e841 2300 	strex	r3, r2, [r1]
 8004c78:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d1e6      	bne.n	8004c4e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	3308      	adds	r3, #8
 8004c86:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c88:	693b      	ldr	r3, [r7, #16]
 8004c8a:	e853 3f00 	ldrex	r3, [r3]
 8004c8e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	f023 0301 	bic.w	r3, r3, #1
 8004c96:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	3308      	adds	r3, #8
 8004c9e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ca0:	61fa      	str	r2, [r7, #28]
 8004ca2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ca4:	69b9      	ldr	r1, [r7, #24]
 8004ca6:	69fa      	ldr	r2, [r7, #28]
 8004ca8:	e841 2300 	strex	r3, r2, [r1]
 8004cac:	617b      	str	r3, [r7, #20]
   return(result);
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d1e5      	bne.n	8004c80 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2220      	movs	r2, #32
 8004cb8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004cc4:	2303      	movs	r3, #3
 8004cc6:	e011      	b.n	8004cec <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2220      	movs	r2, #32
 8004ccc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2220      	movs	r2, #32
 8004cd2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004cea:	2300      	movs	r3, #0
}
 8004cec:	4618      	mov	r0, r3
 8004cee:	3758      	adds	r7, #88	; 0x58
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bd80      	pop	{r7, pc}

08004cf4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b084      	sub	sp, #16
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	60f8      	str	r0, [r7, #12]
 8004cfc:	60b9      	str	r1, [r7, #8]
 8004cfe:	603b      	str	r3, [r7, #0]
 8004d00:	4613      	mov	r3, r2
 8004d02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d04:	e049      	b.n	8004d9a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d06:	69bb      	ldr	r3, [r7, #24]
 8004d08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d0c:	d045      	beq.n	8004d9a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d0e:	f7fc f89d 	bl	8000e4c <HAL_GetTick>
 8004d12:	4602      	mov	r2, r0
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	1ad3      	subs	r3, r2, r3
 8004d18:	69ba      	ldr	r2, [r7, #24]
 8004d1a:	429a      	cmp	r2, r3
 8004d1c:	d302      	bcc.n	8004d24 <UART_WaitOnFlagUntilTimeout+0x30>
 8004d1e:	69bb      	ldr	r3, [r7, #24]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d101      	bne.n	8004d28 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004d24:	2303      	movs	r3, #3
 8004d26:	e048      	b.n	8004dba <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f003 0304 	and.w	r3, r3, #4
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d031      	beq.n	8004d9a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	69db      	ldr	r3, [r3, #28]
 8004d3c:	f003 0308 	and.w	r3, r3, #8
 8004d40:	2b08      	cmp	r3, #8
 8004d42:	d110      	bne.n	8004d66 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	2208      	movs	r2, #8
 8004d4a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004d4c:	68f8      	ldr	r0, [r7, #12]
 8004d4e:	f000 f838 	bl	8004dc2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2208      	movs	r2, #8
 8004d56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8004d62:	2301      	movs	r3, #1
 8004d64:	e029      	b.n	8004dba <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	69db      	ldr	r3, [r3, #28]
 8004d6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d74:	d111      	bne.n	8004d9a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004d7e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004d80:	68f8      	ldr	r0, [r7, #12]
 8004d82:	f000 f81e 	bl	8004dc2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	2220      	movs	r2, #32
 8004d8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2200      	movs	r2, #0
 8004d92:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004d96:	2303      	movs	r3, #3
 8004d98:	e00f      	b.n	8004dba <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	69da      	ldr	r2, [r3, #28]
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	4013      	ands	r3, r2
 8004da4:	68ba      	ldr	r2, [r7, #8]
 8004da6:	429a      	cmp	r2, r3
 8004da8:	bf0c      	ite	eq
 8004daa:	2301      	moveq	r3, #1
 8004dac:	2300      	movne	r3, #0
 8004dae:	b2db      	uxtb	r3, r3
 8004db0:	461a      	mov	r2, r3
 8004db2:	79fb      	ldrb	r3, [r7, #7]
 8004db4:	429a      	cmp	r2, r3
 8004db6:	d0a6      	beq.n	8004d06 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004db8:	2300      	movs	r3, #0
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3710      	adds	r7, #16
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}

08004dc2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004dc2:	b480      	push	{r7}
 8004dc4:	b095      	sub	sp, #84	; 0x54
 8004dc6:	af00      	add	r7, sp, #0
 8004dc8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dd2:	e853 3f00 	ldrex	r3, [r3]
 8004dd6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dda:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004dde:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	461a      	mov	r2, r3
 8004de6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004de8:	643b      	str	r3, [r7, #64]	; 0x40
 8004dea:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004dee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004df0:	e841 2300 	strex	r3, r2, [r1]
 8004df4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004df6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d1e6      	bne.n	8004dca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	3308      	adds	r3, #8
 8004e02:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e04:	6a3b      	ldr	r3, [r7, #32]
 8004e06:	e853 3f00 	ldrex	r3, [r3]
 8004e0a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004e0c:	69fb      	ldr	r3, [r7, #28]
 8004e0e:	f023 0301 	bic.w	r3, r3, #1
 8004e12:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	3308      	adds	r3, #8
 8004e1a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e1c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004e1e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e20:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004e22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e24:	e841 2300 	strex	r3, r2, [r1]
 8004e28:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d1e5      	bne.n	8004dfc <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e34:	2b01      	cmp	r3, #1
 8004e36:	d118      	bne.n	8004e6a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	e853 3f00 	ldrex	r3, [r3]
 8004e44:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	f023 0310 	bic.w	r3, r3, #16
 8004e4c:	647b      	str	r3, [r7, #68]	; 0x44
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	461a      	mov	r2, r3
 8004e54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e56:	61bb      	str	r3, [r7, #24]
 8004e58:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e5a:	6979      	ldr	r1, [r7, #20]
 8004e5c:	69ba      	ldr	r2, [r7, #24]
 8004e5e:	e841 2300 	strex	r3, r2, [r1]
 8004e62:	613b      	str	r3, [r7, #16]
   return(result);
 8004e64:	693b      	ldr	r3, [r7, #16]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d1e6      	bne.n	8004e38 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2220      	movs	r2, #32
 8004e6e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2200      	movs	r2, #0
 8004e76:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004e7e:	bf00      	nop
 8004e80:	3754      	adds	r7, #84	; 0x54
 8004e82:	46bd      	mov	sp, r7
 8004e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e88:	4770      	bx	lr

08004e8a <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004e8a:	b084      	sub	sp, #16
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b084      	sub	sp, #16
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
 8004e94:	f107 001c 	add.w	r0, r7, #28
 8004e98:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	68db      	ldr	r3, [r3, #12]
 8004ea0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8004ea8:	6878      	ldr	r0, [r7, #4]
 8004eaa:	f001 fa1d 	bl	80062e8 <USB_CoreReset>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8004eb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d106      	bne.n	8004ec6 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ebc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	639a      	str	r2, [r3, #56]	; 0x38
 8004ec4:	e005      	b.n	8004ed2 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eca:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8004ed2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	3710      	adds	r7, #16
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004ede:	b004      	add	sp, #16
 8004ee0:	4770      	bx	lr
	...

08004ee4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b087      	sub	sp, #28
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	60f8      	str	r0, [r7, #12]
 8004eec:	60b9      	str	r1, [r7, #8]
 8004eee:	4613      	mov	r3, r2
 8004ef0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004ef2:	79fb      	ldrb	r3, [r7, #7]
 8004ef4:	2b02      	cmp	r3, #2
 8004ef6:	d165      	bne.n	8004fc4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	4a3e      	ldr	r2, [pc, #248]	; (8004ff4 <USB_SetTurnaroundTime+0x110>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d906      	bls.n	8004f0e <USB_SetTurnaroundTime+0x2a>
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	4a3d      	ldr	r2, [pc, #244]	; (8004ff8 <USB_SetTurnaroundTime+0x114>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d202      	bcs.n	8004f0e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004f08:	230f      	movs	r3, #15
 8004f0a:	617b      	str	r3, [r7, #20]
 8004f0c:	e05c      	b.n	8004fc8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	4a39      	ldr	r2, [pc, #228]	; (8004ff8 <USB_SetTurnaroundTime+0x114>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d306      	bcc.n	8004f24 <USB_SetTurnaroundTime+0x40>
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	4a38      	ldr	r2, [pc, #224]	; (8004ffc <USB_SetTurnaroundTime+0x118>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d202      	bcs.n	8004f24 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004f1e:	230e      	movs	r3, #14
 8004f20:	617b      	str	r3, [r7, #20]
 8004f22:	e051      	b.n	8004fc8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	4a35      	ldr	r2, [pc, #212]	; (8004ffc <USB_SetTurnaroundTime+0x118>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d306      	bcc.n	8004f3a <USB_SetTurnaroundTime+0x56>
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	4a34      	ldr	r2, [pc, #208]	; (8005000 <USB_SetTurnaroundTime+0x11c>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d202      	bcs.n	8004f3a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004f34:	230d      	movs	r3, #13
 8004f36:	617b      	str	r3, [r7, #20]
 8004f38:	e046      	b.n	8004fc8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	4a30      	ldr	r2, [pc, #192]	; (8005000 <USB_SetTurnaroundTime+0x11c>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d306      	bcc.n	8004f50 <USB_SetTurnaroundTime+0x6c>
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	4a2f      	ldr	r2, [pc, #188]	; (8005004 <USB_SetTurnaroundTime+0x120>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d802      	bhi.n	8004f50 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004f4a:	230c      	movs	r3, #12
 8004f4c:	617b      	str	r3, [r7, #20]
 8004f4e:	e03b      	b.n	8004fc8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	4a2c      	ldr	r2, [pc, #176]	; (8005004 <USB_SetTurnaroundTime+0x120>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d906      	bls.n	8004f66 <USB_SetTurnaroundTime+0x82>
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	4a2b      	ldr	r2, [pc, #172]	; (8005008 <USB_SetTurnaroundTime+0x124>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d802      	bhi.n	8004f66 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004f60:	230b      	movs	r3, #11
 8004f62:	617b      	str	r3, [r7, #20]
 8004f64:	e030      	b.n	8004fc8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	4a27      	ldr	r2, [pc, #156]	; (8005008 <USB_SetTurnaroundTime+0x124>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d906      	bls.n	8004f7c <USB_SetTurnaroundTime+0x98>
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	4a26      	ldr	r2, [pc, #152]	; (800500c <USB_SetTurnaroundTime+0x128>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d802      	bhi.n	8004f7c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004f76:	230a      	movs	r3, #10
 8004f78:	617b      	str	r3, [r7, #20]
 8004f7a:	e025      	b.n	8004fc8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	4a23      	ldr	r2, [pc, #140]	; (800500c <USB_SetTurnaroundTime+0x128>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d906      	bls.n	8004f92 <USB_SetTurnaroundTime+0xae>
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	4a22      	ldr	r2, [pc, #136]	; (8005010 <USB_SetTurnaroundTime+0x12c>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d202      	bcs.n	8004f92 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004f8c:	2309      	movs	r3, #9
 8004f8e:	617b      	str	r3, [r7, #20]
 8004f90:	e01a      	b.n	8004fc8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	4a1e      	ldr	r2, [pc, #120]	; (8005010 <USB_SetTurnaroundTime+0x12c>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d306      	bcc.n	8004fa8 <USB_SetTurnaroundTime+0xc4>
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	4a1d      	ldr	r2, [pc, #116]	; (8005014 <USB_SetTurnaroundTime+0x130>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d802      	bhi.n	8004fa8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004fa2:	2308      	movs	r3, #8
 8004fa4:	617b      	str	r3, [r7, #20]
 8004fa6:	e00f      	b.n	8004fc8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	4a1a      	ldr	r2, [pc, #104]	; (8005014 <USB_SetTurnaroundTime+0x130>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d906      	bls.n	8004fbe <USB_SetTurnaroundTime+0xda>
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	4a19      	ldr	r2, [pc, #100]	; (8005018 <USB_SetTurnaroundTime+0x134>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d202      	bcs.n	8004fbe <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004fb8:	2307      	movs	r3, #7
 8004fba:	617b      	str	r3, [r7, #20]
 8004fbc:	e004      	b.n	8004fc8 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004fbe:	2306      	movs	r3, #6
 8004fc0:	617b      	str	r3, [r7, #20]
 8004fc2:	e001      	b.n	8004fc8 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004fc4:	2309      	movs	r3, #9
 8004fc6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	68db      	ldr	r3, [r3, #12]
 8004fcc:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	68da      	ldr	r2, [r3, #12]
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	029b      	lsls	r3, r3, #10
 8004fdc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004fe0:	431a      	orrs	r2, r3
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004fe6:	2300      	movs	r3, #0
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	371c      	adds	r7, #28
 8004fec:	46bd      	mov	sp, r7
 8004fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff2:	4770      	bx	lr
 8004ff4:	00d8acbf 	.word	0x00d8acbf
 8004ff8:	00e4e1c0 	.word	0x00e4e1c0
 8004ffc:	00f42400 	.word	0x00f42400
 8005000:	01067380 	.word	0x01067380
 8005004:	011a499f 	.word	0x011a499f
 8005008:	01312cff 	.word	0x01312cff
 800500c:	014ca43f 	.word	0x014ca43f
 8005010:	016e3600 	.word	0x016e3600
 8005014:	01a6ab1f 	.word	0x01a6ab1f
 8005018:	01e84800 	.word	0x01e84800

0800501c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800501c:	b480      	push	{r7}
 800501e:	b083      	sub	sp, #12
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	f043 0201 	orr.w	r2, r3, #1
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005030:	2300      	movs	r3, #0
}
 8005032:	4618      	mov	r0, r3
 8005034:	370c      	adds	r7, #12
 8005036:	46bd      	mov	sp, r7
 8005038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503c:	4770      	bx	lr

0800503e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800503e:	b480      	push	{r7}
 8005040:	b083      	sub	sp, #12
 8005042:	af00      	add	r7, sp, #0
 8005044:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	689b      	ldr	r3, [r3, #8]
 800504a:	f023 0201 	bic.w	r2, r3, #1
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005052:	2300      	movs	r3, #0
}
 8005054:	4618      	mov	r0, r3
 8005056:	370c      	adds	r7, #12
 8005058:	46bd      	mov	sp, r7
 800505a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505e:	4770      	bx	lr

08005060 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b084      	sub	sp, #16
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
 8005068:	460b      	mov	r3, r1
 800506a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800506c:	2300      	movs	r3, #0
 800506e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	68db      	ldr	r3, [r3, #12]
 8005074:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800507c:	78fb      	ldrb	r3, [r7, #3]
 800507e:	2b01      	cmp	r3, #1
 8005080:	d115      	bne.n	80050ae <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	68db      	ldr	r3, [r3, #12]
 8005086:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800508e:	2001      	movs	r0, #1
 8005090:	f7fb fee8 	bl	8000e64 <HAL_Delay>
      ms++;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	3301      	adds	r3, #1
 8005098:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800509a:	6878      	ldr	r0, [r7, #4]
 800509c:	f001 f8ab 	bl	80061f6 <USB_GetMode>
 80050a0:	4603      	mov	r3, r0
 80050a2:	2b01      	cmp	r3, #1
 80050a4:	d01e      	beq.n	80050e4 <USB_SetCurrentMode+0x84>
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	2b31      	cmp	r3, #49	; 0x31
 80050aa:	d9f0      	bls.n	800508e <USB_SetCurrentMode+0x2e>
 80050ac:	e01a      	b.n	80050e4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80050ae:	78fb      	ldrb	r3, [r7, #3]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d115      	bne.n	80050e0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	68db      	ldr	r3, [r3, #12]
 80050b8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80050c0:	2001      	movs	r0, #1
 80050c2:	f7fb fecf 	bl	8000e64 <HAL_Delay>
      ms++;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	3301      	adds	r3, #1
 80050ca:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80050cc:	6878      	ldr	r0, [r7, #4]
 80050ce:	f001 f892 	bl	80061f6 <USB_GetMode>
 80050d2:	4603      	mov	r3, r0
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d005      	beq.n	80050e4 <USB_SetCurrentMode+0x84>
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	2b31      	cmp	r3, #49	; 0x31
 80050dc:	d9f0      	bls.n	80050c0 <USB_SetCurrentMode+0x60>
 80050de:	e001      	b.n	80050e4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80050e0:	2301      	movs	r3, #1
 80050e2:	e005      	b.n	80050f0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	2b32      	cmp	r3, #50	; 0x32
 80050e8:	d101      	bne.n	80050ee <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80050ea:	2301      	movs	r3, #1
 80050ec:	e000      	b.n	80050f0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80050ee:	2300      	movs	r3, #0
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	3710      	adds	r7, #16
 80050f4:	46bd      	mov	sp, r7
 80050f6:	bd80      	pop	{r7, pc}

080050f8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80050f8:	b084      	sub	sp, #16
 80050fa:	b580      	push	{r7, lr}
 80050fc:	b086      	sub	sp, #24
 80050fe:	af00      	add	r7, sp, #0
 8005100:	6078      	str	r0, [r7, #4]
 8005102:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005106:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800510a:	2300      	movs	r3, #0
 800510c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005112:	2300      	movs	r3, #0
 8005114:	613b      	str	r3, [r7, #16]
 8005116:	e009      	b.n	800512c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005118:	687a      	ldr	r2, [r7, #4]
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	3340      	adds	r3, #64	; 0x40
 800511e:	009b      	lsls	r3, r3, #2
 8005120:	4413      	add	r3, r2
 8005122:	2200      	movs	r2, #0
 8005124:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	3301      	adds	r3, #1
 800512a:	613b      	str	r3, [r7, #16]
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	2b0e      	cmp	r3, #14
 8005130:	d9f2      	bls.n	8005118 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005132:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005134:	2b00      	cmp	r3, #0
 8005136:	d11c      	bne.n	8005172 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	68fa      	ldr	r2, [r7, #12]
 8005142:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005146:	f043 0302 	orr.w	r3, r3, #2
 800514a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005150:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	601a      	str	r2, [r3, #0]
 8005170:	e005      	b.n	800517e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005176:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005184:	461a      	mov	r2, r3
 8005186:	2300      	movs	r3, #0
 8005188:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800518a:	2103      	movs	r1, #3
 800518c:	6878      	ldr	r0, [r7, #4]
 800518e:	f000 f959 	bl	8005444 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005192:	2110      	movs	r1, #16
 8005194:	6878      	ldr	r0, [r7, #4]
 8005196:	f000 f8f1 	bl	800537c <USB_FlushTxFifo>
 800519a:	4603      	mov	r3, r0
 800519c:	2b00      	cmp	r3, #0
 800519e:	d001      	beq.n	80051a4 <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 80051a0:	2301      	movs	r3, #1
 80051a2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80051a4:	6878      	ldr	r0, [r7, #4]
 80051a6:	f000 f91d 	bl	80053e4 <USB_FlushRxFifo>
 80051aa:	4603      	mov	r3, r0
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d001      	beq.n	80051b4 <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 80051b0:	2301      	movs	r3, #1
 80051b2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051ba:	461a      	mov	r2, r3
 80051bc:	2300      	movs	r3, #0
 80051be:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051c6:	461a      	mov	r2, r3
 80051c8:	2300      	movs	r3, #0
 80051ca:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051d2:	461a      	mov	r2, r3
 80051d4:	2300      	movs	r3, #0
 80051d6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80051d8:	2300      	movs	r3, #0
 80051da:	613b      	str	r3, [r7, #16]
 80051dc:	e043      	b.n	8005266 <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80051de:	693b      	ldr	r3, [r7, #16]
 80051e0:	015a      	lsls	r2, r3, #5
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	4413      	add	r3, r2
 80051e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80051f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80051f4:	d118      	bne.n	8005228 <USB_DevInit+0x130>
    {
      if (i == 0U)
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d10a      	bne.n	8005212 <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	015a      	lsls	r2, r3, #5
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	4413      	add	r3, r2
 8005204:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005208:	461a      	mov	r2, r3
 800520a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800520e:	6013      	str	r3, [r2, #0]
 8005210:	e013      	b.n	800523a <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	015a      	lsls	r2, r3, #5
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	4413      	add	r3, r2
 800521a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800521e:	461a      	mov	r2, r3
 8005220:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005224:	6013      	str	r3, [r2, #0]
 8005226:	e008      	b.n	800523a <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	015a      	lsls	r2, r3, #5
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	4413      	add	r3, r2
 8005230:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005234:	461a      	mov	r2, r3
 8005236:	2300      	movs	r3, #0
 8005238:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800523a:	693b      	ldr	r3, [r7, #16]
 800523c:	015a      	lsls	r2, r3, #5
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	4413      	add	r3, r2
 8005242:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005246:	461a      	mov	r2, r3
 8005248:	2300      	movs	r3, #0
 800524a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	015a      	lsls	r2, r3, #5
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	4413      	add	r3, r2
 8005254:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005258:	461a      	mov	r2, r3
 800525a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800525e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005260:	693b      	ldr	r3, [r7, #16]
 8005262:	3301      	adds	r3, #1
 8005264:	613b      	str	r3, [r7, #16]
 8005266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005268:	693a      	ldr	r2, [r7, #16]
 800526a:	429a      	cmp	r2, r3
 800526c:	d3b7      	bcc.n	80051de <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800526e:	2300      	movs	r3, #0
 8005270:	613b      	str	r3, [r7, #16]
 8005272:	e043      	b.n	80052fc <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	015a      	lsls	r2, r3, #5
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	4413      	add	r3, r2
 800527c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005286:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800528a:	d118      	bne.n	80052be <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d10a      	bne.n	80052a8 <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	015a      	lsls	r2, r3, #5
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	4413      	add	r3, r2
 800529a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800529e:	461a      	mov	r2, r3
 80052a0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80052a4:	6013      	str	r3, [r2, #0]
 80052a6:	e013      	b.n	80052d0 <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	015a      	lsls	r2, r3, #5
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	4413      	add	r3, r2
 80052b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052b4:	461a      	mov	r2, r3
 80052b6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80052ba:	6013      	str	r3, [r2, #0]
 80052bc:	e008      	b.n	80052d0 <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	015a      	lsls	r2, r3, #5
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	4413      	add	r3, r2
 80052c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052ca:	461a      	mov	r2, r3
 80052cc:	2300      	movs	r3, #0
 80052ce:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	015a      	lsls	r2, r3, #5
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	4413      	add	r3, r2
 80052d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052dc:	461a      	mov	r2, r3
 80052de:	2300      	movs	r3, #0
 80052e0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	015a      	lsls	r2, r3, #5
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	4413      	add	r3, r2
 80052ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052ee:	461a      	mov	r2, r3
 80052f0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80052f4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80052f6:	693b      	ldr	r3, [r7, #16]
 80052f8:	3301      	adds	r3, #1
 80052fa:	613b      	str	r3, [r7, #16]
 80052fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052fe:	693a      	ldr	r2, [r7, #16]
 8005300:	429a      	cmp	r2, r3
 8005302:	d3b7      	bcc.n	8005274 <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800530a:	691b      	ldr	r3, [r3, #16]
 800530c:	68fa      	ldr	r2, [r7, #12]
 800530e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005312:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005316:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2200      	movs	r2, #0
 800531c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005324:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	699b      	ldr	r3, [r3, #24]
 800532a:	f043 0210 	orr.w	r2, r3, #16
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	699a      	ldr	r2, [r3, #24]
 8005336:	4b10      	ldr	r3, [pc, #64]	; (8005378 <USB_DevInit+0x280>)
 8005338:	4313      	orrs	r3, r2
 800533a:	687a      	ldr	r2, [r7, #4]
 800533c:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800533e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005340:	2b00      	cmp	r3, #0
 8005342:	d005      	beq.n	8005350 <USB_DevInit+0x258>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	699b      	ldr	r3, [r3, #24]
 8005348:	f043 0208 	orr.w	r2, r3, #8
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005350:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005352:	2b01      	cmp	r3, #1
 8005354:	d107      	bne.n	8005366 <USB_DevInit+0x26e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	699b      	ldr	r3, [r3, #24]
 800535a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800535e:	f043 0304 	orr.w	r3, r3, #4
 8005362:	687a      	ldr	r2, [r7, #4]
 8005364:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005366:	7dfb      	ldrb	r3, [r7, #23]
}
 8005368:	4618      	mov	r0, r3
 800536a:	3718      	adds	r7, #24
 800536c:	46bd      	mov	sp, r7
 800536e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005372:	b004      	add	sp, #16
 8005374:	4770      	bx	lr
 8005376:	bf00      	nop
 8005378:	803c3800 	.word	0x803c3800

0800537c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800537c:	b480      	push	{r7}
 800537e:	b085      	sub	sp, #20
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
 8005384:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005386:	2300      	movs	r3, #0
 8005388:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	3301      	adds	r3, #1
 800538e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	4a13      	ldr	r2, [pc, #76]	; (80053e0 <USB_FlushTxFifo+0x64>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d901      	bls.n	800539c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005398:	2303      	movs	r3, #3
 800539a:	e01b      	b.n	80053d4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	691b      	ldr	r3, [r3, #16]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	daf2      	bge.n	800538a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80053a4:	2300      	movs	r3, #0
 80053a6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	019b      	lsls	r3, r3, #6
 80053ac:	f043 0220 	orr.w	r2, r3, #32
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	3301      	adds	r3, #1
 80053b8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	4a08      	ldr	r2, [pc, #32]	; (80053e0 <USB_FlushTxFifo+0x64>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d901      	bls.n	80053c6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80053c2:	2303      	movs	r3, #3
 80053c4:	e006      	b.n	80053d4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	691b      	ldr	r3, [r3, #16]
 80053ca:	f003 0320 	and.w	r3, r3, #32
 80053ce:	2b20      	cmp	r3, #32
 80053d0:	d0f0      	beq.n	80053b4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80053d2:	2300      	movs	r3, #0
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	3714      	adds	r7, #20
 80053d8:	46bd      	mov	sp, r7
 80053da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053de:	4770      	bx	lr
 80053e0:	00030d40 	.word	0x00030d40

080053e4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b085      	sub	sp, #20
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80053ec:	2300      	movs	r3, #0
 80053ee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	3301      	adds	r3, #1
 80053f4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	4a11      	ldr	r2, [pc, #68]	; (8005440 <USB_FlushRxFifo+0x5c>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d901      	bls.n	8005402 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80053fe:	2303      	movs	r3, #3
 8005400:	e018      	b.n	8005434 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	691b      	ldr	r3, [r3, #16]
 8005406:	2b00      	cmp	r3, #0
 8005408:	daf2      	bge.n	80053f0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800540a:	2300      	movs	r3, #0
 800540c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2210      	movs	r2, #16
 8005412:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	3301      	adds	r3, #1
 8005418:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	4a08      	ldr	r2, [pc, #32]	; (8005440 <USB_FlushRxFifo+0x5c>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d901      	bls.n	8005426 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005422:	2303      	movs	r3, #3
 8005424:	e006      	b.n	8005434 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	691b      	ldr	r3, [r3, #16]
 800542a:	f003 0310 	and.w	r3, r3, #16
 800542e:	2b10      	cmp	r3, #16
 8005430:	d0f0      	beq.n	8005414 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005432:	2300      	movs	r3, #0
}
 8005434:	4618      	mov	r0, r3
 8005436:	3714      	adds	r7, #20
 8005438:	46bd      	mov	sp, r7
 800543a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543e:	4770      	bx	lr
 8005440:	00030d40 	.word	0x00030d40

08005444 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005444:	b480      	push	{r7}
 8005446:	b085      	sub	sp, #20
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
 800544c:	460b      	mov	r3, r1
 800544e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800545a:	681a      	ldr	r2, [r3, #0]
 800545c:	78fb      	ldrb	r3, [r7, #3]
 800545e:	68f9      	ldr	r1, [r7, #12]
 8005460:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005464:	4313      	orrs	r3, r2
 8005466:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005468:	2300      	movs	r3, #0
}
 800546a:	4618      	mov	r0, r3
 800546c:	3714      	adds	r7, #20
 800546e:	46bd      	mov	sp, r7
 8005470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005474:	4770      	bx	lr

08005476 <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005476:	b480      	push	{r7}
 8005478:	b087      	sub	sp, #28
 800547a:	af00      	add	r7, sp, #0
 800547c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005482:	693b      	ldr	r3, [r7, #16]
 8005484:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005488:	689b      	ldr	r3, [r3, #8]
 800548a:	f003 0306 	and.w	r3, r3, #6
 800548e:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	2b02      	cmp	r3, #2
 8005494:	d002      	beq.n	800549c <USB_GetDevSpeed+0x26>
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	2b06      	cmp	r3, #6
 800549a:	d102      	bne.n	80054a2 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800549c:	2302      	movs	r3, #2
 800549e:	75fb      	strb	r3, [r7, #23]
 80054a0:	e001      	b.n	80054a6 <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 80054a2:	230f      	movs	r3, #15
 80054a4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80054a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80054a8:	4618      	mov	r0, r3
 80054aa:	371c      	adds	r7, #28
 80054ac:	46bd      	mov	sp, r7
 80054ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b2:	4770      	bx	lr

080054b4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80054b4:	b480      	push	{r7}
 80054b6:	b085      	sub	sp, #20
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
 80054bc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	781b      	ldrb	r3, [r3, #0]
 80054c6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	785b      	ldrb	r3, [r3, #1]
 80054cc:	2b01      	cmp	r3, #1
 80054ce:	d13a      	bne.n	8005546 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054d6:	69da      	ldr	r2, [r3, #28]
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	781b      	ldrb	r3, [r3, #0]
 80054dc:	f003 030f 	and.w	r3, r3, #15
 80054e0:	2101      	movs	r1, #1
 80054e2:	fa01 f303 	lsl.w	r3, r1, r3
 80054e6:	b29b      	uxth	r3, r3
 80054e8:	68f9      	ldr	r1, [r7, #12]
 80054ea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80054ee:	4313      	orrs	r3, r2
 80054f0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	015a      	lsls	r2, r3, #5
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	4413      	add	r3, r2
 80054fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005504:	2b00      	cmp	r3, #0
 8005506:	d155      	bne.n	80055b4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	015a      	lsls	r2, r3, #5
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	4413      	add	r3, r2
 8005510:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005514:	681a      	ldr	r2, [r3, #0]
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	689b      	ldr	r3, [r3, #8]
 800551a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	791b      	ldrb	r3, [r3, #4]
 8005522:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005524:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	059b      	lsls	r3, r3, #22
 800552a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800552c:	4313      	orrs	r3, r2
 800552e:	68ba      	ldr	r2, [r7, #8]
 8005530:	0151      	lsls	r1, r2, #5
 8005532:	68fa      	ldr	r2, [r7, #12]
 8005534:	440a      	add	r2, r1
 8005536:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800553a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800553e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005542:	6013      	str	r3, [r2, #0]
 8005544:	e036      	b.n	80055b4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800554c:	69da      	ldr	r2, [r3, #28]
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	781b      	ldrb	r3, [r3, #0]
 8005552:	f003 030f 	and.w	r3, r3, #15
 8005556:	2101      	movs	r1, #1
 8005558:	fa01 f303 	lsl.w	r3, r1, r3
 800555c:	041b      	lsls	r3, r3, #16
 800555e:	68f9      	ldr	r1, [r7, #12]
 8005560:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005564:	4313      	orrs	r3, r2
 8005566:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	015a      	lsls	r2, r3, #5
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	4413      	add	r3, r2
 8005570:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800557a:	2b00      	cmp	r3, #0
 800557c:	d11a      	bne.n	80055b4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	015a      	lsls	r2, r3, #5
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	4413      	add	r3, r2
 8005586:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800558a:	681a      	ldr	r2, [r3, #0]
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	689b      	ldr	r3, [r3, #8]
 8005590:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	791b      	ldrb	r3, [r3, #4]
 8005598:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800559a:	430b      	orrs	r3, r1
 800559c:	4313      	orrs	r3, r2
 800559e:	68ba      	ldr	r2, [r7, #8]
 80055a0:	0151      	lsls	r1, r2, #5
 80055a2:	68fa      	ldr	r2, [r7, #12]
 80055a4:	440a      	add	r2, r1
 80055a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055b2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80055b4:	2300      	movs	r3, #0
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	3714      	adds	r7, #20
 80055ba:	46bd      	mov	sp, r7
 80055bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c0:	4770      	bx	lr
	...

080055c4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80055c4:	b480      	push	{r7}
 80055c6:	b085      	sub	sp, #20
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
 80055cc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	781b      	ldrb	r3, [r3, #0]
 80055d6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	785b      	ldrb	r3, [r3, #1]
 80055dc:	2b01      	cmp	r3, #1
 80055de:	d161      	bne.n	80056a4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	015a      	lsls	r2, r3, #5
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	4413      	add	r3, r2
 80055e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80055f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80055f6:	d11f      	bne.n	8005638 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	015a      	lsls	r2, r3, #5
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	4413      	add	r3, r2
 8005600:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	68ba      	ldr	r2, [r7, #8]
 8005608:	0151      	lsls	r1, r2, #5
 800560a:	68fa      	ldr	r2, [r7, #12]
 800560c:	440a      	add	r2, r1
 800560e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005612:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005616:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	015a      	lsls	r2, r3, #5
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	4413      	add	r3, r2
 8005620:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	68ba      	ldr	r2, [r7, #8]
 8005628:	0151      	lsls	r1, r2, #5
 800562a:	68fa      	ldr	r2, [r7, #12]
 800562c:	440a      	add	r2, r1
 800562e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005632:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005636:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800563e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	781b      	ldrb	r3, [r3, #0]
 8005644:	f003 030f 	and.w	r3, r3, #15
 8005648:	2101      	movs	r1, #1
 800564a:	fa01 f303 	lsl.w	r3, r1, r3
 800564e:	b29b      	uxth	r3, r3
 8005650:	43db      	mvns	r3, r3
 8005652:	68f9      	ldr	r1, [r7, #12]
 8005654:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005658:	4013      	ands	r3, r2
 800565a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005662:	69da      	ldr	r2, [r3, #28]
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	781b      	ldrb	r3, [r3, #0]
 8005668:	f003 030f 	and.w	r3, r3, #15
 800566c:	2101      	movs	r1, #1
 800566e:	fa01 f303 	lsl.w	r3, r1, r3
 8005672:	b29b      	uxth	r3, r3
 8005674:	43db      	mvns	r3, r3
 8005676:	68f9      	ldr	r1, [r7, #12]
 8005678:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800567c:	4013      	ands	r3, r2
 800567e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	015a      	lsls	r2, r3, #5
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	4413      	add	r3, r2
 8005688:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800568c:	681a      	ldr	r2, [r3, #0]
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	0159      	lsls	r1, r3, #5
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	440b      	add	r3, r1
 8005696:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800569a:	4619      	mov	r1, r3
 800569c:	4b35      	ldr	r3, [pc, #212]	; (8005774 <USB_DeactivateEndpoint+0x1b0>)
 800569e:	4013      	ands	r3, r2
 80056a0:	600b      	str	r3, [r1, #0]
 80056a2:	e060      	b.n	8005766 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	015a      	lsls	r2, r3, #5
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	4413      	add	r3, r2
 80056ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80056b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80056ba:	d11f      	bne.n	80056fc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	015a      	lsls	r2, r3, #5
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	4413      	add	r3, r2
 80056c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	68ba      	ldr	r2, [r7, #8]
 80056cc:	0151      	lsls	r1, r2, #5
 80056ce:	68fa      	ldr	r2, [r7, #12]
 80056d0:	440a      	add	r2, r1
 80056d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056d6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80056da:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	015a      	lsls	r2, r3, #5
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	4413      	add	r3, r2
 80056e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	68ba      	ldr	r2, [r7, #8]
 80056ec:	0151      	lsls	r1, r2, #5
 80056ee:	68fa      	ldr	r2, [r7, #12]
 80056f0:	440a      	add	r2, r1
 80056f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056f6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80056fa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005702:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	781b      	ldrb	r3, [r3, #0]
 8005708:	f003 030f 	and.w	r3, r3, #15
 800570c:	2101      	movs	r1, #1
 800570e:	fa01 f303 	lsl.w	r3, r1, r3
 8005712:	041b      	lsls	r3, r3, #16
 8005714:	43db      	mvns	r3, r3
 8005716:	68f9      	ldr	r1, [r7, #12]
 8005718:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800571c:	4013      	ands	r3, r2
 800571e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005726:	69da      	ldr	r2, [r3, #28]
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	781b      	ldrb	r3, [r3, #0]
 800572c:	f003 030f 	and.w	r3, r3, #15
 8005730:	2101      	movs	r1, #1
 8005732:	fa01 f303 	lsl.w	r3, r1, r3
 8005736:	041b      	lsls	r3, r3, #16
 8005738:	43db      	mvns	r3, r3
 800573a:	68f9      	ldr	r1, [r7, #12]
 800573c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005740:	4013      	ands	r3, r2
 8005742:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	015a      	lsls	r2, r3, #5
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	4413      	add	r3, r2
 800574c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005750:	681a      	ldr	r2, [r3, #0]
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	0159      	lsls	r1, r3, #5
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	440b      	add	r3, r1
 800575a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800575e:	4619      	mov	r1, r3
 8005760:	4b05      	ldr	r3, [pc, #20]	; (8005778 <USB_DeactivateEndpoint+0x1b4>)
 8005762:	4013      	ands	r3, r2
 8005764:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005766:	2300      	movs	r3, #0
}
 8005768:	4618      	mov	r0, r3
 800576a:	3714      	adds	r7, #20
 800576c:	46bd      	mov	sp, r7
 800576e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005772:	4770      	bx	lr
 8005774:	ec337800 	.word	0xec337800
 8005778:	eff37800 	.word	0xeff37800

0800577c <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b086      	sub	sp, #24
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
 8005784:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	781b      	ldrb	r3, [r3, #0]
 800578e:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	785b      	ldrb	r3, [r3, #1]
 8005794:	2b01      	cmp	r3, #1
 8005796:	f040 8128 	bne.w	80059ea <USB_EPStartXfer+0x26e>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	691b      	ldr	r3, [r3, #16]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d132      	bne.n	8005808 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	015a      	lsls	r2, r3, #5
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	4413      	add	r3, r2
 80057aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057ae:	691b      	ldr	r3, [r3, #16]
 80057b0:	693a      	ldr	r2, [r7, #16]
 80057b2:	0151      	lsls	r1, r2, #5
 80057b4:	697a      	ldr	r2, [r7, #20]
 80057b6:	440a      	add	r2, r1
 80057b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057bc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80057c0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80057c4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	015a      	lsls	r2, r3, #5
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	4413      	add	r3, r2
 80057ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057d2:	691b      	ldr	r3, [r3, #16]
 80057d4:	693a      	ldr	r2, [r7, #16]
 80057d6:	0151      	lsls	r1, r2, #5
 80057d8:	697a      	ldr	r2, [r7, #20]
 80057da:	440a      	add	r2, r1
 80057dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057e0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80057e4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80057e6:	693b      	ldr	r3, [r7, #16]
 80057e8:	015a      	lsls	r2, r3, #5
 80057ea:	697b      	ldr	r3, [r7, #20]
 80057ec:	4413      	add	r3, r2
 80057ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057f2:	691b      	ldr	r3, [r3, #16]
 80057f4:	693a      	ldr	r2, [r7, #16]
 80057f6:	0151      	lsls	r1, r2, #5
 80057f8:	697a      	ldr	r2, [r7, #20]
 80057fa:	440a      	add	r2, r1
 80057fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005800:	0cdb      	lsrs	r3, r3, #19
 8005802:	04db      	lsls	r3, r3, #19
 8005804:	6113      	str	r3, [r2, #16]
 8005806:	e092      	b.n	800592e <USB_EPStartXfer+0x1b2>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005808:	693b      	ldr	r3, [r7, #16]
 800580a:	015a      	lsls	r2, r3, #5
 800580c:	697b      	ldr	r3, [r7, #20]
 800580e:	4413      	add	r3, r2
 8005810:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005814:	691b      	ldr	r3, [r3, #16]
 8005816:	693a      	ldr	r2, [r7, #16]
 8005818:	0151      	lsls	r1, r2, #5
 800581a:	697a      	ldr	r2, [r7, #20]
 800581c:	440a      	add	r2, r1
 800581e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005822:	0cdb      	lsrs	r3, r3, #19
 8005824:	04db      	lsls	r3, r3, #19
 8005826:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005828:	693b      	ldr	r3, [r7, #16]
 800582a:	015a      	lsls	r2, r3, #5
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	4413      	add	r3, r2
 8005830:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005834:	691b      	ldr	r3, [r3, #16]
 8005836:	693a      	ldr	r2, [r7, #16]
 8005838:	0151      	lsls	r1, r2, #5
 800583a:	697a      	ldr	r2, [r7, #20]
 800583c:	440a      	add	r2, r1
 800583e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005842:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005846:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800584a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d11a      	bne.n	8005888 <USB_EPStartXfer+0x10c>
      {
        if (ep->xfer_len > ep->maxpacket)
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	691a      	ldr	r2, [r3, #16]
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	689b      	ldr	r3, [r3, #8]
 800585a:	429a      	cmp	r2, r3
 800585c:	d903      	bls.n	8005866 <USB_EPStartXfer+0xea>
        {
          ep->xfer_len = ep->maxpacket;
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	689a      	ldr	r2, [r3, #8]
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005866:	693b      	ldr	r3, [r7, #16]
 8005868:	015a      	lsls	r2, r3, #5
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	4413      	add	r3, r2
 800586e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005872:	691b      	ldr	r3, [r3, #16]
 8005874:	693a      	ldr	r2, [r7, #16]
 8005876:	0151      	lsls	r1, r2, #5
 8005878:	697a      	ldr	r2, [r7, #20]
 800587a:	440a      	add	r2, r1
 800587c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005880:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005884:	6113      	str	r3, [r2, #16]
 8005886:	e01b      	b.n	80058c0 <USB_EPStartXfer+0x144>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005888:	693b      	ldr	r3, [r7, #16]
 800588a:	015a      	lsls	r2, r3, #5
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	4413      	add	r3, r2
 8005890:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005894:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	6919      	ldr	r1, [r3, #16]
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	689b      	ldr	r3, [r3, #8]
 800589e:	440b      	add	r3, r1
 80058a0:	1e59      	subs	r1, r3, #1
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	689b      	ldr	r3, [r3, #8]
 80058a6:	fbb1 f3f3 	udiv	r3, r1, r3
 80058aa:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80058ac:	4b8d      	ldr	r3, [pc, #564]	; (8005ae4 <USB_EPStartXfer+0x368>)
 80058ae:	400b      	ands	r3, r1
 80058b0:	6939      	ldr	r1, [r7, #16]
 80058b2:	0148      	lsls	r0, r1, #5
 80058b4:	6979      	ldr	r1, [r7, #20]
 80058b6:	4401      	add	r1, r0
 80058b8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80058bc:	4313      	orrs	r3, r2
 80058be:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	015a      	lsls	r2, r3, #5
 80058c4:	697b      	ldr	r3, [r7, #20]
 80058c6:	4413      	add	r3, r2
 80058c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058cc:	691a      	ldr	r2, [r3, #16]
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	691b      	ldr	r3, [r3, #16]
 80058d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80058d6:	6939      	ldr	r1, [r7, #16]
 80058d8:	0148      	lsls	r0, r1, #5
 80058da:	6979      	ldr	r1, [r7, #20]
 80058dc:	4401      	add	r1, r0
 80058de:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80058e2:	4313      	orrs	r3, r2
 80058e4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	791b      	ldrb	r3, [r3, #4]
 80058ea:	2b01      	cmp	r3, #1
 80058ec:	d11f      	bne.n	800592e <USB_EPStartXfer+0x1b2>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80058ee:	693b      	ldr	r3, [r7, #16]
 80058f0:	015a      	lsls	r2, r3, #5
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	4413      	add	r3, r2
 80058f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058fa:	691b      	ldr	r3, [r3, #16]
 80058fc:	693a      	ldr	r2, [r7, #16]
 80058fe:	0151      	lsls	r1, r2, #5
 8005900:	697a      	ldr	r2, [r7, #20]
 8005902:	440a      	add	r2, r1
 8005904:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005908:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800590c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800590e:	693b      	ldr	r3, [r7, #16]
 8005910:	015a      	lsls	r2, r3, #5
 8005912:	697b      	ldr	r3, [r7, #20]
 8005914:	4413      	add	r3, r2
 8005916:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800591a:	691b      	ldr	r3, [r3, #16]
 800591c:	693a      	ldr	r2, [r7, #16]
 800591e:	0151      	lsls	r1, r2, #5
 8005920:	697a      	ldr	r2, [r7, #20]
 8005922:	440a      	add	r2, r1
 8005924:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005928:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800592c:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	015a      	lsls	r2, r3, #5
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	4413      	add	r3, r2
 8005936:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	693a      	ldr	r2, [r7, #16]
 800593e:	0151      	lsls	r1, r2, #5
 8005940:	697a      	ldr	r2, [r7, #20]
 8005942:	440a      	add	r2, r1
 8005944:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005948:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800594c:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	791b      	ldrb	r3, [r3, #4]
 8005952:	2b01      	cmp	r3, #1
 8005954:	d015      	beq.n	8005982 <USB_EPStartXfer+0x206>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	691b      	ldr	r3, [r3, #16]
 800595a:	2b00      	cmp	r3, #0
 800595c:	f000 8139 	beq.w	8005bd2 <USB_EPStartXfer+0x456>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005960:	697b      	ldr	r3, [r7, #20]
 8005962:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005966:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	781b      	ldrb	r3, [r3, #0]
 800596c:	f003 030f 	and.w	r3, r3, #15
 8005970:	2101      	movs	r1, #1
 8005972:	fa01 f303 	lsl.w	r3, r1, r3
 8005976:	6979      	ldr	r1, [r7, #20]
 8005978:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800597c:	4313      	orrs	r3, r2
 800597e:	634b      	str	r3, [r1, #52]	; 0x34
 8005980:	e127      	b.n	8005bd2 <USB_EPStartXfer+0x456>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005988:	689b      	ldr	r3, [r3, #8]
 800598a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800598e:	2b00      	cmp	r3, #0
 8005990:	d110      	bne.n	80059b4 <USB_EPStartXfer+0x238>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	015a      	lsls	r2, r3, #5
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	4413      	add	r3, r2
 800599a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	693a      	ldr	r2, [r7, #16]
 80059a2:	0151      	lsls	r1, r2, #5
 80059a4:	697a      	ldr	r2, [r7, #20]
 80059a6:	440a      	add	r2, r1
 80059a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059ac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80059b0:	6013      	str	r3, [r2, #0]
 80059b2:	e00f      	b.n	80059d4 <USB_EPStartXfer+0x258>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80059b4:	693b      	ldr	r3, [r7, #16]
 80059b6:	015a      	lsls	r2, r3, #5
 80059b8:	697b      	ldr	r3, [r7, #20]
 80059ba:	4413      	add	r3, r2
 80059bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	693a      	ldr	r2, [r7, #16]
 80059c4:	0151      	lsls	r1, r2, #5
 80059c6:	697a      	ldr	r2, [r7, #20]
 80059c8:	440a      	add	r2, r1
 80059ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059d2:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	68d9      	ldr	r1, [r3, #12]
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	781a      	ldrb	r2, [r3, #0]
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	691b      	ldr	r3, [r3, #16]
 80059e0:	b29b      	uxth	r3, r3
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f000 f9a6 	bl	8005d34 <USB_WritePacket>
 80059e8:	e0f3      	b.n	8005bd2 <USB_EPStartXfer+0x456>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80059ea:	693b      	ldr	r3, [r7, #16]
 80059ec:	015a      	lsls	r2, r3, #5
 80059ee:	697b      	ldr	r3, [r7, #20]
 80059f0:	4413      	add	r3, r2
 80059f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059f6:	691b      	ldr	r3, [r3, #16]
 80059f8:	693a      	ldr	r2, [r7, #16]
 80059fa:	0151      	lsls	r1, r2, #5
 80059fc:	697a      	ldr	r2, [r7, #20]
 80059fe:	440a      	add	r2, r1
 8005a00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a04:	0cdb      	lsrs	r3, r3, #19
 8005a06:	04db      	lsls	r3, r3, #19
 8005a08:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005a0a:	693b      	ldr	r3, [r7, #16]
 8005a0c:	015a      	lsls	r2, r3, #5
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	4413      	add	r3, r2
 8005a12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a16:	691b      	ldr	r3, [r3, #16]
 8005a18:	693a      	ldr	r2, [r7, #16]
 8005a1a:	0151      	lsls	r1, r2, #5
 8005a1c:	697a      	ldr	r2, [r7, #20]
 8005a1e:	440a      	add	r2, r1
 8005a20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a24:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005a28:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005a2c:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8005a2e:	693b      	ldr	r3, [r7, #16]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d12f      	bne.n	8005a94 <USB_EPStartXfer+0x318>
    {
      if (ep->xfer_len > 0U)
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	691b      	ldr	r3, [r3, #16]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d003      	beq.n	8005a44 <USB_EPStartXfer+0x2c8>
      {
        ep->xfer_len = ep->maxpacket;
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	689a      	ldr	r2, [r3, #8]
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	689a      	ldr	r2, [r3, #8]
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	015a      	lsls	r2, r3, #5
 8005a50:	697b      	ldr	r3, [r7, #20]
 8005a52:	4413      	add	r3, r2
 8005a54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a58:	691a      	ldr	r2, [r3, #16]
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	6a1b      	ldr	r3, [r3, #32]
 8005a5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a62:	6939      	ldr	r1, [r7, #16]
 8005a64:	0148      	lsls	r0, r1, #5
 8005a66:	6979      	ldr	r1, [r7, #20]
 8005a68:	4401      	add	r1, r0
 8005a6a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005a72:	693b      	ldr	r3, [r7, #16]
 8005a74:	015a      	lsls	r2, r3, #5
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	4413      	add	r3, r2
 8005a7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a7e:	691b      	ldr	r3, [r3, #16]
 8005a80:	693a      	ldr	r2, [r7, #16]
 8005a82:	0151      	lsls	r1, r2, #5
 8005a84:	697a      	ldr	r2, [r7, #20]
 8005a86:	440a      	add	r2, r1
 8005a88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a8c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005a90:	6113      	str	r3, [r2, #16]
 8005a92:	e061      	b.n	8005b58 <USB_EPStartXfer+0x3dc>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	691b      	ldr	r3, [r3, #16]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d125      	bne.n	8005ae8 <USB_EPStartXfer+0x36c>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005a9c:	693b      	ldr	r3, [r7, #16]
 8005a9e:	015a      	lsls	r2, r3, #5
 8005aa0:	697b      	ldr	r3, [r7, #20]
 8005aa2:	4413      	add	r3, r2
 8005aa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005aa8:	691a      	ldr	r2, [r3, #16]
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	689b      	ldr	r3, [r3, #8]
 8005aae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ab2:	6939      	ldr	r1, [r7, #16]
 8005ab4:	0148      	lsls	r0, r1, #5
 8005ab6:	6979      	ldr	r1, [r7, #20]
 8005ab8:	4401      	add	r1, r0
 8005aba:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	015a      	lsls	r2, r3, #5
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	4413      	add	r3, r2
 8005aca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ace:	691b      	ldr	r3, [r3, #16]
 8005ad0:	693a      	ldr	r2, [r7, #16]
 8005ad2:	0151      	lsls	r1, r2, #5
 8005ad4:	697a      	ldr	r2, [r7, #20]
 8005ad6:	440a      	add	r2, r1
 8005ad8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005adc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005ae0:	6113      	str	r3, [r2, #16]
 8005ae2:	e039      	b.n	8005b58 <USB_EPStartXfer+0x3dc>
 8005ae4:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	691a      	ldr	r2, [r3, #16]
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	689b      	ldr	r3, [r3, #8]
 8005af0:	4413      	add	r3, r2
 8005af2:	1e5a      	subs	r2, r3, #1
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	689b      	ldr	r3, [r3, #8]
 8005af8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005afc:	81fb      	strh	r3, [r7, #14]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	689b      	ldr	r3, [r3, #8]
 8005b02:	89fa      	ldrh	r2, [r7, #14]
 8005b04:	fb03 f202 	mul.w	r2, r3, r2
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005b0c:	693b      	ldr	r3, [r7, #16]
 8005b0e:	015a      	lsls	r2, r3, #5
 8005b10:	697b      	ldr	r3, [r7, #20]
 8005b12:	4413      	add	r3, r2
 8005b14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b18:	691a      	ldr	r2, [r3, #16]
 8005b1a:	89fb      	ldrh	r3, [r7, #14]
 8005b1c:	04d9      	lsls	r1, r3, #19
 8005b1e:	4b2f      	ldr	r3, [pc, #188]	; (8005bdc <USB_EPStartXfer+0x460>)
 8005b20:	400b      	ands	r3, r1
 8005b22:	6939      	ldr	r1, [r7, #16]
 8005b24:	0148      	lsls	r0, r1, #5
 8005b26:	6979      	ldr	r1, [r7, #20]
 8005b28:	4401      	add	r1, r0
 8005b2a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005b32:	693b      	ldr	r3, [r7, #16]
 8005b34:	015a      	lsls	r2, r3, #5
 8005b36:	697b      	ldr	r3, [r7, #20]
 8005b38:	4413      	add	r3, r2
 8005b3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b3e:	691a      	ldr	r2, [r3, #16]
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	6a1b      	ldr	r3, [r3, #32]
 8005b44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b48:	6939      	ldr	r1, [r7, #16]
 8005b4a:	0148      	lsls	r0, r1, #5
 8005b4c:	6979      	ldr	r1, [r7, #20]
 8005b4e:	4401      	add	r1, r0
 8005b50:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005b54:	4313      	orrs	r3, r2
 8005b56:	610b      	str	r3, [r1, #16]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	791b      	ldrb	r3, [r3, #4]
 8005b5c:	2b01      	cmp	r3, #1
 8005b5e:	d128      	bne.n	8005bb2 <USB_EPStartXfer+0x436>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005b60:	697b      	ldr	r3, [r7, #20]
 8005b62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b66:	689b      	ldr	r3, [r3, #8]
 8005b68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d110      	bne.n	8005b92 <USB_EPStartXfer+0x416>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005b70:	693b      	ldr	r3, [r7, #16]
 8005b72:	015a      	lsls	r2, r3, #5
 8005b74:	697b      	ldr	r3, [r7, #20]
 8005b76:	4413      	add	r3, r2
 8005b78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	693a      	ldr	r2, [r7, #16]
 8005b80:	0151      	lsls	r1, r2, #5
 8005b82:	697a      	ldr	r2, [r7, #20]
 8005b84:	440a      	add	r2, r1
 8005b86:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b8a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005b8e:	6013      	str	r3, [r2, #0]
 8005b90:	e00f      	b.n	8005bb2 <USB_EPStartXfer+0x436>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005b92:	693b      	ldr	r3, [r7, #16]
 8005b94:	015a      	lsls	r2, r3, #5
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	4413      	add	r3, r2
 8005b9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	693a      	ldr	r2, [r7, #16]
 8005ba2:	0151      	lsls	r1, r2, #5
 8005ba4:	697a      	ldr	r2, [r7, #20]
 8005ba6:	440a      	add	r2, r1
 8005ba8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bb0:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005bb2:	693b      	ldr	r3, [r7, #16]
 8005bb4:	015a      	lsls	r2, r3, #5
 8005bb6:	697b      	ldr	r3, [r7, #20]
 8005bb8:	4413      	add	r3, r2
 8005bba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	693a      	ldr	r2, [r7, #16]
 8005bc2:	0151      	lsls	r1, r2, #5
 8005bc4:	697a      	ldr	r2, [r7, #20]
 8005bc6:	440a      	add	r2, r1
 8005bc8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bcc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005bd0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005bd2:	2300      	movs	r3, #0
}
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	3718      	adds	r7, #24
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	bd80      	pop	{r7, pc}
 8005bdc:	1ff80000 	.word	0x1ff80000

08005be0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005be0:	b480      	push	{r7}
 8005be2:	b087      	sub	sp, #28
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
 8005be8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005bea:	2300      	movs	r3, #0
 8005bec:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005bee:	2300      	movs	r3, #0
 8005bf0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	785b      	ldrb	r3, [r3, #1]
 8005bfa:	2b01      	cmp	r3, #1
 8005bfc:	d14a      	bne.n	8005c94 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	781b      	ldrb	r3, [r3, #0]
 8005c02:	015a      	lsls	r2, r3, #5
 8005c04:	693b      	ldr	r3, [r7, #16]
 8005c06:	4413      	add	r3, r2
 8005c08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c12:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c16:	f040 8086 	bne.w	8005d26 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	781b      	ldrb	r3, [r3, #0]
 8005c1e:	015a      	lsls	r2, r3, #5
 8005c20:	693b      	ldr	r3, [r7, #16]
 8005c22:	4413      	add	r3, r2
 8005c24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	683a      	ldr	r2, [r7, #0]
 8005c2c:	7812      	ldrb	r2, [r2, #0]
 8005c2e:	0151      	lsls	r1, r2, #5
 8005c30:	693a      	ldr	r2, [r7, #16]
 8005c32:	440a      	add	r2, r1
 8005c34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c38:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005c3c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	781b      	ldrb	r3, [r3, #0]
 8005c42:	015a      	lsls	r2, r3, #5
 8005c44:	693b      	ldr	r3, [r7, #16]
 8005c46:	4413      	add	r3, r2
 8005c48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	683a      	ldr	r2, [r7, #0]
 8005c50:	7812      	ldrb	r2, [r2, #0]
 8005c52:	0151      	lsls	r1, r2, #5
 8005c54:	693a      	ldr	r2, [r7, #16]
 8005c56:	440a      	add	r2, r1
 8005c58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c5c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005c60:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	3301      	adds	r3, #1
 8005c66:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	f242 7210 	movw	r2, #10000	; 0x2710
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d902      	bls.n	8005c78 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005c72:	2301      	movs	r3, #1
 8005c74:	75fb      	strb	r3, [r7, #23]
          break;
 8005c76:	e056      	b.n	8005d26 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	781b      	ldrb	r3, [r3, #0]
 8005c7c:	015a      	lsls	r2, r3, #5
 8005c7e:	693b      	ldr	r3, [r7, #16]
 8005c80:	4413      	add	r3, r2
 8005c82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c8c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c90:	d0e7      	beq.n	8005c62 <USB_EPStopXfer+0x82>
 8005c92:	e048      	b.n	8005d26 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	781b      	ldrb	r3, [r3, #0]
 8005c98:	015a      	lsls	r2, r3, #5
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	4413      	add	r3, r2
 8005c9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ca8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005cac:	d13b      	bne.n	8005d26 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	781b      	ldrb	r3, [r3, #0]
 8005cb2:	015a      	lsls	r2, r3, #5
 8005cb4:	693b      	ldr	r3, [r7, #16]
 8005cb6:	4413      	add	r3, r2
 8005cb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	683a      	ldr	r2, [r7, #0]
 8005cc0:	7812      	ldrb	r2, [r2, #0]
 8005cc2:	0151      	lsls	r1, r2, #5
 8005cc4:	693a      	ldr	r2, [r7, #16]
 8005cc6:	440a      	add	r2, r1
 8005cc8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ccc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005cd0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	781b      	ldrb	r3, [r3, #0]
 8005cd6:	015a      	lsls	r2, r3, #5
 8005cd8:	693b      	ldr	r3, [r7, #16]
 8005cda:	4413      	add	r3, r2
 8005cdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	683a      	ldr	r2, [r7, #0]
 8005ce4:	7812      	ldrb	r2, [r2, #0]
 8005ce6:	0151      	lsls	r1, r2, #5
 8005ce8:	693a      	ldr	r2, [r7, #16]
 8005cea:	440a      	add	r2, r1
 8005cec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cf0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005cf4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	3301      	adds	r3, #1
 8005cfa:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	f242 7210 	movw	r2, #10000	; 0x2710
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d902      	bls.n	8005d0c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005d06:	2301      	movs	r3, #1
 8005d08:	75fb      	strb	r3, [r7, #23]
          break;
 8005d0a:	e00c      	b.n	8005d26 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	781b      	ldrb	r3, [r3, #0]
 8005d10:	015a      	lsls	r2, r3, #5
 8005d12:	693b      	ldr	r3, [r7, #16]
 8005d14:	4413      	add	r3, r2
 8005d16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d20:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d24:	d0e7      	beq.n	8005cf6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005d26:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	371c      	adds	r7, #28
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d32:	4770      	bx	lr

08005d34 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8005d34:	b480      	push	{r7}
 8005d36:	b089      	sub	sp, #36	; 0x24
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	60f8      	str	r0, [r7, #12]
 8005d3c:	60b9      	str	r1, [r7, #8]
 8005d3e:	4611      	mov	r1, r2
 8005d40:	461a      	mov	r2, r3
 8005d42:	460b      	mov	r3, r1
 8005d44:	71fb      	strb	r3, [r7, #7]
 8005d46:	4613      	mov	r3, r2
 8005d48:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8005d52:	88bb      	ldrh	r3, [r7, #4]
 8005d54:	3303      	adds	r3, #3
 8005d56:	089b      	lsrs	r3, r3, #2
 8005d58:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	61bb      	str	r3, [r7, #24]
 8005d5e:	e018      	b.n	8005d92 <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005d60:	79fb      	ldrb	r3, [r7, #7]
 8005d62:	031a      	lsls	r2, r3, #12
 8005d64:	697b      	ldr	r3, [r7, #20]
 8005d66:	4413      	add	r3, r2
 8005d68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d6c:	461a      	mov	r2, r3
 8005d6e:	69fb      	ldr	r3, [r7, #28]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	6013      	str	r3, [r2, #0]
    pSrc++;
 8005d74:	69fb      	ldr	r3, [r7, #28]
 8005d76:	3301      	adds	r3, #1
 8005d78:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8005d7a:	69fb      	ldr	r3, [r7, #28]
 8005d7c:	3301      	adds	r3, #1
 8005d7e:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8005d80:	69fb      	ldr	r3, [r7, #28]
 8005d82:	3301      	adds	r3, #1
 8005d84:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8005d86:	69fb      	ldr	r3, [r7, #28]
 8005d88:	3301      	adds	r3, #1
 8005d8a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005d8c:	69bb      	ldr	r3, [r7, #24]
 8005d8e:	3301      	adds	r3, #1
 8005d90:	61bb      	str	r3, [r7, #24]
 8005d92:	69ba      	ldr	r2, [r7, #24]
 8005d94:	693b      	ldr	r3, [r7, #16]
 8005d96:	429a      	cmp	r2, r3
 8005d98:	d3e2      	bcc.n	8005d60 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8005d9a:	2300      	movs	r3, #0
}
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	3724      	adds	r7, #36	; 0x24
 8005da0:	46bd      	mov	sp, r7
 8005da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da6:	4770      	bx	lr

08005da8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005da8:	b480      	push	{r7}
 8005daa:	b08b      	sub	sp, #44	; 0x2c
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	60f8      	str	r0, [r7, #12]
 8005db0:	60b9      	str	r1, [r7, #8]
 8005db2:	4613      	mov	r3, r2
 8005db4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005dbe:	88fb      	ldrh	r3, [r7, #6]
 8005dc0:	089b      	lsrs	r3, r3, #2
 8005dc2:	b29b      	uxth	r3, r3
 8005dc4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005dc6:	88fb      	ldrh	r3, [r7, #6]
 8005dc8:	f003 0303 	and.w	r3, r3, #3
 8005dcc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005dce:	2300      	movs	r3, #0
 8005dd0:	623b      	str	r3, [r7, #32]
 8005dd2:	e014      	b.n	8005dfe <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005dd4:	69bb      	ldr	r3, [r7, #24]
 8005dd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005dda:	681a      	ldr	r2, [r3, #0]
 8005ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dde:	601a      	str	r2, [r3, #0]
    pDest++;
 8005de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de2:	3301      	adds	r3, #1
 8005de4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de8:	3301      	adds	r3, #1
 8005dea:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dee:	3301      	adds	r3, #1
 8005df0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df4:	3301      	adds	r3, #1
 8005df6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005df8:	6a3b      	ldr	r3, [r7, #32]
 8005dfa:	3301      	adds	r3, #1
 8005dfc:	623b      	str	r3, [r7, #32]
 8005dfe:	6a3a      	ldr	r2, [r7, #32]
 8005e00:	697b      	ldr	r3, [r7, #20]
 8005e02:	429a      	cmp	r2, r3
 8005e04:	d3e6      	bcc.n	8005dd4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005e06:	8bfb      	ldrh	r3, [r7, #30]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d01e      	beq.n	8005e4a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005e10:	69bb      	ldr	r3, [r7, #24]
 8005e12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e16:	461a      	mov	r2, r3
 8005e18:	f107 0310 	add.w	r3, r7, #16
 8005e1c:	6812      	ldr	r2, [r2, #0]
 8005e1e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005e20:	693a      	ldr	r2, [r7, #16]
 8005e22:	6a3b      	ldr	r3, [r7, #32]
 8005e24:	b2db      	uxtb	r3, r3
 8005e26:	00db      	lsls	r3, r3, #3
 8005e28:	fa22 f303 	lsr.w	r3, r2, r3
 8005e2c:	b2da      	uxtb	r2, r3
 8005e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e30:	701a      	strb	r2, [r3, #0]
      i++;
 8005e32:	6a3b      	ldr	r3, [r7, #32]
 8005e34:	3301      	adds	r3, #1
 8005e36:	623b      	str	r3, [r7, #32]
      pDest++;
 8005e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e3a:	3301      	adds	r3, #1
 8005e3c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005e3e:	8bfb      	ldrh	r3, [r7, #30]
 8005e40:	3b01      	subs	r3, #1
 8005e42:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005e44:	8bfb      	ldrh	r3, [r7, #30]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d1ea      	bne.n	8005e20 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	372c      	adds	r7, #44	; 0x2c
 8005e50:	46bd      	mov	sp, r7
 8005e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e56:	4770      	bx	lr

08005e58 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b085      	sub	sp, #20
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
 8005e60:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	781b      	ldrb	r3, [r3, #0]
 8005e6a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	785b      	ldrb	r3, [r3, #1]
 8005e70:	2b01      	cmp	r3, #1
 8005e72:	d12c      	bne.n	8005ece <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	015a      	lsls	r2, r3, #5
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	4413      	add	r3, r2
 8005e7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	db12      	blt.n	8005eac <USB_EPSetStall+0x54>
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d00f      	beq.n	8005eac <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	015a      	lsls	r2, r3, #5
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	4413      	add	r3, r2
 8005e94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	68ba      	ldr	r2, [r7, #8]
 8005e9c:	0151      	lsls	r1, r2, #5
 8005e9e:	68fa      	ldr	r2, [r7, #12]
 8005ea0:	440a      	add	r2, r1
 8005ea2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ea6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005eaa:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	015a      	lsls	r2, r3, #5
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	4413      	add	r3, r2
 8005eb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	68ba      	ldr	r2, [r7, #8]
 8005ebc:	0151      	lsls	r1, r2, #5
 8005ebe:	68fa      	ldr	r2, [r7, #12]
 8005ec0:	440a      	add	r2, r1
 8005ec2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ec6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005eca:	6013      	str	r3, [r2, #0]
 8005ecc:	e02b      	b.n	8005f26 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	015a      	lsls	r2, r3, #5
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	4413      	add	r3, r2
 8005ed6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	db12      	blt.n	8005f06 <USB_EPSetStall+0xae>
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d00f      	beq.n	8005f06 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	015a      	lsls	r2, r3, #5
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	4413      	add	r3, r2
 8005eee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	68ba      	ldr	r2, [r7, #8]
 8005ef6:	0151      	lsls	r1, r2, #5
 8005ef8:	68fa      	ldr	r2, [r7, #12]
 8005efa:	440a      	add	r2, r1
 8005efc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f00:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005f04:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	015a      	lsls	r2, r3, #5
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	4413      	add	r3, r2
 8005f0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	68ba      	ldr	r2, [r7, #8]
 8005f16:	0151      	lsls	r1, r2, #5
 8005f18:	68fa      	ldr	r2, [r7, #12]
 8005f1a:	440a      	add	r2, r1
 8005f1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f20:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005f24:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005f26:	2300      	movs	r3, #0
}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	3714      	adds	r7, #20
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f32:	4770      	bx	lr

08005f34 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005f34:	b480      	push	{r7}
 8005f36:	b085      	sub	sp, #20
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
 8005f3c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	781b      	ldrb	r3, [r3, #0]
 8005f46:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	785b      	ldrb	r3, [r3, #1]
 8005f4c:	2b01      	cmp	r3, #1
 8005f4e:	d128      	bne.n	8005fa2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	015a      	lsls	r2, r3, #5
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	4413      	add	r3, r2
 8005f58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	68ba      	ldr	r2, [r7, #8]
 8005f60:	0151      	lsls	r1, r2, #5
 8005f62:	68fa      	ldr	r2, [r7, #12]
 8005f64:	440a      	add	r2, r1
 8005f66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f6a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005f6e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	791b      	ldrb	r3, [r3, #4]
 8005f74:	2b03      	cmp	r3, #3
 8005f76:	d003      	beq.n	8005f80 <USB_EPClearStall+0x4c>
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	791b      	ldrb	r3, [r3, #4]
 8005f7c:	2b02      	cmp	r3, #2
 8005f7e:	d138      	bne.n	8005ff2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	015a      	lsls	r2, r3, #5
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	4413      	add	r3, r2
 8005f88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	68ba      	ldr	r2, [r7, #8]
 8005f90:	0151      	lsls	r1, r2, #5
 8005f92:	68fa      	ldr	r2, [r7, #12]
 8005f94:	440a      	add	r2, r1
 8005f96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f9e:	6013      	str	r3, [r2, #0]
 8005fa0:	e027      	b.n	8005ff2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	015a      	lsls	r2, r3, #5
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	4413      	add	r3, r2
 8005faa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	68ba      	ldr	r2, [r7, #8]
 8005fb2:	0151      	lsls	r1, r2, #5
 8005fb4:	68fa      	ldr	r2, [r7, #12]
 8005fb6:	440a      	add	r2, r1
 8005fb8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fbc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005fc0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	791b      	ldrb	r3, [r3, #4]
 8005fc6:	2b03      	cmp	r3, #3
 8005fc8:	d003      	beq.n	8005fd2 <USB_EPClearStall+0x9e>
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	791b      	ldrb	r3, [r3, #4]
 8005fce:	2b02      	cmp	r3, #2
 8005fd0:	d10f      	bne.n	8005ff2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	015a      	lsls	r2, r3, #5
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	4413      	add	r3, r2
 8005fda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	68ba      	ldr	r2, [r7, #8]
 8005fe2:	0151      	lsls	r1, r2, #5
 8005fe4:	68fa      	ldr	r2, [r7, #12]
 8005fe6:	440a      	add	r2, r1
 8005fe8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ff0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005ff2:	2300      	movs	r3, #0
}
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	3714      	adds	r7, #20
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffe:	4770      	bx	lr

08006000 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006000:	b480      	push	{r7}
 8006002:	b085      	sub	sp, #20
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
 8006008:	460b      	mov	r3, r1
 800600a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	68fa      	ldr	r2, [r7, #12]
 800601a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800601e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006022:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800602a:	681a      	ldr	r2, [r3, #0]
 800602c:	78fb      	ldrb	r3, [r7, #3]
 800602e:	011b      	lsls	r3, r3, #4
 8006030:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006034:	68f9      	ldr	r1, [r7, #12]
 8006036:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800603a:	4313      	orrs	r3, r2
 800603c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800603e:	2300      	movs	r3, #0
}
 8006040:	4618      	mov	r0, r3
 8006042:	3714      	adds	r7, #20
 8006044:	46bd      	mov	sp, r7
 8006046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604a:	4770      	bx	lr

0800604c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800604c:	b480      	push	{r7}
 800604e:	b085      	sub	sp, #20
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	68fa      	ldr	r2, [r7, #12]
 8006062:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006066:	f023 0303 	bic.w	r3, r3, #3
 800606a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006072:	685b      	ldr	r3, [r3, #4]
 8006074:	68fa      	ldr	r2, [r7, #12]
 8006076:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800607a:	f023 0302 	bic.w	r3, r3, #2
 800607e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006080:	2300      	movs	r3, #0
}
 8006082:	4618      	mov	r0, r3
 8006084:	3714      	adds	r7, #20
 8006086:	46bd      	mov	sp, r7
 8006088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608c:	4770      	bx	lr

0800608e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800608e:	b480      	push	{r7}
 8006090:	b085      	sub	sp, #20
 8006092:	af00      	add	r7, sp, #0
 8006094:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	68fa      	ldr	r2, [r7, #12]
 80060a4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80060a8:	f023 0303 	bic.w	r3, r3, #3
 80060ac:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060b4:	685b      	ldr	r3, [r3, #4]
 80060b6:	68fa      	ldr	r2, [r7, #12]
 80060b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80060bc:	f043 0302 	orr.w	r3, r3, #2
 80060c0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80060c2:	2300      	movs	r3, #0
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	3714      	adds	r7, #20
 80060c8:	46bd      	mov	sp, r7
 80060ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ce:	4770      	bx	lr

080060d0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80060d0:	b480      	push	{r7}
 80060d2:	b085      	sub	sp, #20
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	695b      	ldr	r3, [r3, #20]
 80060dc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	699b      	ldr	r3, [r3, #24]
 80060e2:	68fa      	ldr	r2, [r7, #12]
 80060e4:	4013      	ands	r3, r2
 80060e6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80060e8:	68fb      	ldr	r3, [r7, #12]
}
 80060ea:	4618      	mov	r0, r3
 80060ec:	3714      	adds	r7, #20
 80060ee:	46bd      	mov	sp, r7
 80060f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f4:	4770      	bx	lr

080060f6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80060f6:	b480      	push	{r7}
 80060f8:	b085      	sub	sp, #20
 80060fa:	af00      	add	r7, sp, #0
 80060fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006108:	699b      	ldr	r3, [r3, #24]
 800610a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006112:	69db      	ldr	r3, [r3, #28]
 8006114:	68ba      	ldr	r2, [r7, #8]
 8006116:	4013      	ands	r3, r2
 8006118:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	0c1b      	lsrs	r3, r3, #16
}
 800611e:	4618      	mov	r0, r3
 8006120:	3714      	adds	r7, #20
 8006122:	46bd      	mov	sp, r7
 8006124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006128:	4770      	bx	lr

0800612a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800612a:	b480      	push	{r7}
 800612c:	b085      	sub	sp, #20
 800612e:	af00      	add	r7, sp, #0
 8006130:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800613c:	699b      	ldr	r3, [r3, #24]
 800613e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006146:	69db      	ldr	r3, [r3, #28]
 8006148:	68ba      	ldr	r2, [r7, #8]
 800614a:	4013      	ands	r3, r2
 800614c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800614e:	68bb      	ldr	r3, [r7, #8]
 8006150:	b29b      	uxth	r3, r3
}
 8006152:	4618      	mov	r0, r3
 8006154:	3714      	adds	r7, #20
 8006156:	46bd      	mov	sp, r7
 8006158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615c:	4770      	bx	lr

0800615e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800615e:	b480      	push	{r7}
 8006160:	b085      	sub	sp, #20
 8006162:	af00      	add	r7, sp, #0
 8006164:	6078      	str	r0, [r7, #4]
 8006166:	460b      	mov	r3, r1
 8006168:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800616e:	78fb      	ldrb	r3, [r7, #3]
 8006170:	015a      	lsls	r2, r3, #5
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	4413      	add	r3, r2
 8006176:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800617a:	689b      	ldr	r3, [r3, #8]
 800617c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006184:	695b      	ldr	r3, [r3, #20]
 8006186:	68ba      	ldr	r2, [r7, #8]
 8006188:	4013      	ands	r3, r2
 800618a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800618c:	68bb      	ldr	r3, [r7, #8]
}
 800618e:	4618      	mov	r0, r3
 8006190:	3714      	adds	r7, #20
 8006192:	46bd      	mov	sp, r7
 8006194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006198:	4770      	bx	lr

0800619a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800619a:	b480      	push	{r7}
 800619c:	b087      	sub	sp, #28
 800619e:	af00      	add	r7, sp, #0
 80061a0:	6078      	str	r0, [r7, #4]
 80061a2:	460b      	mov	r3, r1
 80061a4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061b0:	691b      	ldr	r3, [r3, #16]
 80061b2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80061b4:	697b      	ldr	r3, [r7, #20]
 80061b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061bc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80061be:	78fb      	ldrb	r3, [r7, #3]
 80061c0:	f003 030f 	and.w	r3, r3, #15
 80061c4:	68fa      	ldr	r2, [r7, #12]
 80061c6:	fa22 f303 	lsr.w	r3, r2, r3
 80061ca:	01db      	lsls	r3, r3, #7
 80061cc:	b2db      	uxtb	r3, r3
 80061ce:	693a      	ldr	r2, [r7, #16]
 80061d0:	4313      	orrs	r3, r2
 80061d2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80061d4:	78fb      	ldrb	r3, [r7, #3]
 80061d6:	015a      	lsls	r2, r3, #5
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	4413      	add	r3, r2
 80061dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061e0:	689b      	ldr	r3, [r3, #8]
 80061e2:	693a      	ldr	r2, [r7, #16]
 80061e4:	4013      	ands	r3, r2
 80061e6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80061e8:	68bb      	ldr	r3, [r7, #8]
}
 80061ea:	4618      	mov	r0, r3
 80061ec:	371c      	adds	r7, #28
 80061ee:	46bd      	mov	sp, r7
 80061f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f4:	4770      	bx	lr

080061f6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80061f6:	b480      	push	{r7}
 80061f8:	b083      	sub	sp, #12
 80061fa:	af00      	add	r7, sp, #0
 80061fc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	695b      	ldr	r3, [r3, #20]
 8006202:	f003 0301 	and.w	r3, r3, #1
}
 8006206:	4618      	mov	r0, r3
 8006208:	370c      	adds	r7, #12
 800620a:	46bd      	mov	sp, r7
 800620c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006210:	4770      	bx	lr

08006212 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006212:	b480      	push	{r7}
 8006214:	b085      	sub	sp, #20
 8006216:	af00      	add	r7, sp, #0
 8006218:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	68fa      	ldr	r2, [r7, #12]
 8006228:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800622c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006230:	f023 0307 	bic.w	r3, r3, #7
 8006234:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800623c:	685b      	ldr	r3, [r3, #4]
 800623e:	68fa      	ldr	r2, [r7, #12]
 8006240:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006244:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006248:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800624a:	2300      	movs	r3, #0
}
 800624c:	4618      	mov	r0, r3
 800624e:	3714      	adds	r7, #20
 8006250:	46bd      	mov	sp, r7
 8006252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006256:	4770      	bx	lr

08006258 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 8006258:	b480      	push	{r7}
 800625a:	b085      	sub	sp, #20
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
 8006260:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	333c      	adds	r3, #60	; 0x3c
 800626a:	3304      	adds	r3, #4
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	4a1c      	ldr	r2, [pc, #112]	; (80062e4 <USB_EP0_OutStart+0x8c>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d90a      	bls.n	800628e <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006284:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006288:	d101      	bne.n	800628e <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 800628a:	2300      	movs	r3, #0
 800628c:	e024      	b.n	80062d8 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006294:	461a      	mov	r2, r3
 8006296:	2300      	movs	r3, #0
 8006298:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062a0:	691b      	ldr	r3, [r3, #16]
 80062a2:	68fa      	ldr	r2, [r7, #12]
 80062a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062a8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80062ac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062b4:	691b      	ldr	r3, [r3, #16]
 80062b6:	68fa      	ldr	r2, [r7, #12]
 80062b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062bc:	f043 0318 	orr.w	r3, r3, #24
 80062c0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062c8:	691b      	ldr	r3, [r3, #16]
 80062ca:	68fa      	ldr	r2, [r7, #12]
 80062cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062d0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80062d4:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 80062d6:	2300      	movs	r3, #0
}
 80062d8:	4618      	mov	r0, r3
 80062da:	3714      	adds	r7, #20
 80062dc:	46bd      	mov	sp, r7
 80062de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e2:	4770      	bx	lr
 80062e4:	4f54300a 	.word	0x4f54300a

080062e8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80062e8:	b480      	push	{r7}
 80062ea:	b085      	sub	sp, #20
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80062f0:	2300      	movs	r3, #0
 80062f2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	3301      	adds	r3, #1
 80062f8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	4a13      	ldr	r2, [pc, #76]	; (800634c <USB_CoreReset+0x64>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d901      	bls.n	8006306 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006302:	2303      	movs	r3, #3
 8006304:	e01b      	b.n	800633e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	691b      	ldr	r3, [r3, #16]
 800630a:	2b00      	cmp	r3, #0
 800630c:	daf2      	bge.n	80062f4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800630e:	2300      	movs	r3, #0
 8006310:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	691b      	ldr	r3, [r3, #16]
 8006316:	f043 0201 	orr.w	r2, r3, #1
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	3301      	adds	r3, #1
 8006322:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	4a09      	ldr	r2, [pc, #36]	; (800634c <USB_CoreReset+0x64>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d901      	bls.n	8006330 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800632c:	2303      	movs	r3, #3
 800632e:	e006      	b.n	800633e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	691b      	ldr	r3, [r3, #16]
 8006334:	f003 0301 	and.w	r3, r3, #1
 8006338:	2b01      	cmp	r3, #1
 800633a:	d0f0      	beq.n	800631e <USB_CoreReset+0x36>

  return HAL_OK;
 800633c:	2300      	movs	r3, #0
}
 800633e:	4618      	mov	r0, r3
 8006340:	3714      	adds	r7, #20
 8006342:	46bd      	mov	sp, r7
 8006344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006348:	4770      	bx	lr
 800634a:	bf00      	nop
 800634c:	00030d40 	.word	0x00030d40

08006350 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b084      	sub	sp, #16
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
 8006358:	460b      	mov	r3, r1
 800635a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 800635c:	2010      	movs	r0, #16
 800635e:	f005 f819 	bl	800b394 <USBD_static_malloc>
 8006362:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d109      	bne.n	800637e <USBD_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	32b0      	adds	r2, #176	; 0xb0
 8006374:	2100      	movs	r1, #0
 8006376:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800637a:	2302      	movs	r3, #2
 800637c:	e048      	b.n	8006410 <USBD_HID_Init+0xc0>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	32b0      	adds	r2, #176	; 0xb0
 8006388:	68f9      	ldr	r1, [r7, #12]
 800638a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	32b0      	adds	r2, #176	; 0xb0
 8006398:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	7c1b      	ldrb	r3, [r3, #16]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d10d      	bne.n	80063c6 <USBD_HID_Init+0x76>
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 80063aa:	4b1b      	ldr	r3, [pc, #108]	; (8006418 <USBD_HID_Init+0xc8>)
 80063ac:	781b      	ldrb	r3, [r3, #0]
 80063ae:	f003 020f 	and.w	r2, r3, #15
 80063b2:	6879      	ldr	r1, [r7, #4]
 80063b4:	4613      	mov	r3, r2
 80063b6:	009b      	lsls	r3, r3, #2
 80063b8:	4413      	add	r3, r2
 80063ba:	009b      	lsls	r3, r3, #2
 80063bc:	440b      	add	r3, r1
 80063be:	3326      	adds	r3, #38	; 0x26
 80063c0:	2207      	movs	r2, #7
 80063c2:	801a      	strh	r2, [r3, #0]
 80063c4:	e00c      	b.n	80063e0 <USBD_HID_Init+0x90>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 80063c6:	4b14      	ldr	r3, [pc, #80]	; (8006418 <USBD_HID_Init+0xc8>)
 80063c8:	781b      	ldrb	r3, [r3, #0]
 80063ca:	f003 020f 	and.w	r2, r3, #15
 80063ce:	6879      	ldr	r1, [r7, #4]
 80063d0:	4613      	mov	r3, r2
 80063d2:	009b      	lsls	r3, r3, #2
 80063d4:	4413      	add	r3, r2
 80063d6:	009b      	lsls	r3, r3, #2
 80063d8:	440b      	add	r3, r1
 80063da:	3326      	adds	r3, #38	; 0x26
 80063dc:	220a      	movs	r2, #10
 80063de:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 80063e0:	4b0d      	ldr	r3, [pc, #52]	; (8006418 <USBD_HID_Init+0xc8>)
 80063e2:	7819      	ldrb	r1, [r3, #0]
 80063e4:	2304      	movs	r3, #4
 80063e6:	2203      	movs	r2, #3
 80063e8:	6878      	ldr	r0, [r7, #4]
 80063ea:	f004 fdd3 	bl	800af94 <USBD_LL_OpenEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 80063ee:	4b0a      	ldr	r3, [pc, #40]	; (8006418 <USBD_HID_Init+0xc8>)
 80063f0:	781b      	ldrb	r3, [r3, #0]
 80063f2:	f003 020f 	and.w	r2, r3, #15
 80063f6:	6879      	ldr	r1, [r7, #4]
 80063f8:	4613      	mov	r3, r2
 80063fa:	009b      	lsls	r3, r3, #2
 80063fc:	4413      	add	r3, r2
 80063fe:	009b      	lsls	r3, r3, #2
 8006400:	440b      	add	r3, r1
 8006402:	3324      	adds	r3, #36	; 0x24
 8006404:	2201      	movs	r2, #1
 8006406:	801a      	strh	r2, [r3, #0]

  hhid->state = USBD_HID_IDLE;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	2200      	movs	r2, #0
 800640c:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 800640e:	2300      	movs	r3, #0
}
 8006410:	4618      	mov	r0, r3
 8006412:	3710      	adds	r7, #16
 8006414:	46bd      	mov	sp, r7
 8006416:	bd80      	pop	{r7, pc}
 8006418:	200000ca 	.word	0x200000ca

0800641c <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b082      	sub	sp, #8
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
 8006424:	460b      	mov	r3, r1
 8006426:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 8006428:	4b1f      	ldr	r3, [pc, #124]	; (80064a8 <USBD_HID_DeInit+0x8c>)
 800642a:	781b      	ldrb	r3, [r3, #0]
 800642c:	4619      	mov	r1, r3
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	f004 fdee 	bl	800b010 <USBD_LL_CloseEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 8006434:	4b1c      	ldr	r3, [pc, #112]	; (80064a8 <USBD_HID_DeInit+0x8c>)
 8006436:	781b      	ldrb	r3, [r3, #0]
 8006438:	f003 020f 	and.w	r2, r3, #15
 800643c:	6879      	ldr	r1, [r7, #4]
 800643e:	4613      	mov	r3, r2
 8006440:	009b      	lsls	r3, r3, #2
 8006442:	4413      	add	r3, r2
 8006444:	009b      	lsls	r3, r3, #2
 8006446:	440b      	add	r3, r1
 8006448:	3324      	adds	r3, #36	; 0x24
 800644a:	2200      	movs	r2, #0
 800644c:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 800644e:	4b16      	ldr	r3, [pc, #88]	; (80064a8 <USBD_HID_DeInit+0x8c>)
 8006450:	781b      	ldrb	r3, [r3, #0]
 8006452:	f003 020f 	and.w	r2, r3, #15
 8006456:	6879      	ldr	r1, [r7, #4]
 8006458:	4613      	mov	r3, r2
 800645a:	009b      	lsls	r3, r3, #2
 800645c:	4413      	add	r3, r2
 800645e:	009b      	lsls	r3, r3, #2
 8006460:	440b      	add	r3, r1
 8006462:	3326      	adds	r3, #38	; 0x26
 8006464:	2200      	movs	r2, #0
 8006466:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	32b0      	adds	r2, #176	; 0xb0
 8006472:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d011      	beq.n	800649e <USBD_HID_DeInit+0x82>
  {
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	32b0      	adds	r2, #176	; 0xb0
 8006484:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006488:	4618      	mov	r0, r3
 800648a:	f004 ff91 	bl	800b3b0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	32b0      	adds	r2, #176	; 0xb0
 8006498:	2100      	movs	r1, #0
 800649a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)USBD_OK;
 800649e:	2300      	movs	r3, #0
}
 80064a0:	4618      	mov	r0, r3
 80064a2:	3708      	adds	r7, #8
 80064a4:	46bd      	mov	sp, r7
 80064a6:	bd80      	pop	{r7, pc}
 80064a8:	200000ca 	.word	0x200000ca

080064ac <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b086      	sub	sp, #24
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
 80064b4:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	32b0      	adds	r2, #176	; 0xb0
 80064c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064c4:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 80064c6:	2300      	movs	r3, #0
 80064c8:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 80064ca:	2300      	movs	r3, #0
 80064cc:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d101      	bne.n	80064d8 <USBD_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 80064d4:	2303      	movs	r3, #3
 80064d6:	e0e8      	b.n	80066aa <USBD_HID_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	781b      	ldrb	r3, [r3, #0]
 80064dc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d046      	beq.n	8006572 <USBD_HID_Setup+0xc6>
 80064e4:	2b20      	cmp	r3, #32
 80064e6:	f040 80d8 	bne.w	800669a <USBD_HID_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	785b      	ldrb	r3, [r3, #1]
 80064ee:	3b02      	subs	r3, #2
 80064f0:	2b09      	cmp	r3, #9
 80064f2:	d836      	bhi.n	8006562 <USBD_HID_Setup+0xb6>
 80064f4:	a201      	add	r2, pc, #4	; (adr r2, 80064fc <USBD_HID_Setup+0x50>)
 80064f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064fa:	bf00      	nop
 80064fc:	08006553 	.word	0x08006553
 8006500:	08006533 	.word	0x08006533
 8006504:	08006563 	.word	0x08006563
 8006508:	08006563 	.word	0x08006563
 800650c:	08006563 	.word	0x08006563
 8006510:	08006563 	.word	0x08006563
 8006514:	08006563 	.word	0x08006563
 8006518:	08006563 	.word	0x08006563
 800651c:	08006541 	.word	0x08006541
 8006520:	08006525 	.word	0x08006525
      {
        case USBD_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	885b      	ldrh	r3, [r3, #2]
 8006528:	b2db      	uxtb	r3, r3
 800652a:	461a      	mov	r2, r3
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	601a      	str	r2, [r3, #0]
          break;
 8006530:	e01e      	b.n	8006570 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	2201      	movs	r2, #1
 8006536:	4619      	mov	r1, r3
 8006538:	6878      	ldr	r0, [r7, #4]
 800653a:	f001 fbd5 	bl	8007ce8 <USBD_CtlSendData>
          break;
 800653e:	e017      	b.n	8006570 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	885b      	ldrh	r3, [r3, #2]
 8006544:	0a1b      	lsrs	r3, r3, #8
 8006546:	b29b      	uxth	r3, r3
 8006548:	b2db      	uxtb	r3, r3
 800654a:	461a      	mov	r2, r3
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	605a      	str	r2, [r3, #4]
          break;
 8006550:	e00e      	b.n	8006570 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	3304      	adds	r3, #4
 8006556:	2201      	movs	r2, #1
 8006558:	4619      	mov	r1, r3
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	f001 fbc4 	bl	8007ce8 <USBD_CtlSendData>
          break;
 8006560:	e006      	b.n	8006570 <USBD_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8006562:	6839      	ldr	r1, [r7, #0]
 8006564:	6878      	ldr	r0, [r7, #4]
 8006566:	f001 fb4e 	bl	8007c06 <USBD_CtlError>
          ret = USBD_FAIL;
 800656a:	2303      	movs	r3, #3
 800656c:	75fb      	strb	r3, [r7, #23]
          break;
 800656e:	bf00      	nop
      }
      break;
 8006570:	e09a      	b.n	80066a8 <USBD_HID_Setup+0x1fc>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	785b      	ldrb	r3, [r3, #1]
 8006576:	2b0b      	cmp	r3, #11
 8006578:	f200 8086 	bhi.w	8006688 <USBD_HID_Setup+0x1dc>
 800657c:	a201      	add	r2, pc, #4	; (adr r2, 8006584 <USBD_HID_Setup+0xd8>)
 800657e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006582:	bf00      	nop
 8006584:	080065b5 	.word	0x080065b5
 8006588:	08006697 	.word	0x08006697
 800658c:	08006689 	.word	0x08006689
 8006590:	08006689 	.word	0x08006689
 8006594:	08006689 	.word	0x08006689
 8006598:	08006689 	.word	0x08006689
 800659c:	080065df 	.word	0x080065df
 80065a0:	08006689 	.word	0x08006689
 80065a4:	08006689 	.word	0x08006689
 80065a8:	08006689 	.word	0x08006689
 80065ac:	08006637 	.word	0x08006637
 80065b0:	08006661 	.word	0x08006661
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065ba:	b2db      	uxtb	r3, r3
 80065bc:	2b03      	cmp	r3, #3
 80065be:	d107      	bne.n	80065d0 <USBD_HID_Setup+0x124>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80065c0:	f107 030a 	add.w	r3, r7, #10
 80065c4:	2202      	movs	r2, #2
 80065c6:	4619      	mov	r1, r3
 80065c8:	6878      	ldr	r0, [r7, #4]
 80065ca:	f001 fb8d 	bl	8007ce8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80065ce:	e063      	b.n	8006698 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 80065d0:	6839      	ldr	r1, [r7, #0]
 80065d2:	6878      	ldr	r0, [r7, #4]
 80065d4:	f001 fb17 	bl	8007c06 <USBD_CtlError>
            ret = USBD_FAIL;
 80065d8:	2303      	movs	r3, #3
 80065da:	75fb      	strb	r3, [r7, #23]
          break;
 80065dc:	e05c      	b.n	8006698 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	885b      	ldrh	r3, [r3, #2]
 80065e2:	0a1b      	lsrs	r3, r3, #8
 80065e4:	b29b      	uxth	r3, r3
 80065e6:	2b22      	cmp	r3, #34	; 0x22
 80065e8:	d108      	bne.n	80065fc <USBD_HID_Setup+0x150>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	88db      	ldrh	r3, [r3, #6]
 80065ee:	2b4a      	cmp	r3, #74	; 0x4a
 80065f0:	bf28      	it	cs
 80065f2:	234a      	movcs	r3, #74	; 0x4a
 80065f4:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 80065f6:	4b2f      	ldr	r3, [pc, #188]	; (80066b4 <USBD_HID_Setup+0x208>)
 80065f8:	613b      	str	r3, [r7, #16]
 80065fa:	e015      	b.n	8006628 <USBD_HID_Setup+0x17c>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	885b      	ldrh	r3, [r3, #2]
 8006600:	0a1b      	lsrs	r3, r3, #8
 8006602:	b29b      	uxth	r3, r3
 8006604:	2b21      	cmp	r3, #33	; 0x21
 8006606:	d108      	bne.n	800661a <USBD_HID_Setup+0x16e>
          {
            pbuf = USBD_HID_Desc;
 8006608:	4b2b      	ldr	r3, [pc, #172]	; (80066b8 <USBD_HID_Setup+0x20c>)
 800660a:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	88db      	ldrh	r3, [r3, #6]
 8006610:	2b09      	cmp	r3, #9
 8006612:	bf28      	it	cs
 8006614:	2309      	movcs	r3, #9
 8006616:	82bb      	strh	r3, [r7, #20]
 8006618:	e006      	b.n	8006628 <USBD_HID_Setup+0x17c>
          }
          else
          {
            USBD_CtlError(pdev, req);
 800661a:	6839      	ldr	r1, [r7, #0]
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	f001 faf2 	bl	8007c06 <USBD_CtlError>
            ret = USBD_FAIL;
 8006622:	2303      	movs	r3, #3
 8006624:	75fb      	strb	r3, [r7, #23]
            break;
 8006626:	e037      	b.n	8006698 <USBD_HID_Setup+0x1ec>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8006628:	8abb      	ldrh	r3, [r7, #20]
 800662a:	461a      	mov	r2, r3
 800662c:	6939      	ldr	r1, [r7, #16]
 800662e:	6878      	ldr	r0, [r7, #4]
 8006630:	f001 fb5a 	bl	8007ce8 <USBD_CtlSendData>
          break;
 8006634:	e030      	b.n	8006698 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800663c:	b2db      	uxtb	r3, r3
 800663e:	2b03      	cmp	r3, #3
 8006640:	d107      	bne.n	8006652 <USBD_HID_Setup+0x1a6>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	3308      	adds	r3, #8
 8006646:	2201      	movs	r2, #1
 8006648:	4619      	mov	r1, r3
 800664a:	6878      	ldr	r0, [r7, #4]
 800664c:	f001 fb4c 	bl	8007ce8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006650:	e022      	b.n	8006698 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8006652:	6839      	ldr	r1, [r7, #0]
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	f001 fad6 	bl	8007c06 <USBD_CtlError>
            ret = USBD_FAIL;
 800665a:	2303      	movs	r3, #3
 800665c:	75fb      	strb	r3, [r7, #23]
          break;
 800665e:	e01b      	b.n	8006698 <USBD_HID_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006666:	b2db      	uxtb	r3, r3
 8006668:	2b03      	cmp	r3, #3
 800666a:	d106      	bne.n	800667a <USBD_HID_Setup+0x1ce>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	885b      	ldrh	r3, [r3, #2]
 8006670:	b2db      	uxtb	r3, r3
 8006672:	461a      	mov	r2, r3
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006678:	e00e      	b.n	8006698 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 800667a:	6839      	ldr	r1, [r7, #0]
 800667c:	6878      	ldr	r0, [r7, #4]
 800667e:	f001 fac2 	bl	8007c06 <USBD_CtlError>
            ret = USBD_FAIL;
 8006682:	2303      	movs	r3, #3
 8006684:	75fb      	strb	r3, [r7, #23]
          break;
 8006686:	e007      	b.n	8006698 <USBD_HID_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006688:	6839      	ldr	r1, [r7, #0]
 800668a:	6878      	ldr	r0, [r7, #4]
 800668c:	f001 fabb 	bl	8007c06 <USBD_CtlError>
          ret = USBD_FAIL;
 8006690:	2303      	movs	r3, #3
 8006692:	75fb      	strb	r3, [r7, #23]
          break;
 8006694:	e000      	b.n	8006698 <USBD_HID_Setup+0x1ec>
          break;
 8006696:	bf00      	nop
      }
      break;
 8006698:	e006      	b.n	80066a8 <USBD_HID_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 800669a:	6839      	ldr	r1, [r7, #0]
 800669c:	6878      	ldr	r0, [r7, #4]
 800669e:	f001 fab2 	bl	8007c06 <USBD_CtlError>
      ret = USBD_FAIL;
 80066a2:	2303      	movs	r3, #3
 80066a4:	75fb      	strb	r3, [r7, #23]
      break;
 80066a6:	bf00      	nop
  }

  return (uint8_t)ret;
 80066a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80066aa:	4618      	mov	r0, r3
 80066ac:	3718      	adds	r7, #24
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bd80      	pop	{r7, pc}
 80066b2:	bf00      	nop
 80066b4:	20000080 	.word	0x20000080
 80066b8:	20000068 	.word	0x20000068

080066bc <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b084      	sub	sp, #16
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 80066c4:	2181      	movs	r1, #129	; 0x81
 80066c6:	4809      	ldr	r0, [pc, #36]	; (80066ec <USBD_HID_GetFSCfgDesc+0x30>)
 80066c8:	f000 fc3b 	bl	8006f42 <USBD_GetEpDesc>
 80066cc:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d002      	beq.n	80066da <USBD_HID_GetFSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	220a      	movs	r2, #10
 80066d8:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2222      	movs	r2, #34	; 0x22
 80066de:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 80066e0:	4b02      	ldr	r3, [pc, #8]	; (80066ec <USBD_HID_GetFSCfgDesc+0x30>)
}
 80066e2:	4618      	mov	r0, r3
 80066e4:	3710      	adds	r7, #16
 80066e6:	46bd      	mov	sp, r7
 80066e8:	bd80      	pop	{r7, pc}
 80066ea:	bf00      	nop
 80066ec:	20000044 	.word	0x20000044

080066f0 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b084      	sub	sp, #16
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 80066f8:	2181      	movs	r1, #129	; 0x81
 80066fa:	4809      	ldr	r0, [pc, #36]	; (8006720 <USBD_HID_GetHSCfgDesc+0x30>)
 80066fc:	f000 fc21 	bl	8006f42 <USBD_GetEpDesc>
 8006700:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d002      	beq.n	800670e <USBD_HID_GetHSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_HS_BINTERVAL;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	2207      	movs	r2, #7
 800670c:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2222      	movs	r2, #34	; 0x22
 8006712:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8006714:	4b02      	ldr	r3, [pc, #8]	; (8006720 <USBD_HID_GetHSCfgDesc+0x30>)
}
 8006716:	4618      	mov	r0, r3
 8006718:	3710      	adds	r7, #16
 800671a:	46bd      	mov	sp, r7
 800671c:	bd80      	pop	{r7, pc}
 800671e:	bf00      	nop
 8006720:	20000044 	.word	0x20000044

08006724 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b084      	sub	sp, #16
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 800672c:	2181      	movs	r1, #129	; 0x81
 800672e:	4809      	ldr	r0, [pc, #36]	; (8006754 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
 8006730:	f000 fc07 	bl	8006f42 <USBD_GetEpDesc>
 8006734:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d002      	beq.n	8006742 <USBD_HID_GetOtherSpeedCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	220a      	movs	r2, #10
 8006740:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2222      	movs	r2, #34	; 0x22
 8006746:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8006748:	4b02      	ldr	r3, [pc, #8]	; (8006754 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
}
 800674a:	4618      	mov	r0, r3
 800674c:	3710      	adds	r7, #16
 800674e:	46bd      	mov	sp, r7
 8006750:	bd80      	pop	{r7, pc}
 8006752:	bf00      	nop
 8006754:	20000044 	.word	0x20000044

08006758 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006758:	b480      	push	{r7}
 800675a:	b083      	sub	sp, #12
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
 8006760:	460b      	mov	r3, r1
 8006762:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = USBD_HID_IDLE;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	32b0      	adds	r2, #176	; 0xb0
 800676e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006772:	2200      	movs	r2, #0
 8006774:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8006776:	2300      	movs	r3, #0
}
 8006778:	4618      	mov	r0, r3
 800677a:	370c      	adds	r7, #12
 800677c:	46bd      	mov	sp, r7
 800677e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006782:	4770      	bx	lr

08006784 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8006784:	b480      	push	{r7}
 8006786:	b083      	sub	sp, #12
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	220a      	movs	r2, #10
 8006790:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 8006792:	4b03      	ldr	r3, [pc, #12]	; (80067a0 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8006794:	4618      	mov	r0, r3
 8006796:	370c      	adds	r7, #12
 8006798:	46bd      	mov	sp, r7
 800679a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679e:	4770      	bx	lr
 80067a0:	20000074 	.word	0x20000074

080067a4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b086      	sub	sp, #24
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	60f8      	str	r0, [r7, #12]
 80067ac:	60b9      	str	r1, [r7, #8]
 80067ae:	4613      	mov	r3, r2
 80067b0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d101      	bne.n	80067bc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80067b8:	2303      	movs	r3, #3
 80067ba:	e01f      	b.n	80067fc <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	2200      	movs	r2, #0
 80067c0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	2200      	movs	r2, #0
 80067c8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	2200      	movs	r2, #0
 80067d0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d003      	beq.n	80067e2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	68ba      	ldr	r2, [r7, #8]
 80067de:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	2201      	movs	r2, #1
 80067e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	79fa      	ldrb	r2, [r7, #7]
 80067ee:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80067f0:	68f8      	ldr	r0, [r7, #12]
 80067f2:	f004 fb51 	bl	800ae98 <USBD_LL_Init>
 80067f6:	4603      	mov	r3, r0
 80067f8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80067fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80067fc:	4618      	mov	r0, r3
 80067fe:	3718      	adds	r7, #24
 8006800:	46bd      	mov	sp, r7
 8006802:	bd80      	pop	{r7, pc}

08006804 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b084      	sub	sp, #16
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
 800680c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800680e:	2300      	movs	r3, #0
 8006810:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d101      	bne.n	800681c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006818:	2303      	movs	r3, #3
 800681a:	e025      	b.n	8006868 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	683a      	ldr	r2, [r7, #0]
 8006820:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	32ae      	adds	r2, #174	; 0xae
 800682e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006834:	2b00      	cmp	r3, #0
 8006836:	d00f      	beq.n	8006858 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	32ae      	adds	r2, #174	; 0xae
 8006842:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006848:	f107 020e 	add.w	r2, r7, #14
 800684c:	4610      	mov	r0, r2
 800684e:	4798      	blx	r3
 8006850:	4602      	mov	r2, r0
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800685e:	1c5a      	adds	r2, r3, #1
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8006866:	2300      	movs	r3, #0
}
 8006868:	4618      	mov	r0, r3
 800686a:	3710      	adds	r7, #16
 800686c:	46bd      	mov	sp, r7
 800686e:	bd80      	pop	{r7, pc}

08006870 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b082      	sub	sp, #8
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006878:	6878      	ldr	r0, [r7, #4]
 800687a:	f004 fb59 	bl	800af30 <USBD_LL_Start>
 800687e:	4603      	mov	r3, r0
}
 8006880:	4618      	mov	r0, r3
 8006882:	3708      	adds	r7, #8
 8006884:	46bd      	mov	sp, r7
 8006886:	bd80      	pop	{r7, pc}

08006888 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006888:	b480      	push	{r7}
 800688a:	b083      	sub	sp, #12
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006890:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006892:	4618      	mov	r0, r3
 8006894:	370c      	adds	r7, #12
 8006896:	46bd      	mov	sp, r7
 8006898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689c:	4770      	bx	lr

0800689e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800689e:	b580      	push	{r7, lr}
 80068a0:	b084      	sub	sp, #16
 80068a2:	af00      	add	r7, sp, #0
 80068a4:	6078      	str	r0, [r7, #4]
 80068a6:	460b      	mov	r3, r1
 80068a8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80068aa:	2300      	movs	r3, #0
 80068ac:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d009      	beq.n	80068cc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	78fa      	ldrb	r2, [r7, #3]
 80068c2:	4611      	mov	r1, r2
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	4798      	blx	r3
 80068c8:	4603      	mov	r3, r0
 80068ca:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80068cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80068ce:	4618      	mov	r0, r3
 80068d0:	3710      	adds	r7, #16
 80068d2:	46bd      	mov	sp, r7
 80068d4:	bd80      	pop	{r7, pc}

080068d6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80068d6:	b580      	push	{r7, lr}
 80068d8:	b084      	sub	sp, #16
 80068da:	af00      	add	r7, sp, #0
 80068dc:	6078      	str	r0, [r7, #4]
 80068de:	460b      	mov	r3, r1
 80068e0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80068e2:	2300      	movs	r3, #0
 80068e4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068ec:	685b      	ldr	r3, [r3, #4]
 80068ee:	78fa      	ldrb	r2, [r7, #3]
 80068f0:	4611      	mov	r1, r2
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	4798      	blx	r3
 80068f6:	4603      	mov	r3, r0
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d001      	beq.n	8006900 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80068fc:	2303      	movs	r3, #3
 80068fe:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006900:	7bfb      	ldrb	r3, [r7, #15]
}
 8006902:	4618      	mov	r0, r3
 8006904:	3710      	adds	r7, #16
 8006906:	46bd      	mov	sp, r7
 8006908:	bd80      	pop	{r7, pc}

0800690a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800690a:	b580      	push	{r7, lr}
 800690c:	b084      	sub	sp, #16
 800690e:	af00      	add	r7, sp, #0
 8006910:	6078      	str	r0, [r7, #4]
 8006912:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800691a:	6839      	ldr	r1, [r7, #0]
 800691c:	4618      	mov	r0, r3
 800691e:	f001 f938 	bl	8007b92 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2201      	movs	r2, #1
 8006926:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006930:	461a      	mov	r2, r3
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800693e:	f003 031f 	and.w	r3, r3, #31
 8006942:	2b02      	cmp	r3, #2
 8006944:	d01a      	beq.n	800697c <USBD_LL_SetupStage+0x72>
 8006946:	2b02      	cmp	r3, #2
 8006948:	d822      	bhi.n	8006990 <USBD_LL_SetupStage+0x86>
 800694a:	2b00      	cmp	r3, #0
 800694c:	d002      	beq.n	8006954 <USBD_LL_SetupStage+0x4a>
 800694e:	2b01      	cmp	r3, #1
 8006950:	d00a      	beq.n	8006968 <USBD_LL_SetupStage+0x5e>
 8006952:	e01d      	b.n	8006990 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800695a:	4619      	mov	r1, r3
 800695c:	6878      	ldr	r0, [r7, #4]
 800695e:	f000 fb65 	bl	800702c <USBD_StdDevReq>
 8006962:	4603      	mov	r3, r0
 8006964:	73fb      	strb	r3, [r7, #15]
      break;
 8006966:	e020      	b.n	80069aa <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800696e:	4619      	mov	r1, r3
 8006970:	6878      	ldr	r0, [r7, #4]
 8006972:	f000 fbcd 	bl	8007110 <USBD_StdItfReq>
 8006976:	4603      	mov	r3, r0
 8006978:	73fb      	strb	r3, [r7, #15]
      break;
 800697a:	e016      	b.n	80069aa <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006982:	4619      	mov	r1, r3
 8006984:	6878      	ldr	r0, [r7, #4]
 8006986:	f000 fc2f 	bl	80071e8 <USBD_StdEPReq>
 800698a:	4603      	mov	r3, r0
 800698c:	73fb      	strb	r3, [r7, #15]
      break;
 800698e:	e00c      	b.n	80069aa <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006996:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800699a:	b2db      	uxtb	r3, r3
 800699c:	4619      	mov	r1, r3
 800699e:	6878      	ldr	r0, [r7, #4]
 80069a0:	f004 fb6c 	bl	800b07c <USBD_LL_StallEP>
 80069a4:	4603      	mov	r3, r0
 80069a6:	73fb      	strb	r3, [r7, #15]
      break;
 80069a8:	bf00      	nop
  }

  return ret;
 80069aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80069ac:	4618      	mov	r0, r3
 80069ae:	3710      	adds	r7, #16
 80069b0:	46bd      	mov	sp, r7
 80069b2:	bd80      	pop	{r7, pc}

080069b4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b086      	sub	sp, #24
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	60f8      	str	r0, [r7, #12]
 80069bc:	460b      	mov	r3, r1
 80069be:	607a      	str	r2, [r7, #4]
 80069c0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80069c2:	2300      	movs	r3, #0
 80069c4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80069c6:	7afb      	ldrb	r3, [r7, #11]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d16e      	bne.n	8006aaa <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80069d2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80069da:	2b03      	cmp	r3, #3
 80069dc:	f040 8098 	bne.w	8006b10 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80069e0:	693b      	ldr	r3, [r7, #16]
 80069e2:	689a      	ldr	r2, [r3, #8]
 80069e4:	693b      	ldr	r3, [r7, #16]
 80069e6:	68db      	ldr	r3, [r3, #12]
 80069e8:	429a      	cmp	r2, r3
 80069ea:	d913      	bls.n	8006a14 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80069ec:	693b      	ldr	r3, [r7, #16]
 80069ee:	689a      	ldr	r2, [r3, #8]
 80069f0:	693b      	ldr	r3, [r7, #16]
 80069f2:	68db      	ldr	r3, [r3, #12]
 80069f4:	1ad2      	subs	r2, r2, r3
 80069f6:	693b      	ldr	r3, [r7, #16]
 80069f8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80069fa:	693b      	ldr	r3, [r7, #16]
 80069fc:	68da      	ldr	r2, [r3, #12]
 80069fe:	693b      	ldr	r3, [r7, #16]
 8006a00:	689b      	ldr	r3, [r3, #8]
 8006a02:	4293      	cmp	r3, r2
 8006a04:	bf28      	it	cs
 8006a06:	4613      	movcs	r3, r2
 8006a08:	461a      	mov	r2, r3
 8006a0a:	6879      	ldr	r1, [r7, #4]
 8006a0c:	68f8      	ldr	r0, [r7, #12]
 8006a0e:	f001 f997 	bl	8007d40 <USBD_CtlContinueRx>
 8006a12:	e07d      	b.n	8006b10 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006a1a:	f003 031f 	and.w	r3, r3, #31
 8006a1e:	2b02      	cmp	r3, #2
 8006a20:	d014      	beq.n	8006a4c <USBD_LL_DataOutStage+0x98>
 8006a22:	2b02      	cmp	r3, #2
 8006a24:	d81d      	bhi.n	8006a62 <USBD_LL_DataOutStage+0xae>
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d002      	beq.n	8006a30 <USBD_LL_DataOutStage+0x7c>
 8006a2a:	2b01      	cmp	r3, #1
 8006a2c:	d003      	beq.n	8006a36 <USBD_LL_DataOutStage+0x82>
 8006a2e:	e018      	b.n	8006a62 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006a30:	2300      	movs	r3, #0
 8006a32:	75bb      	strb	r3, [r7, #22]
            break;
 8006a34:	e018      	b.n	8006a68 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006a3c:	b2db      	uxtb	r3, r3
 8006a3e:	4619      	mov	r1, r3
 8006a40:	68f8      	ldr	r0, [r7, #12]
 8006a42:	f000 fa64 	bl	8006f0e <USBD_CoreFindIF>
 8006a46:	4603      	mov	r3, r0
 8006a48:	75bb      	strb	r3, [r7, #22]
            break;
 8006a4a:	e00d      	b.n	8006a68 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006a52:	b2db      	uxtb	r3, r3
 8006a54:	4619      	mov	r1, r3
 8006a56:	68f8      	ldr	r0, [r7, #12]
 8006a58:	f000 fa66 	bl	8006f28 <USBD_CoreFindEP>
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	75bb      	strb	r3, [r7, #22]
            break;
 8006a60:	e002      	b.n	8006a68 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006a62:	2300      	movs	r3, #0
 8006a64:	75bb      	strb	r3, [r7, #22]
            break;
 8006a66:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006a68:	7dbb      	ldrb	r3, [r7, #22]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d119      	bne.n	8006aa2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a74:	b2db      	uxtb	r3, r3
 8006a76:	2b03      	cmp	r3, #3
 8006a78:	d113      	bne.n	8006aa2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006a7a:	7dba      	ldrb	r2, [r7, #22]
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	32ae      	adds	r2, #174	; 0xae
 8006a80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a84:	691b      	ldr	r3, [r3, #16]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d00b      	beq.n	8006aa2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006a8a:	7dba      	ldrb	r2, [r7, #22]
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006a92:	7dba      	ldrb	r2, [r7, #22]
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	32ae      	adds	r2, #174	; 0xae
 8006a98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a9c:	691b      	ldr	r3, [r3, #16]
 8006a9e:	68f8      	ldr	r0, [r7, #12]
 8006aa0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006aa2:	68f8      	ldr	r0, [r7, #12]
 8006aa4:	f001 f95d 	bl	8007d62 <USBD_CtlSendStatus>
 8006aa8:	e032      	b.n	8006b10 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006aaa:	7afb      	ldrb	r3, [r7, #11]
 8006aac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ab0:	b2db      	uxtb	r3, r3
 8006ab2:	4619      	mov	r1, r3
 8006ab4:	68f8      	ldr	r0, [r7, #12]
 8006ab6:	f000 fa37 	bl	8006f28 <USBD_CoreFindEP>
 8006aba:	4603      	mov	r3, r0
 8006abc:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006abe:	7dbb      	ldrb	r3, [r7, #22]
 8006ac0:	2bff      	cmp	r3, #255	; 0xff
 8006ac2:	d025      	beq.n	8006b10 <USBD_LL_DataOutStage+0x15c>
 8006ac4:	7dbb      	ldrb	r3, [r7, #22]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d122      	bne.n	8006b10 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ad0:	b2db      	uxtb	r3, r3
 8006ad2:	2b03      	cmp	r3, #3
 8006ad4:	d117      	bne.n	8006b06 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006ad6:	7dba      	ldrb	r2, [r7, #22]
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	32ae      	adds	r2, #174	; 0xae
 8006adc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ae0:	699b      	ldr	r3, [r3, #24]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d00f      	beq.n	8006b06 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006ae6:	7dba      	ldrb	r2, [r7, #22]
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006aee:	7dba      	ldrb	r2, [r7, #22]
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	32ae      	adds	r2, #174	; 0xae
 8006af4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006af8:	699b      	ldr	r3, [r3, #24]
 8006afa:	7afa      	ldrb	r2, [r7, #11]
 8006afc:	4611      	mov	r1, r2
 8006afe:	68f8      	ldr	r0, [r7, #12]
 8006b00:	4798      	blx	r3
 8006b02:	4603      	mov	r3, r0
 8006b04:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006b06:	7dfb      	ldrb	r3, [r7, #23]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d001      	beq.n	8006b10 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006b0c:	7dfb      	ldrb	r3, [r7, #23]
 8006b0e:	e000      	b.n	8006b12 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006b10:	2300      	movs	r3, #0
}
 8006b12:	4618      	mov	r0, r3
 8006b14:	3718      	adds	r7, #24
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bd80      	pop	{r7, pc}

08006b1a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006b1a:	b580      	push	{r7, lr}
 8006b1c:	b086      	sub	sp, #24
 8006b1e:	af00      	add	r7, sp, #0
 8006b20:	60f8      	str	r0, [r7, #12]
 8006b22:	460b      	mov	r3, r1
 8006b24:	607a      	str	r2, [r7, #4]
 8006b26:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006b28:	7afb      	ldrb	r3, [r7, #11]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d16f      	bne.n	8006c0e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	3314      	adds	r3, #20
 8006b32:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006b3a:	2b02      	cmp	r3, #2
 8006b3c:	d15a      	bne.n	8006bf4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006b3e:	693b      	ldr	r3, [r7, #16]
 8006b40:	689a      	ldr	r2, [r3, #8]
 8006b42:	693b      	ldr	r3, [r7, #16]
 8006b44:	68db      	ldr	r3, [r3, #12]
 8006b46:	429a      	cmp	r2, r3
 8006b48:	d914      	bls.n	8006b74 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006b4a:	693b      	ldr	r3, [r7, #16]
 8006b4c:	689a      	ldr	r2, [r3, #8]
 8006b4e:	693b      	ldr	r3, [r7, #16]
 8006b50:	68db      	ldr	r3, [r3, #12]
 8006b52:	1ad2      	subs	r2, r2, r3
 8006b54:	693b      	ldr	r3, [r7, #16]
 8006b56:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006b58:	693b      	ldr	r3, [r7, #16]
 8006b5a:	689b      	ldr	r3, [r3, #8]
 8006b5c:	461a      	mov	r2, r3
 8006b5e:	6879      	ldr	r1, [r7, #4]
 8006b60:	68f8      	ldr	r0, [r7, #12]
 8006b62:	f001 f8dc 	bl	8007d1e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006b66:	2300      	movs	r3, #0
 8006b68:	2200      	movs	r2, #0
 8006b6a:	2100      	movs	r1, #0
 8006b6c:	68f8      	ldr	r0, [r7, #12]
 8006b6e:	f004 fb8b 	bl	800b288 <USBD_LL_PrepareReceive>
 8006b72:	e03f      	b.n	8006bf4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006b74:	693b      	ldr	r3, [r7, #16]
 8006b76:	68da      	ldr	r2, [r3, #12]
 8006b78:	693b      	ldr	r3, [r7, #16]
 8006b7a:	689b      	ldr	r3, [r3, #8]
 8006b7c:	429a      	cmp	r2, r3
 8006b7e:	d11c      	bne.n	8006bba <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006b80:	693b      	ldr	r3, [r7, #16]
 8006b82:	685a      	ldr	r2, [r3, #4]
 8006b84:	693b      	ldr	r3, [r7, #16]
 8006b86:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006b88:	429a      	cmp	r2, r3
 8006b8a:	d316      	bcc.n	8006bba <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006b8c:	693b      	ldr	r3, [r7, #16]
 8006b8e:	685a      	ldr	r2, [r3, #4]
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006b96:	429a      	cmp	r2, r3
 8006b98:	d20f      	bcs.n	8006bba <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	2100      	movs	r1, #0
 8006b9e:	68f8      	ldr	r0, [r7, #12]
 8006ba0:	f001 f8bd 	bl	8007d1e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006bac:	2300      	movs	r3, #0
 8006bae:	2200      	movs	r2, #0
 8006bb0:	2100      	movs	r1, #0
 8006bb2:	68f8      	ldr	r0, [r7, #12]
 8006bb4:	f004 fb68 	bl	800b288 <USBD_LL_PrepareReceive>
 8006bb8:	e01c      	b.n	8006bf4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bc0:	b2db      	uxtb	r3, r3
 8006bc2:	2b03      	cmp	r3, #3
 8006bc4:	d10f      	bne.n	8006be6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bcc:	68db      	ldr	r3, [r3, #12]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d009      	beq.n	8006be6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006be0:	68db      	ldr	r3, [r3, #12]
 8006be2:	68f8      	ldr	r0, [r7, #12]
 8006be4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006be6:	2180      	movs	r1, #128	; 0x80
 8006be8:	68f8      	ldr	r0, [r7, #12]
 8006bea:	f004 fa47 	bl	800b07c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006bee:	68f8      	ldr	r0, [r7, #12]
 8006bf0:	f001 f8ca 	bl	8007d88 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d03a      	beq.n	8006c74 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006bfe:	68f8      	ldr	r0, [r7, #12]
 8006c00:	f7ff fe42 	bl	8006888 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	2200      	movs	r2, #0
 8006c08:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006c0c:	e032      	b.n	8006c74 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006c0e:	7afb      	ldrb	r3, [r7, #11]
 8006c10:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006c14:	b2db      	uxtb	r3, r3
 8006c16:	4619      	mov	r1, r3
 8006c18:	68f8      	ldr	r0, [r7, #12]
 8006c1a:	f000 f985 	bl	8006f28 <USBD_CoreFindEP>
 8006c1e:	4603      	mov	r3, r0
 8006c20:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006c22:	7dfb      	ldrb	r3, [r7, #23]
 8006c24:	2bff      	cmp	r3, #255	; 0xff
 8006c26:	d025      	beq.n	8006c74 <USBD_LL_DataInStage+0x15a>
 8006c28:	7dfb      	ldrb	r3, [r7, #23]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d122      	bne.n	8006c74 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c34:	b2db      	uxtb	r3, r3
 8006c36:	2b03      	cmp	r3, #3
 8006c38:	d11c      	bne.n	8006c74 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006c3a:	7dfa      	ldrb	r2, [r7, #23]
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	32ae      	adds	r2, #174	; 0xae
 8006c40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c44:	695b      	ldr	r3, [r3, #20]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d014      	beq.n	8006c74 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006c4a:	7dfa      	ldrb	r2, [r7, #23]
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006c52:	7dfa      	ldrb	r2, [r7, #23]
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	32ae      	adds	r2, #174	; 0xae
 8006c58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c5c:	695b      	ldr	r3, [r3, #20]
 8006c5e:	7afa      	ldrb	r2, [r7, #11]
 8006c60:	4611      	mov	r1, r2
 8006c62:	68f8      	ldr	r0, [r7, #12]
 8006c64:	4798      	blx	r3
 8006c66:	4603      	mov	r3, r0
 8006c68:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006c6a:	7dbb      	ldrb	r3, [r7, #22]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d001      	beq.n	8006c74 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006c70:	7dbb      	ldrb	r3, [r7, #22]
 8006c72:	e000      	b.n	8006c76 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006c74:	2300      	movs	r3, #0
}
 8006c76:	4618      	mov	r0, r3
 8006c78:	3718      	adds	r7, #24
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bd80      	pop	{r7, pc}

08006c7e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006c7e:	b580      	push	{r7, lr}
 8006c80:	b084      	sub	sp, #16
 8006c82:	af00      	add	r7, sp, #0
 8006c84:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006c86:	2300      	movs	r3, #0
 8006c88:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2201      	movs	r2, #1
 8006c8e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2200      	movs	r2, #0
 8006c96:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2200      	movs	r2, #0
 8006cac:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d014      	beq.n	8006ce4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cc0:	685b      	ldr	r3, [r3, #4]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d00e      	beq.n	8006ce4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ccc:	685b      	ldr	r3, [r3, #4]
 8006cce:	687a      	ldr	r2, [r7, #4]
 8006cd0:	6852      	ldr	r2, [r2, #4]
 8006cd2:	b2d2      	uxtb	r2, r2
 8006cd4:	4611      	mov	r1, r2
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	4798      	blx	r3
 8006cda:	4603      	mov	r3, r0
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d001      	beq.n	8006ce4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006ce0:	2303      	movs	r3, #3
 8006ce2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006ce4:	2340      	movs	r3, #64	; 0x40
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	2100      	movs	r1, #0
 8006cea:	6878      	ldr	r0, [r7, #4]
 8006cec:	f004 f952 	bl	800af94 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2201      	movs	r2, #1
 8006cf4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2240      	movs	r2, #64	; 0x40
 8006cfc:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006d00:	2340      	movs	r3, #64	; 0x40
 8006d02:	2200      	movs	r2, #0
 8006d04:	2180      	movs	r1, #128	; 0x80
 8006d06:	6878      	ldr	r0, [r7, #4]
 8006d08:	f004 f944 	bl	800af94 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2201      	movs	r2, #1
 8006d10:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2240      	movs	r2, #64	; 0x40
 8006d16:	621a      	str	r2, [r3, #32]

  return ret;
 8006d18:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	3710      	adds	r7, #16
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bd80      	pop	{r7, pc}

08006d22 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006d22:	b480      	push	{r7}
 8006d24:	b083      	sub	sp, #12
 8006d26:	af00      	add	r7, sp, #0
 8006d28:	6078      	str	r0, [r7, #4]
 8006d2a:	460b      	mov	r3, r1
 8006d2c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	78fa      	ldrb	r2, [r7, #3]
 8006d32:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006d34:	2300      	movs	r3, #0
}
 8006d36:	4618      	mov	r0, r3
 8006d38:	370c      	adds	r7, #12
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d40:	4770      	bx	lr

08006d42 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006d42:	b480      	push	{r7}
 8006d44:	b083      	sub	sp, #12
 8006d46:	af00      	add	r7, sp, #0
 8006d48:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d50:	b2db      	uxtb	r3, r3
 8006d52:	2b04      	cmp	r3, #4
 8006d54:	d006      	beq.n	8006d64 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d5c:	b2da      	uxtb	r2, r3
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2204      	movs	r2, #4
 8006d68:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006d6c:	2300      	movs	r3, #0
}
 8006d6e:	4618      	mov	r0, r3
 8006d70:	370c      	adds	r7, #12
 8006d72:	46bd      	mov	sp, r7
 8006d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d78:	4770      	bx	lr

08006d7a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006d7a:	b480      	push	{r7}
 8006d7c:	b083      	sub	sp, #12
 8006d7e:	af00      	add	r7, sp, #0
 8006d80:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d88:	b2db      	uxtb	r3, r3
 8006d8a:	2b04      	cmp	r3, #4
 8006d8c:	d106      	bne.n	8006d9c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006d94:	b2da      	uxtb	r2, r3
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006d9c:	2300      	movs	r3, #0
}
 8006d9e:	4618      	mov	r0, r3
 8006da0:	370c      	adds	r7, #12
 8006da2:	46bd      	mov	sp, r7
 8006da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da8:	4770      	bx	lr

08006daa <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006daa:	b580      	push	{r7, lr}
 8006dac:	b082      	sub	sp, #8
 8006dae:	af00      	add	r7, sp, #0
 8006db0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006db8:	b2db      	uxtb	r3, r3
 8006dba:	2b03      	cmp	r3, #3
 8006dbc:	d110      	bne.n	8006de0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d00b      	beq.n	8006de0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006dce:	69db      	ldr	r3, [r3, #28]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d005      	beq.n	8006de0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006dda:	69db      	ldr	r3, [r3, #28]
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006de0:	2300      	movs	r3, #0
}
 8006de2:	4618      	mov	r0, r3
 8006de4:	3708      	adds	r7, #8
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bd80      	pop	{r7, pc}

08006dea <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006dea:	b580      	push	{r7, lr}
 8006dec:	b082      	sub	sp, #8
 8006dee:	af00      	add	r7, sp, #0
 8006df0:	6078      	str	r0, [r7, #4]
 8006df2:	460b      	mov	r3, r1
 8006df4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	32ae      	adds	r2, #174	; 0xae
 8006e00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d101      	bne.n	8006e0c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006e08:	2303      	movs	r3, #3
 8006e0a:	e01c      	b.n	8006e46 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e12:	b2db      	uxtb	r3, r3
 8006e14:	2b03      	cmp	r3, #3
 8006e16:	d115      	bne.n	8006e44 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	32ae      	adds	r2, #174	; 0xae
 8006e22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e26:	6a1b      	ldr	r3, [r3, #32]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d00b      	beq.n	8006e44 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	32ae      	adds	r2, #174	; 0xae
 8006e36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e3a:	6a1b      	ldr	r3, [r3, #32]
 8006e3c:	78fa      	ldrb	r2, [r7, #3]
 8006e3e:	4611      	mov	r1, r2
 8006e40:	6878      	ldr	r0, [r7, #4]
 8006e42:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006e44:	2300      	movs	r3, #0
}
 8006e46:	4618      	mov	r0, r3
 8006e48:	3708      	adds	r7, #8
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	bd80      	pop	{r7, pc}

08006e4e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006e4e:	b580      	push	{r7, lr}
 8006e50:	b082      	sub	sp, #8
 8006e52:	af00      	add	r7, sp, #0
 8006e54:	6078      	str	r0, [r7, #4]
 8006e56:	460b      	mov	r3, r1
 8006e58:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	32ae      	adds	r2, #174	; 0xae
 8006e64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d101      	bne.n	8006e70 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006e6c:	2303      	movs	r3, #3
 8006e6e:	e01c      	b.n	8006eaa <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e76:	b2db      	uxtb	r3, r3
 8006e78:	2b03      	cmp	r3, #3
 8006e7a:	d115      	bne.n	8006ea8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	32ae      	adds	r2, #174	; 0xae
 8006e86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d00b      	beq.n	8006ea8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	32ae      	adds	r2, #174	; 0xae
 8006e9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ea0:	78fa      	ldrb	r2, [r7, #3]
 8006ea2:	4611      	mov	r1, r2
 8006ea4:	6878      	ldr	r0, [r7, #4]
 8006ea6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006ea8:	2300      	movs	r3, #0
}
 8006eaa:	4618      	mov	r0, r3
 8006eac:	3708      	adds	r7, #8
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	bd80      	pop	{r7, pc}

08006eb2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006eb2:	b480      	push	{r7}
 8006eb4:	b083      	sub	sp, #12
 8006eb6:	af00      	add	r7, sp, #0
 8006eb8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006eba:	2300      	movs	r3, #0
}
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	370c      	adds	r7, #12
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec6:	4770      	bx	lr

08006ec8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b084      	sub	sp, #16
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2201      	movs	r2, #1
 8006ed8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d00e      	beq.n	8006f04 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006eec:	685b      	ldr	r3, [r3, #4]
 8006eee:	687a      	ldr	r2, [r7, #4]
 8006ef0:	6852      	ldr	r2, [r2, #4]
 8006ef2:	b2d2      	uxtb	r2, r2
 8006ef4:	4611      	mov	r1, r2
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	4798      	blx	r3
 8006efa:	4603      	mov	r3, r0
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d001      	beq.n	8006f04 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006f00:	2303      	movs	r3, #3
 8006f02:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006f04:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f06:	4618      	mov	r0, r3
 8006f08:	3710      	adds	r7, #16
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bd80      	pop	{r7, pc}

08006f0e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006f0e:	b480      	push	{r7}
 8006f10:	b083      	sub	sp, #12
 8006f12:	af00      	add	r7, sp, #0
 8006f14:	6078      	str	r0, [r7, #4]
 8006f16:	460b      	mov	r3, r1
 8006f18:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006f1a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	370c      	adds	r7, #12
 8006f20:	46bd      	mov	sp, r7
 8006f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f26:	4770      	bx	lr

08006f28 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006f28:	b480      	push	{r7}
 8006f2a:	b083      	sub	sp, #12
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
 8006f30:	460b      	mov	r3, r1
 8006f32:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006f34:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006f36:	4618      	mov	r0, r3
 8006f38:	370c      	adds	r7, #12
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f40:	4770      	bx	lr

08006f42 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8006f42:	b580      	push	{r7, lr}
 8006f44:	b086      	sub	sp, #24
 8006f46:	af00      	add	r7, sp, #0
 8006f48:	6078      	str	r0, [r7, #4]
 8006f4a:	460b      	mov	r3, r1
 8006f4c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006f56:	2300      	movs	r3, #0
 8006f58:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	885b      	ldrh	r3, [r3, #2]
 8006f5e:	b29a      	uxth	r2, r3
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	781b      	ldrb	r3, [r3, #0]
 8006f64:	b29b      	uxth	r3, r3
 8006f66:	429a      	cmp	r2, r3
 8006f68:	d920      	bls.n	8006fac <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	781b      	ldrb	r3, [r3, #0]
 8006f6e:	b29b      	uxth	r3, r3
 8006f70:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006f72:	e013      	b.n	8006f9c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006f74:	f107 030a 	add.w	r3, r7, #10
 8006f78:	4619      	mov	r1, r3
 8006f7a:	6978      	ldr	r0, [r7, #20]
 8006f7c:	f000 f81b 	bl	8006fb6 <USBD_GetNextDesc>
 8006f80:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006f82:	697b      	ldr	r3, [r7, #20]
 8006f84:	785b      	ldrb	r3, [r3, #1]
 8006f86:	2b05      	cmp	r3, #5
 8006f88:	d108      	bne.n	8006f9c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006f8a:	697b      	ldr	r3, [r7, #20]
 8006f8c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006f8e:	693b      	ldr	r3, [r7, #16]
 8006f90:	789b      	ldrb	r3, [r3, #2]
 8006f92:	78fa      	ldrb	r2, [r7, #3]
 8006f94:	429a      	cmp	r2, r3
 8006f96:	d008      	beq.n	8006faa <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006f98:	2300      	movs	r3, #0
 8006f9a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	885b      	ldrh	r3, [r3, #2]
 8006fa0:	b29a      	uxth	r2, r3
 8006fa2:	897b      	ldrh	r3, [r7, #10]
 8006fa4:	429a      	cmp	r2, r3
 8006fa6:	d8e5      	bhi.n	8006f74 <USBD_GetEpDesc+0x32>
 8006fa8:	e000      	b.n	8006fac <USBD_GetEpDesc+0x6a>
          break;
 8006faa:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006fac:	693b      	ldr	r3, [r7, #16]
}
 8006fae:	4618      	mov	r0, r3
 8006fb0:	3718      	adds	r7, #24
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bd80      	pop	{r7, pc}

08006fb6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006fb6:	b480      	push	{r7}
 8006fb8:	b085      	sub	sp, #20
 8006fba:	af00      	add	r7, sp, #0
 8006fbc:	6078      	str	r0, [r7, #4]
 8006fbe:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	881a      	ldrh	r2, [r3, #0]
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	781b      	ldrb	r3, [r3, #0]
 8006fcc:	b29b      	uxth	r3, r3
 8006fce:	4413      	add	r3, r2
 8006fd0:	b29a      	uxth	r2, r3
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	781b      	ldrb	r3, [r3, #0]
 8006fda:	461a      	mov	r2, r3
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	4413      	add	r3, r2
 8006fe0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006fe2:	68fb      	ldr	r3, [r7, #12]
}
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	3714      	adds	r7, #20
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fee:	4770      	bx	lr

08006ff0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006ff0:	b480      	push	{r7}
 8006ff2:	b087      	sub	sp, #28
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006ffc:	697b      	ldr	r3, [r7, #20]
 8006ffe:	781b      	ldrb	r3, [r3, #0]
 8007000:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007002:	697b      	ldr	r3, [r7, #20]
 8007004:	3301      	adds	r3, #1
 8007006:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007008:	697b      	ldr	r3, [r7, #20]
 800700a:	781b      	ldrb	r3, [r3, #0]
 800700c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800700e:	8a3b      	ldrh	r3, [r7, #16]
 8007010:	021b      	lsls	r3, r3, #8
 8007012:	b21a      	sxth	r2, r3
 8007014:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007018:	4313      	orrs	r3, r2
 800701a:	b21b      	sxth	r3, r3
 800701c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800701e:	89fb      	ldrh	r3, [r7, #14]
}
 8007020:	4618      	mov	r0, r3
 8007022:	371c      	adds	r7, #28
 8007024:	46bd      	mov	sp, r7
 8007026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702a:	4770      	bx	lr

0800702c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b084      	sub	sp, #16
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
 8007034:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007036:	2300      	movs	r3, #0
 8007038:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	781b      	ldrb	r3, [r3, #0]
 800703e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007042:	2b40      	cmp	r3, #64	; 0x40
 8007044:	d005      	beq.n	8007052 <USBD_StdDevReq+0x26>
 8007046:	2b40      	cmp	r3, #64	; 0x40
 8007048:	d857      	bhi.n	80070fa <USBD_StdDevReq+0xce>
 800704a:	2b00      	cmp	r3, #0
 800704c:	d00f      	beq.n	800706e <USBD_StdDevReq+0x42>
 800704e:	2b20      	cmp	r3, #32
 8007050:	d153      	bne.n	80070fa <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	32ae      	adds	r2, #174	; 0xae
 800705c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007060:	689b      	ldr	r3, [r3, #8]
 8007062:	6839      	ldr	r1, [r7, #0]
 8007064:	6878      	ldr	r0, [r7, #4]
 8007066:	4798      	blx	r3
 8007068:	4603      	mov	r3, r0
 800706a:	73fb      	strb	r3, [r7, #15]
      break;
 800706c:	e04a      	b.n	8007104 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	785b      	ldrb	r3, [r3, #1]
 8007072:	2b09      	cmp	r3, #9
 8007074:	d83b      	bhi.n	80070ee <USBD_StdDevReq+0xc2>
 8007076:	a201      	add	r2, pc, #4	; (adr r2, 800707c <USBD_StdDevReq+0x50>)
 8007078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800707c:	080070d1 	.word	0x080070d1
 8007080:	080070e5 	.word	0x080070e5
 8007084:	080070ef 	.word	0x080070ef
 8007088:	080070db 	.word	0x080070db
 800708c:	080070ef 	.word	0x080070ef
 8007090:	080070af 	.word	0x080070af
 8007094:	080070a5 	.word	0x080070a5
 8007098:	080070ef 	.word	0x080070ef
 800709c:	080070c7 	.word	0x080070c7
 80070a0:	080070b9 	.word	0x080070b9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80070a4:	6839      	ldr	r1, [r7, #0]
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	f000 fa3c 	bl	8007524 <USBD_GetDescriptor>
          break;
 80070ac:	e024      	b.n	80070f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80070ae:	6839      	ldr	r1, [r7, #0]
 80070b0:	6878      	ldr	r0, [r7, #4]
 80070b2:	f000 fbcb 	bl	800784c <USBD_SetAddress>
          break;
 80070b6:	e01f      	b.n	80070f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80070b8:	6839      	ldr	r1, [r7, #0]
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	f000 fc0a 	bl	80078d4 <USBD_SetConfig>
 80070c0:	4603      	mov	r3, r0
 80070c2:	73fb      	strb	r3, [r7, #15]
          break;
 80070c4:	e018      	b.n	80070f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80070c6:	6839      	ldr	r1, [r7, #0]
 80070c8:	6878      	ldr	r0, [r7, #4]
 80070ca:	f000 fcad 	bl	8007a28 <USBD_GetConfig>
          break;
 80070ce:	e013      	b.n	80070f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80070d0:	6839      	ldr	r1, [r7, #0]
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	f000 fcde 	bl	8007a94 <USBD_GetStatus>
          break;
 80070d8:	e00e      	b.n	80070f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80070da:	6839      	ldr	r1, [r7, #0]
 80070dc:	6878      	ldr	r0, [r7, #4]
 80070de:	f000 fd0d 	bl	8007afc <USBD_SetFeature>
          break;
 80070e2:	e009      	b.n	80070f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80070e4:	6839      	ldr	r1, [r7, #0]
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	f000 fd31 	bl	8007b4e <USBD_ClrFeature>
          break;
 80070ec:	e004      	b.n	80070f8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80070ee:	6839      	ldr	r1, [r7, #0]
 80070f0:	6878      	ldr	r0, [r7, #4]
 80070f2:	f000 fd88 	bl	8007c06 <USBD_CtlError>
          break;
 80070f6:	bf00      	nop
      }
      break;
 80070f8:	e004      	b.n	8007104 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80070fa:	6839      	ldr	r1, [r7, #0]
 80070fc:	6878      	ldr	r0, [r7, #4]
 80070fe:	f000 fd82 	bl	8007c06 <USBD_CtlError>
      break;
 8007102:	bf00      	nop
  }

  return ret;
 8007104:	7bfb      	ldrb	r3, [r7, #15]
}
 8007106:	4618      	mov	r0, r3
 8007108:	3710      	adds	r7, #16
 800710a:	46bd      	mov	sp, r7
 800710c:	bd80      	pop	{r7, pc}
 800710e:	bf00      	nop

08007110 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b084      	sub	sp, #16
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
 8007118:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800711a:	2300      	movs	r3, #0
 800711c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	781b      	ldrb	r3, [r3, #0]
 8007122:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007126:	2b40      	cmp	r3, #64	; 0x40
 8007128:	d005      	beq.n	8007136 <USBD_StdItfReq+0x26>
 800712a:	2b40      	cmp	r3, #64	; 0x40
 800712c:	d852      	bhi.n	80071d4 <USBD_StdItfReq+0xc4>
 800712e:	2b00      	cmp	r3, #0
 8007130:	d001      	beq.n	8007136 <USBD_StdItfReq+0x26>
 8007132:	2b20      	cmp	r3, #32
 8007134:	d14e      	bne.n	80071d4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800713c:	b2db      	uxtb	r3, r3
 800713e:	3b01      	subs	r3, #1
 8007140:	2b02      	cmp	r3, #2
 8007142:	d840      	bhi.n	80071c6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	889b      	ldrh	r3, [r3, #4]
 8007148:	b2db      	uxtb	r3, r3
 800714a:	2b01      	cmp	r3, #1
 800714c:	d836      	bhi.n	80071bc <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	889b      	ldrh	r3, [r3, #4]
 8007152:	b2db      	uxtb	r3, r3
 8007154:	4619      	mov	r1, r3
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	f7ff fed9 	bl	8006f0e <USBD_CoreFindIF>
 800715c:	4603      	mov	r3, r0
 800715e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007160:	7bbb      	ldrb	r3, [r7, #14]
 8007162:	2bff      	cmp	r3, #255	; 0xff
 8007164:	d01d      	beq.n	80071a2 <USBD_StdItfReq+0x92>
 8007166:	7bbb      	ldrb	r3, [r7, #14]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d11a      	bne.n	80071a2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800716c:	7bba      	ldrb	r2, [r7, #14]
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	32ae      	adds	r2, #174	; 0xae
 8007172:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007176:	689b      	ldr	r3, [r3, #8]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d00f      	beq.n	800719c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800717c:	7bba      	ldrb	r2, [r7, #14]
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007184:	7bba      	ldrb	r2, [r7, #14]
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	32ae      	adds	r2, #174	; 0xae
 800718a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800718e:	689b      	ldr	r3, [r3, #8]
 8007190:	6839      	ldr	r1, [r7, #0]
 8007192:	6878      	ldr	r0, [r7, #4]
 8007194:	4798      	blx	r3
 8007196:	4603      	mov	r3, r0
 8007198:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800719a:	e004      	b.n	80071a6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800719c:	2303      	movs	r3, #3
 800719e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80071a0:	e001      	b.n	80071a6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80071a2:	2303      	movs	r3, #3
 80071a4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	88db      	ldrh	r3, [r3, #6]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d110      	bne.n	80071d0 <USBD_StdItfReq+0xc0>
 80071ae:	7bfb      	ldrb	r3, [r7, #15]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d10d      	bne.n	80071d0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80071b4:	6878      	ldr	r0, [r7, #4]
 80071b6:	f000 fdd4 	bl	8007d62 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80071ba:	e009      	b.n	80071d0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80071bc:	6839      	ldr	r1, [r7, #0]
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f000 fd21 	bl	8007c06 <USBD_CtlError>
          break;
 80071c4:	e004      	b.n	80071d0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80071c6:	6839      	ldr	r1, [r7, #0]
 80071c8:	6878      	ldr	r0, [r7, #4]
 80071ca:	f000 fd1c 	bl	8007c06 <USBD_CtlError>
          break;
 80071ce:	e000      	b.n	80071d2 <USBD_StdItfReq+0xc2>
          break;
 80071d0:	bf00      	nop
      }
      break;
 80071d2:	e004      	b.n	80071de <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80071d4:	6839      	ldr	r1, [r7, #0]
 80071d6:	6878      	ldr	r0, [r7, #4]
 80071d8:	f000 fd15 	bl	8007c06 <USBD_CtlError>
      break;
 80071dc:	bf00      	nop
  }

  return ret;
 80071de:	7bfb      	ldrb	r3, [r7, #15]
}
 80071e0:	4618      	mov	r0, r3
 80071e2:	3710      	adds	r7, #16
 80071e4:	46bd      	mov	sp, r7
 80071e6:	bd80      	pop	{r7, pc}

080071e8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b084      	sub	sp, #16
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
 80071f0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80071f2:	2300      	movs	r3, #0
 80071f4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	889b      	ldrh	r3, [r3, #4]
 80071fa:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	781b      	ldrb	r3, [r3, #0]
 8007200:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007204:	2b40      	cmp	r3, #64	; 0x40
 8007206:	d007      	beq.n	8007218 <USBD_StdEPReq+0x30>
 8007208:	2b40      	cmp	r3, #64	; 0x40
 800720a:	f200 817f 	bhi.w	800750c <USBD_StdEPReq+0x324>
 800720e:	2b00      	cmp	r3, #0
 8007210:	d02a      	beq.n	8007268 <USBD_StdEPReq+0x80>
 8007212:	2b20      	cmp	r3, #32
 8007214:	f040 817a 	bne.w	800750c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007218:	7bbb      	ldrb	r3, [r7, #14]
 800721a:	4619      	mov	r1, r3
 800721c:	6878      	ldr	r0, [r7, #4]
 800721e:	f7ff fe83 	bl	8006f28 <USBD_CoreFindEP>
 8007222:	4603      	mov	r3, r0
 8007224:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007226:	7b7b      	ldrb	r3, [r7, #13]
 8007228:	2bff      	cmp	r3, #255	; 0xff
 800722a:	f000 8174 	beq.w	8007516 <USBD_StdEPReq+0x32e>
 800722e:	7b7b      	ldrb	r3, [r7, #13]
 8007230:	2b00      	cmp	r3, #0
 8007232:	f040 8170 	bne.w	8007516 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007236:	7b7a      	ldrb	r2, [r7, #13]
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800723e:	7b7a      	ldrb	r2, [r7, #13]
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	32ae      	adds	r2, #174	; 0xae
 8007244:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007248:	689b      	ldr	r3, [r3, #8]
 800724a:	2b00      	cmp	r3, #0
 800724c:	f000 8163 	beq.w	8007516 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007250:	7b7a      	ldrb	r2, [r7, #13]
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	32ae      	adds	r2, #174	; 0xae
 8007256:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800725a:	689b      	ldr	r3, [r3, #8]
 800725c:	6839      	ldr	r1, [r7, #0]
 800725e:	6878      	ldr	r0, [r7, #4]
 8007260:	4798      	blx	r3
 8007262:	4603      	mov	r3, r0
 8007264:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007266:	e156      	b.n	8007516 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	785b      	ldrb	r3, [r3, #1]
 800726c:	2b03      	cmp	r3, #3
 800726e:	d008      	beq.n	8007282 <USBD_StdEPReq+0x9a>
 8007270:	2b03      	cmp	r3, #3
 8007272:	f300 8145 	bgt.w	8007500 <USBD_StdEPReq+0x318>
 8007276:	2b00      	cmp	r3, #0
 8007278:	f000 809b 	beq.w	80073b2 <USBD_StdEPReq+0x1ca>
 800727c:	2b01      	cmp	r3, #1
 800727e:	d03c      	beq.n	80072fa <USBD_StdEPReq+0x112>
 8007280:	e13e      	b.n	8007500 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007288:	b2db      	uxtb	r3, r3
 800728a:	2b02      	cmp	r3, #2
 800728c:	d002      	beq.n	8007294 <USBD_StdEPReq+0xac>
 800728e:	2b03      	cmp	r3, #3
 8007290:	d016      	beq.n	80072c0 <USBD_StdEPReq+0xd8>
 8007292:	e02c      	b.n	80072ee <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007294:	7bbb      	ldrb	r3, [r7, #14]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d00d      	beq.n	80072b6 <USBD_StdEPReq+0xce>
 800729a:	7bbb      	ldrb	r3, [r7, #14]
 800729c:	2b80      	cmp	r3, #128	; 0x80
 800729e:	d00a      	beq.n	80072b6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80072a0:	7bbb      	ldrb	r3, [r7, #14]
 80072a2:	4619      	mov	r1, r3
 80072a4:	6878      	ldr	r0, [r7, #4]
 80072a6:	f003 fee9 	bl	800b07c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80072aa:	2180      	movs	r1, #128	; 0x80
 80072ac:	6878      	ldr	r0, [r7, #4]
 80072ae:	f003 fee5 	bl	800b07c <USBD_LL_StallEP>
 80072b2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80072b4:	e020      	b.n	80072f8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80072b6:	6839      	ldr	r1, [r7, #0]
 80072b8:	6878      	ldr	r0, [r7, #4]
 80072ba:	f000 fca4 	bl	8007c06 <USBD_CtlError>
              break;
 80072be:	e01b      	b.n	80072f8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	885b      	ldrh	r3, [r3, #2]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d10e      	bne.n	80072e6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80072c8:	7bbb      	ldrb	r3, [r7, #14]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d00b      	beq.n	80072e6 <USBD_StdEPReq+0xfe>
 80072ce:	7bbb      	ldrb	r3, [r7, #14]
 80072d0:	2b80      	cmp	r3, #128	; 0x80
 80072d2:	d008      	beq.n	80072e6 <USBD_StdEPReq+0xfe>
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	88db      	ldrh	r3, [r3, #6]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d104      	bne.n	80072e6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80072dc:	7bbb      	ldrb	r3, [r7, #14]
 80072de:	4619      	mov	r1, r3
 80072e0:	6878      	ldr	r0, [r7, #4]
 80072e2:	f003 fecb 	bl	800b07c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80072e6:	6878      	ldr	r0, [r7, #4]
 80072e8:	f000 fd3b 	bl	8007d62 <USBD_CtlSendStatus>

              break;
 80072ec:	e004      	b.n	80072f8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80072ee:	6839      	ldr	r1, [r7, #0]
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	f000 fc88 	bl	8007c06 <USBD_CtlError>
              break;
 80072f6:	bf00      	nop
          }
          break;
 80072f8:	e107      	b.n	800750a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007300:	b2db      	uxtb	r3, r3
 8007302:	2b02      	cmp	r3, #2
 8007304:	d002      	beq.n	800730c <USBD_StdEPReq+0x124>
 8007306:	2b03      	cmp	r3, #3
 8007308:	d016      	beq.n	8007338 <USBD_StdEPReq+0x150>
 800730a:	e04b      	b.n	80073a4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800730c:	7bbb      	ldrb	r3, [r7, #14]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d00d      	beq.n	800732e <USBD_StdEPReq+0x146>
 8007312:	7bbb      	ldrb	r3, [r7, #14]
 8007314:	2b80      	cmp	r3, #128	; 0x80
 8007316:	d00a      	beq.n	800732e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007318:	7bbb      	ldrb	r3, [r7, #14]
 800731a:	4619      	mov	r1, r3
 800731c:	6878      	ldr	r0, [r7, #4]
 800731e:	f003 fead 	bl	800b07c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007322:	2180      	movs	r1, #128	; 0x80
 8007324:	6878      	ldr	r0, [r7, #4]
 8007326:	f003 fea9 	bl	800b07c <USBD_LL_StallEP>
 800732a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800732c:	e040      	b.n	80073b0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800732e:	6839      	ldr	r1, [r7, #0]
 8007330:	6878      	ldr	r0, [r7, #4]
 8007332:	f000 fc68 	bl	8007c06 <USBD_CtlError>
              break;
 8007336:	e03b      	b.n	80073b0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	885b      	ldrh	r3, [r3, #2]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d136      	bne.n	80073ae <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007340:	7bbb      	ldrb	r3, [r7, #14]
 8007342:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007346:	2b00      	cmp	r3, #0
 8007348:	d004      	beq.n	8007354 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800734a:	7bbb      	ldrb	r3, [r7, #14]
 800734c:	4619      	mov	r1, r3
 800734e:	6878      	ldr	r0, [r7, #4]
 8007350:	f003 feca 	bl	800b0e8 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007354:	6878      	ldr	r0, [r7, #4]
 8007356:	f000 fd04 	bl	8007d62 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800735a:	7bbb      	ldrb	r3, [r7, #14]
 800735c:	4619      	mov	r1, r3
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	f7ff fde2 	bl	8006f28 <USBD_CoreFindEP>
 8007364:	4603      	mov	r3, r0
 8007366:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007368:	7b7b      	ldrb	r3, [r7, #13]
 800736a:	2bff      	cmp	r3, #255	; 0xff
 800736c:	d01f      	beq.n	80073ae <USBD_StdEPReq+0x1c6>
 800736e:	7b7b      	ldrb	r3, [r7, #13]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d11c      	bne.n	80073ae <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007374:	7b7a      	ldrb	r2, [r7, #13]
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800737c:	7b7a      	ldrb	r2, [r7, #13]
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	32ae      	adds	r2, #174	; 0xae
 8007382:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007386:	689b      	ldr	r3, [r3, #8]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d010      	beq.n	80073ae <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800738c:	7b7a      	ldrb	r2, [r7, #13]
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	32ae      	adds	r2, #174	; 0xae
 8007392:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007396:	689b      	ldr	r3, [r3, #8]
 8007398:	6839      	ldr	r1, [r7, #0]
 800739a:	6878      	ldr	r0, [r7, #4]
 800739c:	4798      	blx	r3
 800739e:	4603      	mov	r3, r0
 80073a0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80073a2:	e004      	b.n	80073ae <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80073a4:	6839      	ldr	r1, [r7, #0]
 80073a6:	6878      	ldr	r0, [r7, #4]
 80073a8:	f000 fc2d 	bl	8007c06 <USBD_CtlError>
              break;
 80073ac:	e000      	b.n	80073b0 <USBD_StdEPReq+0x1c8>
              break;
 80073ae:	bf00      	nop
          }
          break;
 80073b0:	e0ab      	b.n	800750a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073b8:	b2db      	uxtb	r3, r3
 80073ba:	2b02      	cmp	r3, #2
 80073bc:	d002      	beq.n	80073c4 <USBD_StdEPReq+0x1dc>
 80073be:	2b03      	cmp	r3, #3
 80073c0:	d032      	beq.n	8007428 <USBD_StdEPReq+0x240>
 80073c2:	e097      	b.n	80074f4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80073c4:	7bbb      	ldrb	r3, [r7, #14]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d007      	beq.n	80073da <USBD_StdEPReq+0x1f2>
 80073ca:	7bbb      	ldrb	r3, [r7, #14]
 80073cc:	2b80      	cmp	r3, #128	; 0x80
 80073ce:	d004      	beq.n	80073da <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80073d0:	6839      	ldr	r1, [r7, #0]
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	f000 fc17 	bl	8007c06 <USBD_CtlError>
                break;
 80073d8:	e091      	b.n	80074fe <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80073da:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	da0b      	bge.n	80073fa <USBD_StdEPReq+0x212>
 80073e2:	7bbb      	ldrb	r3, [r7, #14]
 80073e4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80073e8:	4613      	mov	r3, r2
 80073ea:	009b      	lsls	r3, r3, #2
 80073ec:	4413      	add	r3, r2
 80073ee:	009b      	lsls	r3, r3, #2
 80073f0:	3310      	adds	r3, #16
 80073f2:	687a      	ldr	r2, [r7, #4]
 80073f4:	4413      	add	r3, r2
 80073f6:	3304      	adds	r3, #4
 80073f8:	e00b      	b.n	8007412 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80073fa:	7bbb      	ldrb	r3, [r7, #14]
 80073fc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007400:	4613      	mov	r3, r2
 8007402:	009b      	lsls	r3, r3, #2
 8007404:	4413      	add	r3, r2
 8007406:	009b      	lsls	r3, r3, #2
 8007408:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800740c:	687a      	ldr	r2, [r7, #4]
 800740e:	4413      	add	r3, r2
 8007410:	3304      	adds	r3, #4
 8007412:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007414:	68bb      	ldr	r3, [r7, #8]
 8007416:	2200      	movs	r2, #0
 8007418:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800741a:	68bb      	ldr	r3, [r7, #8]
 800741c:	2202      	movs	r2, #2
 800741e:	4619      	mov	r1, r3
 8007420:	6878      	ldr	r0, [r7, #4]
 8007422:	f000 fc61 	bl	8007ce8 <USBD_CtlSendData>
              break;
 8007426:	e06a      	b.n	80074fe <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007428:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800742c:	2b00      	cmp	r3, #0
 800742e:	da11      	bge.n	8007454 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007430:	7bbb      	ldrb	r3, [r7, #14]
 8007432:	f003 020f 	and.w	r2, r3, #15
 8007436:	6879      	ldr	r1, [r7, #4]
 8007438:	4613      	mov	r3, r2
 800743a:	009b      	lsls	r3, r3, #2
 800743c:	4413      	add	r3, r2
 800743e:	009b      	lsls	r3, r3, #2
 8007440:	440b      	add	r3, r1
 8007442:	3324      	adds	r3, #36	; 0x24
 8007444:	881b      	ldrh	r3, [r3, #0]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d117      	bne.n	800747a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800744a:	6839      	ldr	r1, [r7, #0]
 800744c:	6878      	ldr	r0, [r7, #4]
 800744e:	f000 fbda 	bl	8007c06 <USBD_CtlError>
                  break;
 8007452:	e054      	b.n	80074fe <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007454:	7bbb      	ldrb	r3, [r7, #14]
 8007456:	f003 020f 	and.w	r2, r3, #15
 800745a:	6879      	ldr	r1, [r7, #4]
 800745c:	4613      	mov	r3, r2
 800745e:	009b      	lsls	r3, r3, #2
 8007460:	4413      	add	r3, r2
 8007462:	009b      	lsls	r3, r3, #2
 8007464:	440b      	add	r3, r1
 8007466:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800746a:	881b      	ldrh	r3, [r3, #0]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d104      	bne.n	800747a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007470:	6839      	ldr	r1, [r7, #0]
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	f000 fbc7 	bl	8007c06 <USBD_CtlError>
                  break;
 8007478:	e041      	b.n	80074fe <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800747a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800747e:	2b00      	cmp	r3, #0
 8007480:	da0b      	bge.n	800749a <USBD_StdEPReq+0x2b2>
 8007482:	7bbb      	ldrb	r3, [r7, #14]
 8007484:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007488:	4613      	mov	r3, r2
 800748a:	009b      	lsls	r3, r3, #2
 800748c:	4413      	add	r3, r2
 800748e:	009b      	lsls	r3, r3, #2
 8007490:	3310      	adds	r3, #16
 8007492:	687a      	ldr	r2, [r7, #4]
 8007494:	4413      	add	r3, r2
 8007496:	3304      	adds	r3, #4
 8007498:	e00b      	b.n	80074b2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800749a:	7bbb      	ldrb	r3, [r7, #14]
 800749c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80074a0:	4613      	mov	r3, r2
 80074a2:	009b      	lsls	r3, r3, #2
 80074a4:	4413      	add	r3, r2
 80074a6:	009b      	lsls	r3, r3, #2
 80074a8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80074ac:	687a      	ldr	r2, [r7, #4]
 80074ae:	4413      	add	r3, r2
 80074b0:	3304      	adds	r3, #4
 80074b2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80074b4:	7bbb      	ldrb	r3, [r7, #14]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d002      	beq.n	80074c0 <USBD_StdEPReq+0x2d8>
 80074ba:	7bbb      	ldrb	r3, [r7, #14]
 80074bc:	2b80      	cmp	r3, #128	; 0x80
 80074be:	d103      	bne.n	80074c8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80074c0:	68bb      	ldr	r3, [r7, #8]
 80074c2:	2200      	movs	r2, #0
 80074c4:	601a      	str	r2, [r3, #0]
 80074c6:	e00e      	b.n	80074e6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80074c8:	7bbb      	ldrb	r3, [r7, #14]
 80074ca:	4619      	mov	r1, r3
 80074cc:	6878      	ldr	r0, [r7, #4]
 80074ce:	f003 fe41 	bl	800b154 <USBD_LL_IsStallEP>
 80074d2:	4603      	mov	r3, r0
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d003      	beq.n	80074e0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	2201      	movs	r2, #1
 80074dc:	601a      	str	r2, [r3, #0]
 80074de:	e002      	b.n	80074e6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80074e0:	68bb      	ldr	r3, [r7, #8]
 80074e2:	2200      	movs	r2, #0
 80074e4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80074e6:	68bb      	ldr	r3, [r7, #8]
 80074e8:	2202      	movs	r2, #2
 80074ea:	4619      	mov	r1, r3
 80074ec:	6878      	ldr	r0, [r7, #4]
 80074ee:	f000 fbfb 	bl	8007ce8 <USBD_CtlSendData>
              break;
 80074f2:	e004      	b.n	80074fe <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80074f4:	6839      	ldr	r1, [r7, #0]
 80074f6:	6878      	ldr	r0, [r7, #4]
 80074f8:	f000 fb85 	bl	8007c06 <USBD_CtlError>
              break;
 80074fc:	bf00      	nop
          }
          break;
 80074fe:	e004      	b.n	800750a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007500:	6839      	ldr	r1, [r7, #0]
 8007502:	6878      	ldr	r0, [r7, #4]
 8007504:	f000 fb7f 	bl	8007c06 <USBD_CtlError>
          break;
 8007508:	bf00      	nop
      }
      break;
 800750a:	e005      	b.n	8007518 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800750c:	6839      	ldr	r1, [r7, #0]
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f000 fb79 	bl	8007c06 <USBD_CtlError>
      break;
 8007514:	e000      	b.n	8007518 <USBD_StdEPReq+0x330>
      break;
 8007516:	bf00      	nop
  }

  return ret;
 8007518:	7bfb      	ldrb	r3, [r7, #15]
}
 800751a:	4618      	mov	r0, r3
 800751c:	3710      	adds	r7, #16
 800751e:	46bd      	mov	sp, r7
 8007520:	bd80      	pop	{r7, pc}
	...

08007524 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b084      	sub	sp, #16
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
 800752c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800752e:	2300      	movs	r3, #0
 8007530:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007532:	2300      	movs	r3, #0
 8007534:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007536:	2300      	movs	r3, #0
 8007538:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	885b      	ldrh	r3, [r3, #2]
 800753e:	0a1b      	lsrs	r3, r3, #8
 8007540:	b29b      	uxth	r3, r3
 8007542:	3b01      	subs	r3, #1
 8007544:	2b0e      	cmp	r3, #14
 8007546:	f200 8152 	bhi.w	80077ee <USBD_GetDescriptor+0x2ca>
 800754a:	a201      	add	r2, pc, #4	; (adr r2, 8007550 <USBD_GetDescriptor+0x2c>)
 800754c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007550:	080075c1 	.word	0x080075c1
 8007554:	080075d9 	.word	0x080075d9
 8007558:	08007619 	.word	0x08007619
 800755c:	080077ef 	.word	0x080077ef
 8007560:	080077ef 	.word	0x080077ef
 8007564:	0800778f 	.word	0x0800778f
 8007568:	080077bb 	.word	0x080077bb
 800756c:	080077ef 	.word	0x080077ef
 8007570:	080077ef 	.word	0x080077ef
 8007574:	080077ef 	.word	0x080077ef
 8007578:	080077ef 	.word	0x080077ef
 800757c:	080077ef 	.word	0x080077ef
 8007580:	080077ef 	.word	0x080077ef
 8007584:	080077ef 	.word	0x080077ef
 8007588:	0800758d 	.word	0x0800758d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007592:	69db      	ldr	r3, [r3, #28]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d00b      	beq.n	80075b0 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800759e:	69db      	ldr	r3, [r3, #28]
 80075a0:	687a      	ldr	r2, [r7, #4]
 80075a2:	7c12      	ldrb	r2, [r2, #16]
 80075a4:	f107 0108 	add.w	r1, r7, #8
 80075a8:	4610      	mov	r0, r2
 80075aa:	4798      	blx	r3
 80075ac:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80075ae:	e126      	b.n	80077fe <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80075b0:	6839      	ldr	r1, [r7, #0]
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	f000 fb27 	bl	8007c06 <USBD_CtlError>
        err++;
 80075b8:	7afb      	ldrb	r3, [r7, #11]
 80075ba:	3301      	adds	r3, #1
 80075bc:	72fb      	strb	r3, [r7, #11]
      break;
 80075be:	e11e      	b.n	80077fe <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	687a      	ldr	r2, [r7, #4]
 80075ca:	7c12      	ldrb	r2, [r2, #16]
 80075cc:	f107 0108 	add.w	r1, r7, #8
 80075d0:	4610      	mov	r0, r2
 80075d2:	4798      	blx	r3
 80075d4:	60f8      	str	r0, [r7, #12]
      break;
 80075d6:	e112      	b.n	80077fe <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	7c1b      	ldrb	r3, [r3, #16]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d10d      	bne.n	80075fc <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075e8:	f107 0208 	add.w	r2, r7, #8
 80075ec:	4610      	mov	r0, r2
 80075ee:	4798      	blx	r3
 80075f0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	3301      	adds	r3, #1
 80075f6:	2202      	movs	r2, #2
 80075f8:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80075fa:	e100      	b.n	80077fe <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007604:	f107 0208 	add.w	r2, r7, #8
 8007608:	4610      	mov	r0, r2
 800760a:	4798      	blx	r3
 800760c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	3301      	adds	r3, #1
 8007612:	2202      	movs	r2, #2
 8007614:	701a      	strb	r2, [r3, #0]
      break;
 8007616:	e0f2      	b.n	80077fe <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	885b      	ldrh	r3, [r3, #2]
 800761c:	b2db      	uxtb	r3, r3
 800761e:	2b05      	cmp	r3, #5
 8007620:	f200 80ac 	bhi.w	800777c <USBD_GetDescriptor+0x258>
 8007624:	a201      	add	r2, pc, #4	; (adr r2, 800762c <USBD_GetDescriptor+0x108>)
 8007626:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800762a:	bf00      	nop
 800762c:	08007645 	.word	0x08007645
 8007630:	08007679 	.word	0x08007679
 8007634:	080076ad 	.word	0x080076ad
 8007638:	080076e1 	.word	0x080076e1
 800763c:	08007715 	.word	0x08007715
 8007640:	08007749 	.word	0x08007749
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800764a:	685b      	ldr	r3, [r3, #4]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d00b      	beq.n	8007668 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007656:	685b      	ldr	r3, [r3, #4]
 8007658:	687a      	ldr	r2, [r7, #4]
 800765a:	7c12      	ldrb	r2, [r2, #16]
 800765c:	f107 0108 	add.w	r1, r7, #8
 8007660:	4610      	mov	r0, r2
 8007662:	4798      	blx	r3
 8007664:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007666:	e091      	b.n	800778c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007668:	6839      	ldr	r1, [r7, #0]
 800766a:	6878      	ldr	r0, [r7, #4]
 800766c:	f000 facb 	bl	8007c06 <USBD_CtlError>
            err++;
 8007670:	7afb      	ldrb	r3, [r7, #11]
 8007672:	3301      	adds	r3, #1
 8007674:	72fb      	strb	r3, [r7, #11]
          break;
 8007676:	e089      	b.n	800778c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800767e:	689b      	ldr	r3, [r3, #8]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d00b      	beq.n	800769c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800768a:	689b      	ldr	r3, [r3, #8]
 800768c:	687a      	ldr	r2, [r7, #4]
 800768e:	7c12      	ldrb	r2, [r2, #16]
 8007690:	f107 0108 	add.w	r1, r7, #8
 8007694:	4610      	mov	r0, r2
 8007696:	4798      	blx	r3
 8007698:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800769a:	e077      	b.n	800778c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800769c:	6839      	ldr	r1, [r7, #0]
 800769e:	6878      	ldr	r0, [r7, #4]
 80076a0:	f000 fab1 	bl	8007c06 <USBD_CtlError>
            err++;
 80076a4:	7afb      	ldrb	r3, [r7, #11]
 80076a6:	3301      	adds	r3, #1
 80076a8:	72fb      	strb	r3, [r7, #11]
          break;
 80076aa:	e06f      	b.n	800778c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076b2:	68db      	ldr	r3, [r3, #12]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d00b      	beq.n	80076d0 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076be:	68db      	ldr	r3, [r3, #12]
 80076c0:	687a      	ldr	r2, [r7, #4]
 80076c2:	7c12      	ldrb	r2, [r2, #16]
 80076c4:	f107 0108 	add.w	r1, r7, #8
 80076c8:	4610      	mov	r0, r2
 80076ca:	4798      	blx	r3
 80076cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80076ce:	e05d      	b.n	800778c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80076d0:	6839      	ldr	r1, [r7, #0]
 80076d2:	6878      	ldr	r0, [r7, #4]
 80076d4:	f000 fa97 	bl	8007c06 <USBD_CtlError>
            err++;
 80076d8:	7afb      	ldrb	r3, [r7, #11]
 80076da:	3301      	adds	r3, #1
 80076dc:	72fb      	strb	r3, [r7, #11]
          break;
 80076de:	e055      	b.n	800778c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076e6:	691b      	ldr	r3, [r3, #16]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d00b      	beq.n	8007704 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076f2:	691b      	ldr	r3, [r3, #16]
 80076f4:	687a      	ldr	r2, [r7, #4]
 80076f6:	7c12      	ldrb	r2, [r2, #16]
 80076f8:	f107 0108 	add.w	r1, r7, #8
 80076fc:	4610      	mov	r0, r2
 80076fe:	4798      	blx	r3
 8007700:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007702:	e043      	b.n	800778c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007704:	6839      	ldr	r1, [r7, #0]
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	f000 fa7d 	bl	8007c06 <USBD_CtlError>
            err++;
 800770c:	7afb      	ldrb	r3, [r7, #11]
 800770e:	3301      	adds	r3, #1
 8007710:	72fb      	strb	r3, [r7, #11]
          break;
 8007712:	e03b      	b.n	800778c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800771a:	695b      	ldr	r3, [r3, #20]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d00b      	beq.n	8007738 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007726:	695b      	ldr	r3, [r3, #20]
 8007728:	687a      	ldr	r2, [r7, #4]
 800772a:	7c12      	ldrb	r2, [r2, #16]
 800772c:	f107 0108 	add.w	r1, r7, #8
 8007730:	4610      	mov	r0, r2
 8007732:	4798      	blx	r3
 8007734:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007736:	e029      	b.n	800778c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007738:	6839      	ldr	r1, [r7, #0]
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	f000 fa63 	bl	8007c06 <USBD_CtlError>
            err++;
 8007740:	7afb      	ldrb	r3, [r7, #11]
 8007742:	3301      	adds	r3, #1
 8007744:	72fb      	strb	r3, [r7, #11]
          break;
 8007746:	e021      	b.n	800778c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800774e:	699b      	ldr	r3, [r3, #24]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d00b      	beq.n	800776c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800775a:	699b      	ldr	r3, [r3, #24]
 800775c:	687a      	ldr	r2, [r7, #4]
 800775e:	7c12      	ldrb	r2, [r2, #16]
 8007760:	f107 0108 	add.w	r1, r7, #8
 8007764:	4610      	mov	r0, r2
 8007766:	4798      	blx	r3
 8007768:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800776a:	e00f      	b.n	800778c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800776c:	6839      	ldr	r1, [r7, #0]
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	f000 fa49 	bl	8007c06 <USBD_CtlError>
            err++;
 8007774:	7afb      	ldrb	r3, [r7, #11]
 8007776:	3301      	adds	r3, #1
 8007778:	72fb      	strb	r3, [r7, #11]
          break;
 800777a:	e007      	b.n	800778c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800777c:	6839      	ldr	r1, [r7, #0]
 800777e:	6878      	ldr	r0, [r7, #4]
 8007780:	f000 fa41 	bl	8007c06 <USBD_CtlError>
          err++;
 8007784:	7afb      	ldrb	r3, [r7, #11]
 8007786:	3301      	adds	r3, #1
 8007788:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800778a:	bf00      	nop
      }
      break;
 800778c:	e037      	b.n	80077fe <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	7c1b      	ldrb	r3, [r3, #16]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d109      	bne.n	80077aa <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800779c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800779e:	f107 0208 	add.w	r2, r7, #8
 80077a2:	4610      	mov	r0, r2
 80077a4:	4798      	blx	r3
 80077a6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80077a8:	e029      	b.n	80077fe <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80077aa:	6839      	ldr	r1, [r7, #0]
 80077ac:	6878      	ldr	r0, [r7, #4]
 80077ae:	f000 fa2a 	bl	8007c06 <USBD_CtlError>
        err++;
 80077b2:	7afb      	ldrb	r3, [r7, #11]
 80077b4:	3301      	adds	r3, #1
 80077b6:	72fb      	strb	r3, [r7, #11]
      break;
 80077b8:	e021      	b.n	80077fe <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	7c1b      	ldrb	r3, [r3, #16]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d10d      	bne.n	80077de <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077ca:	f107 0208 	add.w	r2, r7, #8
 80077ce:	4610      	mov	r0, r2
 80077d0:	4798      	blx	r3
 80077d2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	3301      	adds	r3, #1
 80077d8:	2207      	movs	r2, #7
 80077da:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80077dc:	e00f      	b.n	80077fe <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80077de:	6839      	ldr	r1, [r7, #0]
 80077e0:	6878      	ldr	r0, [r7, #4]
 80077e2:	f000 fa10 	bl	8007c06 <USBD_CtlError>
        err++;
 80077e6:	7afb      	ldrb	r3, [r7, #11]
 80077e8:	3301      	adds	r3, #1
 80077ea:	72fb      	strb	r3, [r7, #11]
      break;
 80077ec:	e007      	b.n	80077fe <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80077ee:	6839      	ldr	r1, [r7, #0]
 80077f0:	6878      	ldr	r0, [r7, #4]
 80077f2:	f000 fa08 	bl	8007c06 <USBD_CtlError>
      err++;
 80077f6:	7afb      	ldrb	r3, [r7, #11]
 80077f8:	3301      	adds	r3, #1
 80077fa:	72fb      	strb	r3, [r7, #11]
      break;
 80077fc:	bf00      	nop
  }

  if (err != 0U)
 80077fe:	7afb      	ldrb	r3, [r7, #11]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d11e      	bne.n	8007842 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	88db      	ldrh	r3, [r3, #6]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d016      	beq.n	800783a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800780c:	893b      	ldrh	r3, [r7, #8]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d00e      	beq.n	8007830 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	88da      	ldrh	r2, [r3, #6]
 8007816:	893b      	ldrh	r3, [r7, #8]
 8007818:	4293      	cmp	r3, r2
 800781a:	bf28      	it	cs
 800781c:	4613      	movcs	r3, r2
 800781e:	b29b      	uxth	r3, r3
 8007820:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007822:	893b      	ldrh	r3, [r7, #8]
 8007824:	461a      	mov	r2, r3
 8007826:	68f9      	ldr	r1, [r7, #12]
 8007828:	6878      	ldr	r0, [r7, #4]
 800782a:	f000 fa5d 	bl	8007ce8 <USBD_CtlSendData>
 800782e:	e009      	b.n	8007844 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007830:	6839      	ldr	r1, [r7, #0]
 8007832:	6878      	ldr	r0, [r7, #4]
 8007834:	f000 f9e7 	bl	8007c06 <USBD_CtlError>
 8007838:	e004      	b.n	8007844 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800783a:	6878      	ldr	r0, [r7, #4]
 800783c:	f000 fa91 	bl	8007d62 <USBD_CtlSendStatus>
 8007840:	e000      	b.n	8007844 <USBD_GetDescriptor+0x320>
    return;
 8007842:	bf00      	nop
  }
}
 8007844:	3710      	adds	r7, #16
 8007846:	46bd      	mov	sp, r7
 8007848:	bd80      	pop	{r7, pc}
 800784a:	bf00      	nop

0800784c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b084      	sub	sp, #16
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
 8007854:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	889b      	ldrh	r3, [r3, #4]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d131      	bne.n	80078c2 <USBD_SetAddress+0x76>
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	88db      	ldrh	r3, [r3, #6]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d12d      	bne.n	80078c2 <USBD_SetAddress+0x76>
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	885b      	ldrh	r3, [r3, #2]
 800786a:	2b7f      	cmp	r3, #127	; 0x7f
 800786c:	d829      	bhi.n	80078c2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	885b      	ldrh	r3, [r3, #2]
 8007872:	b2db      	uxtb	r3, r3
 8007874:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007878:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007880:	b2db      	uxtb	r3, r3
 8007882:	2b03      	cmp	r3, #3
 8007884:	d104      	bne.n	8007890 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007886:	6839      	ldr	r1, [r7, #0]
 8007888:	6878      	ldr	r0, [r7, #4]
 800788a:	f000 f9bc 	bl	8007c06 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800788e:	e01d      	b.n	80078cc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	7bfa      	ldrb	r2, [r7, #15]
 8007894:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007898:	7bfb      	ldrb	r3, [r7, #15]
 800789a:	4619      	mov	r1, r3
 800789c:	6878      	ldr	r0, [r7, #4]
 800789e:	f003 fc85 	bl	800b1ac <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f000 fa5d 	bl	8007d62 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80078a8:	7bfb      	ldrb	r3, [r7, #15]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d004      	beq.n	80078b8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	2202      	movs	r2, #2
 80078b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078b6:	e009      	b.n	80078cc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2201      	movs	r2, #1
 80078bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078c0:	e004      	b.n	80078cc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80078c2:	6839      	ldr	r1, [r7, #0]
 80078c4:	6878      	ldr	r0, [r7, #4]
 80078c6:	f000 f99e 	bl	8007c06 <USBD_CtlError>
  }
}
 80078ca:	bf00      	nop
 80078cc:	bf00      	nop
 80078ce:	3710      	adds	r7, #16
 80078d0:	46bd      	mov	sp, r7
 80078d2:	bd80      	pop	{r7, pc}

080078d4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b084      	sub	sp, #16
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
 80078dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80078de:	2300      	movs	r3, #0
 80078e0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	885b      	ldrh	r3, [r3, #2]
 80078e6:	b2da      	uxtb	r2, r3
 80078e8:	4b4e      	ldr	r3, [pc, #312]	; (8007a24 <USBD_SetConfig+0x150>)
 80078ea:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80078ec:	4b4d      	ldr	r3, [pc, #308]	; (8007a24 <USBD_SetConfig+0x150>)
 80078ee:	781b      	ldrb	r3, [r3, #0]
 80078f0:	2b01      	cmp	r3, #1
 80078f2:	d905      	bls.n	8007900 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80078f4:	6839      	ldr	r1, [r7, #0]
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	f000 f985 	bl	8007c06 <USBD_CtlError>
    return USBD_FAIL;
 80078fc:	2303      	movs	r3, #3
 80078fe:	e08c      	b.n	8007a1a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007906:	b2db      	uxtb	r3, r3
 8007908:	2b02      	cmp	r3, #2
 800790a:	d002      	beq.n	8007912 <USBD_SetConfig+0x3e>
 800790c:	2b03      	cmp	r3, #3
 800790e:	d029      	beq.n	8007964 <USBD_SetConfig+0x90>
 8007910:	e075      	b.n	80079fe <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007912:	4b44      	ldr	r3, [pc, #272]	; (8007a24 <USBD_SetConfig+0x150>)
 8007914:	781b      	ldrb	r3, [r3, #0]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d020      	beq.n	800795c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800791a:	4b42      	ldr	r3, [pc, #264]	; (8007a24 <USBD_SetConfig+0x150>)
 800791c:	781b      	ldrb	r3, [r3, #0]
 800791e:	461a      	mov	r2, r3
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007924:	4b3f      	ldr	r3, [pc, #252]	; (8007a24 <USBD_SetConfig+0x150>)
 8007926:	781b      	ldrb	r3, [r3, #0]
 8007928:	4619      	mov	r1, r3
 800792a:	6878      	ldr	r0, [r7, #4]
 800792c:	f7fe ffb7 	bl	800689e <USBD_SetClassConfig>
 8007930:	4603      	mov	r3, r0
 8007932:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007934:	7bfb      	ldrb	r3, [r7, #15]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d008      	beq.n	800794c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800793a:	6839      	ldr	r1, [r7, #0]
 800793c:	6878      	ldr	r0, [r7, #4]
 800793e:	f000 f962 	bl	8007c06 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2202      	movs	r2, #2
 8007946:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800794a:	e065      	b.n	8007a18 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800794c:	6878      	ldr	r0, [r7, #4]
 800794e:	f000 fa08 	bl	8007d62 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2203      	movs	r2, #3
 8007956:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800795a:	e05d      	b.n	8007a18 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800795c:	6878      	ldr	r0, [r7, #4]
 800795e:	f000 fa00 	bl	8007d62 <USBD_CtlSendStatus>
      break;
 8007962:	e059      	b.n	8007a18 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007964:	4b2f      	ldr	r3, [pc, #188]	; (8007a24 <USBD_SetConfig+0x150>)
 8007966:	781b      	ldrb	r3, [r3, #0]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d112      	bne.n	8007992 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2202      	movs	r2, #2
 8007970:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007974:	4b2b      	ldr	r3, [pc, #172]	; (8007a24 <USBD_SetConfig+0x150>)
 8007976:	781b      	ldrb	r3, [r3, #0]
 8007978:	461a      	mov	r2, r3
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800797e:	4b29      	ldr	r3, [pc, #164]	; (8007a24 <USBD_SetConfig+0x150>)
 8007980:	781b      	ldrb	r3, [r3, #0]
 8007982:	4619      	mov	r1, r3
 8007984:	6878      	ldr	r0, [r7, #4]
 8007986:	f7fe ffa6 	bl	80068d6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800798a:	6878      	ldr	r0, [r7, #4]
 800798c:	f000 f9e9 	bl	8007d62 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007990:	e042      	b.n	8007a18 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007992:	4b24      	ldr	r3, [pc, #144]	; (8007a24 <USBD_SetConfig+0x150>)
 8007994:	781b      	ldrb	r3, [r3, #0]
 8007996:	461a      	mov	r2, r3
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	685b      	ldr	r3, [r3, #4]
 800799c:	429a      	cmp	r2, r3
 800799e:	d02a      	beq.n	80079f6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	685b      	ldr	r3, [r3, #4]
 80079a4:	b2db      	uxtb	r3, r3
 80079a6:	4619      	mov	r1, r3
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f7fe ff94 	bl	80068d6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80079ae:	4b1d      	ldr	r3, [pc, #116]	; (8007a24 <USBD_SetConfig+0x150>)
 80079b0:	781b      	ldrb	r3, [r3, #0]
 80079b2:	461a      	mov	r2, r3
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80079b8:	4b1a      	ldr	r3, [pc, #104]	; (8007a24 <USBD_SetConfig+0x150>)
 80079ba:	781b      	ldrb	r3, [r3, #0]
 80079bc:	4619      	mov	r1, r3
 80079be:	6878      	ldr	r0, [r7, #4]
 80079c0:	f7fe ff6d 	bl	800689e <USBD_SetClassConfig>
 80079c4:	4603      	mov	r3, r0
 80079c6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80079c8:	7bfb      	ldrb	r3, [r7, #15]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d00f      	beq.n	80079ee <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80079ce:	6839      	ldr	r1, [r7, #0]
 80079d0:	6878      	ldr	r0, [r7, #4]
 80079d2:	f000 f918 	bl	8007c06 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	685b      	ldr	r3, [r3, #4]
 80079da:	b2db      	uxtb	r3, r3
 80079dc:	4619      	mov	r1, r3
 80079de:	6878      	ldr	r0, [r7, #4]
 80079e0:	f7fe ff79 	bl	80068d6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2202      	movs	r2, #2
 80079e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80079ec:	e014      	b.n	8007a18 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80079ee:	6878      	ldr	r0, [r7, #4]
 80079f0:	f000 f9b7 	bl	8007d62 <USBD_CtlSendStatus>
      break;
 80079f4:	e010      	b.n	8007a18 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80079f6:	6878      	ldr	r0, [r7, #4]
 80079f8:	f000 f9b3 	bl	8007d62 <USBD_CtlSendStatus>
      break;
 80079fc:	e00c      	b.n	8007a18 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80079fe:	6839      	ldr	r1, [r7, #0]
 8007a00:	6878      	ldr	r0, [r7, #4]
 8007a02:	f000 f900 	bl	8007c06 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007a06:	4b07      	ldr	r3, [pc, #28]	; (8007a24 <USBD_SetConfig+0x150>)
 8007a08:	781b      	ldrb	r3, [r3, #0]
 8007a0a:	4619      	mov	r1, r3
 8007a0c:	6878      	ldr	r0, [r7, #4]
 8007a0e:	f7fe ff62 	bl	80068d6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007a12:	2303      	movs	r3, #3
 8007a14:	73fb      	strb	r3, [r7, #15]
      break;
 8007a16:	bf00      	nop
  }

  return ret;
 8007a18:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	3710      	adds	r7, #16
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	bd80      	pop	{r7, pc}
 8007a22:	bf00      	nop
 8007a24:	2000022c 	.word	0x2000022c

08007a28 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b082      	sub	sp, #8
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
 8007a30:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	88db      	ldrh	r3, [r3, #6]
 8007a36:	2b01      	cmp	r3, #1
 8007a38:	d004      	beq.n	8007a44 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007a3a:	6839      	ldr	r1, [r7, #0]
 8007a3c:	6878      	ldr	r0, [r7, #4]
 8007a3e:	f000 f8e2 	bl	8007c06 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007a42:	e023      	b.n	8007a8c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a4a:	b2db      	uxtb	r3, r3
 8007a4c:	2b02      	cmp	r3, #2
 8007a4e:	dc02      	bgt.n	8007a56 <USBD_GetConfig+0x2e>
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	dc03      	bgt.n	8007a5c <USBD_GetConfig+0x34>
 8007a54:	e015      	b.n	8007a82 <USBD_GetConfig+0x5a>
 8007a56:	2b03      	cmp	r3, #3
 8007a58:	d00b      	beq.n	8007a72 <USBD_GetConfig+0x4a>
 8007a5a:	e012      	b.n	8007a82 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2200      	movs	r2, #0
 8007a60:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	3308      	adds	r3, #8
 8007a66:	2201      	movs	r2, #1
 8007a68:	4619      	mov	r1, r3
 8007a6a:	6878      	ldr	r0, [r7, #4]
 8007a6c:	f000 f93c 	bl	8007ce8 <USBD_CtlSendData>
        break;
 8007a70:	e00c      	b.n	8007a8c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	3304      	adds	r3, #4
 8007a76:	2201      	movs	r2, #1
 8007a78:	4619      	mov	r1, r3
 8007a7a:	6878      	ldr	r0, [r7, #4]
 8007a7c:	f000 f934 	bl	8007ce8 <USBD_CtlSendData>
        break;
 8007a80:	e004      	b.n	8007a8c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007a82:	6839      	ldr	r1, [r7, #0]
 8007a84:	6878      	ldr	r0, [r7, #4]
 8007a86:	f000 f8be 	bl	8007c06 <USBD_CtlError>
        break;
 8007a8a:	bf00      	nop
}
 8007a8c:	bf00      	nop
 8007a8e:	3708      	adds	r7, #8
 8007a90:	46bd      	mov	sp, r7
 8007a92:	bd80      	pop	{r7, pc}

08007a94 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b082      	sub	sp, #8
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
 8007a9c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007aa4:	b2db      	uxtb	r3, r3
 8007aa6:	3b01      	subs	r3, #1
 8007aa8:	2b02      	cmp	r3, #2
 8007aaa:	d81e      	bhi.n	8007aea <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	88db      	ldrh	r3, [r3, #6]
 8007ab0:	2b02      	cmp	r3, #2
 8007ab2:	d004      	beq.n	8007abe <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007ab4:	6839      	ldr	r1, [r7, #0]
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	f000 f8a5 	bl	8007c06 <USBD_CtlError>
        break;
 8007abc:	e01a      	b.n	8007af4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2201      	movs	r2, #1
 8007ac2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d005      	beq.n	8007ada <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	68db      	ldr	r3, [r3, #12]
 8007ad2:	f043 0202 	orr.w	r2, r3, #2
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	330c      	adds	r3, #12
 8007ade:	2202      	movs	r2, #2
 8007ae0:	4619      	mov	r1, r3
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	f000 f900 	bl	8007ce8 <USBD_CtlSendData>
      break;
 8007ae8:	e004      	b.n	8007af4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007aea:	6839      	ldr	r1, [r7, #0]
 8007aec:	6878      	ldr	r0, [r7, #4]
 8007aee:	f000 f88a 	bl	8007c06 <USBD_CtlError>
      break;
 8007af2:	bf00      	nop
  }
}
 8007af4:	bf00      	nop
 8007af6:	3708      	adds	r7, #8
 8007af8:	46bd      	mov	sp, r7
 8007afa:	bd80      	pop	{r7, pc}

08007afc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b082      	sub	sp, #8
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
 8007b04:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007b06:	683b      	ldr	r3, [r7, #0]
 8007b08:	885b      	ldrh	r3, [r3, #2]
 8007b0a:	2b01      	cmp	r3, #1
 8007b0c:	d107      	bne.n	8007b1e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2201      	movs	r2, #1
 8007b12:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007b16:	6878      	ldr	r0, [r7, #4]
 8007b18:	f000 f923 	bl	8007d62 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007b1c:	e013      	b.n	8007b46 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	885b      	ldrh	r3, [r3, #2]
 8007b22:	2b02      	cmp	r3, #2
 8007b24:	d10b      	bne.n	8007b3e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	889b      	ldrh	r3, [r3, #4]
 8007b2a:	0a1b      	lsrs	r3, r3, #8
 8007b2c:	b29b      	uxth	r3, r3
 8007b2e:	b2da      	uxtb	r2, r3
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	f000 f913 	bl	8007d62 <USBD_CtlSendStatus>
}
 8007b3c:	e003      	b.n	8007b46 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007b3e:	6839      	ldr	r1, [r7, #0]
 8007b40:	6878      	ldr	r0, [r7, #4]
 8007b42:	f000 f860 	bl	8007c06 <USBD_CtlError>
}
 8007b46:	bf00      	nop
 8007b48:	3708      	adds	r7, #8
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	bd80      	pop	{r7, pc}

08007b4e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b4e:	b580      	push	{r7, lr}
 8007b50:	b082      	sub	sp, #8
 8007b52:	af00      	add	r7, sp, #0
 8007b54:	6078      	str	r0, [r7, #4]
 8007b56:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b5e:	b2db      	uxtb	r3, r3
 8007b60:	3b01      	subs	r3, #1
 8007b62:	2b02      	cmp	r3, #2
 8007b64:	d80b      	bhi.n	8007b7e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	885b      	ldrh	r3, [r3, #2]
 8007b6a:	2b01      	cmp	r3, #1
 8007b6c:	d10c      	bne.n	8007b88 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2200      	movs	r2, #0
 8007b72:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007b76:	6878      	ldr	r0, [r7, #4]
 8007b78:	f000 f8f3 	bl	8007d62 <USBD_CtlSendStatus>
      }
      break;
 8007b7c:	e004      	b.n	8007b88 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007b7e:	6839      	ldr	r1, [r7, #0]
 8007b80:	6878      	ldr	r0, [r7, #4]
 8007b82:	f000 f840 	bl	8007c06 <USBD_CtlError>
      break;
 8007b86:	e000      	b.n	8007b8a <USBD_ClrFeature+0x3c>
      break;
 8007b88:	bf00      	nop
  }
}
 8007b8a:	bf00      	nop
 8007b8c:	3708      	adds	r7, #8
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	bd80      	pop	{r7, pc}

08007b92 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007b92:	b580      	push	{r7, lr}
 8007b94:	b084      	sub	sp, #16
 8007b96:	af00      	add	r7, sp, #0
 8007b98:	6078      	str	r0, [r7, #4]
 8007b9a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	781a      	ldrb	r2, [r3, #0]
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	3301      	adds	r3, #1
 8007bac:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	781a      	ldrb	r2, [r3, #0]
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	3301      	adds	r3, #1
 8007bba:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007bbc:	68f8      	ldr	r0, [r7, #12]
 8007bbe:	f7ff fa17 	bl	8006ff0 <SWAPBYTE>
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	461a      	mov	r2, r3
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	3301      	adds	r3, #1
 8007bce:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	3301      	adds	r3, #1
 8007bd4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007bd6:	68f8      	ldr	r0, [r7, #12]
 8007bd8:	f7ff fa0a 	bl	8006ff0 <SWAPBYTE>
 8007bdc:	4603      	mov	r3, r0
 8007bde:	461a      	mov	r2, r3
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	3301      	adds	r3, #1
 8007be8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	3301      	adds	r3, #1
 8007bee:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007bf0:	68f8      	ldr	r0, [r7, #12]
 8007bf2:	f7ff f9fd 	bl	8006ff0 <SWAPBYTE>
 8007bf6:	4603      	mov	r3, r0
 8007bf8:	461a      	mov	r2, r3
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	80da      	strh	r2, [r3, #6]
}
 8007bfe:	bf00      	nop
 8007c00:	3710      	adds	r7, #16
 8007c02:	46bd      	mov	sp, r7
 8007c04:	bd80      	pop	{r7, pc}

08007c06 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c06:	b580      	push	{r7, lr}
 8007c08:	b082      	sub	sp, #8
 8007c0a:	af00      	add	r7, sp, #0
 8007c0c:	6078      	str	r0, [r7, #4]
 8007c0e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007c10:	2180      	movs	r1, #128	; 0x80
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	f003 fa32 	bl	800b07c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007c18:	2100      	movs	r1, #0
 8007c1a:	6878      	ldr	r0, [r7, #4]
 8007c1c:	f003 fa2e 	bl	800b07c <USBD_LL_StallEP>
}
 8007c20:	bf00      	nop
 8007c22:	3708      	adds	r7, #8
 8007c24:	46bd      	mov	sp, r7
 8007c26:	bd80      	pop	{r7, pc}

08007c28 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b086      	sub	sp, #24
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	60f8      	str	r0, [r7, #12]
 8007c30:	60b9      	str	r1, [r7, #8]
 8007c32:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007c34:	2300      	movs	r3, #0
 8007c36:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d036      	beq.n	8007cac <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007c42:	6938      	ldr	r0, [r7, #16]
 8007c44:	f000 f836 	bl	8007cb4 <USBD_GetLen>
 8007c48:	4603      	mov	r3, r0
 8007c4a:	3301      	adds	r3, #1
 8007c4c:	b29b      	uxth	r3, r3
 8007c4e:	005b      	lsls	r3, r3, #1
 8007c50:	b29a      	uxth	r2, r3
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007c56:	7dfb      	ldrb	r3, [r7, #23]
 8007c58:	68ba      	ldr	r2, [r7, #8]
 8007c5a:	4413      	add	r3, r2
 8007c5c:	687a      	ldr	r2, [r7, #4]
 8007c5e:	7812      	ldrb	r2, [r2, #0]
 8007c60:	701a      	strb	r2, [r3, #0]
  idx++;
 8007c62:	7dfb      	ldrb	r3, [r7, #23]
 8007c64:	3301      	adds	r3, #1
 8007c66:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007c68:	7dfb      	ldrb	r3, [r7, #23]
 8007c6a:	68ba      	ldr	r2, [r7, #8]
 8007c6c:	4413      	add	r3, r2
 8007c6e:	2203      	movs	r2, #3
 8007c70:	701a      	strb	r2, [r3, #0]
  idx++;
 8007c72:	7dfb      	ldrb	r3, [r7, #23]
 8007c74:	3301      	adds	r3, #1
 8007c76:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007c78:	e013      	b.n	8007ca2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007c7a:	7dfb      	ldrb	r3, [r7, #23]
 8007c7c:	68ba      	ldr	r2, [r7, #8]
 8007c7e:	4413      	add	r3, r2
 8007c80:	693a      	ldr	r2, [r7, #16]
 8007c82:	7812      	ldrb	r2, [r2, #0]
 8007c84:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007c86:	693b      	ldr	r3, [r7, #16]
 8007c88:	3301      	adds	r3, #1
 8007c8a:	613b      	str	r3, [r7, #16]
    idx++;
 8007c8c:	7dfb      	ldrb	r3, [r7, #23]
 8007c8e:	3301      	adds	r3, #1
 8007c90:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007c92:	7dfb      	ldrb	r3, [r7, #23]
 8007c94:	68ba      	ldr	r2, [r7, #8]
 8007c96:	4413      	add	r3, r2
 8007c98:	2200      	movs	r2, #0
 8007c9a:	701a      	strb	r2, [r3, #0]
    idx++;
 8007c9c:	7dfb      	ldrb	r3, [r7, #23]
 8007c9e:	3301      	adds	r3, #1
 8007ca0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007ca2:	693b      	ldr	r3, [r7, #16]
 8007ca4:	781b      	ldrb	r3, [r3, #0]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d1e7      	bne.n	8007c7a <USBD_GetString+0x52>
 8007caa:	e000      	b.n	8007cae <USBD_GetString+0x86>
    return;
 8007cac:	bf00      	nop
  }
}
 8007cae:	3718      	adds	r7, #24
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	bd80      	pop	{r7, pc}

08007cb4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007cb4:	b480      	push	{r7}
 8007cb6:	b085      	sub	sp, #20
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007cc4:	e005      	b.n	8007cd2 <USBD_GetLen+0x1e>
  {
    len++;
 8007cc6:	7bfb      	ldrb	r3, [r7, #15]
 8007cc8:	3301      	adds	r3, #1
 8007cca:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007ccc:	68bb      	ldr	r3, [r7, #8]
 8007cce:	3301      	adds	r3, #1
 8007cd0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007cd2:	68bb      	ldr	r3, [r7, #8]
 8007cd4:	781b      	ldrb	r3, [r3, #0]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d1f5      	bne.n	8007cc6 <USBD_GetLen+0x12>
  }

  return len;
 8007cda:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cdc:	4618      	mov	r0, r3
 8007cde:	3714      	adds	r7, #20
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce6:	4770      	bx	lr

08007ce8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b084      	sub	sp, #16
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	60f8      	str	r0, [r7, #12]
 8007cf0:	60b9      	str	r1, [r7, #8]
 8007cf2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	2202      	movs	r2, #2
 8007cf8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	687a      	ldr	r2, [r7, #4]
 8007d00:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	687a      	ldr	r2, [r7, #4]
 8007d06:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	68ba      	ldr	r2, [r7, #8]
 8007d0c:	2100      	movs	r1, #0
 8007d0e:	68f8      	ldr	r0, [r7, #12]
 8007d10:	f003 fa82 	bl	800b218 <USBD_LL_Transmit>

  return USBD_OK;
 8007d14:	2300      	movs	r3, #0
}
 8007d16:	4618      	mov	r0, r3
 8007d18:	3710      	adds	r7, #16
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	bd80      	pop	{r7, pc}

08007d1e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007d1e:	b580      	push	{r7, lr}
 8007d20:	b084      	sub	sp, #16
 8007d22:	af00      	add	r7, sp, #0
 8007d24:	60f8      	str	r0, [r7, #12]
 8007d26:	60b9      	str	r1, [r7, #8]
 8007d28:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	68ba      	ldr	r2, [r7, #8]
 8007d2e:	2100      	movs	r1, #0
 8007d30:	68f8      	ldr	r0, [r7, #12]
 8007d32:	f003 fa71 	bl	800b218 <USBD_LL_Transmit>

  return USBD_OK;
 8007d36:	2300      	movs	r3, #0
}
 8007d38:	4618      	mov	r0, r3
 8007d3a:	3710      	adds	r7, #16
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	bd80      	pop	{r7, pc}

08007d40 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b084      	sub	sp, #16
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	60f8      	str	r0, [r7, #12]
 8007d48:	60b9      	str	r1, [r7, #8]
 8007d4a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	68ba      	ldr	r2, [r7, #8]
 8007d50:	2100      	movs	r1, #0
 8007d52:	68f8      	ldr	r0, [r7, #12]
 8007d54:	f003 fa98 	bl	800b288 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007d58:	2300      	movs	r3, #0
}
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	3710      	adds	r7, #16
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	bd80      	pop	{r7, pc}

08007d62 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007d62:	b580      	push	{r7, lr}
 8007d64:	b082      	sub	sp, #8
 8007d66:	af00      	add	r7, sp, #0
 8007d68:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	2204      	movs	r2, #4
 8007d6e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007d72:	2300      	movs	r3, #0
 8007d74:	2200      	movs	r2, #0
 8007d76:	2100      	movs	r1, #0
 8007d78:	6878      	ldr	r0, [r7, #4]
 8007d7a:	f003 fa4d 	bl	800b218 <USBD_LL_Transmit>

  return USBD_OK;
 8007d7e:	2300      	movs	r3, #0
}
 8007d80:	4618      	mov	r0, r3
 8007d82:	3708      	adds	r7, #8
 8007d84:	46bd      	mov	sp, r7
 8007d86:	bd80      	pop	{r7, pc}

08007d88 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b082      	sub	sp, #8
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2205      	movs	r2, #5
 8007d94:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007d98:	2300      	movs	r3, #0
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	2100      	movs	r1, #0
 8007d9e:	6878      	ldr	r0, [r7, #4]
 8007da0:	f003 fa72 	bl	800b288 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007da4:	2300      	movs	r3, #0
}
 8007da6:	4618      	mov	r0, r3
 8007da8:	3708      	adds	r7, #8
 8007daa:	46bd      	mov	sp, r7
 8007dac:	bd80      	pop	{r7, pc}
	...

08007db0 <__NVIC_SetPriority>:
{
 8007db0:	b480      	push	{r7}
 8007db2:	b083      	sub	sp, #12
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	4603      	mov	r3, r0
 8007db8:	6039      	str	r1, [r7, #0]
 8007dba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007dbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	db0a      	blt.n	8007dda <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	b2da      	uxtb	r2, r3
 8007dc8:	490c      	ldr	r1, [pc, #48]	; (8007dfc <__NVIC_SetPriority+0x4c>)
 8007dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007dce:	0112      	lsls	r2, r2, #4
 8007dd0:	b2d2      	uxtb	r2, r2
 8007dd2:	440b      	add	r3, r1
 8007dd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007dd8:	e00a      	b.n	8007df0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	b2da      	uxtb	r2, r3
 8007dde:	4908      	ldr	r1, [pc, #32]	; (8007e00 <__NVIC_SetPriority+0x50>)
 8007de0:	79fb      	ldrb	r3, [r7, #7]
 8007de2:	f003 030f 	and.w	r3, r3, #15
 8007de6:	3b04      	subs	r3, #4
 8007de8:	0112      	lsls	r2, r2, #4
 8007dea:	b2d2      	uxtb	r2, r2
 8007dec:	440b      	add	r3, r1
 8007dee:	761a      	strb	r2, [r3, #24]
}
 8007df0:	bf00      	nop
 8007df2:	370c      	adds	r7, #12
 8007df4:	46bd      	mov	sp, r7
 8007df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfa:	4770      	bx	lr
 8007dfc:	e000e100 	.word	0xe000e100
 8007e00:	e000ed00 	.word	0xe000ed00

08007e04 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007e04:	b580      	push	{r7, lr}
 8007e06:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007e08:	2100      	movs	r1, #0
 8007e0a:	f06f 0004 	mvn.w	r0, #4
 8007e0e:	f7ff ffcf 	bl	8007db0 <__NVIC_SetPriority>
#endif
}
 8007e12:	bf00      	nop
 8007e14:	bd80      	pop	{r7, pc}
	...

08007e18 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007e18:	b480      	push	{r7}
 8007e1a:	b083      	sub	sp, #12
 8007e1c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007e1e:	f3ef 8305 	mrs	r3, IPSR
 8007e22:	603b      	str	r3, [r7, #0]
  return(result);
 8007e24:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d003      	beq.n	8007e32 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007e2a:	f06f 0305 	mvn.w	r3, #5
 8007e2e:	607b      	str	r3, [r7, #4]
 8007e30:	e00c      	b.n	8007e4c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007e32:	4b0a      	ldr	r3, [pc, #40]	; (8007e5c <osKernelInitialize+0x44>)
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d105      	bne.n	8007e46 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007e3a:	4b08      	ldr	r3, [pc, #32]	; (8007e5c <osKernelInitialize+0x44>)
 8007e3c:	2201      	movs	r2, #1
 8007e3e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007e40:	2300      	movs	r3, #0
 8007e42:	607b      	str	r3, [r7, #4]
 8007e44:	e002      	b.n	8007e4c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007e46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007e4a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007e4c:	687b      	ldr	r3, [r7, #4]
}
 8007e4e:	4618      	mov	r0, r3
 8007e50:	370c      	adds	r7, #12
 8007e52:	46bd      	mov	sp, r7
 8007e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e58:	4770      	bx	lr
 8007e5a:	bf00      	nop
 8007e5c:	20000230 	.word	0x20000230

08007e60 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b082      	sub	sp, #8
 8007e64:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007e66:	f3ef 8305 	mrs	r3, IPSR
 8007e6a:	603b      	str	r3, [r7, #0]
  return(result);
 8007e6c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d003      	beq.n	8007e7a <osKernelStart+0x1a>
    stat = osErrorISR;
 8007e72:	f06f 0305 	mvn.w	r3, #5
 8007e76:	607b      	str	r3, [r7, #4]
 8007e78:	e010      	b.n	8007e9c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007e7a:	4b0b      	ldr	r3, [pc, #44]	; (8007ea8 <osKernelStart+0x48>)
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	2b01      	cmp	r3, #1
 8007e80:	d109      	bne.n	8007e96 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007e82:	f7ff ffbf 	bl	8007e04 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007e86:	4b08      	ldr	r3, [pc, #32]	; (8007ea8 <osKernelStart+0x48>)
 8007e88:	2202      	movs	r2, #2
 8007e8a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007e8c:	f001 f866 	bl	8008f5c <vTaskStartScheduler>
      stat = osOK;
 8007e90:	2300      	movs	r3, #0
 8007e92:	607b      	str	r3, [r7, #4]
 8007e94:	e002      	b.n	8007e9c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007e96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007e9a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007e9c:	687b      	ldr	r3, [r7, #4]
}
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	3708      	adds	r7, #8
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	bd80      	pop	{r7, pc}
 8007ea6:	bf00      	nop
 8007ea8:	20000230 	.word	0x20000230

08007eac <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b08e      	sub	sp, #56	; 0x38
 8007eb0:	af04      	add	r7, sp, #16
 8007eb2:	60f8      	str	r0, [r7, #12]
 8007eb4:	60b9      	str	r1, [r7, #8]
 8007eb6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007eb8:	2300      	movs	r3, #0
 8007eba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007ebc:	f3ef 8305 	mrs	r3, IPSR
 8007ec0:	617b      	str	r3, [r7, #20]
  return(result);
 8007ec2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d17e      	bne.n	8007fc6 <osThreadNew+0x11a>
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d07b      	beq.n	8007fc6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007ece:	2380      	movs	r3, #128	; 0x80
 8007ed0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007ed2:	2318      	movs	r3, #24
 8007ed4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8007eda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007ede:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d045      	beq.n	8007f72 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d002      	beq.n	8007ef4 <osThreadNew+0x48>
        name = attr->name;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	699b      	ldr	r3, [r3, #24]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d002      	beq.n	8007f02 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	699b      	ldr	r3, [r3, #24]
 8007f00:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007f02:	69fb      	ldr	r3, [r7, #28]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d008      	beq.n	8007f1a <osThreadNew+0x6e>
 8007f08:	69fb      	ldr	r3, [r7, #28]
 8007f0a:	2b38      	cmp	r3, #56	; 0x38
 8007f0c:	d805      	bhi.n	8007f1a <osThreadNew+0x6e>
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	685b      	ldr	r3, [r3, #4]
 8007f12:	f003 0301 	and.w	r3, r3, #1
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d001      	beq.n	8007f1e <osThreadNew+0x72>
        return (NULL);
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	e054      	b.n	8007fc8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	695b      	ldr	r3, [r3, #20]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d003      	beq.n	8007f2e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	695b      	ldr	r3, [r3, #20]
 8007f2a:	089b      	lsrs	r3, r3, #2
 8007f2c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	689b      	ldr	r3, [r3, #8]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d00e      	beq.n	8007f54 <osThreadNew+0xa8>
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	68db      	ldr	r3, [r3, #12]
 8007f3a:	2b5b      	cmp	r3, #91	; 0x5b
 8007f3c:	d90a      	bls.n	8007f54 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d006      	beq.n	8007f54 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	695b      	ldr	r3, [r3, #20]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d002      	beq.n	8007f54 <osThreadNew+0xa8>
        mem = 1;
 8007f4e:	2301      	movs	r3, #1
 8007f50:	61bb      	str	r3, [r7, #24]
 8007f52:	e010      	b.n	8007f76 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	689b      	ldr	r3, [r3, #8]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d10c      	bne.n	8007f76 <osThreadNew+0xca>
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	68db      	ldr	r3, [r3, #12]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d108      	bne.n	8007f76 <osThreadNew+0xca>
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	691b      	ldr	r3, [r3, #16]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d104      	bne.n	8007f76 <osThreadNew+0xca>
          mem = 0;
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	61bb      	str	r3, [r7, #24]
 8007f70:	e001      	b.n	8007f76 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007f72:	2300      	movs	r3, #0
 8007f74:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007f76:	69bb      	ldr	r3, [r7, #24]
 8007f78:	2b01      	cmp	r3, #1
 8007f7a:	d110      	bne.n	8007f9e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007f80:	687a      	ldr	r2, [r7, #4]
 8007f82:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007f84:	9202      	str	r2, [sp, #8]
 8007f86:	9301      	str	r3, [sp, #4]
 8007f88:	69fb      	ldr	r3, [r7, #28]
 8007f8a:	9300      	str	r3, [sp, #0]
 8007f8c:	68bb      	ldr	r3, [r7, #8]
 8007f8e:	6a3a      	ldr	r2, [r7, #32]
 8007f90:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007f92:	68f8      	ldr	r0, [r7, #12]
 8007f94:	f000 fe0c 	bl	8008bb0 <xTaskCreateStatic>
 8007f98:	4603      	mov	r3, r0
 8007f9a:	613b      	str	r3, [r7, #16]
 8007f9c:	e013      	b.n	8007fc6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007f9e:	69bb      	ldr	r3, [r7, #24]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d110      	bne.n	8007fc6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007fa4:	6a3b      	ldr	r3, [r7, #32]
 8007fa6:	b29a      	uxth	r2, r3
 8007fa8:	f107 0310 	add.w	r3, r7, #16
 8007fac:	9301      	str	r3, [sp, #4]
 8007fae:	69fb      	ldr	r3, [r7, #28]
 8007fb0:	9300      	str	r3, [sp, #0]
 8007fb2:	68bb      	ldr	r3, [r7, #8]
 8007fb4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007fb6:	68f8      	ldr	r0, [r7, #12]
 8007fb8:	f000 fe57 	bl	8008c6a <xTaskCreate>
 8007fbc:	4603      	mov	r3, r0
 8007fbe:	2b01      	cmp	r3, #1
 8007fc0:	d001      	beq.n	8007fc6 <osThreadNew+0x11a>
            hTask = NULL;
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007fc6:	693b      	ldr	r3, [r7, #16]
}
 8007fc8:	4618      	mov	r0, r3
 8007fca:	3728      	adds	r7, #40	; 0x28
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	bd80      	pop	{r7, pc}

08007fd0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b084      	sub	sp, #16
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007fd8:	f3ef 8305 	mrs	r3, IPSR
 8007fdc:	60bb      	str	r3, [r7, #8]
  return(result);
 8007fde:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d003      	beq.n	8007fec <osDelay+0x1c>
    stat = osErrorISR;
 8007fe4:	f06f 0305 	mvn.w	r3, #5
 8007fe8:	60fb      	str	r3, [r7, #12]
 8007fea:	e007      	b.n	8007ffc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007fec:	2300      	movs	r3, #0
 8007fee:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d002      	beq.n	8007ffc <osDelay+0x2c>
      vTaskDelay(ticks);
 8007ff6:	6878      	ldr	r0, [r7, #4]
 8007ff8:	f000 ff7c 	bl	8008ef4 <vTaskDelay>
    }
  }

  return (stat);
 8007ffc:	68fb      	ldr	r3, [r7, #12]
}
 8007ffe:	4618      	mov	r0, r3
 8008000:	3710      	adds	r7, #16
 8008002:	46bd      	mov	sp, r7
 8008004:	bd80      	pop	{r7, pc}
	...

08008008 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008008:	b480      	push	{r7}
 800800a:	b085      	sub	sp, #20
 800800c:	af00      	add	r7, sp, #0
 800800e:	60f8      	str	r0, [r7, #12]
 8008010:	60b9      	str	r1, [r7, #8]
 8008012:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	4a07      	ldr	r2, [pc, #28]	; (8008034 <vApplicationGetIdleTaskMemory+0x2c>)
 8008018:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800801a:	68bb      	ldr	r3, [r7, #8]
 800801c:	4a06      	ldr	r2, [pc, #24]	; (8008038 <vApplicationGetIdleTaskMemory+0x30>)
 800801e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2280      	movs	r2, #128	; 0x80
 8008024:	601a      	str	r2, [r3, #0]
}
 8008026:	bf00      	nop
 8008028:	3714      	adds	r7, #20
 800802a:	46bd      	mov	sp, r7
 800802c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008030:	4770      	bx	lr
 8008032:	bf00      	nop
 8008034:	20000234 	.word	0x20000234
 8008038:	20000290 	.word	0x20000290

0800803c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800803c:	b480      	push	{r7}
 800803e:	b085      	sub	sp, #20
 8008040:	af00      	add	r7, sp, #0
 8008042:	60f8      	str	r0, [r7, #12]
 8008044:	60b9      	str	r1, [r7, #8]
 8008046:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	4a07      	ldr	r2, [pc, #28]	; (8008068 <vApplicationGetTimerTaskMemory+0x2c>)
 800804c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800804e:	68bb      	ldr	r3, [r7, #8]
 8008050:	4a06      	ldr	r2, [pc, #24]	; (800806c <vApplicationGetTimerTaskMemory+0x30>)
 8008052:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	f44f 7280 	mov.w	r2, #256	; 0x100
 800805a:	601a      	str	r2, [r3, #0]
}
 800805c:	bf00      	nop
 800805e:	3714      	adds	r7, #20
 8008060:	46bd      	mov	sp, r7
 8008062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008066:	4770      	bx	lr
 8008068:	20000490 	.word	0x20000490
 800806c:	200004ec 	.word	0x200004ec

08008070 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008070:	b480      	push	{r7}
 8008072:	b083      	sub	sp, #12
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	f103 0208 	add.w	r2, r3, #8
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008088:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	f103 0208 	add.w	r2, r3, #8
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	f103 0208 	add.w	r2, r3, #8
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	2200      	movs	r2, #0
 80080a2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80080a4:	bf00      	nop
 80080a6:	370c      	adds	r7, #12
 80080a8:	46bd      	mov	sp, r7
 80080aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ae:	4770      	bx	lr

080080b0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80080b0:	b480      	push	{r7}
 80080b2:	b083      	sub	sp, #12
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2200      	movs	r2, #0
 80080bc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80080be:	bf00      	nop
 80080c0:	370c      	adds	r7, #12
 80080c2:	46bd      	mov	sp, r7
 80080c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c8:	4770      	bx	lr

080080ca <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80080ca:	b480      	push	{r7}
 80080cc:	b085      	sub	sp, #20
 80080ce:	af00      	add	r7, sp, #0
 80080d0:	6078      	str	r0, [r7, #4]
 80080d2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	685b      	ldr	r3, [r3, #4]
 80080d8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80080da:	683b      	ldr	r3, [r7, #0]
 80080dc:	68fa      	ldr	r2, [r7, #12]
 80080de:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	689a      	ldr	r2, [r3, #8]
 80080e4:	683b      	ldr	r3, [r7, #0]
 80080e6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	689b      	ldr	r3, [r3, #8]
 80080ec:	683a      	ldr	r2, [r7, #0]
 80080ee:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	683a      	ldr	r2, [r7, #0]
 80080f4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	687a      	ldr	r2, [r7, #4]
 80080fa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	1c5a      	adds	r2, r3, #1
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	601a      	str	r2, [r3, #0]
}
 8008106:	bf00      	nop
 8008108:	3714      	adds	r7, #20
 800810a:	46bd      	mov	sp, r7
 800810c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008110:	4770      	bx	lr

08008112 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008112:	b480      	push	{r7}
 8008114:	b085      	sub	sp, #20
 8008116:	af00      	add	r7, sp, #0
 8008118:	6078      	str	r0, [r7, #4]
 800811a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008122:	68bb      	ldr	r3, [r7, #8]
 8008124:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008128:	d103      	bne.n	8008132 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	691b      	ldr	r3, [r3, #16]
 800812e:	60fb      	str	r3, [r7, #12]
 8008130:	e00c      	b.n	800814c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	3308      	adds	r3, #8
 8008136:	60fb      	str	r3, [r7, #12]
 8008138:	e002      	b.n	8008140 <vListInsert+0x2e>
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	685b      	ldr	r3, [r3, #4]
 800813e:	60fb      	str	r3, [r7, #12]
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	685b      	ldr	r3, [r3, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	68ba      	ldr	r2, [r7, #8]
 8008148:	429a      	cmp	r2, r3
 800814a:	d2f6      	bcs.n	800813a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	685a      	ldr	r2, [r3, #4]
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008154:	683b      	ldr	r3, [r7, #0]
 8008156:	685b      	ldr	r3, [r3, #4]
 8008158:	683a      	ldr	r2, [r7, #0]
 800815a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	68fa      	ldr	r2, [r7, #12]
 8008160:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	683a      	ldr	r2, [r7, #0]
 8008166:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	687a      	ldr	r2, [r7, #4]
 800816c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	1c5a      	adds	r2, r3, #1
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	601a      	str	r2, [r3, #0]
}
 8008178:	bf00      	nop
 800817a:	3714      	adds	r7, #20
 800817c:	46bd      	mov	sp, r7
 800817e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008182:	4770      	bx	lr

08008184 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008184:	b480      	push	{r7}
 8008186:	b085      	sub	sp, #20
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	691b      	ldr	r3, [r3, #16]
 8008190:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	685b      	ldr	r3, [r3, #4]
 8008196:	687a      	ldr	r2, [r7, #4]
 8008198:	6892      	ldr	r2, [r2, #8]
 800819a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	689b      	ldr	r3, [r3, #8]
 80081a0:	687a      	ldr	r2, [r7, #4]
 80081a2:	6852      	ldr	r2, [r2, #4]
 80081a4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	685b      	ldr	r3, [r3, #4]
 80081aa:	687a      	ldr	r2, [r7, #4]
 80081ac:	429a      	cmp	r2, r3
 80081ae:	d103      	bne.n	80081b8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	689a      	ldr	r2, [r3, #8]
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2200      	movs	r2, #0
 80081bc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	1e5a      	subs	r2, r3, #1
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	681b      	ldr	r3, [r3, #0]
}
 80081cc:	4618      	mov	r0, r3
 80081ce:	3714      	adds	r7, #20
 80081d0:	46bd      	mov	sp, r7
 80081d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d6:	4770      	bx	lr

080081d8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b084      	sub	sp, #16
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
 80081e0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d10a      	bne.n	8008202 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80081ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081f0:	f383 8811 	msr	BASEPRI, r3
 80081f4:	f3bf 8f6f 	isb	sy
 80081f8:	f3bf 8f4f 	dsb	sy
 80081fc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80081fe:	bf00      	nop
 8008200:	e7fe      	b.n	8008200 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008202:	f002 f84f 	bl	800a2a4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	681a      	ldr	r2, [r3, #0]
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800820e:	68f9      	ldr	r1, [r7, #12]
 8008210:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008212:	fb01 f303 	mul.w	r3, r1, r3
 8008216:	441a      	add	r2, r3
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	2200      	movs	r2, #0
 8008220:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	681a      	ldr	r2, [r3, #0]
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	681a      	ldr	r2, [r3, #0]
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008232:	3b01      	subs	r3, #1
 8008234:	68f9      	ldr	r1, [r7, #12]
 8008236:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008238:	fb01 f303 	mul.w	r3, r1, r3
 800823c:	441a      	add	r2, r3
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	22ff      	movs	r2, #255	; 0xff
 8008246:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	22ff      	movs	r2, #255	; 0xff
 800824e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d114      	bne.n	8008282 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	691b      	ldr	r3, [r3, #16]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d01a      	beq.n	8008296 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	3310      	adds	r3, #16
 8008264:	4618      	mov	r0, r3
 8008266:	f001 f903 	bl	8009470 <xTaskRemoveFromEventList>
 800826a:	4603      	mov	r3, r0
 800826c:	2b00      	cmp	r3, #0
 800826e:	d012      	beq.n	8008296 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008270:	4b0c      	ldr	r3, [pc, #48]	; (80082a4 <xQueueGenericReset+0xcc>)
 8008272:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008276:	601a      	str	r2, [r3, #0]
 8008278:	f3bf 8f4f 	dsb	sy
 800827c:	f3bf 8f6f 	isb	sy
 8008280:	e009      	b.n	8008296 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	3310      	adds	r3, #16
 8008286:	4618      	mov	r0, r3
 8008288:	f7ff fef2 	bl	8008070 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	3324      	adds	r3, #36	; 0x24
 8008290:	4618      	mov	r0, r3
 8008292:	f7ff feed 	bl	8008070 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008296:	f002 f835 	bl	800a304 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800829a:	2301      	movs	r3, #1
}
 800829c:	4618      	mov	r0, r3
 800829e:	3710      	adds	r7, #16
 80082a0:	46bd      	mov	sp, r7
 80082a2:	bd80      	pop	{r7, pc}
 80082a4:	e000ed04 	.word	0xe000ed04

080082a8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b08e      	sub	sp, #56	; 0x38
 80082ac:	af02      	add	r7, sp, #8
 80082ae:	60f8      	str	r0, [r7, #12]
 80082b0:	60b9      	str	r1, [r7, #8]
 80082b2:	607a      	str	r2, [r7, #4]
 80082b4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d10a      	bne.n	80082d2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80082bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082c0:	f383 8811 	msr	BASEPRI, r3
 80082c4:	f3bf 8f6f 	isb	sy
 80082c8:	f3bf 8f4f 	dsb	sy
 80082cc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80082ce:	bf00      	nop
 80082d0:	e7fe      	b.n	80082d0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d10a      	bne.n	80082ee <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80082d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082dc:	f383 8811 	msr	BASEPRI, r3
 80082e0:	f3bf 8f6f 	isb	sy
 80082e4:	f3bf 8f4f 	dsb	sy
 80082e8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80082ea:	bf00      	nop
 80082ec:	e7fe      	b.n	80082ec <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d002      	beq.n	80082fa <xQueueGenericCreateStatic+0x52>
 80082f4:	68bb      	ldr	r3, [r7, #8]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d001      	beq.n	80082fe <xQueueGenericCreateStatic+0x56>
 80082fa:	2301      	movs	r3, #1
 80082fc:	e000      	b.n	8008300 <xQueueGenericCreateStatic+0x58>
 80082fe:	2300      	movs	r3, #0
 8008300:	2b00      	cmp	r3, #0
 8008302:	d10a      	bne.n	800831a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008308:	f383 8811 	msr	BASEPRI, r3
 800830c:	f3bf 8f6f 	isb	sy
 8008310:	f3bf 8f4f 	dsb	sy
 8008314:	623b      	str	r3, [r7, #32]
}
 8008316:	bf00      	nop
 8008318:	e7fe      	b.n	8008318 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d102      	bne.n	8008326 <xQueueGenericCreateStatic+0x7e>
 8008320:	68bb      	ldr	r3, [r7, #8]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d101      	bne.n	800832a <xQueueGenericCreateStatic+0x82>
 8008326:	2301      	movs	r3, #1
 8008328:	e000      	b.n	800832c <xQueueGenericCreateStatic+0x84>
 800832a:	2300      	movs	r3, #0
 800832c:	2b00      	cmp	r3, #0
 800832e:	d10a      	bne.n	8008346 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008334:	f383 8811 	msr	BASEPRI, r3
 8008338:	f3bf 8f6f 	isb	sy
 800833c:	f3bf 8f4f 	dsb	sy
 8008340:	61fb      	str	r3, [r7, #28]
}
 8008342:	bf00      	nop
 8008344:	e7fe      	b.n	8008344 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008346:	2350      	movs	r3, #80	; 0x50
 8008348:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800834a:	697b      	ldr	r3, [r7, #20]
 800834c:	2b50      	cmp	r3, #80	; 0x50
 800834e:	d00a      	beq.n	8008366 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008354:	f383 8811 	msr	BASEPRI, r3
 8008358:	f3bf 8f6f 	isb	sy
 800835c:	f3bf 8f4f 	dsb	sy
 8008360:	61bb      	str	r3, [r7, #24]
}
 8008362:	bf00      	nop
 8008364:	e7fe      	b.n	8008364 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008366:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800836c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800836e:	2b00      	cmp	r3, #0
 8008370:	d00d      	beq.n	800838e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008374:	2201      	movs	r2, #1
 8008376:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800837a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800837e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008380:	9300      	str	r3, [sp, #0]
 8008382:	4613      	mov	r3, r2
 8008384:	687a      	ldr	r2, [r7, #4]
 8008386:	68b9      	ldr	r1, [r7, #8]
 8008388:	68f8      	ldr	r0, [r7, #12]
 800838a:	f000 f805 	bl	8008398 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800838e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008390:	4618      	mov	r0, r3
 8008392:	3730      	adds	r7, #48	; 0x30
 8008394:	46bd      	mov	sp, r7
 8008396:	bd80      	pop	{r7, pc}

08008398 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008398:	b580      	push	{r7, lr}
 800839a:	b084      	sub	sp, #16
 800839c:	af00      	add	r7, sp, #0
 800839e:	60f8      	str	r0, [r7, #12]
 80083a0:	60b9      	str	r1, [r7, #8]
 80083a2:	607a      	str	r2, [r7, #4]
 80083a4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80083a6:	68bb      	ldr	r3, [r7, #8]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d103      	bne.n	80083b4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80083ac:	69bb      	ldr	r3, [r7, #24]
 80083ae:	69ba      	ldr	r2, [r7, #24]
 80083b0:	601a      	str	r2, [r3, #0]
 80083b2:	e002      	b.n	80083ba <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80083b4:	69bb      	ldr	r3, [r7, #24]
 80083b6:	687a      	ldr	r2, [r7, #4]
 80083b8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80083ba:	69bb      	ldr	r3, [r7, #24]
 80083bc:	68fa      	ldr	r2, [r7, #12]
 80083be:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80083c0:	69bb      	ldr	r3, [r7, #24]
 80083c2:	68ba      	ldr	r2, [r7, #8]
 80083c4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80083c6:	2101      	movs	r1, #1
 80083c8:	69b8      	ldr	r0, [r7, #24]
 80083ca:	f7ff ff05 	bl	80081d8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80083ce:	69bb      	ldr	r3, [r7, #24]
 80083d0:	78fa      	ldrb	r2, [r7, #3]
 80083d2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80083d6:	bf00      	nop
 80083d8:	3710      	adds	r7, #16
 80083da:	46bd      	mov	sp, r7
 80083dc:	bd80      	pop	{r7, pc}
	...

080083e0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b08e      	sub	sp, #56	; 0x38
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	60f8      	str	r0, [r7, #12]
 80083e8:	60b9      	str	r1, [r7, #8]
 80083ea:	607a      	str	r2, [r7, #4]
 80083ec:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80083ee:	2300      	movs	r3, #0
 80083f0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80083f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d10a      	bne.n	8008412 <xQueueGenericSend+0x32>
	__asm volatile
 80083fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008400:	f383 8811 	msr	BASEPRI, r3
 8008404:	f3bf 8f6f 	isb	sy
 8008408:	f3bf 8f4f 	dsb	sy
 800840c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800840e:	bf00      	nop
 8008410:	e7fe      	b.n	8008410 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008412:	68bb      	ldr	r3, [r7, #8]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d103      	bne.n	8008420 <xQueueGenericSend+0x40>
 8008418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800841a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800841c:	2b00      	cmp	r3, #0
 800841e:	d101      	bne.n	8008424 <xQueueGenericSend+0x44>
 8008420:	2301      	movs	r3, #1
 8008422:	e000      	b.n	8008426 <xQueueGenericSend+0x46>
 8008424:	2300      	movs	r3, #0
 8008426:	2b00      	cmp	r3, #0
 8008428:	d10a      	bne.n	8008440 <xQueueGenericSend+0x60>
	__asm volatile
 800842a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800842e:	f383 8811 	msr	BASEPRI, r3
 8008432:	f3bf 8f6f 	isb	sy
 8008436:	f3bf 8f4f 	dsb	sy
 800843a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800843c:	bf00      	nop
 800843e:	e7fe      	b.n	800843e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008440:	683b      	ldr	r3, [r7, #0]
 8008442:	2b02      	cmp	r3, #2
 8008444:	d103      	bne.n	800844e <xQueueGenericSend+0x6e>
 8008446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008448:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800844a:	2b01      	cmp	r3, #1
 800844c:	d101      	bne.n	8008452 <xQueueGenericSend+0x72>
 800844e:	2301      	movs	r3, #1
 8008450:	e000      	b.n	8008454 <xQueueGenericSend+0x74>
 8008452:	2300      	movs	r3, #0
 8008454:	2b00      	cmp	r3, #0
 8008456:	d10a      	bne.n	800846e <xQueueGenericSend+0x8e>
	__asm volatile
 8008458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800845c:	f383 8811 	msr	BASEPRI, r3
 8008460:	f3bf 8f6f 	isb	sy
 8008464:	f3bf 8f4f 	dsb	sy
 8008468:	623b      	str	r3, [r7, #32]
}
 800846a:	bf00      	nop
 800846c:	e7fe      	b.n	800846c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800846e:	f001 f9bd 	bl	80097ec <xTaskGetSchedulerState>
 8008472:	4603      	mov	r3, r0
 8008474:	2b00      	cmp	r3, #0
 8008476:	d102      	bne.n	800847e <xQueueGenericSend+0x9e>
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d101      	bne.n	8008482 <xQueueGenericSend+0xa2>
 800847e:	2301      	movs	r3, #1
 8008480:	e000      	b.n	8008484 <xQueueGenericSend+0xa4>
 8008482:	2300      	movs	r3, #0
 8008484:	2b00      	cmp	r3, #0
 8008486:	d10a      	bne.n	800849e <xQueueGenericSend+0xbe>
	__asm volatile
 8008488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800848c:	f383 8811 	msr	BASEPRI, r3
 8008490:	f3bf 8f6f 	isb	sy
 8008494:	f3bf 8f4f 	dsb	sy
 8008498:	61fb      	str	r3, [r7, #28]
}
 800849a:	bf00      	nop
 800849c:	e7fe      	b.n	800849c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800849e:	f001 ff01 	bl	800a2a4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80084a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80084a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084aa:	429a      	cmp	r2, r3
 80084ac:	d302      	bcc.n	80084b4 <xQueueGenericSend+0xd4>
 80084ae:	683b      	ldr	r3, [r7, #0]
 80084b0:	2b02      	cmp	r3, #2
 80084b2:	d129      	bne.n	8008508 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80084b4:	683a      	ldr	r2, [r7, #0]
 80084b6:	68b9      	ldr	r1, [r7, #8]
 80084b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80084ba:	f000 fa0b 	bl	80088d4 <prvCopyDataToQueue>
 80084be:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80084c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d010      	beq.n	80084ea <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80084c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084ca:	3324      	adds	r3, #36	; 0x24
 80084cc:	4618      	mov	r0, r3
 80084ce:	f000 ffcf 	bl	8009470 <xTaskRemoveFromEventList>
 80084d2:	4603      	mov	r3, r0
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d013      	beq.n	8008500 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80084d8:	4b3f      	ldr	r3, [pc, #252]	; (80085d8 <xQueueGenericSend+0x1f8>)
 80084da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084de:	601a      	str	r2, [r3, #0]
 80084e0:	f3bf 8f4f 	dsb	sy
 80084e4:	f3bf 8f6f 	isb	sy
 80084e8:	e00a      	b.n	8008500 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80084ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d007      	beq.n	8008500 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80084f0:	4b39      	ldr	r3, [pc, #228]	; (80085d8 <xQueueGenericSend+0x1f8>)
 80084f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084f6:	601a      	str	r2, [r3, #0]
 80084f8:	f3bf 8f4f 	dsb	sy
 80084fc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008500:	f001 ff00 	bl	800a304 <vPortExitCritical>
				return pdPASS;
 8008504:	2301      	movs	r3, #1
 8008506:	e063      	b.n	80085d0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d103      	bne.n	8008516 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800850e:	f001 fef9 	bl	800a304 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008512:	2300      	movs	r3, #0
 8008514:	e05c      	b.n	80085d0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008516:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008518:	2b00      	cmp	r3, #0
 800851a:	d106      	bne.n	800852a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800851c:	f107 0314 	add.w	r3, r7, #20
 8008520:	4618      	mov	r0, r3
 8008522:	f001 f809 	bl	8009538 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008526:	2301      	movs	r3, #1
 8008528:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800852a:	f001 feeb 	bl	800a304 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800852e:	f000 fd7b 	bl	8009028 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008532:	f001 feb7 	bl	800a2a4 <vPortEnterCritical>
 8008536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008538:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800853c:	b25b      	sxtb	r3, r3
 800853e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008542:	d103      	bne.n	800854c <xQueueGenericSend+0x16c>
 8008544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008546:	2200      	movs	r2, #0
 8008548:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800854c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800854e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008552:	b25b      	sxtb	r3, r3
 8008554:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008558:	d103      	bne.n	8008562 <xQueueGenericSend+0x182>
 800855a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800855c:	2200      	movs	r2, #0
 800855e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008562:	f001 fecf 	bl	800a304 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008566:	1d3a      	adds	r2, r7, #4
 8008568:	f107 0314 	add.w	r3, r7, #20
 800856c:	4611      	mov	r1, r2
 800856e:	4618      	mov	r0, r3
 8008570:	f000 fff8 	bl	8009564 <xTaskCheckForTimeOut>
 8008574:	4603      	mov	r3, r0
 8008576:	2b00      	cmp	r3, #0
 8008578:	d124      	bne.n	80085c4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800857a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800857c:	f000 faa2 	bl	8008ac4 <prvIsQueueFull>
 8008580:	4603      	mov	r3, r0
 8008582:	2b00      	cmp	r3, #0
 8008584:	d018      	beq.n	80085b8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008588:	3310      	adds	r3, #16
 800858a:	687a      	ldr	r2, [r7, #4]
 800858c:	4611      	mov	r1, r2
 800858e:	4618      	mov	r0, r3
 8008590:	f000 ff1e 	bl	80093d0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008594:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008596:	f000 fa2d 	bl	80089f4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800859a:	f000 fd53 	bl	8009044 <xTaskResumeAll>
 800859e:	4603      	mov	r3, r0
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	f47f af7c 	bne.w	800849e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80085a6:	4b0c      	ldr	r3, [pc, #48]	; (80085d8 <xQueueGenericSend+0x1f8>)
 80085a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085ac:	601a      	str	r2, [r3, #0]
 80085ae:	f3bf 8f4f 	dsb	sy
 80085b2:	f3bf 8f6f 	isb	sy
 80085b6:	e772      	b.n	800849e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80085b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80085ba:	f000 fa1b 	bl	80089f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80085be:	f000 fd41 	bl	8009044 <xTaskResumeAll>
 80085c2:	e76c      	b.n	800849e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80085c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80085c6:	f000 fa15 	bl	80089f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80085ca:	f000 fd3b 	bl	8009044 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80085ce:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80085d0:	4618      	mov	r0, r3
 80085d2:	3738      	adds	r7, #56	; 0x38
 80085d4:	46bd      	mov	sp, r7
 80085d6:	bd80      	pop	{r7, pc}
 80085d8:	e000ed04 	.word	0xe000ed04

080085dc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	b090      	sub	sp, #64	; 0x40
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	60f8      	str	r0, [r7, #12]
 80085e4:	60b9      	str	r1, [r7, #8]
 80085e6:	607a      	str	r2, [r7, #4]
 80085e8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80085ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d10a      	bne.n	800860a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80085f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085f8:	f383 8811 	msr	BASEPRI, r3
 80085fc:	f3bf 8f6f 	isb	sy
 8008600:	f3bf 8f4f 	dsb	sy
 8008604:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008606:	bf00      	nop
 8008608:	e7fe      	b.n	8008608 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800860a:	68bb      	ldr	r3, [r7, #8]
 800860c:	2b00      	cmp	r3, #0
 800860e:	d103      	bne.n	8008618 <xQueueGenericSendFromISR+0x3c>
 8008610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008614:	2b00      	cmp	r3, #0
 8008616:	d101      	bne.n	800861c <xQueueGenericSendFromISR+0x40>
 8008618:	2301      	movs	r3, #1
 800861a:	e000      	b.n	800861e <xQueueGenericSendFromISR+0x42>
 800861c:	2300      	movs	r3, #0
 800861e:	2b00      	cmp	r3, #0
 8008620:	d10a      	bne.n	8008638 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8008622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008626:	f383 8811 	msr	BASEPRI, r3
 800862a:	f3bf 8f6f 	isb	sy
 800862e:	f3bf 8f4f 	dsb	sy
 8008632:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008634:	bf00      	nop
 8008636:	e7fe      	b.n	8008636 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008638:	683b      	ldr	r3, [r7, #0]
 800863a:	2b02      	cmp	r3, #2
 800863c:	d103      	bne.n	8008646 <xQueueGenericSendFromISR+0x6a>
 800863e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008640:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008642:	2b01      	cmp	r3, #1
 8008644:	d101      	bne.n	800864a <xQueueGenericSendFromISR+0x6e>
 8008646:	2301      	movs	r3, #1
 8008648:	e000      	b.n	800864c <xQueueGenericSendFromISR+0x70>
 800864a:	2300      	movs	r3, #0
 800864c:	2b00      	cmp	r3, #0
 800864e:	d10a      	bne.n	8008666 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008654:	f383 8811 	msr	BASEPRI, r3
 8008658:	f3bf 8f6f 	isb	sy
 800865c:	f3bf 8f4f 	dsb	sy
 8008660:	623b      	str	r3, [r7, #32]
}
 8008662:	bf00      	nop
 8008664:	e7fe      	b.n	8008664 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008666:	f001 feff 	bl	800a468 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800866a:	f3ef 8211 	mrs	r2, BASEPRI
 800866e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008672:	f383 8811 	msr	BASEPRI, r3
 8008676:	f3bf 8f6f 	isb	sy
 800867a:	f3bf 8f4f 	dsb	sy
 800867e:	61fa      	str	r2, [r7, #28]
 8008680:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008682:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008684:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008688:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800868a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800868c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800868e:	429a      	cmp	r2, r3
 8008690:	d302      	bcc.n	8008698 <xQueueGenericSendFromISR+0xbc>
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	2b02      	cmp	r3, #2
 8008696:	d12f      	bne.n	80086f8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800869a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800869e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80086a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086a6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80086a8:	683a      	ldr	r2, [r7, #0]
 80086aa:	68b9      	ldr	r1, [r7, #8]
 80086ac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80086ae:	f000 f911 	bl	80088d4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80086b2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80086b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80086ba:	d112      	bne.n	80086e2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80086bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d016      	beq.n	80086f2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80086c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086c6:	3324      	adds	r3, #36	; 0x24
 80086c8:	4618      	mov	r0, r3
 80086ca:	f000 fed1 	bl	8009470 <xTaskRemoveFromEventList>
 80086ce:	4603      	mov	r3, r0
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d00e      	beq.n	80086f2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d00b      	beq.n	80086f2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	2201      	movs	r2, #1
 80086de:	601a      	str	r2, [r3, #0]
 80086e0:	e007      	b.n	80086f2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80086e2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80086e6:	3301      	adds	r3, #1
 80086e8:	b2db      	uxtb	r3, r3
 80086ea:	b25a      	sxtb	r2, r3
 80086ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80086f2:	2301      	movs	r3, #1
 80086f4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80086f6:	e001      	b.n	80086fc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80086f8:	2300      	movs	r3, #0
 80086fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80086fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086fe:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008700:	697b      	ldr	r3, [r7, #20]
 8008702:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008706:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008708:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800870a:	4618      	mov	r0, r3
 800870c:	3740      	adds	r7, #64	; 0x40
 800870e:	46bd      	mov	sp, r7
 8008710:	bd80      	pop	{r7, pc}
	...

08008714 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008714:	b580      	push	{r7, lr}
 8008716:	b08c      	sub	sp, #48	; 0x30
 8008718:	af00      	add	r7, sp, #0
 800871a:	60f8      	str	r0, [r7, #12]
 800871c:	60b9      	str	r1, [r7, #8]
 800871e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008720:	2300      	movs	r3, #0
 8008722:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800872a:	2b00      	cmp	r3, #0
 800872c:	d10a      	bne.n	8008744 <xQueueReceive+0x30>
	__asm volatile
 800872e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008732:	f383 8811 	msr	BASEPRI, r3
 8008736:	f3bf 8f6f 	isb	sy
 800873a:	f3bf 8f4f 	dsb	sy
 800873e:	623b      	str	r3, [r7, #32]
}
 8008740:	bf00      	nop
 8008742:	e7fe      	b.n	8008742 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008744:	68bb      	ldr	r3, [r7, #8]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d103      	bne.n	8008752 <xQueueReceive+0x3e>
 800874a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800874c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800874e:	2b00      	cmp	r3, #0
 8008750:	d101      	bne.n	8008756 <xQueueReceive+0x42>
 8008752:	2301      	movs	r3, #1
 8008754:	e000      	b.n	8008758 <xQueueReceive+0x44>
 8008756:	2300      	movs	r3, #0
 8008758:	2b00      	cmp	r3, #0
 800875a:	d10a      	bne.n	8008772 <xQueueReceive+0x5e>
	__asm volatile
 800875c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008760:	f383 8811 	msr	BASEPRI, r3
 8008764:	f3bf 8f6f 	isb	sy
 8008768:	f3bf 8f4f 	dsb	sy
 800876c:	61fb      	str	r3, [r7, #28]
}
 800876e:	bf00      	nop
 8008770:	e7fe      	b.n	8008770 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008772:	f001 f83b 	bl	80097ec <xTaskGetSchedulerState>
 8008776:	4603      	mov	r3, r0
 8008778:	2b00      	cmp	r3, #0
 800877a:	d102      	bne.n	8008782 <xQueueReceive+0x6e>
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d101      	bne.n	8008786 <xQueueReceive+0x72>
 8008782:	2301      	movs	r3, #1
 8008784:	e000      	b.n	8008788 <xQueueReceive+0x74>
 8008786:	2300      	movs	r3, #0
 8008788:	2b00      	cmp	r3, #0
 800878a:	d10a      	bne.n	80087a2 <xQueueReceive+0x8e>
	__asm volatile
 800878c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008790:	f383 8811 	msr	BASEPRI, r3
 8008794:	f3bf 8f6f 	isb	sy
 8008798:	f3bf 8f4f 	dsb	sy
 800879c:	61bb      	str	r3, [r7, #24]
}
 800879e:	bf00      	nop
 80087a0:	e7fe      	b.n	80087a0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80087a2:	f001 fd7f 	bl	800a2a4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80087a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087aa:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80087ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d01f      	beq.n	80087f2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80087b2:	68b9      	ldr	r1, [r7, #8]
 80087b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80087b6:	f000 f8f7 	bl	80089a8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80087ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087bc:	1e5a      	subs	r2, r3, #1
 80087be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087c0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80087c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087c4:	691b      	ldr	r3, [r3, #16]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d00f      	beq.n	80087ea <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80087ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087cc:	3310      	adds	r3, #16
 80087ce:	4618      	mov	r0, r3
 80087d0:	f000 fe4e 	bl	8009470 <xTaskRemoveFromEventList>
 80087d4:	4603      	mov	r3, r0
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d007      	beq.n	80087ea <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80087da:	4b3d      	ldr	r3, [pc, #244]	; (80088d0 <xQueueReceive+0x1bc>)
 80087dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087e0:	601a      	str	r2, [r3, #0]
 80087e2:	f3bf 8f4f 	dsb	sy
 80087e6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80087ea:	f001 fd8b 	bl	800a304 <vPortExitCritical>
				return pdPASS;
 80087ee:	2301      	movs	r3, #1
 80087f0:	e069      	b.n	80088c6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d103      	bne.n	8008800 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80087f8:	f001 fd84 	bl	800a304 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80087fc:	2300      	movs	r3, #0
 80087fe:	e062      	b.n	80088c6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008802:	2b00      	cmp	r3, #0
 8008804:	d106      	bne.n	8008814 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008806:	f107 0310 	add.w	r3, r7, #16
 800880a:	4618      	mov	r0, r3
 800880c:	f000 fe94 	bl	8009538 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008810:	2301      	movs	r3, #1
 8008812:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008814:	f001 fd76 	bl	800a304 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008818:	f000 fc06 	bl	8009028 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800881c:	f001 fd42 	bl	800a2a4 <vPortEnterCritical>
 8008820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008822:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008826:	b25b      	sxtb	r3, r3
 8008828:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800882c:	d103      	bne.n	8008836 <xQueueReceive+0x122>
 800882e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008830:	2200      	movs	r2, #0
 8008832:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008838:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800883c:	b25b      	sxtb	r3, r3
 800883e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008842:	d103      	bne.n	800884c <xQueueReceive+0x138>
 8008844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008846:	2200      	movs	r2, #0
 8008848:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800884c:	f001 fd5a 	bl	800a304 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008850:	1d3a      	adds	r2, r7, #4
 8008852:	f107 0310 	add.w	r3, r7, #16
 8008856:	4611      	mov	r1, r2
 8008858:	4618      	mov	r0, r3
 800885a:	f000 fe83 	bl	8009564 <xTaskCheckForTimeOut>
 800885e:	4603      	mov	r3, r0
 8008860:	2b00      	cmp	r3, #0
 8008862:	d123      	bne.n	80088ac <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008864:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008866:	f000 f917 	bl	8008a98 <prvIsQueueEmpty>
 800886a:	4603      	mov	r3, r0
 800886c:	2b00      	cmp	r3, #0
 800886e:	d017      	beq.n	80088a0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008872:	3324      	adds	r3, #36	; 0x24
 8008874:	687a      	ldr	r2, [r7, #4]
 8008876:	4611      	mov	r1, r2
 8008878:	4618      	mov	r0, r3
 800887a:	f000 fda9 	bl	80093d0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800887e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008880:	f000 f8b8 	bl	80089f4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008884:	f000 fbde 	bl	8009044 <xTaskResumeAll>
 8008888:	4603      	mov	r3, r0
 800888a:	2b00      	cmp	r3, #0
 800888c:	d189      	bne.n	80087a2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800888e:	4b10      	ldr	r3, [pc, #64]	; (80088d0 <xQueueReceive+0x1bc>)
 8008890:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008894:	601a      	str	r2, [r3, #0]
 8008896:	f3bf 8f4f 	dsb	sy
 800889a:	f3bf 8f6f 	isb	sy
 800889e:	e780      	b.n	80087a2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80088a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80088a2:	f000 f8a7 	bl	80089f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80088a6:	f000 fbcd 	bl	8009044 <xTaskResumeAll>
 80088aa:	e77a      	b.n	80087a2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80088ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80088ae:	f000 f8a1 	bl	80089f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80088b2:	f000 fbc7 	bl	8009044 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80088b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80088b8:	f000 f8ee 	bl	8008a98 <prvIsQueueEmpty>
 80088bc:	4603      	mov	r3, r0
 80088be:	2b00      	cmp	r3, #0
 80088c0:	f43f af6f 	beq.w	80087a2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80088c4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80088c6:	4618      	mov	r0, r3
 80088c8:	3730      	adds	r7, #48	; 0x30
 80088ca:	46bd      	mov	sp, r7
 80088cc:	bd80      	pop	{r7, pc}
 80088ce:	bf00      	nop
 80088d0:	e000ed04 	.word	0xe000ed04

080088d4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b086      	sub	sp, #24
 80088d8:	af00      	add	r7, sp, #0
 80088da:	60f8      	str	r0, [r7, #12]
 80088dc:	60b9      	str	r1, [r7, #8]
 80088de:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80088e0:	2300      	movs	r3, #0
 80088e2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088e8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d10d      	bne.n	800890e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d14d      	bne.n	8008996 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	689b      	ldr	r3, [r3, #8]
 80088fe:	4618      	mov	r0, r3
 8008900:	f000 ff92 	bl	8009828 <xTaskPriorityDisinherit>
 8008904:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	2200      	movs	r2, #0
 800890a:	609a      	str	r2, [r3, #8]
 800890c:	e043      	b.n	8008996 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d119      	bne.n	8008948 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	6858      	ldr	r0, [r3, #4]
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800891c:	461a      	mov	r2, r3
 800891e:	68b9      	ldr	r1, [r7, #8]
 8008920:	f002 fd82 	bl	800b428 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	685a      	ldr	r2, [r3, #4]
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800892c:	441a      	add	r2, r3
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	685a      	ldr	r2, [r3, #4]
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	689b      	ldr	r3, [r3, #8]
 800893a:	429a      	cmp	r2, r3
 800893c:	d32b      	bcc.n	8008996 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	681a      	ldr	r2, [r3, #0]
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	605a      	str	r2, [r3, #4]
 8008946:	e026      	b.n	8008996 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	68d8      	ldr	r0, [r3, #12]
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008950:	461a      	mov	r2, r3
 8008952:	68b9      	ldr	r1, [r7, #8]
 8008954:	f002 fd68 	bl	800b428 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	68da      	ldr	r2, [r3, #12]
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008960:	425b      	negs	r3, r3
 8008962:	441a      	add	r2, r3
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	68da      	ldr	r2, [r3, #12]
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	429a      	cmp	r2, r3
 8008972:	d207      	bcs.n	8008984 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	689a      	ldr	r2, [r3, #8]
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800897c:	425b      	negs	r3, r3
 800897e:	441a      	add	r2, r3
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2b02      	cmp	r3, #2
 8008988:	d105      	bne.n	8008996 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800898a:	693b      	ldr	r3, [r7, #16]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d002      	beq.n	8008996 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008990:	693b      	ldr	r3, [r7, #16]
 8008992:	3b01      	subs	r3, #1
 8008994:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008996:	693b      	ldr	r3, [r7, #16]
 8008998:	1c5a      	adds	r2, r3, #1
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800899e:	697b      	ldr	r3, [r7, #20]
}
 80089a0:	4618      	mov	r0, r3
 80089a2:	3718      	adds	r7, #24
 80089a4:	46bd      	mov	sp, r7
 80089a6:	bd80      	pop	{r7, pc}

080089a8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b082      	sub	sp, #8
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
 80089b0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d018      	beq.n	80089ec <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	68da      	ldr	r2, [r3, #12]
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089c2:	441a      	add	r2, r3
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	68da      	ldr	r2, [r3, #12]
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	689b      	ldr	r3, [r3, #8]
 80089d0:	429a      	cmp	r2, r3
 80089d2:	d303      	bcc.n	80089dc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681a      	ldr	r2, [r3, #0]
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	68d9      	ldr	r1, [r3, #12]
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089e4:	461a      	mov	r2, r3
 80089e6:	6838      	ldr	r0, [r7, #0]
 80089e8:	f002 fd1e 	bl	800b428 <memcpy>
	}
}
 80089ec:	bf00      	nop
 80089ee:	3708      	adds	r7, #8
 80089f0:	46bd      	mov	sp, r7
 80089f2:	bd80      	pop	{r7, pc}

080089f4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b084      	sub	sp, #16
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80089fc:	f001 fc52 	bl	800a2a4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008a06:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008a08:	e011      	b.n	8008a2e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d012      	beq.n	8008a38 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	3324      	adds	r3, #36	; 0x24
 8008a16:	4618      	mov	r0, r3
 8008a18:	f000 fd2a 	bl	8009470 <xTaskRemoveFromEventList>
 8008a1c:	4603      	mov	r3, r0
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d001      	beq.n	8008a26 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008a22:	f000 fe01 	bl	8009628 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008a26:	7bfb      	ldrb	r3, [r7, #15]
 8008a28:	3b01      	subs	r3, #1
 8008a2a:	b2db      	uxtb	r3, r3
 8008a2c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008a2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	dce9      	bgt.n	8008a0a <prvUnlockQueue+0x16>
 8008a36:	e000      	b.n	8008a3a <prvUnlockQueue+0x46>
					break;
 8008a38:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	22ff      	movs	r2, #255	; 0xff
 8008a3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008a42:	f001 fc5f 	bl	800a304 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008a46:	f001 fc2d 	bl	800a2a4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008a50:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008a52:	e011      	b.n	8008a78 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	691b      	ldr	r3, [r3, #16]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d012      	beq.n	8008a82 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	3310      	adds	r3, #16
 8008a60:	4618      	mov	r0, r3
 8008a62:	f000 fd05 	bl	8009470 <xTaskRemoveFromEventList>
 8008a66:	4603      	mov	r3, r0
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d001      	beq.n	8008a70 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008a6c:	f000 fddc 	bl	8009628 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008a70:	7bbb      	ldrb	r3, [r7, #14]
 8008a72:	3b01      	subs	r3, #1
 8008a74:	b2db      	uxtb	r3, r3
 8008a76:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008a78:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	dce9      	bgt.n	8008a54 <prvUnlockQueue+0x60>
 8008a80:	e000      	b.n	8008a84 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008a82:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	22ff      	movs	r2, #255	; 0xff
 8008a88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008a8c:	f001 fc3a 	bl	800a304 <vPortExitCritical>
}
 8008a90:	bf00      	nop
 8008a92:	3710      	adds	r7, #16
 8008a94:	46bd      	mov	sp, r7
 8008a96:	bd80      	pop	{r7, pc}

08008a98 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b084      	sub	sp, #16
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008aa0:	f001 fc00 	bl	800a2a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d102      	bne.n	8008ab2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008aac:	2301      	movs	r3, #1
 8008aae:	60fb      	str	r3, [r7, #12]
 8008ab0:	e001      	b.n	8008ab6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008ab6:	f001 fc25 	bl	800a304 <vPortExitCritical>

	return xReturn;
 8008aba:	68fb      	ldr	r3, [r7, #12]
}
 8008abc:	4618      	mov	r0, r3
 8008abe:	3710      	adds	r7, #16
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	bd80      	pop	{r7, pc}

08008ac4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b084      	sub	sp, #16
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008acc:	f001 fbea 	bl	800a2a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ad8:	429a      	cmp	r2, r3
 8008ada:	d102      	bne.n	8008ae2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008adc:	2301      	movs	r3, #1
 8008ade:	60fb      	str	r3, [r7, #12]
 8008ae0:	e001      	b.n	8008ae6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008ae6:	f001 fc0d 	bl	800a304 <vPortExitCritical>

	return xReturn;
 8008aea:	68fb      	ldr	r3, [r7, #12]
}
 8008aec:	4618      	mov	r0, r3
 8008aee:	3710      	adds	r7, #16
 8008af0:	46bd      	mov	sp, r7
 8008af2:	bd80      	pop	{r7, pc}

08008af4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008af4:	b480      	push	{r7}
 8008af6:	b085      	sub	sp, #20
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
 8008afc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008afe:	2300      	movs	r3, #0
 8008b00:	60fb      	str	r3, [r7, #12]
 8008b02:	e014      	b.n	8008b2e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008b04:	4a0f      	ldr	r2, [pc, #60]	; (8008b44 <vQueueAddToRegistry+0x50>)
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d10b      	bne.n	8008b28 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008b10:	490c      	ldr	r1, [pc, #48]	; (8008b44 <vQueueAddToRegistry+0x50>)
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	683a      	ldr	r2, [r7, #0]
 8008b16:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008b1a:	4a0a      	ldr	r2, [pc, #40]	; (8008b44 <vQueueAddToRegistry+0x50>)
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	00db      	lsls	r3, r3, #3
 8008b20:	4413      	add	r3, r2
 8008b22:	687a      	ldr	r2, [r7, #4]
 8008b24:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008b26:	e006      	b.n	8008b36 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	3301      	adds	r3, #1
 8008b2c:	60fb      	str	r3, [r7, #12]
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	2b07      	cmp	r3, #7
 8008b32:	d9e7      	bls.n	8008b04 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008b34:	bf00      	nop
 8008b36:	bf00      	nop
 8008b38:	3714      	adds	r7, #20
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b40:	4770      	bx	lr
 8008b42:	bf00      	nop
 8008b44:	200008ec 	.word	0x200008ec

08008b48 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	b086      	sub	sp, #24
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	60f8      	str	r0, [r7, #12]
 8008b50:	60b9      	str	r1, [r7, #8]
 8008b52:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008b58:	f001 fba4 	bl	800a2a4 <vPortEnterCritical>
 8008b5c:	697b      	ldr	r3, [r7, #20]
 8008b5e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008b62:	b25b      	sxtb	r3, r3
 8008b64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008b68:	d103      	bne.n	8008b72 <vQueueWaitForMessageRestricted+0x2a>
 8008b6a:	697b      	ldr	r3, [r7, #20]
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008b72:	697b      	ldr	r3, [r7, #20]
 8008b74:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008b78:	b25b      	sxtb	r3, r3
 8008b7a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008b7e:	d103      	bne.n	8008b88 <vQueueWaitForMessageRestricted+0x40>
 8008b80:	697b      	ldr	r3, [r7, #20]
 8008b82:	2200      	movs	r2, #0
 8008b84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008b88:	f001 fbbc 	bl	800a304 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008b8c:	697b      	ldr	r3, [r7, #20]
 8008b8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d106      	bne.n	8008ba2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008b94:	697b      	ldr	r3, [r7, #20]
 8008b96:	3324      	adds	r3, #36	; 0x24
 8008b98:	687a      	ldr	r2, [r7, #4]
 8008b9a:	68b9      	ldr	r1, [r7, #8]
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	f000 fc3b 	bl	8009418 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008ba2:	6978      	ldr	r0, [r7, #20]
 8008ba4:	f7ff ff26 	bl	80089f4 <prvUnlockQueue>
	}
 8008ba8:	bf00      	nop
 8008baa:	3718      	adds	r7, #24
 8008bac:	46bd      	mov	sp, r7
 8008bae:	bd80      	pop	{r7, pc}

08008bb0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b08e      	sub	sp, #56	; 0x38
 8008bb4:	af04      	add	r7, sp, #16
 8008bb6:	60f8      	str	r0, [r7, #12]
 8008bb8:	60b9      	str	r1, [r7, #8]
 8008bba:	607a      	str	r2, [r7, #4]
 8008bbc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008bbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d10a      	bne.n	8008bda <xTaskCreateStatic+0x2a>
	__asm volatile
 8008bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bc8:	f383 8811 	msr	BASEPRI, r3
 8008bcc:	f3bf 8f6f 	isb	sy
 8008bd0:	f3bf 8f4f 	dsb	sy
 8008bd4:	623b      	str	r3, [r7, #32]
}
 8008bd6:	bf00      	nop
 8008bd8:	e7fe      	b.n	8008bd8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008bda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d10a      	bne.n	8008bf6 <xTaskCreateStatic+0x46>
	__asm volatile
 8008be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008be4:	f383 8811 	msr	BASEPRI, r3
 8008be8:	f3bf 8f6f 	isb	sy
 8008bec:	f3bf 8f4f 	dsb	sy
 8008bf0:	61fb      	str	r3, [r7, #28]
}
 8008bf2:	bf00      	nop
 8008bf4:	e7fe      	b.n	8008bf4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008bf6:	235c      	movs	r3, #92	; 0x5c
 8008bf8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008bfa:	693b      	ldr	r3, [r7, #16]
 8008bfc:	2b5c      	cmp	r3, #92	; 0x5c
 8008bfe:	d00a      	beq.n	8008c16 <xTaskCreateStatic+0x66>
	__asm volatile
 8008c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c04:	f383 8811 	msr	BASEPRI, r3
 8008c08:	f3bf 8f6f 	isb	sy
 8008c0c:	f3bf 8f4f 	dsb	sy
 8008c10:	61bb      	str	r3, [r7, #24]
}
 8008c12:	bf00      	nop
 8008c14:	e7fe      	b.n	8008c14 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008c16:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008c18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d01e      	beq.n	8008c5c <xTaskCreateStatic+0xac>
 8008c1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d01b      	beq.n	8008c5c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008c24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c26:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008c2c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c30:	2202      	movs	r2, #2
 8008c32:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008c36:	2300      	movs	r3, #0
 8008c38:	9303      	str	r3, [sp, #12]
 8008c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c3c:	9302      	str	r3, [sp, #8]
 8008c3e:	f107 0314 	add.w	r3, r7, #20
 8008c42:	9301      	str	r3, [sp, #4]
 8008c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c46:	9300      	str	r3, [sp, #0]
 8008c48:	683b      	ldr	r3, [r7, #0]
 8008c4a:	687a      	ldr	r2, [r7, #4]
 8008c4c:	68b9      	ldr	r1, [r7, #8]
 8008c4e:	68f8      	ldr	r0, [r7, #12]
 8008c50:	f000 f850 	bl	8008cf4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008c54:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008c56:	f000 f8dd 	bl	8008e14 <prvAddNewTaskToReadyList>
 8008c5a:	e001      	b.n	8008c60 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008c60:	697b      	ldr	r3, [r7, #20]
	}
 8008c62:	4618      	mov	r0, r3
 8008c64:	3728      	adds	r7, #40	; 0x28
 8008c66:	46bd      	mov	sp, r7
 8008c68:	bd80      	pop	{r7, pc}

08008c6a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008c6a:	b580      	push	{r7, lr}
 8008c6c:	b08c      	sub	sp, #48	; 0x30
 8008c6e:	af04      	add	r7, sp, #16
 8008c70:	60f8      	str	r0, [r7, #12]
 8008c72:	60b9      	str	r1, [r7, #8]
 8008c74:	603b      	str	r3, [r7, #0]
 8008c76:	4613      	mov	r3, r2
 8008c78:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008c7a:	88fb      	ldrh	r3, [r7, #6]
 8008c7c:	009b      	lsls	r3, r3, #2
 8008c7e:	4618      	mov	r0, r3
 8008c80:	f001 fc32 	bl	800a4e8 <pvPortMalloc>
 8008c84:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008c86:	697b      	ldr	r3, [r7, #20]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d00e      	beq.n	8008caa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008c8c:	205c      	movs	r0, #92	; 0x5c
 8008c8e:	f001 fc2b 	bl	800a4e8 <pvPortMalloc>
 8008c92:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008c94:	69fb      	ldr	r3, [r7, #28]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d003      	beq.n	8008ca2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008c9a:	69fb      	ldr	r3, [r7, #28]
 8008c9c:	697a      	ldr	r2, [r7, #20]
 8008c9e:	631a      	str	r2, [r3, #48]	; 0x30
 8008ca0:	e005      	b.n	8008cae <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008ca2:	6978      	ldr	r0, [r7, #20]
 8008ca4:	f001 fcec 	bl	800a680 <vPortFree>
 8008ca8:	e001      	b.n	8008cae <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008caa:	2300      	movs	r3, #0
 8008cac:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008cae:	69fb      	ldr	r3, [r7, #28]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d017      	beq.n	8008ce4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008cb4:	69fb      	ldr	r3, [r7, #28]
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008cbc:	88fa      	ldrh	r2, [r7, #6]
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	9303      	str	r3, [sp, #12]
 8008cc2:	69fb      	ldr	r3, [r7, #28]
 8008cc4:	9302      	str	r3, [sp, #8]
 8008cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cc8:	9301      	str	r3, [sp, #4]
 8008cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ccc:	9300      	str	r3, [sp, #0]
 8008cce:	683b      	ldr	r3, [r7, #0]
 8008cd0:	68b9      	ldr	r1, [r7, #8]
 8008cd2:	68f8      	ldr	r0, [r7, #12]
 8008cd4:	f000 f80e 	bl	8008cf4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008cd8:	69f8      	ldr	r0, [r7, #28]
 8008cda:	f000 f89b 	bl	8008e14 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008cde:	2301      	movs	r3, #1
 8008ce0:	61bb      	str	r3, [r7, #24]
 8008ce2:	e002      	b.n	8008cea <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008ce4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008ce8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008cea:	69bb      	ldr	r3, [r7, #24]
	}
 8008cec:	4618      	mov	r0, r3
 8008cee:	3720      	adds	r7, #32
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	bd80      	pop	{r7, pc}

08008cf4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b088      	sub	sp, #32
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	60f8      	str	r0, [r7, #12]
 8008cfc:	60b9      	str	r1, [r7, #8]
 8008cfe:	607a      	str	r2, [r7, #4]
 8008d00:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d04:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	009b      	lsls	r3, r3, #2
 8008d0a:	461a      	mov	r2, r3
 8008d0c:	21a5      	movs	r1, #165	; 0xa5
 8008d0e:	f002 fb5f 	bl	800b3d0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008d1c:	3b01      	subs	r3, #1
 8008d1e:	009b      	lsls	r3, r3, #2
 8008d20:	4413      	add	r3, r2
 8008d22:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008d24:	69bb      	ldr	r3, [r7, #24]
 8008d26:	f023 0307 	bic.w	r3, r3, #7
 8008d2a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008d2c:	69bb      	ldr	r3, [r7, #24]
 8008d2e:	f003 0307 	and.w	r3, r3, #7
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d00a      	beq.n	8008d4c <prvInitialiseNewTask+0x58>
	__asm volatile
 8008d36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d3a:	f383 8811 	msr	BASEPRI, r3
 8008d3e:	f3bf 8f6f 	isb	sy
 8008d42:	f3bf 8f4f 	dsb	sy
 8008d46:	617b      	str	r3, [r7, #20]
}
 8008d48:	bf00      	nop
 8008d4a:	e7fe      	b.n	8008d4a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008d4c:	68bb      	ldr	r3, [r7, #8]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d01f      	beq.n	8008d92 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008d52:	2300      	movs	r3, #0
 8008d54:	61fb      	str	r3, [r7, #28]
 8008d56:	e012      	b.n	8008d7e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008d58:	68ba      	ldr	r2, [r7, #8]
 8008d5a:	69fb      	ldr	r3, [r7, #28]
 8008d5c:	4413      	add	r3, r2
 8008d5e:	7819      	ldrb	r1, [r3, #0]
 8008d60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d62:	69fb      	ldr	r3, [r7, #28]
 8008d64:	4413      	add	r3, r2
 8008d66:	3334      	adds	r3, #52	; 0x34
 8008d68:	460a      	mov	r2, r1
 8008d6a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008d6c:	68ba      	ldr	r2, [r7, #8]
 8008d6e:	69fb      	ldr	r3, [r7, #28]
 8008d70:	4413      	add	r3, r2
 8008d72:	781b      	ldrb	r3, [r3, #0]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d006      	beq.n	8008d86 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008d78:	69fb      	ldr	r3, [r7, #28]
 8008d7a:	3301      	adds	r3, #1
 8008d7c:	61fb      	str	r3, [r7, #28]
 8008d7e:	69fb      	ldr	r3, [r7, #28]
 8008d80:	2b0f      	cmp	r3, #15
 8008d82:	d9e9      	bls.n	8008d58 <prvInitialiseNewTask+0x64>
 8008d84:	e000      	b.n	8008d88 <prvInitialiseNewTask+0x94>
			{
				break;
 8008d86:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008d90:	e003      	b.n	8008d9a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d94:	2200      	movs	r2, #0
 8008d96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d9c:	2b37      	cmp	r3, #55	; 0x37
 8008d9e:	d901      	bls.n	8008da4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008da0:	2337      	movs	r3, #55	; 0x37
 8008da2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008da6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008da8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008dae:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008db2:	2200      	movs	r2, #0
 8008db4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008db8:	3304      	adds	r3, #4
 8008dba:	4618      	mov	r0, r3
 8008dbc:	f7ff f978 	bl	80080b0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dc2:	3318      	adds	r3, #24
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	f7ff f973 	bl	80080b0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008dce:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dd2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dd8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ddc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008dde:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008de2:	2200      	movs	r2, #0
 8008de4:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008de8:	2200      	movs	r2, #0
 8008dea:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008dee:	683a      	ldr	r2, [r7, #0]
 8008df0:	68f9      	ldr	r1, [r7, #12]
 8008df2:	69b8      	ldr	r0, [r7, #24]
 8008df4:	f001 f928 	bl	800a048 <pxPortInitialiseStack>
 8008df8:	4602      	mov	r2, r0
 8008dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dfc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d002      	beq.n	8008e0a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e08:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008e0a:	bf00      	nop
 8008e0c:	3720      	adds	r7, #32
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	bd80      	pop	{r7, pc}
	...

08008e14 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b082      	sub	sp, #8
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008e1c:	f001 fa42 	bl	800a2a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008e20:	4b2d      	ldr	r3, [pc, #180]	; (8008ed8 <prvAddNewTaskToReadyList+0xc4>)
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	3301      	adds	r3, #1
 8008e26:	4a2c      	ldr	r2, [pc, #176]	; (8008ed8 <prvAddNewTaskToReadyList+0xc4>)
 8008e28:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008e2a:	4b2c      	ldr	r3, [pc, #176]	; (8008edc <prvAddNewTaskToReadyList+0xc8>)
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d109      	bne.n	8008e46 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008e32:	4a2a      	ldr	r2, [pc, #168]	; (8008edc <prvAddNewTaskToReadyList+0xc8>)
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008e38:	4b27      	ldr	r3, [pc, #156]	; (8008ed8 <prvAddNewTaskToReadyList+0xc4>)
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	2b01      	cmp	r3, #1
 8008e3e:	d110      	bne.n	8008e62 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008e40:	f000 fc16 	bl	8009670 <prvInitialiseTaskLists>
 8008e44:	e00d      	b.n	8008e62 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008e46:	4b26      	ldr	r3, [pc, #152]	; (8008ee0 <prvAddNewTaskToReadyList+0xcc>)
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d109      	bne.n	8008e62 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008e4e:	4b23      	ldr	r3, [pc, #140]	; (8008edc <prvAddNewTaskToReadyList+0xc8>)
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e58:	429a      	cmp	r2, r3
 8008e5a:	d802      	bhi.n	8008e62 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008e5c:	4a1f      	ldr	r2, [pc, #124]	; (8008edc <prvAddNewTaskToReadyList+0xc8>)
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008e62:	4b20      	ldr	r3, [pc, #128]	; (8008ee4 <prvAddNewTaskToReadyList+0xd0>)
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	3301      	adds	r3, #1
 8008e68:	4a1e      	ldr	r2, [pc, #120]	; (8008ee4 <prvAddNewTaskToReadyList+0xd0>)
 8008e6a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008e6c:	4b1d      	ldr	r3, [pc, #116]	; (8008ee4 <prvAddNewTaskToReadyList+0xd0>)
 8008e6e:	681a      	ldr	r2, [r3, #0]
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e78:	4b1b      	ldr	r3, [pc, #108]	; (8008ee8 <prvAddNewTaskToReadyList+0xd4>)
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	429a      	cmp	r2, r3
 8008e7e:	d903      	bls.n	8008e88 <prvAddNewTaskToReadyList+0x74>
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e84:	4a18      	ldr	r2, [pc, #96]	; (8008ee8 <prvAddNewTaskToReadyList+0xd4>)
 8008e86:	6013      	str	r3, [r2, #0]
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e8c:	4613      	mov	r3, r2
 8008e8e:	009b      	lsls	r3, r3, #2
 8008e90:	4413      	add	r3, r2
 8008e92:	009b      	lsls	r3, r3, #2
 8008e94:	4a15      	ldr	r2, [pc, #84]	; (8008eec <prvAddNewTaskToReadyList+0xd8>)
 8008e96:	441a      	add	r2, r3
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	3304      	adds	r3, #4
 8008e9c:	4619      	mov	r1, r3
 8008e9e:	4610      	mov	r0, r2
 8008ea0:	f7ff f913 	bl	80080ca <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008ea4:	f001 fa2e 	bl	800a304 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008ea8:	4b0d      	ldr	r3, [pc, #52]	; (8008ee0 <prvAddNewTaskToReadyList+0xcc>)
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d00e      	beq.n	8008ece <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008eb0:	4b0a      	ldr	r3, [pc, #40]	; (8008edc <prvAddNewTaskToReadyList+0xc8>)
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008eba:	429a      	cmp	r2, r3
 8008ebc:	d207      	bcs.n	8008ece <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008ebe:	4b0c      	ldr	r3, [pc, #48]	; (8008ef0 <prvAddNewTaskToReadyList+0xdc>)
 8008ec0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ec4:	601a      	str	r2, [r3, #0]
 8008ec6:	f3bf 8f4f 	dsb	sy
 8008eca:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008ece:	bf00      	nop
 8008ed0:	3708      	adds	r7, #8
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	bd80      	pop	{r7, pc}
 8008ed6:	bf00      	nop
 8008ed8:	20000e00 	.word	0x20000e00
 8008edc:	2000092c 	.word	0x2000092c
 8008ee0:	20000e0c 	.word	0x20000e0c
 8008ee4:	20000e1c 	.word	0x20000e1c
 8008ee8:	20000e08 	.word	0x20000e08
 8008eec:	20000930 	.word	0x20000930
 8008ef0:	e000ed04 	.word	0xe000ed04

08008ef4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b084      	sub	sp, #16
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008efc:	2300      	movs	r3, #0
 8008efe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d017      	beq.n	8008f36 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008f06:	4b13      	ldr	r3, [pc, #76]	; (8008f54 <vTaskDelay+0x60>)
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d00a      	beq.n	8008f24 <vTaskDelay+0x30>
	__asm volatile
 8008f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f12:	f383 8811 	msr	BASEPRI, r3
 8008f16:	f3bf 8f6f 	isb	sy
 8008f1a:	f3bf 8f4f 	dsb	sy
 8008f1e:	60bb      	str	r3, [r7, #8]
}
 8008f20:	bf00      	nop
 8008f22:	e7fe      	b.n	8008f22 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008f24:	f000 f880 	bl	8009028 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008f28:	2100      	movs	r1, #0
 8008f2a:	6878      	ldr	r0, [r7, #4]
 8008f2c:	f000 fcea 	bl	8009904 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008f30:	f000 f888 	bl	8009044 <xTaskResumeAll>
 8008f34:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d107      	bne.n	8008f4c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008f3c:	4b06      	ldr	r3, [pc, #24]	; (8008f58 <vTaskDelay+0x64>)
 8008f3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f42:	601a      	str	r2, [r3, #0]
 8008f44:	f3bf 8f4f 	dsb	sy
 8008f48:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008f4c:	bf00      	nop
 8008f4e:	3710      	adds	r7, #16
 8008f50:	46bd      	mov	sp, r7
 8008f52:	bd80      	pop	{r7, pc}
 8008f54:	20000e28 	.word	0x20000e28
 8008f58:	e000ed04 	.word	0xe000ed04

08008f5c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b08a      	sub	sp, #40	; 0x28
 8008f60:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008f62:	2300      	movs	r3, #0
 8008f64:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008f66:	2300      	movs	r3, #0
 8008f68:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008f6a:	463a      	mov	r2, r7
 8008f6c:	1d39      	adds	r1, r7, #4
 8008f6e:	f107 0308 	add.w	r3, r7, #8
 8008f72:	4618      	mov	r0, r3
 8008f74:	f7ff f848 	bl	8008008 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008f78:	6839      	ldr	r1, [r7, #0]
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	68ba      	ldr	r2, [r7, #8]
 8008f7e:	9202      	str	r2, [sp, #8]
 8008f80:	9301      	str	r3, [sp, #4]
 8008f82:	2300      	movs	r3, #0
 8008f84:	9300      	str	r3, [sp, #0]
 8008f86:	2300      	movs	r3, #0
 8008f88:	460a      	mov	r2, r1
 8008f8a:	4921      	ldr	r1, [pc, #132]	; (8009010 <vTaskStartScheduler+0xb4>)
 8008f8c:	4821      	ldr	r0, [pc, #132]	; (8009014 <vTaskStartScheduler+0xb8>)
 8008f8e:	f7ff fe0f 	bl	8008bb0 <xTaskCreateStatic>
 8008f92:	4603      	mov	r3, r0
 8008f94:	4a20      	ldr	r2, [pc, #128]	; (8009018 <vTaskStartScheduler+0xbc>)
 8008f96:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008f98:	4b1f      	ldr	r3, [pc, #124]	; (8009018 <vTaskStartScheduler+0xbc>)
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d002      	beq.n	8008fa6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008fa0:	2301      	movs	r3, #1
 8008fa2:	617b      	str	r3, [r7, #20]
 8008fa4:	e001      	b.n	8008faa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008faa:	697b      	ldr	r3, [r7, #20]
 8008fac:	2b01      	cmp	r3, #1
 8008fae:	d102      	bne.n	8008fb6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008fb0:	f000 fcfc 	bl	80099ac <xTimerCreateTimerTask>
 8008fb4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008fb6:	697b      	ldr	r3, [r7, #20]
 8008fb8:	2b01      	cmp	r3, #1
 8008fba:	d116      	bne.n	8008fea <vTaskStartScheduler+0x8e>
	__asm volatile
 8008fbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fc0:	f383 8811 	msr	BASEPRI, r3
 8008fc4:	f3bf 8f6f 	isb	sy
 8008fc8:	f3bf 8f4f 	dsb	sy
 8008fcc:	613b      	str	r3, [r7, #16]
}
 8008fce:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008fd0:	4b12      	ldr	r3, [pc, #72]	; (800901c <vTaskStartScheduler+0xc0>)
 8008fd2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008fd6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008fd8:	4b11      	ldr	r3, [pc, #68]	; (8009020 <vTaskStartScheduler+0xc4>)
 8008fda:	2201      	movs	r2, #1
 8008fdc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008fde:	4b11      	ldr	r3, [pc, #68]	; (8009024 <vTaskStartScheduler+0xc8>)
 8008fe0:	2200      	movs	r2, #0
 8008fe2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008fe4:	f001 f8bc 	bl	800a160 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008fe8:	e00e      	b.n	8009008 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008fea:	697b      	ldr	r3, [r7, #20]
 8008fec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008ff0:	d10a      	bne.n	8009008 <vTaskStartScheduler+0xac>
	__asm volatile
 8008ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ff6:	f383 8811 	msr	BASEPRI, r3
 8008ffa:	f3bf 8f6f 	isb	sy
 8008ffe:	f3bf 8f4f 	dsb	sy
 8009002:	60fb      	str	r3, [r7, #12]
}
 8009004:	bf00      	nop
 8009006:	e7fe      	b.n	8009006 <vTaskStartScheduler+0xaa>
}
 8009008:	bf00      	nop
 800900a:	3718      	adds	r7, #24
 800900c:	46bd      	mov	sp, r7
 800900e:	bd80      	pop	{r7, pc}
 8009010:	0800b478 	.word	0x0800b478
 8009014:	08009641 	.word	0x08009641
 8009018:	20000e24 	.word	0x20000e24
 800901c:	20000e20 	.word	0x20000e20
 8009020:	20000e0c 	.word	0x20000e0c
 8009024:	20000e04 	.word	0x20000e04

08009028 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009028:	b480      	push	{r7}
 800902a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800902c:	4b04      	ldr	r3, [pc, #16]	; (8009040 <vTaskSuspendAll+0x18>)
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	3301      	adds	r3, #1
 8009032:	4a03      	ldr	r2, [pc, #12]	; (8009040 <vTaskSuspendAll+0x18>)
 8009034:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009036:	bf00      	nop
 8009038:	46bd      	mov	sp, r7
 800903a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903e:	4770      	bx	lr
 8009040:	20000e28 	.word	0x20000e28

08009044 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009044:	b580      	push	{r7, lr}
 8009046:	b084      	sub	sp, #16
 8009048:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800904a:	2300      	movs	r3, #0
 800904c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800904e:	2300      	movs	r3, #0
 8009050:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009052:	4b42      	ldr	r3, [pc, #264]	; (800915c <xTaskResumeAll+0x118>)
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	2b00      	cmp	r3, #0
 8009058:	d10a      	bne.n	8009070 <xTaskResumeAll+0x2c>
	__asm volatile
 800905a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800905e:	f383 8811 	msr	BASEPRI, r3
 8009062:	f3bf 8f6f 	isb	sy
 8009066:	f3bf 8f4f 	dsb	sy
 800906a:	603b      	str	r3, [r7, #0]
}
 800906c:	bf00      	nop
 800906e:	e7fe      	b.n	800906e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009070:	f001 f918 	bl	800a2a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009074:	4b39      	ldr	r3, [pc, #228]	; (800915c <xTaskResumeAll+0x118>)
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	3b01      	subs	r3, #1
 800907a:	4a38      	ldr	r2, [pc, #224]	; (800915c <xTaskResumeAll+0x118>)
 800907c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800907e:	4b37      	ldr	r3, [pc, #220]	; (800915c <xTaskResumeAll+0x118>)
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d162      	bne.n	800914c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009086:	4b36      	ldr	r3, [pc, #216]	; (8009160 <xTaskResumeAll+0x11c>)
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d05e      	beq.n	800914c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800908e:	e02f      	b.n	80090f0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009090:	4b34      	ldr	r3, [pc, #208]	; (8009164 <xTaskResumeAll+0x120>)
 8009092:	68db      	ldr	r3, [r3, #12]
 8009094:	68db      	ldr	r3, [r3, #12]
 8009096:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	3318      	adds	r3, #24
 800909c:	4618      	mov	r0, r3
 800909e:	f7ff f871 	bl	8008184 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	3304      	adds	r3, #4
 80090a6:	4618      	mov	r0, r3
 80090a8:	f7ff f86c 	bl	8008184 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090b0:	4b2d      	ldr	r3, [pc, #180]	; (8009168 <xTaskResumeAll+0x124>)
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	429a      	cmp	r2, r3
 80090b6:	d903      	bls.n	80090c0 <xTaskResumeAll+0x7c>
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090bc:	4a2a      	ldr	r2, [pc, #168]	; (8009168 <xTaskResumeAll+0x124>)
 80090be:	6013      	str	r3, [r2, #0]
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090c4:	4613      	mov	r3, r2
 80090c6:	009b      	lsls	r3, r3, #2
 80090c8:	4413      	add	r3, r2
 80090ca:	009b      	lsls	r3, r3, #2
 80090cc:	4a27      	ldr	r2, [pc, #156]	; (800916c <xTaskResumeAll+0x128>)
 80090ce:	441a      	add	r2, r3
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	3304      	adds	r3, #4
 80090d4:	4619      	mov	r1, r3
 80090d6:	4610      	mov	r0, r2
 80090d8:	f7fe fff7 	bl	80080ca <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090e0:	4b23      	ldr	r3, [pc, #140]	; (8009170 <xTaskResumeAll+0x12c>)
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090e6:	429a      	cmp	r2, r3
 80090e8:	d302      	bcc.n	80090f0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80090ea:	4b22      	ldr	r3, [pc, #136]	; (8009174 <xTaskResumeAll+0x130>)
 80090ec:	2201      	movs	r2, #1
 80090ee:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80090f0:	4b1c      	ldr	r3, [pc, #112]	; (8009164 <xTaskResumeAll+0x120>)
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d1cb      	bne.n	8009090 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d001      	beq.n	8009102 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80090fe:	f000 fb55 	bl	80097ac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009102:	4b1d      	ldr	r3, [pc, #116]	; (8009178 <xTaskResumeAll+0x134>)
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	2b00      	cmp	r3, #0
 800910c:	d010      	beq.n	8009130 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800910e:	f000 f847 	bl	80091a0 <xTaskIncrementTick>
 8009112:	4603      	mov	r3, r0
 8009114:	2b00      	cmp	r3, #0
 8009116:	d002      	beq.n	800911e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009118:	4b16      	ldr	r3, [pc, #88]	; (8009174 <xTaskResumeAll+0x130>)
 800911a:	2201      	movs	r2, #1
 800911c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	3b01      	subs	r3, #1
 8009122:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d1f1      	bne.n	800910e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800912a:	4b13      	ldr	r3, [pc, #76]	; (8009178 <xTaskResumeAll+0x134>)
 800912c:	2200      	movs	r2, #0
 800912e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009130:	4b10      	ldr	r3, [pc, #64]	; (8009174 <xTaskResumeAll+0x130>)
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d009      	beq.n	800914c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009138:	2301      	movs	r3, #1
 800913a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800913c:	4b0f      	ldr	r3, [pc, #60]	; (800917c <xTaskResumeAll+0x138>)
 800913e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009142:	601a      	str	r2, [r3, #0]
 8009144:	f3bf 8f4f 	dsb	sy
 8009148:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800914c:	f001 f8da 	bl	800a304 <vPortExitCritical>

	return xAlreadyYielded;
 8009150:	68bb      	ldr	r3, [r7, #8]
}
 8009152:	4618      	mov	r0, r3
 8009154:	3710      	adds	r7, #16
 8009156:	46bd      	mov	sp, r7
 8009158:	bd80      	pop	{r7, pc}
 800915a:	bf00      	nop
 800915c:	20000e28 	.word	0x20000e28
 8009160:	20000e00 	.word	0x20000e00
 8009164:	20000dc0 	.word	0x20000dc0
 8009168:	20000e08 	.word	0x20000e08
 800916c:	20000930 	.word	0x20000930
 8009170:	2000092c 	.word	0x2000092c
 8009174:	20000e14 	.word	0x20000e14
 8009178:	20000e10 	.word	0x20000e10
 800917c:	e000ed04 	.word	0xe000ed04

08009180 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009180:	b480      	push	{r7}
 8009182:	b083      	sub	sp, #12
 8009184:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009186:	4b05      	ldr	r3, [pc, #20]	; (800919c <xTaskGetTickCount+0x1c>)
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800918c:	687b      	ldr	r3, [r7, #4]
}
 800918e:	4618      	mov	r0, r3
 8009190:	370c      	adds	r7, #12
 8009192:	46bd      	mov	sp, r7
 8009194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009198:	4770      	bx	lr
 800919a:	bf00      	nop
 800919c:	20000e04 	.word	0x20000e04

080091a0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80091a0:	b580      	push	{r7, lr}
 80091a2:	b086      	sub	sp, #24
 80091a4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80091a6:	2300      	movs	r3, #0
 80091a8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80091aa:	4b4f      	ldr	r3, [pc, #316]	; (80092e8 <xTaskIncrementTick+0x148>)
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	f040 808f 	bne.w	80092d2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80091b4:	4b4d      	ldr	r3, [pc, #308]	; (80092ec <xTaskIncrementTick+0x14c>)
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	3301      	adds	r3, #1
 80091ba:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80091bc:	4a4b      	ldr	r2, [pc, #300]	; (80092ec <xTaskIncrementTick+0x14c>)
 80091be:	693b      	ldr	r3, [r7, #16]
 80091c0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80091c2:	693b      	ldr	r3, [r7, #16]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d120      	bne.n	800920a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80091c8:	4b49      	ldr	r3, [pc, #292]	; (80092f0 <xTaskIncrementTick+0x150>)
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d00a      	beq.n	80091e8 <xTaskIncrementTick+0x48>
	__asm volatile
 80091d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091d6:	f383 8811 	msr	BASEPRI, r3
 80091da:	f3bf 8f6f 	isb	sy
 80091de:	f3bf 8f4f 	dsb	sy
 80091e2:	603b      	str	r3, [r7, #0]
}
 80091e4:	bf00      	nop
 80091e6:	e7fe      	b.n	80091e6 <xTaskIncrementTick+0x46>
 80091e8:	4b41      	ldr	r3, [pc, #260]	; (80092f0 <xTaskIncrementTick+0x150>)
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	60fb      	str	r3, [r7, #12]
 80091ee:	4b41      	ldr	r3, [pc, #260]	; (80092f4 <xTaskIncrementTick+0x154>)
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	4a3f      	ldr	r2, [pc, #252]	; (80092f0 <xTaskIncrementTick+0x150>)
 80091f4:	6013      	str	r3, [r2, #0]
 80091f6:	4a3f      	ldr	r2, [pc, #252]	; (80092f4 <xTaskIncrementTick+0x154>)
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	6013      	str	r3, [r2, #0]
 80091fc:	4b3e      	ldr	r3, [pc, #248]	; (80092f8 <xTaskIncrementTick+0x158>)
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	3301      	adds	r3, #1
 8009202:	4a3d      	ldr	r2, [pc, #244]	; (80092f8 <xTaskIncrementTick+0x158>)
 8009204:	6013      	str	r3, [r2, #0]
 8009206:	f000 fad1 	bl	80097ac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800920a:	4b3c      	ldr	r3, [pc, #240]	; (80092fc <xTaskIncrementTick+0x15c>)
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	693a      	ldr	r2, [r7, #16]
 8009210:	429a      	cmp	r2, r3
 8009212:	d349      	bcc.n	80092a8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009214:	4b36      	ldr	r3, [pc, #216]	; (80092f0 <xTaskIncrementTick+0x150>)
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	2b00      	cmp	r3, #0
 800921c:	d104      	bne.n	8009228 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800921e:	4b37      	ldr	r3, [pc, #220]	; (80092fc <xTaskIncrementTick+0x15c>)
 8009220:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009224:	601a      	str	r2, [r3, #0]
					break;
 8009226:	e03f      	b.n	80092a8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009228:	4b31      	ldr	r3, [pc, #196]	; (80092f0 <xTaskIncrementTick+0x150>)
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	68db      	ldr	r3, [r3, #12]
 800922e:	68db      	ldr	r3, [r3, #12]
 8009230:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009232:	68bb      	ldr	r3, [r7, #8]
 8009234:	685b      	ldr	r3, [r3, #4]
 8009236:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009238:	693a      	ldr	r2, [r7, #16]
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	429a      	cmp	r2, r3
 800923e:	d203      	bcs.n	8009248 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009240:	4a2e      	ldr	r2, [pc, #184]	; (80092fc <xTaskIncrementTick+0x15c>)
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009246:	e02f      	b.n	80092a8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009248:	68bb      	ldr	r3, [r7, #8]
 800924a:	3304      	adds	r3, #4
 800924c:	4618      	mov	r0, r3
 800924e:	f7fe ff99 	bl	8008184 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009252:	68bb      	ldr	r3, [r7, #8]
 8009254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009256:	2b00      	cmp	r3, #0
 8009258:	d004      	beq.n	8009264 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800925a:	68bb      	ldr	r3, [r7, #8]
 800925c:	3318      	adds	r3, #24
 800925e:	4618      	mov	r0, r3
 8009260:	f7fe ff90 	bl	8008184 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009264:	68bb      	ldr	r3, [r7, #8]
 8009266:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009268:	4b25      	ldr	r3, [pc, #148]	; (8009300 <xTaskIncrementTick+0x160>)
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	429a      	cmp	r2, r3
 800926e:	d903      	bls.n	8009278 <xTaskIncrementTick+0xd8>
 8009270:	68bb      	ldr	r3, [r7, #8]
 8009272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009274:	4a22      	ldr	r2, [pc, #136]	; (8009300 <xTaskIncrementTick+0x160>)
 8009276:	6013      	str	r3, [r2, #0]
 8009278:	68bb      	ldr	r3, [r7, #8]
 800927a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800927c:	4613      	mov	r3, r2
 800927e:	009b      	lsls	r3, r3, #2
 8009280:	4413      	add	r3, r2
 8009282:	009b      	lsls	r3, r3, #2
 8009284:	4a1f      	ldr	r2, [pc, #124]	; (8009304 <xTaskIncrementTick+0x164>)
 8009286:	441a      	add	r2, r3
 8009288:	68bb      	ldr	r3, [r7, #8]
 800928a:	3304      	adds	r3, #4
 800928c:	4619      	mov	r1, r3
 800928e:	4610      	mov	r0, r2
 8009290:	f7fe ff1b 	bl	80080ca <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009294:	68bb      	ldr	r3, [r7, #8]
 8009296:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009298:	4b1b      	ldr	r3, [pc, #108]	; (8009308 <xTaskIncrementTick+0x168>)
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800929e:	429a      	cmp	r2, r3
 80092a0:	d3b8      	bcc.n	8009214 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80092a2:	2301      	movs	r3, #1
 80092a4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80092a6:	e7b5      	b.n	8009214 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80092a8:	4b17      	ldr	r3, [pc, #92]	; (8009308 <xTaskIncrementTick+0x168>)
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092ae:	4915      	ldr	r1, [pc, #84]	; (8009304 <xTaskIncrementTick+0x164>)
 80092b0:	4613      	mov	r3, r2
 80092b2:	009b      	lsls	r3, r3, #2
 80092b4:	4413      	add	r3, r2
 80092b6:	009b      	lsls	r3, r3, #2
 80092b8:	440b      	add	r3, r1
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	2b01      	cmp	r3, #1
 80092be:	d901      	bls.n	80092c4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80092c0:	2301      	movs	r3, #1
 80092c2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80092c4:	4b11      	ldr	r3, [pc, #68]	; (800930c <xTaskIncrementTick+0x16c>)
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d007      	beq.n	80092dc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80092cc:	2301      	movs	r3, #1
 80092ce:	617b      	str	r3, [r7, #20]
 80092d0:	e004      	b.n	80092dc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80092d2:	4b0f      	ldr	r3, [pc, #60]	; (8009310 <xTaskIncrementTick+0x170>)
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	3301      	adds	r3, #1
 80092d8:	4a0d      	ldr	r2, [pc, #52]	; (8009310 <xTaskIncrementTick+0x170>)
 80092da:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80092dc:	697b      	ldr	r3, [r7, #20]
}
 80092de:	4618      	mov	r0, r3
 80092e0:	3718      	adds	r7, #24
 80092e2:	46bd      	mov	sp, r7
 80092e4:	bd80      	pop	{r7, pc}
 80092e6:	bf00      	nop
 80092e8:	20000e28 	.word	0x20000e28
 80092ec:	20000e04 	.word	0x20000e04
 80092f0:	20000db8 	.word	0x20000db8
 80092f4:	20000dbc 	.word	0x20000dbc
 80092f8:	20000e18 	.word	0x20000e18
 80092fc:	20000e20 	.word	0x20000e20
 8009300:	20000e08 	.word	0x20000e08
 8009304:	20000930 	.word	0x20000930
 8009308:	2000092c 	.word	0x2000092c
 800930c:	20000e14 	.word	0x20000e14
 8009310:	20000e10 	.word	0x20000e10

08009314 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009314:	b480      	push	{r7}
 8009316:	b085      	sub	sp, #20
 8009318:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800931a:	4b28      	ldr	r3, [pc, #160]	; (80093bc <vTaskSwitchContext+0xa8>)
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	2b00      	cmp	r3, #0
 8009320:	d003      	beq.n	800932a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009322:	4b27      	ldr	r3, [pc, #156]	; (80093c0 <vTaskSwitchContext+0xac>)
 8009324:	2201      	movs	r2, #1
 8009326:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009328:	e041      	b.n	80093ae <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800932a:	4b25      	ldr	r3, [pc, #148]	; (80093c0 <vTaskSwitchContext+0xac>)
 800932c:	2200      	movs	r2, #0
 800932e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009330:	4b24      	ldr	r3, [pc, #144]	; (80093c4 <vTaskSwitchContext+0xb0>)
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	60fb      	str	r3, [r7, #12]
 8009336:	e010      	b.n	800935a <vTaskSwitchContext+0x46>
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	2b00      	cmp	r3, #0
 800933c:	d10a      	bne.n	8009354 <vTaskSwitchContext+0x40>
	__asm volatile
 800933e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009342:	f383 8811 	msr	BASEPRI, r3
 8009346:	f3bf 8f6f 	isb	sy
 800934a:	f3bf 8f4f 	dsb	sy
 800934e:	607b      	str	r3, [r7, #4]
}
 8009350:	bf00      	nop
 8009352:	e7fe      	b.n	8009352 <vTaskSwitchContext+0x3e>
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	3b01      	subs	r3, #1
 8009358:	60fb      	str	r3, [r7, #12]
 800935a:	491b      	ldr	r1, [pc, #108]	; (80093c8 <vTaskSwitchContext+0xb4>)
 800935c:	68fa      	ldr	r2, [r7, #12]
 800935e:	4613      	mov	r3, r2
 8009360:	009b      	lsls	r3, r3, #2
 8009362:	4413      	add	r3, r2
 8009364:	009b      	lsls	r3, r3, #2
 8009366:	440b      	add	r3, r1
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	2b00      	cmp	r3, #0
 800936c:	d0e4      	beq.n	8009338 <vTaskSwitchContext+0x24>
 800936e:	68fa      	ldr	r2, [r7, #12]
 8009370:	4613      	mov	r3, r2
 8009372:	009b      	lsls	r3, r3, #2
 8009374:	4413      	add	r3, r2
 8009376:	009b      	lsls	r3, r3, #2
 8009378:	4a13      	ldr	r2, [pc, #76]	; (80093c8 <vTaskSwitchContext+0xb4>)
 800937a:	4413      	add	r3, r2
 800937c:	60bb      	str	r3, [r7, #8]
 800937e:	68bb      	ldr	r3, [r7, #8]
 8009380:	685b      	ldr	r3, [r3, #4]
 8009382:	685a      	ldr	r2, [r3, #4]
 8009384:	68bb      	ldr	r3, [r7, #8]
 8009386:	605a      	str	r2, [r3, #4]
 8009388:	68bb      	ldr	r3, [r7, #8]
 800938a:	685a      	ldr	r2, [r3, #4]
 800938c:	68bb      	ldr	r3, [r7, #8]
 800938e:	3308      	adds	r3, #8
 8009390:	429a      	cmp	r2, r3
 8009392:	d104      	bne.n	800939e <vTaskSwitchContext+0x8a>
 8009394:	68bb      	ldr	r3, [r7, #8]
 8009396:	685b      	ldr	r3, [r3, #4]
 8009398:	685a      	ldr	r2, [r3, #4]
 800939a:	68bb      	ldr	r3, [r7, #8]
 800939c:	605a      	str	r2, [r3, #4]
 800939e:	68bb      	ldr	r3, [r7, #8]
 80093a0:	685b      	ldr	r3, [r3, #4]
 80093a2:	68db      	ldr	r3, [r3, #12]
 80093a4:	4a09      	ldr	r2, [pc, #36]	; (80093cc <vTaskSwitchContext+0xb8>)
 80093a6:	6013      	str	r3, [r2, #0]
 80093a8:	4a06      	ldr	r2, [pc, #24]	; (80093c4 <vTaskSwitchContext+0xb0>)
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	6013      	str	r3, [r2, #0]
}
 80093ae:	bf00      	nop
 80093b0:	3714      	adds	r7, #20
 80093b2:	46bd      	mov	sp, r7
 80093b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b8:	4770      	bx	lr
 80093ba:	bf00      	nop
 80093bc:	20000e28 	.word	0x20000e28
 80093c0:	20000e14 	.word	0x20000e14
 80093c4:	20000e08 	.word	0x20000e08
 80093c8:	20000930 	.word	0x20000930
 80093cc:	2000092c 	.word	0x2000092c

080093d0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b084      	sub	sp, #16
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
 80093d8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d10a      	bne.n	80093f6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80093e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093e4:	f383 8811 	msr	BASEPRI, r3
 80093e8:	f3bf 8f6f 	isb	sy
 80093ec:	f3bf 8f4f 	dsb	sy
 80093f0:	60fb      	str	r3, [r7, #12]
}
 80093f2:	bf00      	nop
 80093f4:	e7fe      	b.n	80093f4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80093f6:	4b07      	ldr	r3, [pc, #28]	; (8009414 <vTaskPlaceOnEventList+0x44>)
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	3318      	adds	r3, #24
 80093fc:	4619      	mov	r1, r3
 80093fe:	6878      	ldr	r0, [r7, #4]
 8009400:	f7fe fe87 	bl	8008112 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009404:	2101      	movs	r1, #1
 8009406:	6838      	ldr	r0, [r7, #0]
 8009408:	f000 fa7c 	bl	8009904 <prvAddCurrentTaskToDelayedList>
}
 800940c:	bf00      	nop
 800940e:	3710      	adds	r7, #16
 8009410:	46bd      	mov	sp, r7
 8009412:	bd80      	pop	{r7, pc}
 8009414:	2000092c 	.word	0x2000092c

08009418 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009418:	b580      	push	{r7, lr}
 800941a:	b086      	sub	sp, #24
 800941c:	af00      	add	r7, sp, #0
 800941e:	60f8      	str	r0, [r7, #12]
 8009420:	60b9      	str	r1, [r7, #8]
 8009422:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	2b00      	cmp	r3, #0
 8009428:	d10a      	bne.n	8009440 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800942a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800942e:	f383 8811 	msr	BASEPRI, r3
 8009432:	f3bf 8f6f 	isb	sy
 8009436:	f3bf 8f4f 	dsb	sy
 800943a:	617b      	str	r3, [r7, #20]
}
 800943c:	bf00      	nop
 800943e:	e7fe      	b.n	800943e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009440:	4b0a      	ldr	r3, [pc, #40]	; (800946c <vTaskPlaceOnEventListRestricted+0x54>)
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	3318      	adds	r3, #24
 8009446:	4619      	mov	r1, r3
 8009448:	68f8      	ldr	r0, [r7, #12]
 800944a:	f7fe fe3e 	bl	80080ca <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	2b00      	cmp	r3, #0
 8009452:	d002      	beq.n	800945a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8009454:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009458:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800945a:	6879      	ldr	r1, [r7, #4]
 800945c:	68b8      	ldr	r0, [r7, #8]
 800945e:	f000 fa51 	bl	8009904 <prvAddCurrentTaskToDelayedList>
	}
 8009462:	bf00      	nop
 8009464:	3718      	adds	r7, #24
 8009466:	46bd      	mov	sp, r7
 8009468:	bd80      	pop	{r7, pc}
 800946a:	bf00      	nop
 800946c:	2000092c 	.word	0x2000092c

08009470 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009470:	b580      	push	{r7, lr}
 8009472:	b086      	sub	sp, #24
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	68db      	ldr	r3, [r3, #12]
 800947c:	68db      	ldr	r3, [r3, #12]
 800947e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009480:	693b      	ldr	r3, [r7, #16]
 8009482:	2b00      	cmp	r3, #0
 8009484:	d10a      	bne.n	800949c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8009486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800948a:	f383 8811 	msr	BASEPRI, r3
 800948e:	f3bf 8f6f 	isb	sy
 8009492:	f3bf 8f4f 	dsb	sy
 8009496:	60fb      	str	r3, [r7, #12]
}
 8009498:	bf00      	nop
 800949a:	e7fe      	b.n	800949a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800949c:	693b      	ldr	r3, [r7, #16]
 800949e:	3318      	adds	r3, #24
 80094a0:	4618      	mov	r0, r3
 80094a2:	f7fe fe6f 	bl	8008184 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80094a6:	4b1e      	ldr	r3, [pc, #120]	; (8009520 <xTaskRemoveFromEventList+0xb0>)
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d11d      	bne.n	80094ea <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80094ae:	693b      	ldr	r3, [r7, #16]
 80094b0:	3304      	adds	r3, #4
 80094b2:	4618      	mov	r0, r3
 80094b4:	f7fe fe66 	bl	8008184 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80094b8:	693b      	ldr	r3, [r7, #16]
 80094ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094bc:	4b19      	ldr	r3, [pc, #100]	; (8009524 <xTaskRemoveFromEventList+0xb4>)
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	429a      	cmp	r2, r3
 80094c2:	d903      	bls.n	80094cc <xTaskRemoveFromEventList+0x5c>
 80094c4:	693b      	ldr	r3, [r7, #16]
 80094c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094c8:	4a16      	ldr	r2, [pc, #88]	; (8009524 <xTaskRemoveFromEventList+0xb4>)
 80094ca:	6013      	str	r3, [r2, #0]
 80094cc:	693b      	ldr	r3, [r7, #16]
 80094ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094d0:	4613      	mov	r3, r2
 80094d2:	009b      	lsls	r3, r3, #2
 80094d4:	4413      	add	r3, r2
 80094d6:	009b      	lsls	r3, r3, #2
 80094d8:	4a13      	ldr	r2, [pc, #76]	; (8009528 <xTaskRemoveFromEventList+0xb8>)
 80094da:	441a      	add	r2, r3
 80094dc:	693b      	ldr	r3, [r7, #16]
 80094de:	3304      	adds	r3, #4
 80094e0:	4619      	mov	r1, r3
 80094e2:	4610      	mov	r0, r2
 80094e4:	f7fe fdf1 	bl	80080ca <vListInsertEnd>
 80094e8:	e005      	b.n	80094f6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80094ea:	693b      	ldr	r3, [r7, #16]
 80094ec:	3318      	adds	r3, #24
 80094ee:	4619      	mov	r1, r3
 80094f0:	480e      	ldr	r0, [pc, #56]	; (800952c <xTaskRemoveFromEventList+0xbc>)
 80094f2:	f7fe fdea 	bl	80080ca <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80094f6:	693b      	ldr	r3, [r7, #16]
 80094f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094fa:	4b0d      	ldr	r3, [pc, #52]	; (8009530 <xTaskRemoveFromEventList+0xc0>)
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009500:	429a      	cmp	r2, r3
 8009502:	d905      	bls.n	8009510 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009504:	2301      	movs	r3, #1
 8009506:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009508:	4b0a      	ldr	r3, [pc, #40]	; (8009534 <xTaskRemoveFromEventList+0xc4>)
 800950a:	2201      	movs	r2, #1
 800950c:	601a      	str	r2, [r3, #0]
 800950e:	e001      	b.n	8009514 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009510:	2300      	movs	r3, #0
 8009512:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009514:	697b      	ldr	r3, [r7, #20]
}
 8009516:	4618      	mov	r0, r3
 8009518:	3718      	adds	r7, #24
 800951a:	46bd      	mov	sp, r7
 800951c:	bd80      	pop	{r7, pc}
 800951e:	bf00      	nop
 8009520:	20000e28 	.word	0x20000e28
 8009524:	20000e08 	.word	0x20000e08
 8009528:	20000930 	.word	0x20000930
 800952c:	20000dc0 	.word	0x20000dc0
 8009530:	2000092c 	.word	0x2000092c
 8009534:	20000e14 	.word	0x20000e14

08009538 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009538:	b480      	push	{r7}
 800953a:	b083      	sub	sp, #12
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009540:	4b06      	ldr	r3, [pc, #24]	; (800955c <vTaskInternalSetTimeOutState+0x24>)
 8009542:	681a      	ldr	r2, [r3, #0]
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009548:	4b05      	ldr	r3, [pc, #20]	; (8009560 <vTaskInternalSetTimeOutState+0x28>)
 800954a:	681a      	ldr	r2, [r3, #0]
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	605a      	str	r2, [r3, #4]
}
 8009550:	bf00      	nop
 8009552:	370c      	adds	r7, #12
 8009554:	46bd      	mov	sp, r7
 8009556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800955a:	4770      	bx	lr
 800955c:	20000e18 	.word	0x20000e18
 8009560:	20000e04 	.word	0x20000e04

08009564 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009564:	b580      	push	{r7, lr}
 8009566:	b088      	sub	sp, #32
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]
 800956c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	2b00      	cmp	r3, #0
 8009572:	d10a      	bne.n	800958a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009578:	f383 8811 	msr	BASEPRI, r3
 800957c:	f3bf 8f6f 	isb	sy
 8009580:	f3bf 8f4f 	dsb	sy
 8009584:	613b      	str	r3, [r7, #16]
}
 8009586:	bf00      	nop
 8009588:	e7fe      	b.n	8009588 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800958a:	683b      	ldr	r3, [r7, #0]
 800958c:	2b00      	cmp	r3, #0
 800958e:	d10a      	bne.n	80095a6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009594:	f383 8811 	msr	BASEPRI, r3
 8009598:	f3bf 8f6f 	isb	sy
 800959c:	f3bf 8f4f 	dsb	sy
 80095a0:	60fb      	str	r3, [r7, #12]
}
 80095a2:	bf00      	nop
 80095a4:	e7fe      	b.n	80095a4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80095a6:	f000 fe7d 	bl	800a2a4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80095aa:	4b1d      	ldr	r3, [pc, #116]	; (8009620 <xTaskCheckForTimeOut+0xbc>)
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	685b      	ldr	r3, [r3, #4]
 80095b4:	69ba      	ldr	r2, [r7, #24]
 80095b6:	1ad3      	subs	r3, r2, r3
 80095b8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80095ba:	683b      	ldr	r3, [r7, #0]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80095c2:	d102      	bne.n	80095ca <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80095c4:	2300      	movs	r3, #0
 80095c6:	61fb      	str	r3, [r7, #28]
 80095c8:	e023      	b.n	8009612 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681a      	ldr	r2, [r3, #0]
 80095ce:	4b15      	ldr	r3, [pc, #84]	; (8009624 <xTaskCheckForTimeOut+0xc0>)
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	429a      	cmp	r2, r3
 80095d4:	d007      	beq.n	80095e6 <xTaskCheckForTimeOut+0x82>
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	685b      	ldr	r3, [r3, #4]
 80095da:	69ba      	ldr	r2, [r7, #24]
 80095dc:	429a      	cmp	r2, r3
 80095de:	d302      	bcc.n	80095e6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80095e0:	2301      	movs	r3, #1
 80095e2:	61fb      	str	r3, [r7, #28]
 80095e4:	e015      	b.n	8009612 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80095e6:	683b      	ldr	r3, [r7, #0]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	697a      	ldr	r2, [r7, #20]
 80095ec:	429a      	cmp	r2, r3
 80095ee:	d20b      	bcs.n	8009608 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80095f0:	683b      	ldr	r3, [r7, #0]
 80095f2:	681a      	ldr	r2, [r3, #0]
 80095f4:	697b      	ldr	r3, [r7, #20]
 80095f6:	1ad2      	subs	r2, r2, r3
 80095f8:	683b      	ldr	r3, [r7, #0]
 80095fa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80095fc:	6878      	ldr	r0, [r7, #4]
 80095fe:	f7ff ff9b 	bl	8009538 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009602:	2300      	movs	r3, #0
 8009604:	61fb      	str	r3, [r7, #28]
 8009606:	e004      	b.n	8009612 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009608:	683b      	ldr	r3, [r7, #0]
 800960a:	2200      	movs	r2, #0
 800960c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800960e:	2301      	movs	r3, #1
 8009610:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009612:	f000 fe77 	bl	800a304 <vPortExitCritical>

	return xReturn;
 8009616:	69fb      	ldr	r3, [r7, #28]
}
 8009618:	4618      	mov	r0, r3
 800961a:	3720      	adds	r7, #32
 800961c:	46bd      	mov	sp, r7
 800961e:	bd80      	pop	{r7, pc}
 8009620:	20000e04 	.word	0x20000e04
 8009624:	20000e18 	.word	0x20000e18

08009628 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009628:	b480      	push	{r7}
 800962a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800962c:	4b03      	ldr	r3, [pc, #12]	; (800963c <vTaskMissedYield+0x14>)
 800962e:	2201      	movs	r2, #1
 8009630:	601a      	str	r2, [r3, #0]
}
 8009632:	bf00      	nop
 8009634:	46bd      	mov	sp, r7
 8009636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800963a:	4770      	bx	lr
 800963c:	20000e14 	.word	0x20000e14

08009640 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009640:	b580      	push	{r7, lr}
 8009642:	b082      	sub	sp, #8
 8009644:	af00      	add	r7, sp, #0
 8009646:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009648:	f000 f852 	bl	80096f0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800964c:	4b06      	ldr	r3, [pc, #24]	; (8009668 <prvIdleTask+0x28>)
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	2b01      	cmp	r3, #1
 8009652:	d9f9      	bls.n	8009648 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009654:	4b05      	ldr	r3, [pc, #20]	; (800966c <prvIdleTask+0x2c>)
 8009656:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800965a:	601a      	str	r2, [r3, #0]
 800965c:	f3bf 8f4f 	dsb	sy
 8009660:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009664:	e7f0      	b.n	8009648 <prvIdleTask+0x8>
 8009666:	bf00      	nop
 8009668:	20000930 	.word	0x20000930
 800966c:	e000ed04 	.word	0xe000ed04

08009670 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009670:	b580      	push	{r7, lr}
 8009672:	b082      	sub	sp, #8
 8009674:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009676:	2300      	movs	r3, #0
 8009678:	607b      	str	r3, [r7, #4]
 800967a:	e00c      	b.n	8009696 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800967c:	687a      	ldr	r2, [r7, #4]
 800967e:	4613      	mov	r3, r2
 8009680:	009b      	lsls	r3, r3, #2
 8009682:	4413      	add	r3, r2
 8009684:	009b      	lsls	r3, r3, #2
 8009686:	4a12      	ldr	r2, [pc, #72]	; (80096d0 <prvInitialiseTaskLists+0x60>)
 8009688:	4413      	add	r3, r2
 800968a:	4618      	mov	r0, r3
 800968c:	f7fe fcf0 	bl	8008070 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	3301      	adds	r3, #1
 8009694:	607b      	str	r3, [r7, #4]
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	2b37      	cmp	r3, #55	; 0x37
 800969a:	d9ef      	bls.n	800967c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800969c:	480d      	ldr	r0, [pc, #52]	; (80096d4 <prvInitialiseTaskLists+0x64>)
 800969e:	f7fe fce7 	bl	8008070 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80096a2:	480d      	ldr	r0, [pc, #52]	; (80096d8 <prvInitialiseTaskLists+0x68>)
 80096a4:	f7fe fce4 	bl	8008070 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80096a8:	480c      	ldr	r0, [pc, #48]	; (80096dc <prvInitialiseTaskLists+0x6c>)
 80096aa:	f7fe fce1 	bl	8008070 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80096ae:	480c      	ldr	r0, [pc, #48]	; (80096e0 <prvInitialiseTaskLists+0x70>)
 80096b0:	f7fe fcde 	bl	8008070 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80096b4:	480b      	ldr	r0, [pc, #44]	; (80096e4 <prvInitialiseTaskLists+0x74>)
 80096b6:	f7fe fcdb 	bl	8008070 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80096ba:	4b0b      	ldr	r3, [pc, #44]	; (80096e8 <prvInitialiseTaskLists+0x78>)
 80096bc:	4a05      	ldr	r2, [pc, #20]	; (80096d4 <prvInitialiseTaskLists+0x64>)
 80096be:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80096c0:	4b0a      	ldr	r3, [pc, #40]	; (80096ec <prvInitialiseTaskLists+0x7c>)
 80096c2:	4a05      	ldr	r2, [pc, #20]	; (80096d8 <prvInitialiseTaskLists+0x68>)
 80096c4:	601a      	str	r2, [r3, #0]
}
 80096c6:	bf00      	nop
 80096c8:	3708      	adds	r7, #8
 80096ca:	46bd      	mov	sp, r7
 80096cc:	bd80      	pop	{r7, pc}
 80096ce:	bf00      	nop
 80096d0:	20000930 	.word	0x20000930
 80096d4:	20000d90 	.word	0x20000d90
 80096d8:	20000da4 	.word	0x20000da4
 80096dc:	20000dc0 	.word	0x20000dc0
 80096e0:	20000dd4 	.word	0x20000dd4
 80096e4:	20000dec 	.word	0x20000dec
 80096e8:	20000db8 	.word	0x20000db8
 80096ec:	20000dbc 	.word	0x20000dbc

080096f0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80096f0:	b580      	push	{r7, lr}
 80096f2:	b082      	sub	sp, #8
 80096f4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80096f6:	e019      	b.n	800972c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80096f8:	f000 fdd4 	bl	800a2a4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80096fc:	4b10      	ldr	r3, [pc, #64]	; (8009740 <prvCheckTasksWaitingTermination+0x50>)
 80096fe:	68db      	ldr	r3, [r3, #12]
 8009700:	68db      	ldr	r3, [r3, #12]
 8009702:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	3304      	adds	r3, #4
 8009708:	4618      	mov	r0, r3
 800970a:	f7fe fd3b 	bl	8008184 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800970e:	4b0d      	ldr	r3, [pc, #52]	; (8009744 <prvCheckTasksWaitingTermination+0x54>)
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	3b01      	subs	r3, #1
 8009714:	4a0b      	ldr	r2, [pc, #44]	; (8009744 <prvCheckTasksWaitingTermination+0x54>)
 8009716:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009718:	4b0b      	ldr	r3, [pc, #44]	; (8009748 <prvCheckTasksWaitingTermination+0x58>)
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	3b01      	subs	r3, #1
 800971e:	4a0a      	ldr	r2, [pc, #40]	; (8009748 <prvCheckTasksWaitingTermination+0x58>)
 8009720:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009722:	f000 fdef 	bl	800a304 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009726:	6878      	ldr	r0, [r7, #4]
 8009728:	f000 f810 	bl	800974c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800972c:	4b06      	ldr	r3, [pc, #24]	; (8009748 <prvCheckTasksWaitingTermination+0x58>)
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	2b00      	cmp	r3, #0
 8009732:	d1e1      	bne.n	80096f8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009734:	bf00      	nop
 8009736:	bf00      	nop
 8009738:	3708      	adds	r7, #8
 800973a:	46bd      	mov	sp, r7
 800973c:	bd80      	pop	{r7, pc}
 800973e:	bf00      	nop
 8009740:	20000dd4 	.word	0x20000dd4
 8009744:	20000e00 	.word	0x20000e00
 8009748:	20000de8 	.word	0x20000de8

0800974c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800974c:	b580      	push	{r7, lr}
 800974e:	b084      	sub	sp, #16
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800975a:	2b00      	cmp	r3, #0
 800975c:	d108      	bne.n	8009770 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009762:	4618      	mov	r0, r3
 8009764:	f000 ff8c 	bl	800a680 <vPortFree>
				vPortFree( pxTCB );
 8009768:	6878      	ldr	r0, [r7, #4]
 800976a:	f000 ff89 	bl	800a680 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800976e:	e018      	b.n	80097a2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009776:	2b01      	cmp	r3, #1
 8009778:	d103      	bne.n	8009782 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800977a:	6878      	ldr	r0, [r7, #4]
 800977c:	f000 ff80 	bl	800a680 <vPortFree>
	}
 8009780:	e00f      	b.n	80097a2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009788:	2b02      	cmp	r3, #2
 800978a:	d00a      	beq.n	80097a2 <prvDeleteTCB+0x56>
	__asm volatile
 800978c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009790:	f383 8811 	msr	BASEPRI, r3
 8009794:	f3bf 8f6f 	isb	sy
 8009798:	f3bf 8f4f 	dsb	sy
 800979c:	60fb      	str	r3, [r7, #12]
}
 800979e:	bf00      	nop
 80097a0:	e7fe      	b.n	80097a0 <prvDeleteTCB+0x54>
	}
 80097a2:	bf00      	nop
 80097a4:	3710      	adds	r7, #16
 80097a6:	46bd      	mov	sp, r7
 80097a8:	bd80      	pop	{r7, pc}
	...

080097ac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80097ac:	b480      	push	{r7}
 80097ae:	b083      	sub	sp, #12
 80097b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80097b2:	4b0c      	ldr	r3, [pc, #48]	; (80097e4 <prvResetNextTaskUnblockTime+0x38>)
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d104      	bne.n	80097c6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80097bc:	4b0a      	ldr	r3, [pc, #40]	; (80097e8 <prvResetNextTaskUnblockTime+0x3c>)
 80097be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80097c2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80097c4:	e008      	b.n	80097d8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80097c6:	4b07      	ldr	r3, [pc, #28]	; (80097e4 <prvResetNextTaskUnblockTime+0x38>)
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	68db      	ldr	r3, [r3, #12]
 80097cc:	68db      	ldr	r3, [r3, #12]
 80097ce:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	685b      	ldr	r3, [r3, #4]
 80097d4:	4a04      	ldr	r2, [pc, #16]	; (80097e8 <prvResetNextTaskUnblockTime+0x3c>)
 80097d6:	6013      	str	r3, [r2, #0]
}
 80097d8:	bf00      	nop
 80097da:	370c      	adds	r7, #12
 80097dc:	46bd      	mov	sp, r7
 80097de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e2:	4770      	bx	lr
 80097e4:	20000db8 	.word	0x20000db8
 80097e8:	20000e20 	.word	0x20000e20

080097ec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80097ec:	b480      	push	{r7}
 80097ee:	b083      	sub	sp, #12
 80097f0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80097f2:	4b0b      	ldr	r3, [pc, #44]	; (8009820 <xTaskGetSchedulerState+0x34>)
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d102      	bne.n	8009800 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80097fa:	2301      	movs	r3, #1
 80097fc:	607b      	str	r3, [r7, #4]
 80097fe:	e008      	b.n	8009812 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009800:	4b08      	ldr	r3, [pc, #32]	; (8009824 <xTaskGetSchedulerState+0x38>)
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	2b00      	cmp	r3, #0
 8009806:	d102      	bne.n	800980e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009808:	2302      	movs	r3, #2
 800980a:	607b      	str	r3, [r7, #4]
 800980c:	e001      	b.n	8009812 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800980e:	2300      	movs	r3, #0
 8009810:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009812:	687b      	ldr	r3, [r7, #4]
	}
 8009814:	4618      	mov	r0, r3
 8009816:	370c      	adds	r7, #12
 8009818:	46bd      	mov	sp, r7
 800981a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981e:	4770      	bx	lr
 8009820:	20000e0c 	.word	0x20000e0c
 8009824:	20000e28 	.word	0x20000e28

08009828 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009828:	b580      	push	{r7, lr}
 800982a:	b086      	sub	sp, #24
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009834:	2300      	movs	r3, #0
 8009836:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d056      	beq.n	80098ec <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800983e:	4b2e      	ldr	r3, [pc, #184]	; (80098f8 <xTaskPriorityDisinherit+0xd0>)
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	693a      	ldr	r2, [r7, #16]
 8009844:	429a      	cmp	r2, r3
 8009846:	d00a      	beq.n	800985e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800984c:	f383 8811 	msr	BASEPRI, r3
 8009850:	f3bf 8f6f 	isb	sy
 8009854:	f3bf 8f4f 	dsb	sy
 8009858:	60fb      	str	r3, [r7, #12]
}
 800985a:	bf00      	nop
 800985c:	e7fe      	b.n	800985c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800985e:	693b      	ldr	r3, [r7, #16]
 8009860:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009862:	2b00      	cmp	r3, #0
 8009864:	d10a      	bne.n	800987c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800986a:	f383 8811 	msr	BASEPRI, r3
 800986e:	f3bf 8f6f 	isb	sy
 8009872:	f3bf 8f4f 	dsb	sy
 8009876:	60bb      	str	r3, [r7, #8]
}
 8009878:	bf00      	nop
 800987a:	e7fe      	b.n	800987a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800987c:	693b      	ldr	r3, [r7, #16]
 800987e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009880:	1e5a      	subs	r2, r3, #1
 8009882:	693b      	ldr	r3, [r7, #16]
 8009884:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009886:	693b      	ldr	r3, [r7, #16]
 8009888:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800988a:	693b      	ldr	r3, [r7, #16]
 800988c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800988e:	429a      	cmp	r2, r3
 8009890:	d02c      	beq.n	80098ec <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009892:	693b      	ldr	r3, [r7, #16]
 8009894:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009896:	2b00      	cmp	r3, #0
 8009898:	d128      	bne.n	80098ec <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800989a:	693b      	ldr	r3, [r7, #16]
 800989c:	3304      	adds	r3, #4
 800989e:	4618      	mov	r0, r3
 80098a0:	f7fe fc70 	bl	8008184 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80098a4:	693b      	ldr	r3, [r7, #16]
 80098a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80098a8:	693b      	ldr	r3, [r7, #16]
 80098aa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80098ac:	693b      	ldr	r3, [r7, #16]
 80098ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098b0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80098b4:	693b      	ldr	r3, [r7, #16]
 80098b6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80098b8:	693b      	ldr	r3, [r7, #16]
 80098ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098bc:	4b0f      	ldr	r3, [pc, #60]	; (80098fc <xTaskPriorityDisinherit+0xd4>)
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	429a      	cmp	r2, r3
 80098c2:	d903      	bls.n	80098cc <xTaskPriorityDisinherit+0xa4>
 80098c4:	693b      	ldr	r3, [r7, #16]
 80098c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098c8:	4a0c      	ldr	r2, [pc, #48]	; (80098fc <xTaskPriorityDisinherit+0xd4>)
 80098ca:	6013      	str	r3, [r2, #0]
 80098cc:	693b      	ldr	r3, [r7, #16]
 80098ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098d0:	4613      	mov	r3, r2
 80098d2:	009b      	lsls	r3, r3, #2
 80098d4:	4413      	add	r3, r2
 80098d6:	009b      	lsls	r3, r3, #2
 80098d8:	4a09      	ldr	r2, [pc, #36]	; (8009900 <xTaskPriorityDisinherit+0xd8>)
 80098da:	441a      	add	r2, r3
 80098dc:	693b      	ldr	r3, [r7, #16]
 80098de:	3304      	adds	r3, #4
 80098e0:	4619      	mov	r1, r3
 80098e2:	4610      	mov	r0, r2
 80098e4:	f7fe fbf1 	bl	80080ca <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80098e8:	2301      	movs	r3, #1
 80098ea:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80098ec:	697b      	ldr	r3, [r7, #20]
	}
 80098ee:	4618      	mov	r0, r3
 80098f0:	3718      	adds	r7, #24
 80098f2:	46bd      	mov	sp, r7
 80098f4:	bd80      	pop	{r7, pc}
 80098f6:	bf00      	nop
 80098f8:	2000092c 	.word	0x2000092c
 80098fc:	20000e08 	.word	0x20000e08
 8009900:	20000930 	.word	0x20000930

08009904 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009904:	b580      	push	{r7, lr}
 8009906:	b084      	sub	sp, #16
 8009908:	af00      	add	r7, sp, #0
 800990a:	6078      	str	r0, [r7, #4]
 800990c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800990e:	4b21      	ldr	r3, [pc, #132]	; (8009994 <prvAddCurrentTaskToDelayedList+0x90>)
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009914:	4b20      	ldr	r3, [pc, #128]	; (8009998 <prvAddCurrentTaskToDelayedList+0x94>)
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	3304      	adds	r3, #4
 800991a:	4618      	mov	r0, r3
 800991c:	f7fe fc32 	bl	8008184 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009926:	d10a      	bne.n	800993e <prvAddCurrentTaskToDelayedList+0x3a>
 8009928:	683b      	ldr	r3, [r7, #0]
 800992a:	2b00      	cmp	r3, #0
 800992c:	d007      	beq.n	800993e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800992e:	4b1a      	ldr	r3, [pc, #104]	; (8009998 <prvAddCurrentTaskToDelayedList+0x94>)
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	3304      	adds	r3, #4
 8009934:	4619      	mov	r1, r3
 8009936:	4819      	ldr	r0, [pc, #100]	; (800999c <prvAddCurrentTaskToDelayedList+0x98>)
 8009938:	f7fe fbc7 	bl	80080ca <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800993c:	e026      	b.n	800998c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800993e:	68fa      	ldr	r2, [r7, #12]
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	4413      	add	r3, r2
 8009944:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009946:	4b14      	ldr	r3, [pc, #80]	; (8009998 <prvAddCurrentTaskToDelayedList+0x94>)
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	68ba      	ldr	r2, [r7, #8]
 800994c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800994e:	68ba      	ldr	r2, [r7, #8]
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	429a      	cmp	r2, r3
 8009954:	d209      	bcs.n	800996a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009956:	4b12      	ldr	r3, [pc, #72]	; (80099a0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009958:	681a      	ldr	r2, [r3, #0]
 800995a:	4b0f      	ldr	r3, [pc, #60]	; (8009998 <prvAddCurrentTaskToDelayedList+0x94>)
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	3304      	adds	r3, #4
 8009960:	4619      	mov	r1, r3
 8009962:	4610      	mov	r0, r2
 8009964:	f7fe fbd5 	bl	8008112 <vListInsert>
}
 8009968:	e010      	b.n	800998c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800996a:	4b0e      	ldr	r3, [pc, #56]	; (80099a4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800996c:	681a      	ldr	r2, [r3, #0]
 800996e:	4b0a      	ldr	r3, [pc, #40]	; (8009998 <prvAddCurrentTaskToDelayedList+0x94>)
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	3304      	adds	r3, #4
 8009974:	4619      	mov	r1, r3
 8009976:	4610      	mov	r0, r2
 8009978:	f7fe fbcb 	bl	8008112 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800997c:	4b0a      	ldr	r3, [pc, #40]	; (80099a8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	68ba      	ldr	r2, [r7, #8]
 8009982:	429a      	cmp	r2, r3
 8009984:	d202      	bcs.n	800998c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009986:	4a08      	ldr	r2, [pc, #32]	; (80099a8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009988:	68bb      	ldr	r3, [r7, #8]
 800998a:	6013      	str	r3, [r2, #0]
}
 800998c:	bf00      	nop
 800998e:	3710      	adds	r7, #16
 8009990:	46bd      	mov	sp, r7
 8009992:	bd80      	pop	{r7, pc}
 8009994:	20000e04 	.word	0x20000e04
 8009998:	2000092c 	.word	0x2000092c
 800999c:	20000dec 	.word	0x20000dec
 80099a0:	20000dbc 	.word	0x20000dbc
 80099a4:	20000db8 	.word	0x20000db8
 80099a8:	20000e20 	.word	0x20000e20

080099ac <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80099ac:	b580      	push	{r7, lr}
 80099ae:	b08a      	sub	sp, #40	; 0x28
 80099b0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80099b2:	2300      	movs	r3, #0
 80099b4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80099b6:	f000 fb07 	bl	8009fc8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80099ba:	4b1c      	ldr	r3, [pc, #112]	; (8009a2c <xTimerCreateTimerTask+0x80>)
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d021      	beq.n	8009a06 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80099c2:	2300      	movs	r3, #0
 80099c4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80099c6:	2300      	movs	r3, #0
 80099c8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80099ca:	1d3a      	adds	r2, r7, #4
 80099cc:	f107 0108 	add.w	r1, r7, #8
 80099d0:	f107 030c 	add.w	r3, r7, #12
 80099d4:	4618      	mov	r0, r3
 80099d6:	f7fe fb31 	bl	800803c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80099da:	6879      	ldr	r1, [r7, #4]
 80099dc:	68bb      	ldr	r3, [r7, #8]
 80099de:	68fa      	ldr	r2, [r7, #12]
 80099e0:	9202      	str	r2, [sp, #8]
 80099e2:	9301      	str	r3, [sp, #4]
 80099e4:	2302      	movs	r3, #2
 80099e6:	9300      	str	r3, [sp, #0]
 80099e8:	2300      	movs	r3, #0
 80099ea:	460a      	mov	r2, r1
 80099ec:	4910      	ldr	r1, [pc, #64]	; (8009a30 <xTimerCreateTimerTask+0x84>)
 80099ee:	4811      	ldr	r0, [pc, #68]	; (8009a34 <xTimerCreateTimerTask+0x88>)
 80099f0:	f7ff f8de 	bl	8008bb0 <xTaskCreateStatic>
 80099f4:	4603      	mov	r3, r0
 80099f6:	4a10      	ldr	r2, [pc, #64]	; (8009a38 <xTimerCreateTimerTask+0x8c>)
 80099f8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80099fa:	4b0f      	ldr	r3, [pc, #60]	; (8009a38 <xTimerCreateTimerTask+0x8c>)
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d001      	beq.n	8009a06 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009a02:	2301      	movs	r3, #1
 8009a04:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009a06:	697b      	ldr	r3, [r7, #20]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d10a      	bne.n	8009a22 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a10:	f383 8811 	msr	BASEPRI, r3
 8009a14:	f3bf 8f6f 	isb	sy
 8009a18:	f3bf 8f4f 	dsb	sy
 8009a1c:	613b      	str	r3, [r7, #16]
}
 8009a1e:	bf00      	nop
 8009a20:	e7fe      	b.n	8009a20 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009a22:	697b      	ldr	r3, [r7, #20]
}
 8009a24:	4618      	mov	r0, r3
 8009a26:	3718      	adds	r7, #24
 8009a28:	46bd      	mov	sp, r7
 8009a2a:	bd80      	pop	{r7, pc}
 8009a2c:	20000e5c 	.word	0x20000e5c
 8009a30:	0800b480 	.word	0x0800b480
 8009a34:	08009b71 	.word	0x08009b71
 8009a38:	20000e60 	.word	0x20000e60

08009a3c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009a3c:	b580      	push	{r7, lr}
 8009a3e:	b08a      	sub	sp, #40	; 0x28
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	60f8      	str	r0, [r7, #12]
 8009a44:	60b9      	str	r1, [r7, #8]
 8009a46:	607a      	str	r2, [r7, #4]
 8009a48:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d10a      	bne.n	8009a6a <xTimerGenericCommand+0x2e>
	__asm volatile
 8009a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a58:	f383 8811 	msr	BASEPRI, r3
 8009a5c:	f3bf 8f6f 	isb	sy
 8009a60:	f3bf 8f4f 	dsb	sy
 8009a64:	623b      	str	r3, [r7, #32]
}
 8009a66:	bf00      	nop
 8009a68:	e7fe      	b.n	8009a68 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009a6a:	4b1a      	ldr	r3, [pc, #104]	; (8009ad4 <xTimerGenericCommand+0x98>)
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d02a      	beq.n	8009ac8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009a72:	68bb      	ldr	r3, [r7, #8]
 8009a74:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009a7e:	68bb      	ldr	r3, [r7, #8]
 8009a80:	2b05      	cmp	r3, #5
 8009a82:	dc18      	bgt.n	8009ab6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009a84:	f7ff feb2 	bl	80097ec <xTaskGetSchedulerState>
 8009a88:	4603      	mov	r3, r0
 8009a8a:	2b02      	cmp	r3, #2
 8009a8c:	d109      	bne.n	8009aa2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009a8e:	4b11      	ldr	r3, [pc, #68]	; (8009ad4 <xTimerGenericCommand+0x98>)
 8009a90:	6818      	ldr	r0, [r3, #0]
 8009a92:	f107 0110 	add.w	r1, r7, #16
 8009a96:	2300      	movs	r3, #0
 8009a98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a9a:	f7fe fca1 	bl	80083e0 <xQueueGenericSend>
 8009a9e:	6278      	str	r0, [r7, #36]	; 0x24
 8009aa0:	e012      	b.n	8009ac8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009aa2:	4b0c      	ldr	r3, [pc, #48]	; (8009ad4 <xTimerGenericCommand+0x98>)
 8009aa4:	6818      	ldr	r0, [r3, #0]
 8009aa6:	f107 0110 	add.w	r1, r7, #16
 8009aaa:	2300      	movs	r3, #0
 8009aac:	2200      	movs	r2, #0
 8009aae:	f7fe fc97 	bl	80083e0 <xQueueGenericSend>
 8009ab2:	6278      	str	r0, [r7, #36]	; 0x24
 8009ab4:	e008      	b.n	8009ac8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009ab6:	4b07      	ldr	r3, [pc, #28]	; (8009ad4 <xTimerGenericCommand+0x98>)
 8009ab8:	6818      	ldr	r0, [r3, #0]
 8009aba:	f107 0110 	add.w	r1, r7, #16
 8009abe:	2300      	movs	r3, #0
 8009ac0:	683a      	ldr	r2, [r7, #0]
 8009ac2:	f7fe fd8b 	bl	80085dc <xQueueGenericSendFromISR>
 8009ac6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009aca:	4618      	mov	r0, r3
 8009acc:	3728      	adds	r7, #40	; 0x28
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	bd80      	pop	{r7, pc}
 8009ad2:	bf00      	nop
 8009ad4:	20000e5c 	.word	0x20000e5c

08009ad8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009ad8:	b580      	push	{r7, lr}
 8009ada:	b088      	sub	sp, #32
 8009adc:	af02      	add	r7, sp, #8
 8009ade:	6078      	str	r0, [r7, #4]
 8009ae0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ae2:	4b22      	ldr	r3, [pc, #136]	; (8009b6c <prvProcessExpiredTimer+0x94>)
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	68db      	ldr	r3, [r3, #12]
 8009ae8:	68db      	ldr	r3, [r3, #12]
 8009aea:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009aec:	697b      	ldr	r3, [r7, #20]
 8009aee:	3304      	adds	r3, #4
 8009af0:	4618      	mov	r0, r3
 8009af2:	f7fe fb47 	bl	8008184 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009af6:	697b      	ldr	r3, [r7, #20]
 8009af8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009afc:	f003 0304 	and.w	r3, r3, #4
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d022      	beq.n	8009b4a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009b04:	697b      	ldr	r3, [r7, #20]
 8009b06:	699a      	ldr	r2, [r3, #24]
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	18d1      	adds	r1, r2, r3
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	683a      	ldr	r2, [r7, #0]
 8009b10:	6978      	ldr	r0, [r7, #20]
 8009b12:	f000 f8d1 	bl	8009cb8 <prvInsertTimerInActiveList>
 8009b16:	4603      	mov	r3, r0
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d01f      	beq.n	8009b5c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009b1c:	2300      	movs	r3, #0
 8009b1e:	9300      	str	r3, [sp, #0]
 8009b20:	2300      	movs	r3, #0
 8009b22:	687a      	ldr	r2, [r7, #4]
 8009b24:	2100      	movs	r1, #0
 8009b26:	6978      	ldr	r0, [r7, #20]
 8009b28:	f7ff ff88 	bl	8009a3c <xTimerGenericCommand>
 8009b2c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009b2e:	693b      	ldr	r3, [r7, #16]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d113      	bne.n	8009b5c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b38:	f383 8811 	msr	BASEPRI, r3
 8009b3c:	f3bf 8f6f 	isb	sy
 8009b40:	f3bf 8f4f 	dsb	sy
 8009b44:	60fb      	str	r3, [r7, #12]
}
 8009b46:	bf00      	nop
 8009b48:	e7fe      	b.n	8009b48 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009b4a:	697b      	ldr	r3, [r7, #20]
 8009b4c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009b50:	f023 0301 	bic.w	r3, r3, #1
 8009b54:	b2da      	uxtb	r2, r3
 8009b56:	697b      	ldr	r3, [r7, #20]
 8009b58:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009b5c:	697b      	ldr	r3, [r7, #20]
 8009b5e:	6a1b      	ldr	r3, [r3, #32]
 8009b60:	6978      	ldr	r0, [r7, #20]
 8009b62:	4798      	blx	r3
}
 8009b64:	bf00      	nop
 8009b66:	3718      	adds	r7, #24
 8009b68:	46bd      	mov	sp, r7
 8009b6a:	bd80      	pop	{r7, pc}
 8009b6c:	20000e54 	.word	0x20000e54

08009b70 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009b70:	b580      	push	{r7, lr}
 8009b72:	b084      	sub	sp, #16
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009b78:	f107 0308 	add.w	r3, r7, #8
 8009b7c:	4618      	mov	r0, r3
 8009b7e:	f000 f857 	bl	8009c30 <prvGetNextExpireTime>
 8009b82:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009b84:	68bb      	ldr	r3, [r7, #8]
 8009b86:	4619      	mov	r1, r3
 8009b88:	68f8      	ldr	r0, [r7, #12]
 8009b8a:	f000 f803 	bl	8009b94 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009b8e:	f000 f8d5 	bl	8009d3c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009b92:	e7f1      	b.n	8009b78 <prvTimerTask+0x8>

08009b94 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b084      	sub	sp, #16
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
 8009b9c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009b9e:	f7ff fa43 	bl	8009028 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009ba2:	f107 0308 	add.w	r3, r7, #8
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	f000 f866 	bl	8009c78 <prvSampleTimeNow>
 8009bac:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009bae:	68bb      	ldr	r3, [r7, #8]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d130      	bne.n	8009c16 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009bb4:	683b      	ldr	r3, [r7, #0]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d10a      	bne.n	8009bd0 <prvProcessTimerOrBlockTask+0x3c>
 8009bba:	687a      	ldr	r2, [r7, #4]
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	429a      	cmp	r2, r3
 8009bc0:	d806      	bhi.n	8009bd0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009bc2:	f7ff fa3f 	bl	8009044 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009bc6:	68f9      	ldr	r1, [r7, #12]
 8009bc8:	6878      	ldr	r0, [r7, #4]
 8009bca:	f7ff ff85 	bl	8009ad8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009bce:	e024      	b.n	8009c1a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009bd0:	683b      	ldr	r3, [r7, #0]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d008      	beq.n	8009be8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009bd6:	4b13      	ldr	r3, [pc, #76]	; (8009c24 <prvProcessTimerOrBlockTask+0x90>)
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d101      	bne.n	8009be4 <prvProcessTimerOrBlockTask+0x50>
 8009be0:	2301      	movs	r3, #1
 8009be2:	e000      	b.n	8009be6 <prvProcessTimerOrBlockTask+0x52>
 8009be4:	2300      	movs	r3, #0
 8009be6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009be8:	4b0f      	ldr	r3, [pc, #60]	; (8009c28 <prvProcessTimerOrBlockTask+0x94>)
 8009bea:	6818      	ldr	r0, [r3, #0]
 8009bec:	687a      	ldr	r2, [r7, #4]
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	1ad3      	subs	r3, r2, r3
 8009bf2:	683a      	ldr	r2, [r7, #0]
 8009bf4:	4619      	mov	r1, r3
 8009bf6:	f7fe ffa7 	bl	8008b48 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009bfa:	f7ff fa23 	bl	8009044 <xTaskResumeAll>
 8009bfe:	4603      	mov	r3, r0
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d10a      	bne.n	8009c1a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009c04:	4b09      	ldr	r3, [pc, #36]	; (8009c2c <prvProcessTimerOrBlockTask+0x98>)
 8009c06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c0a:	601a      	str	r2, [r3, #0]
 8009c0c:	f3bf 8f4f 	dsb	sy
 8009c10:	f3bf 8f6f 	isb	sy
}
 8009c14:	e001      	b.n	8009c1a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009c16:	f7ff fa15 	bl	8009044 <xTaskResumeAll>
}
 8009c1a:	bf00      	nop
 8009c1c:	3710      	adds	r7, #16
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	bd80      	pop	{r7, pc}
 8009c22:	bf00      	nop
 8009c24:	20000e58 	.word	0x20000e58
 8009c28:	20000e5c 	.word	0x20000e5c
 8009c2c:	e000ed04 	.word	0xe000ed04

08009c30 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009c30:	b480      	push	{r7}
 8009c32:	b085      	sub	sp, #20
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009c38:	4b0e      	ldr	r3, [pc, #56]	; (8009c74 <prvGetNextExpireTime+0x44>)
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d101      	bne.n	8009c46 <prvGetNextExpireTime+0x16>
 8009c42:	2201      	movs	r2, #1
 8009c44:	e000      	b.n	8009c48 <prvGetNextExpireTime+0x18>
 8009c46:	2200      	movs	r2, #0
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d105      	bne.n	8009c60 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009c54:	4b07      	ldr	r3, [pc, #28]	; (8009c74 <prvGetNextExpireTime+0x44>)
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	68db      	ldr	r3, [r3, #12]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	60fb      	str	r3, [r7, #12]
 8009c5e:	e001      	b.n	8009c64 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009c60:	2300      	movs	r3, #0
 8009c62:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009c64:	68fb      	ldr	r3, [r7, #12]
}
 8009c66:	4618      	mov	r0, r3
 8009c68:	3714      	adds	r7, #20
 8009c6a:	46bd      	mov	sp, r7
 8009c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c70:	4770      	bx	lr
 8009c72:	bf00      	nop
 8009c74:	20000e54 	.word	0x20000e54

08009c78 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009c78:	b580      	push	{r7, lr}
 8009c7a:	b084      	sub	sp, #16
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009c80:	f7ff fa7e 	bl	8009180 <xTaskGetTickCount>
 8009c84:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009c86:	4b0b      	ldr	r3, [pc, #44]	; (8009cb4 <prvSampleTimeNow+0x3c>)
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	68fa      	ldr	r2, [r7, #12]
 8009c8c:	429a      	cmp	r2, r3
 8009c8e:	d205      	bcs.n	8009c9c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009c90:	f000 f936 	bl	8009f00 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	2201      	movs	r2, #1
 8009c98:	601a      	str	r2, [r3, #0]
 8009c9a:	e002      	b.n	8009ca2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	2200      	movs	r2, #0
 8009ca0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009ca2:	4a04      	ldr	r2, [pc, #16]	; (8009cb4 <prvSampleTimeNow+0x3c>)
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009ca8:	68fb      	ldr	r3, [r7, #12]
}
 8009caa:	4618      	mov	r0, r3
 8009cac:	3710      	adds	r7, #16
 8009cae:	46bd      	mov	sp, r7
 8009cb0:	bd80      	pop	{r7, pc}
 8009cb2:	bf00      	nop
 8009cb4:	20000e64 	.word	0x20000e64

08009cb8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	b086      	sub	sp, #24
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	60f8      	str	r0, [r7, #12]
 8009cc0:	60b9      	str	r1, [r7, #8]
 8009cc2:	607a      	str	r2, [r7, #4]
 8009cc4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	68ba      	ldr	r2, [r7, #8]
 8009cce:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	68fa      	ldr	r2, [r7, #12]
 8009cd4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009cd6:	68ba      	ldr	r2, [r7, #8]
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	429a      	cmp	r2, r3
 8009cdc:	d812      	bhi.n	8009d04 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009cde:	687a      	ldr	r2, [r7, #4]
 8009ce0:	683b      	ldr	r3, [r7, #0]
 8009ce2:	1ad2      	subs	r2, r2, r3
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	699b      	ldr	r3, [r3, #24]
 8009ce8:	429a      	cmp	r2, r3
 8009cea:	d302      	bcc.n	8009cf2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009cec:	2301      	movs	r3, #1
 8009cee:	617b      	str	r3, [r7, #20]
 8009cf0:	e01b      	b.n	8009d2a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009cf2:	4b10      	ldr	r3, [pc, #64]	; (8009d34 <prvInsertTimerInActiveList+0x7c>)
 8009cf4:	681a      	ldr	r2, [r3, #0]
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	3304      	adds	r3, #4
 8009cfa:	4619      	mov	r1, r3
 8009cfc:	4610      	mov	r0, r2
 8009cfe:	f7fe fa08 	bl	8008112 <vListInsert>
 8009d02:	e012      	b.n	8009d2a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009d04:	687a      	ldr	r2, [r7, #4]
 8009d06:	683b      	ldr	r3, [r7, #0]
 8009d08:	429a      	cmp	r2, r3
 8009d0a:	d206      	bcs.n	8009d1a <prvInsertTimerInActiveList+0x62>
 8009d0c:	68ba      	ldr	r2, [r7, #8]
 8009d0e:	683b      	ldr	r3, [r7, #0]
 8009d10:	429a      	cmp	r2, r3
 8009d12:	d302      	bcc.n	8009d1a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009d14:	2301      	movs	r3, #1
 8009d16:	617b      	str	r3, [r7, #20]
 8009d18:	e007      	b.n	8009d2a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009d1a:	4b07      	ldr	r3, [pc, #28]	; (8009d38 <prvInsertTimerInActiveList+0x80>)
 8009d1c:	681a      	ldr	r2, [r3, #0]
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	3304      	adds	r3, #4
 8009d22:	4619      	mov	r1, r3
 8009d24:	4610      	mov	r0, r2
 8009d26:	f7fe f9f4 	bl	8008112 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009d2a:	697b      	ldr	r3, [r7, #20]
}
 8009d2c:	4618      	mov	r0, r3
 8009d2e:	3718      	adds	r7, #24
 8009d30:	46bd      	mov	sp, r7
 8009d32:	bd80      	pop	{r7, pc}
 8009d34:	20000e58 	.word	0x20000e58
 8009d38:	20000e54 	.word	0x20000e54

08009d3c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009d3c:	b580      	push	{r7, lr}
 8009d3e:	b08e      	sub	sp, #56	; 0x38
 8009d40:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009d42:	e0ca      	b.n	8009eda <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	da18      	bge.n	8009d7c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009d4a:	1d3b      	adds	r3, r7, #4
 8009d4c:	3304      	adds	r3, #4
 8009d4e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009d50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d10a      	bne.n	8009d6c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8009d56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d5a:	f383 8811 	msr	BASEPRI, r3
 8009d5e:	f3bf 8f6f 	isb	sy
 8009d62:	f3bf 8f4f 	dsb	sy
 8009d66:	61fb      	str	r3, [r7, #28]
}
 8009d68:	bf00      	nop
 8009d6a:	e7fe      	b.n	8009d6a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009d72:	6850      	ldr	r0, [r2, #4]
 8009d74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009d76:	6892      	ldr	r2, [r2, #8]
 8009d78:	4611      	mov	r1, r2
 8009d7a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	f2c0 80ab 	blt.w	8009eda <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d8a:	695b      	ldr	r3, [r3, #20]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d004      	beq.n	8009d9a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d92:	3304      	adds	r3, #4
 8009d94:	4618      	mov	r0, r3
 8009d96:	f7fe f9f5 	bl	8008184 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009d9a:	463b      	mov	r3, r7
 8009d9c:	4618      	mov	r0, r3
 8009d9e:	f7ff ff6b 	bl	8009c78 <prvSampleTimeNow>
 8009da2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	2b09      	cmp	r3, #9
 8009da8:	f200 8096 	bhi.w	8009ed8 <prvProcessReceivedCommands+0x19c>
 8009dac:	a201      	add	r2, pc, #4	; (adr r2, 8009db4 <prvProcessReceivedCommands+0x78>)
 8009dae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009db2:	bf00      	nop
 8009db4:	08009ddd 	.word	0x08009ddd
 8009db8:	08009ddd 	.word	0x08009ddd
 8009dbc:	08009ddd 	.word	0x08009ddd
 8009dc0:	08009e51 	.word	0x08009e51
 8009dc4:	08009e65 	.word	0x08009e65
 8009dc8:	08009eaf 	.word	0x08009eaf
 8009dcc:	08009ddd 	.word	0x08009ddd
 8009dd0:	08009ddd 	.word	0x08009ddd
 8009dd4:	08009e51 	.word	0x08009e51
 8009dd8:	08009e65 	.word	0x08009e65
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dde:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009de2:	f043 0301 	orr.w	r3, r3, #1
 8009de6:	b2da      	uxtb	r2, r3
 8009de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009dee:	68ba      	ldr	r2, [r7, #8]
 8009df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009df2:	699b      	ldr	r3, [r3, #24]
 8009df4:	18d1      	adds	r1, r2, r3
 8009df6:	68bb      	ldr	r3, [r7, #8]
 8009df8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009dfa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009dfc:	f7ff ff5c 	bl	8009cb8 <prvInsertTimerInActiveList>
 8009e00:	4603      	mov	r3, r0
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d069      	beq.n	8009eda <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e08:	6a1b      	ldr	r3, [r3, #32]
 8009e0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009e0c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e10:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009e14:	f003 0304 	and.w	r3, r3, #4
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d05e      	beq.n	8009eda <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009e1c:	68ba      	ldr	r2, [r7, #8]
 8009e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e20:	699b      	ldr	r3, [r3, #24]
 8009e22:	441a      	add	r2, r3
 8009e24:	2300      	movs	r3, #0
 8009e26:	9300      	str	r3, [sp, #0]
 8009e28:	2300      	movs	r3, #0
 8009e2a:	2100      	movs	r1, #0
 8009e2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009e2e:	f7ff fe05 	bl	8009a3c <xTimerGenericCommand>
 8009e32:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009e34:	6a3b      	ldr	r3, [r7, #32]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d14f      	bne.n	8009eda <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8009e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e3e:	f383 8811 	msr	BASEPRI, r3
 8009e42:	f3bf 8f6f 	isb	sy
 8009e46:	f3bf 8f4f 	dsb	sy
 8009e4a:	61bb      	str	r3, [r7, #24]
}
 8009e4c:	bf00      	nop
 8009e4e:	e7fe      	b.n	8009e4e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e52:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009e56:	f023 0301 	bic.w	r3, r3, #1
 8009e5a:	b2da      	uxtb	r2, r3
 8009e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e5e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009e62:	e03a      	b.n	8009eda <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e66:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009e6a:	f043 0301 	orr.w	r3, r3, #1
 8009e6e:	b2da      	uxtb	r2, r3
 8009e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e72:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009e76:	68ba      	ldr	r2, [r7, #8]
 8009e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e7a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e7e:	699b      	ldr	r3, [r3, #24]
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d10a      	bne.n	8009e9a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8009e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e88:	f383 8811 	msr	BASEPRI, r3
 8009e8c:	f3bf 8f6f 	isb	sy
 8009e90:	f3bf 8f4f 	dsb	sy
 8009e94:	617b      	str	r3, [r7, #20]
}
 8009e96:	bf00      	nop
 8009e98:	e7fe      	b.n	8009e98 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e9c:	699a      	ldr	r2, [r3, #24]
 8009e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ea0:	18d1      	adds	r1, r2, r3
 8009ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ea4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ea6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009ea8:	f7ff ff06 	bl	8009cb8 <prvInsertTimerInActiveList>
					break;
 8009eac:	e015      	b.n	8009eda <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eb0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009eb4:	f003 0302 	and.w	r3, r3, #2
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d103      	bne.n	8009ec4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009ebc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009ebe:	f000 fbdf 	bl	800a680 <vPortFree>
 8009ec2:	e00a      	b.n	8009eda <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ec6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009eca:	f023 0301 	bic.w	r3, r3, #1
 8009ece:	b2da      	uxtb	r2, r3
 8009ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ed2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009ed6:	e000      	b.n	8009eda <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8009ed8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009eda:	4b08      	ldr	r3, [pc, #32]	; (8009efc <prvProcessReceivedCommands+0x1c0>)
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	1d39      	adds	r1, r7, #4
 8009ee0:	2200      	movs	r2, #0
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	f7fe fc16 	bl	8008714 <xQueueReceive>
 8009ee8:	4603      	mov	r3, r0
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	f47f af2a 	bne.w	8009d44 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009ef0:	bf00      	nop
 8009ef2:	bf00      	nop
 8009ef4:	3730      	adds	r7, #48	; 0x30
 8009ef6:	46bd      	mov	sp, r7
 8009ef8:	bd80      	pop	{r7, pc}
 8009efa:	bf00      	nop
 8009efc:	20000e5c 	.word	0x20000e5c

08009f00 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009f00:	b580      	push	{r7, lr}
 8009f02:	b088      	sub	sp, #32
 8009f04:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009f06:	e048      	b.n	8009f9a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009f08:	4b2d      	ldr	r3, [pc, #180]	; (8009fc0 <prvSwitchTimerLists+0xc0>)
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	68db      	ldr	r3, [r3, #12]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f12:	4b2b      	ldr	r3, [pc, #172]	; (8009fc0 <prvSwitchTimerLists+0xc0>)
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	68db      	ldr	r3, [r3, #12]
 8009f18:	68db      	ldr	r3, [r3, #12]
 8009f1a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	3304      	adds	r3, #4
 8009f20:	4618      	mov	r0, r3
 8009f22:	f7fe f92f 	bl	8008184 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	6a1b      	ldr	r3, [r3, #32]
 8009f2a:	68f8      	ldr	r0, [r7, #12]
 8009f2c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009f34:	f003 0304 	and.w	r3, r3, #4
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d02e      	beq.n	8009f9a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	699b      	ldr	r3, [r3, #24]
 8009f40:	693a      	ldr	r2, [r7, #16]
 8009f42:	4413      	add	r3, r2
 8009f44:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009f46:	68ba      	ldr	r2, [r7, #8]
 8009f48:	693b      	ldr	r3, [r7, #16]
 8009f4a:	429a      	cmp	r2, r3
 8009f4c:	d90e      	bls.n	8009f6c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	68ba      	ldr	r2, [r7, #8]
 8009f52:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	68fa      	ldr	r2, [r7, #12]
 8009f58:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009f5a:	4b19      	ldr	r3, [pc, #100]	; (8009fc0 <prvSwitchTimerLists+0xc0>)
 8009f5c:	681a      	ldr	r2, [r3, #0]
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	3304      	adds	r3, #4
 8009f62:	4619      	mov	r1, r3
 8009f64:	4610      	mov	r0, r2
 8009f66:	f7fe f8d4 	bl	8008112 <vListInsert>
 8009f6a:	e016      	b.n	8009f9a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009f6c:	2300      	movs	r3, #0
 8009f6e:	9300      	str	r3, [sp, #0]
 8009f70:	2300      	movs	r3, #0
 8009f72:	693a      	ldr	r2, [r7, #16]
 8009f74:	2100      	movs	r1, #0
 8009f76:	68f8      	ldr	r0, [r7, #12]
 8009f78:	f7ff fd60 	bl	8009a3c <xTimerGenericCommand>
 8009f7c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d10a      	bne.n	8009f9a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f88:	f383 8811 	msr	BASEPRI, r3
 8009f8c:	f3bf 8f6f 	isb	sy
 8009f90:	f3bf 8f4f 	dsb	sy
 8009f94:	603b      	str	r3, [r7, #0]
}
 8009f96:	bf00      	nop
 8009f98:	e7fe      	b.n	8009f98 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009f9a:	4b09      	ldr	r3, [pc, #36]	; (8009fc0 <prvSwitchTimerLists+0xc0>)
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d1b1      	bne.n	8009f08 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009fa4:	4b06      	ldr	r3, [pc, #24]	; (8009fc0 <prvSwitchTimerLists+0xc0>)
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009faa:	4b06      	ldr	r3, [pc, #24]	; (8009fc4 <prvSwitchTimerLists+0xc4>)
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	4a04      	ldr	r2, [pc, #16]	; (8009fc0 <prvSwitchTimerLists+0xc0>)
 8009fb0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009fb2:	4a04      	ldr	r2, [pc, #16]	; (8009fc4 <prvSwitchTimerLists+0xc4>)
 8009fb4:	697b      	ldr	r3, [r7, #20]
 8009fb6:	6013      	str	r3, [r2, #0]
}
 8009fb8:	bf00      	nop
 8009fba:	3718      	adds	r7, #24
 8009fbc:	46bd      	mov	sp, r7
 8009fbe:	bd80      	pop	{r7, pc}
 8009fc0:	20000e54 	.word	0x20000e54
 8009fc4:	20000e58 	.word	0x20000e58

08009fc8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009fc8:	b580      	push	{r7, lr}
 8009fca:	b082      	sub	sp, #8
 8009fcc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009fce:	f000 f969 	bl	800a2a4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009fd2:	4b15      	ldr	r3, [pc, #84]	; (800a028 <prvCheckForValidListAndQueue+0x60>)
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d120      	bne.n	800a01c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009fda:	4814      	ldr	r0, [pc, #80]	; (800a02c <prvCheckForValidListAndQueue+0x64>)
 8009fdc:	f7fe f848 	bl	8008070 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009fe0:	4813      	ldr	r0, [pc, #76]	; (800a030 <prvCheckForValidListAndQueue+0x68>)
 8009fe2:	f7fe f845 	bl	8008070 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009fe6:	4b13      	ldr	r3, [pc, #76]	; (800a034 <prvCheckForValidListAndQueue+0x6c>)
 8009fe8:	4a10      	ldr	r2, [pc, #64]	; (800a02c <prvCheckForValidListAndQueue+0x64>)
 8009fea:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009fec:	4b12      	ldr	r3, [pc, #72]	; (800a038 <prvCheckForValidListAndQueue+0x70>)
 8009fee:	4a10      	ldr	r2, [pc, #64]	; (800a030 <prvCheckForValidListAndQueue+0x68>)
 8009ff0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009ff2:	2300      	movs	r3, #0
 8009ff4:	9300      	str	r3, [sp, #0]
 8009ff6:	4b11      	ldr	r3, [pc, #68]	; (800a03c <prvCheckForValidListAndQueue+0x74>)
 8009ff8:	4a11      	ldr	r2, [pc, #68]	; (800a040 <prvCheckForValidListAndQueue+0x78>)
 8009ffa:	2110      	movs	r1, #16
 8009ffc:	200a      	movs	r0, #10
 8009ffe:	f7fe f953 	bl	80082a8 <xQueueGenericCreateStatic>
 800a002:	4603      	mov	r3, r0
 800a004:	4a08      	ldr	r2, [pc, #32]	; (800a028 <prvCheckForValidListAndQueue+0x60>)
 800a006:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a008:	4b07      	ldr	r3, [pc, #28]	; (800a028 <prvCheckForValidListAndQueue+0x60>)
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d005      	beq.n	800a01c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a010:	4b05      	ldr	r3, [pc, #20]	; (800a028 <prvCheckForValidListAndQueue+0x60>)
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	490b      	ldr	r1, [pc, #44]	; (800a044 <prvCheckForValidListAndQueue+0x7c>)
 800a016:	4618      	mov	r0, r3
 800a018:	f7fe fd6c 	bl	8008af4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a01c:	f000 f972 	bl	800a304 <vPortExitCritical>
}
 800a020:	bf00      	nop
 800a022:	46bd      	mov	sp, r7
 800a024:	bd80      	pop	{r7, pc}
 800a026:	bf00      	nop
 800a028:	20000e5c 	.word	0x20000e5c
 800a02c:	20000e2c 	.word	0x20000e2c
 800a030:	20000e40 	.word	0x20000e40
 800a034:	20000e54 	.word	0x20000e54
 800a038:	20000e58 	.word	0x20000e58
 800a03c:	20000f08 	.word	0x20000f08
 800a040:	20000e68 	.word	0x20000e68
 800a044:	0800b488 	.word	0x0800b488

0800a048 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a048:	b480      	push	{r7}
 800a04a:	b085      	sub	sp, #20
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	60f8      	str	r0, [r7, #12]
 800a050:	60b9      	str	r1, [r7, #8]
 800a052:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	3b04      	subs	r3, #4
 800a058:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a060:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	3b04      	subs	r3, #4
 800a066:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a068:	68bb      	ldr	r3, [r7, #8]
 800a06a:	f023 0201 	bic.w	r2, r3, #1
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	3b04      	subs	r3, #4
 800a076:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a078:	4a0c      	ldr	r2, [pc, #48]	; (800a0ac <pxPortInitialiseStack+0x64>)
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	3b14      	subs	r3, #20
 800a082:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a084:	687a      	ldr	r2, [r7, #4]
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	3b04      	subs	r3, #4
 800a08e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	f06f 0202 	mvn.w	r2, #2
 800a096:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	3b20      	subs	r3, #32
 800a09c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a09e:	68fb      	ldr	r3, [r7, #12]
}
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	3714      	adds	r7, #20
 800a0a4:	46bd      	mov	sp, r7
 800a0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0aa:	4770      	bx	lr
 800a0ac:	0800a0b1 	.word	0x0800a0b1

0800a0b0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a0b0:	b480      	push	{r7}
 800a0b2:	b085      	sub	sp, #20
 800a0b4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a0ba:	4b12      	ldr	r3, [pc, #72]	; (800a104 <prvTaskExitError+0x54>)
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a0c2:	d00a      	beq.n	800a0da <prvTaskExitError+0x2a>
	__asm volatile
 800a0c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0c8:	f383 8811 	msr	BASEPRI, r3
 800a0cc:	f3bf 8f6f 	isb	sy
 800a0d0:	f3bf 8f4f 	dsb	sy
 800a0d4:	60fb      	str	r3, [r7, #12]
}
 800a0d6:	bf00      	nop
 800a0d8:	e7fe      	b.n	800a0d8 <prvTaskExitError+0x28>
	__asm volatile
 800a0da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0de:	f383 8811 	msr	BASEPRI, r3
 800a0e2:	f3bf 8f6f 	isb	sy
 800a0e6:	f3bf 8f4f 	dsb	sy
 800a0ea:	60bb      	str	r3, [r7, #8]
}
 800a0ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a0ee:	bf00      	nop
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d0fc      	beq.n	800a0f0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a0f6:	bf00      	nop
 800a0f8:	bf00      	nop
 800a0fa:	3714      	adds	r7, #20
 800a0fc:	46bd      	mov	sp, r7
 800a0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a102:	4770      	bx	lr
 800a104:	200000cc 	.word	0x200000cc
	...

0800a110 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a110:	4b07      	ldr	r3, [pc, #28]	; (800a130 <pxCurrentTCBConst2>)
 800a112:	6819      	ldr	r1, [r3, #0]
 800a114:	6808      	ldr	r0, [r1, #0]
 800a116:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a11a:	f380 8809 	msr	PSP, r0
 800a11e:	f3bf 8f6f 	isb	sy
 800a122:	f04f 0000 	mov.w	r0, #0
 800a126:	f380 8811 	msr	BASEPRI, r0
 800a12a:	4770      	bx	lr
 800a12c:	f3af 8000 	nop.w

0800a130 <pxCurrentTCBConst2>:
 800a130:	2000092c 	.word	0x2000092c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a134:	bf00      	nop
 800a136:	bf00      	nop

0800a138 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a138:	4808      	ldr	r0, [pc, #32]	; (800a15c <prvPortStartFirstTask+0x24>)
 800a13a:	6800      	ldr	r0, [r0, #0]
 800a13c:	6800      	ldr	r0, [r0, #0]
 800a13e:	f380 8808 	msr	MSP, r0
 800a142:	f04f 0000 	mov.w	r0, #0
 800a146:	f380 8814 	msr	CONTROL, r0
 800a14a:	b662      	cpsie	i
 800a14c:	b661      	cpsie	f
 800a14e:	f3bf 8f4f 	dsb	sy
 800a152:	f3bf 8f6f 	isb	sy
 800a156:	df00      	svc	0
 800a158:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a15a:	bf00      	nop
 800a15c:	e000ed08 	.word	0xe000ed08

0800a160 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a160:	b580      	push	{r7, lr}
 800a162:	b086      	sub	sp, #24
 800a164:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a166:	4b46      	ldr	r3, [pc, #280]	; (800a280 <xPortStartScheduler+0x120>)
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	4a46      	ldr	r2, [pc, #280]	; (800a284 <xPortStartScheduler+0x124>)
 800a16c:	4293      	cmp	r3, r2
 800a16e:	d10a      	bne.n	800a186 <xPortStartScheduler+0x26>
	__asm volatile
 800a170:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a174:	f383 8811 	msr	BASEPRI, r3
 800a178:	f3bf 8f6f 	isb	sy
 800a17c:	f3bf 8f4f 	dsb	sy
 800a180:	613b      	str	r3, [r7, #16]
}
 800a182:	bf00      	nop
 800a184:	e7fe      	b.n	800a184 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a186:	4b3e      	ldr	r3, [pc, #248]	; (800a280 <xPortStartScheduler+0x120>)
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	4a3f      	ldr	r2, [pc, #252]	; (800a288 <xPortStartScheduler+0x128>)
 800a18c:	4293      	cmp	r3, r2
 800a18e:	d10a      	bne.n	800a1a6 <xPortStartScheduler+0x46>
	__asm volatile
 800a190:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a194:	f383 8811 	msr	BASEPRI, r3
 800a198:	f3bf 8f6f 	isb	sy
 800a19c:	f3bf 8f4f 	dsb	sy
 800a1a0:	60fb      	str	r3, [r7, #12]
}
 800a1a2:	bf00      	nop
 800a1a4:	e7fe      	b.n	800a1a4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a1a6:	4b39      	ldr	r3, [pc, #228]	; (800a28c <xPortStartScheduler+0x12c>)
 800a1a8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a1aa:	697b      	ldr	r3, [r7, #20]
 800a1ac:	781b      	ldrb	r3, [r3, #0]
 800a1ae:	b2db      	uxtb	r3, r3
 800a1b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a1b2:	697b      	ldr	r3, [r7, #20]
 800a1b4:	22ff      	movs	r2, #255	; 0xff
 800a1b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a1b8:	697b      	ldr	r3, [r7, #20]
 800a1ba:	781b      	ldrb	r3, [r3, #0]
 800a1bc:	b2db      	uxtb	r3, r3
 800a1be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a1c0:	78fb      	ldrb	r3, [r7, #3]
 800a1c2:	b2db      	uxtb	r3, r3
 800a1c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a1c8:	b2da      	uxtb	r2, r3
 800a1ca:	4b31      	ldr	r3, [pc, #196]	; (800a290 <xPortStartScheduler+0x130>)
 800a1cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a1ce:	4b31      	ldr	r3, [pc, #196]	; (800a294 <xPortStartScheduler+0x134>)
 800a1d0:	2207      	movs	r2, #7
 800a1d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a1d4:	e009      	b.n	800a1ea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a1d6:	4b2f      	ldr	r3, [pc, #188]	; (800a294 <xPortStartScheduler+0x134>)
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	3b01      	subs	r3, #1
 800a1dc:	4a2d      	ldr	r2, [pc, #180]	; (800a294 <xPortStartScheduler+0x134>)
 800a1de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a1e0:	78fb      	ldrb	r3, [r7, #3]
 800a1e2:	b2db      	uxtb	r3, r3
 800a1e4:	005b      	lsls	r3, r3, #1
 800a1e6:	b2db      	uxtb	r3, r3
 800a1e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a1ea:	78fb      	ldrb	r3, [r7, #3]
 800a1ec:	b2db      	uxtb	r3, r3
 800a1ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a1f2:	2b80      	cmp	r3, #128	; 0x80
 800a1f4:	d0ef      	beq.n	800a1d6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a1f6:	4b27      	ldr	r3, [pc, #156]	; (800a294 <xPortStartScheduler+0x134>)
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	f1c3 0307 	rsb	r3, r3, #7
 800a1fe:	2b04      	cmp	r3, #4
 800a200:	d00a      	beq.n	800a218 <xPortStartScheduler+0xb8>
	__asm volatile
 800a202:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a206:	f383 8811 	msr	BASEPRI, r3
 800a20a:	f3bf 8f6f 	isb	sy
 800a20e:	f3bf 8f4f 	dsb	sy
 800a212:	60bb      	str	r3, [r7, #8]
}
 800a214:	bf00      	nop
 800a216:	e7fe      	b.n	800a216 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a218:	4b1e      	ldr	r3, [pc, #120]	; (800a294 <xPortStartScheduler+0x134>)
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	021b      	lsls	r3, r3, #8
 800a21e:	4a1d      	ldr	r2, [pc, #116]	; (800a294 <xPortStartScheduler+0x134>)
 800a220:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a222:	4b1c      	ldr	r3, [pc, #112]	; (800a294 <xPortStartScheduler+0x134>)
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a22a:	4a1a      	ldr	r2, [pc, #104]	; (800a294 <xPortStartScheduler+0x134>)
 800a22c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	b2da      	uxtb	r2, r3
 800a232:	697b      	ldr	r3, [r7, #20]
 800a234:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a236:	4b18      	ldr	r3, [pc, #96]	; (800a298 <xPortStartScheduler+0x138>)
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	4a17      	ldr	r2, [pc, #92]	; (800a298 <xPortStartScheduler+0x138>)
 800a23c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a240:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a242:	4b15      	ldr	r3, [pc, #84]	; (800a298 <xPortStartScheduler+0x138>)
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	4a14      	ldr	r2, [pc, #80]	; (800a298 <xPortStartScheduler+0x138>)
 800a248:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a24c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a24e:	f000 f8dd 	bl	800a40c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a252:	4b12      	ldr	r3, [pc, #72]	; (800a29c <xPortStartScheduler+0x13c>)
 800a254:	2200      	movs	r2, #0
 800a256:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a258:	f000 f8fc 	bl	800a454 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a25c:	4b10      	ldr	r3, [pc, #64]	; (800a2a0 <xPortStartScheduler+0x140>)
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	4a0f      	ldr	r2, [pc, #60]	; (800a2a0 <xPortStartScheduler+0x140>)
 800a262:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a266:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a268:	f7ff ff66 	bl	800a138 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a26c:	f7ff f852 	bl	8009314 <vTaskSwitchContext>
	prvTaskExitError();
 800a270:	f7ff ff1e 	bl	800a0b0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a274:	2300      	movs	r3, #0
}
 800a276:	4618      	mov	r0, r3
 800a278:	3718      	adds	r7, #24
 800a27a:	46bd      	mov	sp, r7
 800a27c:	bd80      	pop	{r7, pc}
 800a27e:	bf00      	nop
 800a280:	e000ed00 	.word	0xe000ed00
 800a284:	410fc271 	.word	0x410fc271
 800a288:	410fc270 	.word	0x410fc270
 800a28c:	e000e400 	.word	0xe000e400
 800a290:	20000f58 	.word	0x20000f58
 800a294:	20000f5c 	.word	0x20000f5c
 800a298:	e000ed20 	.word	0xe000ed20
 800a29c:	200000cc 	.word	0x200000cc
 800a2a0:	e000ef34 	.word	0xe000ef34

0800a2a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a2a4:	b480      	push	{r7}
 800a2a6:	b083      	sub	sp, #12
 800a2a8:	af00      	add	r7, sp, #0
	__asm volatile
 800a2aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2ae:	f383 8811 	msr	BASEPRI, r3
 800a2b2:	f3bf 8f6f 	isb	sy
 800a2b6:	f3bf 8f4f 	dsb	sy
 800a2ba:	607b      	str	r3, [r7, #4]
}
 800a2bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a2be:	4b0f      	ldr	r3, [pc, #60]	; (800a2fc <vPortEnterCritical+0x58>)
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	3301      	adds	r3, #1
 800a2c4:	4a0d      	ldr	r2, [pc, #52]	; (800a2fc <vPortEnterCritical+0x58>)
 800a2c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a2c8:	4b0c      	ldr	r3, [pc, #48]	; (800a2fc <vPortEnterCritical+0x58>)
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	2b01      	cmp	r3, #1
 800a2ce:	d10f      	bne.n	800a2f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a2d0:	4b0b      	ldr	r3, [pc, #44]	; (800a300 <vPortEnterCritical+0x5c>)
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	b2db      	uxtb	r3, r3
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d00a      	beq.n	800a2f0 <vPortEnterCritical+0x4c>
	__asm volatile
 800a2da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2de:	f383 8811 	msr	BASEPRI, r3
 800a2e2:	f3bf 8f6f 	isb	sy
 800a2e6:	f3bf 8f4f 	dsb	sy
 800a2ea:	603b      	str	r3, [r7, #0]
}
 800a2ec:	bf00      	nop
 800a2ee:	e7fe      	b.n	800a2ee <vPortEnterCritical+0x4a>
	}
}
 800a2f0:	bf00      	nop
 800a2f2:	370c      	adds	r7, #12
 800a2f4:	46bd      	mov	sp, r7
 800a2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2fa:	4770      	bx	lr
 800a2fc:	200000cc 	.word	0x200000cc
 800a300:	e000ed04 	.word	0xe000ed04

0800a304 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a304:	b480      	push	{r7}
 800a306:	b083      	sub	sp, #12
 800a308:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a30a:	4b12      	ldr	r3, [pc, #72]	; (800a354 <vPortExitCritical+0x50>)
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d10a      	bne.n	800a328 <vPortExitCritical+0x24>
	__asm volatile
 800a312:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a316:	f383 8811 	msr	BASEPRI, r3
 800a31a:	f3bf 8f6f 	isb	sy
 800a31e:	f3bf 8f4f 	dsb	sy
 800a322:	607b      	str	r3, [r7, #4]
}
 800a324:	bf00      	nop
 800a326:	e7fe      	b.n	800a326 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a328:	4b0a      	ldr	r3, [pc, #40]	; (800a354 <vPortExitCritical+0x50>)
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	3b01      	subs	r3, #1
 800a32e:	4a09      	ldr	r2, [pc, #36]	; (800a354 <vPortExitCritical+0x50>)
 800a330:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a332:	4b08      	ldr	r3, [pc, #32]	; (800a354 <vPortExitCritical+0x50>)
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	2b00      	cmp	r3, #0
 800a338:	d105      	bne.n	800a346 <vPortExitCritical+0x42>
 800a33a:	2300      	movs	r3, #0
 800a33c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a33e:	683b      	ldr	r3, [r7, #0]
 800a340:	f383 8811 	msr	BASEPRI, r3
}
 800a344:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a346:	bf00      	nop
 800a348:	370c      	adds	r7, #12
 800a34a:	46bd      	mov	sp, r7
 800a34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a350:	4770      	bx	lr
 800a352:	bf00      	nop
 800a354:	200000cc 	.word	0x200000cc
	...

0800a360 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a360:	f3ef 8009 	mrs	r0, PSP
 800a364:	f3bf 8f6f 	isb	sy
 800a368:	4b15      	ldr	r3, [pc, #84]	; (800a3c0 <pxCurrentTCBConst>)
 800a36a:	681a      	ldr	r2, [r3, #0]
 800a36c:	f01e 0f10 	tst.w	lr, #16
 800a370:	bf08      	it	eq
 800a372:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a376:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a37a:	6010      	str	r0, [r2, #0]
 800a37c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a380:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a384:	f380 8811 	msr	BASEPRI, r0
 800a388:	f3bf 8f4f 	dsb	sy
 800a38c:	f3bf 8f6f 	isb	sy
 800a390:	f7fe ffc0 	bl	8009314 <vTaskSwitchContext>
 800a394:	f04f 0000 	mov.w	r0, #0
 800a398:	f380 8811 	msr	BASEPRI, r0
 800a39c:	bc09      	pop	{r0, r3}
 800a39e:	6819      	ldr	r1, [r3, #0]
 800a3a0:	6808      	ldr	r0, [r1, #0]
 800a3a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3a6:	f01e 0f10 	tst.w	lr, #16
 800a3aa:	bf08      	it	eq
 800a3ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a3b0:	f380 8809 	msr	PSP, r0
 800a3b4:	f3bf 8f6f 	isb	sy
 800a3b8:	4770      	bx	lr
 800a3ba:	bf00      	nop
 800a3bc:	f3af 8000 	nop.w

0800a3c0 <pxCurrentTCBConst>:
 800a3c0:	2000092c 	.word	0x2000092c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a3c4:	bf00      	nop
 800a3c6:	bf00      	nop

0800a3c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a3c8:	b580      	push	{r7, lr}
 800a3ca:	b082      	sub	sp, #8
 800a3cc:	af00      	add	r7, sp, #0
	__asm volatile
 800a3ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3d2:	f383 8811 	msr	BASEPRI, r3
 800a3d6:	f3bf 8f6f 	isb	sy
 800a3da:	f3bf 8f4f 	dsb	sy
 800a3de:	607b      	str	r3, [r7, #4]
}
 800a3e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a3e2:	f7fe fedd 	bl	80091a0 <xTaskIncrementTick>
 800a3e6:	4603      	mov	r3, r0
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d003      	beq.n	800a3f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a3ec:	4b06      	ldr	r3, [pc, #24]	; (800a408 <xPortSysTickHandler+0x40>)
 800a3ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a3f2:	601a      	str	r2, [r3, #0]
 800a3f4:	2300      	movs	r3, #0
 800a3f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a3f8:	683b      	ldr	r3, [r7, #0]
 800a3fa:	f383 8811 	msr	BASEPRI, r3
}
 800a3fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a400:	bf00      	nop
 800a402:	3708      	adds	r7, #8
 800a404:	46bd      	mov	sp, r7
 800a406:	bd80      	pop	{r7, pc}
 800a408:	e000ed04 	.word	0xe000ed04

0800a40c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a40c:	b480      	push	{r7}
 800a40e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a410:	4b0b      	ldr	r3, [pc, #44]	; (800a440 <vPortSetupTimerInterrupt+0x34>)
 800a412:	2200      	movs	r2, #0
 800a414:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a416:	4b0b      	ldr	r3, [pc, #44]	; (800a444 <vPortSetupTimerInterrupt+0x38>)
 800a418:	2200      	movs	r2, #0
 800a41a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a41c:	4b0a      	ldr	r3, [pc, #40]	; (800a448 <vPortSetupTimerInterrupt+0x3c>)
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	4a0a      	ldr	r2, [pc, #40]	; (800a44c <vPortSetupTimerInterrupt+0x40>)
 800a422:	fba2 2303 	umull	r2, r3, r2, r3
 800a426:	099b      	lsrs	r3, r3, #6
 800a428:	4a09      	ldr	r2, [pc, #36]	; (800a450 <vPortSetupTimerInterrupt+0x44>)
 800a42a:	3b01      	subs	r3, #1
 800a42c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a42e:	4b04      	ldr	r3, [pc, #16]	; (800a440 <vPortSetupTimerInterrupt+0x34>)
 800a430:	2207      	movs	r2, #7
 800a432:	601a      	str	r2, [r3, #0]
}
 800a434:	bf00      	nop
 800a436:	46bd      	mov	sp, r7
 800a438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43c:	4770      	bx	lr
 800a43e:	bf00      	nop
 800a440:	e000e010 	.word	0xe000e010
 800a444:	e000e018 	.word	0xe000e018
 800a448:	20000000 	.word	0x20000000
 800a44c:	10624dd3 	.word	0x10624dd3
 800a450:	e000e014 	.word	0xe000e014

0800a454 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a454:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a464 <vPortEnableVFP+0x10>
 800a458:	6801      	ldr	r1, [r0, #0]
 800a45a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a45e:	6001      	str	r1, [r0, #0]
 800a460:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a462:	bf00      	nop
 800a464:	e000ed88 	.word	0xe000ed88

0800a468 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a468:	b480      	push	{r7}
 800a46a:	b085      	sub	sp, #20
 800a46c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a46e:	f3ef 8305 	mrs	r3, IPSR
 800a472:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	2b0f      	cmp	r3, #15
 800a478:	d914      	bls.n	800a4a4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a47a:	4a17      	ldr	r2, [pc, #92]	; (800a4d8 <vPortValidateInterruptPriority+0x70>)
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	4413      	add	r3, r2
 800a480:	781b      	ldrb	r3, [r3, #0]
 800a482:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a484:	4b15      	ldr	r3, [pc, #84]	; (800a4dc <vPortValidateInterruptPriority+0x74>)
 800a486:	781b      	ldrb	r3, [r3, #0]
 800a488:	7afa      	ldrb	r2, [r7, #11]
 800a48a:	429a      	cmp	r2, r3
 800a48c:	d20a      	bcs.n	800a4a4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a48e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a492:	f383 8811 	msr	BASEPRI, r3
 800a496:	f3bf 8f6f 	isb	sy
 800a49a:	f3bf 8f4f 	dsb	sy
 800a49e:	607b      	str	r3, [r7, #4]
}
 800a4a0:	bf00      	nop
 800a4a2:	e7fe      	b.n	800a4a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a4a4:	4b0e      	ldr	r3, [pc, #56]	; (800a4e0 <vPortValidateInterruptPriority+0x78>)
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a4ac:	4b0d      	ldr	r3, [pc, #52]	; (800a4e4 <vPortValidateInterruptPriority+0x7c>)
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	429a      	cmp	r2, r3
 800a4b2:	d90a      	bls.n	800a4ca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a4b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4b8:	f383 8811 	msr	BASEPRI, r3
 800a4bc:	f3bf 8f6f 	isb	sy
 800a4c0:	f3bf 8f4f 	dsb	sy
 800a4c4:	603b      	str	r3, [r7, #0]
}
 800a4c6:	bf00      	nop
 800a4c8:	e7fe      	b.n	800a4c8 <vPortValidateInterruptPriority+0x60>
	}
 800a4ca:	bf00      	nop
 800a4cc:	3714      	adds	r7, #20
 800a4ce:	46bd      	mov	sp, r7
 800a4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d4:	4770      	bx	lr
 800a4d6:	bf00      	nop
 800a4d8:	e000e3f0 	.word	0xe000e3f0
 800a4dc:	20000f58 	.word	0x20000f58
 800a4e0:	e000ed0c 	.word	0xe000ed0c
 800a4e4:	20000f5c 	.word	0x20000f5c

0800a4e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a4e8:	b580      	push	{r7, lr}
 800a4ea:	b08a      	sub	sp, #40	; 0x28
 800a4ec:	af00      	add	r7, sp, #0
 800a4ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a4f4:	f7fe fd98 	bl	8009028 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a4f8:	4b5b      	ldr	r3, [pc, #364]	; (800a668 <pvPortMalloc+0x180>)
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d101      	bne.n	800a504 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a500:	f000 f920 	bl	800a744 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a504:	4b59      	ldr	r3, [pc, #356]	; (800a66c <pvPortMalloc+0x184>)
 800a506:	681a      	ldr	r2, [r3, #0]
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	4013      	ands	r3, r2
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	f040 8093 	bne.w	800a638 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	2b00      	cmp	r3, #0
 800a516:	d01d      	beq.n	800a554 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a518:	2208      	movs	r2, #8
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	4413      	add	r3, r2
 800a51e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	f003 0307 	and.w	r3, r3, #7
 800a526:	2b00      	cmp	r3, #0
 800a528:	d014      	beq.n	800a554 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	f023 0307 	bic.w	r3, r3, #7
 800a530:	3308      	adds	r3, #8
 800a532:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	f003 0307 	and.w	r3, r3, #7
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d00a      	beq.n	800a554 <pvPortMalloc+0x6c>
	__asm volatile
 800a53e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a542:	f383 8811 	msr	BASEPRI, r3
 800a546:	f3bf 8f6f 	isb	sy
 800a54a:	f3bf 8f4f 	dsb	sy
 800a54e:	617b      	str	r3, [r7, #20]
}
 800a550:	bf00      	nop
 800a552:	e7fe      	b.n	800a552 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	2b00      	cmp	r3, #0
 800a558:	d06e      	beq.n	800a638 <pvPortMalloc+0x150>
 800a55a:	4b45      	ldr	r3, [pc, #276]	; (800a670 <pvPortMalloc+0x188>)
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	687a      	ldr	r2, [r7, #4]
 800a560:	429a      	cmp	r2, r3
 800a562:	d869      	bhi.n	800a638 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a564:	4b43      	ldr	r3, [pc, #268]	; (800a674 <pvPortMalloc+0x18c>)
 800a566:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a568:	4b42      	ldr	r3, [pc, #264]	; (800a674 <pvPortMalloc+0x18c>)
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a56e:	e004      	b.n	800a57a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a572:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a57a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a57c:	685b      	ldr	r3, [r3, #4]
 800a57e:	687a      	ldr	r2, [r7, #4]
 800a580:	429a      	cmp	r2, r3
 800a582:	d903      	bls.n	800a58c <pvPortMalloc+0xa4>
 800a584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d1f1      	bne.n	800a570 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a58c:	4b36      	ldr	r3, [pc, #216]	; (800a668 <pvPortMalloc+0x180>)
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a592:	429a      	cmp	r2, r3
 800a594:	d050      	beq.n	800a638 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a596:	6a3b      	ldr	r3, [r7, #32]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	2208      	movs	r2, #8
 800a59c:	4413      	add	r3, r2
 800a59e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a5a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5a2:	681a      	ldr	r2, [r3, #0]
 800a5a4:	6a3b      	ldr	r3, [r7, #32]
 800a5a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a5a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5aa:	685a      	ldr	r2, [r3, #4]
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	1ad2      	subs	r2, r2, r3
 800a5b0:	2308      	movs	r3, #8
 800a5b2:	005b      	lsls	r3, r3, #1
 800a5b4:	429a      	cmp	r2, r3
 800a5b6:	d91f      	bls.n	800a5f8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a5b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	4413      	add	r3, r2
 800a5be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a5c0:	69bb      	ldr	r3, [r7, #24]
 800a5c2:	f003 0307 	and.w	r3, r3, #7
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d00a      	beq.n	800a5e0 <pvPortMalloc+0xf8>
	__asm volatile
 800a5ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5ce:	f383 8811 	msr	BASEPRI, r3
 800a5d2:	f3bf 8f6f 	isb	sy
 800a5d6:	f3bf 8f4f 	dsb	sy
 800a5da:	613b      	str	r3, [r7, #16]
}
 800a5dc:	bf00      	nop
 800a5de:	e7fe      	b.n	800a5de <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a5e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5e2:	685a      	ldr	r2, [r3, #4]
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	1ad2      	subs	r2, r2, r3
 800a5e8:	69bb      	ldr	r3, [r7, #24]
 800a5ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a5ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5ee:	687a      	ldr	r2, [r7, #4]
 800a5f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a5f2:	69b8      	ldr	r0, [r7, #24]
 800a5f4:	f000 f908 	bl	800a808 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a5f8:	4b1d      	ldr	r3, [pc, #116]	; (800a670 <pvPortMalloc+0x188>)
 800a5fa:	681a      	ldr	r2, [r3, #0]
 800a5fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5fe:	685b      	ldr	r3, [r3, #4]
 800a600:	1ad3      	subs	r3, r2, r3
 800a602:	4a1b      	ldr	r2, [pc, #108]	; (800a670 <pvPortMalloc+0x188>)
 800a604:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a606:	4b1a      	ldr	r3, [pc, #104]	; (800a670 <pvPortMalloc+0x188>)
 800a608:	681a      	ldr	r2, [r3, #0]
 800a60a:	4b1b      	ldr	r3, [pc, #108]	; (800a678 <pvPortMalloc+0x190>)
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	429a      	cmp	r2, r3
 800a610:	d203      	bcs.n	800a61a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a612:	4b17      	ldr	r3, [pc, #92]	; (800a670 <pvPortMalloc+0x188>)
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	4a18      	ldr	r2, [pc, #96]	; (800a678 <pvPortMalloc+0x190>)
 800a618:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a61a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a61c:	685a      	ldr	r2, [r3, #4]
 800a61e:	4b13      	ldr	r3, [pc, #76]	; (800a66c <pvPortMalloc+0x184>)
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	431a      	orrs	r2, r3
 800a624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a626:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a62a:	2200      	movs	r2, #0
 800a62c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a62e:	4b13      	ldr	r3, [pc, #76]	; (800a67c <pvPortMalloc+0x194>)
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	3301      	adds	r3, #1
 800a634:	4a11      	ldr	r2, [pc, #68]	; (800a67c <pvPortMalloc+0x194>)
 800a636:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a638:	f7fe fd04 	bl	8009044 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a63c:	69fb      	ldr	r3, [r7, #28]
 800a63e:	f003 0307 	and.w	r3, r3, #7
 800a642:	2b00      	cmp	r3, #0
 800a644:	d00a      	beq.n	800a65c <pvPortMalloc+0x174>
	__asm volatile
 800a646:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a64a:	f383 8811 	msr	BASEPRI, r3
 800a64e:	f3bf 8f6f 	isb	sy
 800a652:	f3bf 8f4f 	dsb	sy
 800a656:	60fb      	str	r3, [r7, #12]
}
 800a658:	bf00      	nop
 800a65a:	e7fe      	b.n	800a65a <pvPortMalloc+0x172>
	return pvReturn;
 800a65c:	69fb      	ldr	r3, [r7, #28]
}
 800a65e:	4618      	mov	r0, r3
 800a660:	3728      	adds	r7, #40	; 0x28
 800a662:	46bd      	mov	sp, r7
 800a664:	bd80      	pop	{r7, pc}
 800a666:	bf00      	nop
 800a668:	20001b20 	.word	0x20001b20
 800a66c:	20001b34 	.word	0x20001b34
 800a670:	20001b24 	.word	0x20001b24
 800a674:	20001b18 	.word	0x20001b18
 800a678:	20001b28 	.word	0x20001b28
 800a67c:	20001b2c 	.word	0x20001b2c

0800a680 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a680:	b580      	push	{r7, lr}
 800a682:	b086      	sub	sp, #24
 800a684:	af00      	add	r7, sp, #0
 800a686:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d04d      	beq.n	800a72e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a692:	2308      	movs	r3, #8
 800a694:	425b      	negs	r3, r3
 800a696:	697a      	ldr	r2, [r7, #20]
 800a698:	4413      	add	r3, r2
 800a69a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a69c:	697b      	ldr	r3, [r7, #20]
 800a69e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a6a0:	693b      	ldr	r3, [r7, #16]
 800a6a2:	685a      	ldr	r2, [r3, #4]
 800a6a4:	4b24      	ldr	r3, [pc, #144]	; (800a738 <vPortFree+0xb8>)
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	4013      	ands	r3, r2
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d10a      	bne.n	800a6c4 <vPortFree+0x44>
	__asm volatile
 800a6ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6b2:	f383 8811 	msr	BASEPRI, r3
 800a6b6:	f3bf 8f6f 	isb	sy
 800a6ba:	f3bf 8f4f 	dsb	sy
 800a6be:	60fb      	str	r3, [r7, #12]
}
 800a6c0:	bf00      	nop
 800a6c2:	e7fe      	b.n	800a6c2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a6c4:	693b      	ldr	r3, [r7, #16]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d00a      	beq.n	800a6e2 <vPortFree+0x62>
	__asm volatile
 800a6cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6d0:	f383 8811 	msr	BASEPRI, r3
 800a6d4:	f3bf 8f6f 	isb	sy
 800a6d8:	f3bf 8f4f 	dsb	sy
 800a6dc:	60bb      	str	r3, [r7, #8]
}
 800a6de:	bf00      	nop
 800a6e0:	e7fe      	b.n	800a6e0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a6e2:	693b      	ldr	r3, [r7, #16]
 800a6e4:	685a      	ldr	r2, [r3, #4]
 800a6e6:	4b14      	ldr	r3, [pc, #80]	; (800a738 <vPortFree+0xb8>)
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	4013      	ands	r3, r2
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d01e      	beq.n	800a72e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a6f0:	693b      	ldr	r3, [r7, #16]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d11a      	bne.n	800a72e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a6f8:	693b      	ldr	r3, [r7, #16]
 800a6fa:	685a      	ldr	r2, [r3, #4]
 800a6fc:	4b0e      	ldr	r3, [pc, #56]	; (800a738 <vPortFree+0xb8>)
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	43db      	mvns	r3, r3
 800a702:	401a      	ands	r2, r3
 800a704:	693b      	ldr	r3, [r7, #16]
 800a706:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a708:	f7fe fc8e 	bl	8009028 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a70c:	693b      	ldr	r3, [r7, #16]
 800a70e:	685a      	ldr	r2, [r3, #4]
 800a710:	4b0a      	ldr	r3, [pc, #40]	; (800a73c <vPortFree+0xbc>)
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	4413      	add	r3, r2
 800a716:	4a09      	ldr	r2, [pc, #36]	; (800a73c <vPortFree+0xbc>)
 800a718:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a71a:	6938      	ldr	r0, [r7, #16]
 800a71c:	f000 f874 	bl	800a808 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a720:	4b07      	ldr	r3, [pc, #28]	; (800a740 <vPortFree+0xc0>)
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	3301      	adds	r3, #1
 800a726:	4a06      	ldr	r2, [pc, #24]	; (800a740 <vPortFree+0xc0>)
 800a728:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a72a:	f7fe fc8b 	bl	8009044 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a72e:	bf00      	nop
 800a730:	3718      	adds	r7, #24
 800a732:	46bd      	mov	sp, r7
 800a734:	bd80      	pop	{r7, pc}
 800a736:	bf00      	nop
 800a738:	20001b34 	.word	0x20001b34
 800a73c:	20001b24 	.word	0x20001b24
 800a740:	20001b30 	.word	0x20001b30

0800a744 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a744:	b480      	push	{r7}
 800a746:	b085      	sub	sp, #20
 800a748:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a74a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800a74e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a750:	4b27      	ldr	r3, [pc, #156]	; (800a7f0 <prvHeapInit+0xac>)
 800a752:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	f003 0307 	and.w	r3, r3, #7
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d00c      	beq.n	800a778 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	3307      	adds	r3, #7
 800a762:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	f023 0307 	bic.w	r3, r3, #7
 800a76a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a76c:	68ba      	ldr	r2, [r7, #8]
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	1ad3      	subs	r3, r2, r3
 800a772:	4a1f      	ldr	r2, [pc, #124]	; (800a7f0 <prvHeapInit+0xac>)
 800a774:	4413      	add	r3, r2
 800a776:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a77c:	4a1d      	ldr	r2, [pc, #116]	; (800a7f4 <prvHeapInit+0xb0>)
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a782:	4b1c      	ldr	r3, [pc, #112]	; (800a7f4 <prvHeapInit+0xb0>)
 800a784:	2200      	movs	r2, #0
 800a786:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	68ba      	ldr	r2, [r7, #8]
 800a78c:	4413      	add	r3, r2
 800a78e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a790:	2208      	movs	r2, #8
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	1a9b      	subs	r3, r3, r2
 800a796:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	f023 0307 	bic.w	r3, r3, #7
 800a79e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	4a15      	ldr	r2, [pc, #84]	; (800a7f8 <prvHeapInit+0xb4>)
 800a7a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a7a6:	4b14      	ldr	r3, [pc, #80]	; (800a7f8 <prvHeapInit+0xb4>)
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	2200      	movs	r2, #0
 800a7ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a7ae:	4b12      	ldr	r3, [pc, #72]	; (800a7f8 <prvHeapInit+0xb4>)
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	2200      	movs	r2, #0
 800a7b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a7ba:	683b      	ldr	r3, [r7, #0]
 800a7bc:	68fa      	ldr	r2, [r7, #12]
 800a7be:	1ad2      	subs	r2, r2, r3
 800a7c0:	683b      	ldr	r3, [r7, #0]
 800a7c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a7c4:	4b0c      	ldr	r3, [pc, #48]	; (800a7f8 <prvHeapInit+0xb4>)
 800a7c6:	681a      	ldr	r2, [r3, #0]
 800a7c8:	683b      	ldr	r3, [r7, #0]
 800a7ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a7cc:	683b      	ldr	r3, [r7, #0]
 800a7ce:	685b      	ldr	r3, [r3, #4]
 800a7d0:	4a0a      	ldr	r2, [pc, #40]	; (800a7fc <prvHeapInit+0xb8>)
 800a7d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a7d4:	683b      	ldr	r3, [r7, #0]
 800a7d6:	685b      	ldr	r3, [r3, #4]
 800a7d8:	4a09      	ldr	r2, [pc, #36]	; (800a800 <prvHeapInit+0xbc>)
 800a7da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a7dc:	4b09      	ldr	r3, [pc, #36]	; (800a804 <prvHeapInit+0xc0>)
 800a7de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a7e2:	601a      	str	r2, [r3, #0]
}
 800a7e4:	bf00      	nop
 800a7e6:	3714      	adds	r7, #20
 800a7e8:	46bd      	mov	sp, r7
 800a7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ee:	4770      	bx	lr
 800a7f0:	20000f60 	.word	0x20000f60
 800a7f4:	20001b18 	.word	0x20001b18
 800a7f8:	20001b20 	.word	0x20001b20
 800a7fc:	20001b28 	.word	0x20001b28
 800a800:	20001b24 	.word	0x20001b24
 800a804:	20001b34 	.word	0x20001b34

0800a808 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a808:	b480      	push	{r7}
 800a80a:	b085      	sub	sp, #20
 800a80c:	af00      	add	r7, sp, #0
 800a80e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a810:	4b28      	ldr	r3, [pc, #160]	; (800a8b4 <prvInsertBlockIntoFreeList+0xac>)
 800a812:	60fb      	str	r3, [r7, #12]
 800a814:	e002      	b.n	800a81c <prvInsertBlockIntoFreeList+0x14>
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	60fb      	str	r3, [r7, #12]
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	687a      	ldr	r2, [r7, #4]
 800a822:	429a      	cmp	r2, r3
 800a824:	d8f7      	bhi.n	800a816 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	685b      	ldr	r3, [r3, #4]
 800a82e:	68ba      	ldr	r2, [r7, #8]
 800a830:	4413      	add	r3, r2
 800a832:	687a      	ldr	r2, [r7, #4]
 800a834:	429a      	cmp	r2, r3
 800a836:	d108      	bne.n	800a84a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	685a      	ldr	r2, [r3, #4]
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	685b      	ldr	r3, [r3, #4]
 800a840:	441a      	add	r2, r3
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	685b      	ldr	r3, [r3, #4]
 800a852:	68ba      	ldr	r2, [r7, #8]
 800a854:	441a      	add	r2, r3
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	429a      	cmp	r2, r3
 800a85c:	d118      	bne.n	800a890 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	681a      	ldr	r2, [r3, #0]
 800a862:	4b15      	ldr	r3, [pc, #84]	; (800a8b8 <prvInsertBlockIntoFreeList+0xb0>)
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	429a      	cmp	r2, r3
 800a868:	d00d      	beq.n	800a886 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	685a      	ldr	r2, [r3, #4]
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	685b      	ldr	r3, [r3, #4]
 800a874:	441a      	add	r2, r3
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	681a      	ldr	r2, [r3, #0]
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	601a      	str	r2, [r3, #0]
 800a884:	e008      	b.n	800a898 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a886:	4b0c      	ldr	r3, [pc, #48]	; (800a8b8 <prvInsertBlockIntoFreeList+0xb0>)
 800a888:	681a      	ldr	r2, [r3, #0]
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	601a      	str	r2, [r3, #0]
 800a88e:	e003      	b.n	800a898 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	681a      	ldr	r2, [r3, #0]
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a898:	68fa      	ldr	r2, [r7, #12]
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	429a      	cmp	r2, r3
 800a89e:	d002      	beq.n	800a8a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	687a      	ldr	r2, [r7, #4]
 800a8a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a8a6:	bf00      	nop
 800a8a8:	3714      	adds	r7, #20
 800a8aa:	46bd      	mov	sp, r7
 800a8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b0:	4770      	bx	lr
 800a8b2:	bf00      	nop
 800a8b4:	20001b18 	.word	0x20001b18
 800a8b8:	20001b20 	.word	0x20001b20

0800a8bc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a8bc:	b580      	push	{r7, lr}
 800a8be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a8c0:	2200      	movs	r2, #0
 800a8c2:	490e      	ldr	r1, [pc, #56]	; (800a8fc <MX_USB_DEVICE_Init+0x40>)
 800a8c4:	480e      	ldr	r0, [pc, #56]	; (800a900 <MX_USB_DEVICE_Init+0x44>)
 800a8c6:	f7fb ff6d 	bl	80067a4 <USBD_Init>
 800a8ca:	4603      	mov	r3, r0
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d001      	beq.n	800a8d4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a8d0:	f7f6 f93e 	bl	8000b50 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 800a8d4:	490b      	ldr	r1, [pc, #44]	; (800a904 <MX_USB_DEVICE_Init+0x48>)
 800a8d6:	480a      	ldr	r0, [pc, #40]	; (800a900 <MX_USB_DEVICE_Init+0x44>)
 800a8d8:	f7fb ff94 	bl	8006804 <USBD_RegisterClass>
 800a8dc:	4603      	mov	r3, r0
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d001      	beq.n	800a8e6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a8e2:	f7f6 f935 	bl	8000b50 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a8e6:	4806      	ldr	r0, [pc, #24]	; (800a900 <MX_USB_DEVICE_Init+0x44>)
 800a8e8:	f7fb ffc2 	bl	8006870 <USBD_Start>
 800a8ec:	4603      	mov	r3, r0
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d001      	beq.n	800a8f6 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 800a8f2:	f7f6 f92d 	bl	8000b50 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a8f6:	bf00      	nop
 800a8f8:	bd80      	pop	{r7, pc}
 800a8fa:	bf00      	nop
 800a8fc:	200000d0 	.word	0x200000d0
 800a900:	20001b38 	.word	0x20001b38
 800a904:	2000000c 	.word	0x2000000c

0800a908 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a908:	b480      	push	{r7}
 800a90a:	b083      	sub	sp, #12
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	4603      	mov	r3, r0
 800a910:	6039      	str	r1, [r7, #0]
 800a912:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a914:	683b      	ldr	r3, [r7, #0]
 800a916:	2212      	movs	r2, #18
 800a918:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a91a:	4b03      	ldr	r3, [pc, #12]	; (800a928 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a91c:	4618      	mov	r0, r3
 800a91e:	370c      	adds	r7, #12
 800a920:	46bd      	mov	sp, r7
 800a922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a926:	4770      	bx	lr
 800a928:	200000f0 	.word	0x200000f0

0800a92c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a92c:	b480      	push	{r7}
 800a92e:	b083      	sub	sp, #12
 800a930:	af00      	add	r7, sp, #0
 800a932:	4603      	mov	r3, r0
 800a934:	6039      	str	r1, [r7, #0]
 800a936:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a938:	683b      	ldr	r3, [r7, #0]
 800a93a:	2204      	movs	r2, #4
 800a93c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a93e:	4b03      	ldr	r3, [pc, #12]	; (800a94c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a940:	4618      	mov	r0, r3
 800a942:	370c      	adds	r7, #12
 800a944:	46bd      	mov	sp, r7
 800a946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a94a:	4770      	bx	lr
 800a94c:	20000110 	.word	0x20000110

0800a950 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a950:	b580      	push	{r7, lr}
 800a952:	b082      	sub	sp, #8
 800a954:	af00      	add	r7, sp, #0
 800a956:	4603      	mov	r3, r0
 800a958:	6039      	str	r1, [r7, #0]
 800a95a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a95c:	79fb      	ldrb	r3, [r7, #7]
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d105      	bne.n	800a96e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a962:	683a      	ldr	r2, [r7, #0]
 800a964:	4907      	ldr	r1, [pc, #28]	; (800a984 <USBD_FS_ProductStrDescriptor+0x34>)
 800a966:	4808      	ldr	r0, [pc, #32]	; (800a988 <USBD_FS_ProductStrDescriptor+0x38>)
 800a968:	f7fd f95e 	bl	8007c28 <USBD_GetString>
 800a96c:	e004      	b.n	800a978 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a96e:	683a      	ldr	r2, [r7, #0]
 800a970:	4904      	ldr	r1, [pc, #16]	; (800a984 <USBD_FS_ProductStrDescriptor+0x34>)
 800a972:	4805      	ldr	r0, [pc, #20]	; (800a988 <USBD_FS_ProductStrDescriptor+0x38>)
 800a974:	f7fd f958 	bl	8007c28 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a978:	4b02      	ldr	r3, [pc, #8]	; (800a984 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a97a:	4618      	mov	r0, r3
 800a97c:	3708      	adds	r7, #8
 800a97e:	46bd      	mov	sp, r7
 800a980:	bd80      	pop	{r7, pc}
 800a982:	bf00      	nop
 800a984:	20001e14 	.word	0x20001e14
 800a988:	0800b490 	.word	0x0800b490

0800a98c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a98c:	b580      	push	{r7, lr}
 800a98e:	b082      	sub	sp, #8
 800a990:	af00      	add	r7, sp, #0
 800a992:	4603      	mov	r3, r0
 800a994:	6039      	str	r1, [r7, #0]
 800a996:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a998:	683a      	ldr	r2, [r7, #0]
 800a99a:	4904      	ldr	r1, [pc, #16]	; (800a9ac <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a99c:	4804      	ldr	r0, [pc, #16]	; (800a9b0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a99e:	f7fd f943 	bl	8007c28 <USBD_GetString>
  return USBD_StrDesc;
 800a9a2:	4b02      	ldr	r3, [pc, #8]	; (800a9ac <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a9a4:	4618      	mov	r0, r3
 800a9a6:	3708      	adds	r7, #8
 800a9a8:	46bd      	mov	sp, r7
 800a9aa:	bd80      	pop	{r7, pc}
 800a9ac:	20001e14 	.word	0x20001e14
 800a9b0:	0800b4a8 	.word	0x0800b4a8

0800a9b4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a9b4:	b580      	push	{r7, lr}
 800a9b6:	b082      	sub	sp, #8
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	4603      	mov	r3, r0
 800a9bc:	6039      	str	r1, [r7, #0]
 800a9be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a9c0:	683b      	ldr	r3, [r7, #0]
 800a9c2:	221a      	movs	r2, #26
 800a9c4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a9c6:	f000 f855 	bl	800aa74 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a9ca:	4b02      	ldr	r3, [pc, #8]	; (800a9d4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a9cc:	4618      	mov	r0, r3
 800a9ce:	3708      	adds	r7, #8
 800a9d0:	46bd      	mov	sp, r7
 800a9d2:	bd80      	pop	{r7, pc}
 800a9d4:	20000114 	.word	0x20000114

0800a9d8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a9d8:	b580      	push	{r7, lr}
 800a9da:	b082      	sub	sp, #8
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	4603      	mov	r3, r0
 800a9e0:	6039      	str	r1, [r7, #0]
 800a9e2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a9e4:	79fb      	ldrb	r3, [r7, #7]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d105      	bne.n	800a9f6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a9ea:	683a      	ldr	r2, [r7, #0]
 800a9ec:	4907      	ldr	r1, [pc, #28]	; (800aa0c <USBD_FS_ConfigStrDescriptor+0x34>)
 800a9ee:	4808      	ldr	r0, [pc, #32]	; (800aa10 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a9f0:	f7fd f91a 	bl	8007c28 <USBD_GetString>
 800a9f4:	e004      	b.n	800aa00 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a9f6:	683a      	ldr	r2, [r7, #0]
 800a9f8:	4904      	ldr	r1, [pc, #16]	; (800aa0c <USBD_FS_ConfigStrDescriptor+0x34>)
 800a9fa:	4805      	ldr	r0, [pc, #20]	; (800aa10 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a9fc:	f7fd f914 	bl	8007c28 <USBD_GetString>
  }
  return USBD_StrDesc;
 800aa00:	4b02      	ldr	r3, [pc, #8]	; (800aa0c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800aa02:	4618      	mov	r0, r3
 800aa04:	3708      	adds	r7, #8
 800aa06:	46bd      	mov	sp, r7
 800aa08:	bd80      	pop	{r7, pc}
 800aa0a:	bf00      	nop
 800aa0c:	20001e14 	.word	0x20001e14
 800aa10:	0800b4bc 	.word	0x0800b4bc

0800aa14 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa14:	b580      	push	{r7, lr}
 800aa16:	b082      	sub	sp, #8
 800aa18:	af00      	add	r7, sp, #0
 800aa1a:	4603      	mov	r3, r0
 800aa1c:	6039      	str	r1, [r7, #0]
 800aa1e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800aa20:	79fb      	ldrb	r3, [r7, #7]
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d105      	bne.n	800aa32 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800aa26:	683a      	ldr	r2, [r7, #0]
 800aa28:	4907      	ldr	r1, [pc, #28]	; (800aa48 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800aa2a:	4808      	ldr	r0, [pc, #32]	; (800aa4c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800aa2c:	f7fd f8fc 	bl	8007c28 <USBD_GetString>
 800aa30:	e004      	b.n	800aa3c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800aa32:	683a      	ldr	r2, [r7, #0]
 800aa34:	4904      	ldr	r1, [pc, #16]	; (800aa48 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800aa36:	4805      	ldr	r0, [pc, #20]	; (800aa4c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800aa38:	f7fd f8f6 	bl	8007c28 <USBD_GetString>
  }
  return USBD_StrDesc;
 800aa3c:	4b02      	ldr	r3, [pc, #8]	; (800aa48 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800aa3e:	4618      	mov	r0, r3
 800aa40:	3708      	adds	r7, #8
 800aa42:	46bd      	mov	sp, r7
 800aa44:	bd80      	pop	{r7, pc}
 800aa46:	bf00      	nop
 800aa48:	20001e14 	.word	0x20001e14
 800aa4c:	0800b4c8 	.word	0x0800b4c8

0800aa50 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa50:	b480      	push	{r7}
 800aa52:	b083      	sub	sp, #12
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	4603      	mov	r3, r0
 800aa58:	6039      	str	r1, [r7, #0]
 800aa5a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800aa5c:	683b      	ldr	r3, [r7, #0]
 800aa5e:	220c      	movs	r2, #12
 800aa60:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800aa62:	4b03      	ldr	r3, [pc, #12]	; (800aa70 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800aa64:	4618      	mov	r0, r3
 800aa66:	370c      	adds	r7, #12
 800aa68:	46bd      	mov	sp, r7
 800aa6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa6e:	4770      	bx	lr
 800aa70:	20000104 	.word	0x20000104

0800aa74 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800aa74:	b580      	push	{r7, lr}
 800aa76:	b084      	sub	sp, #16
 800aa78:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800aa7a:	4b0f      	ldr	r3, [pc, #60]	; (800aab8 <Get_SerialNum+0x44>)
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800aa80:	4b0e      	ldr	r3, [pc, #56]	; (800aabc <Get_SerialNum+0x48>)
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800aa86:	4b0e      	ldr	r3, [pc, #56]	; (800aac0 <Get_SerialNum+0x4c>)
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800aa8c:	68fa      	ldr	r2, [r7, #12]
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	4413      	add	r3, r2
 800aa92:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d009      	beq.n	800aaae <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800aa9a:	2208      	movs	r2, #8
 800aa9c:	4909      	ldr	r1, [pc, #36]	; (800aac4 <Get_SerialNum+0x50>)
 800aa9e:	68f8      	ldr	r0, [r7, #12]
 800aaa0:	f000 f814 	bl	800aacc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800aaa4:	2204      	movs	r2, #4
 800aaa6:	4908      	ldr	r1, [pc, #32]	; (800aac8 <Get_SerialNum+0x54>)
 800aaa8:	68b8      	ldr	r0, [r7, #8]
 800aaaa:	f000 f80f 	bl	800aacc <IntToUnicode>
  }
}
 800aaae:	bf00      	nop
 800aab0:	3710      	adds	r7, #16
 800aab2:	46bd      	mov	sp, r7
 800aab4:	bd80      	pop	{r7, pc}
 800aab6:	bf00      	nop
 800aab8:	1fff7590 	.word	0x1fff7590
 800aabc:	1fff7594 	.word	0x1fff7594
 800aac0:	1fff7598 	.word	0x1fff7598
 800aac4:	20000116 	.word	0x20000116
 800aac8:	20000126 	.word	0x20000126

0800aacc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800aacc:	b480      	push	{r7}
 800aace:	b087      	sub	sp, #28
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	60f8      	str	r0, [r7, #12]
 800aad4:	60b9      	str	r1, [r7, #8]
 800aad6:	4613      	mov	r3, r2
 800aad8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800aada:	2300      	movs	r3, #0
 800aadc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800aade:	2300      	movs	r3, #0
 800aae0:	75fb      	strb	r3, [r7, #23]
 800aae2:	e027      	b.n	800ab34 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	0f1b      	lsrs	r3, r3, #28
 800aae8:	2b09      	cmp	r3, #9
 800aaea:	d80b      	bhi.n	800ab04 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	0f1b      	lsrs	r3, r3, #28
 800aaf0:	b2da      	uxtb	r2, r3
 800aaf2:	7dfb      	ldrb	r3, [r7, #23]
 800aaf4:	005b      	lsls	r3, r3, #1
 800aaf6:	4619      	mov	r1, r3
 800aaf8:	68bb      	ldr	r3, [r7, #8]
 800aafa:	440b      	add	r3, r1
 800aafc:	3230      	adds	r2, #48	; 0x30
 800aafe:	b2d2      	uxtb	r2, r2
 800ab00:	701a      	strb	r2, [r3, #0]
 800ab02:	e00a      	b.n	800ab1a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	0f1b      	lsrs	r3, r3, #28
 800ab08:	b2da      	uxtb	r2, r3
 800ab0a:	7dfb      	ldrb	r3, [r7, #23]
 800ab0c:	005b      	lsls	r3, r3, #1
 800ab0e:	4619      	mov	r1, r3
 800ab10:	68bb      	ldr	r3, [r7, #8]
 800ab12:	440b      	add	r3, r1
 800ab14:	3237      	adds	r2, #55	; 0x37
 800ab16:	b2d2      	uxtb	r2, r2
 800ab18:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	011b      	lsls	r3, r3, #4
 800ab1e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ab20:	7dfb      	ldrb	r3, [r7, #23]
 800ab22:	005b      	lsls	r3, r3, #1
 800ab24:	3301      	adds	r3, #1
 800ab26:	68ba      	ldr	r2, [r7, #8]
 800ab28:	4413      	add	r3, r2
 800ab2a:	2200      	movs	r2, #0
 800ab2c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ab2e:	7dfb      	ldrb	r3, [r7, #23]
 800ab30:	3301      	adds	r3, #1
 800ab32:	75fb      	strb	r3, [r7, #23]
 800ab34:	7dfa      	ldrb	r2, [r7, #23]
 800ab36:	79fb      	ldrb	r3, [r7, #7]
 800ab38:	429a      	cmp	r2, r3
 800ab3a:	d3d3      	bcc.n	800aae4 <IntToUnicode+0x18>
  }
}
 800ab3c:	bf00      	nop
 800ab3e:	bf00      	nop
 800ab40:	371c      	adds	r7, #28
 800ab42:	46bd      	mov	sp, r7
 800ab44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab48:	4770      	bx	lr
	...

0800ab4c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ab4c:	b580      	push	{r7, lr}
 800ab4e:	b0ae      	sub	sp, #184	; 0xb8
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ab54:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800ab58:	2200      	movs	r2, #0
 800ab5a:	601a      	str	r2, [r3, #0]
 800ab5c:	605a      	str	r2, [r3, #4]
 800ab5e:	609a      	str	r2, [r3, #8]
 800ab60:	60da      	str	r2, [r3, #12]
 800ab62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800ab64:	f107 0318 	add.w	r3, r7, #24
 800ab68:	228c      	movs	r2, #140	; 0x8c
 800ab6a:	2100      	movs	r1, #0
 800ab6c:	4618      	mov	r0, r3
 800ab6e:	f000 fc2f 	bl	800b3d0 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ab7a:	f040 8085 	bne.w	800ac88 <HAL_PCD_MspInit+0x13c>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800ab7e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ab82:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800ab84:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800ab88:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800ab8c:	2301      	movs	r3, #1
 800ab8e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800ab90:	2301      	movs	r3, #1
 800ab92:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800ab94:	2318      	movs	r3, #24
 800ab96:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 800ab98:	2302      	movs	r3, #2
 800ab9a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800ab9c:	2302      	movs	r3, #2
 800ab9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800aba0:	2302      	movs	r3, #2
 800aba2:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800aba4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800aba8:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800abaa:	f107 0318 	add.w	r3, r7, #24
 800abae:	4618      	mov	r0, r3
 800abb0:	f7f8 fc9a 	bl	80034e8 <HAL_RCCEx_PeriphCLKConfig>
 800abb4:	4603      	mov	r3, r0
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d001      	beq.n	800abbe <HAL_PCD_MspInit+0x72>
    {
      Error_Handler();
 800abba:	f7f5 ffc9 	bl	8000b50 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800abbe:	4b34      	ldr	r3, [pc, #208]	; (800ac90 <HAL_PCD_MspInit+0x144>)
 800abc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800abc2:	4a33      	ldr	r2, [pc, #204]	; (800ac90 <HAL_PCD_MspInit+0x144>)
 800abc4:	f043 0301 	orr.w	r3, r3, #1
 800abc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 800abca:	4b31      	ldr	r3, [pc, #196]	; (800ac90 <HAL_PCD_MspInit+0x144>)
 800abcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800abce:	f003 0301 	and.w	r3, r3, #1
 800abd2:	617b      	str	r3, [r7, #20]
 800abd4:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800abd6:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800abda:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800abde:	2302      	movs	r3, #2
 800abe0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800abe4:	2300      	movs	r3, #0
 800abe6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800abea:	2303      	movs	r3, #3
 800abec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800abf0:	230a      	movs	r3, #10
 800abf2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800abf6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800abfa:	4619      	mov	r1, r3
 800abfc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800ac00:	f7f6 fa66 	bl	80010d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800ac04:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ac08:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ac0c:	2300      	movs	r3, #0
 800ac0e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ac12:	2300      	movs	r3, #0
 800ac14:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800ac18:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800ac1c:	4619      	mov	r1, r3
 800ac1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800ac22:	f7f6 fa55 	bl	80010d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ac26:	4b1a      	ldr	r3, [pc, #104]	; (800ac90 <HAL_PCD_MspInit+0x144>)
 800ac28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac2a:	4a19      	ldr	r2, [pc, #100]	; (800ac90 <HAL_PCD_MspInit+0x144>)
 800ac2c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800ac30:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ac32:	4b17      	ldr	r3, [pc, #92]	; (800ac90 <HAL_PCD_MspInit+0x144>)
 800ac34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac36:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ac3a:	613b      	str	r3, [r7, #16]
 800ac3c:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ac3e:	4b14      	ldr	r3, [pc, #80]	; (800ac90 <HAL_PCD_MspInit+0x144>)
 800ac40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d114      	bne.n	800ac74 <HAL_PCD_MspInit+0x128>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ac4a:	4b11      	ldr	r3, [pc, #68]	; (800ac90 <HAL_PCD_MspInit+0x144>)
 800ac4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac4e:	4a10      	ldr	r2, [pc, #64]	; (800ac90 <HAL_PCD_MspInit+0x144>)
 800ac50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ac54:	6593      	str	r3, [r2, #88]	; 0x58
 800ac56:	4b0e      	ldr	r3, [pc, #56]	; (800ac90 <HAL_PCD_MspInit+0x144>)
 800ac58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ac5e:	60fb      	str	r3, [r7, #12]
 800ac60:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 800ac62:	f7f7 fde3 	bl	800282c <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800ac66:	4b0a      	ldr	r3, [pc, #40]	; (800ac90 <HAL_PCD_MspInit+0x144>)
 800ac68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac6a:	4a09      	ldr	r2, [pc, #36]	; (800ac90 <HAL_PCD_MspInit+0x144>)
 800ac6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ac70:	6593      	str	r3, [r2, #88]	; 0x58
 800ac72:	e001      	b.n	800ac78 <HAL_PCD_MspInit+0x12c>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800ac74:	f7f7 fdda 	bl	800282c <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800ac78:	2200      	movs	r2, #0
 800ac7a:	2105      	movs	r1, #5
 800ac7c:	2043      	movs	r0, #67	; 0x43
 800ac7e:	f7f6 f9f0 	bl	8001062 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ac82:	2043      	movs	r0, #67	; 0x43
 800ac84:	f7f6 fa09 	bl	800109a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800ac88:	bf00      	nop
 800ac8a:	37b8      	adds	r7, #184	; 0xb8
 800ac8c:	46bd      	mov	sp, r7
 800ac8e:	bd80      	pop	{r7, pc}
 800ac90:	40021000 	.word	0x40021000

0800ac94 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac94:	b580      	push	{r7, lr}
 800ac96:	b082      	sub	sp, #8
 800ac98:	af00      	add	r7, sp, #0
 800ac9a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800aca8:	4619      	mov	r1, r3
 800acaa:	4610      	mov	r0, r2
 800acac:	f7fb fe2d 	bl	800690a <USBD_LL_SetupStage>
}
 800acb0:	bf00      	nop
 800acb2:	3708      	adds	r7, #8
 800acb4:	46bd      	mov	sp, r7
 800acb6:	bd80      	pop	{r7, pc}

0800acb8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800acb8:	b580      	push	{r7, lr}
 800acba:	b082      	sub	sp, #8
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	6078      	str	r0, [r7, #4]
 800acc0:	460b      	mov	r3, r1
 800acc2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800acca:	78fa      	ldrb	r2, [r7, #3]
 800accc:	6879      	ldr	r1, [r7, #4]
 800acce:	4613      	mov	r3, r2
 800acd0:	00db      	lsls	r3, r3, #3
 800acd2:	4413      	add	r3, r2
 800acd4:	009b      	lsls	r3, r3, #2
 800acd6:	440b      	add	r3, r1
 800acd8:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800acdc:	681a      	ldr	r2, [r3, #0]
 800acde:	78fb      	ldrb	r3, [r7, #3]
 800ace0:	4619      	mov	r1, r3
 800ace2:	f7fb fe67 	bl	80069b4 <USBD_LL_DataOutStage>
}
 800ace6:	bf00      	nop
 800ace8:	3708      	adds	r7, #8
 800acea:	46bd      	mov	sp, r7
 800acec:	bd80      	pop	{r7, pc}

0800acee <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800acee:	b580      	push	{r7, lr}
 800acf0:	b082      	sub	sp, #8
 800acf2:	af00      	add	r7, sp, #0
 800acf4:	6078      	str	r0, [r7, #4]
 800acf6:	460b      	mov	r3, r1
 800acf8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800ad00:	78fa      	ldrb	r2, [r7, #3]
 800ad02:	6879      	ldr	r1, [r7, #4]
 800ad04:	4613      	mov	r3, r2
 800ad06:	00db      	lsls	r3, r3, #3
 800ad08:	4413      	add	r3, r2
 800ad0a:	009b      	lsls	r3, r3, #2
 800ad0c:	440b      	add	r3, r1
 800ad0e:	3348      	adds	r3, #72	; 0x48
 800ad10:	681a      	ldr	r2, [r3, #0]
 800ad12:	78fb      	ldrb	r3, [r7, #3]
 800ad14:	4619      	mov	r1, r3
 800ad16:	f7fb ff00 	bl	8006b1a <USBD_LL_DataInStage>
}
 800ad1a:	bf00      	nop
 800ad1c:	3708      	adds	r7, #8
 800ad1e:	46bd      	mov	sp, r7
 800ad20:	bd80      	pop	{r7, pc}

0800ad22 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad22:	b580      	push	{r7, lr}
 800ad24:	b082      	sub	sp, #8
 800ad26:	af00      	add	r7, sp, #0
 800ad28:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ad30:	4618      	mov	r0, r3
 800ad32:	f7fc f83a 	bl	8006daa <USBD_LL_SOF>
}
 800ad36:	bf00      	nop
 800ad38:	3708      	adds	r7, #8
 800ad3a:	46bd      	mov	sp, r7
 800ad3c:	bd80      	pop	{r7, pc}

0800ad3e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad3e:	b580      	push	{r7, lr}
 800ad40:	b084      	sub	sp, #16
 800ad42:	af00      	add	r7, sp, #0
 800ad44:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ad46:	2301      	movs	r3, #1
 800ad48:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	691b      	ldr	r3, [r3, #16]
 800ad4e:	2b02      	cmp	r3, #2
 800ad50:	d001      	beq.n	800ad56 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800ad52:	f7f5 fefd 	bl	8000b50 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ad5c:	7bfa      	ldrb	r2, [r7, #15]
 800ad5e:	4611      	mov	r1, r2
 800ad60:	4618      	mov	r0, r3
 800ad62:	f7fb ffde 	bl	8006d22 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ad6c:	4618      	mov	r0, r3
 800ad6e:	f7fb ff86 	bl	8006c7e <USBD_LL_Reset>
}
 800ad72:	bf00      	nop
 800ad74:	3710      	adds	r7, #16
 800ad76:	46bd      	mov	sp, r7
 800ad78:	bd80      	pop	{r7, pc}
	...

0800ad7c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad7c:	b580      	push	{r7, lr}
 800ad7e:	b082      	sub	sp, #8
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	687a      	ldr	r2, [r7, #4]
 800ad90:	6812      	ldr	r2, [r2, #0]
 800ad92:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ad96:	f043 0301 	orr.w	r3, r3, #1
 800ad9a:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ada2:	4618      	mov	r0, r3
 800ada4:	f7fb ffcd 	bl	8006d42 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	6a1b      	ldr	r3, [r3, #32]
 800adac:	2b00      	cmp	r3, #0
 800adae:	d005      	beq.n	800adbc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800adb0:	4b04      	ldr	r3, [pc, #16]	; (800adc4 <HAL_PCD_SuspendCallback+0x48>)
 800adb2:	691b      	ldr	r3, [r3, #16]
 800adb4:	4a03      	ldr	r2, [pc, #12]	; (800adc4 <HAL_PCD_SuspendCallback+0x48>)
 800adb6:	f043 0306 	orr.w	r3, r3, #6
 800adba:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800adbc:	bf00      	nop
 800adbe:	3708      	adds	r7, #8
 800adc0:	46bd      	mov	sp, r7
 800adc2:	bd80      	pop	{r7, pc}
 800adc4:	e000ed00 	.word	0xe000ed00

0800adc8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800adc8:	b580      	push	{r7, lr}
 800adca:	b082      	sub	sp, #8
 800adcc:	af00      	add	r7, sp, #0
 800adce:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	687a      	ldr	r2, [r7, #4]
 800addc:	6812      	ldr	r2, [r2, #0]
 800adde:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ade2:	f023 0301 	bic.w	r3, r3, #1
 800ade6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	6a1b      	ldr	r3, [r3, #32]
 800adec:	2b00      	cmp	r3, #0
 800adee:	d007      	beq.n	800ae00 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800adf0:	4b08      	ldr	r3, [pc, #32]	; (800ae14 <HAL_PCD_ResumeCallback+0x4c>)
 800adf2:	691b      	ldr	r3, [r3, #16]
 800adf4:	4a07      	ldr	r2, [pc, #28]	; (800ae14 <HAL_PCD_ResumeCallback+0x4c>)
 800adf6:	f023 0306 	bic.w	r3, r3, #6
 800adfa:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800adfc:	f000 fae2 	bl	800b3c4 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ae06:	4618      	mov	r0, r3
 800ae08:	f7fb ffb7 	bl	8006d7a <USBD_LL_Resume>
}
 800ae0c:	bf00      	nop
 800ae0e:	3708      	adds	r7, #8
 800ae10:	46bd      	mov	sp, r7
 800ae12:	bd80      	pop	{r7, pc}
 800ae14:	e000ed00 	.word	0xe000ed00

0800ae18 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae18:	b580      	push	{r7, lr}
 800ae1a:	b082      	sub	sp, #8
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	6078      	str	r0, [r7, #4]
 800ae20:	460b      	mov	r3, r1
 800ae22:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ae2a:	78fa      	ldrb	r2, [r7, #3]
 800ae2c:	4611      	mov	r1, r2
 800ae2e:	4618      	mov	r0, r3
 800ae30:	f7fc f80d 	bl	8006e4e <USBD_LL_IsoOUTIncomplete>
}
 800ae34:	bf00      	nop
 800ae36:	3708      	adds	r7, #8
 800ae38:	46bd      	mov	sp, r7
 800ae3a:	bd80      	pop	{r7, pc}

0800ae3c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae3c:	b580      	push	{r7, lr}
 800ae3e:	b082      	sub	sp, #8
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	6078      	str	r0, [r7, #4]
 800ae44:	460b      	mov	r3, r1
 800ae46:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ae4e:	78fa      	ldrb	r2, [r7, #3]
 800ae50:	4611      	mov	r1, r2
 800ae52:	4618      	mov	r0, r3
 800ae54:	f7fb ffc9 	bl	8006dea <USBD_LL_IsoINIncomplete>
}
 800ae58:	bf00      	nop
 800ae5a:	3708      	adds	r7, #8
 800ae5c:	46bd      	mov	sp, r7
 800ae5e:	bd80      	pop	{r7, pc}

0800ae60 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae60:	b580      	push	{r7, lr}
 800ae62:	b082      	sub	sp, #8
 800ae64:	af00      	add	r7, sp, #0
 800ae66:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ae6e:	4618      	mov	r0, r3
 800ae70:	f7fc f81f 	bl	8006eb2 <USBD_LL_DevConnected>
}
 800ae74:	bf00      	nop
 800ae76:	3708      	adds	r7, #8
 800ae78:	46bd      	mov	sp, r7
 800ae7a:	bd80      	pop	{r7, pc}

0800ae7c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae7c:	b580      	push	{r7, lr}
 800ae7e:	b082      	sub	sp, #8
 800ae80:	af00      	add	r7, sp, #0
 800ae82:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ae8a:	4618      	mov	r0, r3
 800ae8c:	f7fc f81c 	bl	8006ec8 <USBD_LL_DevDisconnected>
}
 800ae90:	bf00      	nop
 800ae92:	3708      	adds	r7, #8
 800ae94:	46bd      	mov	sp, r7
 800ae96:	bd80      	pop	{r7, pc}

0800ae98 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ae98:	b580      	push	{r7, lr}
 800ae9a:	b082      	sub	sp, #8
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	781b      	ldrb	r3, [r3, #0]
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d13c      	bne.n	800af22 <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800aea8:	4a20      	ldr	r2, [pc, #128]	; (800af2c <USBD_LL_Init+0x94>)
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	4a1e      	ldr	r2, [pc, #120]	; (800af2c <USBD_LL_Init+0x94>)
 800aeb4:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800aeb8:	4b1c      	ldr	r3, [pc, #112]	; (800af2c <USBD_LL_Init+0x94>)
 800aeba:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800aebe:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800aec0:	4b1a      	ldr	r3, [pc, #104]	; (800af2c <USBD_LL_Init+0x94>)
 800aec2:	2206      	movs	r2, #6
 800aec4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800aec6:	4b19      	ldr	r3, [pc, #100]	; (800af2c <USBD_LL_Init+0x94>)
 800aec8:	2202      	movs	r2, #2
 800aeca:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800aecc:	4b17      	ldr	r3, [pc, #92]	; (800af2c <USBD_LL_Init+0x94>)
 800aece:	2202      	movs	r2, #2
 800aed0:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800aed2:	4b16      	ldr	r3, [pc, #88]	; (800af2c <USBD_LL_Init+0x94>)
 800aed4:	2201      	movs	r2, #1
 800aed6:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800aed8:	4b14      	ldr	r3, [pc, #80]	; (800af2c <USBD_LL_Init+0x94>)
 800aeda:	2200      	movs	r2, #0
 800aedc:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800aede:	4b13      	ldr	r3, [pc, #76]	; (800af2c <USBD_LL_Init+0x94>)
 800aee0:	2200      	movs	r2, #0
 800aee2:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 800aee4:	4b11      	ldr	r3, [pc, #68]	; (800af2c <USBD_LL_Init+0x94>)
 800aee6:	2201      	movs	r2, #1
 800aee8:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800aeea:	4b10      	ldr	r3, [pc, #64]	; (800af2c <USBD_LL_Init+0x94>)
 800aeec:	2200      	movs	r2, #0
 800aeee:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800aef0:	4b0e      	ldr	r3, [pc, #56]	; (800af2c <USBD_LL_Init+0x94>)
 800aef2:	2201      	movs	r2, #1
 800aef4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800aef6:	480d      	ldr	r0, [pc, #52]	; (800af2c <USBD_LL_Init+0x94>)
 800aef8:	f7f6 fa94 	bl	8001424 <HAL_PCD_Init>
 800aefc:	4603      	mov	r3, r0
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d001      	beq.n	800af06 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800af02:	f7f5 fe25 	bl	8000b50 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800af06:	2180      	movs	r1, #128	; 0x80
 800af08:	4808      	ldr	r0, [pc, #32]	; (800af2c <USBD_LL_Init+0x94>)
 800af0a:	f7f7 fbe6 	bl	80026da <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800af0e:	2240      	movs	r2, #64	; 0x40
 800af10:	2100      	movs	r1, #0
 800af12:	4806      	ldr	r0, [pc, #24]	; (800af2c <USBD_LL_Init+0x94>)
 800af14:	f7f7 fb9a 	bl	800264c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800af18:	2280      	movs	r2, #128	; 0x80
 800af1a:	2101      	movs	r1, #1
 800af1c:	4803      	ldr	r0, [pc, #12]	; (800af2c <USBD_LL_Init+0x94>)
 800af1e:	f7f7 fb95 	bl	800264c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800af22:	2300      	movs	r3, #0
}
 800af24:	4618      	mov	r0, r3
 800af26:	3708      	adds	r7, #8
 800af28:	46bd      	mov	sp, r7
 800af2a:	bd80      	pop	{r7, pc}
 800af2c:	20002014 	.word	0x20002014

0800af30 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800af30:	b580      	push	{r7, lr}
 800af32:	b084      	sub	sp, #16
 800af34:	af00      	add	r7, sp, #0
 800af36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af38:	2300      	movs	r3, #0
 800af3a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af3c:	2300      	movs	r3, #0
 800af3e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800af46:	4618      	mov	r0, r3
 800af48:	f7f6 fb90 	bl	800166c <HAL_PCD_Start>
 800af4c:	4603      	mov	r3, r0
 800af4e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800af50:	7bbb      	ldrb	r3, [r7, #14]
 800af52:	2b03      	cmp	r3, #3
 800af54:	d816      	bhi.n	800af84 <USBD_LL_Start+0x54>
 800af56:	a201      	add	r2, pc, #4	; (adr r2, 800af5c <USBD_LL_Start+0x2c>)
 800af58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af5c:	0800af6d 	.word	0x0800af6d
 800af60:	0800af73 	.word	0x0800af73
 800af64:	0800af79 	.word	0x0800af79
 800af68:	0800af7f 	.word	0x0800af7f
    case HAL_OK :
      usb_status = USBD_OK;
 800af6c:	2300      	movs	r3, #0
 800af6e:	73fb      	strb	r3, [r7, #15]
    break;
 800af70:	e00b      	b.n	800af8a <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800af72:	2303      	movs	r3, #3
 800af74:	73fb      	strb	r3, [r7, #15]
    break;
 800af76:	e008      	b.n	800af8a <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800af78:	2301      	movs	r3, #1
 800af7a:	73fb      	strb	r3, [r7, #15]
    break;
 800af7c:	e005      	b.n	800af8a <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800af7e:	2303      	movs	r3, #3
 800af80:	73fb      	strb	r3, [r7, #15]
    break;
 800af82:	e002      	b.n	800af8a <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800af84:	2303      	movs	r3, #3
 800af86:	73fb      	strb	r3, [r7, #15]
    break;
 800af88:	bf00      	nop
  }
  return usb_status;
 800af8a:	7bfb      	ldrb	r3, [r7, #15]
}
 800af8c:	4618      	mov	r0, r3
 800af8e:	3710      	adds	r7, #16
 800af90:	46bd      	mov	sp, r7
 800af92:	bd80      	pop	{r7, pc}

0800af94 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800af94:	b580      	push	{r7, lr}
 800af96:	b084      	sub	sp, #16
 800af98:	af00      	add	r7, sp, #0
 800af9a:	6078      	str	r0, [r7, #4]
 800af9c:	4608      	mov	r0, r1
 800af9e:	4611      	mov	r1, r2
 800afa0:	461a      	mov	r2, r3
 800afa2:	4603      	mov	r3, r0
 800afa4:	70fb      	strb	r3, [r7, #3]
 800afa6:	460b      	mov	r3, r1
 800afa8:	70bb      	strb	r3, [r7, #2]
 800afaa:	4613      	mov	r3, r2
 800afac:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800afae:	2300      	movs	r3, #0
 800afb0:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800afb2:	2300      	movs	r3, #0
 800afb4:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800afbc:	78bb      	ldrb	r3, [r7, #2]
 800afbe:	883a      	ldrh	r2, [r7, #0]
 800afc0:	78f9      	ldrb	r1, [r7, #3]
 800afc2:	f7f7 f83a 	bl	800203a <HAL_PCD_EP_Open>
 800afc6:	4603      	mov	r3, r0
 800afc8:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800afca:	7bbb      	ldrb	r3, [r7, #14]
 800afcc:	2b03      	cmp	r3, #3
 800afce:	d817      	bhi.n	800b000 <USBD_LL_OpenEP+0x6c>
 800afd0:	a201      	add	r2, pc, #4	; (adr r2, 800afd8 <USBD_LL_OpenEP+0x44>)
 800afd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afd6:	bf00      	nop
 800afd8:	0800afe9 	.word	0x0800afe9
 800afdc:	0800afef 	.word	0x0800afef
 800afe0:	0800aff5 	.word	0x0800aff5
 800afe4:	0800affb 	.word	0x0800affb
    case HAL_OK :
      usb_status = USBD_OK;
 800afe8:	2300      	movs	r3, #0
 800afea:	73fb      	strb	r3, [r7, #15]
    break;
 800afec:	e00b      	b.n	800b006 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800afee:	2303      	movs	r3, #3
 800aff0:	73fb      	strb	r3, [r7, #15]
    break;
 800aff2:	e008      	b.n	800b006 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800aff4:	2301      	movs	r3, #1
 800aff6:	73fb      	strb	r3, [r7, #15]
    break;
 800aff8:	e005      	b.n	800b006 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800affa:	2303      	movs	r3, #3
 800affc:	73fb      	strb	r3, [r7, #15]
    break;
 800affe:	e002      	b.n	800b006 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800b000:	2303      	movs	r3, #3
 800b002:	73fb      	strb	r3, [r7, #15]
    break;
 800b004:	bf00      	nop
  }
  return usb_status;
 800b006:	7bfb      	ldrb	r3, [r7, #15]
}
 800b008:	4618      	mov	r0, r3
 800b00a:	3710      	adds	r7, #16
 800b00c:	46bd      	mov	sp, r7
 800b00e:	bd80      	pop	{r7, pc}

0800b010 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b010:	b580      	push	{r7, lr}
 800b012:	b084      	sub	sp, #16
 800b014:	af00      	add	r7, sp, #0
 800b016:	6078      	str	r0, [r7, #4]
 800b018:	460b      	mov	r3, r1
 800b01a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b01c:	2300      	movs	r3, #0
 800b01e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b020:	2300      	movs	r3, #0
 800b022:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b02a:	78fa      	ldrb	r2, [r7, #3]
 800b02c:	4611      	mov	r1, r2
 800b02e:	4618      	mov	r0, r3
 800b030:	f7f7 f86b 	bl	800210a <HAL_PCD_EP_Close>
 800b034:	4603      	mov	r3, r0
 800b036:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800b038:	7bbb      	ldrb	r3, [r7, #14]
 800b03a:	2b03      	cmp	r3, #3
 800b03c:	d816      	bhi.n	800b06c <USBD_LL_CloseEP+0x5c>
 800b03e:	a201      	add	r2, pc, #4	; (adr r2, 800b044 <USBD_LL_CloseEP+0x34>)
 800b040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b044:	0800b055 	.word	0x0800b055
 800b048:	0800b05b 	.word	0x0800b05b
 800b04c:	0800b061 	.word	0x0800b061
 800b050:	0800b067 	.word	0x0800b067
    case HAL_OK :
      usb_status = USBD_OK;
 800b054:	2300      	movs	r3, #0
 800b056:	73fb      	strb	r3, [r7, #15]
    break;
 800b058:	e00b      	b.n	800b072 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b05a:	2303      	movs	r3, #3
 800b05c:	73fb      	strb	r3, [r7, #15]
    break;
 800b05e:	e008      	b.n	800b072 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b060:	2301      	movs	r3, #1
 800b062:	73fb      	strb	r3, [r7, #15]
    break;
 800b064:	e005      	b.n	800b072 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b066:	2303      	movs	r3, #3
 800b068:	73fb      	strb	r3, [r7, #15]
    break;
 800b06a:	e002      	b.n	800b072 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800b06c:	2303      	movs	r3, #3
 800b06e:	73fb      	strb	r3, [r7, #15]
    break;
 800b070:	bf00      	nop
  }
  return usb_status;
 800b072:	7bfb      	ldrb	r3, [r7, #15]
}
 800b074:	4618      	mov	r0, r3
 800b076:	3710      	adds	r7, #16
 800b078:	46bd      	mov	sp, r7
 800b07a:	bd80      	pop	{r7, pc}

0800b07c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b07c:	b580      	push	{r7, lr}
 800b07e:	b084      	sub	sp, #16
 800b080:	af00      	add	r7, sp, #0
 800b082:	6078      	str	r0, [r7, #4]
 800b084:	460b      	mov	r3, r1
 800b086:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b088:	2300      	movs	r3, #0
 800b08a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b08c:	2300      	movs	r3, #0
 800b08e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b096:	78fa      	ldrb	r2, [r7, #3]
 800b098:	4611      	mov	r1, r2
 800b09a:	4618      	mov	r0, r3
 800b09c:	f7f7 f8e2 	bl	8002264 <HAL_PCD_EP_SetStall>
 800b0a0:	4603      	mov	r3, r0
 800b0a2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800b0a4:	7bbb      	ldrb	r3, [r7, #14]
 800b0a6:	2b03      	cmp	r3, #3
 800b0a8:	d816      	bhi.n	800b0d8 <USBD_LL_StallEP+0x5c>
 800b0aa:	a201      	add	r2, pc, #4	; (adr r2, 800b0b0 <USBD_LL_StallEP+0x34>)
 800b0ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0b0:	0800b0c1 	.word	0x0800b0c1
 800b0b4:	0800b0c7 	.word	0x0800b0c7
 800b0b8:	0800b0cd 	.word	0x0800b0cd
 800b0bc:	0800b0d3 	.word	0x0800b0d3
    case HAL_OK :
      usb_status = USBD_OK;
 800b0c0:	2300      	movs	r3, #0
 800b0c2:	73fb      	strb	r3, [r7, #15]
    break;
 800b0c4:	e00b      	b.n	800b0de <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b0c6:	2303      	movs	r3, #3
 800b0c8:	73fb      	strb	r3, [r7, #15]
    break;
 800b0ca:	e008      	b.n	800b0de <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b0cc:	2301      	movs	r3, #1
 800b0ce:	73fb      	strb	r3, [r7, #15]
    break;
 800b0d0:	e005      	b.n	800b0de <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b0d2:	2303      	movs	r3, #3
 800b0d4:	73fb      	strb	r3, [r7, #15]
    break;
 800b0d6:	e002      	b.n	800b0de <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800b0d8:	2303      	movs	r3, #3
 800b0da:	73fb      	strb	r3, [r7, #15]
    break;
 800b0dc:	bf00      	nop
  }
  return usb_status;
 800b0de:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0e0:	4618      	mov	r0, r3
 800b0e2:	3710      	adds	r7, #16
 800b0e4:	46bd      	mov	sp, r7
 800b0e6:	bd80      	pop	{r7, pc}

0800b0e8 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b0e8:	b580      	push	{r7, lr}
 800b0ea:	b084      	sub	sp, #16
 800b0ec:	af00      	add	r7, sp, #0
 800b0ee:	6078      	str	r0, [r7, #4]
 800b0f0:	460b      	mov	r3, r1
 800b0f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b0f4:	2300      	movs	r3, #0
 800b0f6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b0f8:	2300      	movs	r3, #0
 800b0fa:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b102:	78fa      	ldrb	r2, [r7, #3]
 800b104:	4611      	mov	r1, r2
 800b106:	4618      	mov	r0, r3
 800b108:	f7f7 f90e 	bl	8002328 <HAL_PCD_EP_ClrStall>
 800b10c:	4603      	mov	r3, r0
 800b10e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800b110:	7bbb      	ldrb	r3, [r7, #14]
 800b112:	2b03      	cmp	r3, #3
 800b114:	d816      	bhi.n	800b144 <USBD_LL_ClearStallEP+0x5c>
 800b116:	a201      	add	r2, pc, #4	; (adr r2, 800b11c <USBD_LL_ClearStallEP+0x34>)
 800b118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b11c:	0800b12d 	.word	0x0800b12d
 800b120:	0800b133 	.word	0x0800b133
 800b124:	0800b139 	.word	0x0800b139
 800b128:	0800b13f 	.word	0x0800b13f
    case HAL_OK :
      usb_status = USBD_OK;
 800b12c:	2300      	movs	r3, #0
 800b12e:	73fb      	strb	r3, [r7, #15]
    break;
 800b130:	e00b      	b.n	800b14a <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b132:	2303      	movs	r3, #3
 800b134:	73fb      	strb	r3, [r7, #15]
    break;
 800b136:	e008      	b.n	800b14a <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b138:	2301      	movs	r3, #1
 800b13a:	73fb      	strb	r3, [r7, #15]
    break;
 800b13c:	e005      	b.n	800b14a <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b13e:	2303      	movs	r3, #3
 800b140:	73fb      	strb	r3, [r7, #15]
    break;
 800b142:	e002      	b.n	800b14a <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800b144:	2303      	movs	r3, #3
 800b146:	73fb      	strb	r3, [r7, #15]
    break;
 800b148:	bf00      	nop
  }
  return usb_status;
 800b14a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b14c:	4618      	mov	r0, r3
 800b14e:	3710      	adds	r7, #16
 800b150:	46bd      	mov	sp, r7
 800b152:	bd80      	pop	{r7, pc}

0800b154 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b154:	b480      	push	{r7}
 800b156:	b085      	sub	sp, #20
 800b158:	af00      	add	r7, sp, #0
 800b15a:	6078      	str	r0, [r7, #4]
 800b15c:	460b      	mov	r3, r1
 800b15e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b166:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b168:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	da0b      	bge.n	800b188 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b170:	78fb      	ldrb	r3, [r7, #3]
 800b172:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b176:	68f9      	ldr	r1, [r7, #12]
 800b178:	4613      	mov	r3, r2
 800b17a:	00db      	lsls	r3, r3, #3
 800b17c:	4413      	add	r3, r2
 800b17e:	009b      	lsls	r3, r3, #2
 800b180:	440b      	add	r3, r1
 800b182:	333e      	adds	r3, #62	; 0x3e
 800b184:	781b      	ldrb	r3, [r3, #0]
 800b186:	e00b      	b.n	800b1a0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b188:	78fb      	ldrb	r3, [r7, #3]
 800b18a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b18e:	68f9      	ldr	r1, [r7, #12]
 800b190:	4613      	mov	r3, r2
 800b192:	00db      	lsls	r3, r3, #3
 800b194:	4413      	add	r3, r2
 800b196:	009b      	lsls	r3, r3, #2
 800b198:	440b      	add	r3, r1
 800b19a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800b19e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b1a0:	4618      	mov	r0, r3
 800b1a2:	3714      	adds	r7, #20
 800b1a4:	46bd      	mov	sp, r7
 800b1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1aa:	4770      	bx	lr

0800b1ac <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b1ac:	b580      	push	{r7, lr}
 800b1ae:	b084      	sub	sp, #16
 800b1b0:	af00      	add	r7, sp, #0
 800b1b2:	6078      	str	r0, [r7, #4]
 800b1b4:	460b      	mov	r3, r1
 800b1b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b1b8:	2300      	movs	r3, #0
 800b1ba:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b1bc:	2300      	movs	r3, #0
 800b1be:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b1c6:	78fa      	ldrb	r2, [r7, #3]
 800b1c8:	4611      	mov	r1, r2
 800b1ca:	4618      	mov	r0, r3
 800b1cc:	f7f6 ff10 	bl	8001ff0 <HAL_PCD_SetAddress>
 800b1d0:	4603      	mov	r3, r0
 800b1d2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800b1d4:	7bbb      	ldrb	r3, [r7, #14]
 800b1d6:	2b03      	cmp	r3, #3
 800b1d8:	d816      	bhi.n	800b208 <USBD_LL_SetUSBAddress+0x5c>
 800b1da:	a201      	add	r2, pc, #4	; (adr r2, 800b1e0 <USBD_LL_SetUSBAddress+0x34>)
 800b1dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1e0:	0800b1f1 	.word	0x0800b1f1
 800b1e4:	0800b1f7 	.word	0x0800b1f7
 800b1e8:	0800b1fd 	.word	0x0800b1fd
 800b1ec:	0800b203 	.word	0x0800b203
    case HAL_OK :
      usb_status = USBD_OK;
 800b1f0:	2300      	movs	r3, #0
 800b1f2:	73fb      	strb	r3, [r7, #15]
    break;
 800b1f4:	e00b      	b.n	800b20e <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b1f6:	2303      	movs	r3, #3
 800b1f8:	73fb      	strb	r3, [r7, #15]
    break;
 800b1fa:	e008      	b.n	800b20e <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b1fc:	2301      	movs	r3, #1
 800b1fe:	73fb      	strb	r3, [r7, #15]
    break;
 800b200:	e005      	b.n	800b20e <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b202:	2303      	movs	r3, #3
 800b204:	73fb      	strb	r3, [r7, #15]
    break;
 800b206:	e002      	b.n	800b20e <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800b208:	2303      	movs	r3, #3
 800b20a:	73fb      	strb	r3, [r7, #15]
    break;
 800b20c:	bf00      	nop
  }
  return usb_status;
 800b20e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b210:	4618      	mov	r0, r3
 800b212:	3710      	adds	r7, #16
 800b214:	46bd      	mov	sp, r7
 800b216:	bd80      	pop	{r7, pc}

0800b218 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b218:	b580      	push	{r7, lr}
 800b21a:	b086      	sub	sp, #24
 800b21c:	af00      	add	r7, sp, #0
 800b21e:	60f8      	str	r0, [r7, #12]
 800b220:	607a      	str	r2, [r7, #4]
 800b222:	603b      	str	r3, [r7, #0]
 800b224:	460b      	mov	r3, r1
 800b226:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b228:	2300      	movs	r3, #0
 800b22a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b22c:	2300      	movs	r3, #0
 800b22e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b236:	7af9      	ldrb	r1, [r7, #11]
 800b238:	683b      	ldr	r3, [r7, #0]
 800b23a:	687a      	ldr	r2, [r7, #4]
 800b23c:	f7f6 ffe1 	bl	8002202 <HAL_PCD_EP_Transmit>
 800b240:	4603      	mov	r3, r0
 800b242:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800b244:	7dbb      	ldrb	r3, [r7, #22]
 800b246:	2b03      	cmp	r3, #3
 800b248:	d816      	bhi.n	800b278 <USBD_LL_Transmit+0x60>
 800b24a:	a201      	add	r2, pc, #4	; (adr r2, 800b250 <USBD_LL_Transmit+0x38>)
 800b24c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b250:	0800b261 	.word	0x0800b261
 800b254:	0800b267 	.word	0x0800b267
 800b258:	0800b26d 	.word	0x0800b26d
 800b25c:	0800b273 	.word	0x0800b273
    case HAL_OK :
      usb_status = USBD_OK;
 800b260:	2300      	movs	r3, #0
 800b262:	75fb      	strb	r3, [r7, #23]
    break;
 800b264:	e00b      	b.n	800b27e <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b266:	2303      	movs	r3, #3
 800b268:	75fb      	strb	r3, [r7, #23]
    break;
 800b26a:	e008      	b.n	800b27e <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b26c:	2301      	movs	r3, #1
 800b26e:	75fb      	strb	r3, [r7, #23]
    break;
 800b270:	e005      	b.n	800b27e <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b272:	2303      	movs	r3, #3
 800b274:	75fb      	strb	r3, [r7, #23]
    break;
 800b276:	e002      	b.n	800b27e <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800b278:	2303      	movs	r3, #3
 800b27a:	75fb      	strb	r3, [r7, #23]
    break;
 800b27c:	bf00      	nop
  }
  return usb_status;
 800b27e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b280:	4618      	mov	r0, r3
 800b282:	3718      	adds	r7, #24
 800b284:	46bd      	mov	sp, r7
 800b286:	bd80      	pop	{r7, pc}

0800b288 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b288:	b580      	push	{r7, lr}
 800b28a:	b086      	sub	sp, #24
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	60f8      	str	r0, [r7, #12]
 800b290:	607a      	str	r2, [r7, #4]
 800b292:	603b      	str	r3, [r7, #0]
 800b294:	460b      	mov	r3, r1
 800b296:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b298:	2300      	movs	r3, #0
 800b29a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b29c:	2300      	movs	r3, #0
 800b29e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b2a6:	7af9      	ldrb	r1, [r7, #11]
 800b2a8:	683b      	ldr	r3, [r7, #0]
 800b2aa:	687a      	ldr	r2, [r7, #4]
 800b2ac:	f7f6 ff77 	bl	800219e <HAL_PCD_EP_Receive>
 800b2b0:	4603      	mov	r3, r0
 800b2b2:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800b2b4:	7dbb      	ldrb	r3, [r7, #22]
 800b2b6:	2b03      	cmp	r3, #3
 800b2b8:	d816      	bhi.n	800b2e8 <USBD_LL_PrepareReceive+0x60>
 800b2ba:	a201      	add	r2, pc, #4	; (adr r2, 800b2c0 <USBD_LL_PrepareReceive+0x38>)
 800b2bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2c0:	0800b2d1 	.word	0x0800b2d1
 800b2c4:	0800b2d7 	.word	0x0800b2d7
 800b2c8:	0800b2dd 	.word	0x0800b2dd
 800b2cc:	0800b2e3 	.word	0x0800b2e3
    case HAL_OK :
      usb_status = USBD_OK;
 800b2d0:	2300      	movs	r3, #0
 800b2d2:	75fb      	strb	r3, [r7, #23]
    break;
 800b2d4:	e00b      	b.n	800b2ee <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b2d6:	2303      	movs	r3, #3
 800b2d8:	75fb      	strb	r3, [r7, #23]
    break;
 800b2da:	e008      	b.n	800b2ee <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b2dc:	2301      	movs	r3, #1
 800b2de:	75fb      	strb	r3, [r7, #23]
    break;
 800b2e0:	e005      	b.n	800b2ee <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b2e2:	2303      	movs	r3, #3
 800b2e4:	75fb      	strb	r3, [r7, #23]
    break;
 800b2e6:	e002      	b.n	800b2ee <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800b2e8:	2303      	movs	r3, #3
 800b2ea:	75fb      	strb	r3, [r7, #23]
    break;
 800b2ec:	bf00      	nop
  }
  return usb_status;
 800b2ee:	7dfb      	ldrb	r3, [r7, #23]
}
 800b2f0:	4618      	mov	r0, r3
 800b2f2:	3718      	adds	r7, #24
 800b2f4:	46bd      	mov	sp, r7
 800b2f6:	bd80      	pop	{r7, pc}

0800b2f8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800b2f8:	b580      	push	{r7, lr}
 800b2fa:	b082      	sub	sp, #8
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	6078      	str	r0, [r7, #4]
 800b300:	460b      	mov	r3, r1
 800b302:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800b304:	78fb      	ldrb	r3, [r7, #3]
 800b306:	2b00      	cmp	r3, #0
 800b308:	d002      	beq.n	800b310 <HAL_PCDEx_LPM_Callback+0x18>
 800b30a:	2b01      	cmp	r3, #1
 800b30c:	d01f      	beq.n	800b34e <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800b30e:	e03b      	b.n	800b388 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	6a1b      	ldr	r3, [r3, #32]
 800b314:	2b00      	cmp	r3, #0
 800b316:	d007      	beq.n	800b328 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800b318:	f000 f854 	bl	800b3c4 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b31c:	4b1c      	ldr	r3, [pc, #112]	; (800b390 <HAL_PCDEx_LPM_Callback+0x98>)
 800b31e:	691b      	ldr	r3, [r3, #16]
 800b320:	4a1b      	ldr	r2, [pc, #108]	; (800b390 <HAL_PCDEx_LPM_Callback+0x98>)
 800b322:	f023 0306 	bic.w	r3, r3, #6
 800b326:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	687a      	ldr	r2, [r7, #4]
 800b334:	6812      	ldr	r2, [r2, #0]
 800b336:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b33a:	f023 0301 	bic.w	r3, r3, #1
 800b33e:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b346:	4618      	mov	r0, r3
 800b348:	f7fb fd17 	bl	8006d7a <USBD_LL_Resume>
    break;
 800b34c:	e01c      	b.n	800b388 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	687a      	ldr	r2, [r7, #4]
 800b35a:	6812      	ldr	r2, [r2, #0]
 800b35c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b360:	f043 0301 	orr.w	r3, r3, #1
 800b364:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b36c:	4618      	mov	r0, r3
 800b36e:	f7fb fce8 	bl	8006d42 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	6a1b      	ldr	r3, [r3, #32]
 800b376:	2b00      	cmp	r3, #0
 800b378:	d005      	beq.n	800b386 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b37a:	4b05      	ldr	r3, [pc, #20]	; (800b390 <HAL_PCDEx_LPM_Callback+0x98>)
 800b37c:	691b      	ldr	r3, [r3, #16]
 800b37e:	4a04      	ldr	r2, [pc, #16]	; (800b390 <HAL_PCDEx_LPM_Callback+0x98>)
 800b380:	f043 0306 	orr.w	r3, r3, #6
 800b384:	6113      	str	r3, [r2, #16]
    break;
 800b386:	bf00      	nop
}
 800b388:	bf00      	nop
 800b38a:	3708      	adds	r7, #8
 800b38c:	46bd      	mov	sp, r7
 800b38e:	bd80      	pop	{r7, pc}
 800b390:	e000ed00 	.word	0xe000ed00

0800b394 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b394:	b480      	push	{r7}
 800b396:	b083      	sub	sp, #12
 800b398:	af00      	add	r7, sp, #0
 800b39a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b39c:	4b03      	ldr	r3, [pc, #12]	; (800b3ac <USBD_static_malloc+0x18>)
}
 800b39e:	4618      	mov	r0, r3
 800b3a0:	370c      	adds	r7, #12
 800b3a2:	46bd      	mov	sp, r7
 800b3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a8:	4770      	bx	lr
 800b3aa:	bf00      	nop
 800b3ac:	20002520 	.word	0x20002520

0800b3b0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b3b0:	b480      	push	{r7}
 800b3b2:	b083      	sub	sp, #12
 800b3b4:	af00      	add	r7, sp, #0
 800b3b6:	6078      	str	r0, [r7, #4]

}
 800b3b8:	bf00      	nop
 800b3ba:	370c      	adds	r7, #12
 800b3bc:	46bd      	mov	sp, r7
 800b3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c2:	4770      	bx	lr

0800b3c4 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800b3c4:	b580      	push	{r7, lr}
 800b3c6:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800b3c8:	f7f5 f8be 	bl	8000548 <SystemClock_Config>
}
 800b3cc:	bf00      	nop
 800b3ce:	bd80      	pop	{r7, pc}

0800b3d0 <memset>:
 800b3d0:	4402      	add	r2, r0
 800b3d2:	4603      	mov	r3, r0
 800b3d4:	4293      	cmp	r3, r2
 800b3d6:	d100      	bne.n	800b3da <memset+0xa>
 800b3d8:	4770      	bx	lr
 800b3da:	f803 1b01 	strb.w	r1, [r3], #1
 800b3de:	e7f9      	b.n	800b3d4 <memset+0x4>

0800b3e0 <__libc_init_array>:
 800b3e0:	b570      	push	{r4, r5, r6, lr}
 800b3e2:	4d0d      	ldr	r5, [pc, #52]	; (800b418 <__libc_init_array+0x38>)
 800b3e4:	4c0d      	ldr	r4, [pc, #52]	; (800b41c <__libc_init_array+0x3c>)
 800b3e6:	1b64      	subs	r4, r4, r5
 800b3e8:	10a4      	asrs	r4, r4, #2
 800b3ea:	2600      	movs	r6, #0
 800b3ec:	42a6      	cmp	r6, r4
 800b3ee:	d109      	bne.n	800b404 <__libc_init_array+0x24>
 800b3f0:	4d0b      	ldr	r5, [pc, #44]	; (800b420 <__libc_init_array+0x40>)
 800b3f2:	4c0c      	ldr	r4, [pc, #48]	; (800b424 <__libc_init_array+0x44>)
 800b3f4:	f000 f826 	bl	800b444 <_init>
 800b3f8:	1b64      	subs	r4, r4, r5
 800b3fa:	10a4      	asrs	r4, r4, #2
 800b3fc:	2600      	movs	r6, #0
 800b3fe:	42a6      	cmp	r6, r4
 800b400:	d105      	bne.n	800b40e <__libc_init_array+0x2e>
 800b402:	bd70      	pop	{r4, r5, r6, pc}
 800b404:	f855 3b04 	ldr.w	r3, [r5], #4
 800b408:	4798      	blx	r3
 800b40a:	3601      	adds	r6, #1
 800b40c:	e7ee      	b.n	800b3ec <__libc_init_array+0xc>
 800b40e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b412:	4798      	blx	r3
 800b414:	3601      	adds	r6, #1
 800b416:	e7f2      	b.n	800b3fe <__libc_init_array+0x1e>
 800b418:	0800b570 	.word	0x0800b570
 800b41c:	0800b570 	.word	0x0800b570
 800b420:	0800b570 	.word	0x0800b570
 800b424:	0800b574 	.word	0x0800b574

0800b428 <memcpy>:
 800b428:	440a      	add	r2, r1
 800b42a:	4291      	cmp	r1, r2
 800b42c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800b430:	d100      	bne.n	800b434 <memcpy+0xc>
 800b432:	4770      	bx	lr
 800b434:	b510      	push	{r4, lr}
 800b436:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b43a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b43e:	4291      	cmp	r1, r2
 800b440:	d1f9      	bne.n	800b436 <memcpy+0xe>
 800b442:	bd10      	pop	{r4, pc}

0800b444 <_init>:
 800b444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b446:	bf00      	nop
 800b448:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b44a:	bc08      	pop	{r3}
 800b44c:	469e      	mov	lr, r3
 800b44e:	4770      	bx	lr

0800b450 <_fini>:
 800b450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b452:	bf00      	nop
 800b454:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b456:	bc08      	pop	{r3}
 800b458:	469e      	mov	lr, r3
 800b45a:	4770      	bx	lr
