
gamemancontroller_full.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b6ec  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000010c  0800b89c  0800b89c  0001b89c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b9a8  0800b9a8  00020124  2**0
                  CONTENTS
  4 .ARM          00000008  0800b9a8  0800b9a8  0001b9a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b9b0  0800b9b0  00020124  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b9b0  0800b9b0  0001b9b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b9b4  0800b9b4  0001b9b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000124  20000000  0800b9b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000024e8  20000124  0800badc  00020124  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000260c  0800badc  0002260c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020124  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020154  2**0
                  CONTENTS, READONLY
 13 .debug_info   00023980  00000000  00000000  00020197  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004f1c  00000000  00000000  00043b17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001e20  00000000  00000000  00048a38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001737  00000000  00000000  0004a858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002d5ab  00000000  00000000  0004bf8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00021f27  00000000  00000000  0007953a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010f0db  00000000  00000000  0009b461  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007f08  00000000  00000000  001aa53c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  001b2444  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000124 	.word	0x20000124
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800b884 	.word	0x0800b884

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000128 	.word	0x20000128
 80001ec:	0800b884 	.word	0x0800b884

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000200:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000204:	f000 b970 	b.w	80004e8 <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9e08      	ldr	r6, [sp, #32]
 8000226:	460d      	mov	r5, r1
 8000228:	4604      	mov	r4, r0
 800022a:	460f      	mov	r7, r1
 800022c:	2b00      	cmp	r3, #0
 800022e:	d14a      	bne.n	80002c6 <__udivmoddi4+0xa6>
 8000230:	428a      	cmp	r2, r1
 8000232:	4694      	mov	ip, r2
 8000234:	d965      	bls.n	8000302 <__udivmoddi4+0xe2>
 8000236:	fab2 f382 	clz	r3, r2
 800023a:	b143      	cbz	r3, 800024e <__udivmoddi4+0x2e>
 800023c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000240:	f1c3 0220 	rsb	r2, r3, #32
 8000244:	409f      	lsls	r7, r3
 8000246:	fa20 f202 	lsr.w	r2, r0, r2
 800024a:	4317      	orrs	r7, r2
 800024c:	409c      	lsls	r4, r3
 800024e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000252:	fa1f f58c 	uxth.w	r5, ip
 8000256:	fbb7 f1fe 	udiv	r1, r7, lr
 800025a:	0c22      	lsrs	r2, r4, #16
 800025c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000260:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000264:	fb01 f005 	mul.w	r0, r1, r5
 8000268:	4290      	cmp	r0, r2
 800026a:	d90a      	bls.n	8000282 <__udivmoddi4+0x62>
 800026c:	eb1c 0202 	adds.w	r2, ip, r2
 8000270:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000274:	f080 811c 	bcs.w	80004b0 <__udivmoddi4+0x290>
 8000278:	4290      	cmp	r0, r2
 800027a:	f240 8119 	bls.w	80004b0 <__udivmoddi4+0x290>
 800027e:	3902      	subs	r1, #2
 8000280:	4462      	add	r2, ip
 8000282:	1a12      	subs	r2, r2, r0
 8000284:	b2a4      	uxth	r4, r4
 8000286:	fbb2 f0fe 	udiv	r0, r2, lr
 800028a:	fb0e 2210 	mls	r2, lr, r0, r2
 800028e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000292:	fb00 f505 	mul.w	r5, r0, r5
 8000296:	42a5      	cmp	r5, r4
 8000298:	d90a      	bls.n	80002b0 <__udivmoddi4+0x90>
 800029a:	eb1c 0404 	adds.w	r4, ip, r4
 800029e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002a2:	f080 8107 	bcs.w	80004b4 <__udivmoddi4+0x294>
 80002a6:	42a5      	cmp	r5, r4
 80002a8:	f240 8104 	bls.w	80004b4 <__udivmoddi4+0x294>
 80002ac:	4464      	add	r4, ip
 80002ae:	3802      	subs	r0, #2
 80002b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002b4:	1b64      	subs	r4, r4, r5
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11e      	cbz	r6, 80002c2 <__udivmoddi4+0xa2>
 80002ba:	40dc      	lsrs	r4, r3
 80002bc:	2300      	movs	r3, #0
 80002be:	e9c6 4300 	strd	r4, r3, [r6]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d908      	bls.n	80002dc <__udivmoddi4+0xbc>
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	f000 80ed 	beq.w	80004aa <__udivmoddi4+0x28a>
 80002d0:	2100      	movs	r1, #0
 80002d2:	e9c6 0500 	strd	r0, r5, [r6]
 80002d6:	4608      	mov	r0, r1
 80002d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002dc:	fab3 f183 	clz	r1, r3
 80002e0:	2900      	cmp	r1, #0
 80002e2:	d149      	bne.n	8000378 <__udivmoddi4+0x158>
 80002e4:	42ab      	cmp	r3, r5
 80002e6:	d302      	bcc.n	80002ee <__udivmoddi4+0xce>
 80002e8:	4282      	cmp	r2, r0
 80002ea:	f200 80f8 	bhi.w	80004de <__udivmoddi4+0x2be>
 80002ee:	1a84      	subs	r4, r0, r2
 80002f0:	eb65 0203 	sbc.w	r2, r5, r3
 80002f4:	2001      	movs	r0, #1
 80002f6:	4617      	mov	r7, r2
 80002f8:	2e00      	cmp	r6, #0
 80002fa:	d0e2      	beq.n	80002c2 <__udivmoddi4+0xa2>
 80002fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000300:	e7df      	b.n	80002c2 <__udivmoddi4+0xa2>
 8000302:	b902      	cbnz	r2, 8000306 <__udivmoddi4+0xe6>
 8000304:	deff      	udf	#255	; 0xff
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	2b00      	cmp	r3, #0
 800030c:	f040 8090 	bne.w	8000430 <__udivmoddi4+0x210>
 8000310:	1a8a      	subs	r2, r1, r2
 8000312:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000316:	fa1f fe8c 	uxth.w	lr, ip
 800031a:	2101      	movs	r1, #1
 800031c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000320:	fb07 2015 	mls	r0, r7, r5, r2
 8000324:	0c22      	lsrs	r2, r4, #16
 8000326:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800032a:	fb0e f005 	mul.w	r0, lr, r5
 800032e:	4290      	cmp	r0, r2
 8000330:	d908      	bls.n	8000344 <__udivmoddi4+0x124>
 8000332:	eb1c 0202 	adds.w	r2, ip, r2
 8000336:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x122>
 800033c:	4290      	cmp	r0, r2
 800033e:	f200 80cb 	bhi.w	80004d8 <__udivmoddi4+0x2b8>
 8000342:	4645      	mov	r5, r8
 8000344:	1a12      	subs	r2, r2, r0
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb2 f0f7 	udiv	r0, r2, r7
 800034c:	fb07 2210 	mls	r2, r7, r0, r2
 8000350:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000354:	fb0e fe00 	mul.w	lr, lr, r0
 8000358:	45a6      	cmp	lr, r4
 800035a:	d908      	bls.n	800036e <__udivmoddi4+0x14e>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000364:	d202      	bcs.n	800036c <__udivmoddi4+0x14c>
 8000366:	45a6      	cmp	lr, r4
 8000368:	f200 80bb 	bhi.w	80004e2 <__udivmoddi4+0x2c2>
 800036c:	4610      	mov	r0, r2
 800036e:	eba4 040e 	sub.w	r4, r4, lr
 8000372:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000376:	e79f      	b.n	80002b8 <__udivmoddi4+0x98>
 8000378:	f1c1 0720 	rsb	r7, r1, #32
 800037c:	408b      	lsls	r3, r1
 800037e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000382:	ea4c 0c03 	orr.w	ip, ip, r3
 8000386:	fa05 f401 	lsl.w	r4, r5, r1
 800038a:	fa20 f307 	lsr.w	r3, r0, r7
 800038e:	40fd      	lsrs	r5, r7
 8000390:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000394:	4323      	orrs	r3, r4
 8000396:	fbb5 f8f9 	udiv	r8, r5, r9
 800039a:	fa1f fe8c 	uxth.w	lr, ip
 800039e:	fb09 5518 	mls	r5, r9, r8, r5
 80003a2:	0c1c      	lsrs	r4, r3, #16
 80003a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003a8:	fb08 f50e 	mul.w	r5, r8, lr
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	fa02 f201 	lsl.w	r2, r2, r1
 80003b2:	fa00 f001 	lsl.w	r0, r0, r1
 80003b6:	d90b      	bls.n	80003d0 <__udivmoddi4+0x1b0>
 80003b8:	eb1c 0404 	adds.w	r4, ip, r4
 80003bc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003c0:	f080 8088 	bcs.w	80004d4 <__udivmoddi4+0x2b4>
 80003c4:	42a5      	cmp	r5, r4
 80003c6:	f240 8085 	bls.w	80004d4 <__udivmoddi4+0x2b4>
 80003ca:	f1a8 0802 	sub.w	r8, r8, #2
 80003ce:	4464      	add	r4, ip
 80003d0:	1b64      	subs	r4, r4, r5
 80003d2:	b29d      	uxth	r5, r3
 80003d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003d8:	fb09 4413 	mls	r4, r9, r3, r4
 80003dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003e4:	45a6      	cmp	lr, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x1da>
 80003e8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ec:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003f0:	d26c      	bcs.n	80004cc <__udivmoddi4+0x2ac>
 80003f2:	45a6      	cmp	lr, r4
 80003f4:	d96a      	bls.n	80004cc <__udivmoddi4+0x2ac>
 80003f6:	3b02      	subs	r3, #2
 80003f8:	4464      	add	r4, ip
 80003fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000402:	eba4 040e 	sub.w	r4, r4, lr
 8000406:	42ac      	cmp	r4, r5
 8000408:	46c8      	mov	r8, r9
 800040a:	46ae      	mov	lr, r5
 800040c:	d356      	bcc.n	80004bc <__udivmoddi4+0x29c>
 800040e:	d053      	beq.n	80004b8 <__udivmoddi4+0x298>
 8000410:	b156      	cbz	r6, 8000428 <__udivmoddi4+0x208>
 8000412:	ebb0 0208 	subs.w	r2, r0, r8
 8000416:	eb64 040e 	sbc.w	r4, r4, lr
 800041a:	fa04 f707 	lsl.w	r7, r4, r7
 800041e:	40ca      	lsrs	r2, r1
 8000420:	40cc      	lsrs	r4, r1
 8000422:	4317      	orrs	r7, r2
 8000424:	e9c6 7400 	strd	r7, r4, [r6]
 8000428:	4618      	mov	r0, r3
 800042a:	2100      	movs	r1, #0
 800042c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000430:	f1c3 0120 	rsb	r1, r3, #32
 8000434:	fa02 fc03 	lsl.w	ip, r2, r3
 8000438:	fa20 f201 	lsr.w	r2, r0, r1
 800043c:	fa25 f101 	lsr.w	r1, r5, r1
 8000440:	409d      	lsls	r5, r3
 8000442:	432a      	orrs	r2, r5
 8000444:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000450:	fb07 1510 	mls	r5, r7, r0, r1
 8000454:	0c11      	lsrs	r1, r2, #16
 8000456:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800045a:	fb00 f50e 	mul.w	r5, r0, lr
 800045e:	428d      	cmp	r5, r1
 8000460:	fa04 f403 	lsl.w	r4, r4, r3
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x258>
 8000466:	eb1c 0101 	adds.w	r1, ip, r1
 800046a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800046e:	d22f      	bcs.n	80004d0 <__udivmoddi4+0x2b0>
 8000470:	428d      	cmp	r5, r1
 8000472:	d92d      	bls.n	80004d0 <__udivmoddi4+0x2b0>
 8000474:	3802      	subs	r0, #2
 8000476:	4461      	add	r1, ip
 8000478:	1b49      	subs	r1, r1, r5
 800047a:	b292      	uxth	r2, r2
 800047c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000480:	fb07 1115 	mls	r1, r7, r5, r1
 8000484:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000488:	fb05 f10e 	mul.w	r1, r5, lr
 800048c:	4291      	cmp	r1, r2
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x282>
 8000490:	eb1c 0202 	adds.w	r2, ip, r2
 8000494:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000498:	d216      	bcs.n	80004c8 <__udivmoddi4+0x2a8>
 800049a:	4291      	cmp	r1, r2
 800049c:	d914      	bls.n	80004c8 <__udivmoddi4+0x2a8>
 800049e:	3d02      	subs	r5, #2
 80004a0:	4462      	add	r2, ip
 80004a2:	1a52      	subs	r2, r2, r1
 80004a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004a8:	e738      	b.n	800031c <__udivmoddi4+0xfc>
 80004aa:	4631      	mov	r1, r6
 80004ac:	4630      	mov	r0, r6
 80004ae:	e708      	b.n	80002c2 <__udivmoddi4+0xa2>
 80004b0:	4639      	mov	r1, r7
 80004b2:	e6e6      	b.n	8000282 <__udivmoddi4+0x62>
 80004b4:	4610      	mov	r0, r2
 80004b6:	e6fb      	b.n	80002b0 <__udivmoddi4+0x90>
 80004b8:	4548      	cmp	r0, r9
 80004ba:	d2a9      	bcs.n	8000410 <__udivmoddi4+0x1f0>
 80004bc:	ebb9 0802 	subs.w	r8, r9, r2
 80004c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004c4:	3b01      	subs	r3, #1
 80004c6:	e7a3      	b.n	8000410 <__udivmoddi4+0x1f0>
 80004c8:	4645      	mov	r5, r8
 80004ca:	e7ea      	b.n	80004a2 <__udivmoddi4+0x282>
 80004cc:	462b      	mov	r3, r5
 80004ce:	e794      	b.n	80003fa <__udivmoddi4+0x1da>
 80004d0:	4640      	mov	r0, r8
 80004d2:	e7d1      	b.n	8000478 <__udivmoddi4+0x258>
 80004d4:	46d0      	mov	r8, sl
 80004d6:	e77b      	b.n	80003d0 <__udivmoddi4+0x1b0>
 80004d8:	3d02      	subs	r5, #2
 80004da:	4462      	add	r2, ip
 80004dc:	e732      	b.n	8000344 <__udivmoddi4+0x124>
 80004de:	4608      	mov	r0, r1
 80004e0:	e70a      	b.n	80002f8 <__udivmoddi4+0xd8>
 80004e2:	4464      	add	r4, ip
 80004e4:	3802      	subs	r0, #2
 80004e6:	e742      	b.n	800036e <__udivmoddi4+0x14e>

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <getKey>:

	return -1; // stub or error lol
}

int getKey(capkey_t *key,TIM_HandleTypeDef *htim)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b086      	sub	sp, #24
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
 80004f4:	6039      	str	r1, [r7, #0]
	const uint32_t timeOut = 4000;
 80004f6:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 80004fa:	613b      	str	r3, [r7, #16]
	// start, stop, and delta time
	uint32_t startTime = 0;
 80004fc:	2300      	movs	r3, #0
 80004fe:	60fb      	str	r3, [r7, #12]
	uint32_t stopTime = 0;
 8000500:	2300      	movs	r3, #0
 8000502:	60bb      	str	r3, [r7, #8]
	uint32_t deltaTime = 0;
 8000504:	2300      	movs	r3, #0
 8000506:	617b      	str	r3, [r7, #20]

	// set the driver pin to high and do the thing
	startTime = __HAL_TIM_GET_COUNTER(htim);
 8000508:	683b      	ldr	r3, [r7, #0]
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800050e:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin(driverpin_GPIO_Port,driverpin_Pin,1);
 8000510:	2201      	movs	r2, #1
 8000512:	2108      	movs	r1, #8
 8000514:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000518:	f001 f8f6 	bl	8001708 <HAL_GPIO_WritePin>

	// after we set the pin to high, or we get a time out, which ever comes first
	while(HAL_GPIO_ReadPin(key->gpioport,key->gpiopin) == 0)
 800051c:	e00c      	b.n	8000538 <getKey+0x4c>
	{
		deltaTime = __HAL_TIM_GET_COUNTER(htim) - startTime;
 800051e:	683b      	ldr	r3, [r7, #0]
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000524:	68fb      	ldr	r3, [r7, #12]
 8000526:	1ad3      	subs	r3, r2, r3
 8000528:	617b      	str	r3, [r7, #20]
		if(deltaTime > timeOut)
 800052a:	697a      	ldr	r2, [r7, #20]
 800052c:	693b      	ldr	r3, [r7, #16]
 800052e:	429a      	cmp	r2, r3
 8000530:	d902      	bls.n	8000538 <getKey+0x4c>
		{
			deltaTime = timeOut; // just make the delta time the timeout time
 8000532:	693b      	ldr	r3, [r7, #16]
 8000534:	617b      	str	r3, [r7, #20]
			break;
 8000536:	e00a      	b.n	800054e <getKey+0x62>
	while(HAL_GPIO_ReadPin(key->gpioport,key->gpiopin) == 0)
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	685a      	ldr	r2, [r3, #4]
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	891b      	ldrh	r3, [r3, #8]
 8000540:	4619      	mov	r1, r3
 8000542:	4610      	mov	r0, r2
 8000544:	f001 f8c8 	bl	80016d8 <HAL_GPIO_ReadPin>
 8000548:	4603      	mov	r3, r0
 800054a:	2b00      	cmp	r3, #0
 800054c:	d0e7      	beq.n	800051e <getKey+0x32>
		}
	}

	// return the data
	HAL_GPIO_WritePin(driverpin_GPIO_Port,driverpin_Pin,0);
 800054e:	2200      	movs	r2, #0
 8000550:	2108      	movs	r1, #8
 8000552:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000556:	f001 f8d7 	bl	8001708 <HAL_GPIO_WritePin>
	return deltaTime;
 800055a:	697b      	ldr	r3, [r7, #20]
//		}
//	}

//	HAL_GPIO_WritePin(key->gpioport,key->gpiopin,0);
	return deltaTime;
}
 800055c:	4618      	mov	r0, r3
 800055e:	3718      	adds	r7, #24
 8000560:	46bd      	mov	sp, r7
 8000562:	bd80      	pop	{r7, pc}

08000564 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000568:	f000 fd79 	bl	800105e <HAL_Init>

  /* USER CODE BEGIN Init */
  buttonA.pinIndex = 0;
 800056c:	4b66      	ldr	r3, [pc, #408]	; (8000708 <main+0x1a4>)
 800056e:	2200      	movs	r2, #0
 8000570:	709a      	strb	r2, [r3, #2]
  //buttonA.pinName = "btnA";
  buttonA.gpioport = btnA_GPIO_Port;
 8000572:	4b65      	ldr	r3, [pc, #404]	; (8000708 <main+0x1a4>)
 8000574:	4a65      	ldr	r2, [pc, #404]	; (800070c <main+0x1a8>)
 8000576:	605a      	str	r2, [r3, #4]
  buttonA.gpiopin = btnA_Pin;
 8000578:	4b63      	ldr	r3, [pc, #396]	; (8000708 <main+0x1a4>)
 800057a:	2201      	movs	r2, #1
 800057c:	811a      	strh	r2, [r3, #8]
  buttonA.triggerTime = 3000;
 800057e:	4b62      	ldr	r3, [pc, #392]	; (8000708 <main+0x1a4>)
 8000580:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000584:	815a      	strh	r2, [r3, #10]
  buttonA.keyCode = 0x04;
 8000586:	4b60      	ldr	r3, [pc, #384]	; (8000708 <main+0x1a4>)
 8000588:	2204      	movs	r2, #4
 800058a:	741a      	strb	r2, [r3, #16]

  // B button

  buttonB.pinIndex = 1;
 800058c:	4b60      	ldr	r3, [pc, #384]	; (8000710 <main+0x1ac>)
 800058e:	2201      	movs	r2, #1
 8000590:	709a      	strb	r2, [r3, #2]
  buttonB.gpioport = btnB_GPIO_Port;
 8000592:	4b5f      	ldr	r3, [pc, #380]	; (8000710 <main+0x1ac>)
 8000594:	4a5d      	ldr	r2, [pc, #372]	; (800070c <main+0x1a8>)
 8000596:	605a      	str	r2, [r3, #4]
  buttonB.gpiopin = btnB_Pin;
 8000598:	4b5d      	ldr	r3, [pc, #372]	; (8000710 <main+0x1ac>)
 800059a:	2208      	movs	r2, #8
 800059c:	811a      	strh	r2, [r3, #8]
  buttonB.triggerTime = 3000;
 800059e:	4b5c      	ldr	r3, [pc, #368]	; (8000710 <main+0x1ac>)
 80005a0:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80005a4:	815a      	strh	r2, [r3, #10]
  buttonB.keyCode = 0x05;
 80005a6:	4b5a      	ldr	r3, [pc, #360]	; (8000710 <main+0x1ac>)
 80005a8:	2205      	movs	r2, #5
 80005aa:	741a      	strb	r2, [r3, #16]

  // X button

  buttonX.pinIndex = 2;
 80005ac:	4b59      	ldr	r3, [pc, #356]	; (8000714 <main+0x1b0>)
 80005ae:	2202      	movs	r2, #2
 80005b0:	709a      	strb	r2, [r3, #2]
  buttonX.gpioport = btnX_GPIO_Port;
 80005b2:	4b58      	ldr	r3, [pc, #352]	; (8000714 <main+0x1b0>)
 80005b4:	4a55      	ldr	r2, [pc, #340]	; (800070c <main+0x1a8>)
 80005b6:	605a      	str	r2, [r3, #4]
  buttonX.gpiopin = btnX_Pin;
 80005b8:	4b56      	ldr	r3, [pc, #344]	; (8000714 <main+0x1b0>)
 80005ba:	2202      	movs	r2, #2
 80005bc:	811a      	strh	r2, [r3, #8]
  buttonX.triggerTime = 3000;
 80005be:	4b55      	ldr	r3, [pc, #340]	; (8000714 <main+0x1b0>)
 80005c0:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80005c4:	815a      	strh	r2, [r3, #10]
  buttonX.keyCode = 0x1B;
 80005c6:	4b53      	ldr	r3, [pc, #332]	; (8000714 <main+0x1b0>)
 80005c8:	221b      	movs	r2, #27
 80005ca:	741a      	strb	r2, [r3, #16]

  // Y button

  buttonY.pinIndex = 3;
 80005cc:	4b52      	ldr	r3, [pc, #328]	; (8000718 <main+0x1b4>)
 80005ce:	2203      	movs	r2, #3
 80005d0:	709a      	strb	r2, [r3, #2]
  buttonY.gpioport = btnY_GPIO_Port;
 80005d2:	4b51      	ldr	r3, [pc, #324]	; (8000718 <main+0x1b4>)
 80005d4:	4a4d      	ldr	r2, [pc, #308]	; (800070c <main+0x1a8>)
 80005d6:	605a      	str	r2, [r3, #4]
  buttonY.gpiopin = btnY_Pin;
 80005d8:	4b4f      	ldr	r3, [pc, #316]	; (8000718 <main+0x1b4>)
 80005da:	2210      	movs	r2, #16
 80005dc:	811a      	strh	r2, [r3, #8]
  buttonY.triggerTime = 3000;
 80005de:	4b4e      	ldr	r3, [pc, #312]	; (8000718 <main+0x1b4>)
 80005e0:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80005e4:	815a      	strh	r2, [r3, #10]
  buttonY.keyCode = 0x1C;
 80005e6:	4b4c      	ldr	r3, [pc, #304]	; (8000718 <main+0x1b4>)
 80005e8:	221c      	movs	r2, #28
 80005ea:	741a      	strb	r2, [r3, #16]

  // up button

  buttonUp.pinIndex = 4;
 80005ec:	4b4b      	ldr	r3, [pc, #300]	; (800071c <main+0x1b8>)
 80005ee:	2204      	movs	r2, #4
 80005f0:	709a      	strb	r2, [r3, #2]
  buttonUp.gpioport = btnUP_GPIO_Port;
 80005f2:	4b4a      	ldr	r3, [pc, #296]	; (800071c <main+0x1b8>)
 80005f4:	4a4a      	ldr	r2, [pc, #296]	; (8000720 <main+0x1bc>)
 80005f6:	605a      	str	r2, [r3, #4]
  buttonUp.gpiopin = btnUP_Pin;
 80005f8:	4b48      	ldr	r3, [pc, #288]	; (800071c <main+0x1b8>)
 80005fa:	2240      	movs	r2, #64	; 0x40
 80005fc:	811a      	strh	r2, [r3, #8]
  buttonUp.triggerTime = 3000;
 80005fe:	4b47      	ldr	r3, [pc, #284]	; (800071c <main+0x1b8>)
 8000600:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000604:	815a      	strh	r2, [r3, #10]
  buttonUp.keyCode = 0x52;
 8000606:	4b45      	ldr	r3, [pc, #276]	; (800071c <main+0x1b8>)
 8000608:	2252      	movs	r2, #82	; 0x52
 800060a:	741a      	strb	r2, [r3, #16]

  // down button

  buttonDown.pinIndex = 5;
 800060c:	4b45      	ldr	r3, [pc, #276]	; (8000724 <main+0x1c0>)
 800060e:	2205      	movs	r2, #5
 8000610:	709a      	strb	r2, [r3, #2]
  buttonDown.gpioport = btnDOWN_GPIO_Port;
 8000612:	4b44      	ldr	r3, [pc, #272]	; (8000724 <main+0x1c0>)
 8000614:	4a44      	ldr	r2, [pc, #272]	; (8000728 <main+0x1c4>)
 8000616:	605a      	str	r2, [r3, #4]
  buttonDown.gpiopin = btnDOWN_Pin;
 8000618:	4b42      	ldr	r3, [pc, #264]	; (8000724 <main+0x1c0>)
 800061a:	2204      	movs	r2, #4
 800061c:	811a      	strh	r2, [r3, #8]
  buttonDown.triggerTime = 3000;
 800061e:	4b41      	ldr	r3, [pc, #260]	; (8000724 <main+0x1c0>)
 8000620:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000624:	815a      	strh	r2, [r3, #10]
  buttonDown.keyCode = 0x51;
 8000626:	4b3f      	ldr	r3, [pc, #252]	; (8000724 <main+0x1c0>)
 8000628:	2251      	movs	r2, #81	; 0x51
 800062a:	741a      	strb	r2, [r3, #16]

  // left button

  buttonLeft.pinIndex = 6;
 800062c:	4b3f      	ldr	r3, [pc, #252]	; (800072c <main+0x1c8>)
 800062e:	2206      	movs	r2, #6
 8000630:	709a      	strb	r2, [r3, #2]
  buttonLeft.gpioport = btnLEFT_GPIO_Port;
 8000632:	4b3e      	ldr	r3, [pc, #248]	; (800072c <main+0x1c8>)
 8000634:	4a3c      	ldr	r2, [pc, #240]	; (8000728 <main+0x1c4>)
 8000636:	605a      	str	r2, [r3, #4]
  buttonLeft.gpiopin = btnLEFT_Pin;
 8000638:	4b3c      	ldr	r3, [pc, #240]	; (800072c <main+0x1c8>)
 800063a:	2202      	movs	r2, #2
 800063c:	811a      	strh	r2, [r3, #8]
  buttonLeft.triggerTime = 3000;
 800063e:	4b3b      	ldr	r3, [pc, #236]	; (800072c <main+0x1c8>)
 8000640:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000644:	815a      	strh	r2, [r3, #10]
  buttonLeft.keyCode = 0x50;
 8000646:	4b39      	ldr	r3, [pc, #228]	; (800072c <main+0x1c8>)
 8000648:	2250      	movs	r2, #80	; 0x50
 800064a:	741a      	strb	r2, [r3, #16]

  // right button

  buttonRight.pinIndex = 7;
 800064c:	4b38      	ldr	r3, [pc, #224]	; (8000730 <main+0x1cc>)
 800064e:	2207      	movs	r2, #7
 8000650:	709a      	strb	r2, [r3, #2]
  buttonRight.gpioport = btnRIGHT_GPIO_Port;
 8000652:	4b37      	ldr	r3, [pc, #220]	; (8000730 <main+0x1cc>)
 8000654:	4a37      	ldr	r2, [pc, #220]	; (8000734 <main+0x1d0>)
 8000656:	605a      	str	r2, [r3, #4]
  buttonRight.gpiopin = btnRIGHT_Pin;
 8000658:	4b35      	ldr	r3, [pc, #212]	; (8000730 <main+0x1cc>)
 800065a:	2280      	movs	r2, #128	; 0x80
 800065c:	811a      	strh	r2, [r3, #8]
  buttonRight.triggerTime = 3000;
 800065e:	4b34      	ldr	r3, [pc, #208]	; (8000730 <main+0x1cc>)
 8000660:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000664:	815a      	strh	r2, [r3, #10]
  buttonRight.keyCode = 0x4F;
 8000666:	4b32      	ldr	r3, [pc, #200]	; (8000730 <main+0x1cc>)
 8000668:	224f      	movs	r2, #79	; 0x4f
 800066a:	741a      	strb	r2, [r3, #16]

  // select button

  buttonSelect.pinIndex = 8;
 800066c:	4b32      	ldr	r3, [pc, #200]	; (8000738 <main+0x1d4>)
 800066e:	2208      	movs	r2, #8
 8000670:	709a      	strb	r2, [r3, #2]
  buttonSelect.gpioport = btnSELECT_GPIO_Port;
 8000672:	4b31      	ldr	r3, [pc, #196]	; (8000738 <main+0x1d4>)
 8000674:	4a2a      	ldr	r2, [pc, #168]	; (8000720 <main+0x1bc>)
 8000676:	605a      	str	r2, [r3, #4]
  buttonSelect.gpiopin = btnSELECT_Pin;
 8000678:	4b2f      	ldr	r3, [pc, #188]	; (8000738 <main+0x1d4>)
 800067a:	2204      	movs	r2, #4
 800067c:	811a      	strh	r2, [r3, #8]
  buttonSelect.triggerTime = 3000;
 800067e:	4b2e      	ldr	r3, [pc, #184]	; (8000738 <main+0x1d4>)
 8000680:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000684:	815a      	strh	r2, [r3, #10]
  buttonSelect.keyCode = 0x18; // scan key code for u
 8000686:	4b2c      	ldr	r3, [pc, #176]	; (8000738 <main+0x1d4>)
 8000688:	2218      	movs	r2, #24
 800068a:	741a      	strb	r2, [r3, #16]

  // start button

  buttonStart.pinIndex = 9;
 800068c:	4b2b      	ldr	r3, [pc, #172]	; (800073c <main+0x1d8>)
 800068e:	2209      	movs	r2, #9
 8000690:	709a      	strb	r2, [r3, #2]
  buttonStart.gpioport = btnSTART_GPIO_Port;
 8000692:	4b2a      	ldr	r3, [pc, #168]	; (800073c <main+0x1d8>)
 8000694:	4a1d      	ldr	r2, [pc, #116]	; (800070c <main+0x1a8>)
 8000696:	605a      	str	r2, [r3, #4]
  buttonStart.gpiopin = btnSTART_Pin;
 8000698:	4b28      	ldr	r3, [pc, #160]	; (800073c <main+0x1d8>)
 800069a:	2220      	movs	r2, #32
 800069c:	811a      	strh	r2, [r3, #8]
  buttonStart.triggerTime = 3000;
 800069e:	4b27      	ldr	r3, [pc, #156]	; (800073c <main+0x1d8>)
 80006a0:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80006a4:	815a      	strh	r2, [r3, #10]
  buttonStart.keyCode = 0x19; // scan key code for v
 80006a6:	4b25      	ldr	r3, [pc, #148]	; (800073c <main+0x1d8>)
 80006a8:	2219      	movs	r2, #25
 80006aa:	741a      	strb	r2, [r3, #16]

  // HOTKEY

  buttonHotkey.pinIndex = 10;
 80006ac:	4b24      	ldr	r3, [pc, #144]	; (8000740 <main+0x1dc>)
 80006ae:	220a      	movs	r2, #10
 80006b0:	709a      	strb	r2, [r3, #2]
  buttonHotkey.gpioport = HOTKEY_GPIO_Port;
 80006b2:	4b23      	ldr	r3, [pc, #140]	; (8000740 <main+0x1dc>)
 80006b4:	4a1f      	ldr	r2, [pc, #124]	; (8000734 <main+0x1d0>)
 80006b6:	605a      	str	r2, [r3, #4]
  buttonHotkey.gpiopin = HOTKEY_Pin;
 80006b8:	4b21      	ldr	r3, [pc, #132]	; (8000740 <main+0x1dc>)
 80006ba:	2240      	movs	r2, #64	; 0x40
 80006bc:	811a      	strh	r2, [r3, #8]
  buttonHotkey.triggerTime = 3000;
 80006be:	4b20      	ldr	r3, [pc, #128]	; (8000740 <main+0x1dc>)
 80006c0:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80006c4:	815a      	strh	r2, [r3, #10]
  buttonHotkey.keyCode = 0x0B; // scan key code for h
 80006c6:	4b1e      	ldr	r3, [pc, #120]	; (8000740 <main+0x1dc>)
 80006c8:	220b      	movs	r2, #11
 80006ca:	741a      	strb	r2, [r3, #16]

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006cc:	f000 f846 	bl	800075c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006d0:	f000 f924 	bl	800091c <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 80006d4:	f000 f8a6 	bl	8000824 <MX_LPUART1_UART_Init>
  MX_TIM2_Init();
 80006d8:	f000 f8d2 	bl	8000880 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80006dc:	f007 fdc0 	bl	8008260 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80006e0:	4a18      	ldr	r2, [pc, #96]	; (8000744 <main+0x1e0>)
 80006e2:	2100      	movs	r1, #0
 80006e4:	4818      	ldr	r0, [pc, #96]	; (8000748 <main+0x1e4>)
 80006e6:	f007 fe05 	bl	80082f4 <osThreadNew>
 80006ea:	4603      	mov	r3, r0
 80006ec:	4a17      	ldr	r2, [pc, #92]	; (800074c <main+0x1e8>)
 80006ee:	6013      	str	r3, [r2, #0]
  checkkeysTaskHandle = osThreadNew(checkkeys, NULL, &checkkeysTaskHandle_attributes);
 80006f0:	4a17      	ldr	r2, [pc, #92]	; (8000750 <main+0x1ec>)
 80006f2:	2100      	movs	r1, #0
 80006f4:	4817      	ldr	r0, [pc, #92]	; (8000754 <main+0x1f0>)
 80006f6:	f007 fdfd 	bl	80082f4 <osThreadNew>
 80006fa:	4603      	mov	r3, r0
 80006fc:	4a16      	ldr	r2, [pc, #88]	; (8000758 <main+0x1f4>)
 80006fe:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000700:	f007 fdd2 	bl	80082a8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000704:	e7fe      	b.n	8000704 <main+0x1a0>
 8000706:	bf00      	nop
 8000708:	20000224 	.word	0x20000224
 800070c:	48000800 	.word	0x48000800
 8000710:	20000238 	.word	0x20000238
 8000714:	2000024c 	.word	0x2000024c
 8000718:	20000260 	.word	0x20000260
 800071c:	20000274 	.word	0x20000274
 8000720:	48000400 	.word	0x48000400
 8000724:	20000288 	.word	0x20000288
 8000728:	48001400 	.word	0x48001400
 800072c:	2000029c 	.word	0x2000029c
 8000730:	200002b0 	.word	0x200002b0
 8000734:	48000c00 	.word	0x48000c00
 8000738:	200002c4 	.word	0x200002c4
 800073c:	200002d8 	.word	0x200002d8
 8000740:	200002ec 	.word	0x200002ec
 8000744:	0800b918 	.word	0x0800b918
 8000748:	08000e21 	.word	0x08000e21
 800074c:	20000214 	.word	0x20000214
 8000750:	0800b93c 	.word	0x0800b93c
 8000754:	08000b0d 	.word	0x08000b0d
 8000758:	20000218 	.word	0x20000218

0800075c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b096      	sub	sp, #88	; 0x58
 8000760:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000762:	f107 0314 	add.w	r3, r7, #20
 8000766:	2244      	movs	r2, #68	; 0x44
 8000768:	2100      	movs	r1, #0
 800076a:	4618      	mov	r0, r3
 800076c:	f00b f850 	bl	800b810 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000770:	463b      	mov	r3, r7
 8000772:	2200      	movs	r2, #0
 8000774:	601a      	str	r2, [r3, #0]
 8000776:	605a      	str	r2, [r3, #4]
 8000778:	609a      	str	r2, [r3, #8]
 800077a:	60da      	str	r2, [r3, #12]
 800077c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800077e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000782:	f002 f987 	bl	8002a94 <HAL_PWREx_ControlVoltageScaling>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800078c:	f000 fb52 	bl	8000e34 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000790:	f002 f962 	bl	8002a58 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000794:	4b22      	ldr	r3, [pc, #136]	; (8000820 <SystemClock_Config+0xc4>)
 8000796:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800079a:	4a21      	ldr	r2, [pc, #132]	; (8000820 <SystemClock_Config+0xc4>)
 800079c:	f023 0318 	bic.w	r3, r3, #24
 80007a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80007a4:	2314      	movs	r3, #20
 80007a6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80007a8:	2301      	movs	r3, #1
 80007aa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80007ac:	2301      	movs	r3, #1
 80007ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80007b0:	2300      	movs	r3, #0
 80007b2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80007b4:	2360      	movs	r3, #96	; 0x60
 80007b6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007b8:	2302      	movs	r3, #2
 80007ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80007bc:	2301      	movs	r3, #1
 80007be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80007c0:	2301      	movs	r3, #1
 80007c2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 71;
 80007c4:	2347      	movs	r3, #71	; 0x47
 80007c6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007c8:	2302      	movs	r3, #2
 80007ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007cc:	2302      	movs	r3, #2
 80007ce:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV6;
 80007d0:	2306      	movs	r3, #6
 80007d2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007d4:	f107 0314 	add.w	r3, r7, #20
 80007d8:	4618      	mov	r0, r3
 80007da:	f002 f9d1 	bl	8002b80 <HAL_RCC_OscConfig>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80007e4:	f000 fb26 	bl	8000e34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007e8:	230f      	movs	r3, #15
 80007ea:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ec:	2303      	movs	r3, #3
 80007ee:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007f0:	2300      	movs	r3, #0
 80007f2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007f8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007fa:	2300      	movs	r3, #0
 80007fc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007fe:	463b      	mov	r3, r7
 8000800:	2102      	movs	r1, #2
 8000802:	4618      	mov	r0, r3
 8000804:	f002 fdd6 	bl	80033b4 <HAL_RCC_ClockConfig>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800080e:	f000 fb11 	bl	8000e34 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000812:	f003 faef 	bl	8003df4 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000816:	bf00      	nop
 8000818:	3758      	adds	r7, #88	; 0x58
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	40021000 	.word	0x40021000

08000824 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000828:	4b12      	ldr	r3, [pc, #72]	; (8000874 <MX_LPUART1_UART_Init+0x50>)
 800082a:	4a13      	ldr	r2, [pc, #76]	; (8000878 <MX_LPUART1_UART_Init+0x54>)
 800082c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 800082e:	4b11      	ldr	r3, [pc, #68]	; (8000874 <MX_LPUART1_UART_Init+0x50>)
 8000830:	4a12      	ldr	r2, [pc, #72]	; (800087c <MX_LPUART1_UART_Init+0x58>)
 8000832:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 8000834:	4b0f      	ldr	r3, [pc, #60]	; (8000874 <MX_LPUART1_UART_Init+0x50>)
 8000836:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800083a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800083c:	4b0d      	ldr	r3, [pc, #52]	; (8000874 <MX_LPUART1_UART_Init+0x50>)
 800083e:	2200      	movs	r2, #0
 8000840:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000842:	4b0c      	ldr	r3, [pc, #48]	; (8000874 <MX_LPUART1_UART_Init+0x50>)
 8000844:	2200      	movs	r2, #0
 8000846:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000848:	4b0a      	ldr	r3, [pc, #40]	; (8000874 <MX_LPUART1_UART_Init+0x50>)
 800084a:	220c      	movs	r2, #12
 800084c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800084e:	4b09      	ldr	r3, [pc, #36]	; (8000874 <MX_LPUART1_UART_Init+0x50>)
 8000850:	2200      	movs	r2, #0
 8000852:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000854:	4b07      	ldr	r3, [pc, #28]	; (8000874 <MX_LPUART1_UART_Init+0x50>)
 8000856:	2200      	movs	r2, #0
 8000858:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800085a:	4b06      	ldr	r3, [pc, #24]	; (8000874 <MX_LPUART1_UART_Init+0x50>)
 800085c:	2200      	movs	r2, #0
 800085e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000860:	4804      	ldr	r0, [pc, #16]	; (8000874 <MX_LPUART1_UART_Init+0x50>)
 8000862:	f003 ffeb 	bl	800483c <HAL_UART_Init>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 800086c:	f000 fae2 	bl	8000e34 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000870:	bf00      	nop
 8000872:	bd80      	pop	{r7, pc}
 8000874:	20000140 	.word	0x20000140
 8000878:	40008000 	.word	0x40008000
 800087c:	00033324 	.word	0x00033324

08000880 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b088      	sub	sp, #32
 8000884:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000886:	f107 0310 	add.w	r3, r7, #16
 800088a:	2200      	movs	r2, #0
 800088c:	601a      	str	r2, [r3, #0]
 800088e:	605a      	str	r2, [r3, #4]
 8000890:	609a      	str	r2, [r3, #8]
 8000892:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000894:	1d3b      	adds	r3, r7, #4
 8000896:	2200      	movs	r2, #0
 8000898:	601a      	str	r2, [r3, #0]
 800089a:	605a      	str	r2, [r3, #4]
 800089c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800089e:	4b1e      	ldr	r3, [pc, #120]	; (8000918 <MX_TIM2_Init+0x98>)
 80008a0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008a4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80008a6:	4b1c      	ldr	r3, [pc, #112]	; (8000918 <MX_TIM2_Init+0x98>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008ac:	4b1a      	ldr	r3, [pc, #104]	; (8000918 <MX_TIM2_Init+0x98>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80008b2:	4b19      	ldr	r3, [pc, #100]	; (8000918 <MX_TIM2_Init+0x98>)
 80008b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80008b8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008ba:	4b17      	ldr	r3, [pc, #92]	; (8000918 <MX_TIM2_Init+0x98>)
 80008bc:	2200      	movs	r2, #0
 80008be:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008c0:	4b15      	ldr	r3, [pc, #84]	; (8000918 <MX_TIM2_Init+0x98>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008c6:	4814      	ldr	r0, [pc, #80]	; (8000918 <MX_TIM2_Init+0x98>)
 80008c8:	f003 fc72 	bl	80041b0 <HAL_TIM_Base_Init>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80008d2:	f000 faaf 	bl	8000e34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008da:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008dc:	f107 0310 	add.w	r3, r7, #16
 80008e0:	4619      	mov	r1, r3
 80008e2:	480d      	ldr	r0, [pc, #52]	; (8000918 <MX_TIM2_Init+0x98>)
 80008e4:	f003 fd24 	bl	8004330 <HAL_TIM_ConfigClockSource>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80008ee:	f000 faa1 	bl	8000e34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008f2:	2300      	movs	r3, #0
 80008f4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008f6:	2300      	movs	r3, #0
 80008f8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008fa:	1d3b      	adds	r3, r7, #4
 80008fc:	4619      	mov	r1, r3
 80008fe:	4806      	ldr	r0, [pc, #24]	; (8000918 <MX_TIM2_Init+0x98>)
 8000900:	f003 ff14 	bl	800472c <HAL_TIMEx_MasterConfigSynchronization>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800090a:	f000 fa93 	bl	8000e34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800090e:	bf00      	nop
 8000910:	3720      	adds	r7, #32
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	200001c8 	.word	0x200001c8

0800091c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b08c      	sub	sp, #48	; 0x30
 8000920:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000922:	f107 031c 	add.w	r3, r7, #28
 8000926:	2200      	movs	r2, #0
 8000928:	601a      	str	r2, [r3, #0]
 800092a:	605a      	str	r2, [r3, #4]
 800092c:	609a      	str	r2, [r3, #8]
 800092e:	60da      	str	r2, [r3, #12]
 8000930:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000932:	4b70      	ldr	r3, [pc, #448]	; (8000af4 <MX_GPIO_Init+0x1d8>)
 8000934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000936:	4a6f      	ldr	r2, [pc, #444]	; (8000af4 <MX_GPIO_Init+0x1d8>)
 8000938:	f043 0304 	orr.w	r3, r3, #4
 800093c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800093e:	4b6d      	ldr	r3, [pc, #436]	; (8000af4 <MX_GPIO_Init+0x1d8>)
 8000940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000942:	f003 0304 	and.w	r3, r3, #4
 8000946:	61bb      	str	r3, [r7, #24]
 8000948:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800094a:	4b6a      	ldr	r3, [pc, #424]	; (8000af4 <MX_GPIO_Init+0x1d8>)
 800094c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800094e:	4a69      	ldr	r2, [pc, #420]	; (8000af4 <MX_GPIO_Init+0x1d8>)
 8000950:	f043 0320 	orr.w	r3, r3, #32
 8000954:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000956:	4b67      	ldr	r3, [pc, #412]	; (8000af4 <MX_GPIO_Init+0x1d8>)
 8000958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800095a:	f003 0320 	and.w	r3, r3, #32
 800095e:	617b      	str	r3, [r7, #20]
 8000960:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000962:	4b64      	ldr	r3, [pc, #400]	; (8000af4 <MX_GPIO_Init+0x1d8>)
 8000964:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000966:	4a63      	ldr	r2, [pc, #396]	; (8000af4 <MX_GPIO_Init+0x1d8>)
 8000968:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800096c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800096e:	4b61      	ldr	r3, [pc, #388]	; (8000af4 <MX_GPIO_Init+0x1d8>)
 8000970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000972:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000976:	613b      	str	r3, [r7, #16]
 8000978:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800097a:	4b5e      	ldr	r3, [pc, #376]	; (8000af4 <MX_GPIO_Init+0x1d8>)
 800097c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800097e:	4a5d      	ldr	r2, [pc, #372]	; (8000af4 <MX_GPIO_Init+0x1d8>)
 8000980:	f043 0301 	orr.w	r3, r3, #1
 8000984:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000986:	4b5b      	ldr	r3, [pc, #364]	; (8000af4 <MX_GPIO_Init+0x1d8>)
 8000988:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800098a:	f003 0301 	and.w	r3, r3, #1
 800098e:	60fb      	str	r3, [r7, #12]
 8000990:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000992:	4b58      	ldr	r3, [pc, #352]	; (8000af4 <MX_GPIO_Init+0x1d8>)
 8000994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000996:	4a57      	ldr	r2, [pc, #348]	; (8000af4 <MX_GPIO_Init+0x1d8>)
 8000998:	f043 0302 	orr.w	r3, r3, #2
 800099c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800099e:	4b55      	ldr	r3, [pc, #340]	; (8000af4 <MX_GPIO_Init+0x1d8>)
 80009a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009a2:	f003 0302 	and.w	r3, r3, #2
 80009a6:	60bb      	str	r3, [r7, #8]
 80009a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009aa:	4b52      	ldr	r3, [pc, #328]	; (8000af4 <MX_GPIO_Init+0x1d8>)
 80009ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ae:	4a51      	ldr	r2, [pc, #324]	; (8000af4 <MX_GPIO_Init+0x1d8>)
 80009b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009b6:	4b4f      	ldr	r3, [pc, #316]	; (8000af4 <MX_GPIO_Init+0x1d8>)
 80009b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009be:	607b      	str	r3, [r7, #4]
 80009c0:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 80009c2:	f002 f8cd 	bl	8002b60 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009c6:	4b4b      	ldr	r3, [pc, #300]	; (8000af4 <MX_GPIO_Init+0x1d8>)
 80009c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ca:	4a4a      	ldr	r2, [pc, #296]	; (8000af4 <MX_GPIO_Init+0x1d8>)
 80009cc:	f043 0308 	orr.w	r3, r3, #8
 80009d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009d2:	4b48      	ldr	r3, [pc, #288]	; (8000af4 <MX_GPIO_Init+0x1d8>)
 80009d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009d6:	f003 0308 	and.w	r3, r3, #8
 80009da:	603b      	str	r3, [r7, #0]
 80009dc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(driverpin_GPIO_Port, driverpin_Pin, GPIO_PIN_RESET);
 80009de:	2200      	movs	r2, #0
 80009e0:	2108      	movs	r1, #8
 80009e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009e6:	f000 fe8f 	bl	8001708 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Red_Pin|LD2_Pin, GPIO_PIN_RESET);
 80009ea:	2200      	movs	r2, #0
 80009ec:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 80009f0:	4841      	ldr	r0, [pc, #260]	; (8000af8 <MX_GPIO_Init+0x1dc>)
 80009f2:	f000 fe89 	bl	8001708 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80009f6:	2200      	movs	r2, #0
 80009f8:	2140      	movs	r1, #64	; 0x40
 80009fa:	4840      	ldr	r0, [pc, #256]	; (8000afc <MX_GPIO_Init+0x1e0>)
 80009fc:	f000 fe84 	bl	8001708 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a00:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a06:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a10:	f107 031c 	add.w	r3, r7, #28
 8000a14:	4619      	mov	r1, r3
 8000a16:	483a      	ldr	r0, [pc, #232]	; (8000b00 <MX_GPIO_Init+0x1e4>)
 8000a18:	f000 fccc 	bl	80013b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : btnLEFT_Pin btnDOWN_Pin */
  GPIO_InitStruct.Pin = btnLEFT_Pin|btnDOWN_Pin;
 8000a1c:	2306      	movs	r3, #6
 8000a1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a20:	2300      	movs	r3, #0
 8000a22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a24:	2300      	movs	r3, #0
 8000a26:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000a28:	f107 031c 	add.w	r3, r7, #28
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	4835      	ldr	r0, [pc, #212]	; (8000b04 <MX_GPIO_Init+0x1e8>)
 8000a30:	f000 fcc0 	bl	80013b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : btnA_Pin btnX_Pin btnB_Pin btnY_Pin
                           btnSTART_Pin */
  GPIO_InitStruct.Pin = btnA_Pin|btnX_Pin|btnB_Pin|btnY_Pin
 8000a34:	233b      	movs	r3, #59	; 0x3b
 8000a36:	61fb      	str	r3, [r7, #28]
                          |btnSTART_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a40:	f107 031c 	add.w	r3, r7, #28
 8000a44:	4619      	mov	r1, r3
 8000a46:	482e      	ldr	r0, [pc, #184]	; (8000b00 <MX_GPIO_Init+0x1e4>)
 8000a48:	f000 fcb4 	bl	80013b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : driverpin_Pin */
  GPIO_InitStruct.Pin = driverpin_Pin;
 8000a4c:	2308      	movs	r3, #8
 8000a4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a50:	2301      	movs	r3, #1
 8000a52:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a54:	2300      	movs	r3, #0
 8000a56:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(driverpin_GPIO_Port, &GPIO_InitStruct);
 8000a5c:	f107 031c 	add.w	r3, r7, #28
 8000a60:	4619      	mov	r1, r3
 8000a62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a66:	f000 fca5 	bl	80013b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : btnSELECT_Pin btnUP_Pin */
  GPIO_InitStruct.Pin = btnSELECT_Pin|btnUP_Pin;
 8000a6a:	2344      	movs	r3, #68	; 0x44
 8000a6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a72:	2300      	movs	r3, #0
 8000a74:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a76:	f107 031c 	add.w	r3, r7, #28
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	481e      	ldr	r0, [pc, #120]	; (8000af8 <MX_GPIO_Init+0x1dc>)
 8000a7e:	f000 fc99 	bl	80013b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Red_Pin LD2_Pin */
  GPIO_InitStruct.Pin = Red_Pin|LD2_Pin;
 8000a82:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000a86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a88:	2301      	movs	r3, #1
 8000a8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a90:	2300      	movs	r3, #0
 8000a92:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a94:	f107 031c 	add.w	r3, r7, #28
 8000a98:	4619      	mov	r1, r3
 8000a9a:	4817      	ldr	r0, [pc, #92]	; (8000af8 <MX_GPIO_Init+0x1dc>)
 8000a9c:	f000 fc8a 	bl	80013b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000aa0:	2320      	movs	r3, #32
 8000aa2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000aac:	f107 031c 	add.w	r3, r7, #28
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4812      	ldr	r0, [pc, #72]	; (8000afc <MX_GPIO_Init+0x1e0>)
 8000ab4:	f000 fc7e 	bl	80013b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000ab8:	2340      	movs	r3, #64	; 0x40
 8000aba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000abc:	2301      	movs	r3, #1
 8000abe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000ac8:	f107 031c 	add.w	r3, r7, #28
 8000acc:	4619      	mov	r1, r3
 8000ace:	480b      	ldr	r0, [pc, #44]	; (8000afc <MX_GPIO_Init+0x1e0>)
 8000ad0:	f000 fc70 	bl	80013b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : HOTKEY_Pin btnRIGHT_Pin */
  GPIO_InitStruct.Pin = HOTKEY_Pin|btnRIGHT_Pin;
 8000ad4:	23c0      	movs	r3, #192	; 0xc0
 8000ad6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000adc:	2300      	movs	r3, #0
 8000ade:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ae0:	f107 031c 	add.w	r3, r7, #28
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4808      	ldr	r0, [pc, #32]	; (8000b08 <MX_GPIO_Init+0x1ec>)
 8000ae8:	f000 fc64 	bl	80013b4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000aec:	bf00      	nop
 8000aee:	3730      	adds	r7, #48	; 0x30
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	40021000 	.word	0x40021000
 8000af8:	48000400 	.word	0x48000400
 8000afc:	48001800 	.word	0x48001800
 8000b00:	48000800 	.word	0x48000800
 8000b04:	48001400 	.word	0x48001400
 8000b08:	48000c00 	.word	0x48000c00

08000b0c <checkkeys>:

/* USER CODE BEGIN 4 */
void checkkeys(void *argument)
{
 8000b0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000b10:	b088      	sub	sp, #32
 8000b12:	af00      	add	r7, sp, #0
 8000b14:	60f8      	str	r0, [r7, #12]
	// make sure to actually start the counter!
	HAL_TIM_Base_Start(&htim2);
 8000b16:	48b3      	ldr	r0, [pc, #716]	; (8000de4 <checkkeys+0x2d8>)
 8000b18:	f003 fba2 	bl	8004260 <HAL_TIM_Base_Start>
//	buttons[7] = buttonRight;
//	buttons[8] = buttonSelect;
//	buttons[9] = buttonStart;
//	buttons[10] = buttonHotkey;

	capkey_t buttons[keycount];
 8000b1c:	230b      	movs	r3, #11
 8000b1e:	3b01      	subs	r3, #1
 8000b20:	61bb      	str	r3, [r7, #24]
 8000b22:	230b      	movs	r3, #11
 8000b24:	b2db      	uxtb	r3, r3
 8000b26:	2200      	movs	r2, #0
 8000b28:	603b      	str	r3, [r7, #0]
 8000b2a:	607a      	str	r2, [r7, #4]
 8000b2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000b30:	f04f 0000 	mov.w	r0, #0
 8000b34:	f04f 0100 	mov.w	r1, #0
 8000b38:	0099      	lsls	r1, r3, #2
 8000b3a:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8000b3e:	0090      	lsls	r0, r2, #2
 8000b40:	4602      	mov	r2, r0
 8000b42:	460b      	mov	r3, r1
 8000b44:	6839      	ldr	r1, [r7, #0]
 8000b46:	eb12 0801 	adds.w	r8, r2, r1
 8000b4a:	6879      	ldr	r1, [r7, #4]
 8000b4c:	eb43 0901 	adc.w	r9, r3, r1
 8000b50:	f04f 0200 	mov.w	r2, #0
 8000b54:	f04f 0300 	mov.w	r3, #0
 8000b58:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8000b5c:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8000b60:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8000b64:	230b      	movs	r3, #11
 8000b66:	b2db      	uxtb	r3, r3
 8000b68:	2200      	movs	r2, #0
 8000b6a:	469a      	mov	sl, r3
 8000b6c:	4693      	mov	fp, r2
 8000b6e:	4652      	mov	r2, sl
 8000b70:	465b      	mov	r3, fp
 8000b72:	f04f 0000 	mov.w	r0, #0
 8000b76:	f04f 0100 	mov.w	r1, #0
 8000b7a:	0099      	lsls	r1, r3, #2
 8000b7c:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8000b80:	0090      	lsls	r0, r2, #2
 8000b82:	4602      	mov	r2, r0
 8000b84:	460b      	mov	r3, r1
 8000b86:	eb12 040a 	adds.w	r4, r2, sl
 8000b8a:	eb43 050b 	adc.w	r5, r3, fp
 8000b8e:	f04f 0200 	mov.w	r2, #0
 8000b92:	f04f 0300 	mov.w	r3, #0
 8000b96:	016b      	lsls	r3, r5, #5
 8000b98:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8000b9c:	0162      	lsls	r2, r4, #5
 8000b9e:	230b      	movs	r3, #11
 8000ba0:	461a      	mov	r2, r3
 8000ba2:	4613      	mov	r3, r2
 8000ba4:	009b      	lsls	r3, r3, #2
 8000ba6:	4413      	add	r3, r2
 8000ba8:	009b      	lsls	r3, r3, #2
 8000baa:	3307      	adds	r3, #7
 8000bac:	08db      	lsrs	r3, r3, #3
 8000bae:	00db      	lsls	r3, r3, #3
 8000bb0:	ebad 0d03 	sub.w	sp, sp, r3
 8000bb4:	466b      	mov	r3, sp
 8000bb6:	3303      	adds	r3, #3
 8000bb8:	089b      	lsrs	r3, r3, #2
 8000bba:	009b      	lsls	r3, r3, #2
 8000bbc:	617b      	str	r3, [r7, #20]
	buttons[0] = buttonA;
 8000bbe:	697b      	ldr	r3, [r7, #20]
 8000bc0:	4a89      	ldr	r2, [pc, #548]	; (8000de8 <checkkeys+0x2dc>)
 8000bc2:	461c      	mov	r4, r3
 8000bc4:	4615      	mov	r5, r2
 8000bc6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bc8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bca:	682b      	ldr	r3, [r5, #0]
 8000bcc:	6023      	str	r3, [r4, #0]
	buttons[1] = buttonB;
 8000bce:	697b      	ldr	r3, [r7, #20]
 8000bd0:	4a86      	ldr	r2, [pc, #536]	; (8000dec <checkkeys+0x2e0>)
 8000bd2:	f103 0414 	add.w	r4, r3, #20
 8000bd6:	4615      	mov	r5, r2
 8000bd8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bdc:	682b      	ldr	r3, [r5, #0]
 8000bde:	6023      	str	r3, [r4, #0]
	buttons[2] = buttonX;
 8000be0:	697b      	ldr	r3, [r7, #20]
 8000be2:	4a83      	ldr	r2, [pc, #524]	; (8000df0 <checkkeys+0x2e4>)
 8000be4:	f103 0428 	add.w	r4, r3, #40	; 0x28
 8000be8:	4615      	mov	r5, r2
 8000bea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bee:	682b      	ldr	r3, [r5, #0]
 8000bf0:	6023      	str	r3, [r4, #0]
	buttons[3] = buttonY;
 8000bf2:	697b      	ldr	r3, [r7, #20]
 8000bf4:	4a7f      	ldr	r2, [pc, #508]	; (8000df4 <checkkeys+0x2e8>)
 8000bf6:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 8000bfa:	4615      	mov	r5, r2
 8000bfc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bfe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c00:	682b      	ldr	r3, [r5, #0]
 8000c02:	6023      	str	r3, [r4, #0]
	buttons[4] = buttonUp;
 8000c04:	697b      	ldr	r3, [r7, #20]
 8000c06:	4a7c      	ldr	r2, [pc, #496]	; (8000df8 <checkkeys+0x2ec>)
 8000c08:	f103 0450 	add.w	r4, r3, #80	; 0x50
 8000c0c:	4615      	mov	r5, r2
 8000c0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c12:	682b      	ldr	r3, [r5, #0]
 8000c14:	6023      	str	r3, [r4, #0]
	buttons[5] = buttonDown;
 8000c16:	697b      	ldr	r3, [r7, #20]
 8000c18:	4a78      	ldr	r2, [pc, #480]	; (8000dfc <checkkeys+0x2f0>)
 8000c1a:	f103 0464 	add.w	r4, r3, #100	; 0x64
 8000c1e:	4615      	mov	r5, r2
 8000c20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c24:	682b      	ldr	r3, [r5, #0]
 8000c26:	6023      	str	r3, [r4, #0]
	buttons[6] = buttonLeft;
 8000c28:	697b      	ldr	r3, [r7, #20]
 8000c2a:	4a75      	ldr	r2, [pc, #468]	; (8000e00 <checkkeys+0x2f4>)
 8000c2c:	f103 0478 	add.w	r4, r3, #120	; 0x78
 8000c30:	4615      	mov	r5, r2
 8000c32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c36:	682b      	ldr	r3, [r5, #0]
 8000c38:	6023      	str	r3, [r4, #0]
	buttons[7] = buttonRight;
 8000c3a:	697b      	ldr	r3, [r7, #20]
 8000c3c:	4a71      	ldr	r2, [pc, #452]	; (8000e04 <checkkeys+0x2f8>)
 8000c3e:	f103 048c 	add.w	r4, r3, #140	; 0x8c
 8000c42:	4615      	mov	r5, r2
 8000c44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c48:	682b      	ldr	r3, [r5, #0]
 8000c4a:	6023      	str	r3, [r4, #0]
	buttons[8] = buttonSelect;
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	4a6e      	ldr	r2, [pc, #440]	; (8000e08 <checkkeys+0x2fc>)
 8000c50:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 8000c54:	4615      	mov	r5, r2
 8000c56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c58:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c5a:	682b      	ldr	r3, [r5, #0]
 8000c5c:	6023      	str	r3, [r4, #0]
	buttons[9] = buttonStart;
 8000c5e:	697b      	ldr	r3, [r7, #20]
 8000c60:	4a6a      	ldr	r2, [pc, #424]	; (8000e0c <checkkeys+0x300>)
 8000c62:	f103 04b4 	add.w	r4, r3, #180	; 0xb4
 8000c66:	4615      	mov	r5, r2
 8000c68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c6c:	682b      	ldr	r3, [r5, #0]
 8000c6e:	6023      	str	r3, [r4, #0]
	buttons[10] = buttonHotkey;
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	4a67      	ldr	r2, [pc, #412]	; (8000e10 <checkkeys+0x304>)
 8000c74:	f103 04c8 	add.w	r4, r3, #200	; 0xc8
 8000c78:	4615      	mov	r5, r2
 8000c7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c7e:	682b      	ldr	r3, [r5, #0]
 8000c80:	6023      	str	r3, [r4, #0]

	// main loop
	for(;;)
	{
		// iterate through all the keys and see if we got a hit
		for(uint8_t i=0;i<keycount;i++)
 8000c82:	2300      	movs	r3, #0
 8000c84:	77fb      	strb	r3, [r7, #31]
 8000c86:	e0a7      	b.n	8000dd8 <checkkeys+0x2cc>
		{
			uint32_t keyTime = getKey(&buttons[i],&htim2); // run a hit scan for the keytime
 8000c88:	7ffa      	ldrb	r2, [r7, #31]
 8000c8a:	4613      	mov	r3, r2
 8000c8c:	009b      	lsls	r3, r3, #2
 8000c8e:	4413      	add	r3, r2
 8000c90:	009b      	lsls	r3, r3, #2
 8000c92:	697a      	ldr	r2, [r7, #20]
 8000c94:	4413      	add	r3, r2
 8000c96:	4953      	ldr	r1, [pc, #332]	; (8000de4 <checkkeys+0x2d8>)
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f7ff fc27 	bl	80004ec <getKey>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	613b      	str	r3, [r7, #16]
			if(keyTime > buttons[i].triggerTime) // is the measured transient time greater than the recorded hit time?
 8000ca2:	7ffa      	ldrb	r2, [r7, #31]
 8000ca4:	6979      	ldr	r1, [r7, #20]
 8000ca6:	4613      	mov	r3, r2
 8000ca8:	009b      	lsls	r3, r3, #2
 8000caa:	4413      	add	r3, r2
 8000cac:	009b      	lsls	r3, r3, #2
 8000cae:	440b      	add	r3, r1
 8000cb0:	330a      	adds	r3, #10
 8000cb2:	881b      	ldrh	r3, [r3, #0]
 8000cb4:	461a      	mov	r2, r3
 8000cb6:	693b      	ldr	r3, [r7, #16]
 8000cb8:	4293      	cmp	r3, r2
 8000cba:	d909      	bls.n	8000cd0 <checkkeys+0x1c4>
			{
				// TODO: send the keycode to the client
				buttons[i].state = true;
 8000cbc:	7ffa      	ldrb	r2, [r7, #31]
 8000cbe:	6979      	ldr	r1, [r7, #20]
 8000cc0:	4613      	mov	r3, r2
 8000cc2:	009b      	lsls	r3, r3, #2
 8000cc4:	4413      	add	r3, r2
 8000cc6:	009b      	lsls	r3, r3, #2
 8000cc8:	440b      	add	r3, r1
 8000cca:	2201      	movs	r2, #1
 8000ccc:	701a      	strb	r2, [r3, #0]
 8000cce:	e008      	b.n	8000ce2 <checkkeys+0x1d6>
			}
			else
			{
				buttons[i].state = false;
 8000cd0:	7ffa      	ldrb	r2, [r7, #31]
 8000cd2:	6979      	ldr	r1, [r7, #20]
 8000cd4:	4613      	mov	r3, r2
 8000cd6:	009b      	lsls	r3, r3, #2
 8000cd8:	4413      	add	r3, r2
 8000cda:	009b      	lsls	r3, r3, #2
 8000cdc:	440b      	add	r3, r1
 8000cde:	2200      	movs	r2, #0
 8000ce0:	701a      	strb	r2, [r3, #0]
			}

			// if last state is false and current state is true then send a zero
			if(buttons[i].lastState == true && buttons[i].state == false)
 8000ce2:	7ffa      	ldrb	r2, [r7, #31]
 8000ce4:	6979      	ldr	r1, [r7, #20]
 8000ce6:	4613      	mov	r3, r2
 8000ce8:	009b      	lsls	r3, r3, #2
 8000cea:	4413      	add	r3, r2
 8000cec:	009b      	lsls	r3, r3, #2
 8000cee:	440b      	add	r3, r1
 8000cf0:	3301      	adds	r3, #1
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d016      	beq.n	8000d26 <checkkeys+0x21a>
 8000cf8:	7ffa      	ldrb	r2, [r7, #31]
 8000cfa:	6979      	ldr	r1, [r7, #20]
 8000cfc:	4613      	mov	r3, r2
 8000cfe:	009b      	lsls	r3, r3, #2
 8000d00:	4413      	add	r3, r2
 8000d02:	009b      	lsls	r3, r3, #2
 8000d04:	440b      	add	r3, r1
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	f083 0301 	eor.w	r3, r3, #1
 8000d0c:	b2db      	uxtb	r3, r3
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d009      	beq.n	8000d26 <checkkeys+0x21a>
			{
				// key up, send a zero
				HAL_GPIO_WritePin(Red_GPIO_Port,Red_Pin,0);
 8000d12:	2200      	movs	r2, #0
 8000d14:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d18:	483e      	ldr	r0, [pc, #248]	; (8000e14 <checkkeys+0x308>)
 8000d1a:	f000 fcf5 	bl	8001708 <HAL_GPIO_WritePin>
				keyBoardHIDsub.KEYCODE1 = 0x00; // zero for key up
 8000d1e:	4b3e      	ldr	r3, [pc, #248]	; (8000e18 <checkkeys+0x30c>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	709a      	strb	r2, [r3, #2]
 8000d24:	e028      	b.n	8000d78 <checkkeys+0x26c>
			}
			else if(buttons[i].lastState == false && buttons[i].state == true)
 8000d26:	7ffa      	ldrb	r2, [r7, #31]
 8000d28:	6979      	ldr	r1, [r7, #20]
 8000d2a:	4613      	mov	r3, r2
 8000d2c:	009b      	lsls	r3, r3, #2
 8000d2e:	4413      	add	r3, r2
 8000d30:	009b      	lsls	r3, r3, #2
 8000d32:	440b      	add	r3, r1
 8000d34:	3301      	adds	r3, #1
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	f083 0301 	eor.w	r3, r3, #1
 8000d3c:	b2db      	uxtb	r3, r3
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d01a      	beq.n	8000d78 <checkkeys+0x26c>
 8000d42:	7ffa      	ldrb	r2, [r7, #31]
 8000d44:	6979      	ldr	r1, [r7, #20]
 8000d46:	4613      	mov	r3, r2
 8000d48:	009b      	lsls	r3, r3, #2
 8000d4a:	4413      	add	r3, r2
 8000d4c:	009b      	lsls	r3, r3, #2
 8000d4e:	440b      	add	r3, r1
 8000d50:	781b      	ldrb	r3, [r3, #0]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d010      	beq.n	8000d78 <checkkeys+0x26c>
			{
				// key down, send a key code
				HAL_GPIO_WritePin(Red_GPIO_Port,Red_Pin,1);
 8000d56:	2201      	movs	r2, #1
 8000d58:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d5c:	482d      	ldr	r0, [pc, #180]	; (8000e14 <checkkeys+0x308>)
 8000d5e:	f000 fcd3 	bl	8001708 <HAL_GPIO_WritePin>
				keyBoardHIDsub.KEYCODE1 = buttons[i].keyCode;
 8000d62:	7ffa      	ldrb	r2, [r7, #31]
 8000d64:	6979      	ldr	r1, [r7, #20]
 8000d66:	4613      	mov	r3, r2
 8000d68:	009b      	lsls	r3, r3, #2
 8000d6a:	4413      	add	r3, r2
 8000d6c:	009b      	lsls	r3, r3, #2
 8000d6e:	440b      	add	r3, r1
 8000d70:	3310      	adds	r3, #16
 8000d72:	781a      	ldrb	r2, [r3, #0]
 8000d74:	4b28      	ldr	r3, [pc, #160]	; (8000e18 <checkkeys+0x30c>)
 8000d76:	709a      	strb	r2, [r3, #2]
			}

			// if a state change occured then update the keys
			if(buttons[i].state != buttons[i].lastState)
 8000d78:	7ffa      	ldrb	r2, [r7, #31]
 8000d7a:	6979      	ldr	r1, [r7, #20]
 8000d7c:	4613      	mov	r3, r2
 8000d7e:	009b      	lsls	r3, r3, #2
 8000d80:	4413      	add	r3, r2
 8000d82:	009b      	lsls	r3, r3, #2
 8000d84:	440b      	add	r3, r1
 8000d86:	7819      	ldrb	r1, [r3, #0]
 8000d88:	7ffa      	ldrb	r2, [r7, #31]
 8000d8a:	6978      	ldr	r0, [r7, #20]
 8000d8c:	4613      	mov	r3, r2
 8000d8e:	009b      	lsls	r3, r3, #2
 8000d90:	4413      	add	r3, r2
 8000d92:	009b      	lsls	r3, r3, #2
 8000d94:	4403      	add	r3, r0
 8000d96:	3301      	adds	r3, #1
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	4299      	cmp	r1, r3
 8000d9c:	d004      	beq.n	8000da8 <checkkeys+0x29c>
			{
				USBD_HID_SendReport(&hUsbDeviceFS,&keyBoardHIDsub,sizeof(keyBoardHIDsub));
 8000d9e:	2208      	movs	r2, #8
 8000da0:	491d      	ldr	r1, [pc, #116]	; (8000e18 <checkkeys+0x30c>)
 8000da2:	481e      	ldr	r0, [pc, #120]	; (8000e1c <checkkeys+0x310>)
 8000da4:	f005 fe7e 	bl	8006aa4 <USBD_HID_SendReport>
			}

			buttons[i].lastState = buttons[i].state; // update the state
 8000da8:	7ff9      	ldrb	r1, [r7, #31]
 8000daa:	7ffa      	ldrb	r2, [r7, #31]
 8000dac:	6978      	ldr	r0, [r7, #20]
 8000dae:	460b      	mov	r3, r1
 8000db0:	009b      	lsls	r3, r3, #2
 8000db2:	440b      	add	r3, r1
 8000db4:	009b      	lsls	r3, r3, #2
 8000db6:	4403      	add	r3, r0
 8000db8:	7818      	ldrb	r0, [r3, #0]
 8000dba:	6979      	ldr	r1, [r7, #20]
 8000dbc:	4613      	mov	r3, r2
 8000dbe:	009b      	lsls	r3, r3, #2
 8000dc0:	4413      	add	r3, r2
 8000dc2:	009b      	lsls	r3, r3, #2
 8000dc4:	440b      	add	r3, r1
 8000dc6:	3301      	adds	r3, #1
 8000dc8:	4602      	mov	r2, r0
 8000dca:	701a      	strb	r2, [r3, #0]
			osDelay(1);
 8000dcc:	2001      	movs	r0, #1
 8000dce:	f007 fb23 	bl	8008418 <osDelay>
		for(uint8_t i=0;i<keycount;i++)
 8000dd2:	7ffb      	ldrb	r3, [r7, #31]
 8000dd4:	3301      	adds	r3, #1
 8000dd6:	77fb      	strb	r3, [r7, #31]
 8000dd8:	220b      	movs	r2, #11
 8000dda:	7ffb      	ldrb	r3, [r7, #31]
 8000ddc:	4293      	cmp	r3, r2
 8000dde:	f4ff af53 	bcc.w	8000c88 <checkkeys+0x17c>
 8000de2:	e74e      	b.n	8000c82 <checkkeys+0x176>
 8000de4:	200001c8 	.word	0x200001c8
 8000de8:	20000224 	.word	0x20000224
 8000dec:	20000238 	.word	0x20000238
 8000df0:	2000024c 	.word	0x2000024c
 8000df4:	20000260 	.word	0x20000260
 8000df8:	20000274 	.word	0x20000274
 8000dfc:	20000288 	.word	0x20000288
 8000e00:	2000029c 	.word	0x2000029c
 8000e04:	200002b0 	.word	0x200002b0
 8000e08:	200002c4 	.word	0x200002c4
 8000e0c:	200002d8 	.word	0x200002d8
 8000e10:	200002ec 	.word	0x200002ec
 8000e14:	48000400 	.word	0x48000400
 8000e18:	2000021c 	.word	0x2000021c
 8000e1c:	20001c10 	.word	0x20001c10

08000e20 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000e28:	f009 ff68 	bl	800acfc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000e2c:	2001      	movs	r0, #1
 8000e2e:	f007 faf3 	bl	8008418 <osDelay>
 8000e32:	e7fb      	b.n	8000e2c <StartDefaultTask+0xc>

08000e34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e38:	b672      	cpsid	i
}
 8000e3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e3c:	e7fe      	b.n	8000e3c <Error_Handler+0x8>
	...

08000e40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e46:	4b11      	ldr	r3, [pc, #68]	; (8000e8c <HAL_MspInit+0x4c>)
 8000e48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e4a:	4a10      	ldr	r2, [pc, #64]	; (8000e8c <HAL_MspInit+0x4c>)
 8000e4c:	f043 0301 	orr.w	r3, r3, #1
 8000e50:	6613      	str	r3, [r2, #96]	; 0x60
 8000e52:	4b0e      	ldr	r3, [pc, #56]	; (8000e8c <HAL_MspInit+0x4c>)
 8000e54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e56:	f003 0301 	and.w	r3, r3, #1
 8000e5a:	607b      	str	r3, [r7, #4]
 8000e5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e5e:	4b0b      	ldr	r3, [pc, #44]	; (8000e8c <HAL_MspInit+0x4c>)
 8000e60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e62:	4a0a      	ldr	r2, [pc, #40]	; (8000e8c <HAL_MspInit+0x4c>)
 8000e64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e68:	6593      	str	r3, [r2, #88]	; 0x58
 8000e6a:	4b08      	ldr	r3, [pc, #32]	; (8000e8c <HAL_MspInit+0x4c>)
 8000e6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e72:	603b      	str	r3, [r7, #0]
 8000e74:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000e76:	2200      	movs	r2, #0
 8000e78:	210f      	movs	r1, #15
 8000e7a:	f06f 0001 	mvn.w	r0, #1
 8000e7e:	f000 fa62 	bl	8001346 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e82:	bf00      	nop
 8000e84:	3708      	adds	r7, #8
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	40021000 	.word	0x40021000

08000e90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b0ac      	sub	sp, #176	; 0xb0
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e98:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	601a      	str	r2, [r3, #0]
 8000ea0:	605a      	str	r2, [r3, #4]
 8000ea2:	609a      	str	r2, [r3, #8]
 8000ea4:	60da      	str	r2, [r3, #12]
 8000ea6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ea8:	f107 0310 	add.w	r3, r7, #16
 8000eac:	228c      	movs	r2, #140	; 0x8c
 8000eae:	2100      	movs	r1, #0
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f00a fcad 	bl	800b810 <memset>
  if(huart->Instance==LPUART1)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4a22      	ldr	r2, [pc, #136]	; (8000f44 <HAL_UART_MspInit+0xb4>)
 8000ebc:	4293      	cmp	r3, r2
 8000ebe:	d13d      	bne.n	8000f3c <HAL_UART_MspInit+0xac>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000ec0:	2320      	movs	r3, #32
 8000ec2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ec8:	f107 0310 	add.w	r3, r7, #16
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f002 fc95 	bl	80037fc <HAL_RCCEx_PeriphCLKConfig>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d001      	beq.n	8000edc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000ed8:	f7ff ffac 	bl	8000e34 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000edc:	4b1a      	ldr	r3, [pc, #104]	; (8000f48 <HAL_UART_MspInit+0xb8>)
 8000ede:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ee0:	4a19      	ldr	r2, [pc, #100]	; (8000f48 <HAL_UART_MspInit+0xb8>)
 8000ee2:	f043 0301 	orr.w	r3, r3, #1
 8000ee6:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000ee8:	4b17      	ldr	r3, [pc, #92]	; (8000f48 <HAL_UART_MspInit+0xb8>)
 8000eea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000eec:	f003 0301 	and.w	r3, r3, #1
 8000ef0:	60fb      	str	r3, [r7, #12]
 8000ef2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ef4:	4b14      	ldr	r3, [pc, #80]	; (8000f48 <HAL_UART_MspInit+0xb8>)
 8000ef6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ef8:	4a13      	ldr	r2, [pc, #76]	; (8000f48 <HAL_UART_MspInit+0xb8>)
 8000efa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000efe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f00:	4b11      	ldr	r3, [pc, #68]	; (8000f48 <HAL_UART_MspInit+0xb8>)
 8000f02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f08:	60bb      	str	r3, [r7, #8]
 8000f0a:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8000f0c:	f001 fe28 	bl	8002b60 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000f10:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000f14:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f18:	2302      	movs	r3, #2
 8000f1a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f24:	2303      	movs	r3, #3
 8000f26:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000f2a:	2308      	movs	r3, #8
 8000f2c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f30:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000f34:	4619      	mov	r1, r3
 8000f36:	4805      	ldr	r0, [pc, #20]	; (8000f4c <HAL_UART_MspInit+0xbc>)
 8000f38:	f000 fa3c 	bl	80013b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000f3c:	bf00      	nop
 8000f3e:	37b0      	adds	r7, #176	; 0xb0
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	40008000 	.word	0x40008000
 8000f48:	40021000 	.word	0x40021000
 8000f4c:	48001800 	.word	0x48001800

08000f50 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b085      	sub	sp, #20
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f60:	d10b      	bne.n	8000f7a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f62:	4b09      	ldr	r3, [pc, #36]	; (8000f88 <HAL_TIM_Base_MspInit+0x38>)
 8000f64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f66:	4a08      	ldr	r2, [pc, #32]	; (8000f88 <HAL_TIM_Base_MspInit+0x38>)
 8000f68:	f043 0301 	orr.w	r3, r3, #1
 8000f6c:	6593      	str	r3, [r2, #88]	; 0x58
 8000f6e:	4b06      	ldr	r3, [pc, #24]	; (8000f88 <HAL_TIM_Base_MspInit+0x38>)
 8000f70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f72:	f003 0301 	and.w	r3, r3, #1
 8000f76:	60fb      	str	r3, [r7, #12]
 8000f78:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000f7a:	bf00      	nop
 8000f7c:	3714      	adds	r7, #20
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	40021000 	.word	0x40021000

08000f8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f90:	e7fe      	b.n	8000f90 <NMI_Handler+0x4>

08000f92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f92:	b480      	push	{r7}
 8000f94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f96:	e7fe      	b.n	8000f96 <HardFault_Handler+0x4>

08000f98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f9c:	e7fe      	b.n	8000f9c <MemManage_Handler+0x4>

08000f9e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f9e:	b480      	push	{r7}
 8000fa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fa2:	e7fe      	b.n	8000fa2 <BusFault_Handler+0x4>

08000fa4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fa8:	e7fe      	b.n	8000fa8 <UsageFault_Handler+0x4>

08000faa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000faa:	b480      	push	{r7}
 8000fac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fae:	bf00      	nop
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr

08000fb8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fbc:	f000 f8a4 	bl	8001108 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000fc0:	f008 fe38 	bl	8009c34 <xTaskGetSchedulerState>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b01      	cmp	r3, #1
 8000fc8:	d001      	beq.n	8000fce <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000fca:	f009 fc1d 	bl	800a808 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fce:	bf00      	nop
 8000fd0:	bd80      	pop	{r7, pc}
	...

08000fd4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000fd8:	4802      	ldr	r0, [pc, #8]	; (8000fe4 <OTG_FS_IRQHandler+0x10>)
 8000fda:	f000 fd00 	bl	80019de <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000fde:	bf00      	nop
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	200020ec 	.word	0x200020ec

08000fe8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000fec:	4b06      	ldr	r3, [pc, #24]	; (8001008 <SystemInit+0x20>)
 8000fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ff2:	4a05      	ldr	r2, [pc, #20]	; (8001008 <SystemInit+0x20>)
 8000ff4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ff8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000ffc:	bf00      	nop
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	e000ed00 	.word	0xe000ed00

0800100c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800100c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001044 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001010:	f7ff ffea 	bl	8000fe8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001014:	480c      	ldr	r0, [pc, #48]	; (8001048 <LoopForever+0x6>)
  ldr r1, =_edata
 8001016:	490d      	ldr	r1, [pc, #52]	; (800104c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001018:	4a0d      	ldr	r2, [pc, #52]	; (8001050 <LoopForever+0xe>)
  movs r3, #0
 800101a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800101c:	e002      	b.n	8001024 <LoopCopyDataInit>

0800101e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800101e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001020:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001022:	3304      	adds	r3, #4

08001024 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001024:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001026:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001028:	d3f9      	bcc.n	800101e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800102a:	4a0a      	ldr	r2, [pc, #40]	; (8001054 <LoopForever+0x12>)
  ldr r4, =_ebss
 800102c:	4c0a      	ldr	r4, [pc, #40]	; (8001058 <LoopForever+0x16>)
  movs r3, #0
 800102e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001030:	e001      	b.n	8001036 <LoopFillZerobss>

08001032 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001032:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001034:	3204      	adds	r2, #4

08001036 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001036:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001038:	d3fb      	bcc.n	8001032 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800103a:	f00a fbf1 	bl	800b820 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800103e:	f7ff fa91 	bl	8000564 <main>

08001042 <LoopForever>:

LoopForever:
    b LoopForever
 8001042:	e7fe      	b.n	8001042 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001044:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001048:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800104c:	20000124 	.word	0x20000124
  ldr r2, =_sidata
 8001050:	0800b9b8 	.word	0x0800b9b8
  ldr r2, =_sbss
 8001054:	20000124 	.word	0x20000124
  ldr r4, =_ebss
 8001058:	2000260c 	.word	0x2000260c

0800105c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800105c:	e7fe      	b.n	800105c <ADC1_2_IRQHandler>

0800105e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800105e:	b580      	push	{r7, lr}
 8001060:	b082      	sub	sp, #8
 8001062:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001064:	2300      	movs	r3, #0
 8001066:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001068:	2003      	movs	r0, #3
 800106a:	f000 f961 	bl	8001330 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800106e:	200f      	movs	r0, #15
 8001070:	f000 f80e 	bl	8001090 <HAL_InitTick>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d002      	beq.n	8001080 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800107a:	2301      	movs	r3, #1
 800107c:	71fb      	strb	r3, [r7, #7]
 800107e:	e001      	b.n	8001084 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001080:	f7ff fede 	bl	8000e40 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001084:	79fb      	ldrb	r3, [r7, #7]
}
 8001086:	4618      	mov	r0, r3
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
	...

08001090 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001098:	2300      	movs	r3, #0
 800109a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800109c:	4b17      	ldr	r3, [pc, #92]	; (80010fc <HAL_InitTick+0x6c>)
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d023      	beq.n	80010ec <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80010a4:	4b16      	ldr	r3, [pc, #88]	; (8001100 <HAL_InitTick+0x70>)
 80010a6:	681a      	ldr	r2, [r3, #0]
 80010a8:	4b14      	ldr	r3, [pc, #80]	; (80010fc <HAL_InitTick+0x6c>)
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	4619      	mov	r1, r3
 80010ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80010b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80010ba:	4618      	mov	r0, r3
 80010bc:	f000 f96d 	bl	800139a <HAL_SYSTICK_Config>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d10f      	bne.n	80010e6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2b0f      	cmp	r3, #15
 80010ca:	d809      	bhi.n	80010e0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010cc:	2200      	movs	r2, #0
 80010ce:	6879      	ldr	r1, [r7, #4]
 80010d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80010d4:	f000 f937 	bl	8001346 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010d8:	4a0a      	ldr	r2, [pc, #40]	; (8001104 <HAL_InitTick+0x74>)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6013      	str	r3, [r2, #0]
 80010de:	e007      	b.n	80010f0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80010e0:	2301      	movs	r3, #1
 80010e2:	73fb      	strb	r3, [r7, #15]
 80010e4:	e004      	b.n	80010f0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80010e6:	2301      	movs	r3, #1
 80010e8:	73fb      	strb	r3, [r7, #15]
 80010ea:	e001      	b.n	80010f0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80010ec:	2301      	movs	r3, #1
 80010ee:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80010f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	3710      	adds	r7, #16
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	20000008 	.word	0x20000008
 8001100:	20000000 	.word	0x20000000
 8001104:	20000004 	.word	0x20000004

08001108 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800110c:	4b06      	ldr	r3, [pc, #24]	; (8001128 <HAL_IncTick+0x20>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	461a      	mov	r2, r3
 8001112:	4b06      	ldr	r3, [pc, #24]	; (800112c <HAL_IncTick+0x24>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4413      	add	r3, r2
 8001118:	4a04      	ldr	r2, [pc, #16]	; (800112c <HAL_IncTick+0x24>)
 800111a:	6013      	str	r3, [r2, #0]
}
 800111c:	bf00      	nop
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	20000008 	.word	0x20000008
 800112c:	20000300 	.word	0x20000300

08001130 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  return uwTick;
 8001134:	4b03      	ldr	r3, [pc, #12]	; (8001144 <HAL_GetTick+0x14>)
 8001136:	681b      	ldr	r3, [r3, #0]
}
 8001138:	4618      	mov	r0, r3
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	20000300 	.word	0x20000300

08001148 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001150:	f7ff ffee 	bl	8001130 <HAL_GetTick>
 8001154:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001160:	d005      	beq.n	800116e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001162:	4b0a      	ldr	r3, [pc, #40]	; (800118c <HAL_Delay+0x44>)
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	461a      	mov	r2, r3
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	4413      	add	r3, r2
 800116c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800116e:	bf00      	nop
 8001170:	f7ff ffde 	bl	8001130 <HAL_GetTick>
 8001174:	4602      	mov	r2, r0
 8001176:	68bb      	ldr	r3, [r7, #8]
 8001178:	1ad3      	subs	r3, r2, r3
 800117a:	68fa      	ldr	r2, [r7, #12]
 800117c:	429a      	cmp	r2, r3
 800117e:	d8f7      	bhi.n	8001170 <HAL_Delay+0x28>
  {
  }
}
 8001180:	bf00      	nop
 8001182:	bf00      	nop
 8001184:	3710      	adds	r7, #16
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	20000008 	.word	0x20000008

08001190 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001190:	b480      	push	{r7}
 8001192:	b085      	sub	sp, #20
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	f003 0307 	and.w	r3, r3, #7
 800119e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011a0:	4b0c      	ldr	r3, [pc, #48]	; (80011d4 <__NVIC_SetPriorityGrouping+0x44>)
 80011a2:	68db      	ldr	r3, [r3, #12]
 80011a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011a6:	68ba      	ldr	r2, [r7, #8]
 80011a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011ac:	4013      	ands	r3, r2
 80011ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011c2:	4a04      	ldr	r2, [pc, #16]	; (80011d4 <__NVIC_SetPriorityGrouping+0x44>)
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	60d3      	str	r3, [r2, #12]
}
 80011c8:	bf00      	nop
 80011ca:	3714      	adds	r7, #20
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr
 80011d4:	e000ed00 	.word	0xe000ed00

080011d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011dc:	4b04      	ldr	r3, [pc, #16]	; (80011f0 <__NVIC_GetPriorityGrouping+0x18>)
 80011de:	68db      	ldr	r3, [r3, #12]
 80011e0:	0a1b      	lsrs	r3, r3, #8
 80011e2:	f003 0307 	and.w	r3, r3, #7
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr
 80011f0:	e000ed00 	.word	0xe000ed00

080011f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	4603      	mov	r3, r0
 80011fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001202:	2b00      	cmp	r3, #0
 8001204:	db0b      	blt.n	800121e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001206:	79fb      	ldrb	r3, [r7, #7]
 8001208:	f003 021f 	and.w	r2, r3, #31
 800120c:	4907      	ldr	r1, [pc, #28]	; (800122c <__NVIC_EnableIRQ+0x38>)
 800120e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001212:	095b      	lsrs	r3, r3, #5
 8001214:	2001      	movs	r0, #1
 8001216:	fa00 f202 	lsl.w	r2, r0, r2
 800121a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800121e:	bf00      	nop
 8001220:	370c      	adds	r7, #12
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	e000e100 	.word	0xe000e100

08001230 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
 8001236:	4603      	mov	r3, r0
 8001238:	6039      	str	r1, [r7, #0]
 800123a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800123c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001240:	2b00      	cmp	r3, #0
 8001242:	db0a      	blt.n	800125a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	b2da      	uxtb	r2, r3
 8001248:	490c      	ldr	r1, [pc, #48]	; (800127c <__NVIC_SetPriority+0x4c>)
 800124a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800124e:	0112      	lsls	r2, r2, #4
 8001250:	b2d2      	uxtb	r2, r2
 8001252:	440b      	add	r3, r1
 8001254:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001258:	e00a      	b.n	8001270 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	b2da      	uxtb	r2, r3
 800125e:	4908      	ldr	r1, [pc, #32]	; (8001280 <__NVIC_SetPriority+0x50>)
 8001260:	79fb      	ldrb	r3, [r7, #7]
 8001262:	f003 030f 	and.w	r3, r3, #15
 8001266:	3b04      	subs	r3, #4
 8001268:	0112      	lsls	r2, r2, #4
 800126a:	b2d2      	uxtb	r2, r2
 800126c:	440b      	add	r3, r1
 800126e:	761a      	strb	r2, [r3, #24]
}
 8001270:	bf00      	nop
 8001272:	370c      	adds	r7, #12
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr
 800127c:	e000e100 	.word	0xe000e100
 8001280:	e000ed00 	.word	0xe000ed00

08001284 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001284:	b480      	push	{r7}
 8001286:	b089      	sub	sp, #36	; 0x24
 8001288:	af00      	add	r7, sp, #0
 800128a:	60f8      	str	r0, [r7, #12]
 800128c:	60b9      	str	r1, [r7, #8]
 800128e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	f003 0307 	and.w	r3, r3, #7
 8001296:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001298:	69fb      	ldr	r3, [r7, #28]
 800129a:	f1c3 0307 	rsb	r3, r3, #7
 800129e:	2b04      	cmp	r3, #4
 80012a0:	bf28      	it	cs
 80012a2:	2304      	movcs	r3, #4
 80012a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	3304      	adds	r3, #4
 80012aa:	2b06      	cmp	r3, #6
 80012ac:	d902      	bls.n	80012b4 <NVIC_EncodePriority+0x30>
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	3b03      	subs	r3, #3
 80012b2:	e000      	b.n	80012b6 <NVIC_EncodePriority+0x32>
 80012b4:	2300      	movs	r3, #0
 80012b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80012bc:	69bb      	ldr	r3, [r7, #24]
 80012be:	fa02 f303 	lsl.w	r3, r2, r3
 80012c2:	43da      	mvns	r2, r3
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	401a      	ands	r2, r3
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012cc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	fa01 f303 	lsl.w	r3, r1, r3
 80012d6:	43d9      	mvns	r1, r3
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012dc:	4313      	orrs	r3, r2
         );
}
 80012de:	4618      	mov	r0, r3
 80012e0:	3724      	adds	r7, #36	; 0x24
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
	...

080012ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	3b01      	subs	r3, #1
 80012f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012fc:	d301      	bcc.n	8001302 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012fe:	2301      	movs	r3, #1
 8001300:	e00f      	b.n	8001322 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001302:	4a0a      	ldr	r2, [pc, #40]	; (800132c <SysTick_Config+0x40>)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	3b01      	subs	r3, #1
 8001308:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800130a:	210f      	movs	r1, #15
 800130c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001310:	f7ff ff8e 	bl	8001230 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001314:	4b05      	ldr	r3, [pc, #20]	; (800132c <SysTick_Config+0x40>)
 8001316:	2200      	movs	r2, #0
 8001318:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800131a:	4b04      	ldr	r3, [pc, #16]	; (800132c <SysTick_Config+0x40>)
 800131c:	2207      	movs	r2, #7
 800131e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001320:	2300      	movs	r3, #0
}
 8001322:	4618      	mov	r0, r3
 8001324:	3708      	adds	r7, #8
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	e000e010 	.word	0xe000e010

08001330 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001338:	6878      	ldr	r0, [r7, #4]
 800133a:	f7ff ff29 	bl	8001190 <__NVIC_SetPriorityGrouping>
}
 800133e:	bf00      	nop
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}

08001346 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001346:	b580      	push	{r7, lr}
 8001348:	b086      	sub	sp, #24
 800134a:	af00      	add	r7, sp, #0
 800134c:	4603      	mov	r3, r0
 800134e:	60b9      	str	r1, [r7, #8]
 8001350:	607a      	str	r2, [r7, #4]
 8001352:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001354:	2300      	movs	r3, #0
 8001356:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001358:	f7ff ff3e 	bl	80011d8 <__NVIC_GetPriorityGrouping>
 800135c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800135e:	687a      	ldr	r2, [r7, #4]
 8001360:	68b9      	ldr	r1, [r7, #8]
 8001362:	6978      	ldr	r0, [r7, #20]
 8001364:	f7ff ff8e 	bl	8001284 <NVIC_EncodePriority>
 8001368:	4602      	mov	r2, r0
 800136a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800136e:	4611      	mov	r1, r2
 8001370:	4618      	mov	r0, r3
 8001372:	f7ff ff5d 	bl	8001230 <__NVIC_SetPriority>
}
 8001376:	bf00      	nop
 8001378:	3718      	adds	r7, #24
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}

0800137e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800137e:	b580      	push	{r7, lr}
 8001380:	b082      	sub	sp, #8
 8001382:	af00      	add	r7, sp, #0
 8001384:	4603      	mov	r3, r0
 8001386:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001388:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff ff31 	bl	80011f4 <__NVIC_EnableIRQ>
}
 8001392:	bf00      	nop
 8001394:	3708      	adds	r7, #8
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}

0800139a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800139a:	b580      	push	{r7, lr}
 800139c:	b082      	sub	sp, #8
 800139e:	af00      	add	r7, sp, #0
 80013a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013a2:	6878      	ldr	r0, [r7, #4]
 80013a4:	f7ff ffa2 	bl	80012ec <SysTick_Config>
 80013a8:	4603      	mov	r3, r0
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3708      	adds	r7, #8
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
	...

080013b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b087      	sub	sp, #28
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
 80013bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013be:	2300      	movs	r3, #0
 80013c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013c2:	e166      	b.n	8001692 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	2101      	movs	r1, #1
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	fa01 f303 	lsl.w	r3, r1, r3
 80013d0:	4013      	ands	r3, r2
 80013d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	f000 8158 	beq.w	800168c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f003 0303 	and.w	r3, r3, #3
 80013e4:	2b01      	cmp	r3, #1
 80013e6:	d005      	beq.n	80013f4 <HAL_GPIO_Init+0x40>
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	f003 0303 	and.w	r3, r3, #3
 80013f0:	2b02      	cmp	r3, #2
 80013f2:	d130      	bne.n	8001456 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	689b      	ldr	r3, [r3, #8]
 80013f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	005b      	lsls	r3, r3, #1
 80013fe:	2203      	movs	r2, #3
 8001400:	fa02 f303 	lsl.w	r3, r2, r3
 8001404:	43db      	mvns	r3, r3
 8001406:	693a      	ldr	r2, [r7, #16]
 8001408:	4013      	ands	r3, r2
 800140a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	68da      	ldr	r2, [r3, #12]
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	005b      	lsls	r3, r3, #1
 8001414:	fa02 f303 	lsl.w	r3, r2, r3
 8001418:	693a      	ldr	r2, [r7, #16]
 800141a:	4313      	orrs	r3, r2
 800141c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	693a      	ldr	r2, [r7, #16]
 8001422:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800142a:	2201      	movs	r2, #1
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	fa02 f303 	lsl.w	r3, r2, r3
 8001432:	43db      	mvns	r3, r3
 8001434:	693a      	ldr	r2, [r7, #16]
 8001436:	4013      	ands	r3, r2
 8001438:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	091b      	lsrs	r3, r3, #4
 8001440:	f003 0201 	and.w	r2, r3, #1
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	fa02 f303 	lsl.w	r3, r2, r3
 800144a:	693a      	ldr	r2, [r7, #16]
 800144c:	4313      	orrs	r3, r2
 800144e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	693a      	ldr	r2, [r7, #16]
 8001454:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	f003 0303 	and.w	r3, r3, #3
 800145e:	2b03      	cmp	r3, #3
 8001460:	d017      	beq.n	8001492 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	68db      	ldr	r3, [r3, #12]
 8001466:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	005b      	lsls	r3, r3, #1
 800146c:	2203      	movs	r2, #3
 800146e:	fa02 f303 	lsl.w	r3, r2, r3
 8001472:	43db      	mvns	r3, r3
 8001474:	693a      	ldr	r2, [r7, #16]
 8001476:	4013      	ands	r3, r2
 8001478:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	689a      	ldr	r2, [r3, #8]
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	005b      	lsls	r3, r3, #1
 8001482:	fa02 f303 	lsl.w	r3, r2, r3
 8001486:	693a      	ldr	r2, [r7, #16]
 8001488:	4313      	orrs	r3, r2
 800148a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	693a      	ldr	r2, [r7, #16]
 8001490:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	f003 0303 	and.w	r3, r3, #3
 800149a:	2b02      	cmp	r3, #2
 800149c:	d123      	bne.n	80014e6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800149e:	697b      	ldr	r3, [r7, #20]
 80014a0:	08da      	lsrs	r2, r3, #3
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	3208      	adds	r2, #8
 80014a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014aa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	f003 0307 	and.w	r3, r3, #7
 80014b2:	009b      	lsls	r3, r3, #2
 80014b4:	220f      	movs	r2, #15
 80014b6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ba:	43db      	mvns	r3, r3
 80014bc:	693a      	ldr	r2, [r7, #16]
 80014be:	4013      	ands	r3, r2
 80014c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	691a      	ldr	r2, [r3, #16]
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	f003 0307 	and.w	r3, r3, #7
 80014cc:	009b      	lsls	r3, r3, #2
 80014ce:	fa02 f303 	lsl.w	r3, r2, r3
 80014d2:	693a      	ldr	r2, [r7, #16]
 80014d4:	4313      	orrs	r3, r2
 80014d6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	08da      	lsrs	r2, r3, #3
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	3208      	adds	r2, #8
 80014e0:	6939      	ldr	r1, [r7, #16]
 80014e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	005b      	lsls	r3, r3, #1
 80014f0:	2203      	movs	r2, #3
 80014f2:	fa02 f303 	lsl.w	r3, r2, r3
 80014f6:	43db      	mvns	r3, r3
 80014f8:	693a      	ldr	r2, [r7, #16]
 80014fa:	4013      	ands	r3, r2
 80014fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	f003 0203 	and.w	r2, r3, #3
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	005b      	lsls	r3, r3, #1
 800150a:	fa02 f303 	lsl.w	r3, r2, r3
 800150e:	693a      	ldr	r2, [r7, #16]
 8001510:	4313      	orrs	r3, r2
 8001512:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	693a      	ldr	r2, [r7, #16]
 8001518:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001522:	2b00      	cmp	r3, #0
 8001524:	f000 80b2 	beq.w	800168c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001528:	4b61      	ldr	r3, [pc, #388]	; (80016b0 <HAL_GPIO_Init+0x2fc>)
 800152a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800152c:	4a60      	ldr	r2, [pc, #384]	; (80016b0 <HAL_GPIO_Init+0x2fc>)
 800152e:	f043 0301 	orr.w	r3, r3, #1
 8001532:	6613      	str	r3, [r2, #96]	; 0x60
 8001534:	4b5e      	ldr	r3, [pc, #376]	; (80016b0 <HAL_GPIO_Init+0x2fc>)
 8001536:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001538:	f003 0301 	and.w	r3, r3, #1
 800153c:	60bb      	str	r3, [r7, #8]
 800153e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001540:	4a5c      	ldr	r2, [pc, #368]	; (80016b4 <HAL_GPIO_Init+0x300>)
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	089b      	lsrs	r3, r3, #2
 8001546:	3302      	adds	r3, #2
 8001548:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800154c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	f003 0303 	and.w	r3, r3, #3
 8001554:	009b      	lsls	r3, r3, #2
 8001556:	220f      	movs	r2, #15
 8001558:	fa02 f303 	lsl.w	r3, r2, r3
 800155c:	43db      	mvns	r3, r3
 800155e:	693a      	ldr	r2, [r7, #16]
 8001560:	4013      	ands	r3, r2
 8001562:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800156a:	d02b      	beq.n	80015c4 <HAL_GPIO_Init+0x210>
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	4a52      	ldr	r2, [pc, #328]	; (80016b8 <HAL_GPIO_Init+0x304>)
 8001570:	4293      	cmp	r3, r2
 8001572:	d025      	beq.n	80015c0 <HAL_GPIO_Init+0x20c>
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	4a51      	ldr	r2, [pc, #324]	; (80016bc <HAL_GPIO_Init+0x308>)
 8001578:	4293      	cmp	r3, r2
 800157a:	d01f      	beq.n	80015bc <HAL_GPIO_Init+0x208>
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	4a50      	ldr	r2, [pc, #320]	; (80016c0 <HAL_GPIO_Init+0x30c>)
 8001580:	4293      	cmp	r3, r2
 8001582:	d019      	beq.n	80015b8 <HAL_GPIO_Init+0x204>
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	4a4f      	ldr	r2, [pc, #316]	; (80016c4 <HAL_GPIO_Init+0x310>)
 8001588:	4293      	cmp	r3, r2
 800158a:	d013      	beq.n	80015b4 <HAL_GPIO_Init+0x200>
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	4a4e      	ldr	r2, [pc, #312]	; (80016c8 <HAL_GPIO_Init+0x314>)
 8001590:	4293      	cmp	r3, r2
 8001592:	d00d      	beq.n	80015b0 <HAL_GPIO_Init+0x1fc>
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	4a4d      	ldr	r2, [pc, #308]	; (80016cc <HAL_GPIO_Init+0x318>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d007      	beq.n	80015ac <HAL_GPIO_Init+0x1f8>
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	4a4c      	ldr	r2, [pc, #304]	; (80016d0 <HAL_GPIO_Init+0x31c>)
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d101      	bne.n	80015a8 <HAL_GPIO_Init+0x1f4>
 80015a4:	2307      	movs	r3, #7
 80015a6:	e00e      	b.n	80015c6 <HAL_GPIO_Init+0x212>
 80015a8:	2308      	movs	r3, #8
 80015aa:	e00c      	b.n	80015c6 <HAL_GPIO_Init+0x212>
 80015ac:	2306      	movs	r3, #6
 80015ae:	e00a      	b.n	80015c6 <HAL_GPIO_Init+0x212>
 80015b0:	2305      	movs	r3, #5
 80015b2:	e008      	b.n	80015c6 <HAL_GPIO_Init+0x212>
 80015b4:	2304      	movs	r3, #4
 80015b6:	e006      	b.n	80015c6 <HAL_GPIO_Init+0x212>
 80015b8:	2303      	movs	r3, #3
 80015ba:	e004      	b.n	80015c6 <HAL_GPIO_Init+0x212>
 80015bc:	2302      	movs	r3, #2
 80015be:	e002      	b.n	80015c6 <HAL_GPIO_Init+0x212>
 80015c0:	2301      	movs	r3, #1
 80015c2:	e000      	b.n	80015c6 <HAL_GPIO_Init+0x212>
 80015c4:	2300      	movs	r3, #0
 80015c6:	697a      	ldr	r2, [r7, #20]
 80015c8:	f002 0203 	and.w	r2, r2, #3
 80015cc:	0092      	lsls	r2, r2, #2
 80015ce:	4093      	lsls	r3, r2
 80015d0:	693a      	ldr	r2, [r7, #16]
 80015d2:	4313      	orrs	r3, r2
 80015d4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80015d6:	4937      	ldr	r1, [pc, #220]	; (80016b4 <HAL_GPIO_Init+0x300>)
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	089b      	lsrs	r3, r3, #2
 80015dc:	3302      	adds	r3, #2
 80015de:	693a      	ldr	r2, [r7, #16]
 80015e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80015e4:	4b3b      	ldr	r3, [pc, #236]	; (80016d4 <HAL_GPIO_Init+0x320>)
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	43db      	mvns	r3, r3
 80015ee:	693a      	ldr	r2, [r7, #16]
 80015f0:	4013      	ands	r3, r2
 80015f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d003      	beq.n	8001608 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001600:	693a      	ldr	r2, [r7, #16]
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	4313      	orrs	r3, r2
 8001606:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001608:	4a32      	ldr	r2, [pc, #200]	; (80016d4 <HAL_GPIO_Init+0x320>)
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800160e:	4b31      	ldr	r3, [pc, #196]	; (80016d4 <HAL_GPIO_Init+0x320>)
 8001610:	68db      	ldr	r3, [r3, #12]
 8001612:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	43db      	mvns	r3, r3
 8001618:	693a      	ldr	r2, [r7, #16]
 800161a:	4013      	ands	r3, r2
 800161c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001626:	2b00      	cmp	r3, #0
 8001628:	d003      	beq.n	8001632 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800162a:	693a      	ldr	r2, [r7, #16]
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	4313      	orrs	r3, r2
 8001630:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001632:	4a28      	ldr	r2, [pc, #160]	; (80016d4 <HAL_GPIO_Init+0x320>)
 8001634:	693b      	ldr	r3, [r7, #16]
 8001636:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001638:	4b26      	ldr	r3, [pc, #152]	; (80016d4 <HAL_GPIO_Init+0x320>)
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	43db      	mvns	r3, r3
 8001642:	693a      	ldr	r2, [r7, #16]
 8001644:	4013      	ands	r3, r2
 8001646:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001650:	2b00      	cmp	r3, #0
 8001652:	d003      	beq.n	800165c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001654:	693a      	ldr	r2, [r7, #16]
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	4313      	orrs	r3, r2
 800165a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800165c:	4a1d      	ldr	r2, [pc, #116]	; (80016d4 <HAL_GPIO_Init+0x320>)
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001662:	4b1c      	ldr	r3, [pc, #112]	; (80016d4 <HAL_GPIO_Init+0x320>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	43db      	mvns	r3, r3
 800166c:	693a      	ldr	r2, [r7, #16]
 800166e:	4013      	ands	r3, r2
 8001670:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800167a:	2b00      	cmp	r3, #0
 800167c:	d003      	beq.n	8001686 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800167e:	693a      	ldr	r2, [r7, #16]
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	4313      	orrs	r3, r2
 8001684:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001686:	4a13      	ldr	r2, [pc, #76]	; (80016d4 <HAL_GPIO_Init+0x320>)
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	3301      	adds	r3, #1
 8001690:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	fa22 f303 	lsr.w	r3, r2, r3
 800169c:	2b00      	cmp	r3, #0
 800169e:	f47f ae91 	bne.w	80013c4 <HAL_GPIO_Init+0x10>
  }
}
 80016a2:	bf00      	nop
 80016a4:	bf00      	nop
 80016a6:	371c      	adds	r7, #28
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr
 80016b0:	40021000 	.word	0x40021000
 80016b4:	40010000 	.word	0x40010000
 80016b8:	48000400 	.word	0x48000400
 80016bc:	48000800 	.word	0x48000800
 80016c0:	48000c00 	.word	0x48000c00
 80016c4:	48001000 	.word	0x48001000
 80016c8:	48001400 	.word	0x48001400
 80016cc:	48001800 	.word	0x48001800
 80016d0:	48001c00 	.word	0x48001c00
 80016d4:	40010400 	.word	0x40010400

080016d8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80016d8:	b480      	push	{r7}
 80016da:	b085      	sub	sp, #20
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
 80016e0:	460b      	mov	r3, r1
 80016e2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	691a      	ldr	r2, [r3, #16]
 80016e8:	887b      	ldrh	r3, [r7, #2]
 80016ea:	4013      	ands	r3, r2
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d002      	beq.n	80016f6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80016f0:	2301      	movs	r3, #1
 80016f2:	73fb      	strb	r3, [r7, #15]
 80016f4:	e001      	b.n	80016fa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80016f6:	2300      	movs	r3, #0
 80016f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80016fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	3714      	adds	r7, #20
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr

08001708 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
 8001710:	460b      	mov	r3, r1
 8001712:	807b      	strh	r3, [r7, #2]
 8001714:	4613      	mov	r3, r2
 8001716:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001718:	787b      	ldrb	r3, [r7, #1]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d003      	beq.n	8001726 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800171e:	887a      	ldrh	r2, [r7, #2]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001724:	e002      	b.n	800172c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001726:	887a      	ldrh	r2, [r7, #2]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800172c:	bf00      	nop
 800172e:	370c      	adds	r7, #12
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr

08001738 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001738:	b5f0      	push	{r4, r5, r6, r7, lr}
 800173a:	b08f      	sub	sp, #60	; 0x3c
 800173c:	af0a      	add	r7, sp, #40	; 0x28
 800173e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d101      	bne.n	800174a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	e116      	b.n	8001978 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001756:	b2db      	uxtb	r3, r3
 8001758:	2b00      	cmp	r3, #0
 800175a:	d106      	bne.n	800176a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2200      	movs	r2, #0
 8001760:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001764:	6878      	ldr	r0, [r7, #4]
 8001766:	f009 fc11 	bl	800af8c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2203      	movs	r2, #3
 800176e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001772:	68bb      	ldr	r3, [r7, #8]
 8001774:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001776:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800177a:	2b00      	cmp	r3, #0
 800177c:	d102      	bne.n	8001784 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2200      	movs	r2, #0
 8001782:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4618      	mov	r0, r3
 800178a:	f003 fe4c 	bl	8005426 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	603b      	str	r3, [r7, #0]
 8001794:	687e      	ldr	r6, [r7, #4]
 8001796:	466d      	mov	r5, sp
 8001798:	f106 0410 	add.w	r4, r6, #16
 800179c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800179e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017a4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80017a8:	e885 0003 	stmia.w	r5, {r0, r1}
 80017ac:	1d33      	adds	r3, r6, #4
 80017ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017b0:	6838      	ldr	r0, [r7, #0]
 80017b2:	f003 fd5e 	bl	8005272 <USB_CoreInit>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d005      	beq.n	80017c8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2202      	movs	r2, #2
 80017c0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80017c4:	2301      	movs	r3, #1
 80017c6:	e0d7      	b.n	8001978 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	2100      	movs	r1, #0
 80017ce:	4618      	mov	r0, r3
 80017d0:	f003 fe3a 	bl	8005448 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017d4:	2300      	movs	r3, #0
 80017d6:	73fb      	strb	r3, [r7, #15]
 80017d8:	e04a      	b.n	8001870 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80017da:	7bfa      	ldrb	r2, [r7, #15]
 80017dc:	6879      	ldr	r1, [r7, #4]
 80017de:	4613      	mov	r3, r2
 80017e0:	00db      	lsls	r3, r3, #3
 80017e2:	4413      	add	r3, r2
 80017e4:	009b      	lsls	r3, r3, #2
 80017e6:	440b      	add	r3, r1
 80017e8:	333d      	adds	r3, #61	; 0x3d
 80017ea:	2201      	movs	r2, #1
 80017ec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80017ee:	7bfa      	ldrb	r2, [r7, #15]
 80017f0:	6879      	ldr	r1, [r7, #4]
 80017f2:	4613      	mov	r3, r2
 80017f4:	00db      	lsls	r3, r3, #3
 80017f6:	4413      	add	r3, r2
 80017f8:	009b      	lsls	r3, r3, #2
 80017fa:	440b      	add	r3, r1
 80017fc:	333c      	adds	r3, #60	; 0x3c
 80017fe:	7bfa      	ldrb	r2, [r7, #15]
 8001800:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001802:	7bfa      	ldrb	r2, [r7, #15]
 8001804:	7bfb      	ldrb	r3, [r7, #15]
 8001806:	b298      	uxth	r0, r3
 8001808:	6879      	ldr	r1, [r7, #4]
 800180a:	4613      	mov	r3, r2
 800180c:	00db      	lsls	r3, r3, #3
 800180e:	4413      	add	r3, r2
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	440b      	add	r3, r1
 8001814:	3356      	adds	r3, #86	; 0x56
 8001816:	4602      	mov	r2, r0
 8001818:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800181a:	7bfa      	ldrb	r2, [r7, #15]
 800181c:	6879      	ldr	r1, [r7, #4]
 800181e:	4613      	mov	r3, r2
 8001820:	00db      	lsls	r3, r3, #3
 8001822:	4413      	add	r3, r2
 8001824:	009b      	lsls	r3, r3, #2
 8001826:	440b      	add	r3, r1
 8001828:	3340      	adds	r3, #64	; 0x40
 800182a:	2200      	movs	r2, #0
 800182c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800182e:	7bfa      	ldrb	r2, [r7, #15]
 8001830:	6879      	ldr	r1, [r7, #4]
 8001832:	4613      	mov	r3, r2
 8001834:	00db      	lsls	r3, r3, #3
 8001836:	4413      	add	r3, r2
 8001838:	009b      	lsls	r3, r3, #2
 800183a:	440b      	add	r3, r1
 800183c:	3344      	adds	r3, #68	; 0x44
 800183e:	2200      	movs	r2, #0
 8001840:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001842:	7bfa      	ldrb	r2, [r7, #15]
 8001844:	6879      	ldr	r1, [r7, #4]
 8001846:	4613      	mov	r3, r2
 8001848:	00db      	lsls	r3, r3, #3
 800184a:	4413      	add	r3, r2
 800184c:	009b      	lsls	r3, r3, #2
 800184e:	440b      	add	r3, r1
 8001850:	3348      	adds	r3, #72	; 0x48
 8001852:	2200      	movs	r2, #0
 8001854:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001856:	7bfa      	ldrb	r2, [r7, #15]
 8001858:	6879      	ldr	r1, [r7, #4]
 800185a:	4613      	mov	r3, r2
 800185c:	00db      	lsls	r3, r3, #3
 800185e:	4413      	add	r3, r2
 8001860:	009b      	lsls	r3, r3, #2
 8001862:	440b      	add	r3, r1
 8001864:	334c      	adds	r3, #76	; 0x4c
 8001866:	2200      	movs	r2, #0
 8001868:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800186a:	7bfb      	ldrb	r3, [r7, #15]
 800186c:	3301      	adds	r3, #1
 800186e:	73fb      	strb	r3, [r7, #15]
 8001870:	7bfa      	ldrb	r2, [r7, #15]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	429a      	cmp	r2, r3
 8001878:	d3af      	bcc.n	80017da <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800187a:	2300      	movs	r3, #0
 800187c:	73fb      	strb	r3, [r7, #15]
 800187e:	e044      	b.n	800190a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001880:	7bfa      	ldrb	r2, [r7, #15]
 8001882:	6879      	ldr	r1, [r7, #4]
 8001884:	4613      	mov	r3, r2
 8001886:	00db      	lsls	r3, r3, #3
 8001888:	4413      	add	r3, r2
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	440b      	add	r3, r1
 800188e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001892:	2200      	movs	r2, #0
 8001894:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001896:	7bfa      	ldrb	r2, [r7, #15]
 8001898:	6879      	ldr	r1, [r7, #4]
 800189a:	4613      	mov	r3, r2
 800189c:	00db      	lsls	r3, r3, #3
 800189e:	4413      	add	r3, r2
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	440b      	add	r3, r1
 80018a4:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80018a8:	7bfa      	ldrb	r2, [r7, #15]
 80018aa:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80018ac:	7bfa      	ldrb	r2, [r7, #15]
 80018ae:	6879      	ldr	r1, [r7, #4]
 80018b0:	4613      	mov	r3, r2
 80018b2:	00db      	lsls	r3, r3, #3
 80018b4:	4413      	add	r3, r2
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	440b      	add	r3, r1
 80018ba:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80018be:	2200      	movs	r2, #0
 80018c0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80018c2:	7bfa      	ldrb	r2, [r7, #15]
 80018c4:	6879      	ldr	r1, [r7, #4]
 80018c6:	4613      	mov	r3, r2
 80018c8:	00db      	lsls	r3, r3, #3
 80018ca:	4413      	add	r3, r2
 80018cc:	009b      	lsls	r3, r3, #2
 80018ce:	440b      	add	r3, r1
 80018d0:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80018d4:	2200      	movs	r2, #0
 80018d6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80018d8:	7bfa      	ldrb	r2, [r7, #15]
 80018da:	6879      	ldr	r1, [r7, #4]
 80018dc:	4613      	mov	r3, r2
 80018de:	00db      	lsls	r3, r3, #3
 80018e0:	4413      	add	r3, r2
 80018e2:	009b      	lsls	r3, r3, #2
 80018e4:	440b      	add	r3, r1
 80018e6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80018ea:	2200      	movs	r2, #0
 80018ec:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80018ee:	7bfa      	ldrb	r2, [r7, #15]
 80018f0:	6879      	ldr	r1, [r7, #4]
 80018f2:	4613      	mov	r3, r2
 80018f4:	00db      	lsls	r3, r3, #3
 80018f6:	4413      	add	r3, r2
 80018f8:	009b      	lsls	r3, r3, #2
 80018fa:	440b      	add	r3, r1
 80018fc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001900:	2200      	movs	r2, #0
 8001902:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001904:	7bfb      	ldrb	r3, [r7, #15]
 8001906:	3301      	adds	r3, #1
 8001908:	73fb      	strb	r3, [r7, #15]
 800190a:	7bfa      	ldrb	r2, [r7, #15]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	429a      	cmp	r2, r3
 8001912:	d3b5      	bcc.n	8001880 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	603b      	str	r3, [r7, #0]
 800191a:	687e      	ldr	r6, [r7, #4]
 800191c:	466d      	mov	r5, sp
 800191e:	f106 0410 	add.w	r4, r6, #16
 8001922:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001924:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001926:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001928:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800192a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800192e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001932:	1d33      	adds	r3, r6, #4
 8001934:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001936:	6838      	ldr	r0, [r7, #0]
 8001938:	f003 fdd2 	bl	80054e0 <USB_DevInit>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d005      	beq.n	800194e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2202      	movs	r2, #2
 8001946:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	e014      	b.n	8001978 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2200      	movs	r2, #0
 8001952:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2201      	movs	r2, #1
 800195a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001962:	2b01      	cmp	r3, #1
 8001964:	d102      	bne.n	800196c <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001966:	6878      	ldr	r0, [r7, #4]
 8001968:	f001 f852 	bl	8002a10 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4618      	mov	r0, r3
 8001972:	f004 fd80 	bl	8006476 <USB_DevDisconnect>

  return HAL_OK;
 8001976:	2300      	movs	r3, #0
}
 8001978:	4618      	mov	r0, r3
 800197a:	3714      	adds	r7, #20
 800197c:	46bd      	mov	sp, r7
 800197e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001980 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b084      	sub	sp, #16
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001994:	2b01      	cmp	r3, #1
 8001996:	d101      	bne.n	800199c <HAL_PCD_Start+0x1c>
 8001998:	2302      	movs	r3, #2
 800199a:	e01c      	b.n	80019d6 <HAL_PCD_Start+0x56>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2201      	movs	r2, #1
 80019a0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019a8:	2b01      	cmp	r3, #1
 80019aa:	d105      	bne.n	80019b8 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019b0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4618      	mov	r0, r3
 80019be:	f003 fd21 	bl	8005404 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4618      	mov	r0, r3
 80019c8:	f004 fd34 	bl	8006434 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2200      	movs	r2, #0
 80019d0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80019d4:	2300      	movs	r3, #0
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	3710      	adds	r7, #16
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}

080019de <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80019de:	b590      	push	{r4, r7, lr}
 80019e0:	b08d      	sub	sp, #52	; 0x34
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80019ec:	6a3b      	ldr	r3, [r7, #32]
 80019ee:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4618      	mov	r0, r3
 80019f6:	f004 fdf2 	bl	80065de <USB_GetMode>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	f040 847e 	bne.w	80022fe <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4618      	mov	r0, r3
 8001a08:	f004 fd56 	bl	80064b8 <USB_ReadInterrupts>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	f000 8474 	beq.w	80022fc <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001a14:	69fb      	ldr	r3, [r7, #28]
 8001a16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	0a1b      	lsrs	r3, r3, #8
 8001a1e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f004 fd43 	bl	80064b8 <USB_ReadInterrupts>
 8001a32:	4603      	mov	r3, r0
 8001a34:	f003 0302 	and.w	r3, r3, #2
 8001a38:	2b02      	cmp	r3, #2
 8001a3a:	d107      	bne.n	8001a4c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	695a      	ldr	r2, [r3, #20]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f002 0202 	and.w	r2, r2, #2
 8001a4a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4618      	mov	r0, r3
 8001a52:	f004 fd31 	bl	80064b8 <USB_ReadInterrupts>
 8001a56:	4603      	mov	r3, r0
 8001a58:	f003 0310 	and.w	r3, r3, #16
 8001a5c:	2b10      	cmp	r3, #16
 8001a5e:	d161      	bne.n	8001b24 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	699a      	ldr	r2, [r3, #24]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f022 0210 	bic.w	r2, r2, #16
 8001a6e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001a70:	6a3b      	ldr	r3, [r7, #32]
 8001a72:	6a1b      	ldr	r3, [r3, #32]
 8001a74:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001a76:	69bb      	ldr	r3, [r7, #24]
 8001a78:	f003 020f 	and.w	r2, r3, #15
 8001a7c:	4613      	mov	r3, r2
 8001a7e:	00db      	lsls	r3, r3, #3
 8001a80:	4413      	add	r3, r2
 8001a82:	009b      	lsls	r3, r3, #2
 8001a84:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001a88:	687a      	ldr	r2, [r7, #4]
 8001a8a:	4413      	add	r3, r2
 8001a8c:	3304      	adds	r3, #4
 8001a8e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001a90:	69bb      	ldr	r3, [r7, #24]
 8001a92:	0c5b      	lsrs	r3, r3, #17
 8001a94:	f003 030f 	and.w	r3, r3, #15
 8001a98:	2b02      	cmp	r3, #2
 8001a9a:	d124      	bne.n	8001ae6 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001a9c:	69ba      	ldr	r2, [r7, #24]
 8001a9e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d035      	beq.n	8001b14 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001aac:	69bb      	ldr	r3, [r7, #24]
 8001aae:	091b      	lsrs	r3, r3, #4
 8001ab0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001ab2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001ab6:	b29b      	uxth	r3, r3
 8001ab8:	461a      	mov	r2, r3
 8001aba:	6a38      	ldr	r0, [r7, #32]
 8001abc:	f004 fb68 	bl	8006190 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	68da      	ldr	r2, [r3, #12]
 8001ac4:	69bb      	ldr	r3, [r7, #24]
 8001ac6:	091b      	lsrs	r3, r3, #4
 8001ac8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001acc:	441a      	add	r2, r3
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	695a      	ldr	r2, [r3, #20]
 8001ad6:	69bb      	ldr	r3, [r7, #24]
 8001ad8:	091b      	lsrs	r3, r3, #4
 8001ada:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001ade:	441a      	add	r2, r3
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	615a      	str	r2, [r3, #20]
 8001ae4:	e016      	b.n	8001b14 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001ae6:	69bb      	ldr	r3, [r7, #24]
 8001ae8:	0c5b      	lsrs	r3, r3, #17
 8001aea:	f003 030f 	and.w	r3, r3, #15
 8001aee:	2b06      	cmp	r3, #6
 8001af0:	d110      	bne.n	8001b14 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001af8:	2208      	movs	r2, #8
 8001afa:	4619      	mov	r1, r3
 8001afc:	6a38      	ldr	r0, [r7, #32]
 8001afe:	f004 fb47 	bl	8006190 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	695a      	ldr	r2, [r3, #20]
 8001b06:	69bb      	ldr	r3, [r7, #24]
 8001b08:	091b      	lsrs	r3, r3, #4
 8001b0a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001b0e:	441a      	add	r2, r3
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	699a      	ldr	r2, [r3, #24]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f042 0210 	orr.w	r2, r2, #16
 8001b22:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f004 fcc5 	bl	80064b8 <USB_ReadInterrupts>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b34:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001b38:	f040 80a7 	bne.w	8001c8a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4618      	mov	r0, r3
 8001b46:	f004 fcca 	bl	80064de <USB_ReadDevAllOutEpInterrupt>
 8001b4a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001b4c:	e099      	b.n	8001c82 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b50:	f003 0301 	and.w	r3, r3, #1
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	f000 808e 	beq.w	8001c76 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b60:	b2d2      	uxtb	r2, r2
 8001b62:	4611      	mov	r1, r2
 8001b64:	4618      	mov	r0, r3
 8001b66:	f004 fcee 	bl	8006546 <USB_ReadDevOutEPInterrupt>
 8001b6a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	f003 0301 	and.w	r3, r3, #1
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d00c      	beq.n	8001b90 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b78:	015a      	lsls	r2, r3, #5
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	4413      	add	r3, r2
 8001b7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b82:	461a      	mov	r2, r3
 8001b84:	2301      	movs	r3, #1
 8001b86:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001b88:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b8a:	6878      	ldr	r0, [r7, #4]
 8001b8c:	f000 fe66 	bl	800285c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	f003 0308 	and.w	r3, r3, #8
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d00c      	beq.n	8001bb4 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b9c:	015a      	lsls	r2, r3, #5
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	4413      	add	r3, r2
 8001ba2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ba6:	461a      	mov	r2, r3
 8001ba8:	2308      	movs	r3, #8
 8001baa:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001bac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	f000 fea2 	bl	80028f8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	f003 0310 	and.w	r3, r3, #16
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d008      	beq.n	8001bd0 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc0:	015a      	lsls	r2, r3, #5
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	4413      	add	r3, r2
 8001bc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001bca:	461a      	mov	r2, r3
 8001bcc:	2310      	movs	r3, #16
 8001bce:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	f003 0302 	and.w	r3, r3, #2
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d030      	beq.n	8001c3c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001bda:	6a3b      	ldr	r3, [r7, #32]
 8001bdc:	695b      	ldr	r3, [r3, #20]
 8001bde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001be2:	2b80      	cmp	r3, #128	; 0x80
 8001be4:	d109      	bne.n	8001bfa <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	69fa      	ldr	r2, [r7, #28]
 8001bf0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001bf4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bf8:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001bfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bfc:	4613      	mov	r3, r2
 8001bfe:	00db      	lsls	r3, r3, #3
 8001c00:	4413      	add	r3, r2
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001c08:	687a      	ldr	r2, [r7, #4]
 8001c0a:	4413      	add	r3, r2
 8001c0c:	3304      	adds	r3, #4
 8001c0e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	78db      	ldrb	r3, [r3, #3]
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d108      	bne.n	8001c2a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	4619      	mov	r1, r3
 8001c24:	6878      	ldr	r0, [r7, #4]
 8001c26:	f009 fb17 	bl	800b258 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c2c:	015a      	lsls	r2, r3, #5
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	4413      	add	r3, r2
 8001c32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c36:	461a      	mov	r2, r3
 8001c38:	2302      	movs	r3, #2
 8001c3a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	f003 0320 	and.w	r3, r3, #32
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d008      	beq.n	8001c58 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c48:	015a      	lsls	r2, r3, #5
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	4413      	add	r3, r2
 8001c4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c52:	461a      	mov	r2, r3
 8001c54:	2320      	movs	r3, #32
 8001c56:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d009      	beq.n	8001c76 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c64:	015a      	lsls	r2, r3, #5
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	4413      	add	r3, r2
 8001c6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c6e:	461a      	mov	r2, r3
 8001c70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c74:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c78:	3301      	adds	r3, #1
 8001c7a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c7e:	085b      	lsrs	r3, r3, #1
 8001c80:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	f47f af62 	bne.w	8001b4e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f004 fc12 	bl	80064b8 <USB_ReadInterrupts>
 8001c94:	4603      	mov	r3, r0
 8001c96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c9a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001c9e:	f040 80a4 	bne.w	8001dea <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f004 fc33 	bl	8006512 <USB_ReadDevAllInEpInterrupt>
 8001cac:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001cb2:	e096      	b.n	8001de2 <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cb6:	f003 0301 	and.w	r3, r3, #1
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	f000 808b 	beq.w	8001dd6 <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cc6:	b2d2      	uxtb	r2, r2
 8001cc8:	4611      	mov	r1, r2
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f004 fc59 	bl	8006582 <USB_ReadDevInEPInterrupt>
 8001cd0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	f003 0301 	and.w	r3, r3, #1
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d020      	beq.n	8001d1e <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cde:	f003 030f 	and.w	r3, r3, #15
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001cf0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	43db      	mvns	r3, r3
 8001cf6:	69f9      	ldr	r1, [r7, #28]
 8001cf8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d02:	015a      	lsls	r2, r3, #5
 8001d04:	69fb      	ldr	r3, [r7, #28]
 8001d06:	4413      	add	r3, r2
 8001d08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	2301      	movs	r3, #1
 8001d10:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	4619      	mov	r1, r3
 8001d18:	6878      	ldr	r0, [r7, #4]
 8001d1a:	f009 fa08 	bl	800b12e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	f003 0308 	and.w	r3, r3, #8
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d008      	beq.n	8001d3a <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2a:	015a      	lsls	r2, r3, #5
 8001d2c:	69fb      	ldr	r3, [r7, #28]
 8001d2e:	4413      	add	r3, r2
 8001d30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d34:	461a      	mov	r2, r3
 8001d36:	2308      	movs	r3, #8
 8001d38:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	f003 0310 	and.w	r3, r3, #16
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d008      	beq.n	8001d56 <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d46:	015a      	lsls	r2, r3, #5
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	4413      	add	r3, r2
 8001d4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d50:	461a      	mov	r2, r3
 8001d52:	2310      	movs	r3, #16
 8001d54:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d008      	beq.n	8001d72 <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d62:	015a      	lsls	r2, r3, #5
 8001d64:	69fb      	ldr	r3, [r7, #28]
 8001d66:	4413      	add	r3, r2
 8001d68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d6c:	461a      	mov	r2, r3
 8001d6e:	2340      	movs	r3, #64	; 0x40
 8001d70:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	f003 0302 	and.w	r3, r3, #2
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d023      	beq.n	8001dc4 <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001d7c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001d7e:	6a38      	ldr	r0, [r7, #32]
 8001d80:	f003 fcf0 	bl	8005764 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001d84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d86:	4613      	mov	r3, r2
 8001d88:	00db      	lsls	r3, r3, #3
 8001d8a:	4413      	add	r3, r2
 8001d8c:	009b      	lsls	r3, r3, #2
 8001d8e:	3338      	adds	r3, #56	; 0x38
 8001d90:	687a      	ldr	r2, [r7, #4]
 8001d92:	4413      	add	r3, r2
 8001d94:	3304      	adds	r3, #4
 8001d96:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	78db      	ldrb	r3, [r3, #3]
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d108      	bne.n	8001db2 <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	2200      	movs	r2, #0
 8001da4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	4619      	mov	r1, r3
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	f009 fa65 	bl	800b27c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db4:	015a      	lsls	r2, r3, #5
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	4413      	add	r3, r2
 8001dba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001dbe:	461a      	mov	r2, r3
 8001dc0:	2302      	movs	r3, #2
 8001dc2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d003      	beq.n	8001dd6 <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001dce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001dd0:	6878      	ldr	r0, [r7, #4]
 8001dd2:	f000 fcba 	bl	800274a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd8:	3301      	adds	r3, #1
 8001dda:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dde:	085b      	lsrs	r3, r3, #1
 8001de0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	f47f af65 	bne.w	8001cb4 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4618      	mov	r0, r3
 8001df0:	f004 fb62 	bl	80064b8 <USB_ReadInterrupts>
 8001df4:	4603      	mov	r3, r0
 8001df6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001dfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001dfe:	d122      	bne.n	8001e46 <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001e00:	69fb      	ldr	r3, [r7, #28]
 8001e02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	69fa      	ldr	r2, [r7, #28]
 8001e0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e0e:	f023 0301 	bic.w	r3, r3, #1
 8001e12:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d108      	bne.n	8001e30 <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2200      	movs	r2, #0
 8001e22:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001e26:	2100      	movs	r1, #0
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	f009 fc85 	bl	800b738 <HAL_PCDEx_LPM_Callback>
 8001e2e:	e002      	b.n	8001e36 <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	f009 f9e9 	bl	800b208 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	695a      	ldr	r2, [r3, #20]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001e44:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f004 fb34 	bl	80064b8 <USB_ReadInterrupts>
 8001e50:	4603      	mov	r3, r0
 8001e52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001e5a:	d112      	bne.n	8001e82 <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001e5c:	69fb      	ldr	r3, [r7, #28]
 8001e5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	f003 0301 	and.w	r3, r3, #1
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d102      	bne.n	8001e72 <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001e6c:	6878      	ldr	r0, [r7, #4]
 8001e6e:	f009 f9a5 	bl	800b1bc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	695a      	ldr	r2, [r3, #20]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001e80:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4618      	mov	r0, r3
 8001e88:	f004 fb16 	bl	80064b8 <USB_ReadInterrupts>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001e92:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001e96:	d121      	bne.n	8001edc <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	695a      	ldr	r2, [r3, #20]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8001ea6:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d111      	bne.n	8001ed6 <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ec0:	089b      	lsrs	r3, r3, #2
 8001ec2:	f003 020f 	and.w	r2, r3, #15
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001ecc:	2101      	movs	r1, #1
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f009 fc32 	bl	800b738 <HAL_PCDEx_LPM_Callback>
 8001ed4:	e002      	b.n	8001edc <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f009 f970 	bl	800b1bc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f004 fae9 	bl	80064b8 <USB_ReadInterrupts>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001eec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ef0:	f040 80b5 	bne.w	800205e <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001ef4:	69fb      	ldr	r3, [r7, #28]
 8001ef6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	69fa      	ldr	r2, [r7, #28]
 8001efe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f02:	f023 0301 	bic.w	r3, r3, #1
 8001f06:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	2110      	movs	r1, #16
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f003 fc28 	bl	8005764 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f14:	2300      	movs	r3, #0
 8001f16:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f18:	e046      	b.n	8001fa8 <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f1c:	015a      	lsls	r2, r3, #5
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	4413      	add	r3, r2
 8001f22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f26:	461a      	mov	r2, r3
 8001f28:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001f2c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f30:	015a      	lsls	r2, r3, #5
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	4413      	add	r3, r2
 8001f36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f3e:	0151      	lsls	r1, r2, #5
 8001f40:	69fa      	ldr	r2, [r7, #28]
 8001f42:	440a      	add	r2, r1
 8001f44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001f48:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001f4c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f50:	015a      	lsls	r2, r3, #5
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	4413      	add	r3, r2
 8001f56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f5a:	461a      	mov	r2, r3
 8001f5c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001f60:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001f62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f64:	015a      	lsls	r2, r3, #5
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	4413      	add	r3, r2
 8001f6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f72:	0151      	lsls	r1, r2, #5
 8001f74:	69fa      	ldr	r2, [r7, #28]
 8001f76:	440a      	add	r2, r1
 8001f78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001f7c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001f80:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f84:	015a      	lsls	r2, r3, #5
 8001f86:	69fb      	ldr	r3, [r7, #28]
 8001f88:	4413      	add	r3, r2
 8001f8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f92:	0151      	lsls	r1, r2, #5
 8001f94:	69fa      	ldr	r2, [r7, #28]
 8001f96:	440a      	add	r2, r1
 8001f98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001f9c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001fa0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fa4:	3301      	adds	r3, #1
 8001fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	d3b3      	bcc.n	8001f1a <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001fb8:	69db      	ldr	r3, [r3, #28]
 8001fba:	69fa      	ldr	r2, [r7, #28]
 8001fbc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001fc0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001fc4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d016      	beq.n	8001ffc <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001fd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001fd8:	69fa      	ldr	r2, [r7, #28]
 8001fda:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001fde:	f043 030b 	orr.w	r3, r3, #11
 8001fe2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fee:	69fa      	ldr	r2, [r7, #28]
 8001ff0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ff4:	f043 030b 	orr.w	r3, r3, #11
 8001ff8:	6453      	str	r3, [r2, #68]	; 0x44
 8001ffa:	e015      	b.n	8002028 <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002002:	695b      	ldr	r3, [r3, #20]
 8002004:	69fa      	ldr	r2, [r7, #28]
 8002006:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800200a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800200e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002012:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002014:	69fb      	ldr	r3, [r7, #28]
 8002016:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800201a:	691b      	ldr	r3, [r3, #16]
 800201c:	69fa      	ldr	r2, [r7, #28]
 800201e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002022:	f043 030b 	orr.w	r3, r3, #11
 8002026:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002028:	69fb      	ldr	r3, [r7, #28]
 800202a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	69fa      	ldr	r2, [r7, #28]
 8002032:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002036:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800203a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002046:	4619      	mov	r1, r3
 8002048:	4610      	mov	r0, r2
 800204a:	f004 faf9 	bl	8006640 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	695a      	ldr	r2, [r3, #20]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800205c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4618      	mov	r0, r3
 8002064:	f004 fa28 	bl	80064b8 <USB_ReadInterrupts>
 8002068:	4603      	mov	r3, r0
 800206a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800206e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002072:	d124      	bne.n	80020be <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4618      	mov	r0, r3
 800207a:	f004 fabe 	bl	80065fa <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4618      	mov	r0, r3
 8002084:	f003 fbeb 	bl	800585e <USB_GetDevSpeed>
 8002088:	4603      	mov	r3, r0
 800208a:	461a      	mov	r2, r3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681c      	ldr	r4, [r3, #0]
 8002094:	f001 fb1a 	bl	80036cc <HAL_RCC_GetHCLKFreq>
 8002098:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	461a      	mov	r2, r3
 80020a2:	4620      	mov	r0, r4
 80020a4:	f003 f912 	bl	80052cc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80020a8:	6878      	ldr	r0, [r7, #4]
 80020aa:	f009 f868 	bl	800b17e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	695a      	ldr	r2, [r3, #20]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80020bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4618      	mov	r0, r3
 80020c4:	f004 f9f8 	bl	80064b8 <USB_ReadInterrupts>
 80020c8:	4603      	mov	r3, r0
 80020ca:	f003 0308 	and.w	r3, r3, #8
 80020ce:	2b08      	cmp	r3, #8
 80020d0:	d10a      	bne.n	80020e8 <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	f009 f845 	bl	800b162 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	695a      	ldr	r2, [r3, #20]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f002 0208 	and.w	r2, r2, #8
 80020e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4618      	mov	r0, r3
 80020ee:	f004 f9e3 	bl	80064b8 <USB_ReadInterrupts>
 80020f2:	4603      	mov	r3, r0
 80020f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020f8:	2b80      	cmp	r3, #128	; 0x80
 80020fa:	d122      	bne.n	8002142 <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80020fc:	6a3b      	ldr	r3, [r7, #32]
 80020fe:	699b      	ldr	r3, [r3, #24]
 8002100:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002104:	6a3b      	ldr	r3, [r7, #32]
 8002106:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002108:	2301      	movs	r3, #1
 800210a:	627b      	str	r3, [r7, #36]	; 0x24
 800210c:	e014      	b.n	8002138 <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800210e:	6879      	ldr	r1, [r7, #4]
 8002110:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002112:	4613      	mov	r3, r2
 8002114:	00db      	lsls	r3, r3, #3
 8002116:	4413      	add	r3, r2
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	440b      	add	r3, r1
 800211c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002120:	781b      	ldrb	r3, [r3, #0]
 8002122:	2b01      	cmp	r3, #1
 8002124:	d105      	bne.n	8002132 <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002128:	b2db      	uxtb	r3, r3
 800212a:	4619      	mov	r1, r3
 800212c:	6878      	ldr	r0, [r7, #4]
 800212e:	f000 fadb 	bl	80026e8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002134:	3301      	adds	r3, #1
 8002136:	627b      	str	r3, [r7, #36]	; 0x24
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800213e:	429a      	cmp	r2, r3
 8002140:	d3e5      	bcc.n	800210e <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4618      	mov	r0, r3
 8002148:	f004 f9b6 	bl	80064b8 <USB_ReadInterrupts>
 800214c:	4603      	mov	r3, r0
 800214e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002152:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002156:	d13b      	bne.n	80021d0 <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002158:	2301      	movs	r3, #1
 800215a:	627b      	str	r3, [r7, #36]	; 0x24
 800215c:	e02b      	b.n	80021b6 <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800215e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002160:	015a      	lsls	r2, r3, #5
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	4413      	add	r3, r2
 8002166:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800216e:	6879      	ldr	r1, [r7, #4]
 8002170:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002172:	4613      	mov	r3, r2
 8002174:	00db      	lsls	r3, r3, #3
 8002176:	4413      	add	r3, r2
 8002178:	009b      	lsls	r3, r3, #2
 800217a:	440b      	add	r3, r1
 800217c:	3340      	adds	r3, #64	; 0x40
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	2b01      	cmp	r3, #1
 8002182:	d115      	bne.n	80021b0 <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002184:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002186:	2b00      	cmp	r3, #0
 8002188:	da12      	bge.n	80021b0 <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800218a:	6879      	ldr	r1, [r7, #4]
 800218c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800218e:	4613      	mov	r3, r2
 8002190:	00db      	lsls	r3, r3, #3
 8002192:	4413      	add	r3, r2
 8002194:	009b      	lsls	r3, r3, #2
 8002196:	440b      	add	r3, r1
 8002198:	333f      	adds	r3, #63	; 0x3f
 800219a:	2201      	movs	r2, #1
 800219c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800219e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	4619      	mov	r1, r3
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f000 fa9c 	bl	80026e8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80021b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b2:	3301      	adds	r3, #1
 80021b4:	627b      	str	r3, [r7, #36]	; 0x24
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021bc:	429a      	cmp	r2, r3
 80021be:	d3ce      	bcc.n	800215e <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	695a      	ldr	r2, [r3, #20]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80021ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4618      	mov	r0, r3
 80021d6:	f004 f96f 	bl	80064b8 <USB_ReadInterrupts>
 80021da:	4603      	mov	r3, r0
 80021dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021e0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80021e4:	d155      	bne.n	8002292 <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80021e6:	2301      	movs	r3, #1
 80021e8:	627b      	str	r3, [r7, #36]	; 0x24
 80021ea:	e045      	b.n	8002278 <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80021ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ee:	015a      	lsls	r2, r3, #5
 80021f0:	69fb      	ldr	r3, [r7, #28]
 80021f2:	4413      	add	r3, r2
 80021f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80021fc:	6879      	ldr	r1, [r7, #4]
 80021fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002200:	4613      	mov	r3, r2
 8002202:	00db      	lsls	r3, r3, #3
 8002204:	4413      	add	r3, r2
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	440b      	add	r3, r1
 800220a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	2b01      	cmp	r3, #1
 8002212:	d12e      	bne.n	8002272 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002214:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002216:	2b00      	cmp	r3, #0
 8002218:	da2b      	bge.n	8002272 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800221a:	69bb      	ldr	r3, [r7, #24]
 800221c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002226:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800222a:	429a      	cmp	r2, r3
 800222c:	d121      	bne.n	8002272 <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800222e:	6879      	ldr	r1, [r7, #4]
 8002230:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002232:	4613      	mov	r3, r2
 8002234:	00db      	lsls	r3, r3, #3
 8002236:	4413      	add	r3, r2
 8002238:	009b      	lsls	r3, r3, #2
 800223a:	440b      	add	r3, r1
 800223c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002240:	2201      	movs	r2, #1
 8002242:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002244:	6a3b      	ldr	r3, [r7, #32]
 8002246:	699b      	ldr	r3, [r3, #24]
 8002248:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800224c:	6a3b      	ldr	r3, [r7, #32]
 800224e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002250:	6a3b      	ldr	r3, [r7, #32]
 8002252:	695b      	ldr	r3, [r3, #20]
 8002254:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002258:	2b00      	cmp	r3, #0
 800225a:	d10a      	bne.n	8002272 <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800225c:	69fb      	ldr	r3, [r7, #28]
 800225e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	69fa      	ldr	r2, [r7, #28]
 8002266:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800226a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800226e:	6053      	str	r3, [r2, #4]
            break;
 8002270:	e007      	b.n	8002282 <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002274:	3301      	adds	r3, #1
 8002276:	627b      	str	r3, [r7, #36]	; 0x24
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800227e:	429a      	cmp	r2, r3
 8002280:	d3b4      	bcc.n	80021ec <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	695a      	ldr	r2, [r3, #20]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002290:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4618      	mov	r0, r3
 8002298:	f004 f90e 	bl	80064b8 <USB_ReadInterrupts>
 800229c:	4603      	mov	r3, r0
 800229e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80022a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022a6:	d10a      	bne.n	80022be <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80022a8:	6878      	ldr	r0, [r7, #4]
 80022aa:	f008 fff9 	bl	800b2a0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	695a      	ldr	r2, [r3, #20]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80022bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4618      	mov	r0, r3
 80022c4:	f004 f8f8 	bl	80064b8 <USB_ReadInterrupts>
 80022c8:	4603      	mov	r3, r0
 80022ca:	f003 0304 	and.w	r3, r3, #4
 80022ce:	2b04      	cmp	r3, #4
 80022d0:	d115      	bne.n	80022fe <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80022da:	69bb      	ldr	r3, [r7, #24]
 80022dc:	f003 0304 	and.w	r3, r3, #4
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d002      	beq.n	80022ea <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80022e4:	6878      	ldr	r0, [r7, #4]
 80022e6:	f008 ffe9 	bl	800b2bc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	6859      	ldr	r1, [r3, #4]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	69ba      	ldr	r2, [r7, #24]
 80022f6:	430a      	orrs	r2, r1
 80022f8:	605a      	str	r2, [r3, #4]
 80022fa:	e000      	b.n	80022fe <HAL_PCD_IRQHandler+0x920>
      return;
 80022fc:	bf00      	nop
    }
  }
}
 80022fe:	3734      	adds	r7, #52	; 0x34
 8002300:	46bd      	mov	sp, r7
 8002302:	bd90      	pop	{r4, r7, pc}

08002304 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b082      	sub	sp, #8
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
 800230c:	460b      	mov	r3, r1
 800230e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002316:	2b01      	cmp	r3, #1
 8002318:	d101      	bne.n	800231e <HAL_PCD_SetAddress+0x1a>
 800231a:	2302      	movs	r3, #2
 800231c:	e013      	b.n	8002346 <HAL_PCD_SetAddress+0x42>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2201      	movs	r2, #1
 8002322:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	78fa      	ldrb	r2, [r7, #3]
 800232a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	78fa      	ldrb	r2, [r7, #3]
 8002334:	4611      	mov	r1, r2
 8002336:	4618      	mov	r0, r3
 8002338:	f004 f856 	bl	80063e8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2200      	movs	r2, #0
 8002340:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002344:	2300      	movs	r3, #0
}
 8002346:	4618      	mov	r0, r3
 8002348:	3708      	adds	r7, #8
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}

0800234e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800234e:	b580      	push	{r7, lr}
 8002350:	b084      	sub	sp, #16
 8002352:	af00      	add	r7, sp, #0
 8002354:	6078      	str	r0, [r7, #4]
 8002356:	4608      	mov	r0, r1
 8002358:	4611      	mov	r1, r2
 800235a:	461a      	mov	r2, r3
 800235c:	4603      	mov	r3, r0
 800235e:	70fb      	strb	r3, [r7, #3]
 8002360:	460b      	mov	r3, r1
 8002362:	803b      	strh	r3, [r7, #0]
 8002364:	4613      	mov	r3, r2
 8002366:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002368:	2300      	movs	r3, #0
 800236a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800236c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002370:	2b00      	cmp	r3, #0
 8002372:	da0f      	bge.n	8002394 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002374:	78fb      	ldrb	r3, [r7, #3]
 8002376:	f003 020f 	and.w	r2, r3, #15
 800237a:	4613      	mov	r3, r2
 800237c:	00db      	lsls	r3, r3, #3
 800237e:	4413      	add	r3, r2
 8002380:	009b      	lsls	r3, r3, #2
 8002382:	3338      	adds	r3, #56	; 0x38
 8002384:	687a      	ldr	r2, [r7, #4]
 8002386:	4413      	add	r3, r2
 8002388:	3304      	adds	r3, #4
 800238a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	2201      	movs	r2, #1
 8002390:	705a      	strb	r2, [r3, #1]
 8002392:	e00f      	b.n	80023b4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002394:	78fb      	ldrb	r3, [r7, #3]
 8002396:	f003 020f 	and.w	r2, r3, #15
 800239a:	4613      	mov	r3, r2
 800239c:	00db      	lsls	r3, r3, #3
 800239e:	4413      	add	r3, r2
 80023a0:	009b      	lsls	r3, r3, #2
 80023a2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	4413      	add	r3, r2
 80023aa:	3304      	adds	r3, #4
 80023ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	2200      	movs	r2, #0
 80023b2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80023b4:	78fb      	ldrb	r3, [r7, #3]
 80023b6:	f003 030f 	and.w	r3, r3, #15
 80023ba:	b2da      	uxtb	r2, r3
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80023c0:	883a      	ldrh	r2, [r7, #0]
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	78ba      	ldrb	r2, [r7, #2]
 80023ca:	711a      	strb	r2, [r3, #4]

#if defined (USB_OTG_FS)
  if (ep->is_in != 0U)
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	785b      	ldrb	r3, [r3, #1]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d004      	beq.n	80023de <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	b29a      	uxth	r2, r3
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	835a      	strh	r2, [r3, #26]
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80023de:	78bb      	ldrb	r3, [r7, #2]
 80023e0:	2b02      	cmp	r3, #2
 80023e2:	d102      	bne.n	80023ea <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	2200      	movs	r2, #0
 80023e8:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d101      	bne.n	80023f8 <HAL_PCD_EP_Open+0xaa>
 80023f4:	2302      	movs	r3, #2
 80023f6:	e00e      	b.n	8002416 <HAL_PCD_EP_Open+0xc8>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2201      	movs	r2, #1
 80023fc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	68f9      	ldr	r1, [r7, #12]
 8002406:	4618      	mov	r0, r3
 8002408:	f003 fa48 	bl	800589c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2200      	movs	r2, #0
 8002410:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002414:	7afb      	ldrb	r3, [r7, #11]
}
 8002416:	4618      	mov	r0, r3
 8002418:	3710      	adds	r7, #16
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}

0800241e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800241e:	b580      	push	{r7, lr}
 8002420:	b084      	sub	sp, #16
 8002422:	af00      	add	r7, sp, #0
 8002424:	6078      	str	r0, [r7, #4]
 8002426:	460b      	mov	r3, r1
 8002428:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800242a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800242e:	2b00      	cmp	r3, #0
 8002430:	da0f      	bge.n	8002452 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002432:	78fb      	ldrb	r3, [r7, #3]
 8002434:	f003 020f 	and.w	r2, r3, #15
 8002438:	4613      	mov	r3, r2
 800243a:	00db      	lsls	r3, r3, #3
 800243c:	4413      	add	r3, r2
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	3338      	adds	r3, #56	; 0x38
 8002442:	687a      	ldr	r2, [r7, #4]
 8002444:	4413      	add	r3, r2
 8002446:	3304      	adds	r3, #4
 8002448:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2201      	movs	r2, #1
 800244e:	705a      	strb	r2, [r3, #1]
 8002450:	e00f      	b.n	8002472 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002452:	78fb      	ldrb	r3, [r7, #3]
 8002454:	f003 020f 	and.w	r2, r3, #15
 8002458:	4613      	mov	r3, r2
 800245a:	00db      	lsls	r3, r3, #3
 800245c:	4413      	add	r3, r2
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002464:	687a      	ldr	r2, [r7, #4]
 8002466:	4413      	add	r3, r2
 8002468:	3304      	adds	r3, #4
 800246a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	2200      	movs	r2, #0
 8002470:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002472:	78fb      	ldrb	r3, [r7, #3]
 8002474:	f003 030f 	and.w	r3, r3, #15
 8002478:	b2da      	uxtb	r2, r3
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002484:	2b01      	cmp	r3, #1
 8002486:	d101      	bne.n	800248c <HAL_PCD_EP_Close+0x6e>
 8002488:	2302      	movs	r3, #2
 800248a:	e00e      	b.n	80024aa <HAL_PCD_EP_Close+0x8c>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2201      	movs	r2, #1
 8002490:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	68f9      	ldr	r1, [r7, #12]
 800249a:	4618      	mov	r0, r3
 800249c:	f003 fa86 	bl	80059ac <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2200      	movs	r2, #0
 80024a4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80024a8:	2300      	movs	r3, #0
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3710      	adds	r7, #16
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}

080024b2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80024b2:	b580      	push	{r7, lr}
 80024b4:	b086      	sub	sp, #24
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	60f8      	str	r0, [r7, #12]
 80024ba:	607a      	str	r2, [r7, #4]
 80024bc:	603b      	str	r3, [r7, #0]
 80024be:	460b      	mov	r3, r1
 80024c0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80024c2:	7afb      	ldrb	r3, [r7, #11]
 80024c4:	f003 020f 	and.w	r2, r3, #15
 80024c8:	4613      	mov	r3, r2
 80024ca:	00db      	lsls	r3, r3, #3
 80024cc:	4413      	add	r3, r2
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80024d4:	68fa      	ldr	r2, [r7, #12]
 80024d6:	4413      	add	r3, r2
 80024d8:	3304      	adds	r3, #4
 80024da:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	687a      	ldr	r2, [r7, #4]
 80024e0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	683a      	ldr	r2, [r7, #0]
 80024e6:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	2200      	movs	r2, #0
 80024ec:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	2200      	movs	r2, #0
 80024f2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80024f4:	7afb      	ldrb	r3, [r7, #11]
 80024f6:	f003 030f 	and.w	r3, r3, #15
 80024fa:	b2da      	uxtb	r2, r3
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	6979      	ldr	r1, [r7, #20]
 8002506:	4618      	mov	r0, r3
 8002508:	f003 fb2c 	bl	8005b64 <USB_EPStartXfer>

  return HAL_OK;
 800250c:	2300      	movs	r3, #0
}
 800250e:	4618      	mov	r0, r3
 8002510:	3718      	adds	r7, #24
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}

08002516 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002516:	b580      	push	{r7, lr}
 8002518:	b086      	sub	sp, #24
 800251a:	af00      	add	r7, sp, #0
 800251c:	60f8      	str	r0, [r7, #12]
 800251e:	607a      	str	r2, [r7, #4]
 8002520:	603b      	str	r3, [r7, #0]
 8002522:	460b      	mov	r3, r1
 8002524:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002526:	7afb      	ldrb	r3, [r7, #11]
 8002528:	f003 020f 	and.w	r2, r3, #15
 800252c:	4613      	mov	r3, r2
 800252e:	00db      	lsls	r3, r3, #3
 8002530:	4413      	add	r3, r2
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	3338      	adds	r3, #56	; 0x38
 8002536:	68fa      	ldr	r2, [r7, #12]
 8002538:	4413      	add	r3, r2
 800253a:	3304      	adds	r3, #4
 800253c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	687a      	ldr	r2, [r7, #4]
 8002542:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	683a      	ldr	r2, [r7, #0]
 8002548:	611a      	str	r2, [r3, #16]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	2200      	movs	r2, #0
 800254e:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	2201      	movs	r2, #1
 8002554:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002556:	7afb      	ldrb	r3, [r7, #11]
 8002558:	f003 030f 	and.w	r3, r3, #15
 800255c:	b2da      	uxtb	r2, r3
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	6979      	ldr	r1, [r7, #20]
 8002568:	4618      	mov	r0, r3
 800256a:	f003 fafb 	bl	8005b64 <USB_EPStartXfer>

  return HAL_OK;
 800256e:	2300      	movs	r3, #0
}
 8002570:	4618      	mov	r0, r3
 8002572:	3718      	adds	r7, #24
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}

08002578 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b084      	sub	sp, #16
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
 8002580:	460b      	mov	r3, r1
 8002582:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002584:	78fb      	ldrb	r3, [r7, #3]
 8002586:	f003 020f 	and.w	r2, r3, #15
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	429a      	cmp	r2, r3
 8002590:	d901      	bls.n	8002596 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e04e      	b.n	8002634 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002596:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800259a:	2b00      	cmp	r3, #0
 800259c:	da0f      	bge.n	80025be <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800259e:	78fb      	ldrb	r3, [r7, #3]
 80025a0:	f003 020f 	and.w	r2, r3, #15
 80025a4:	4613      	mov	r3, r2
 80025a6:	00db      	lsls	r3, r3, #3
 80025a8:	4413      	add	r3, r2
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	3338      	adds	r3, #56	; 0x38
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	4413      	add	r3, r2
 80025b2:	3304      	adds	r3, #4
 80025b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	2201      	movs	r2, #1
 80025ba:	705a      	strb	r2, [r3, #1]
 80025bc:	e00d      	b.n	80025da <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80025be:	78fa      	ldrb	r2, [r7, #3]
 80025c0:	4613      	mov	r3, r2
 80025c2:	00db      	lsls	r3, r3, #3
 80025c4:	4413      	add	r3, r2
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80025cc:	687a      	ldr	r2, [r7, #4]
 80025ce:	4413      	add	r3, r2
 80025d0:	3304      	adds	r3, #4
 80025d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2200      	movs	r2, #0
 80025d8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	2201      	movs	r2, #1
 80025de:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80025e0:	78fb      	ldrb	r3, [r7, #3]
 80025e2:	f003 030f 	and.w	r3, r3, #15
 80025e6:	b2da      	uxtb	r2, r3
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d101      	bne.n	80025fa <HAL_PCD_EP_SetStall+0x82>
 80025f6:	2302      	movs	r3, #2
 80025f8:	e01c      	b.n	8002634 <HAL_PCD_EP_SetStall+0xbc>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2201      	movs	r2, #1
 80025fe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	68f9      	ldr	r1, [r7, #12]
 8002608:	4618      	mov	r0, r3
 800260a:	f003 fe19 	bl	8006240 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800260e:	78fb      	ldrb	r3, [r7, #3]
 8002610:	f003 030f 	and.w	r3, r3, #15
 8002614:	2b00      	cmp	r3, #0
 8002616:	d108      	bne.n	800262a <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002622:	4619      	mov	r1, r3
 8002624:	4610      	mov	r0, r2
 8002626:	f004 f80b 	bl	8006640 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2200      	movs	r2, #0
 800262e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002632:	2300      	movs	r3, #0
}
 8002634:	4618      	mov	r0, r3
 8002636:	3710      	adds	r7, #16
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}

0800263c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b084      	sub	sp, #16
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
 8002644:	460b      	mov	r3, r1
 8002646:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002648:	78fb      	ldrb	r3, [r7, #3]
 800264a:	f003 020f 	and.w	r2, r3, #15
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	429a      	cmp	r2, r3
 8002654:	d901      	bls.n	800265a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e042      	b.n	80026e0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800265a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800265e:	2b00      	cmp	r3, #0
 8002660:	da0f      	bge.n	8002682 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002662:	78fb      	ldrb	r3, [r7, #3]
 8002664:	f003 020f 	and.w	r2, r3, #15
 8002668:	4613      	mov	r3, r2
 800266a:	00db      	lsls	r3, r3, #3
 800266c:	4413      	add	r3, r2
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	3338      	adds	r3, #56	; 0x38
 8002672:	687a      	ldr	r2, [r7, #4]
 8002674:	4413      	add	r3, r2
 8002676:	3304      	adds	r3, #4
 8002678:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2201      	movs	r2, #1
 800267e:	705a      	strb	r2, [r3, #1]
 8002680:	e00f      	b.n	80026a2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002682:	78fb      	ldrb	r3, [r7, #3]
 8002684:	f003 020f 	and.w	r2, r3, #15
 8002688:	4613      	mov	r3, r2
 800268a:	00db      	lsls	r3, r3, #3
 800268c:	4413      	add	r3, r2
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002694:	687a      	ldr	r2, [r7, #4]
 8002696:	4413      	add	r3, r2
 8002698:	3304      	adds	r3, #4
 800269a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	2200      	movs	r2, #0
 80026a0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2200      	movs	r2, #0
 80026a6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80026a8:	78fb      	ldrb	r3, [r7, #3]
 80026aa:	f003 030f 	and.w	r3, r3, #15
 80026ae:	b2da      	uxtb	r2, r3
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d101      	bne.n	80026c2 <HAL_PCD_EP_ClrStall+0x86>
 80026be:	2302      	movs	r3, #2
 80026c0:	e00e      	b.n	80026e0 <HAL_PCD_EP_ClrStall+0xa4>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2201      	movs	r2, #1
 80026c6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	68f9      	ldr	r1, [r7, #12]
 80026d0:	4618      	mov	r0, r3
 80026d2:	f003 fe23 	bl	800631c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2200      	movs	r2, #0
 80026da:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80026de:	2300      	movs	r3, #0
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	3710      	adds	r7, #16
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}

080026e8 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b084      	sub	sp, #16
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
 80026f0:	460b      	mov	r3, r1
 80026f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80026f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	da0c      	bge.n	8002716 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80026fc:	78fb      	ldrb	r3, [r7, #3]
 80026fe:	f003 020f 	and.w	r2, r3, #15
 8002702:	4613      	mov	r3, r2
 8002704:	00db      	lsls	r3, r3, #3
 8002706:	4413      	add	r3, r2
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	3338      	adds	r3, #56	; 0x38
 800270c:	687a      	ldr	r2, [r7, #4]
 800270e:	4413      	add	r3, r2
 8002710:	3304      	adds	r3, #4
 8002712:	60fb      	str	r3, [r7, #12]
 8002714:	e00c      	b.n	8002730 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002716:	78fb      	ldrb	r3, [r7, #3]
 8002718:	f003 020f 	and.w	r2, r3, #15
 800271c:	4613      	mov	r3, r2
 800271e:	00db      	lsls	r3, r3, #3
 8002720:	4413      	add	r3, r2
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002728:	687a      	ldr	r2, [r7, #4]
 800272a:	4413      	add	r3, r2
 800272c:	3304      	adds	r3, #4
 800272e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	68f9      	ldr	r1, [r7, #12]
 8002736:	4618      	mov	r0, r3
 8002738:	f003 fc46 	bl	8005fc8 <USB_EPStopXfer>
 800273c:	4603      	mov	r3, r0
 800273e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002740:	7afb      	ldrb	r3, [r7, #11]
}
 8002742:	4618      	mov	r0, r3
 8002744:	3710      	adds	r7, #16
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}

0800274a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800274a:	b580      	push	{r7, lr}
 800274c:	b088      	sub	sp, #32
 800274e:	af00      	add	r7, sp, #0
 8002750:	6078      	str	r0, [r7, #4]
 8002752:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800275e:	683a      	ldr	r2, [r7, #0]
 8002760:	4613      	mov	r3, r2
 8002762:	00db      	lsls	r3, r3, #3
 8002764:	4413      	add	r3, r2
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	3338      	adds	r3, #56	; 0x38
 800276a:	687a      	ldr	r2, [r7, #4]
 800276c:	4413      	add	r3, r2
 800276e:	3304      	adds	r3, #4
 8002770:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	695a      	ldr	r2, [r3, #20]
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	691b      	ldr	r3, [r3, #16]
 800277a:	429a      	cmp	r2, r3
 800277c:	d901      	bls.n	8002782 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e067      	b.n	8002852 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	691a      	ldr	r2, [r3, #16]
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	695b      	ldr	r3, [r3, #20]
 800278a:	1ad3      	subs	r3, r2, r3
 800278c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	69fa      	ldr	r2, [r7, #28]
 8002794:	429a      	cmp	r2, r3
 8002796:	d902      	bls.n	800279e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	3303      	adds	r3, #3
 80027a2:	089b      	lsrs	r3, r3, #2
 80027a4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80027a6:	e026      	b.n	80027f6 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	691a      	ldr	r2, [r3, #16]
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	695b      	ldr	r3, [r3, #20]
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	69fa      	ldr	r2, [r7, #28]
 80027ba:	429a      	cmp	r2, r3
 80027bc:	d902      	bls.n	80027c4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80027c4:	69fb      	ldr	r3, [r7, #28]
 80027c6:	3303      	adds	r3, #3
 80027c8:	089b      	lsrs	r3, r3, #2
 80027ca:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	68d9      	ldr	r1, [r3, #12]
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	b2da      	uxtb	r2, r3
 80027d4:	69fb      	ldr	r3, [r7, #28]
 80027d6:	b29b      	uxth	r3, r3
 80027d8:	6978      	ldr	r0, [r7, #20]
 80027da:	f003 fc9f 	bl	800611c <USB_WritePacket>

    ep->xfer_buff  += len;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	68da      	ldr	r2, [r3, #12]
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	441a      	add	r2, r3
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	695a      	ldr	r2, [r3, #20]
 80027ee:	69fb      	ldr	r3, [r7, #28]
 80027f0:	441a      	add	r2, r3
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	015a      	lsls	r2, r3, #5
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	4413      	add	r3, r2
 80027fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002802:	699b      	ldr	r3, [r3, #24]
 8002804:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002806:	69ba      	ldr	r2, [r7, #24]
 8002808:	429a      	cmp	r2, r3
 800280a:	d809      	bhi.n	8002820 <PCD_WriteEmptyTxFifo+0xd6>
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	695a      	ldr	r2, [r3, #20]
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002814:	429a      	cmp	r2, r3
 8002816:	d203      	bcs.n	8002820 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	691b      	ldr	r3, [r3, #16]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d1c3      	bne.n	80027a8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	691a      	ldr	r2, [r3, #16]
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	695b      	ldr	r3, [r3, #20]
 8002828:	429a      	cmp	r2, r3
 800282a:	d811      	bhi.n	8002850 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	f003 030f 	and.w	r3, r3, #15
 8002832:	2201      	movs	r2, #1
 8002834:	fa02 f303 	lsl.w	r3, r2, r3
 8002838:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002840:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	43db      	mvns	r3, r3
 8002846:	6939      	ldr	r1, [r7, #16]
 8002848:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800284c:	4013      	ands	r3, r2
 800284e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002850:	2300      	movs	r3, #0
}
 8002852:	4618      	mov	r0, r3
 8002854:	3720      	adds	r7, #32
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
	...

0800285c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b086      	sub	sp, #24
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
 8002864:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	333c      	adds	r3, #60	; 0x3c
 8002874:	3304      	adds	r3, #4
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	015a      	lsls	r2, r3, #5
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	4413      	add	r3, r2
 8002882:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	4a19      	ldr	r2, [pc, #100]	; (80028f4 <PCD_EP_OutXfrComplete_int+0x98>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d124      	bne.n	80028dc <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002898:	2b00      	cmp	r3, #0
 800289a:	d00a      	beq.n	80028b2 <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	015a      	lsls	r2, r3, #5
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	4413      	add	r3, r2
 80028a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028a8:	461a      	mov	r2, r3
 80028aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80028ae:	6093      	str	r3, [r2, #8]
 80028b0:	e01a      	b.n	80028e8 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	f003 0320 	and.w	r3, r3, #32
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d008      	beq.n	80028ce <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	015a      	lsls	r2, r3, #5
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	4413      	add	r3, r2
 80028c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028c8:	461a      	mov	r2, r3
 80028ca:	2320      	movs	r3, #32
 80028cc:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	4619      	mov	r1, r3
 80028d4:	6878      	ldr	r0, [r7, #4]
 80028d6:	f008 fc0f 	bl	800b0f8 <HAL_PCD_DataOutStageCallback>
 80028da:	e005      	b.n	80028e8 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	b2db      	uxtb	r3, r3
 80028e0:	4619      	mov	r1, r3
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f008 fc08 	bl	800b0f8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 80028e8:	2300      	movs	r3, #0
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3718      	adds	r7, #24
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	4f54310a 	.word	0x4f54310a

080028f8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b086      	sub	sp, #24
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
 8002900:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	333c      	adds	r3, #60	; 0x3c
 8002910:	3304      	adds	r3, #4
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	015a      	lsls	r2, r3, #5
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	4413      	add	r3, r2
 800291e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	4a0c      	ldr	r2, [pc, #48]	; (800295c <PCD_EP_OutSetupPacket_int+0x64>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d90e      	bls.n	800294c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002934:	2b00      	cmp	r3, #0
 8002936:	d009      	beq.n	800294c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	015a      	lsls	r2, r3, #5
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	4413      	add	r3, r2
 8002940:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002944:	461a      	mov	r2, r3
 8002946:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800294a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800294c:	6878      	ldr	r0, [r7, #4]
 800294e:	f008 fbc1 	bl	800b0d4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8002952:	2300      	movs	r3, #0
}
 8002954:	4618      	mov	r0, r3
 8002956:	3718      	adds	r7, #24
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}
 800295c:	4f54300a 	.word	0x4f54300a

08002960 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002960:	b480      	push	{r7}
 8002962:	b085      	sub	sp, #20
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
 8002968:	460b      	mov	r3, r1
 800296a:	70fb      	strb	r3, [r7, #3]
 800296c:	4613      	mov	r3, r2
 800296e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002976:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002978:	78fb      	ldrb	r3, [r7, #3]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d107      	bne.n	800298e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800297e:	883b      	ldrh	r3, [r7, #0]
 8002980:	0419      	lsls	r1, r3, #16
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	68ba      	ldr	r2, [r7, #8]
 8002988:	430a      	orrs	r2, r1
 800298a:	629a      	str	r2, [r3, #40]	; 0x28
 800298c:	e028      	b.n	80029e0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002994:	0c1b      	lsrs	r3, r3, #16
 8002996:	68ba      	ldr	r2, [r7, #8]
 8002998:	4413      	add	r3, r2
 800299a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800299c:	2300      	movs	r3, #0
 800299e:	73fb      	strb	r3, [r7, #15]
 80029a0:	e00d      	b.n	80029be <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	7bfb      	ldrb	r3, [r7, #15]
 80029a8:	3340      	adds	r3, #64	; 0x40
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	4413      	add	r3, r2
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	0c1b      	lsrs	r3, r3, #16
 80029b2:	68ba      	ldr	r2, [r7, #8]
 80029b4:	4413      	add	r3, r2
 80029b6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80029b8:	7bfb      	ldrb	r3, [r7, #15]
 80029ba:	3301      	adds	r3, #1
 80029bc:	73fb      	strb	r3, [r7, #15]
 80029be:	7bfa      	ldrb	r2, [r7, #15]
 80029c0:	78fb      	ldrb	r3, [r7, #3]
 80029c2:	3b01      	subs	r3, #1
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d3ec      	bcc.n	80029a2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80029c8:	883b      	ldrh	r3, [r7, #0]
 80029ca:	0418      	lsls	r0, r3, #16
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6819      	ldr	r1, [r3, #0]
 80029d0:	78fb      	ldrb	r3, [r7, #3]
 80029d2:	3b01      	subs	r3, #1
 80029d4:	68ba      	ldr	r2, [r7, #8]
 80029d6:	4302      	orrs	r2, r0
 80029d8:	3340      	adds	r3, #64	; 0x40
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	440b      	add	r3, r1
 80029de:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80029e0:	2300      	movs	r3, #0
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	3714      	adds	r7, #20
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr

080029ee <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80029ee:	b480      	push	{r7}
 80029f0:	b083      	sub	sp, #12
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	6078      	str	r0, [r7, #4]
 80029f6:	460b      	mov	r3, r1
 80029f8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	887a      	ldrh	r2, [r7, #2]
 8002a00:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002a02:	2300      	movs	r3, #0
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	370c      	adds	r7, #12
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr

08002a10 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b085      	sub	sp, #20
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2201      	movs	r2, #1
 8002a22:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	699b      	ldr	r3, [r3, #24]
 8002a32:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a42:	f043 0303 	orr.w	r3, r3, #3
 8002a46:	68fa      	ldr	r2, [r7, #12]
 8002a48:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002a4a:	2300      	movs	r3, #0
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	3714      	adds	r7, #20
 8002a50:	46bd      	mov	sp, r7
 8002a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a56:	4770      	bx	lr

08002a58 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a5c:	4b05      	ldr	r3, [pc, #20]	; (8002a74 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a04      	ldr	r2, [pc, #16]	; (8002a74 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002a62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a66:	6013      	str	r3, [r2, #0]
}
 8002a68:	bf00      	nop
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr
 8002a72:	bf00      	nop
 8002a74:	40007000 	.word	0x40007000

08002a78 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002a7c:	4b04      	ldr	r3, [pc, #16]	; (8002a90 <HAL_PWREx_GetVoltageRange+0x18>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr
 8002a8e:	bf00      	nop
 8002a90:	40007000 	.word	0x40007000

08002a94 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b085      	sub	sp, #20
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002aa2:	d130      	bne.n	8002b06 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002aa4:	4b23      	ldr	r3, [pc, #140]	; (8002b34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002aac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ab0:	d038      	beq.n	8002b24 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ab2:	4b20      	ldr	r3, [pc, #128]	; (8002b34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002aba:	4a1e      	ldr	r2, [pc, #120]	; (8002b34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002abc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ac0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002ac2:	4b1d      	ldr	r3, [pc, #116]	; (8002b38 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	2232      	movs	r2, #50	; 0x32
 8002ac8:	fb02 f303 	mul.w	r3, r2, r3
 8002acc:	4a1b      	ldr	r2, [pc, #108]	; (8002b3c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002ace:	fba2 2303 	umull	r2, r3, r2, r3
 8002ad2:	0c9b      	lsrs	r3, r3, #18
 8002ad4:	3301      	adds	r3, #1
 8002ad6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ad8:	e002      	b.n	8002ae0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	3b01      	subs	r3, #1
 8002ade:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ae0:	4b14      	ldr	r3, [pc, #80]	; (8002b34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ae2:	695b      	ldr	r3, [r3, #20]
 8002ae4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ae8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002aec:	d102      	bne.n	8002af4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d1f2      	bne.n	8002ada <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002af4:	4b0f      	ldr	r3, [pc, #60]	; (8002b34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002af6:	695b      	ldr	r3, [r3, #20]
 8002af8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002afc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b00:	d110      	bne.n	8002b24 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002b02:	2303      	movs	r3, #3
 8002b04:	e00f      	b.n	8002b26 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002b06:	4b0b      	ldr	r3, [pc, #44]	; (8002b34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002b0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b12:	d007      	beq.n	8002b24 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002b14:	4b07      	ldr	r3, [pc, #28]	; (8002b34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002b1c:	4a05      	ldr	r2, [pc, #20]	; (8002b34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b22:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002b24:	2300      	movs	r3, #0
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3714      	adds	r7, #20
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b30:	4770      	bx	lr
 8002b32:	bf00      	nop
 8002b34:	40007000 	.word	0x40007000
 8002b38:	20000000 	.word	0x20000000
 8002b3c:	431bde83 	.word	0x431bde83

08002b40 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002b40:	b480      	push	{r7}
 8002b42:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002b44:	4b05      	ldr	r3, [pc, #20]	; (8002b5c <HAL_PWREx_EnableVddUSB+0x1c>)
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	4a04      	ldr	r2, [pc, #16]	; (8002b5c <HAL_PWREx_EnableVddUSB+0x1c>)
 8002b4a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b4e:	6053      	str	r3, [r2, #4]
}
 8002b50:	bf00      	nop
 8002b52:	46bd      	mov	sp, r7
 8002b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b58:	4770      	bx	lr
 8002b5a:	bf00      	nop
 8002b5c:	40007000 	.word	0x40007000

08002b60 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8002b60:	b480      	push	{r7}
 8002b62:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8002b64:	4b05      	ldr	r3, [pc, #20]	; (8002b7c <HAL_PWREx_EnableVddIO2+0x1c>)
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	4a04      	ldr	r2, [pc, #16]	; (8002b7c <HAL_PWREx_EnableVddIO2+0x1c>)
 8002b6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b6e:	6053      	str	r3, [r2, #4]
}
 8002b70:	bf00      	nop
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr
 8002b7a:	bf00      	nop
 8002b7c:	40007000 	.word	0x40007000

08002b80 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b088      	sub	sp, #32
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d102      	bne.n	8002b94 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	f000 bc08 	b.w	80033a4 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b94:	4b96      	ldr	r3, [pc, #600]	; (8002df0 <HAL_RCC_OscConfig+0x270>)
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	f003 030c 	and.w	r3, r3, #12
 8002b9c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b9e:	4b94      	ldr	r3, [pc, #592]	; (8002df0 <HAL_RCC_OscConfig+0x270>)
 8002ba0:	68db      	ldr	r3, [r3, #12]
 8002ba2:	f003 0303 	and.w	r3, r3, #3
 8002ba6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f003 0310 	and.w	r3, r3, #16
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	f000 80e4 	beq.w	8002d7e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002bb6:	69bb      	ldr	r3, [r7, #24]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d007      	beq.n	8002bcc <HAL_RCC_OscConfig+0x4c>
 8002bbc:	69bb      	ldr	r3, [r7, #24]
 8002bbe:	2b0c      	cmp	r3, #12
 8002bc0:	f040 808b 	bne.w	8002cda <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	f040 8087 	bne.w	8002cda <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002bcc:	4b88      	ldr	r3, [pc, #544]	; (8002df0 <HAL_RCC_OscConfig+0x270>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 0302 	and.w	r3, r3, #2
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d005      	beq.n	8002be4 <HAL_RCC_OscConfig+0x64>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	699b      	ldr	r3, [r3, #24]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d101      	bne.n	8002be4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	e3df      	b.n	80033a4 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6a1a      	ldr	r2, [r3, #32]
 8002be8:	4b81      	ldr	r3, [pc, #516]	; (8002df0 <HAL_RCC_OscConfig+0x270>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 0308 	and.w	r3, r3, #8
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d004      	beq.n	8002bfe <HAL_RCC_OscConfig+0x7e>
 8002bf4:	4b7e      	ldr	r3, [pc, #504]	; (8002df0 <HAL_RCC_OscConfig+0x270>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002bfc:	e005      	b.n	8002c0a <HAL_RCC_OscConfig+0x8a>
 8002bfe:	4b7c      	ldr	r3, [pc, #496]	; (8002df0 <HAL_RCC_OscConfig+0x270>)
 8002c00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c04:	091b      	lsrs	r3, r3, #4
 8002c06:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d223      	bcs.n	8002c56 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6a1b      	ldr	r3, [r3, #32]
 8002c12:	4618      	mov	r0, r3
 8002c14:	f000 fd92 	bl	800373c <RCC_SetFlashLatencyFromMSIRange>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d001      	beq.n	8002c22 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e3c0      	b.n	80033a4 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c22:	4b73      	ldr	r3, [pc, #460]	; (8002df0 <HAL_RCC_OscConfig+0x270>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a72      	ldr	r2, [pc, #456]	; (8002df0 <HAL_RCC_OscConfig+0x270>)
 8002c28:	f043 0308 	orr.w	r3, r3, #8
 8002c2c:	6013      	str	r3, [r2, #0]
 8002c2e:	4b70      	ldr	r3, [pc, #448]	; (8002df0 <HAL_RCC_OscConfig+0x270>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6a1b      	ldr	r3, [r3, #32]
 8002c3a:	496d      	ldr	r1, [pc, #436]	; (8002df0 <HAL_RCC_OscConfig+0x270>)
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c40:	4b6b      	ldr	r3, [pc, #428]	; (8002df0 <HAL_RCC_OscConfig+0x270>)
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	69db      	ldr	r3, [r3, #28]
 8002c4c:	021b      	lsls	r3, r3, #8
 8002c4e:	4968      	ldr	r1, [pc, #416]	; (8002df0 <HAL_RCC_OscConfig+0x270>)
 8002c50:	4313      	orrs	r3, r2
 8002c52:	604b      	str	r3, [r1, #4]
 8002c54:	e025      	b.n	8002ca2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c56:	4b66      	ldr	r3, [pc, #408]	; (8002df0 <HAL_RCC_OscConfig+0x270>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a65      	ldr	r2, [pc, #404]	; (8002df0 <HAL_RCC_OscConfig+0x270>)
 8002c5c:	f043 0308 	orr.w	r3, r3, #8
 8002c60:	6013      	str	r3, [r2, #0]
 8002c62:	4b63      	ldr	r3, [pc, #396]	; (8002df0 <HAL_RCC_OscConfig+0x270>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6a1b      	ldr	r3, [r3, #32]
 8002c6e:	4960      	ldr	r1, [pc, #384]	; (8002df0 <HAL_RCC_OscConfig+0x270>)
 8002c70:	4313      	orrs	r3, r2
 8002c72:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c74:	4b5e      	ldr	r3, [pc, #376]	; (8002df0 <HAL_RCC_OscConfig+0x270>)
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	69db      	ldr	r3, [r3, #28]
 8002c80:	021b      	lsls	r3, r3, #8
 8002c82:	495b      	ldr	r1, [pc, #364]	; (8002df0 <HAL_RCC_OscConfig+0x270>)
 8002c84:	4313      	orrs	r3, r2
 8002c86:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c88:	69bb      	ldr	r3, [r7, #24]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d109      	bne.n	8002ca2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6a1b      	ldr	r3, [r3, #32]
 8002c92:	4618      	mov	r0, r3
 8002c94:	f000 fd52 	bl	800373c <RCC_SetFlashLatencyFromMSIRange>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d001      	beq.n	8002ca2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e380      	b.n	80033a4 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002ca2:	f000 fc87 	bl	80035b4 <HAL_RCC_GetSysClockFreq>
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	4b51      	ldr	r3, [pc, #324]	; (8002df0 <HAL_RCC_OscConfig+0x270>)
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	091b      	lsrs	r3, r3, #4
 8002cae:	f003 030f 	and.w	r3, r3, #15
 8002cb2:	4950      	ldr	r1, [pc, #320]	; (8002df4 <HAL_RCC_OscConfig+0x274>)
 8002cb4:	5ccb      	ldrb	r3, [r1, r3]
 8002cb6:	f003 031f 	and.w	r3, r3, #31
 8002cba:	fa22 f303 	lsr.w	r3, r2, r3
 8002cbe:	4a4e      	ldr	r2, [pc, #312]	; (8002df8 <HAL_RCC_OscConfig+0x278>)
 8002cc0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002cc2:	4b4e      	ldr	r3, [pc, #312]	; (8002dfc <HAL_RCC_OscConfig+0x27c>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f7fe f9e2 	bl	8001090 <HAL_InitTick>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002cd0:	7bfb      	ldrb	r3, [r7, #15]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d052      	beq.n	8002d7c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002cd6:	7bfb      	ldrb	r3, [r7, #15]
 8002cd8:	e364      	b.n	80033a4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	699b      	ldr	r3, [r3, #24]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d032      	beq.n	8002d48 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002ce2:	4b43      	ldr	r3, [pc, #268]	; (8002df0 <HAL_RCC_OscConfig+0x270>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a42      	ldr	r2, [pc, #264]	; (8002df0 <HAL_RCC_OscConfig+0x270>)
 8002ce8:	f043 0301 	orr.w	r3, r3, #1
 8002cec:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002cee:	f7fe fa1f 	bl	8001130 <HAL_GetTick>
 8002cf2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002cf4:	e008      	b.n	8002d08 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002cf6:	f7fe fa1b 	bl	8001130 <HAL_GetTick>
 8002cfa:	4602      	mov	r2, r0
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	1ad3      	subs	r3, r2, r3
 8002d00:	2b02      	cmp	r3, #2
 8002d02:	d901      	bls.n	8002d08 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002d04:	2303      	movs	r3, #3
 8002d06:	e34d      	b.n	80033a4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d08:	4b39      	ldr	r3, [pc, #228]	; (8002df0 <HAL_RCC_OscConfig+0x270>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 0302 	and.w	r3, r3, #2
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d0f0      	beq.n	8002cf6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d14:	4b36      	ldr	r3, [pc, #216]	; (8002df0 <HAL_RCC_OscConfig+0x270>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a35      	ldr	r2, [pc, #212]	; (8002df0 <HAL_RCC_OscConfig+0x270>)
 8002d1a:	f043 0308 	orr.w	r3, r3, #8
 8002d1e:	6013      	str	r3, [r2, #0]
 8002d20:	4b33      	ldr	r3, [pc, #204]	; (8002df0 <HAL_RCC_OscConfig+0x270>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6a1b      	ldr	r3, [r3, #32]
 8002d2c:	4930      	ldr	r1, [pc, #192]	; (8002df0 <HAL_RCC_OscConfig+0x270>)
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d32:	4b2f      	ldr	r3, [pc, #188]	; (8002df0 <HAL_RCC_OscConfig+0x270>)
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	69db      	ldr	r3, [r3, #28]
 8002d3e:	021b      	lsls	r3, r3, #8
 8002d40:	492b      	ldr	r1, [pc, #172]	; (8002df0 <HAL_RCC_OscConfig+0x270>)
 8002d42:	4313      	orrs	r3, r2
 8002d44:	604b      	str	r3, [r1, #4]
 8002d46:	e01a      	b.n	8002d7e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002d48:	4b29      	ldr	r3, [pc, #164]	; (8002df0 <HAL_RCC_OscConfig+0x270>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a28      	ldr	r2, [pc, #160]	; (8002df0 <HAL_RCC_OscConfig+0x270>)
 8002d4e:	f023 0301 	bic.w	r3, r3, #1
 8002d52:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002d54:	f7fe f9ec 	bl	8001130 <HAL_GetTick>
 8002d58:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002d5a:	e008      	b.n	8002d6e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d5c:	f7fe f9e8 	bl	8001130 <HAL_GetTick>
 8002d60:	4602      	mov	r2, r0
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	1ad3      	subs	r3, r2, r3
 8002d66:	2b02      	cmp	r3, #2
 8002d68:	d901      	bls.n	8002d6e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002d6a:	2303      	movs	r3, #3
 8002d6c:	e31a      	b.n	80033a4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002d6e:	4b20      	ldr	r3, [pc, #128]	; (8002df0 <HAL_RCC_OscConfig+0x270>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 0302 	and.w	r3, r3, #2
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d1f0      	bne.n	8002d5c <HAL_RCC_OscConfig+0x1dc>
 8002d7a:	e000      	b.n	8002d7e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002d7c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 0301 	and.w	r3, r3, #1
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d073      	beq.n	8002e72 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002d8a:	69bb      	ldr	r3, [r7, #24]
 8002d8c:	2b08      	cmp	r3, #8
 8002d8e:	d005      	beq.n	8002d9c <HAL_RCC_OscConfig+0x21c>
 8002d90:	69bb      	ldr	r3, [r7, #24]
 8002d92:	2b0c      	cmp	r3, #12
 8002d94:	d10e      	bne.n	8002db4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	2b03      	cmp	r3, #3
 8002d9a:	d10b      	bne.n	8002db4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d9c:	4b14      	ldr	r3, [pc, #80]	; (8002df0 <HAL_RCC_OscConfig+0x270>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d063      	beq.n	8002e70 <HAL_RCC_OscConfig+0x2f0>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d15f      	bne.n	8002e70 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	e2f7      	b.n	80033a4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dbc:	d106      	bne.n	8002dcc <HAL_RCC_OscConfig+0x24c>
 8002dbe:	4b0c      	ldr	r3, [pc, #48]	; (8002df0 <HAL_RCC_OscConfig+0x270>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a0b      	ldr	r2, [pc, #44]	; (8002df0 <HAL_RCC_OscConfig+0x270>)
 8002dc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dc8:	6013      	str	r3, [r2, #0]
 8002dca:	e025      	b.n	8002e18 <HAL_RCC_OscConfig+0x298>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002dd4:	d114      	bne.n	8002e00 <HAL_RCC_OscConfig+0x280>
 8002dd6:	4b06      	ldr	r3, [pc, #24]	; (8002df0 <HAL_RCC_OscConfig+0x270>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a05      	ldr	r2, [pc, #20]	; (8002df0 <HAL_RCC_OscConfig+0x270>)
 8002ddc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002de0:	6013      	str	r3, [r2, #0]
 8002de2:	4b03      	ldr	r3, [pc, #12]	; (8002df0 <HAL_RCC_OscConfig+0x270>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a02      	ldr	r2, [pc, #8]	; (8002df0 <HAL_RCC_OscConfig+0x270>)
 8002de8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dec:	6013      	str	r3, [r2, #0]
 8002dee:	e013      	b.n	8002e18 <HAL_RCC_OscConfig+0x298>
 8002df0:	40021000 	.word	0x40021000
 8002df4:	0800b960 	.word	0x0800b960
 8002df8:	20000000 	.word	0x20000000
 8002dfc:	20000004 	.word	0x20000004
 8002e00:	4ba0      	ldr	r3, [pc, #640]	; (8003084 <HAL_RCC_OscConfig+0x504>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a9f      	ldr	r2, [pc, #636]	; (8003084 <HAL_RCC_OscConfig+0x504>)
 8002e06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e0a:	6013      	str	r3, [r2, #0]
 8002e0c:	4b9d      	ldr	r3, [pc, #628]	; (8003084 <HAL_RCC_OscConfig+0x504>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a9c      	ldr	r2, [pc, #624]	; (8003084 <HAL_RCC_OscConfig+0x504>)
 8002e12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d013      	beq.n	8002e48 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e20:	f7fe f986 	bl	8001130 <HAL_GetTick>
 8002e24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e26:	e008      	b.n	8002e3a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e28:	f7fe f982 	bl	8001130 <HAL_GetTick>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	1ad3      	subs	r3, r2, r3
 8002e32:	2b64      	cmp	r3, #100	; 0x64
 8002e34:	d901      	bls.n	8002e3a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002e36:	2303      	movs	r3, #3
 8002e38:	e2b4      	b.n	80033a4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e3a:	4b92      	ldr	r3, [pc, #584]	; (8003084 <HAL_RCC_OscConfig+0x504>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d0f0      	beq.n	8002e28 <HAL_RCC_OscConfig+0x2a8>
 8002e46:	e014      	b.n	8002e72 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e48:	f7fe f972 	bl	8001130 <HAL_GetTick>
 8002e4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e4e:	e008      	b.n	8002e62 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e50:	f7fe f96e 	bl	8001130 <HAL_GetTick>
 8002e54:	4602      	mov	r2, r0
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	2b64      	cmp	r3, #100	; 0x64
 8002e5c:	d901      	bls.n	8002e62 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	e2a0      	b.n	80033a4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e62:	4b88      	ldr	r3, [pc, #544]	; (8003084 <HAL_RCC_OscConfig+0x504>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d1f0      	bne.n	8002e50 <HAL_RCC_OscConfig+0x2d0>
 8002e6e:	e000      	b.n	8002e72 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 0302 	and.w	r3, r3, #2
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d060      	beq.n	8002f40 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002e7e:	69bb      	ldr	r3, [r7, #24]
 8002e80:	2b04      	cmp	r3, #4
 8002e82:	d005      	beq.n	8002e90 <HAL_RCC_OscConfig+0x310>
 8002e84:	69bb      	ldr	r3, [r7, #24]
 8002e86:	2b0c      	cmp	r3, #12
 8002e88:	d119      	bne.n	8002ebe <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	2b02      	cmp	r3, #2
 8002e8e:	d116      	bne.n	8002ebe <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e90:	4b7c      	ldr	r3, [pc, #496]	; (8003084 <HAL_RCC_OscConfig+0x504>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d005      	beq.n	8002ea8 <HAL_RCC_OscConfig+0x328>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	68db      	ldr	r3, [r3, #12]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d101      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e27d      	b.n	80033a4 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ea8:	4b76      	ldr	r3, [pc, #472]	; (8003084 <HAL_RCC_OscConfig+0x504>)
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	691b      	ldr	r3, [r3, #16]
 8002eb4:	061b      	lsls	r3, r3, #24
 8002eb6:	4973      	ldr	r1, [pc, #460]	; (8003084 <HAL_RCC_OscConfig+0x504>)
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ebc:	e040      	b.n	8002f40 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	68db      	ldr	r3, [r3, #12]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d023      	beq.n	8002f0e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ec6:	4b6f      	ldr	r3, [pc, #444]	; (8003084 <HAL_RCC_OscConfig+0x504>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a6e      	ldr	r2, [pc, #440]	; (8003084 <HAL_RCC_OscConfig+0x504>)
 8002ecc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ed0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ed2:	f7fe f92d 	bl	8001130 <HAL_GetTick>
 8002ed6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ed8:	e008      	b.n	8002eec <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002eda:	f7fe f929 	bl	8001130 <HAL_GetTick>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	1ad3      	subs	r3, r2, r3
 8002ee4:	2b02      	cmp	r3, #2
 8002ee6:	d901      	bls.n	8002eec <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002ee8:	2303      	movs	r3, #3
 8002eea:	e25b      	b.n	80033a4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002eec:	4b65      	ldr	r3, [pc, #404]	; (8003084 <HAL_RCC_OscConfig+0x504>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d0f0      	beq.n	8002eda <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ef8:	4b62      	ldr	r3, [pc, #392]	; (8003084 <HAL_RCC_OscConfig+0x504>)
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	691b      	ldr	r3, [r3, #16]
 8002f04:	061b      	lsls	r3, r3, #24
 8002f06:	495f      	ldr	r1, [pc, #380]	; (8003084 <HAL_RCC_OscConfig+0x504>)
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	604b      	str	r3, [r1, #4]
 8002f0c:	e018      	b.n	8002f40 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f0e:	4b5d      	ldr	r3, [pc, #372]	; (8003084 <HAL_RCC_OscConfig+0x504>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a5c      	ldr	r2, [pc, #368]	; (8003084 <HAL_RCC_OscConfig+0x504>)
 8002f14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f1a:	f7fe f909 	bl	8001130 <HAL_GetTick>
 8002f1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f20:	e008      	b.n	8002f34 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f22:	f7fe f905 	bl	8001130 <HAL_GetTick>
 8002f26:	4602      	mov	r2, r0
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	1ad3      	subs	r3, r2, r3
 8002f2c:	2b02      	cmp	r3, #2
 8002f2e:	d901      	bls.n	8002f34 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002f30:	2303      	movs	r3, #3
 8002f32:	e237      	b.n	80033a4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f34:	4b53      	ldr	r3, [pc, #332]	; (8003084 <HAL_RCC_OscConfig+0x504>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d1f0      	bne.n	8002f22 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 0308 	and.w	r3, r3, #8
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d03c      	beq.n	8002fc6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	695b      	ldr	r3, [r3, #20]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d01c      	beq.n	8002f8e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f54:	4b4b      	ldr	r3, [pc, #300]	; (8003084 <HAL_RCC_OscConfig+0x504>)
 8002f56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f5a:	4a4a      	ldr	r2, [pc, #296]	; (8003084 <HAL_RCC_OscConfig+0x504>)
 8002f5c:	f043 0301 	orr.w	r3, r3, #1
 8002f60:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f64:	f7fe f8e4 	bl	8001130 <HAL_GetTick>
 8002f68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f6a:	e008      	b.n	8002f7e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f6c:	f7fe f8e0 	bl	8001130 <HAL_GetTick>
 8002f70:	4602      	mov	r2, r0
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	1ad3      	subs	r3, r2, r3
 8002f76:	2b02      	cmp	r3, #2
 8002f78:	d901      	bls.n	8002f7e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	e212      	b.n	80033a4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f7e:	4b41      	ldr	r3, [pc, #260]	; (8003084 <HAL_RCC_OscConfig+0x504>)
 8002f80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f84:	f003 0302 	and.w	r3, r3, #2
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d0ef      	beq.n	8002f6c <HAL_RCC_OscConfig+0x3ec>
 8002f8c:	e01b      	b.n	8002fc6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f8e:	4b3d      	ldr	r3, [pc, #244]	; (8003084 <HAL_RCC_OscConfig+0x504>)
 8002f90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f94:	4a3b      	ldr	r2, [pc, #236]	; (8003084 <HAL_RCC_OscConfig+0x504>)
 8002f96:	f023 0301 	bic.w	r3, r3, #1
 8002f9a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f9e:	f7fe f8c7 	bl	8001130 <HAL_GetTick>
 8002fa2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002fa4:	e008      	b.n	8002fb8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fa6:	f7fe f8c3 	bl	8001130 <HAL_GetTick>
 8002faa:	4602      	mov	r2, r0
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	1ad3      	subs	r3, r2, r3
 8002fb0:	2b02      	cmp	r3, #2
 8002fb2:	d901      	bls.n	8002fb8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002fb4:	2303      	movs	r3, #3
 8002fb6:	e1f5      	b.n	80033a4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002fb8:	4b32      	ldr	r3, [pc, #200]	; (8003084 <HAL_RCC_OscConfig+0x504>)
 8002fba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fbe:	f003 0302 	and.w	r3, r3, #2
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d1ef      	bne.n	8002fa6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 0304 	and.w	r3, r3, #4
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	f000 80a6 	beq.w	8003120 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002fd8:	4b2a      	ldr	r3, [pc, #168]	; (8003084 <HAL_RCC_OscConfig+0x504>)
 8002fda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d10d      	bne.n	8003000 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fe4:	4b27      	ldr	r3, [pc, #156]	; (8003084 <HAL_RCC_OscConfig+0x504>)
 8002fe6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fe8:	4a26      	ldr	r2, [pc, #152]	; (8003084 <HAL_RCC_OscConfig+0x504>)
 8002fea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fee:	6593      	str	r3, [r2, #88]	; 0x58
 8002ff0:	4b24      	ldr	r3, [pc, #144]	; (8003084 <HAL_RCC_OscConfig+0x504>)
 8002ff2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ff4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ff8:	60bb      	str	r3, [r7, #8]
 8002ffa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003000:	4b21      	ldr	r3, [pc, #132]	; (8003088 <HAL_RCC_OscConfig+0x508>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003008:	2b00      	cmp	r3, #0
 800300a:	d118      	bne.n	800303e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800300c:	4b1e      	ldr	r3, [pc, #120]	; (8003088 <HAL_RCC_OscConfig+0x508>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a1d      	ldr	r2, [pc, #116]	; (8003088 <HAL_RCC_OscConfig+0x508>)
 8003012:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003016:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003018:	f7fe f88a 	bl	8001130 <HAL_GetTick>
 800301c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800301e:	e008      	b.n	8003032 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003020:	f7fe f886 	bl	8001130 <HAL_GetTick>
 8003024:	4602      	mov	r2, r0
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	2b02      	cmp	r3, #2
 800302c:	d901      	bls.n	8003032 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800302e:	2303      	movs	r3, #3
 8003030:	e1b8      	b.n	80033a4 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003032:	4b15      	ldr	r3, [pc, #84]	; (8003088 <HAL_RCC_OscConfig+0x508>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800303a:	2b00      	cmp	r3, #0
 800303c:	d0f0      	beq.n	8003020 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	2b01      	cmp	r3, #1
 8003044:	d108      	bne.n	8003058 <HAL_RCC_OscConfig+0x4d8>
 8003046:	4b0f      	ldr	r3, [pc, #60]	; (8003084 <HAL_RCC_OscConfig+0x504>)
 8003048:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800304c:	4a0d      	ldr	r2, [pc, #52]	; (8003084 <HAL_RCC_OscConfig+0x504>)
 800304e:	f043 0301 	orr.w	r3, r3, #1
 8003052:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003056:	e029      	b.n	80030ac <HAL_RCC_OscConfig+0x52c>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	2b05      	cmp	r3, #5
 800305e:	d115      	bne.n	800308c <HAL_RCC_OscConfig+0x50c>
 8003060:	4b08      	ldr	r3, [pc, #32]	; (8003084 <HAL_RCC_OscConfig+0x504>)
 8003062:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003066:	4a07      	ldr	r2, [pc, #28]	; (8003084 <HAL_RCC_OscConfig+0x504>)
 8003068:	f043 0304 	orr.w	r3, r3, #4
 800306c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003070:	4b04      	ldr	r3, [pc, #16]	; (8003084 <HAL_RCC_OscConfig+0x504>)
 8003072:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003076:	4a03      	ldr	r2, [pc, #12]	; (8003084 <HAL_RCC_OscConfig+0x504>)
 8003078:	f043 0301 	orr.w	r3, r3, #1
 800307c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003080:	e014      	b.n	80030ac <HAL_RCC_OscConfig+0x52c>
 8003082:	bf00      	nop
 8003084:	40021000 	.word	0x40021000
 8003088:	40007000 	.word	0x40007000
 800308c:	4b9d      	ldr	r3, [pc, #628]	; (8003304 <HAL_RCC_OscConfig+0x784>)
 800308e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003092:	4a9c      	ldr	r2, [pc, #624]	; (8003304 <HAL_RCC_OscConfig+0x784>)
 8003094:	f023 0301 	bic.w	r3, r3, #1
 8003098:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800309c:	4b99      	ldr	r3, [pc, #612]	; (8003304 <HAL_RCC_OscConfig+0x784>)
 800309e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030a2:	4a98      	ldr	r2, [pc, #608]	; (8003304 <HAL_RCC_OscConfig+0x784>)
 80030a4:	f023 0304 	bic.w	r3, r3, #4
 80030a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d016      	beq.n	80030e2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030b4:	f7fe f83c 	bl	8001130 <HAL_GetTick>
 80030b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030ba:	e00a      	b.n	80030d2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030bc:	f7fe f838 	bl	8001130 <HAL_GetTick>
 80030c0:	4602      	mov	r2, r0
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	1ad3      	subs	r3, r2, r3
 80030c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d901      	bls.n	80030d2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80030ce:	2303      	movs	r3, #3
 80030d0:	e168      	b.n	80033a4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030d2:	4b8c      	ldr	r3, [pc, #560]	; (8003304 <HAL_RCC_OscConfig+0x784>)
 80030d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030d8:	f003 0302 	and.w	r3, r3, #2
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d0ed      	beq.n	80030bc <HAL_RCC_OscConfig+0x53c>
 80030e0:	e015      	b.n	800310e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030e2:	f7fe f825 	bl	8001130 <HAL_GetTick>
 80030e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80030e8:	e00a      	b.n	8003100 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030ea:	f7fe f821 	bl	8001130 <HAL_GetTick>
 80030ee:	4602      	mov	r2, r0
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	1ad3      	subs	r3, r2, r3
 80030f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d901      	bls.n	8003100 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80030fc:	2303      	movs	r3, #3
 80030fe:	e151      	b.n	80033a4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003100:	4b80      	ldr	r3, [pc, #512]	; (8003304 <HAL_RCC_OscConfig+0x784>)
 8003102:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003106:	f003 0302 	and.w	r3, r3, #2
 800310a:	2b00      	cmp	r3, #0
 800310c:	d1ed      	bne.n	80030ea <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800310e:	7ffb      	ldrb	r3, [r7, #31]
 8003110:	2b01      	cmp	r3, #1
 8003112:	d105      	bne.n	8003120 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003114:	4b7b      	ldr	r3, [pc, #492]	; (8003304 <HAL_RCC_OscConfig+0x784>)
 8003116:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003118:	4a7a      	ldr	r2, [pc, #488]	; (8003304 <HAL_RCC_OscConfig+0x784>)
 800311a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800311e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 0320 	and.w	r3, r3, #32
 8003128:	2b00      	cmp	r3, #0
 800312a:	d03c      	beq.n	80031a6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003130:	2b00      	cmp	r3, #0
 8003132:	d01c      	beq.n	800316e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003134:	4b73      	ldr	r3, [pc, #460]	; (8003304 <HAL_RCC_OscConfig+0x784>)
 8003136:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800313a:	4a72      	ldr	r2, [pc, #456]	; (8003304 <HAL_RCC_OscConfig+0x784>)
 800313c:	f043 0301 	orr.w	r3, r3, #1
 8003140:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003144:	f7fd fff4 	bl	8001130 <HAL_GetTick>
 8003148:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800314a:	e008      	b.n	800315e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800314c:	f7fd fff0 	bl	8001130 <HAL_GetTick>
 8003150:	4602      	mov	r2, r0
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	2b02      	cmp	r3, #2
 8003158:	d901      	bls.n	800315e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800315a:	2303      	movs	r3, #3
 800315c:	e122      	b.n	80033a4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800315e:	4b69      	ldr	r3, [pc, #420]	; (8003304 <HAL_RCC_OscConfig+0x784>)
 8003160:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003164:	f003 0302 	and.w	r3, r3, #2
 8003168:	2b00      	cmp	r3, #0
 800316a:	d0ef      	beq.n	800314c <HAL_RCC_OscConfig+0x5cc>
 800316c:	e01b      	b.n	80031a6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800316e:	4b65      	ldr	r3, [pc, #404]	; (8003304 <HAL_RCC_OscConfig+0x784>)
 8003170:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003174:	4a63      	ldr	r2, [pc, #396]	; (8003304 <HAL_RCC_OscConfig+0x784>)
 8003176:	f023 0301 	bic.w	r3, r3, #1
 800317a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800317e:	f7fd ffd7 	bl	8001130 <HAL_GetTick>
 8003182:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003184:	e008      	b.n	8003198 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003186:	f7fd ffd3 	bl	8001130 <HAL_GetTick>
 800318a:	4602      	mov	r2, r0
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	2b02      	cmp	r3, #2
 8003192:	d901      	bls.n	8003198 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003194:	2303      	movs	r3, #3
 8003196:	e105      	b.n	80033a4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003198:	4b5a      	ldr	r3, [pc, #360]	; (8003304 <HAL_RCC_OscConfig+0x784>)
 800319a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800319e:	f003 0302 	and.w	r3, r3, #2
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d1ef      	bne.n	8003186 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	f000 80f9 	beq.w	80033a2 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031b4:	2b02      	cmp	r3, #2
 80031b6:	f040 80cf 	bne.w	8003358 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80031ba:	4b52      	ldr	r3, [pc, #328]	; (8003304 <HAL_RCC_OscConfig+0x784>)
 80031bc:	68db      	ldr	r3, [r3, #12]
 80031be:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	f003 0203 	and.w	r2, r3, #3
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ca:	429a      	cmp	r2, r3
 80031cc:	d12c      	bne.n	8003228 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d8:	3b01      	subs	r3, #1
 80031da:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80031dc:	429a      	cmp	r2, r3
 80031de:	d123      	bne.n	8003228 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031ea:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d11b      	bne.n	8003228 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031fa:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80031fc:	429a      	cmp	r2, r3
 80031fe:	d113      	bne.n	8003228 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800320a:	085b      	lsrs	r3, r3, #1
 800320c:	3b01      	subs	r3, #1
 800320e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003210:	429a      	cmp	r2, r3
 8003212:	d109      	bne.n	8003228 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321e:	085b      	lsrs	r3, r3, #1
 8003220:	3b01      	subs	r3, #1
 8003222:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003224:	429a      	cmp	r2, r3
 8003226:	d071      	beq.n	800330c <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003228:	69bb      	ldr	r3, [r7, #24]
 800322a:	2b0c      	cmp	r3, #12
 800322c:	d068      	beq.n	8003300 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800322e:	4b35      	ldr	r3, [pc, #212]	; (8003304 <HAL_RCC_OscConfig+0x784>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003236:	2b00      	cmp	r3, #0
 8003238:	d105      	bne.n	8003246 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800323a:	4b32      	ldr	r3, [pc, #200]	; (8003304 <HAL_RCC_OscConfig+0x784>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003242:	2b00      	cmp	r3, #0
 8003244:	d001      	beq.n	800324a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e0ac      	b.n	80033a4 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800324a:	4b2e      	ldr	r3, [pc, #184]	; (8003304 <HAL_RCC_OscConfig+0x784>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a2d      	ldr	r2, [pc, #180]	; (8003304 <HAL_RCC_OscConfig+0x784>)
 8003250:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003254:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003256:	f7fd ff6b 	bl	8001130 <HAL_GetTick>
 800325a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800325c:	e008      	b.n	8003270 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800325e:	f7fd ff67 	bl	8001130 <HAL_GetTick>
 8003262:	4602      	mov	r2, r0
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	1ad3      	subs	r3, r2, r3
 8003268:	2b02      	cmp	r3, #2
 800326a:	d901      	bls.n	8003270 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 800326c:	2303      	movs	r3, #3
 800326e:	e099      	b.n	80033a4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003270:	4b24      	ldr	r3, [pc, #144]	; (8003304 <HAL_RCC_OscConfig+0x784>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003278:	2b00      	cmp	r3, #0
 800327a:	d1f0      	bne.n	800325e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800327c:	4b21      	ldr	r3, [pc, #132]	; (8003304 <HAL_RCC_OscConfig+0x784>)
 800327e:	68da      	ldr	r2, [r3, #12]
 8003280:	4b21      	ldr	r3, [pc, #132]	; (8003308 <HAL_RCC_OscConfig+0x788>)
 8003282:	4013      	ands	r3, r2
 8003284:	687a      	ldr	r2, [r7, #4]
 8003286:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003288:	687a      	ldr	r2, [r7, #4]
 800328a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800328c:	3a01      	subs	r2, #1
 800328e:	0112      	lsls	r2, r2, #4
 8003290:	4311      	orrs	r1, r2
 8003292:	687a      	ldr	r2, [r7, #4]
 8003294:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003296:	0212      	lsls	r2, r2, #8
 8003298:	4311      	orrs	r1, r2
 800329a:	687a      	ldr	r2, [r7, #4]
 800329c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800329e:	0852      	lsrs	r2, r2, #1
 80032a0:	3a01      	subs	r2, #1
 80032a2:	0552      	lsls	r2, r2, #21
 80032a4:	4311      	orrs	r1, r2
 80032a6:	687a      	ldr	r2, [r7, #4]
 80032a8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80032aa:	0852      	lsrs	r2, r2, #1
 80032ac:	3a01      	subs	r2, #1
 80032ae:	0652      	lsls	r2, r2, #25
 80032b0:	4311      	orrs	r1, r2
 80032b2:	687a      	ldr	r2, [r7, #4]
 80032b4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80032b6:	06d2      	lsls	r2, r2, #27
 80032b8:	430a      	orrs	r2, r1
 80032ba:	4912      	ldr	r1, [pc, #72]	; (8003304 <HAL_RCC_OscConfig+0x784>)
 80032bc:	4313      	orrs	r3, r2
 80032be:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80032c0:	4b10      	ldr	r3, [pc, #64]	; (8003304 <HAL_RCC_OscConfig+0x784>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a0f      	ldr	r2, [pc, #60]	; (8003304 <HAL_RCC_OscConfig+0x784>)
 80032c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032ca:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80032cc:	4b0d      	ldr	r3, [pc, #52]	; (8003304 <HAL_RCC_OscConfig+0x784>)
 80032ce:	68db      	ldr	r3, [r3, #12]
 80032d0:	4a0c      	ldr	r2, [pc, #48]	; (8003304 <HAL_RCC_OscConfig+0x784>)
 80032d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032d6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80032d8:	f7fd ff2a 	bl	8001130 <HAL_GetTick>
 80032dc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032de:	e008      	b.n	80032f2 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032e0:	f7fd ff26 	bl	8001130 <HAL_GetTick>
 80032e4:	4602      	mov	r2, r0
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	1ad3      	subs	r3, r2, r3
 80032ea:	2b02      	cmp	r3, #2
 80032ec:	d901      	bls.n	80032f2 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80032ee:	2303      	movs	r3, #3
 80032f0:	e058      	b.n	80033a4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032f2:	4b04      	ldr	r3, [pc, #16]	; (8003304 <HAL_RCC_OscConfig+0x784>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d0f0      	beq.n	80032e0 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80032fe:	e050      	b.n	80033a2 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	e04f      	b.n	80033a4 <HAL_RCC_OscConfig+0x824>
 8003304:	40021000 	.word	0x40021000
 8003308:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800330c:	4b27      	ldr	r3, [pc, #156]	; (80033ac <HAL_RCC_OscConfig+0x82c>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003314:	2b00      	cmp	r3, #0
 8003316:	d144      	bne.n	80033a2 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003318:	4b24      	ldr	r3, [pc, #144]	; (80033ac <HAL_RCC_OscConfig+0x82c>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a23      	ldr	r2, [pc, #140]	; (80033ac <HAL_RCC_OscConfig+0x82c>)
 800331e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003322:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003324:	4b21      	ldr	r3, [pc, #132]	; (80033ac <HAL_RCC_OscConfig+0x82c>)
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	4a20      	ldr	r2, [pc, #128]	; (80033ac <HAL_RCC_OscConfig+0x82c>)
 800332a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800332e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003330:	f7fd fefe 	bl	8001130 <HAL_GetTick>
 8003334:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003336:	e008      	b.n	800334a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003338:	f7fd fefa 	bl	8001130 <HAL_GetTick>
 800333c:	4602      	mov	r2, r0
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	1ad3      	subs	r3, r2, r3
 8003342:	2b02      	cmp	r3, #2
 8003344:	d901      	bls.n	800334a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8003346:	2303      	movs	r3, #3
 8003348:	e02c      	b.n	80033a4 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800334a:	4b18      	ldr	r3, [pc, #96]	; (80033ac <HAL_RCC_OscConfig+0x82c>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003352:	2b00      	cmp	r3, #0
 8003354:	d0f0      	beq.n	8003338 <HAL_RCC_OscConfig+0x7b8>
 8003356:	e024      	b.n	80033a2 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003358:	69bb      	ldr	r3, [r7, #24]
 800335a:	2b0c      	cmp	r3, #12
 800335c:	d01f      	beq.n	800339e <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800335e:	4b13      	ldr	r3, [pc, #76]	; (80033ac <HAL_RCC_OscConfig+0x82c>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a12      	ldr	r2, [pc, #72]	; (80033ac <HAL_RCC_OscConfig+0x82c>)
 8003364:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003368:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800336a:	f7fd fee1 	bl	8001130 <HAL_GetTick>
 800336e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003370:	e008      	b.n	8003384 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003372:	f7fd fedd 	bl	8001130 <HAL_GetTick>
 8003376:	4602      	mov	r2, r0
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	1ad3      	subs	r3, r2, r3
 800337c:	2b02      	cmp	r3, #2
 800337e:	d901      	bls.n	8003384 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8003380:	2303      	movs	r3, #3
 8003382:	e00f      	b.n	80033a4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003384:	4b09      	ldr	r3, [pc, #36]	; (80033ac <HAL_RCC_OscConfig+0x82c>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800338c:	2b00      	cmp	r3, #0
 800338e:	d1f0      	bne.n	8003372 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003390:	4b06      	ldr	r3, [pc, #24]	; (80033ac <HAL_RCC_OscConfig+0x82c>)
 8003392:	68da      	ldr	r2, [r3, #12]
 8003394:	4905      	ldr	r1, [pc, #20]	; (80033ac <HAL_RCC_OscConfig+0x82c>)
 8003396:	4b06      	ldr	r3, [pc, #24]	; (80033b0 <HAL_RCC_OscConfig+0x830>)
 8003398:	4013      	ands	r3, r2
 800339a:	60cb      	str	r3, [r1, #12]
 800339c:	e001      	b.n	80033a2 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e000      	b.n	80033a4 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80033a2:	2300      	movs	r3, #0
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	3720      	adds	r7, #32
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}
 80033ac:	40021000 	.word	0x40021000
 80033b0:	feeefffc 	.word	0xfeeefffc

080033b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b084      	sub	sp, #16
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
 80033bc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d101      	bne.n	80033c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	e0e7      	b.n	8003598 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033c8:	4b75      	ldr	r3, [pc, #468]	; (80035a0 <HAL_RCC_ClockConfig+0x1ec>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 0307 	and.w	r3, r3, #7
 80033d0:	683a      	ldr	r2, [r7, #0]
 80033d2:	429a      	cmp	r2, r3
 80033d4:	d910      	bls.n	80033f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033d6:	4b72      	ldr	r3, [pc, #456]	; (80035a0 <HAL_RCC_ClockConfig+0x1ec>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f023 0207 	bic.w	r2, r3, #7
 80033de:	4970      	ldr	r1, [pc, #448]	; (80035a0 <HAL_RCC_ClockConfig+0x1ec>)
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	4313      	orrs	r3, r2
 80033e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033e6:	4b6e      	ldr	r3, [pc, #440]	; (80035a0 <HAL_RCC_ClockConfig+0x1ec>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 0307 	and.w	r3, r3, #7
 80033ee:	683a      	ldr	r2, [r7, #0]
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d001      	beq.n	80033f8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	e0cf      	b.n	8003598 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 0302 	and.w	r3, r3, #2
 8003400:	2b00      	cmp	r3, #0
 8003402:	d010      	beq.n	8003426 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	689a      	ldr	r2, [r3, #8]
 8003408:	4b66      	ldr	r3, [pc, #408]	; (80035a4 <HAL_RCC_ClockConfig+0x1f0>)
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003410:	429a      	cmp	r2, r3
 8003412:	d908      	bls.n	8003426 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003414:	4b63      	ldr	r3, [pc, #396]	; (80035a4 <HAL_RCC_ClockConfig+0x1f0>)
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	4960      	ldr	r1, [pc, #384]	; (80035a4 <HAL_RCC_ClockConfig+0x1f0>)
 8003422:	4313      	orrs	r3, r2
 8003424:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 0301 	and.w	r3, r3, #1
 800342e:	2b00      	cmp	r3, #0
 8003430:	d04c      	beq.n	80034cc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	2b03      	cmp	r3, #3
 8003438:	d107      	bne.n	800344a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800343a:	4b5a      	ldr	r3, [pc, #360]	; (80035a4 <HAL_RCC_ClockConfig+0x1f0>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003442:	2b00      	cmp	r3, #0
 8003444:	d121      	bne.n	800348a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e0a6      	b.n	8003598 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	2b02      	cmp	r3, #2
 8003450:	d107      	bne.n	8003462 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003452:	4b54      	ldr	r3, [pc, #336]	; (80035a4 <HAL_RCC_ClockConfig+0x1f0>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800345a:	2b00      	cmp	r3, #0
 800345c:	d115      	bne.n	800348a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	e09a      	b.n	8003598 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d107      	bne.n	800347a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800346a:	4b4e      	ldr	r3, [pc, #312]	; (80035a4 <HAL_RCC_ClockConfig+0x1f0>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 0302 	and.w	r3, r3, #2
 8003472:	2b00      	cmp	r3, #0
 8003474:	d109      	bne.n	800348a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e08e      	b.n	8003598 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800347a:	4b4a      	ldr	r3, [pc, #296]	; (80035a4 <HAL_RCC_ClockConfig+0x1f0>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003482:	2b00      	cmp	r3, #0
 8003484:	d101      	bne.n	800348a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	e086      	b.n	8003598 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800348a:	4b46      	ldr	r3, [pc, #280]	; (80035a4 <HAL_RCC_ClockConfig+0x1f0>)
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	f023 0203 	bic.w	r2, r3, #3
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	4943      	ldr	r1, [pc, #268]	; (80035a4 <HAL_RCC_ClockConfig+0x1f0>)
 8003498:	4313      	orrs	r3, r2
 800349a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800349c:	f7fd fe48 	bl	8001130 <HAL_GetTick>
 80034a0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034a2:	e00a      	b.n	80034ba <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034a4:	f7fd fe44 	bl	8001130 <HAL_GetTick>
 80034a8:	4602      	mov	r2, r0
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d901      	bls.n	80034ba <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80034b6:	2303      	movs	r3, #3
 80034b8:	e06e      	b.n	8003598 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034ba:	4b3a      	ldr	r3, [pc, #232]	; (80035a4 <HAL_RCC_ClockConfig+0x1f0>)
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	f003 020c 	and.w	r2, r3, #12
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	009b      	lsls	r3, r3, #2
 80034c8:	429a      	cmp	r2, r3
 80034ca:	d1eb      	bne.n	80034a4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 0302 	and.w	r3, r3, #2
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d010      	beq.n	80034fa <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	689a      	ldr	r2, [r3, #8]
 80034dc:	4b31      	ldr	r3, [pc, #196]	; (80035a4 <HAL_RCC_ClockConfig+0x1f0>)
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d208      	bcs.n	80034fa <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034e8:	4b2e      	ldr	r3, [pc, #184]	; (80035a4 <HAL_RCC_ClockConfig+0x1f0>)
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	492b      	ldr	r1, [pc, #172]	; (80035a4 <HAL_RCC_ClockConfig+0x1f0>)
 80034f6:	4313      	orrs	r3, r2
 80034f8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80034fa:	4b29      	ldr	r3, [pc, #164]	; (80035a0 <HAL_RCC_ClockConfig+0x1ec>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 0307 	and.w	r3, r3, #7
 8003502:	683a      	ldr	r2, [r7, #0]
 8003504:	429a      	cmp	r2, r3
 8003506:	d210      	bcs.n	800352a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003508:	4b25      	ldr	r3, [pc, #148]	; (80035a0 <HAL_RCC_ClockConfig+0x1ec>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f023 0207 	bic.w	r2, r3, #7
 8003510:	4923      	ldr	r1, [pc, #140]	; (80035a0 <HAL_RCC_ClockConfig+0x1ec>)
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	4313      	orrs	r3, r2
 8003516:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003518:	4b21      	ldr	r3, [pc, #132]	; (80035a0 <HAL_RCC_ClockConfig+0x1ec>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 0307 	and.w	r3, r3, #7
 8003520:	683a      	ldr	r2, [r7, #0]
 8003522:	429a      	cmp	r2, r3
 8003524:	d001      	beq.n	800352a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e036      	b.n	8003598 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 0304 	and.w	r3, r3, #4
 8003532:	2b00      	cmp	r3, #0
 8003534:	d008      	beq.n	8003548 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003536:	4b1b      	ldr	r3, [pc, #108]	; (80035a4 <HAL_RCC_ClockConfig+0x1f0>)
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	68db      	ldr	r3, [r3, #12]
 8003542:	4918      	ldr	r1, [pc, #96]	; (80035a4 <HAL_RCC_ClockConfig+0x1f0>)
 8003544:	4313      	orrs	r3, r2
 8003546:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f003 0308 	and.w	r3, r3, #8
 8003550:	2b00      	cmp	r3, #0
 8003552:	d009      	beq.n	8003568 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003554:	4b13      	ldr	r3, [pc, #76]	; (80035a4 <HAL_RCC_ClockConfig+0x1f0>)
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	691b      	ldr	r3, [r3, #16]
 8003560:	00db      	lsls	r3, r3, #3
 8003562:	4910      	ldr	r1, [pc, #64]	; (80035a4 <HAL_RCC_ClockConfig+0x1f0>)
 8003564:	4313      	orrs	r3, r2
 8003566:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003568:	f000 f824 	bl	80035b4 <HAL_RCC_GetSysClockFreq>
 800356c:	4602      	mov	r2, r0
 800356e:	4b0d      	ldr	r3, [pc, #52]	; (80035a4 <HAL_RCC_ClockConfig+0x1f0>)
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	091b      	lsrs	r3, r3, #4
 8003574:	f003 030f 	and.w	r3, r3, #15
 8003578:	490b      	ldr	r1, [pc, #44]	; (80035a8 <HAL_RCC_ClockConfig+0x1f4>)
 800357a:	5ccb      	ldrb	r3, [r1, r3]
 800357c:	f003 031f 	and.w	r3, r3, #31
 8003580:	fa22 f303 	lsr.w	r3, r2, r3
 8003584:	4a09      	ldr	r2, [pc, #36]	; (80035ac <HAL_RCC_ClockConfig+0x1f8>)
 8003586:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003588:	4b09      	ldr	r3, [pc, #36]	; (80035b0 <HAL_RCC_ClockConfig+0x1fc>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4618      	mov	r0, r3
 800358e:	f7fd fd7f 	bl	8001090 <HAL_InitTick>
 8003592:	4603      	mov	r3, r0
 8003594:	72fb      	strb	r3, [r7, #11]

  return status;
 8003596:	7afb      	ldrb	r3, [r7, #11]
}
 8003598:	4618      	mov	r0, r3
 800359a:	3710      	adds	r7, #16
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}
 80035a0:	40022000 	.word	0x40022000
 80035a4:	40021000 	.word	0x40021000
 80035a8:	0800b960 	.word	0x0800b960
 80035ac:	20000000 	.word	0x20000000
 80035b0:	20000004 	.word	0x20000004

080035b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b089      	sub	sp, #36	; 0x24
 80035b8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80035ba:	2300      	movs	r3, #0
 80035bc:	61fb      	str	r3, [r7, #28]
 80035be:	2300      	movs	r3, #0
 80035c0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80035c2:	4b3e      	ldr	r3, [pc, #248]	; (80036bc <HAL_RCC_GetSysClockFreq+0x108>)
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	f003 030c 	and.w	r3, r3, #12
 80035ca:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80035cc:	4b3b      	ldr	r3, [pc, #236]	; (80036bc <HAL_RCC_GetSysClockFreq+0x108>)
 80035ce:	68db      	ldr	r3, [r3, #12]
 80035d0:	f003 0303 	and.w	r3, r3, #3
 80035d4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d005      	beq.n	80035e8 <HAL_RCC_GetSysClockFreq+0x34>
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	2b0c      	cmp	r3, #12
 80035e0:	d121      	bne.n	8003626 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d11e      	bne.n	8003626 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80035e8:	4b34      	ldr	r3, [pc, #208]	; (80036bc <HAL_RCC_GetSysClockFreq+0x108>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f003 0308 	and.w	r3, r3, #8
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d107      	bne.n	8003604 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80035f4:	4b31      	ldr	r3, [pc, #196]	; (80036bc <HAL_RCC_GetSysClockFreq+0x108>)
 80035f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035fa:	0a1b      	lsrs	r3, r3, #8
 80035fc:	f003 030f 	and.w	r3, r3, #15
 8003600:	61fb      	str	r3, [r7, #28]
 8003602:	e005      	b.n	8003610 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003604:	4b2d      	ldr	r3, [pc, #180]	; (80036bc <HAL_RCC_GetSysClockFreq+0x108>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	091b      	lsrs	r3, r3, #4
 800360a:	f003 030f 	and.w	r3, r3, #15
 800360e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003610:	4a2b      	ldr	r2, [pc, #172]	; (80036c0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003612:	69fb      	ldr	r3, [r7, #28]
 8003614:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003618:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d10d      	bne.n	800363c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003620:	69fb      	ldr	r3, [r7, #28]
 8003622:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003624:	e00a      	b.n	800363c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	2b04      	cmp	r3, #4
 800362a:	d102      	bne.n	8003632 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800362c:	4b25      	ldr	r3, [pc, #148]	; (80036c4 <HAL_RCC_GetSysClockFreq+0x110>)
 800362e:	61bb      	str	r3, [r7, #24]
 8003630:	e004      	b.n	800363c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	2b08      	cmp	r3, #8
 8003636:	d101      	bne.n	800363c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003638:	4b23      	ldr	r3, [pc, #140]	; (80036c8 <HAL_RCC_GetSysClockFreq+0x114>)
 800363a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	2b0c      	cmp	r3, #12
 8003640:	d134      	bne.n	80036ac <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003642:	4b1e      	ldr	r3, [pc, #120]	; (80036bc <HAL_RCC_GetSysClockFreq+0x108>)
 8003644:	68db      	ldr	r3, [r3, #12]
 8003646:	f003 0303 	and.w	r3, r3, #3
 800364a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	2b02      	cmp	r3, #2
 8003650:	d003      	beq.n	800365a <HAL_RCC_GetSysClockFreq+0xa6>
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	2b03      	cmp	r3, #3
 8003656:	d003      	beq.n	8003660 <HAL_RCC_GetSysClockFreq+0xac>
 8003658:	e005      	b.n	8003666 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800365a:	4b1a      	ldr	r3, [pc, #104]	; (80036c4 <HAL_RCC_GetSysClockFreq+0x110>)
 800365c:	617b      	str	r3, [r7, #20]
      break;
 800365e:	e005      	b.n	800366c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003660:	4b19      	ldr	r3, [pc, #100]	; (80036c8 <HAL_RCC_GetSysClockFreq+0x114>)
 8003662:	617b      	str	r3, [r7, #20]
      break;
 8003664:	e002      	b.n	800366c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003666:	69fb      	ldr	r3, [r7, #28]
 8003668:	617b      	str	r3, [r7, #20]
      break;
 800366a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800366c:	4b13      	ldr	r3, [pc, #76]	; (80036bc <HAL_RCC_GetSysClockFreq+0x108>)
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	091b      	lsrs	r3, r3, #4
 8003672:	f003 0307 	and.w	r3, r3, #7
 8003676:	3301      	adds	r3, #1
 8003678:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800367a:	4b10      	ldr	r3, [pc, #64]	; (80036bc <HAL_RCC_GetSysClockFreq+0x108>)
 800367c:	68db      	ldr	r3, [r3, #12]
 800367e:	0a1b      	lsrs	r3, r3, #8
 8003680:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003684:	697a      	ldr	r2, [r7, #20]
 8003686:	fb03 f202 	mul.w	r2, r3, r2
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003690:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003692:	4b0a      	ldr	r3, [pc, #40]	; (80036bc <HAL_RCC_GetSysClockFreq+0x108>)
 8003694:	68db      	ldr	r3, [r3, #12]
 8003696:	0e5b      	lsrs	r3, r3, #25
 8003698:	f003 0303 	and.w	r3, r3, #3
 800369c:	3301      	adds	r3, #1
 800369e:	005b      	lsls	r3, r3, #1
 80036a0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80036a2:	697a      	ldr	r2, [r7, #20]
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80036aa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80036ac:	69bb      	ldr	r3, [r7, #24]
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3724      	adds	r7, #36	; 0x24
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr
 80036ba:	bf00      	nop
 80036bc:	40021000 	.word	0x40021000
 80036c0:	0800b978 	.word	0x0800b978
 80036c4:	00f42400 	.word	0x00f42400
 80036c8:	007a1200 	.word	0x007a1200

080036cc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036cc:	b480      	push	{r7}
 80036ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036d0:	4b03      	ldr	r3, [pc, #12]	; (80036e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80036d2:	681b      	ldr	r3, [r3, #0]
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	46bd      	mov	sp, r7
 80036d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036dc:	4770      	bx	lr
 80036de:	bf00      	nop
 80036e0:	20000000 	.word	0x20000000

080036e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80036e8:	f7ff fff0 	bl	80036cc <HAL_RCC_GetHCLKFreq>
 80036ec:	4602      	mov	r2, r0
 80036ee:	4b06      	ldr	r3, [pc, #24]	; (8003708 <HAL_RCC_GetPCLK1Freq+0x24>)
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	0a1b      	lsrs	r3, r3, #8
 80036f4:	f003 0307 	and.w	r3, r3, #7
 80036f8:	4904      	ldr	r1, [pc, #16]	; (800370c <HAL_RCC_GetPCLK1Freq+0x28>)
 80036fa:	5ccb      	ldrb	r3, [r1, r3]
 80036fc:	f003 031f 	and.w	r3, r3, #31
 8003700:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003704:	4618      	mov	r0, r3
 8003706:	bd80      	pop	{r7, pc}
 8003708:	40021000 	.word	0x40021000
 800370c:	0800b970 	.word	0x0800b970

08003710 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003714:	f7ff ffda 	bl	80036cc <HAL_RCC_GetHCLKFreq>
 8003718:	4602      	mov	r2, r0
 800371a:	4b06      	ldr	r3, [pc, #24]	; (8003734 <HAL_RCC_GetPCLK2Freq+0x24>)
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	0adb      	lsrs	r3, r3, #11
 8003720:	f003 0307 	and.w	r3, r3, #7
 8003724:	4904      	ldr	r1, [pc, #16]	; (8003738 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003726:	5ccb      	ldrb	r3, [r1, r3]
 8003728:	f003 031f 	and.w	r3, r3, #31
 800372c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003730:	4618      	mov	r0, r3
 8003732:	bd80      	pop	{r7, pc}
 8003734:	40021000 	.word	0x40021000
 8003738:	0800b970 	.word	0x0800b970

0800373c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b086      	sub	sp, #24
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003744:	2300      	movs	r3, #0
 8003746:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003748:	4b2a      	ldr	r3, [pc, #168]	; (80037f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800374a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800374c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003750:	2b00      	cmp	r3, #0
 8003752:	d003      	beq.n	800375c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003754:	f7ff f990 	bl	8002a78 <HAL_PWREx_GetVoltageRange>
 8003758:	6178      	str	r0, [r7, #20]
 800375a:	e014      	b.n	8003786 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800375c:	4b25      	ldr	r3, [pc, #148]	; (80037f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800375e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003760:	4a24      	ldr	r2, [pc, #144]	; (80037f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003762:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003766:	6593      	str	r3, [r2, #88]	; 0x58
 8003768:	4b22      	ldr	r3, [pc, #136]	; (80037f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800376a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800376c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003770:	60fb      	str	r3, [r7, #12]
 8003772:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003774:	f7ff f980 	bl	8002a78 <HAL_PWREx_GetVoltageRange>
 8003778:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800377a:	4b1e      	ldr	r3, [pc, #120]	; (80037f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800377c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800377e:	4a1d      	ldr	r2, [pc, #116]	; (80037f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003780:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003784:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800378c:	d10b      	bne.n	80037a6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2b80      	cmp	r3, #128	; 0x80
 8003792:	d919      	bls.n	80037c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2ba0      	cmp	r3, #160	; 0xa0
 8003798:	d902      	bls.n	80037a0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800379a:	2302      	movs	r3, #2
 800379c:	613b      	str	r3, [r7, #16]
 800379e:	e013      	b.n	80037c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80037a0:	2301      	movs	r3, #1
 80037a2:	613b      	str	r3, [r7, #16]
 80037a4:	e010      	b.n	80037c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2b80      	cmp	r3, #128	; 0x80
 80037aa:	d902      	bls.n	80037b2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80037ac:	2303      	movs	r3, #3
 80037ae:	613b      	str	r3, [r7, #16]
 80037b0:	e00a      	b.n	80037c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2b80      	cmp	r3, #128	; 0x80
 80037b6:	d102      	bne.n	80037be <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80037b8:	2302      	movs	r3, #2
 80037ba:	613b      	str	r3, [r7, #16]
 80037bc:	e004      	b.n	80037c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2b70      	cmp	r3, #112	; 0x70
 80037c2:	d101      	bne.n	80037c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80037c4:	2301      	movs	r3, #1
 80037c6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80037c8:	4b0b      	ldr	r3, [pc, #44]	; (80037f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f023 0207 	bic.w	r2, r3, #7
 80037d0:	4909      	ldr	r1, [pc, #36]	; (80037f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	4313      	orrs	r3, r2
 80037d6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80037d8:	4b07      	ldr	r3, [pc, #28]	; (80037f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 0307 	and.w	r3, r3, #7
 80037e0:	693a      	ldr	r2, [r7, #16]
 80037e2:	429a      	cmp	r2, r3
 80037e4:	d001      	beq.n	80037ea <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e000      	b.n	80037ec <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80037ea:	2300      	movs	r3, #0
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	3718      	adds	r7, #24
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}
 80037f4:	40021000 	.word	0x40021000
 80037f8:	40022000 	.word	0x40022000

080037fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b086      	sub	sp, #24
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003804:	2300      	movs	r3, #0
 8003806:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003808:	2300      	movs	r3, #0
 800380a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003814:	2b00      	cmp	r3, #0
 8003816:	d041      	beq.n	800389c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800381c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003820:	d02a      	beq.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003822:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003826:	d824      	bhi.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003828:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800382c:	d008      	beq.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800382e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003832:	d81e      	bhi.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003834:	2b00      	cmp	r3, #0
 8003836:	d00a      	beq.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003838:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800383c:	d010      	beq.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800383e:	e018      	b.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003840:	4b86      	ldr	r3, [pc, #536]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003842:	68db      	ldr	r3, [r3, #12]
 8003844:	4a85      	ldr	r2, [pc, #532]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003846:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800384a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800384c:	e015      	b.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	3304      	adds	r3, #4
 8003852:	2100      	movs	r1, #0
 8003854:	4618      	mov	r0, r3
 8003856:	f000 fadd 	bl	8003e14 <RCCEx_PLLSAI1_Config>
 800385a:	4603      	mov	r3, r0
 800385c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800385e:	e00c      	b.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	3320      	adds	r3, #32
 8003864:	2100      	movs	r1, #0
 8003866:	4618      	mov	r0, r3
 8003868:	f000 fbc6 	bl	8003ff8 <RCCEx_PLLSAI2_Config>
 800386c:	4603      	mov	r3, r0
 800386e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003870:	e003      	b.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	74fb      	strb	r3, [r7, #19]
      break;
 8003876:	e000      	b.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003878:	bf00      	nop
    }

    if(ret == HAL_OK)
 800387a:	7cfb      	ldrb	r3, [r7, #19]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d10b      	bne.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003880:	4b76      	ldr	r3, [pc, #472]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003882:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003886:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800388e:	4973      	ldr	r1, [pc, #460]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003890:	4313      	orrs	r3, r2
 8003892:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003896:	e001      	b.n	800389c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003898:	7cfb      	ldrb	r3, [r7, #19]
 800389a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d041      	beq.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038ac:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80038b0:	d02a      	beq.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80038b2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80038b6:	d824      	bhi.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80038b8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80038bc:	d008      	beq.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80038be:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80038c2:	d81e      	bhi.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d00a      	beq.n	80038de <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80038c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80038cc:	d010      	beq.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80038ce:	e018      	b.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80038d0:	4b62      	ldr	r3, [pc, #392]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038d2:	68db      	ldr	r3, [r3, #12]
 80038d4:	4a61      	ldr	r2, [pc, #388]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038da:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80038dc:	e015      	b.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	3304      	adds	r3, #4
 80038e2:	2100      	movs	r1, #0
 80038e4:	4618      	mov	r0, r3
 80038e6:	f000 fa95 	bl	8003e14 <RCCEx_PLLSAI1_Config>
 80038ea:	4603      	mov	r3, r0
 80038ec:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80038ee:	e00c      	b.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	3320      	adds	r3, #32
 80038f4:	2100      	movs	r1, #0
 80038f6:	4618      	mov	r0, r3
 80038f8:	f000 fb7e 	bl	8003ff8 <RCCEx_PLLSAI2_Config>
 80038fc:	4603      	mov	r3, r0
 80038fe:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003900:	e003      	b.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	74fb      	strb	r3, [r7, #19]
      break;
 8003906:	e000      	b.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003908:	bf00      	nop
    }

    if(ret == HAL_OK)
 800390a:	7cfb      	ldrb	r3, [r7, #19]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d10b      	bne.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003910:	4b52      	ldr	r3, [pc, #328]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003912:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003916:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800391e:	494f      	ldr	r1, [pc, #316]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003920:	4313      	orrs	r3, r2
 8003922:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003926:	e001      	b.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003928:	7cfb      	ldrb	r3, [r7, #19]
 800392a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003934:	2b00      	cmp	r3, #0
 8003936:	f000 80a0 	beq.w	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800393a:	2300      	movs	r3, #0
 800393c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800393e:	4b47      	ldr	r3, [pc, #284]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003942:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003946:	2b00      	cmp	r3, #0
 8003948:	d101      	bne.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800394a:	2301      	movs	r3, #1
 800394c:	e000      	b.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800394e:	2300      	movs	r3, #0
 8003950:	2b00      	cmp	r3, #0
 8003952:	d00d      	beq.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003954:	4b41      	ldr	r3, [pc, #260]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003956:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003958:	4a40      	ldr	r2, [pc, #256]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800395a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800395e:	6593      	str	r3, [r2, #88]	; 0x58
 8003960:	4b3e      	ldr	r3, [pc, #248]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003962:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003964:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003968:	60bb      	str	r3, [r7, #8]
 800396a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800396c:	2301      	movs	r3, #1
 800396e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003970:	4b3b      	ldr	r3, [pc, #236]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a3a      	ldr	r2, [pc, #232]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003976:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800397a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800397c:	f7fd fbd8 	bl	8001130 <HAL_GetTick>
 8003980:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003982:	e009      	b.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003984:	f7fd fbd4 	bl	8001130 <HAL_GetTick>
 8003988:	4602      	mov	r2, r0
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	1ad3      	subs	r3, r2, r3
 800398e:	2b02      	cmp	r3, #2
 8003990:	d902      	bls.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003992:	2303      	movs	r3, #3
 8003994:	74fb      	strb	r3, [r7, #19]
        break;
 8003996:	e005      	b.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003998:	4b31      	ldr	r3, [pc, #196]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d0ef      	beq.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80039a4:	7cfb      	ldrb	r3, [r7, #19]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d15c      	bne.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80039aa:	4b2c      	ldr	r3, [pc, #176]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039b4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d01f      	beq.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x200>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039c2:	697a      	ldr	r2, [r7, #20]
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d019      	beq.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80039c8:	4b24      	ldr	r3, [pc, #144]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039d2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80039d4:	4b21      	ldr	r3, [pc, #132]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039da:	4a20      	ldr	r2, [pc, #128]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80039e4:	4b1d      	ldr	r3, [pc, #116]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039ea:	4a1c      	ldr	r2, [pc, #112]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80039f4:	4a19      	ldr	r2, [pc, #100]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	f003 0301 	and.w	r3, r3, #1
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d016      	beq.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a06:	f7fd fb93 	bl	8001130 <HAL_GetTick>
 8003a0a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a0c:	e00b      	b.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a0e:	f7fd fb8f 	bl	8001130 <HAL_GetTick>
 8003a12:	4602      	mov	r2, r0
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	1ad3      	subs	r3, r2, r3
 8003a18:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d902      	bls.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003a20:	2303      	movs	r3, #3
 8003a22:	74fb      	strb	r3, [r7, #19]
            break;
 8003a24:	e006      	b.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a26:	4b0d      	ldr	r3, [pc, #52]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a2c:	f003 0302 	and.w	r3, r3, #2
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d0ec      	beq.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003a34:	7cfb      	ldrb	r3, [r7, #19]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d10c      	bne.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a3a:	4b08      	ldr	r3, [pc, #32]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a40:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a4a:	4904      	ldr	r1, [pc, #16]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003a52:	e009      	b.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003a54:	7cfb      	ldrb	r3, [r7, #19]
 8003a56:	74bb      	strb	r3, [r7, #18]
 8003a58:	e006      	b.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003a5a:	bf00      	nop
 8003a5c:	40021000 	.word	0x40021000
 8003a60:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a64:	7cfb      	ldrb	r3, [r7, #19]
 8003a66:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a68:	7c7b      	ldrb	r3, [r7, #17]
 8003a6a:	2b01      	cmp	r3, #1
 8003a6c:	d105      	bne.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a6e:	4ba6      	ldr	r3, [pc, #664]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003a70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a72:	4aa5      	ldr	r2, [pc, #660]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003a74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a78:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f003 0301 	and.w	r3, r3, #1
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d00a      	beq.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003a86:	4ba0      	ldr	r3, [pc, #640]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003a88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a8c:	f023 0203 	bic.w	r2, r3, #3
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a94:	499c      	ldr	r1, [pc, #624]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003a96:	4313      	orrs	r3, r2
 8003a98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 0302 	and.w	r3, r3, #2
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d00a      	beq.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003aa8:	4b97      	ldr	r3, [pc, #604]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aae:	f023 020c 	bic.w	r2, r3, #12
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ab6:	4994      	ldr	r1, [pc, #592]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 0304 	and.w	r3, r3, #4
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d00a      	beq.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003aca:	4b8f      	ldr	r3, [pc, #572]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003acc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ad0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad8:	498b      	ldr	r1, [pc, #556]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003ada:	4313      	orrs	r3, r2
 8003adc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f003 0308 	and.w	r3, r3, #8
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d00a      	beq.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003aec:	4b86      	ldr	r3, [pc, #536]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003af2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003afa:	4983      	ldr	r1, [pc, #524]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003afc:	4313      	orrs	r3, r2
 8003afe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f003 0310 	and.w	r3, r3, #16
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d00a      	beq.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003b0e:	4b7e      	ldr	r3, [pc, #504]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003b10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b14:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b1c:	497a      	ldr	r1, [pc, #488]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f003 0320 	and.w	r3, r3, #32
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d00a      	beq.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003b30:	4b75      	ldr	r3, [pc, #468]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b36:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b3e:	4972      	ldr	r1, [pc, #456]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003b40:	4313      	orrs	r3, r2
 8003b42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d00a      	beq.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003b52:	4b6d      	ldr	r3, [pc, #436]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003b54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b58:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b60:	4969      	ldr	r1, [pc, #420]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003b62:	4313      	orrs	r3, r2
 8003b64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d00a      	beq.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003b74:	4b64      	ldr	r3, [pc, #400]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b7a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b82:	4961      	ldr	r1, [pc, #388]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003b84:	4313      	orrs	r3, r2
 8003b86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d00a      	beq.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003b96:	4b5c      	ldr	r3, [pc, #368]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003b98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b9c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ba4:	4958      	ldr	r1, [pc, #352]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d00a      	beq.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003bb8:	4b53      	ldr	r3, [pc, #332]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003bba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bbe:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bc6:	4950      	ldr	r1, [pc, #320]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d00a      	beq.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003bda:	4b4b      	ldr	r3, [pc, #300]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003bdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003be0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003be8:	4947      	ldr	r1, [pc, #284]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003bea:	4313      	orrs	r3, r2
 8003bec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d00a      	beq.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003bfc:	4b42      	ldr	r3, [pc, #264]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003bfe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003c02:	f023 0203 	bic.w	r2, r3, #3
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c0a:	493f      	ldr	r1, [pc, #252]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d028      	beq.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003c1e:	4b3a      	ldr	r3, [pc, #232]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003c20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c24:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c2c:	4936      	ldr	r1, [pc, #216]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c38:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c3c:	d106      	bne.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c3e:	4b32      	ldr	r3, [pc, #200]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003c40:	68db      	ldr	r3, [r3, #12]
 8003c42:	4a31      	ldr	r2, [pc, #196]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003c44:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c48:	60d3      	str	r3, [r2, #12]
 8003c4a:	e011      	b.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c50:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003c54:	d10c      	bne.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	3304      	adds	r3, #4
 8003c5a:	2101      	movs	r1, #1
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f000 f8d9 	bl	8003e14 <RCCEx_PLLSAI1_Config>
 8003c62:	4603      	mov	r3, r0
 8003c64:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003c66:	7cfb      	ldrb	r3, [r7, #19]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d001      	beq.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 8003c6c:	7cfb      	ldrb	r3, [r7, #19]
 8003c6e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d028      	beq.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003c7c:	4b22      	ldr	r3, [pc, #136]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c82:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c8a:	491f      	ldr	r1, [pc, #124]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c96:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c9a:	d106      	bne.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c9c:	4b1a      	ldr	r3, [pc, #104]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003c9e:	68db      	ldr	r3, [r3, #12]
 8003ca0:	4a19      	ldr	r2, [pc, #100]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003ca2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ca6:	60d3      	str	r3, [r2, #12]
 8003ca8:	e011      	b.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003cb2:	d10c      	bne.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	3304      	adds	r3, #4
 8003cb8:	2101      	movs	r1, #1
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f000 f8aa 	bl	8003e14 <RCCEx_PLLSAI1_Config>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003cc4:	7cfb      	ldrb	r3, [r7, #19]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d001      	beq.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 8003cca:	7cfb      	ldrb	r3, [r7, #19]
 8003ccc:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d02a      	beq.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003cda:	4b0b      	ldr	r3, [pc, #44]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003cdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ce0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ce8:	4907      	ldr	r1, [pc, #28]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003cea:	4313      	orrs	r3, r2
 8003cec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003cf4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003cf8:	d108      	bne.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003cfa:	4b03      	ldr	r3, [pc, #12]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003cfc:	68db      	ldr	r3, [r3, #12]
 8003cfe:	4a02      	ldr	r2, [pc, #8]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003d00:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d04:	60d3      	str	r3, [r2, #12]
 8003d06:	e013      	b.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x534>
 8003d08:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d10:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003d14:	d10c      	bne.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	3304      	adds	r3, #4
 8003d1a:	2101      	movs	r1, #1
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f000 f879 	bl	8003e14 <RCCEx_PLLSAI1_Config>
 8003d22:	4603      	mov	r3, r0
 8003d24:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003d26:	7cfb      	ldrb	r3, [r7, #19]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d001      	beq.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8003d2c:	7cfb      	ldrb	r3, [r7, #19]
 8003d2e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d02f      	beq.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003d3c:	4b2c      	ldr	r3, [pc, #176]	; (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d42:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d4a:	4929      	ldr	r1, [pc, #164]	; (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d56:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d5a:	d10d      	bne.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	3304      	adds	r3, #4
 8003d60:	2102      	movs	r1, #2
 8003d62:	4618      	mov	r0, r3
 8003d64:	f000 f856 	bl	8003e14 <RCCEx_PLLSAI1_Config>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003d6c:	7cfb      	ldrb	r3, [r7, #19]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d014      	beq.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8003d72:	7cfb      	ldrb	r3, [r7, #19]
 8003d74:	74bb      	strb	r3, [r7, #18]
 8003d76:	e011      	b.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d80:	d10c      	bne.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	3320      	adds	r3, #32
 8003d86:	2102      	movs	r1, #2
 8003d88:	4618      	mov	r0, r3
 8003d8a:	f000 f935 	bl	8003ff8 <RCCEx_PLLSAI2_Config>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003d92:	7cfb      	ldrb	r3, [r7, #19]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d001      	beq.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8003d98:	7cfb      	ldrb	r3, [r7, #19]
 8003d9a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d00b      	beq.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003da8:	4b11      	ldr	r3, [pc, #68]	; (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dae:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003db8:	490d      	ldr	r1, [pc, #52]	; (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d00b      	beq.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003dcc:	4b08      	ldr	r3, [pc, #32]	; (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003dce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dd2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ddc:	4904      	ldr	r1, [pc, #16]	; (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003dde:	4313      	orrs	r3, r2
 8003de0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003de4:	7cbb      	ldrb	r3, [r7, #18]
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3718      	adds	r7, #24
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}
 8003dee:	bf00      	nop
 8003df0:	40021000 	.word	0x40021000

08003df4 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003df4:	b480      	push	{r7}
 8003df6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003df8:	4b05      	ldr	r3, [pc, #20]	; (8003e10 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a04      	ldr	r2, [pc, #16]	; (8003e10 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003dfe:	f043 0304 	orr.w	r3, r3, #4
 8003e02:	6013      	str	r3, [r2, #0]
}
 8003e04:	bf00      	nop
 8003e06:	46bd      	mov	sp, r7
 8003e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0c:	4770      	bx	lr
 8003e0e:	bf00      	nop
 8003e10:	40021000 	.word	0x40021000

08003e14 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b084      	sub	sp, #16
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003e22:	4b74      	ldr	r3, [pc, #464]	; (8003ff4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e24:	68db      	ldr	r3, [r3, #12]
 8003e26:	f003 0303 	and.w	r3, r3, #3
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d018      	beq.n	8003e60 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003e2e:	4b71      	ldr	r3, [pc, #452]	; (8003ff4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e30:	68db      	ldr	r3, [r3, #12]
 8003e32:	f003 0203 	and.w	r2, r3, #3
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d10d      	bne.n	8003e5a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
       ||
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d009      	beq.n	8003e5a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003e46:	4b6b      	ldr	r3, [pc, #428]	; (8003ff4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e48:	68db      	ldr	r3, [r3, #12]
 8003e4a:	091b      	lsrs	r3, r3, #4
 8003e4c:	f003 0307 	and.w	r3, r3, #7
 8003e50:	1c5a      	adds	r2, r3, #1
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	685b      	ldr	r3, [r3, #4]
       ||
 8003e56:	429a      	cmp	r2, r3
 8003e58:	d047      	beq.n	8003eea <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	73fb      	strb	r3, [r7, #15]
 8003e5e:	e044      	b.n	8003eea <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	2b03      	cmp	r3, #3
 8003e66:	d018      	beq.n	8003e9a <RCCEx_PLLSAI1_Config+0x86>
 8003e68:	2b03      	cmp	r3, #3
 8003e6a:	d825      	bhi.n	8003eb8 <RCCEx_PLLSAI1_Config+0xa4>
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d002      	beq.n	8003e76 <RCCEx_PLLSAI1_Config+0x62>
 8003e70:	2b02      	cmp	r3, #2
 8003e72:	d009      	beq.n	8003e88 <RCCEx_PLLSAI1_Config+0x74>
 8003e74:	e020      	b.n	8003eb8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003e76:	4b5f      	ldr	r3, [pc, #380]	; (8003ff4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 0302 	and.w	r3, r3, #2
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d11d      	bne.n	8003ebe <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e86:	e01a      	b.n	8003ebe <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003e88:	4b5a      	ldr	r3, [pc, #360]	; (8003ff4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d116      	bne.n	8003ec2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003e94:	2301      	movs	r3, #1
 8003e96:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e98:	e013      	b.n	8003ec2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003e9a:	4b56      	ldr	r3, [pc, #344]	; (8003ff4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d10f      	bne.n	8003ec6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003ea6:	4b53      	ldr	r3, [pc, #332]	; (8003ff4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d109      	bne.n	8003ec6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003eb6:	e006      	b.n	8003ec6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	73fb      	strb	r3, [r7, #15]
      break;
 8003ebc:	e004      	b.n	8003ec8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003ebe:	bf00      	nop
 8003ec0:	e002      	b.n	8003ec8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003ec2:	bf00      	nop
 8003ec4:	e000      	b.n	8003ec8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003ec6:	bf00      	nop
    }

    if(status == HAL_OK)
 8003ec8:	7bfb      	ldrb	r3, [r7, #15]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d10d      	bne.n	8003eea <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003ece:	4b49      	ldr	r3, [pc, #292]	; (8003ff4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ed0:	68db      	ldr	r3, [r3, #12]
 8003ed2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6819      	ldr	r1, [r3, #0]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	3b01      	subs	r3, #1
 8003ee0:	011b      	lsls	r3, r3, #4
 8003ee2:	430b      	orrs	r3, r1
 8003ee4:	4943      	ldr	r1, [pc, #268]	; (8003ff4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003eea:	7bfb      	ldrb	r3, [r7, #15]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d17c      	bne.n	8003fea <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003ef0:	4b40      	ldr	r3, [pc, #256]	; (8003ff4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a3f      	ldr	r2, [pc, #252]	; (8003ff4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ef6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003efa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003efc:	f7fd f918 	bl	8001130 <HAL_GetTick>
 8003f00:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003f02:	e009      	b.n	8003f18 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003f04:	f7fd f914 	bl	8001130 <HAL_GetTick>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	1ad3      	subs	r3, r2, r3
 8003f0e:	2b02      	cmp	r3, #2
 8003f10:	d902      	bls.n	8003f18 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003f12:	2303      	movs	r3, #3
 8003f14:	73fb      	strb	r3, [r7, #15]
        break;
 8003f16:	e005      	b.n	8003f24 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003f18:	4b36      	ldr	r3, [pc, #216]	; (8003ff4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d1ef      	bne.n	8003f04 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003f24:	7bfb      	ldrb	r3, [r7, #15]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d15f      	bne.n	8003fea <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d110      	bne.n	8003f52 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003f30:	4b30      	ldr	r3, [pc, #192]	; (8003ff4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f32:	691b      	ldr	r3, [r3, #16]
 8003f34:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003f38:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003f3c:	687a      	ldr	r2, [r7, #4]
 8003f3e:	6892      	ldr	r2, [r2, #8]
 8003f40:	0211      	lsls	r1, r2, #8
 8003f42:	687a      	ldr	r2, [r7, #4]
 8003f44:	68d2      	ldr	r2, [r2, #12]
 8003f46:	06d2      	lsls	r2, r2, #27
 8003f48:	430a      	orrs	r2, r1
 8003f4a:	492a      	ldr	r1, [pc, #168]	; (8003ff4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	610b      	str	r3, [r1, #16]
 8003f50:	e027      	b.n	8003fa2 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	2b01      	cmp	r3, #1
 8003f56:	d112      	bne.n	8003f7e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003f58:	4b26      	ldr	r3, [pc, #152]	; (8003ff4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f5a:	691b      	ldr	r3, [r3, #16]
 8003f5c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003f60:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003f64:	687a      	ldr	r2, [r7, #4]
 8003f66:	6892      	ldr	r2, [r2, #8]
 8003f68:	0211      	lsls	r1, r2, #8
 8003f6a:	687a      	ldr	r2, [r7, #4]
 8003f6c:	6912      	ldr	r2, [r2, #16]
 8003f6e:	0852      	lsrs	r2, r2, #1
 8003f70:	3a01      	subs	r2, #1
 8003f72:	0552      	lsls	r2, r2, #21
 8003f74:	430a      	orrs	r2, r1
 8003f76:	491f      	ldr	r1, [pc, #124]	; (8003ff4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	610b      	str	r3, [r1, #16]
 8003f7c:	e011      	b.n	8003fa2 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003f7e:	4b1d      	ldr	r3, [pc, #116]	; (8003ff4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f80:	691b      	ldr	r3, [r3, #16]
 8003f82:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003f86:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003f8a:	687a      	ldr	r2, [r7, #4]
 8003f8c:	6892      	ldr	r2, [r2, #8]
 8003f8e:	0211      	lsls	r1, r2, #8
 8003f90:	687a      	ldr	r2, [r7, #4]
 8003f92:	6952      	ldr	r2, [r2, #20]
 8003f94:	0852      	lsrs	r2, r2, #1
 8003f96:	3a01      	subs	r2, #1
 8003f98:	0652      	lsls	r2, r2, #25
 8003f9a:	430a      	orrs	r2, r1
 8003f9c:	4915      	ldr	r1, [pc, #84]	; (8003ff4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003fa2:	4b14      	ldr	r3, [pc, #80]	; (8003ff4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a13      	ldr	r2, [pc, #76]	; (8003ff4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003fa8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003fac:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fae:	f7fd f8bf 	bl	8001130 <HAL_GetTick>
 8003fb2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003fb4:	e009      	b.n	8003fca <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003fb6:	f7fd f8bb 	bl	8001130 <HAL_GetTick>
 8003fba:	4602      	mov	r2, r0
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	1ad3      	subs	r3, r2, r3
 8003fc0:	2b02      	cmp	r3, #2
 8003fc2:	d902      	bls.n	8003fca <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003fc4:	2303      	movs	r3, #3
 8003fc6:	73fb      	strb	r3, [r7, #15]
          break;
 8003fc8:	e005      	b.n	8003fd6 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003fca:	4b0a      	ldr	r3, [pc, #40]	; (8003ff4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d0ef      	beq.n	8003fb6 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003fd6:	7bfb      	ldrb	r3, [r7, #15]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d106      	bne.n	8003fea <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003fdc:	4b05      	ldr	r3, [pc, #20]	; (8003ff4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003fde:	691a      	ldr	r2, [r3, #16]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	699b      	ldr	r3, [r3, #24]
 8003fe4:	4903      	ldr	r1, [pc, #12]	; (8003ff4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003fea:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	3710      	adds	r7, #16
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bd80      	pop	{r7, pc}
 8003ff4:	40021000 	.word	0x40021000

08003ff8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b084      	sub	sp, #16
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
 8004000:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004002:	2300      	movs	r3, #0
 8004004:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004006:	4b69      	ldr	r3, [pc, #420]	; (80041ac <RCCEx_PLLSAI2_Config+0x1b4>)
 8004008:	68db      	ldr	r3, [r3, #12]
 800400a:	f003 0303 	and.w	r3, r3, #3
 800400e:	2b00      	cmp	r3, #0
 8004010:	d018      	beq.n	8004044 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004012:	4b66      	ldr	r3, [pc, #408]	; (80041ac <RCCEx_PLLSAI2_Config+0x1b4>)
 8004014:	68db      	ldr	r3, [r3, #12]
 8004016:	f003 0203 	and.w	r2, r3, #3
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	429a      	cmp	r2, r3
 8004020:	d10d      	bne.n	800403e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
       ||
 8004026:	2b00      	cmp	r3, #0
 8004028:	d009      	beq.n	800403e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800402a:	4b60      	ldr	r3, [pc, #384]	; (80041ac <RCCEx_PLLSAI2_Config+0x1b4>)
 800402c:	68db      	ldr	r3, [r3, #12]
 800402e:	091b      	lsrs	r3, r3, #4
 8004030:	f003 0307 	and.w	r3, r3, #7
 8004034:	1c5a      	adds	r2, r3, #1
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	685b      	ldr	r3, [r3, #4]
       ||
 800403a:	429a      	cmp	r2, r3
 800403c:	d047      	beq.n	80040ce <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	73fb      	strb	r3, [r7, #15]
 8004042:	e044      	b.n	80040ce <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	2b03      	cmp	r3, #3
 800404a:	d018      	beq.n	800407e <RCCEx_PLLSAI2_Config+0x86>
 800404c:	2b03      	cmp	r3, #3
 800404e:	d825      	bhi.n	800409c <RCCEx_PLLSAI2_Config+0xa4>
 8004050:	2b01      	cmp	r3, #1
 8004052:	d002      	beq.n	800405a <RCCEx_PLLSAI2_Config+0x62>
 8004054:	2b02      	cmp	r3, #2
 8004056:	d009      	beq.n	800406c <RCCEx_PLLSAI2_Config+0x74>
 8004058:	e020      	b.n	800409c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800405a:	4b54      	ldr	r3, [pc, #336]	; (80041ac <RCCEx_PLLSAI2_Config+0x1b4>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f003 0302 	and.w	r3, r3, #2
 8004062:	2b00      	cmp	r3, #0
 8004064:	d11d      	bne.n	80040a2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004066:	2301      	movs	r3, #1
 8004068:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800406a:	e01a      	b.n	80040a2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800406c:	4b4f      	ldr	r3, [pc, #316]	; (80041ac <RCCEx_PLLSAI2_Config+0x1b4>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004074:	2b00      	cmp	r3, #0
 8004076:	d116      	bne.n	80040a6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004078:	2301      	movs	r3, #1
 800407a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800407c:	e013      	b.n	80040a6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800407e:	4b4b      	ldr	r3, [pc, #300]	; (80041ac <RCCEx_PLLSAI2_Config+0x1b4>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004086:	2b00      	cmp	r3, #0
 8004088:	d10f      	bne.n	80040aa <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800408a:	4b48      	ldr	r3, [pc, #288]	; (80041ac <RCCEx_PLLSAI2_Config+0x1b4>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004092:	2b00      	cmp	r3, #0
 8004094:	d109      	bne.n	80040aa <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800409a:	e006      	b.n	80040aa <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800409c:	2301      	movs	r3, #1
 800409e:	73fb      	strb	r3, [r7, #15]
      break;
 80040a0:	e004      	b.n	80040ac <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80040a2:	bf00      	nop
 80040a4:	e002      	b.n	80040ac <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80040a6:	bf00      	nop
 80040a8:	e000      	b.n	80040ac <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80040aa:	bf00      	nop
    }

    if(status == HAL_OK)
 80040ac:	7bfb      	ldrb	r3, [r7, #15]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d10d      	bne.n	80040ce <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80040b2:	4b3e      	ldr	r3, [pc, #248]	; (80041ac <RCCEx_PLLSAI2_Config+0x1b4>)
 80040b4:	68db      	ldr	r3, [r3, #12]
 80040b6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6819      	ldr	r1, [r3, #0]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	3b01      	subs	r3, #1
 80040c4:	011b      	lsls	r3, r3, #4
 80040c6:	430b      	orrs	r3, r1
 80040c8:	4938      	ldr	r1, [pc, #224]	; (80041ac <RCCEx_PLLSAI2_Config+0x1b4>)
 80040ca:	4313      	orrs	r3, r2
 80040cc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80040ce:	7bfb      	ldrb	r3, [r7, #15]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d166      	bne.n	80041a2 <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80040d4:	4b35      	ldr	r3, [pc, #212]	; (80041ac <RCCEx_PLLSAI2_Config+0x1b4>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a34      	ldr	r2, [pc, #208]	; (80041ac <RCCEx_PLLSAI2_Config+0x1b4>)
 80040da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040e0:	f7fd f826 	bl	8001130 <HAL_GetTick>
 80040e4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80040e6:	e009      	b.n	80040fc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80040e8:	f7fd f822 	bl	8001130 <HAL_GetTick>
 80040ec:	4602      	mov	r2, r0
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	1ad3      	subs	r3, r2, r3
 80040f2:	2b02      	cmp	r3, #2
 80040f4:	d902      	bls.n	80040fc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80040f6:	2303      	movs	r3, #3
 80040f8:	73fb      	strb	r3, [r7, #15]
        break;
 80040fa:	e005      	b.n	8004108 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80040fc:	4b2b      	ldr	r3, [pc, #172]	; (80041ac <RCCEx_PLLSAI2_Config+0x1b4>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004104:	2b00      	cmp	r3, #0
 8004106:	d1ef      	bne.n	80040e8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004108:	7bfb      	ldrb	r3, [r7, #15]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d149      	bne.n	80041a2 <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d110      	bne.n	8004136 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004114:	4b25      	ldr	r3, [pc, #148]	; (80041ac <RCCEx_PLLSAI2_Config+0x1b4>)
 8004116:	695b      	ldr	r3, [r3, #20]
 8004118:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800411c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004120:	687a      	ldr	r2, [r7, #4]
 8004122:	6892      	ldr	r2, [r2, #8]
 8004124:	0211      	lsls	r1, r2, #8
 8004126:	687a      	ldr	r2, [r7, #4]
 8004128:	68d2      	ldr	r2, [r2, #12]
 800412a:	06d2      	lsls	r2, r2, #27
 800412c:	430a      	orrs	r2, r1
 800412e:	491f      	ldr	r1, [pc, #124]	; (80041ac <RCCEx_PLLSAI2_Config+0x1b4>)
 8004130:	4313      	orrs	r3, r2
 8004132:	614b      	str	r3, [r1, #20]
 8004134:	e011      	b.n	800415a <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004136:	4b1d      	ldr	r3, [pc, #116]	; (80041ac <RCCEx_PLLSAI2_Config+0x1b4>)
 8004138:	695b      	ldr	r3, [r3, #20]
 800413a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800413e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004142:	687a      	ldr	r2, [r7, #4]
 8004144:	6892      	ldr	r2, [r2, #8]
 8004146:	0211      	lsls	r1, r2, #8
 8004148:	687a      	ldr	r2, [r7, #4]
 800414a:	6912      	ldr	r2, [r2, #16]
 800414c:	0852      	lsrs	r2, r2, #1
 800414e:	3a01      	subs	r2, #1
 8004150:	0652      	lsls	r2, r2, #25
 8004152:	430a      	orrs	r2, r1
 8004154:	4915      	ldr	r1, [pc, #84]	; (80041ac <RCCEx_PLLSAI2_Config+0x1b4>)
 8004156:	4313      	orrs	r3, r2
 8004158:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800415a:	4b14      	ldr	r3, [pc, #80]	; (80041ac <RCCEx_PLLSAI2_Config+0x1b4>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a13      	ldr	r2, [pc, #76]	; (80041ac <RCCEx_PLLSAI2_Config+0x1b4>)
 8004160:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004164:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004166:	f7fc ffe3 	bl	8001130 <HAL_GetTick>
 800416a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800416c:	e009      	b.n	8004182 <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800416e:	f7fc ffdf 	bl	8001130 <HAL_GetTick>
 8004172:	4602      	mov	r2, r0
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	1ad3      	subs	r3, r2, r3
 8004178:	2b02      	cmp	r3, #2
 800417a:	d902      	bls.n	8004182 <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 800417c:	2303      	movs	r3, #3
 800417e:	73fb      	strb	r3, [r7, #15]
          break;
 8004180:	e005      	b.n	800418e <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004182:	4b0a      	ldr	r3, [pc, #40]	; (80041ac <RCCEx_PLLSAI2_Config+0x1b4>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800418a:	2b00      	cmp	r3, #0
 800418c:	d0ef      	beq.n	800416e <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 800418e:	7bfb      	ldrb	r3, [r7, #15]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d106      	bne.n	80041a2 <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004194:	4b05      	ldr	r3, [pc, #20]	; (80041ac <RCCEx_PLLSAI2_Config+0x1b4>)
 8004196:	695a      	ldr	r2, [r3, #20]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	695b      	ldr	r3, [r3, #20]
 800419c:	4903      	ldr	r1, [pc, #12]	; (80041ac <RCCEx_PLLSAI2_Config+0x1b4>)
 800419e:	4313      	orrs	r3, r2
 80041a0:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80041a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	3710      	adds	r7, #16
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bd80      	pop	{r7, pc}
 80041ac:	40021000 	.word	0x40021000

080041b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b082      	sub	sp, #8
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d101      	bne.n	80041c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	e049      	b.n	8004256 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041c8:	b2db      	uxtb	r3, r3
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d106      	bne.n	80041dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2200      	movs	r2, #0
 80041d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f7fc feba 	bl	8000f50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2202      	movs	r2, #2
 80041e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681a      	ldr	r2, [r3, #0]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	3304      	adds	r3, #4
 80041ec:	4619      	mov	r1, r3
 80041ee:	4610      	mov	r0, r2
 80041f0:	f000 f968 	bl	80044c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2201      	movs	r2, #1
 80041f8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2201      	movs	r2, #1
 8004200:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2201      	movs	r2, #1
 8004208:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2201      	movs	r2, #1
 8004210:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2201      	movs	r2, #1
 8004218:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2201      	movs	r2, #1
 8004220:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2201      	movs	r2, #1
 8004228:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2201      	movs	r2, #1
 8004230:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2201      	movs	r2, #1
 8004238:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2201      	movs	r2, #1
 8004240:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2201      	movs	r2, #1
 8004248:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2201      	movs	r2, #1
 8004250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004254:	2300      	movs	r3, #0
}
 8004256:	4618      	mov	r0, r3
 8004258:	3708      	adds	r7, #8
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}
	...

08004260 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004260:	b480      	push	{r7}
 8004262:	b085      	sub	sp, #20
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800426e:	b2db      	uxtb	r3, r3
 8004270:	2b01      	cmp	r3, #1
 8004272:	d001      	beq.n	8004278 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	e047      	b.n	8004308 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2202      	movs	r2, #2
 800427c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a23      	ldr	r2, [pc, #140]	; (8004314 <HAL_TIM_Base_Start+0xb4>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d01d      	beq.n	80042c6 <HAL_TIM_Base_Start+0x66>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004292:	d018      	beq.n	80042c6 <HAL_TIM_Base_Start+0x66>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a1f      	ldr	r2, [pc, #124]	; (8004318 <HAL_TIM_Base_Start+0xb8>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d013      	beq.n	80042c6 <HAL_TIM_Base_Start+0x66>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a1e      	ldr	r2, [pc, #120]	; (800431c <HAL_TIM_Base_Start+0xbc>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d00e      	beq.n	80042c6 <HAL_TIM_Base_Start+0x66>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a1c      	ldr	r2, [pc, #112]	; (8004320 <HAL_TIM_Base_Start+0xc0>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d009      	beq.n	80042c6 <HAL_TIM_Base_Start+0x66>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a1b      	ldr	r2, [pc, #108]	; (8004324 <HAL_TIM_Base_Start+0xc4>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d004      	beq.n	80042c6 <HAL_TIM_Base_Start+0x66>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a19      	ldr	r2, [pc, #100]	; (8004328 <HAL_TIM_Base_Start+0xc8>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d115      	bne.n	80042f2 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	689a      	ldr	r2, [r3, #8]
 80042cc:	4b17      	ldr	r3, [pc, #92]	; (800432c <HAL_TIM_Base_Start+0xcc>)
 80042ce:	4013      	ands	r3, r2
 80042d0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2b06      	cmp	r3, #6
 80042d6:	d015      	beq.n	8004304 <HAL_TIM_Base_Start+0xa4>
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042de:	d011      	beq.n	8004304 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	681a      	ldr	r2, [r3, #0]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f042 0201 	orr.w	r2, r2, #1
 80042ee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042f0:	e008      	b.n	8004304 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f042 0201 	orr.w	r2, r2, #1
 8004300:	601a      	str	r2, [r3, #0]
 8004302:	e000      	b.n	8004306 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004304:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004306:	2300      	movs	r3, #0
}
 8004308:	4618      	mov	r0, r3
 800430a:	3714      	adds	r7, #20
 800430c:	46bd      	mov	sp, r7
 800430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004312:	4770      	bx	lr
 8004314:	40012c00 	.word	0x40012c00
 8004318:	40000400 	.word	0x40000400
 800431c:	40000800 	.word	0x40000800
 8004320:	40000c00 	.word	0x40000c00
 8004324:	40013400 	.word	0x40013400
 8004328:	40014000 	.word	0x40014000
 800432c:	00010007 	.word	0x00010007

08004330 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b084      	sub	sp, #16
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
 8004338:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800433a:	2300      	movs	r3, #0
 800433c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004344:	2b01      	cmp	r3, #1
 8004346:	d101      	bne.n	800434c <HAL_TIM_ConfigClockSource+0x1c>
 8004348:	2302      	movs	r3, #2
 800434a:	e0b6      	b.n	80044ba <HAL_TIM_ConfigClockSource+0x18a>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2201      	movs	r2, #1
 8004350:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2202      	movs	r2, #2
 8004358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800436a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800436e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004376:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	68ba      	ldr	r2, [r7, #8]
 800437e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004388:	d03e      	beq.n	8004408 <HAL_TIM_ConfigClockSource+0xd8>
 800438a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800438e:	f200 8087 	bhi.w	80044a0 <HAL_TIM_ConfigClockSource+0x170>
 8004392:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004396:	f000 8086 	beq.w	80044a6 <HAL_TIM_ConfigClockSource+0x176>
 800439a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800439e:	d87f      	bhi.n	80044a0 <HAL_TIM_ConfigClockSource+0x170>
 80043a0:	2b70      	cmp	r3, #112	; 0x70
 80043a2:	d01a      	beq.n	80043da <HAL_TIM_ConfigClockSource+0xaa>
 80043a4:	2b70      	cmp	r3, #112	; 0x70
 80043a6:	d87b      	bhi.n	80044a0 <HAL_TIM_ConfigClockSource+0x170>
 80043a8:	2b60      	cmp	r3, #96	; 0x60
 80043aa:	d050      	beq.n	800444e <HAL_TIM_ConfigClockSource+0x11e>
 80043ac:	2b60      	cmp	r3, #96	; 0x60
 80043ae:	d877      	bhi.n	80044a0 <HAL_TIM_ConfigClockSource+0x170>
 80043b0:	2b50      	cmp	r3, #80	; 0x50
 80043b2:	d03c      	beq.n	800442e <HAL_TIM_ConfigClockSource+0xfe>
 80043b4:	2b50      	cmp	r3, #80	; 0x50
 80043b6:	d873      	bhi.n	80044a0 <HAL_TIM_ConfigClockSource+0x170>
 80043b8:	2b40      	cmp	r3, #64	; 0x40
 80043ba:	d058      	beq.n	800446e <HAL_TIM_ConfigClockSource+0x13e>
 80043bc:	2b40      	cmp	r3, #64	; 0x40
 80043be:	d86f      	bhi.n	80044a0 <HAL_TIM_ConfigClockSource+0x170>
 80043c0:	2b30      	cmp	r3, #48	; 0x30
 80043c2:	d064      	beq.n	800448e <HAL_TIM_ConfigClockSource+0x15e>
 80043c4:	2b30      	cmp	r3, #48	; 0x30
 80043c6:	d86b      	bhi.n	80044a0 <HAL_TIM_ConfigClockSource+0x170>
 80043c8:	2b20      	cmp	r3, #32
 80043ca:	d060      	beq.n	800448e <HAL_TIM_ConfigClockSource+0x15e>
 80043cc:	2b20      	cmp	r3, #32
 80043ce:	d867      	bhi.n	80044a0 <HAL_TIM_ConfigClockSource+0x170>
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d05c      	beq.n	800448e <HAL_TIM_ConfigClockSource+0x15e>
 80043d4:	2b10      	cmp	r3, #16
 80043d6:	d05a      	beq.n	800448e <HAL_TIM_ConfigClockSource+0x15e>
 80043d8:	e062      	b.n	80044a0 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80043ea:	f000 f97f 	bl	80046ec <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80043fc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	68ba      	ldr	r2, [r7, #8]
 8004404:	609a      	str	r2, [r3, #8]
      break;
 8004406:	e04f      	b.n	80044a8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004418:	f000 f968 	bl	80046ec <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	689a      	ldr	r2, [r3, #8]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800442a:	609a      	str	r2, [r3, #8]
      break;
 800442c:	e03c      	b.n	80044a8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800443a:	461a      	mov	r2, r3
 800443c:	f000 f8dc 	bl	80045f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	2150      	movs	r1, #80	; 0x50
 8004446:	4618      	mov	r0, r3
 8004448:	f000 f935 	bl	80046b6 <TIM_ITRx_SetConfig>
      break;
 800444c:	e02c      	b.n	80044a8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800445a:	461a      	mov	r2, r3
 800445c:	f000 f8fb 	bl	8004656 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	2160      	movs	r1, #96	; 0x60
 8004466:	4618      	mov	r0, r3
 8004468:	f000 f925 	bl	80046b6 <TIM_ITRx_SetConfig>
      break;
 800446c:	e01c      	b.n	80044a8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800447a:	461a      	mov	r2, r3
 800447c:	f000 f8bc 	bl	80045f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	2140      	movs	r1, #64	; 0x40
 8004486:	4618      	mov	r0, r3
 8004488:	f000 f915 	bl	80046b6 <TIM_ITRx_SetConfig>
      break;
 800448c:	e00c      	b.n	80044a8 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681a      	ldr	r2, [r3, #0]
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4619      	mov	r1, r3
 8004498:	4610      	mov	r0, r2
 800449a:	f000 f90c 	bl	80046b6 <TIM_ITRx_SetConfig>
      break;
 800449e:	e003      	b.n	80044a8 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	73fb      	strb	r3, [r7, #15]
      break;
 80044a4:	e000      	b.n	80044a8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80044a6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2201      	movs	r2, #1
 80044ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2200      	movs	r2, #0
 80044b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80044b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3710      	adds	r7, #16
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}
	...

080044c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b085      	sub	sp, #20
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
 80044cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	4a40      	ldr	r2, [pc, #256]	; (80045d8 <TIM_Base_SetConfig+0x114>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d013      	beq.n	8004504 <TIM_Base_SetConfig+0x40>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044e2:	d00f      	beq.n	8004504 <TIM_Base_SetConfig+0x40>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	4a3d      	ldr	r2, [pc, #244]	; (80045dc <TIM_Base_SetConfig+0x118>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d00b      	beq.n	8004504 <TIM_Base_SetConfig+0x40>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	4a3c      	ldr	r2, [pc, #240]	; (80045e0 <TIM_Base_SetConfig+0x11c>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d007      	beq.n	8004504 <TIM_Base_SetConfig+0x40>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	4a3b      	ldr	r2, [pc, #236]	; (80045e4 <TIM_Base_SetConfig+0x120>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d003      	beq.n	8004504 <TIM_Base_SetConfig+0x40>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	4a3a      	ldr	r2, [pc, #232]	; (80045e8 <TIM_Base_SetConfig+0x124>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d108      	bne.n	8004516 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800450a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	68fa      	ldr	r2, [r7, #12]
 8004512:	4313      	orrs	r3, r2
 8004514:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	4a2f      	ldr	r2, [pc, #188]	; (80045d8 <TIM_Base_SetConfig+0x114>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d01f      	beq.n	800455e <TIM_Base_SetConfig+0x9a>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004524:	d01b      	beq.n	800455e <TIM_Base_SetConfig+0x9a>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	4a2c      	ldr	r2, [pc, #176]	; (80045dc <TIM_Base_SetConfig+0x118>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d017      	beq.n	800455e <TIM_Base_SetConfig+0x9a>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	4a2b      	ldr	r2, [pc, #172]	; (80045e0 <TIM_Base_SetConfig+0x11c>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d013      	beq.n	800455e <TIM_Base_SetConfig+0x9a>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	4a2a      	ldr	r2, [pc, #168]	; (80045e4 <TIM_Base_SetConfig+0x120>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d00f      	beq.n	800455e <TIM_Base_SetConfig+0x9a>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	4a29      	ldr	r2, [pc, #164]	; (80045e8 <TIM_Base_SetConfig+0x124>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d00b      	beq.n	800455e <TIM_Base_SetConfig+0x9a>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	4a28      	ldr	r2, [pc, #160]	; (80045ec <TIM_Base_SetConfig+0x128>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d007      	beq.n	800455e <TIM_Base_SetConfig+0x9a>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	4a27      	ldr	r2, [pc, #156]	; (80045f0 <TIM_Base_SetConfig+0x12c>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d003      	beq.n	800455e <TIM_Base_SetConfig+0x9a>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	4a26      	ldr	r2, [pc, #152]	; (80045f4 <TIM_Base_SetConfig+0x130>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d108      	bne.n	8004570 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004564:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	68db      	ldr	r3, [r3, #12]
 800456a:	68fa      	ldr	r2, [r7, #12]
 800456c:	4313      	orrs	r3, r2
 800456e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	695b      	ldr	r3, [r3, #20]
 800457a:	4313      	orrs	r3, r2
 800457c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	68fa      	ldr	r2, [r7, #12]
 8004582:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	689a      	ldr	r2, [r3, #8]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	4a10      	ldr	r2, [pc, #64]	; (80045d8 <TIM_Base_SetConfig+0x114>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d00f      	beq.n	80045bc <TIM_Base_SetConfig+0xf8>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	4a12      	ldr	r2, [pc, #72]	; (80045e8 <TIM_Base_SetConfig+0x124>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d00b      	beq.n	80045bc <TIM_Base_SetConfig+0xf8>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	4a11      	ldr	r2, [pc, #68]	; (80045ec <TIM_Base_SetConfig+0x128>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d007      	beq.n	80045bc <TIM_Base_SetConfig+0xf8>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	4a10      	ldr	r2, [pc, #64]	; (80045f0 <TIM_Base_SetConfig+0x12c>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d003      	beq.n	80045bc <TIM_Base_SetConfig+0xf8>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	4a0f      	ldr	r2, [pc, #60]	; (80045f4 <TIM_Base_SetConfig+0x130>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d103      	bne.n	80045c4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	691a      	ldr	r2, [r3, #16]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2201      	movs	r2, #1
 80045c8:	615a      	str	r2, [r3, #20]
}
 80045ca:	bf00      	nop
 80045cc:	3714      	adds	r7, #20
 80045ce:	46bd      	mov	sp, r7
 80045d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d4:	4770      	bx	lr
 80045d6:	bf00      	nop
 80045d8:	40012c00 	.word	0x40012c00
 80045dc:	40000400 	.word	0x40000400
 80045e0:	40000800 	.word	0x40000800
 80045e4:	40000c00 	.word	0x40000c00
 80045e8:	40013400 	.word	0x40013400
 80045ec:	40014000 	.word	0x40014000
 80045f0:	40014400 	.word	0x40014400
 80045f4:	40014800 	.word	0x40014800

080045f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b087      	sub	sp, #28
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	60f8      	str	r0, [r7, #12]
 8004600:	60b9      	str	r1, [r7, #8]
 8004602:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	6a1b      	ldr	r3, [r3, #32]
 8004608:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	6a1b      	ldr	r3, [r3, #32]
 800460e:	f023 0201 	bic.w	r2, r3, #1
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	699b      	ldr	r3, [r3, #24]
 800461a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004622:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	011b      	lsls	r3, r3, #4
 8004628:	693a      	ldr	r2, [r7, #16]
 800462a:	4313      	orrs	r3, r2
 800462c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	f023 030a 	bic.w	r3, r3, #10
 8004634:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004636:	697a      	ldr	r2, [r7, #20]
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	4313      	orrs	r3, r2
 800463c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	693a      	ldr	r2, [r7, #16]
 8004642:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	697a      	ldr	r2, [r7, #20]
 8004648:	621a      	str	r2, [r3, #32]
}
 800464a:	bf00      	nop
 800464c:	371c      	adds	r7, #28
 800464e:	46bd      	mov	sp, r7
 8004650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004654:	4770      	bx	lr

08004656 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004656:	b480      	push	{r7}
 8004658:	b087      	sub	sp, #28
 800465a:	af00      	add	r7, sp, #0
 800465c:	60f8      	str	r0, [r7, #12]
 800465e:	60b9      	str	r1, [r7, #8]
 8004660:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	6a1b      	ldr	r3, [r3, #32]
 8004666:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	6a1b      	ldr	r3, [r3, #32]
 800466c:	f023 0210 	bic.w	r2, r3, #16
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	699b      	ldr	r3, [r3, #24]
 8004678:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004680:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	031b      	lsls	r3, r3, #12
 8004686:	693a      	ldr	r2, [r7, #16]
 8004688:	4313      	orrs	r3, r2
 800468a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004692:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	011b      	lsls	r3, r3, #4
 8004698:	697a      	ldr	r2, [r7, #20]
 800469a:	4313      	orrs	r3, r2
 800469c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	693a      	ldr	r2, [r7, #16]
 80046a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	697a      	ldr	r2, [r7, #20]
 80046a8:	621a      	str	r2, [r3, #32]
}
 80046aa:	bf00      	nop
 80046ac:	371c      	adds	r7, #28
 80046ae:	46bd      	mov	sp, r7
 80046b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b4:	4770      	bx	lr

080046b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80046b6:	b480      	push	{r7}
 80046b8:	b085      	sub	sp, #20
 80046ba:	af00      	add	r7, sp, #0
 80046bc:	6078      	str	r0, [r7, #4]
 80046be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	689b      	ldr	r3, [r3, #8]
 80046c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80046ce:	683a      	ldr	r2, [r7, #0]
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	4313      	orrs	r3, r2
 80046d4:	f043 0307 	orr.w	r3, r3, #7
 80046d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	68fa      	ldr	r2, [r7, #12]
 80046de:	609a      	str	r2, [r3, #8]
}
 80046e0:	bf00      	nop
 80046e2:	3714      	adds	r7, #20
 80046e4:	46bd      	mov	sp, r7
 80046e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ea:	4770      	bx	lr

080046ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80046ec:	b480      	push	{r7}
 80046ee:	b087      	sub	sp, #28
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	60f8      	str	r0, [r7, #12]
 80046f4:	60b9      	str	r1, [r7, #8]
 80046f6:	607a      	str	r2, [r7, #4]
 80046f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	689b      	ldr	r3, [r3, #8]
 80046fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004706:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	021a      	lsls	r2, r3, #8
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	431a      	orrs	r2, r3
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	4313      	orrs	r3, r2
 8004714:	697a      	ldr	r2, [r7, #20]
 8004716:	4313      	orrs	r3, r2
 8004718:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	697a      	ldr	r2, [r7, #20]
 800471e:	609a      	str	r2, [r3, #8]
}
 8004720:	bf00      	nop
 8004722:	371c      	adds	r7, #28
 8004724:	46bd      	mov	sp, r7
 8004726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472a:	4770      	bx	lr

0800472c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800472c:	b480      	push	{r7}
 800472e:	b085      	sub	sp, #20
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
 8004734:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800473c:	2b01      	cmp	r3, #1
 800473e:	d101      	bne.n	8004744 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004740:	2302      	movs	r3, #2
 8004742:	e068      	b.n	8004816 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2201      	movs	r2, #1
 8004748:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2202      	movs	r2, #2
 8004750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a2e      	ldr	r2, [pc, #184]	; (8004824 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d004      	beq.n	8004778 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a2d      	ldr	r2, [pc, #180]	; (8004828 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d108      	bne.n	800478a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800477e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	68fa      	ldr	r2, [r7, #12]
 8004786:	4313      	orrs	r3, r2
 8004788:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004790:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	68fa      	ldr	r2, [r7, #12]
 8004798:	4313      	orrs	r3, r2
 800479a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	68fa      	ldr	r2, [r7, #12]
 80047a2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a1e      	ldr	r2, [pc, #120]	; (8004824 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d01d      	beq.n	80047ea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047b6:	d018      	beq.n	80047ea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a1b      	ldr	r2, [pc, #108]	; (800482c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d013      	beq.n	80047ea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a1a      	ldr	r2, [pc, #104]	; (8004830 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d00e      	beq.n	80047ea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a18      	ldr	r2, [pc, #96]	; (8004834 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d009      	beq.n	80047ea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a13      	ldr	r2, [pc, #76]	; (8004828 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d004      	beq.n	80047ea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a14      	ldr	r2, [pc, #80]	; (8004838 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d10c      	bne.n	8004804 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	68ba      	ldr	r2, [r7, #8]
 80047f8:	4313      	orrs	r3, r2
 80047fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	68ba      	ldr	r2, [r7, #8]
 8004802:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2201      	movs	r2, #1
 8004808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2200      	movs	r2, #0
 8004810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004814:	2300      	movs	r3, #0
}
 8004816:	4618      	mov	r0, r3
 8004818:	3714      	adds	r7, #20
 800481a:	46bd      	mov	sp, r7
 800481c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004820:	4770      	bx	lr
 8004822:	bf00      	nop
 8004824:	40012c00 	.word	0x40012c00
 8004828:	40013400 	.word	0x40013400
 800482c:	40000400 	.word	0x40000400
 8004830:	40000800 	.word	0x40000800
 8004834:	40000c00 	.word	0x40000c00
 8004838:	40014000 	.word	0x40014000

0800483c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b082      	sub	sp, #8
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d101      	bne.n	800484e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	e040      	b.n	80048d0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004852:	2b00      	cmp	r3, #0
 8004854:	d106      	bne.n	8004864 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2200      	movs	r2, #0
 800485a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	f7fc fb16 	bl	8000e90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2224      	movs	r2, #36	; 0x24
 8004868:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f022 0201 	bic.w	r2, r2, #1
 8004878:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800487e:	2b00      	cmp	r3, #0
 8004880:	d002      	beq.n	8004888 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f000 fae0 	bl	8004e48 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004888:	6878      	ldr	r0, [r7, #4]
 800488a:	f000 f825 	bl	80048d8 <UART_SetConfig>
 800488e:	4603      	mov	r3, r0
 8004890:	2b01      	cmp	r3, #1
 8004892:	d101      	bne.n	8004898 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004894:	2301      	movs	r3, #1
 8004896:	e01b      	b.n	80048d0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	685a      	ldr	r2, [r3, #4]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80048a6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	689a      	ldr	r2, [r3, #8]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80048b6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	681a      	ldr	r2, [r3, #0]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f042 0201 	orr.w	r2, r2, #1
 80048c6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80048c8:	6878      	ldr	r0, [r7, #4]
 80048ca:	f000 fb5f 	bl	8004f8c <UART_CheckIdleState>
 80048ce:	4603      	mov	r3, r0
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	3708      	adds	r7, #8
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}

080048d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048dc:	b08a      	sub	sp, #40	; 0x28
 80048de:	af00      	add	r7, sp, #0
 80048e0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80048e2:	2300      	movs	r3, #0
 80048e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	689a      	ldr	r2, [r3, #8]
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	691b      	ldr	r3, [r3, #16]
 80048f0:	431a      	orrs	r2, r3
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	695b      	ldr	r3, [r3, #20]
 80048f6:	431a      	orrs	r2, r3
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	69db      	ldr	r3, [r3, #28]
 80048fc:	4313      	orrs	r3, r2
 80048fe:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	681a      	ldr	r2, [r3, #0]
 8004906:	4ba4      	ldr	r3, [pc, #656]	; (8004b98 <UART_SetConfig+0x2c0>)
 8004908:	4013      	ands	r3, r2
 800490a:	68fa      	ldr	r2, [r7, #12]
 800490c:	6812      	ldr	r2, [r2, #0]
 800490e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004910:	430b      	orrs	r3, r1
 8004912:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	68da      	ldr	r2, [r3, #12]
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	430a      	orrs	r2, r1
 8004928:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	699b      	ldr	r3, [r3, #24]
 800492e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a99      	ldr	r2, [pc, #612]	; (8004b9c <UART_SetConfig+0x2c4>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d004      	beq.n	8004944 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	6a1b      	ldr	r3, [r3, #32]
 800493e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004940:	4313      	orrs	r3, r2
 8004942:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004954:	430a      	orrs	r2, r1
 8004956:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a90      	ldr	r2, [pc, #576]	; (8004ba0 <UART_SetConfig+0x2c8>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d126      	bne.n	80049b0 <UART_SetConfig+0xd8>
 8004962:	4b90      	ldr	r3, [pc, #576]	; (8004ba4 <UART_SetConfig+0x2cc>)
 8004964:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004968:	f003 0303 	and.w	r3, r3, #3
 800496c:	2b03      	cmp	r3, #3
 800496e:	d81b      	bhi.n	80049a8 <UART_SetConfig+0xd0>
 8004970:	a201      	add	r2, pc, #4	; (adr r2, 8004978 <UART_SetConfig+0xa0>)
 8004972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004976:	bf00      	nop
 8004978:	08004989 	.word	0x08004989
 800497c:	08004999 	.word	0x08004999
 8004980:	08004991 	.word	0x08004991
 8004984:	080049a1 	.word	0x080049a1
 8004988:	2301      	movs	r3, #1
 800498a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800498e:	e116      	b.n	8004bbe <UART_SetConfig+0x2e6>
 8004990:	2302      	movs	r3, #2
 8004992:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004996:	e112      	b.n	8004bbe <UART_SetConfig+0x2e6>
 8004998:	2304      	movs	r3, #4
 800499a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800499e:	e10e      	b.n	8004bbe <UART_SetConfig+0x2e6>
 80049a0:	2308      	movs	r3, #8
 80049a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049a6:	e10a      	b.n	8004bbe <UART_SetConfig+0x2e6>
 80049a8:	2310      	movs	r3, #16
 80049aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049ae:	e106      	b.n	8004bbe <UART_SetConfig+0x2e6>
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a7c      	ldr	r2, [pc, #496]	; (8004ba8 <UART_SetConfig+0x2d0>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d138      	bne.n	8004a2c <UART_SetConfig+0x154>
 80049ba:	4b7a      	ldr	r3, [pc, #488]	; (8004ba4 <UART_SetConfig+0x2cc>)
 80049bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049c0:	f003 030c 	and.w	r3, r3, #12
 80049c4:	2b0c      	cmp	r3, #12
 80049c6:	d82d      	bhi.n	8004a24 <UART_SetConfig+0x14c>
 80049c8:	a201      	add	r2, pc, #4	; (adr r2, 80049d0 <UART_SetConfig+0xf8>)
 80049ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049ce:	bf00      	nop
 80049d0:	08004a05 	.word	0x08004a05
 80049d4:	08004a25 	.word	0x08004a25
 80049d8:	08004a25 	.word	0x08004a25
 80049dc:	08004a25 	.word	0x08004a25
 80049e0:	08004a15 	.word	0x08004a15
 80049e4:	08004a25 	.word	0x08004a25
 80049e8:	08004a25 	.word	0x08004a25
 80049ec:	08004a25 	.word	0x08004a25
 80049f0:	08004a0d 	.word	0x08004a0d
 80049f4:	08004a25 	.word	0x08004a25
 80049f8:	08004a25 	.word	0x08004a25
 80049fc:	08004a25 	.word	0x08004a25
 8004a00:	08004a1d 	.word	0x08004a1d
 8004a04:	2300      	movs	r3, #0
 8004a06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a0a:	e0d8      	b.n	8004bbe <UART_SetConfig+0x2e6>
 8004a0c:	2302      	movs	r3, #2
 8004a0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a12:	e0d4      	b.n	8004bbe <UART_SetConfig+0x2e6>
 8004a14:	2304      	movs	r3, #4
 8004a16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a1a:	e0d0      	b.n	8004bbe <UART_SetConfig+0x2e6>
 8004a1c:	2308      	movs	r3, #8
 8004a1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a22:	e0cc      	b.n	8004bbe <UART_SetConfig+0x2e6>
 8004a24:	2310      	movs	r3, #16
 8004a26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a2a:	e0c8      	b.n	8004bbe <UART_SetConfig+0x2e6>
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a5e      	ldr	r2, [pc, #376]	; (8004bac <UART_SetConfig+0x2d4>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d125      	bne.n	8004a82 <UART_SetConfig+0x1aa>
 8004a36:	4b5b      	ldr	r3, [pc, #364]	; (8004ba4 <UART_SetConfig+0x2cc>)
 8004a38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a3c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004a40:	2b30      	cmp	r3, #48	; 0x30
 8004a42:	d016      	beq.n	8004a72 <UART_SetConfig+0x19a>
 8004a44:	2b30      	cmp	r3, #48	; 0x30
 8004a46:	d818      	bhi.n	8004a7a <UART_SetConfig+0x1a2>
 8004a48:	2b20      	cmp	r3, #32
 8004a4a:	d00a      	beq.n	8004a62 <UART_SetConfig+0x18a>
 8004a4c:	2b20      	cmp	r3, #32
 8004a4e:	d814      	bhi.n	8004a7a <UART_SetConfig+0x1a2>
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d002      	beq.n	8004a5a <UART_SetConfig+0x182>
 8004a54:	2b10      	cmp	r3, #16
 8004a56:	d008      	beq.n	8004a6a <UART_SetConfig+0x192>
 8004a58:	e00f      	b.n	8004a7a <UART_SetConfig+0x1a2>
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a60:	e0ad      	b.n	8004bbe <UART_SetConfig+0x2e6>
 8004a62:	2302      	movs	r3, #2
 8004a64:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a68:	e0a9      	b.n	8004bbe <UART_SetConfig+0x2e6>
 8004a6a:	2304      	movs	r3, #4
 8004a6c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a70:	e0a5      	b.n	8004bbe <UART_SetConfig+0x2e6>
 8004a72:	2308      	movs	r3, #8
 8004a74:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a78:	e0a1      	b.n	8004bbe <UART_SetConfig+0x2e6>
 8004a7a:	2310      	movs	r3, #16
 8004a7c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a80:	e09d      	b.n	8004bbe <UART_SetConfig+0x2e6>
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a4a      	ldr	r2, [pc, #296]	; (8004bb0 <UART_SetConfig+0x2d8>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d125      	bne.n	8004ad8 <UART_SetConfig+0x200>
 8004a8c:	4b45      	ldr	r3, [pc, #276]	; (8004ba4 <UART_SetConfig+0x2cc>)
 8004a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a92:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004a96:	2bc0      	cmp	r3, #192	; 0xc0
 8004a98:	d016      	beq.n	8004ac8 <UART_SetConfig+0x1f0>
 8004a9a:	2bc0      	cmp	r3, #192	; 0xc0
 8004a9c:	d818      	bhi.n	8004ad0 <UART_SetConfig+0x1f8>
 8004a9e:	2b80      	cmp	r3, #128	; 0x80
 8004aa0:	d00a      	beq.n	8004ab8 <UART_SetConfig+0x1e0>
 8004aa2:	2b80      	cmp	r3, #128	; 0x80
 8004aa4:	d814      	bhi.n	8004ad0 <UART_SetConfig+0x1f8>
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d002      	beq.n	8004ab0 <UART_SetConfig+0x1d8>
 8004aaa:	2b40      	cmp	r3, #64	; 0x40
 8004aac:	d008      	beq.n	8004ac0 <UART_SetConfig+0x1e8>
 8004aae:	e00f      	b.n	8004ad0 <UART_SetConfig+0x1f8>
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ab6:	e082      	b.n	8004bbe <UART_SetConfig+0x2e6>
 8004ab8:	2302      	movs	r3, #2
 8004aba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004abe:	e07e      	b.n	8004bbe <UART_SetConfig+0x2e6>
 8004ac0:	2304      	movs	r3, #4
 8004ac2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ac6:	e07a      	b.n	8004bbe <UART_SetConfig+0x2e6>
 8004ac8:	2308      	movs	r3, #8
 8004aca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ace:	e076      	b.n	8004bbe <UART_SetConfig+0x2e6>
 8004ad0:	2310      	movs	r3, #16
 8004ad2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ad6:	e072      	b.n	8004bbe <UART_SetConfig+0x2e6>
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a35      	ldr	r2, [pc, #212]	; (8004bb4 <UART_SetConfig+0x2dc>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d12a      	bne.n	8004b38 <UART_SetConfig+0x260>
 8004ae2:	4b30      	ldr	r3, [pc, #192]	; (8004ba4 <UART_SetConfig+0x2cc>)
 8004ae4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ae8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004aec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004af0:	d01a      	beq.n	8004b28 <UART_SetConfig+0x250>
 8004af2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004af6:	d81b      	bhi.n	8004b30 <UART_SetConfig+0x258>
 8004af8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004afc:	d00c      	beq.n	8004b18 <UART_SetConfig+0x240>
 8004afe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b02:	d815      	bhi.n	8004b30 <UART_SetConfig+0x258>
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d003      	beq.n	8004b10 <UART_SetConfig+0x238>
 8004b08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b0c:	d008      	beq.n	8004b20 <UART_SetConfig+0x248>
 8004b0e:	e00f      	b.n	8004b30 <UART_SetConfig+0x258>
 8004b10:	2300      	movs	r3, #0
 8004b12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b16:	e052      	b.n	8004bbe <UART_SetConfig+0x2e6>
 8004b18:	2302      	movs	r3, #2
 8004b1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b1e:	e04e      	b.n	8004bbe <UART_SetConfig+0x2e6>
 8004b20:	2304      	movs	r3, #4
 8004b22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b26:	e04a      	b.n	8004bbe <UART_SetConfig+0x2e6>
 8004b28:	2308      	movs	r3, #8
 8004b2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b2e:	e046      	b.n	8004bbe <UART_SetConfig+0x2e6>
 8004b30:	2310      	movs	r3, #16
 8004b32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b36:	e042      	b.n	8004bbe <UART_SetConfig+0x2e6>
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a17      	ldr	r2, [pc, #92]	; (8004b9c <UART_SetConfig+0x2c4>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d13a      	bne.n	8004bb8 <UART_SetConfig+0x2e0>
 8004b42:	4b18      	ldr	r3, [pc, #96]	; (8004ba4 <UART_SetConfig+0x2cc>)
 8004b44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b48:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004b4c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004b50:	d01a      	beq.n	8004b88 <UART_SetConfig+0x2b0>
 8004b52:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004b56:	d81b      	bhi.n	8004b90 <UART_SetConfig+0x2b8>
 8004b58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b5c:	d00c      	beq.n	8004b78 <UART_SetConfig+0x2a0>
 8004b5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b62:	d815      	bhi.n	8004b90 <UART_SetConfig+0x2b8>
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d003      	beq.n	8004b70 <UART_SetConfig+0x298>
 8004b68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b6c:	d008      	beq.n	8004b80 <UART_SetConfig+0x2a8>
 8004b6e:	e00f      	b.n	8004b90 <UART_SetConfig+0x2b8>
 8004b70:	2300      	movs	r3, #0
 8004b72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b76:	e022      	b.n	8004bbe <UART_SetConfig+0x2e6>
 8004b78:	2302      	movs	r3, #2
 8004b7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b7e:	e01e      	b.n	8004bbe <UART_SetConfig+0x2e6>
 8004b80:	2304      	movs	r3, #4
 8004b82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b86:	e01a      	b.n	8004bbe <UART_SetConfig+0x2e6>
 8004b88:	2308      	movs	r3, #8
 8004b8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b8e:	e016      	b.n	8004bbe <UART_SetConfig+0x2e6>
 8004b90:	2310      	movs	r3, #16
 8004b92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b96:	e012      	b.n	8004bbe <UART_SetConfig+0x2e6>
 8004b98:	efff69f3 	.word	0xefff69f3
 8004b9c:	40008000 	.word	0x40008000
 8004ba0:	40013800 	.word	0x40013800
 8004ba4:	40021000 	.word	0x40021000
 8004ba8:	40004400 	.word	0x40004400
 8004bac:	40004800 	.word	0x40004800
 8004bb0:	40004c00 	.word	0x40004c00
 8004bb4:	40005000 	.word	0x40005000
 8004bb8:	2310      	movs	r3, #16
 8004bba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a9f      	ldr	r2, [pc, #636]	; (8004e40 <UART_SetConfig+0x568>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d17a      	bne.n	8004cbe <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004bc8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004bcc:	2b08      	cmp	r3, #8
 8004bce:	d824      	bhi.n	8004c1a <UART_SetConfig+0x342>
 8004bd0:	a201      	add	r2, pc, #4	; (adr r2, 8004bd8 <UART_SetConfig+0x300>)
 8004bd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bd6:	bf00      	nop
 8004bd8:	08004bfd 	.word	0x08004bfd
 8004bdc:	08004c1b 	.word	0x08004c1b
 8004be0:	08004c05 	.word	0x08004c05
 8004be4:	08004c1b 	.word	0x08004c1b
 8004be8:	08004c0b 	.word	0x08004c0b
 8004bec:	08004c1b 	.word	0x08004c1b
 8004bf0:	08004c1b 	.word	0x08004c1b
 8004bf4:	08004c1b 	.word	0x08004c1b
 8004bf8:	08004c13 	.word	0x08004c13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004bfc:	f7fe fd72 	bl	80036e4 <HAL_RCC_GetPCLK1Freq>
 8004c00:	61f8      	str	r0, [r7, #28]
        break;
 8004c02:	e010      	b.n	8004c26 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c04:	4b8f      	ldr	r3, [pc, #572]	; (8004e44 <UART_SetConfig+0x56c>)
 8004c06:	61fb      	str	r3, [r7, #28]
        break;
 8004c08:	e00d      	b.n	8004c26 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c0a:	f7fe fcd3 	bl	80035b4 <HAL_RCC_GetSysClockFreq>
 8004c0e:	61f8      	str	r0, [r7, #28]
        break;
 8004c10:	e009      	b.n	8004c26 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c16:	61fb      	str	r3, [r7, #28]
        break;
 8004c18:	e005      	b.n	8004c26 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004c24:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004c26:	69fb      	ldr	r3, [r7, #28]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	f000 80fb 	beq.w	8004e24 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	685a      	ldr	r2, [r3, #4]
 8004c32:	4613      	mov	r3, r2
 8004c34:	005b      	lsls	r3, r3, #1
 8004c36:	4413      	add	r3, r2
 8004c38:	69fa      	ldr	r2, [r7, #28]
 8004c3a:	429a      	cmp	r2, r3
 8004c3c:	d305      	bcc.n	8004c4a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004c44:	69fa      	ldr	r2, [r7, #28]
 8004c46:	429a      	cmp	r2, r3
 8004c48:	d903      	bls.n	8004c52 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004c50:	e0e8      	b.n	8004e24 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004c52:	69fb      	ldr	r3, [r7, #28]
 8004c54:	2200      	movs	r2, #0
 8004c56:	461c      	mov	r4, r3
 8004c58:	4615      	mov	r5, r2
 8004c5a:	f04f 0200 	mov.w	r2, #0
 8004c5e:	f04f 0300 	mov.w	r3, #0
 8004c62:	022b      	lsls	r3, r5, #8
 8004c64:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004c68:	0222      	lsls	r2, r4, #8
 8004c6a:	68f9      	ldr	r1, [r7, #12]
 8004c6c:	6849      	ldr	r1, [r1, #4]
 8004c6e:	0849      	lsrs	r1, r1, #1
 8004c70:	2000      	movs	r0, #0
 8004c72:	4688      	mov	r8, r1
 8004c74:	4681      	mov	r9, r0
 8004c76:	eb12 0a08 	adds.w	sl, r2, r8
 8004c7a:	eb43 0b09 	adc.w	fp, r3, r9
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	2200      	movs	r2, #0
 8004c84:	603b      	str	r3, [r7, #0]
 8004c86:	607a      	str	r2, [r7, #4]
 8004c88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c8c:	4650      	mov	r0, sl
 8004c8e:	4659      	mov	r1, fp
 8004c90:	f7fb faae 	bl	80001f0 <__aeabi_uldivmod>
 8004c94:	4602      	mov	r2, r0
 8004c96:	460b      	mov	r3, r1
 8004c98:	4613      	mov	r3, r2
 8004c9a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004c9c:	69bb      	ldr	r3, [r7, #24]
 8004c9e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ca2:	d308      	bcc.n	8004cb6 <UART_SetConfig+0x3de>
 8004ca4:	69bb      	ldr	r3, [r7, #24]
 8004ca6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004caa:	d204      	bcs.n	8004cb6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	69ba      	ldr	r2, [r7, #24]
 8004cb2:	60da      	str	r2, [r3, #12]
 8004cb4:	e0b6      	b.n	8004e24 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004cbc:	e0b2      	b.n	8004e24 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	69db      	ldr	r3, [r3, #28]
 8004cc2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cc6:	d15e      	bne.n	8004d86 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004cc8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004ccc:	2b08      	cmp	r3, #8
 8004cce:	d828      	bhi.n	8004d22 <UART_SetConfig+0x44a>
 8004cd0:	a201      	add	r2, pc, #4	; (adr r2, 8004cd8 <UART_SetConfig+0x400>)
 8004cd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cd6:	bf00      	nop
 8004cd8:	08004cfd 	.word	0x08004cfd
 8004cdc:	08004d05 	.word	0x08004d05
 8004ce0:	08004d0d 	.word	0x08004d0d
 8004ce4:	08004d23 	.word	0x08004d23
 8004ce8:	08004d13 	.word	0x08004d13
 8004cec:	08004d23 	.word	0x08004d23
 8004cf0:	08004d23 	.word	0x08004d23
 8004cf4:	08004d23 	.word	0x08004d23
 8004cf8:	08004d1b 	.word	0x08004d1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004cfc:	f7fe fcf2 	bl	80036e4 <HAL_RCC_GetPCLK1Freq>
 8004d00:	61f8      	str	r0, [r7, #28]
        break;
 8004d02:	e014      	b.n	8004d2e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d04:	f7fe fd04 	bl	8003710 <HAL_RCC_GetPCLK2Freq>
 8004d08:	61f8      	str	r0, [r7, #28]
        break;
 8004d0a:	e010      	b.n	8004d2e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d0c:	4b4d      	ldr	r3, [pc, #308]	; (8004e44 <UART_SetConfig+0x56c>)
 8004d0e:	61fb      	str	r3, [r7, #28]
        break;
 8004d10:	e00d      	b.n	8004d2e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d12:	f7fe fc4f 	bl	80035b4 <HAL_RCC_GetSysClockFreq>
 8004d16:	61f8      	str	r0, [r7, #28]
        break;
 8004d18:	e009      	b.n	8004d2e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d1e:	61fb      	str	r3, [r7, #28]
        break;
 8004d20:	e005      	b.n	8004d2e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004d22:	2300      	movs	r3, #0
 8004d24:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004d26:	2301      	movs	r3, #1
 8004d28:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004d2c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004d2e:	69fb      	ldr	r3, [r7, #28]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d077      	beq.n	8004e24 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004d34:	69fb      	ldr	r3, [r7, #28]
 8004d36:	005a      	lsls	r2, r3, #1
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	085b      	lsrs	r3, r3, #1
 8004d3e:	441a      	add	r2, r3
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d48:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d4a:	69bb      	ldr	r3, [r7, #24]
 8004d4c:	2b0f      	cmp	r3, #15
 8004d4e:	d916      	bls.n	8004d7e <UART_SetConfig+0x4a6>
 8004d50:	69bb      	ldr	r3, [r7, #24]
 8004d52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d56:	d212      	bcs.n	8004d7e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004d58:	69bb      	ldr	r3, [r7, #24]
 8004d5a:	b29b      	uxth	r3, r3
 8004d5c:	f023 030f 	bic.w	r3, r3, #15
 8004d60:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004d62:	69bb      	ldr	r3, [r7, #24]
 8004d64:	085b      	lsrs	r3, r3, #1
 8004d66:	b29b      	uxth	r3, r3
 8004d68:	f003 0307 	and.w	r3, r3, #7
 8004d6c:	b29a      	uxth	r2, r3
 8004d6e:	8afb      	ldrh	r3, [r7, #22]
 8004d70:	4313      	orrs	r3, r2
 8004d72:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	8afa      	ldrh	r2, [r7, #22]
 8004d7a:	60da      	str	r2, [r3, #12]
 8004d7c:	e052      	b.n	8004e24 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004d84:	e04e      	b.n	8004e24 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004d86:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004d8a:	2b08      	cmp	r3, #8
 8004d8c:	d827      	bhi.n	8004dde <UART_SetConfig+0x506>
 8004d8e:	a201      	add	r2, pc, #4	; (adr r2, 8004d94 <UART_SetConfig+0x4bc>)
 8004d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d94:	08004db9 	.word	0x08004db9
 8004d98:	08004dc1 	.word	0x08004dc1
 8004d9c:	08004dc9 	.word	0x08004dc9
 8004da0:	08004ddf 	.word	0x08004ddf
 8004da4:	08004dcf 	.word	0x08004dcf
 8004da8:	08004ddf 	.word	0x08004ddf
 8004dac:	08004ddf 	.word	0x08004ddf
 8004db0:	08004ddf 	.word	0x08004ddf
 8004db4:	08004dd7 	.word	0x08004dd7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004db8:	f7fe fc94 	bl	80036e4 <HAL_RCC_GetPCLK1Freq>
 8004dbc:	61f8      	str	r0, [r7, #28]
        break;
 8004dbe:	e014      	b.n	8004dea <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004dc0:	f7fe fca6 	bl	8003710 <HAL_RCC_GetPCLK2Freq>
 8004dc4:	61f8      	str	r0, [r7, #28]
        break;
 8004dc6:	e010      	b.n	8004dea <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004dc8:	4b1e      	ldr	r3, [pc, #120]	; (8004e44 <UART_SetConfig+0x56c>)
 8004dca:	61fb      	str	r3, [r7, #28]
        break;
 8004dcc:	e00d      	b.n	8004dea <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004dce:	f7fe fbf1 	bl	80035b4 <HAL_RCC_GetSysClockFreq>
 8004dd2:	61f8      	str	r0, [r7, #28]
        break;
 8004dd4:	e009      	b.n	8004dea <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004dd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004dda:	61fb      	str	r3, [r7, #28]
        break;
 8004ddc:	e005      	b.n	8004dea <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004dde:	2300      	movs	r3, #0
 8004de0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004de8:	bf00      	nop
    }

    if (pclk != 0U)
 8004dea:	69fb      	ldr	r3, [r7, #28]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d019      	beq.n	8004e24 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	085a      	lsrs	r2, r3, #1
 8004df6:	69fb      	ldr	r3, [r7, #28]
 8004df8:	441a      	add	r2, r3
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e02:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e04:	69bb      	ldr	r3, [r7, #24]
 8004e06:	2b0f      	cmp	r3, #15
 8004e08:	d909      	bls.n	8004e1e <UART_SetConfig+0x546>
 8004e0a:	69bb      	ldr	r3, [r7, #24]
 8004e0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e10:	d205      	bcs.n	8004e1e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004e12:	69bb      	ldr	r3, [r7, #24]
 8004e14:	b29a      	uxth	r2, r3
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	60da      	str	r2, [r3, #12]
 8004e1c:	e002      	b.n	8004e24 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	2200      	movs	r2, #0
 8004e28:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004e30:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	3728      	adds	r7, #40	; 0x28
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e3e:	bf00      	nop
 8004e40:	40008000 	.word	0x40008000
 8004e44:	00f42400 	.word	0x00f42400

08004e48 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b083      	sub	sp, #12
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e54:	f003 0308 	and.w	r3, r3, #8
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d00a      	beq.n	8004e72 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	430a      	orrs	r2, r1
 8004e70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e76:	f003 0301 	and.w	r3, r3, #1
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d00a      	beq.n	8004e94 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	430a      	orrs	r2, r1
 8004e92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e98:	f003 0302 	and.w	r3, r3, #2
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d00a      	beq.n	8004eb6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	430a      	orrs	r2, r1
 8004eb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eba:	f003 0304 	and.w	r3, r3, #4
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d00a      	beq.n	8004ed8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	430a      	orrs	r2, r1
 8004ed6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004edc:	f003 0310 	and.w	r3, r3, #16
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d00a      	beq.n	8004efa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	689b      	ldr	r3, [r3, #8]
 8004eea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	430a      	orrs	r2, r1
 8004ef8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004efe:	f003 0320 	and.w	r3, r3, #32
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d00a      	beq.n	8004f1c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	689b      	ldr	r3, [r3, #8]
 8004f0c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	430a      	orrs	r2, r1
 8004f1a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d01a      	beq.n	8004f5e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	430a      	orrs	r2, r1
 8004f3c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f46:	d10a      	bne.n	8004f5e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	430a      	orrs	r2, r1
 8004f5c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d00a      	beq.n	8004f80 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	430a      	orrs	r2, r1
 8004f7e:	605a      	str	r2, [r3, #4]
  }
}
 8004f80:	bf00      	nop
 8004f82:	370c      	adds	r7, #12
 8004f84:	46bd      	mov	sp, r7
 8004f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8a:	4770      	bx	lr

08004f8c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b098      	sub	sp, #96	; 0x60
 8004f90:	af02      	add	r7, sp, #8
 8004f92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2200      	movs	r2, #0
 8004f98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004f9c:	f7fc f8c8 	bl	8001130 <HAL_GetTick>
 8004fa0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f003 0308 	and.w	r3, r3, #8
 8004fac:	2b08      	cmp	r3, #8
 8004fae:	d12e      	bne.n	800500e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004fb0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004fb4:	9300      	str	r3, [sp, #0]
 8004fb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004fb8:	2200      	movs	r2, #0
 8004fba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004fbe:	6878      	ldr	r0, [r7, #4]
 8004fc0:	f000 f88c 	bl	80050dc <UART_WaitOnFlagUntilTimeout>
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d021      	beq.n	800500e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fd2:	e853 3f00 	ldrex	r3, [r3]
 8004fd6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004fd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fda:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004fde:	653b      	str	r3, [r7, #80]	; 0x50
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	461a      	mov	r2, r3
 8004fe6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004fe8:	647b      	str	r3, [r7, #68]	; 0x44
 8004fea:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fec:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004fee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004ff0:	e841 2300 	strex	r3, r2, [r1]
 8004ff4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004ff6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d1e6      	bne.n	8004fca <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2220      	movs	r2, #32
 8005000:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2200      	movs	r2, #0
 8005006:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800500a:	2303      	movs	r3, #3
 800500c:	e062      	b.n	80050d4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f003 0304 	and.w	r3, r3, #4
 8005018:	2b04      	cmp	r3, #4
 800501a:	d149      	bne.n	80050b0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800501c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005020:	9300      	str	r3, [sp, #0]
 8005022:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005024:	2200      	movs	r2, #0
 8005026:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f000 f856 	bl	80050dc <UART_WaitOnFlagUntilTimeout>
 8005030:	4603      	mov	r3, r0
 8005032:	2b00      	cmp	r3, #0
 8005034:	d03c      	beq.n	80050b0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800503c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800503e:	e853 3f00 	ldrex	r3, [r3]
 8005042:	623b      	str	r3, [r7, #32]
   return(result);
 8005044:	6a3b      	ldr	r3, [r7, #32]
 8005046:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800504a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	461a      	mov	r2, r3
 8005052:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005054:	633b      	str	r3, [r7, #48]	; 0x30
 8005056:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005058:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800505a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800505c:	e841 2300 	strex	r3, r2, [r1]
 8005060:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005064:	2b00      	cmp	r3, #0
 8005066:	d1e6      	bne.n	8005036 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	3308      	adds	r3, #8
 800506e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	e853 3f00 	ldrex	r3, [r3]
 8005076:	60fb      	str	r3, [r7, #12]
   return(result);
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	f023 0301 	bic.w	r3, r3, #1
 800507e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	3308      	adds	r3, #8
 8005086:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005088:	61fa      	str	r2, [r7, #28]
 800508a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800508c:	69b9      	ldr	r1, [r7, #24]
 800508e:	69fa      	ldr	r2, [r7, #28]
 8005090:	e841 2300 	strex	r3, r2, [r1]
 8005094:	617b      	str	r3, [r7, #20]
   return(result);
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d1e5      	bne.n	8005068 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2220      	movs	r2, #32
 80050a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2200      	movs	r2, #0
 80050a8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80050ac:	2303      	movs	r3, #3
 80050ae:	e011      	b.n	80050d4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2220      	movs	r2, #32
 80050b4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2220      	movs	r2, #32
 80050ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2200      	movs	r2, #0
 80050c2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2200      	movs	r2, #0
 80050c8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2200      	movs	r2, #0
 80050ce:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80050d2:	2300      	movs	r3, #0
}
 80050d4:	4618      	mov	r0, r3
 80050d6:	3758      	adds	r7, #88	; 0x58
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd80      	pop	{r7, pc}

080050dc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b084      	sub	sp, #16
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	60f8      	str	r0, [r7, #12]
 80050e4:	60b9      	str	r1, [r7, #8]
 80050e6:	603b      	str	r3, [r7, #0]
 80050e8:	4613      	mov	r3, r2
 80050ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050ec:	e049      	b.n	8005182 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050ee:	69bb      	ldr	r3, [r7, #24]
 80050f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80050f4:	d045      	beq.n	8005182 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050f6:	f7fc f81b 	bl	8001130 <HAL_GetTick>
 80050fa:	4602      	mov	r2, r0
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	1ad3      	subs	r3, r2, r3
 8005100:	69ba      	ldr	r2, [r7, #24]
 8005102:	429a      	cmp	r2, r3
 8005104:	d302      	bcc.n	800510c <UART_WaitOnFlagUntilTimeout+0x30>
 8005106:	69bb      	ldr	r3, [r7, #24]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d101      	bne.n	8005110 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800510c:	2303      	movs	r3, #3
 800510e:	e048      	b.n	80051a2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f003 0304 	and.w	r3, r3, #4
 800511a:	2b00      	cmp	r3, #0
 800511c:	d031      	beq.n	8005182 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	69db      	ldr	r3, [r3, #28]
 8005124:	f003 0308 	and.w	r3, r3, #8
 8005128:	2b08      	cmp	r3, #8
 800512a:	d110      	bne.n	800514e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	2208      	movs	r2, #8
 8005132:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005134:	68f8      	ldr	r0, [r7, #12]
 8005136:	f000 f838 	bl	80051aa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	2208      	movs	r2, #8
 800513e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	2200      	movs	r2, #0
 8005146:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800514a:	2301      	movs	r3, #1
 800514c:	e029      	b.n	80051a2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	69db      	ldr	r3, [r3, #28]
 8005154:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005158:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800515c:	d111      	bne.n	8005182 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005166:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005168:	68f8      	ldr	r0, [r7, #12]
 800516a:	f000 f81e 	bl	80051aa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2220      	movs	r2, #32
 8005172:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	2200      	movs	r2, #0
 800517a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800517e:	2303      	movs	r3, #3
 8005180:	e00f      	b.n	80051a2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	69da      	ldr	r2, [r3, #28]
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	4013      	ands	r3, r2
 800518c:	68ba      	ldr	r2, [r7, #8]
 800518e:	429a      	cmp	r2, r3
 8005190:	bf0c      	ite	eq
 8005192:	2301      	moveq	r3, #1
 8005194:	2300      	movne	r3, #0
 8005196:	b2db      	uxtb	r3, r3
 8005198:	461a      	mov	r2, r3
 800519a:	79fb      	ldrb	r3, [r7, #7]
 800519c:	429a      	cmp	r2, r3
 800519e:	d0a6      	beq.n	80050ee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80051a0:	2300      	movs	r3, #0
}
 80051a2:	4618      	mov	r0, r3
 80051a4:	3710      	adds	r7, #16
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bd80      	pop	{r7, pc}

080051aa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80051aa:	b480      	push	{r7}
 80051ac:	b095      	sub	sp, #84	; 0x54
 80051ae:	af00      	add	r7, sp, #0
 80051b0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051ba:	e853 3f00 	ldrex	r3, [r3]
 80051be:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80051c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051c2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80051c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	461a      	mov	r2, r3
 80051ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051d0:	643b      	str	r3, [r7, #64]	; 0x40
 80051d2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051d4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80051d6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80051d8:	e841 2300 	strex	r3, r2, [r1]
 80051dc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80051de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d1e6      	bne.n	80051b2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	3308      	adds	r3, #8
 80051ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ec:	6a3b      	ldr	r3, [r7, #32]
 80051ee:	e853 3f00 	ldrex	r3, [r3]
 80051f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80051f4:	69fb      	ldr	r3, [r7, #28]
 80051f6:	f023 0301 	bic.w	r3, r3, #1
 80051fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	3308      	adds	r3, #8
 8005202:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005204:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005206:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005208:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800520a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800520c:	e841 2300 	strex	r3, r2, [r1]
 8005210:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005214:	2b00      	cmp	r3, #0
 8005216:	d1e5      	bne.n	80051e4 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800521c:	2b01      	cmp	r3, #1
 800521e:	d118      	bne.n	8005252 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	e853 3f00 	ldrex	r3, [r3]
 800522c:	60bb      	str	r3, [r7, #8]
   return(result);
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	f023 0310 	bic.w	r3, r3, #16
 8005234:	647b      	str	r3, [r7, #68]	; 0x44
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	461a      	mov	r2, r3
 800523c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800523e:	61bb      	str	r3, [r7, #24]
 8005240:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005242:	6979      	ldr	r1, [r7, #20]
 8005244:	69ba      	ldr	r2, [r7, #24]
 8005246:	e841 2300 	strex	r3, r2, [r1]
 800524a:	613b      	str	r3, [r7, #16]
   return(result);
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d1e6      	bne.n	8005220 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2220      	movs	r2, #32
 8005256:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2200      	movs	r2, #0
 800525e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2200      	movs	r2, #0
 8005264:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005266:	bf00      	nop
 8005268:	3754      	adds	r7, #84	; 0x54
 800526a:	46bd      	mov	sp, r7
 800526c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005270:	4770      	bx	lr

08005272 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005272:	b084      	sub	sp, #16
 8005274:	b580      	push	{r7, lr}
 8005276:	b084      	sub	sp, #16
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
 800527c:	f107 001c 	add.w	r0, r7, #28
 8005280:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	68db      	ldr	r3, [r3, #12]
 8005288:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8005290:	6878      	ldr	r0, [r7, #4]
 8005292:	f001 fa1d 	bl	80066d0 <USB_CoreReset>
 8005296:	4603      	mov	r3, r0
 8005298:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800529a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800529c:	2b00      	cmp	r3, #0
 800529e:	d106      	bne.n	80052ae <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052a4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	639a      	str	r2, [r3, #56]	; 0x38
 80052ac:	e005      	b.n	80052ba <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052b2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 80052ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80052bc:	4618      	mov	r0, r3
 80052be:	3710      	adds	r7, #16
 80052c0:	46bd      	mov	sp, r7
 80052c2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80052c6:	b004      	add	sp, #16
 80052c8:	4770      	bx	lr
	...

080052cc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b087      	sub	sp, #28
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	60f8      	str	r0, [r7, #12]
 80052d4:	60b9      	str	r1, [r7, #8]
 80052d6:	4613      	mov	r3, r2
 80052d8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80052da:	79fb      	ldrb	r3, [r7, #7]
 80052dc:	2b02      	cmp	r3, #2
 80052de:	d165      	bne.n	80053ac <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	4a3e      	ldr	r2, [pc, #248]	; (80053dc <USB_SetTurnaroundTime+0x110>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d906      	bls.n	80052f6 <USB_SetTurnaroundTime+0x2a>
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	4a3d      	ldr	r2, [pc, #244]	; (80053e0 <USB_SetTurnaroundTime+0x114>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d202      	bcs.n	80052f6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80052f0:	230f      	movs	r3, #15
 80052f2:	617b      	str	r3, [r7, #20]
 80052f4:	e05c      	b.n	80053b0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	4a39      	ldr	r2, [pc, #228]	; (80053e0 <USB_SetTurnaroundTime+0x114>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d306      	bcc.n	800530c <USB_SetTurnaroundTime+0x40>
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	4a38      	ldr	r2, [pc, #224]	; (80053e4 <USB_SetTurnaroundTime+0x118>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d202      	bcs.n	800530c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005306:	230e      	movs	r3, #14
 8005308:	617b      	str	r3, [r7, #20]
 800530a:	e051      	b.n	80053b0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	4a35      	ldr	r2, [pc, #212]	; (80053e4 <USB_SetTurnaroundTime+0x118>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d306      	bcc.n	8005322 <USB_SetTurnaroundTime+0x56>
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	4a34      	ldr	r2, [pc, #208]	; (80053e8 <USB_SetTurnaroundTime+0x11c>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d202      	bcs.n	8005322 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800531c:	230d      	movs	r3, #13
 800531e:	617b      	str	r3, [r7, #20]
 8005320:	e046      	b.n	80053b0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	4a30      	ldr	r2, [pc, #192]	; (80053e8 <USB_SetTurnaroundTime+0x11c>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d306      	bcc.n	8005338 <USB_SetTurnaroundTime+0x6c>
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	4a2f      	ldr	r2, [pc, #188]	; (80053ec <USB_SetTurnaroundTime+0x120>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d802      	bhi.n	8005338 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005332:	230c      	movs	r3, #12
 8005334:	617b      	str	r3, [r7, #20]
 8005336:	e03b      	b.n	80053b0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	4a2c      	ldr	r2, [pc, #176]	; (80053ec <USB_SetTurnaroundTime+0x120>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d906      	bls.n	800534e <USB_SetTurnaroundTime+0x82>
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	4a2b      	ldr	r2, [pc, #172]	; (80053f0 <USB_SetTurnaroundTime+0x124>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d802      	bhi.n	800534e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005348:	230b      	movs	r3, #11
 800534a:	617b      	str	r3, [r7, #20]
 800534c:	e030      	b.n	80053b0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	4a27      	ldr	r2, [pc, #156]	; (80053f0 <USB_SetTurnaroundTime+0x124>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d906      	bls.n	8005364 <USB_SetTurnaroundTime+0x98>
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	4a26      	ldr	r2, [pc, #152]	; (80053f4 <USB_SetTurnaroundTime+0x128>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d802      	bhi.n	8005364 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800535e:	230a      	movs	r3, #10
 8005360:	617b      	str	r3, [r7, #20]
 8005362:	e025      	b.n	80053b0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	4a23      	ldr	r2, [pc, #140]	; (80053f4 <USB_SetTurnaroundTime+0x128>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d906      	bls.n	800537a <USB_SetTurnaroundTime+0xae>
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	4a22      	ldr	r2, [pc, #136]	; (80053f8 <USB_SetTurnaroundTime+0x12c>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d202      	bcs.n	800537a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005374:	2309      	movs	r3, #9
 8005376:	617b      	str	r3, [r7, #20]
 8005378:	e01a      	b.n	80053b0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	4a1e      	ldr	r2, [pc, #120]	; (80053f8 <USB_SetTurnaroundTime+0x12c>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d306      	bcc.n	8005390 <USB_SetTurnaroundTime+0xc4>
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	4a1d      	ldr	r2, [pc, #116]	; (80053fc <USB_SetTurnaroundTime+0x130>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d802      	bhi.n	8005390 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800538a:	2308      	movs	r3, #8
 800538c:	617b      	str	r3, [r7, #20]
 800538e:	e00f      	b.n	80053b0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	4a1a      	ldr	r2, [pc, #104]	; (80053fc <USB_SetTurnaroundTime+0x130>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d906      	bls.n	80053a6 <USB_SetTurnaroundTime+0xda>
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	4a19      	ldr	r2, [pc, #100]	; (8005400 <USB_SetTurnaroundTime+0x134>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d202      	bcs.n	80053a6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80053a0:	2307      	movs	r3, #7
 80053a2:	617b      	str	r3, [r7, #20]
 80053a4:	e004      	b.n	80053b0 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80053a6:	2306      	movs	r3, #6
 80053a8:	617b      	str	r3, [r7, #20]
 80053aa:	e001      	b.n	80053b0 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80053ac:	2309      	movs	r3, #9
 80053ae:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	68db      	ldr	r3, [r3, #12]
 80053b4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	68da      	ldr	r2, [r3, #12]
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	029b      	lsls	r3, r3, #10
 80053c4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80053c8:	431a      	orrs	r2, r3
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80053ce:	2300      	movs	r3, #0
}
 80053d0:	4618      	mov	r0, r3
 80053d2:	371c      	adds	r7, #28
 80053d4:	46bd      	mov	sp, r7
 80053d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053da:	4770      	bx	lr
 80053dc:	00d8acbf 	.word	0x00d8acbf
 80053e0:	00e4e1c0 	.word	0x00e4e1c0
 80053e4:	00f42400 	.word	0x00f42400
 80053e8:	01067380 	.word	0x01067380
 80053ec:	011a499f 	.word	0x011a499f
 80053f0:	01312cff 	.word	0x01312cff
 80053f4:	014ca43f 	.word	0x014ca43f
 80053f8:	016e3600 	.word	0x016e3600
 80053fc:	01a6ab1f 	.word	0x01a6ab1f
 8005400:	01e84800 	.word	0x01e84800

08005404 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005404:	b480      	push	{r7}
 8005406:	b083      	sub	sp, #12
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	689b      	ldr	r3, [r3, #8]
 8005410:	f043 0201 	orr.w	r2, r3, #1
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005418:	2300      	movs	r3, #0
}
 800541a:	4618      	mov	r0, r3
 800541c:	370c      	adds	r7, #12
 800541e:	46bd      	mov	sp, r7
 8005420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005424:	4770      	bx	lr

08005426 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005426:	b480      	push	{r7}
 8005428:	b083      	sub	sp, #12
 800542a:	af00      	add	r7, sp, #0
 800542c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	689b      	ldr	r3, [r3, #8]
 8005432:	f023 0201 	bic.w	r2, r3, #1
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800543a:	2300      	movs	r3, #0
}
 800543c:	4618      	mov	r0, r3
 800543e:	370c      	adds	r7, #12
 8005440:	46bd      	mov	sp, r7
 8005442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005446:	4770      	bx	lr

08005448 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b084      	sub	sp, #16
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
 8005450:	460b      	mov	r3, r1
 8005452:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005454:	2300      	movs	r3, #0
 8005456:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	68db      	ldr	r3, [r3, #12]
 800545c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005464:	78fb      	ldrb	r3, [r7, #3]
 8005466:	2b01      	cmp	r3, #1
 8005468:	d115      	bne.n	8005496 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	68db      	ldr	r3, [r3, #12]
 800546e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005476:	2001      	movs	r0, #1
 8005478:	f7fb fe66 	bl	8001148 <HAL_Delay>
      ms++;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	3301      	adds	r3, #1
 8005480:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f001 f8ab 	bl	80065de <USB_GetMode>
 8005488:	4603      	mov	r3, r0
 800548a:	2b01      	cmp	r3, #1
 800548c:	d01e      	beq.n	80054cc <USB_SetCurrentMode+0x84>
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	2b31      	cmp	r3, #49	; 0x31
 8005492:	d9f0      	bls.n	8005476 <USB_SetCurrentMode+0x2e>
 8005494:	e01a      	b.n	80054cc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005496:	78fb      	ldrb	r3, [r7, #3]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d115      	bne.n	80054c8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	68db      	ldr	r3, [r3, #12]
 80054a0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80054a8:	2001      	movs	r0, #1
 80054aa:	f7fb fe4d 	bl	8001148 <HAL_Delay>
      ms++;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	3301      	adds	r3, #1
 80054b2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80054b4:	6878      	ldr	r0, [r7, #4]
 80054b6:	f001 f892 	bl	80065de <USB_GetMode>
 80054ba:	4603      	mov	r3, r0
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d005      	beq.n	80054cc <USB_SetCurrentMode+0x84>
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	2b31      	cmp	r3, #49	; 0x31
 80054c4:	d9f0      	bls.n	80054a8 <USB_SetCurrentMode+0x60>
 80054c6:	e001      	b.n	80054cc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80054c8:	2301      	movs	r3, #1
 80054ca:	e005      	b.n	80054d8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	2b32      	cmp	r3, #50	; 0x32
 80054d0:	d101      	bne.n	80054d6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80054d2:	2301      	movs	r3, #1
 80054d4:	e000      	b.n	80054d8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80054d6:	2300      	movs	r3, #0
}
 80054d8:	4618      	mov	r0, r3
 80054da:	3710      	adds	r7, #16
 80054dc:	46bd      	mov	sp, r7
 80054de:	bd80      	pop	{r7, pc}

080054e0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80054e0:	b084      	sub	sp, #16
 80054e2:	b580      	push	{r7, lr}
 80054e4:	b086      	sub	sp, #24
 80054e6:	af00      	add	r7, sp, #0
 80054e8:	6078      	str	r0, [r7, #4]
 80054ea:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80054ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80054f2:	2300      	movs	r3, #0
 80054f4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80054fa:	2300      	movs	r3, #0
 80054fc:	613b      	str	r3, [r7, #16]
 80054fe:	e009      	b.n	8005514 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005500:	687a      	ldr	r2, [r7, #4]
 8005502:	693b      	ldr	r3, [r7, #16]
 8005504:	3340      	adds	r3, #64	; 0x40
 8005506:	009b      	lsls	r3, r3, #2
 8005508:	4413      	add	r3, r2
 800550a:	2200      	movs	r2, #0
 800550c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800550e:	693b      	ldr	r3, [r7, #16]
 8005510:	3301      	adds	r3, #1
 8005512:	613b      	str	r3, [r7, #16]
 8005514:	693b      	ldr	r3, [r7, #16]
 8005516:	2b0e      	cmp	r3, #14
 8005518:	d9f2      	bls.n	8005500 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800551a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800551c:	2b00      	cmp	r3, #0
 800551e:	d11c      	bne.n	800555a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	68fa      	ldr	r2, [r7, #12]
 800552a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800552e:	f043 0302 	orr.w	r3, r3, #2
 8005532:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005538:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	601a      	str	r2, [r3, #0]
 8005558:	e005      	b.n	8005566 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800555e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800556c:	461a      	mov	r2, r3
 800556e:	2300      	movs	r3, #0
 8005570:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005572:	2103      	movs	r1, #3
 8005574:	6878      	ldr	r0, [r7, #4]
 8005576:	f000 f959 	bl	800582c <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800557a:	2110      	movs	r1, #16
 800557c:	6878      	ldr	r0, [r7, #4]
 800557e:	f000 f8f1 	bl	8005764 <USB_FlushTxFifo>
 8005582:	4603      	mov	r3, r0
 8005584:	2b00      	cmp	r3, #0
 8005586:	d001      	beq.n	800558c <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 8005588:	2301      	movs	r3, #1
 800558a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800558c:	6878      	ldr	r0, [r7, #4]
 800558e:	f000 f91d 	bl	80057cc <USB_FlushRxFifo>
 8005592:	4603      	mov	r3, r0
 8005594:	2b00      	cmp	r3, #0
 8005596:	d001      	beq.n	800559c <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 8005598:	2301      	movs	r3, #1
 800559a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055a2:	461a      	mov	r2, r3
 80055a4:	2300      	movs	r3, #0
 80055a6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055ae:	461a      	mov	r2, r3
 80055b0:	2300      	movs	r3, #0
 80055b2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055ba:	461a      	mov	r2, r3
 80055bc:	2300      	movs	r3, #0
 80055be:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80055c0:	2300      	movs	r3, #0
 80055c2:	613b      	str	r3, [r7, #16]
 80055c4:	e043      	b.n	800564e <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	015a      	lsls	r2, r3, #5
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	4413      	add	r3, r2
 80055ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80055d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80055dc:	d118      	bne.n	8005610 <USB_DevInit+0x130>
    {
      if (i == 0U)
 80055de:	693b      	ldr	r3, [r7, #16]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d10a      	bne.n	80055fa <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80055e4:	693b      	ldr	r3, [r7, #16]
 80055e6:	015a      	lsls	r2, r3, #5
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	4413      	add	r3, r2
 80055ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055f0:	461a      	mov	r2, r3
 80055f2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80055f6:	6013      	str	r3, [r2, #0]
 80055f8:	e013      	b.n	8005622 <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80055fa:	693b      	ldr	r3, [r7, #16]
 80055fc:	015a      	lsls	r2, r3, #5
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	4413      	add	r3, r2
 8005602:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005606:	461a      	mov	r2, r3
 8005608:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800560c:	6013      	str	r3, [r2, #0]
 800560e:	e008      	b.n	8005622 <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005610:	693b      	ldr	r3, [r7, #16]
 8005612:	015a      	lsls	r2, r3, #5
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	4413      	add	r3, r2
 8005618:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800561c:	461a      	mov	r2, r3
 800561e:	2300      	movs	r3, #0
 8005620:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	015a      	lsls	r2, r3, #5
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	4413      	add	r3, r2
 800562a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800562e:	461a      	mov	r2, r3
 8005630:	2300      	movs	r3, #0
 8005632:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005634:	693b      	ldr	r3, [r7, #16]
 8005636:	015a      	lsls	r2, r3, #5
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	4413      	add	r3, r2
 800563c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005640:	461a      	mov	r2, r3
 8005642:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005646:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005648:	693b      	ldr	r3, [r7, #16]
 800564a:	3301      	adds	r3, #1
 800564c:	613b      	str	r3, [r7, #16]
 800564e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005650:	693a      	ldr	r2, [r7, #16]
 8005652:	429a      	cmp	r2, r3
 8005654:	d3b7      	bcc.n	80055c6 <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005656:	2300      	movs	r3, #0
 8005658:	613b      	str	r3, [r7, #16]
 800565a:	e043      	b.n	80056e4 <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800565c:	693b      	ldr	r3, [r7, #16]
 800565e:	015a      	lsls	r2, r3, #5
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	4413      	add	r3, r2
 8005664:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800566e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005672:	d118      	bne.n	80056a6 <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 8005674:	693b      	ldr	r3, [r7, #16]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d10a      	bne.n	8005690 <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	015a      	lsls	r2, r3, #5
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	4413      	add	r3, r2
 8005682:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005686:	461a      	mov	r2, r3
 8005688:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800568c:	6013      	str	r3, [r2, #0]
 800568e:	e013      	b.n	80056b8 <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005690:	693b      	ldr	r3, [r7, #16]
 8005692:	015a      	lsls	r2, r3, #5
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	4413      	add	r3, r2
 8005698:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800569c:	461a      	mov	r2, r3
 800569e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80056a2:	6013      	str	r3, [r2, #0]
 80056a4:	e008      	b.n	80056b8 <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80056a6:	693b      	ldr	r3, [r7, #16]
 80056a8:	015a      	lsls	r2, r3, #5
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	4413      	add	r3, r2
 80056ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056b2:	461a      	mov	r2, r3
 80056b4:	2300      	movs	r3, #0
 80056b6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	015a      	lsls	r2, r3, #5
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	4413      	add	r3, r2
 80056c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056c4:	461a      	mov	r2, r3
 80056c6:	2300      	movs	r3, #0
 80056c8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	015a      	lsls	r2, r3, #5
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	4413      	add	r3, r2
 80056d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056d6:	461a      	mov	r2, r3
 80056d8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80056dc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	3301      	adds	r3, #1
 80056e2:	613b      	str	r3, [r7, #16]
 80056e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e6:	693a      	ldr	r2, [r7, #16]
 80056e8:	429a      	cmp	r2, r3
 80056ea:	d3b7      	bcc.n	800565c <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056f2:	691b      	ldr	r3, [r3, #16]
 80056f4:	68fa      	ldr	r2, [r7, #12]
 80056f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80056fa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80056fe:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2200      	movs	r2, #0
 8005704:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800570c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	699b      	ldr	r3, [r3, #24]
 8005712:	f043 0210 	orr.w	r2, r3, #16
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	699a      	ldr	r2, [r3, #24]
 800571e:	4b10      	ldr	r3, [pc, #64]	; (8005760 <USB_DevInit+0x280>)
 8005720:	4313      	orrs	r3, r2
 8005722:	687a      	ldr	r2, [r7, #4]
 8005724:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005726:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005728:	2b00      	cmp	r3, #0
 800572a:	d005      	beq.n	8005738 <USB_DevInit+0x258>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	699b      	ldr	r3, [r3, #24]
 8005730:	f043 0208 	orr.w	r2, r3, #8
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005738:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800573a:	2b01      	cmp	r3, #1
 800573c:	d107      	bne.n	800574e <USB_DevInit+0x26e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	699b      	ldr	r3, [r3, #24]
 8005742:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005746:	f043 0304 	orr.w	r3, r3, #4
 800574a:	687a      	ldr	r2, [r7, #4]
 800574c:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800574e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005750:	4618      	mov	r0, r3
 8005752:	3718      	adds	r7, #24
 8005754:	46bd      	mov	sp, r7
 8005756:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800575a:	b004      	add	sp, #16
 800575c:	4770      	bx	lr
 800575e:	bf00      	nop
 8005760:	803c3800 	.word	0x803c3800

08005764 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005764:	b480      	push	{r7}
 8005766:	b085      	sub	sp, #20
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
 800576c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800576e:	2300      	movs	r3, #0
 8005770:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	3301      	adds	r3, #1
 8005776:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	4a13      	ldr	r2, [pc, #76]	; (80057c8 <USB_FlushTxFifo+0x64>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d901      	bls.n	8005784 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005780:	2303      	movs	r3, #3
 8005782:	e01b      	b.n	80057bc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	691b      	ldr	r3, [r3, #16]
 8005788:	2b00      	cmp	r3, #0
 800578a:	daf2      	bge.n	8005772 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800578c:	2300      	movs	r3, #0
 800578e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	019b      	lsls	r3, r3, #6
 8005794:	f043 0220 	orr.w	r2, r3, #32
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	3301      	adds	r3, #1
 80057a0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	4a08      	ldr	r2, [pc, #32]	; (80057c8 <USB_FlushTxFifo+0x64>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d901      	bls.n	80057ae <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80057aa:	2303      	movs	r3, #3
 80057ac:	e006      	b.n	80057bc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	691b      	ldr	r3, [r3, #16]
 80057b2:	f003 0320 	and.w	r3, r3, #32
 80057b6:	2b20      	cmp	r3, #32
 80057b8:	d0f0      	beq.n	800579c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80057ba:	2300      	movs	r3, #0
}
 80057bc:	4618      	mov	r0, r3
 80057be:	3714      	adds	r7, #20
 80057c0:	46bd      	mov	sp, r7
 80057c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c6:	4770      	bx	lr
 80057c8:	00030d40 	.word	0x00030d40

080057cc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80057cc:	b480      	push	{r7}
 80057ce:	b085      	sub	sp, #20
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80057d4:	2300      	movs	r3, #0
 80057d6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	3301      	adds	r3, #1
 80057dc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	4a11      	ldr	r2, [pc, #68]	; (8005828 <USB_FlushRxFifo+0x5c>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d901      	bls.n	80057ea <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80057e6:	2303      	movs	r3, #3
 80057e8:	e018      	b.n	800581c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	691b      	ldr	r3, [r3, #16]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	daf2      	bge.n	80057d8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80057f2:	2300      	movs	r3, #0
 80057f4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2210      	movs	r2, #16
 80057fa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	3301      	adds	r3, #1
 8005800:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	4a08      	ldr	r2, [pc, #32]	; (8005828 <USB_FlushRxFifo+0x5c>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d901      	bls.n	800580e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800580a:	2303      	movs	r3, #3
 800580c:	e006      	b.n	800581c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	691b      	ldr	r3, [r3, #16]
 8005812:	f003 0310 	and.w	r3, r3, #16
 8005816:	2b10      	cmp	r3, #16
 8005818:	d0f0      	beq.n	80057fc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800581a:	2300      	movs	r3, #0
}
 800581c:	4618      	mov	r0, r3
 800581e:	3714      	adds	r7, #20
 8005820:	46bd      	mov	sp, r7
 8005822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005826:	4770      	bx	lr
 8005828:	00030d40 	.word	0x00030d40

0800582c <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800582c:	b480      	push	{r7}
 800582e:	b085      	sub	sp, #20
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
 8005834:	460b      	mov	r3, r1
 8005836:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005842:	681a      	ldr	r2, [r3, #0]
 8005844:	78fb      	ldrb	r3, [r7, #3]
 8005846:	68f9      	ldr	r1, [r7, #12]
 8005848:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800584c:	4313      	orrs	r3, r2
 800584e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005850:	2300      	movs	r3, #0
}
 8005852:	4618      	mov	r0, r3
 8005854:	3714      	adds	r7, #20
 8005856:	46bd      	mov	sp, r7
 8005858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585c:	4770      	bx	lr

0800585e <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800585e:	b480      	push	{r7}
 8005860:	b087      	sub	sp, #28
 8005862:	af00      	add	r7, sp, #0
 8005864:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800586a:	693b      	ldr	r3, [r7, #16]
 800586c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005870:	689b      	ldr	r3, [r3, #8]
 8005872:	f003 0306 	and.w	r3, r3, #6
 8005876:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	2b02      	cmp	r3, #2
 800587c:	d002      	beq.n	8005884 <USB_GetDevSpeed+0x26>
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	2b06      	cmp	r3, #6
 8005882:	d102      	bne.n	800588a <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005884:	2302      	movs	r3, #2
 8005886:	75fb      	strb	r3, [r7, #23]
 8005888:	e001      	b.n	800588e <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 800588a:	230f      	movs	r3, #15
 800588c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800588e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005890:	4618      	mov	r0, r3
 8005892:	371c      	adds	r7, #28
 8005894:	46bd      	mov	sp, r7
 8005896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589a:	4770      	bx	lr

0800589c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800589c:	b480      	push	{r7}
 800589e:	b085      	sub	sp, #20
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
 80058a4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	781b      	ldrb	r3, [r3, #0]
 80058ae:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	785b      	ldrb	r3, [r3, #1]
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	d13a      	bne.n	800592e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058be:	69da      	ldr	r2, [r3, #28]
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	781b      	ldrb	r3, [r3, #0]
 80058c4:	f003 030f 	and.w	r3, r3, #15
 80058c8:	2101      	movs	r1, #1
 80058ca:	fa01 f303 	lsl.w	r3, r1, r3
 80058ce:	b29b      	uxth	r3, r3
 80058d0:	68f9      	ldr	r1, [r7, #12]
 80058d2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80058d6:	4313      	orrs	r3, r2
 80058d8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	015a      	lsls	r2, r3, #5
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	4413      	add	r3, r2
 80058e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d155      	bne.n	800599c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	015a      	lsls	r2, r3, #5
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	4413      	add	r3, r2
 80058f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058fc:	681a      	ldr	r2, [r3, #0]
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	689b      	ldr	r3, [r3, #8]
 8005902:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	791b      	ldrb	r3, [r3, #4]
 800590a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800590c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	059b      	lsls	r3, r3, #22
 8005912:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005914:	4313      	orrs	r3, r2
 8005916:	68ba      	ldr	r2, [r7, #8]
 8005918:	0151      	lsls	r1, r2, #5
 800591a:	68fa      	ldr	r2, [r7, #12]
 800591c:	440a      	add	r2, r1
 800591e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005922:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005926:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800592a:	6013      	str	r3, [r2, #0]
 800592c:	e036      	b.n	800599c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005934:	69da      	ldr	r2, [r3, #28]
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	781b      	ldrb	r3, [r3, #0]
 800593a:	f003 030f 	and.w	r3, r3, #15
 800593e:	2101      	movs	r1, #1
 8005940:	fa01 f303 	lsl.w	r3, r1, r3
 8005944:	041b      	lsls	r3, r3, #16
 8005946:	68f9      	ldr	r1, [r7, #12]
 8005948:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800594c:	4313      	orrs	r3, r2
 800594e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	015a      	lsls	r2, r3, #5
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	4413      	add	r3, r2
 8005958:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005962:	2b00      	cmp	r3, #0
 8005964:	d11a      	bne.n	800599c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	015a      	lsls	r2, r3, #5
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	4413      	add	r3, r2
 800596e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005972:	681a      	ldr	r2, [r3, #0]
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	689b      	ldr	r3, [r3, #8]
 8005978:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	791b      	ldrb	r3, [r3, #4]
 8005980:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005982:	430b      	orrs	r3, r1
 8005984:	4313      	orrs	r3, r2
 8005986:	68ba      	ldr	r2, [r7, #8]
 8005988:	0151      	lsls	r1, r2, #5
 800598a:	68fa      	ldr	r2, [r7, #12]
 800598c:	440a      	add	r2, r1
 800598e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005992:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005996:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800599a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800599c:	2300      	movs	r3, #0
}
 800599e:	4618      	mov	r0, r3
 80059a0:	3714      	adds	r7, #20
 80059a2:	46bd      	mov	sp, r7
 80059a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a8:	4770      	bx	lr
	...

080059ac <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b085      	sub	sp, #20
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
 80059b4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	781b      	ldrb	r3, [r3, #0]
 80059be:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	785b      	ldrb	r3, [r3, #1]
 80059c4:	2b01      	cmp	r3, #1
 80059c6:	d161      	bne.n	8005a8c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	015a      	lsls	r2, r3, #5
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	4413      	add	r3, r2
 80059d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80059da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80059de:	d11f      	bne.n	8005a20 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	015a      	lsls	r2, r3, #5
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	4413      	add	r3, r2
 80059e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	68ba      	ldr	r2, [r7, #8]
 80059f0:	0151      	lsls	r1, r2, #5
 80059f2:	68fa      	ldr	r2, [r7, #12]
 80059f4:	440a      	add	r2, r1
 80059f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059fa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80059fe:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	015a      	lsls	r2, r3, #5
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	4413      	add	r3, r2
 8005a08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	68ba      	ldr	r2, [r7, #8]
 8005a10:	0151      	lsls	r1, r2, #5
 8005a12:	68fa      	ldr	r2, [r7, #12]
 8005a14:	440a      	add	r2, r1
 8005a16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a1a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005a1e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a26:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	781b      	ldrb	r3, [r3, #0]
 8005a2c:	f003 030f 	and.w	r3, r3, #15
 8005a30:	2101      	movs	r1, #1
 8005a32:	fa01 f303 	lsl.w	r3, r1, r3
 8005a36:	b29b      	uxth	r3, r3
 8005a38:	43db      	mvns	r3, r3
 8005a3a:	68f9      	ldr	r1, [r7, #12]
 8005a3c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a40:	4013      	ands	r3, r2
 8005a42:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a4a:	69da      	ldr	r2, [r3, #28]
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	781b      	ldrb	r3, [r3, #0]
 8005a50:	f003 030f 	and.w	r3, r3, #15
 8005a54:	2101      	movs	r1, #1
 8005a56:	fa01 f303 	lsl.w	r3, r1, r3
 8005a5a:	b29b      	uxth	r3, r3
 8005a5c:	43db      	mvns	r3, r3
 8005a5e:	68f9      	ldr	r1, [r7, #12]
 8005a60:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a64:	4013      	ands	r3, r2
 8005a66:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	015a      	lsls	r2, r3, #5
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	4413      	add	r3, r2
 8005a70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a74:	681a      	ldr	r2, [r3, #0]
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	0159      	lsls	r1, r3, #5
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	440b      	add	r3, r1
 8005a7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a82:	4619      	mov	r1, r3
 8005a84:	4b35      	ldr	r3, [pc, #212]	; (8005b5c <USB_DeactivateEndpoint+0x1b0>)
 8005a86:	4013      	ands	r3, r2
 8005a88:	600b      	str	r3, [r1, #0]
 8005a8a:	e060      	b.n	8005b4e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	015a      	lsls	r2, r3, #5
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	4413      	add	r3, r2
 8005a94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a9e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005aa2:	d11f      	bne.n	8005ae4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	015a      	lsls	r2, r3, #5
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	4413      	add	r3, r2
 8005aac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	68ba      	ldr	r2, [r7, #8]
 8005ab4:	0151      	lsls	r1, r2, #5
 8005ab6:	68fa      	ldr	r2, [r7, #12]
 8005ab8:	440a      	add	r2, r1
 8005aba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005abe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005ac2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	015a      	lsls	r2, r3, #5
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	4413      	add	r3, r2
 8005acc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	68ba      	ldr	r2, [r7, #8]
 8005ad4:	0151      	lsls	r1, r2, #5
 8005ad6:	68fa      	ldr	r2, [r7, #12]
 8005ad8:	440a      	add	r2, r1
 8005ada:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ade:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005ae2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005aea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	781b      	ldrb	r3, [r3, #0]
 8005af0:	f003 030f 	and.w	r3, r3, #15
 8005af4:	2101      	movs	r1, #1
 8005af6:	fa01 f303 	lsl.w	r3, r1, r3
 8005afa:	041b      	lsls	r3, r3, #16
 8005afc:	43db      	mvns	r3, r3
 8005afe:	68f9      	ldr	r1, [r7, #12]
 8005b00:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b04:	4013      	ands	r3, r2
 8005b06:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b0e:	69da      	ldr	r2, [r3, #28]
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	781b      	ldrb	r3, [r3, #0]
 8005b14:	f003 030f 	and.w	r3, r3, #15
 8005b18:	2101      	movs	r1, #1
 8005b1a:	fa01 f303 	lsl.w	r3, r1, r3
 8005b1e:	041b      	lsls	r3, r3, #16
 8005b20:	43db      	mvns	r3, r3
 8005b22:	68f9      	ldr	r1, [r7, #12]
 8005b24:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b28:	4013      	ands	r3, r2
 8005b2a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	015a      	lsls	r2, r3, #5
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	4413      	add	r3, r2
 8005b34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b38:	681a      	ldr	r2, [r3, #0]
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	0159      	lsls	r1, r3, #5
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	440b      	add	r3, r1
 8005b42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b46:	4619      	mov	r1, r3
 8005b48:	4b05      	ldr	r3, [pc, #20]	; (8005b60 <USB_DeactivateEndpoint+0x1b4>)
 8005b4a:	4013      	ands	r3, r2
 8005b4c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005b4e:	2300      	movs	r3, #0
}
 8005b50:	4618      	mov	r0, r3
 8005b52:	3714      	adds	r7, #20
 8005b54:	46bd      	mov	sp, r7
 8005b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5a:	4770      	bx	lr
 8005b5c:	ec337800 	.word	0xec337800
 8005b60:	eff37800 	.word	0xeff37800

08005b64 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b086      	sub	sp, #24
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
 8005b6c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	781b      	ldrb	r3, [r3, #0]
 8005b76:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	785b      	ldrb	r3, [r3, #1]
 8005b7c:	2b01      	cmp	r3, #1
 8005b7e:	f040 8128 	bne.w	8005dd2 <USB_EPStartXfer+0x26e>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	691b      	ldr	r3, [r3, #16]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d132      	bne.n	8005bf0 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005b8a:	693b      	ldr	r3, [r7, #16]
 8005b8c:	015a      	lsls	r2, r3, #5
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	4413      	add	r3, r2
 8005b92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b96:	691b      	ldr	r3, [r3, #16]
 8005b98:	693a      	ldr	r2, [r7, #16]
 8005b9a:	0151      	lsls	r1, r2, #5
 8005b9c:	697a      	ldr	r2, [r7, #20]
 8005b9e:	440a      	add	r2, r1
 8005ba0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ba4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005ba8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005bac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005bae:	693b      	ldr	r3, [r7, #16]
 8005bb0:	015a      	lsls	r2, r3, #5
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	4413      	add	r3, r2
 8005bb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bba:	691b      	ldr	r3, [r3, #16]
 8005bbc:	693a      	ldr	r2, [r7, #16]
 8005bbe:	0151      	lsls	r1, r2, #5
 8005bc0:	697a      	ldr	r2, [r7, #20]
 8005bc2:	440a      	add	r2, r1
 8005bc4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bc8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005bcc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005bce:	693b      	ldr	r3, [r7, #16]
 8005bd0:	015a      	lsls	r2, r3, #5
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	4413      	add	r3, r2
 8005bd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bda:	691b      	ldr	r3, [r3, #16]
 8005bdc:	693a      	ldr	r2, [r7, #16]
 8005bde:	0151      	lsls	r1, r2, #5
 8005be0:	697a      	ldr	r2, [r7, #20]
 8005be2:	440a      	add	r2, r1
 8005be4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005be8:	0cdb      	lsrs	r3, r3, #19
 8005bea:	04db      	lsls	r3, r3, #19
 8005bec:	6113      	str	r3, [r2, #16]
 8005bee:	e092      	b.n	8005d16 <USB_EPStartXfer+0x1b2>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005bf0:	693b      	ldr	r3, [r7, #16]
 8005bf2:	015a      	lsls	r2, r3, #5
 8005bf4:	697b      	ldr	r3, [r7, #20]
 8005bf6:	4413      	add	r3, r2
 8005bf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bfc:	691b      	ldr	r3, [r3, #16]
 8005bfe:	693a      	ldr	r2, [r7, #16]
 8005c00:	0151      	lsls	r1, r2, #5
 8005c02:	697a      	ldr	r2, [r7, #20]
 8005c04:	440a      	add	r2, r1
 8005c06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c0a:	0cdb      	lsrs	r3, r3, #19
 8005c0c:	04db      	lsls	r3, r3, #19
 8005c0e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	015a      	lsls	r2, r3, #5
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	4413      	add	r3, r2
 8005c18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c1c:	691b      	ldr	r3, [r3, #16]
 8005c1e:	693a      	ldr	r2, [r7, #16]
 8005c20:	0151      	lsls	r1, r2, #5
 8005c22:	697a      	ldr	r2, [r7, #20]
 8005c24:	440a      	add	r2, r1
 8005c26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c2a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005c2e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005c32:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d11a      	bne.n	8005c70 <USB_EPStartXfer+0x10c>
      {
        if (ep->xfer_len > ep->maxpacket)
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	691a      	ldr	r2, [r3, #16]
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	689b      	ldr	r3, [r3, #8]
 8005c42:	429a      	cmp	r2, r3
 8005c44:	d903      	bls.n	8005c4e <USB_EPStartXfer+0xea>
        {
          ep->xfer_len = ep->maxpacket;
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	689a      	ldr	r2, [r3, #8]
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	015a      	lsls	r2, r3, #5
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	4413      	add	r3, r2
 8005c56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c5a:	691b      	ldr	r3, [r3, #16]
 8005c5c:	693a      	ldr	r2, [r7, #16]
 8005c5e:	0151      	lsls	r1, r2, #5
 8005c60:	697a      	ldr	r2, [r7, #20]
 8005c62:	440a      	add	r2, r1
 8005c64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c68:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005c6c:	6113      	str	r3, [r2, #16]
 8005c6e:	e01b      	b.n	8005ca8 <USB_EPStartXfer+0x144>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005c70:	693b      	ldr	r3, [r7, #16]
 8005c72:	015a      	lsls	r2, r3, #5
 8005c74:	697b      	ldr	r3, [r7, #20]
 8005c76:	4413      	add	r3, r2
 8005c78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c7c:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	6919      	ldr	r1, [r3, #16]
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	689b      	ldr	r3, [r3, #8]
 8005c86:	440b      	add	r3, r1
 8005c88:	1e59      	subs	r1, r3, #1
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	689b      	ldr	r3, [r3, #8]
 8005c8e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005c92:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005c94:	4b8d      	ldr	r3, [pc, #564]	; (8005ecc <USB_EPStartXfer+0x368>)
 8005c96:	400b      	ands	r3, r1
 8005c98:	6939      	ldr	r1, [r7, #16]
 8005c9a:	0148      	lsls	r0, r1, #5
 8005c9c:	6979      	ldr	r1, [r7, #20]
 8005c9e:	4401      	add	r1, r0
 8005ca0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005ca8:	693b      	ldr	r3, [r7, #16]
 8005caa:	015a      	lsls	r2, r3, #5
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	4413      	add	r3, r2
 8005cb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cb4:	691a      	ldr	r2, [r3, #16]
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	691b      	ldr	r3, [r3, #16]
 8005cba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005cbe:	6939      	ldr	r1, [r7, #16]
 8005cc0:	0148      	lsls	r0, r1, #5
 8005cc2:	6979      	ldr	r1, [r7, #20]
 8005cc4:	4401      	add	r1, r0
 8005cc6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005cca:	4313      	orrs	r3, r2
 8005ccc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	791b      	ldrb	r3, [r3, #4]
 8005cd2:	2b01      	cmp	r3, #1
 8005cd4:	d11f      	bne.n	8005d16 <USB_EPStartXfer+0x1b2>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005cd6:	693b      	ldr	r3, [r7, #16]
 8005cd8:	015a      	lsls	r2, r3, #5
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	4413      	add	r3, r2
 8005cde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ce2:	691b      	ldr	r3, [r3, #16]
 8005ce4:	693a      	ldr	r2, [r7, #16]
 8005ce6:	0151      	lsls	r1, r2, #5
 8005ce8:	697a      	ldr	r2, [r7, #20]
 8005cea:	440a      	add	r2, r1
 8005cec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cf0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005cf4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005cf6:	693b      	ldr	r3, [r7, #16]
 8005cf8:	015a      	lsls	r2, r3, #5
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	4413      	add	r3, r2
 8005cfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d02:	691b      	ldr	r3, [r3, #16]
 8005d04:	693a      	ldr	r2, [r7, #16]
 8005d06:	0151      	lsls	r1, r2, #5
 8005d08:	697a      	ldr	r2, [r7, #20]
 8005d0a:	440a      	add	r2, r1
 8005d0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d10:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005d14:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	015a      	lsls	r2, r3, #5
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	4413      	add	r3, r2
 8005d1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	693a      	ldr	r2, [r7, #16]
 8005d26:	0151      	lsls	r1, r2, #5
 8005d28:	697a      	ldr	r2, [r7, #20]
 8005d2a:	440a      	add	r2, r1
 8005d2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d30:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005d34:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	791b      	ldrb	r3, [r3, #4]
 8005d3a:	2b01      	cmp	r3, #1
 8005d3c:	d015      	beq.n	8005d6a <USB_EPStartXfer+0x206>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	691b      	ldr	r3, [r3, #16]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	f000 8139 	beq.w	8005fba <USB_EPStartXfer+0x456>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005d48:	697b      	ldr	r3, [r7, #20]
 8005d4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	781b      	ldrb	r3, [r3, #0]
 8005d54:	f003 030f 	and.w	r3, r3, #15
 8005d58:	2101      	movs	r1, #1
 8005d5a:	fa01 f303 	lsl.w	r3, r1, r3
 8005d5e:	6979      	ldr	r1, [r7, #20]
 8005d60:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d64:	4313      	orrs	r3, r2
 8005d66:	634b      	str	r3, [r1, #52]	; 0x34
 8005d68:	e127      	b.n	8005fba <USB_EPStartXfer+0x456>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005d6a:	697b      	ldr	r3, [r7, #20]
 8005d6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d70:	689b      	ldr	r3, [r3, #8]
 8005d72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d110      	bne.n	8005d9c <USB_EPStartXfer+0x238>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005d7a:	693b      	ldr	r3, [r7, #16]
 8005d7c:	015a      	lsls	r2, r3, #5
 8005d7e:	697b      	ldr	r3, [r7, #20]
 8005d80:	4413      	add	r3, r2
 8005d82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	693a      	ldr	r2, [r7, #16]
 8005d8a:	0151      	lsls	r1, r2, #5
 8005d8c:	697a      	ldr	r2, [r7, #20]
 8005d8e:	440a      	add	r2, r1
 8005d90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d94:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005d98:	6013      	str	r3, [r2, #0]
 8005d9a:	e00f      	b.n	8005dbc <USB_EPStartXfer+0x258>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005d9c:	693b      	ldr	r3, [r7, #16]
 8005d9e:	015a      	lsls	r2, r3, #5
 8005da0:	697b      	ldr	r3, [r7, #20]
 8005da2:	4413      	add	r3, r2
 8005da4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	693a      	ldr	r2, [r7, #16]
 8005dac:	0151      	lsls	r1, r2, #5
 8005dae:	697a      	ldr	r2, [r7, #20]
 8005db0:	440a      	add	r2, r1
 8005db2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005db6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005dba:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	68d9      	ldr	r1, [r3, #12]
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	781a      	ldrb	r2, [r3, #0]
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	691b      	ldr	r3, [r3, #16]
 8005dc8:	b29b      	uxth	r3, r3
 8005dca:	6878      	ldr	r0, [r7, #4]
 8005dcc:	f000 f9a6 	bl	800611c <USB_WritePacket>
 8005dd0:	e0f3      	b.n	8005fba <USB_EPStartXfer+0x456>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005dd2:	693b      	ldr	r3, [r7, #16]
 8005dd4:	015a      	lsls	r2, r3, #5
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	4413      	add	r3, r2
 8005dda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dde:	691b      	ldr	r3, [r3, #16]
 8005de0:	693a      	ldr	r2, [r7, #16]
 8005de2:	0151      	lsls	r1, r2, #5
 8005de4:	697a      	ldr	r2, [r7, #20]
 8005de6:	440a      	add	r2, r1
 8005de8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005dec:	0cdb      	lsrs	r3, r3, #19
 8005dee:	04db      	lsls	r3, r3, #19
 8005df0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005df2:	693b      	ldr	r3, [r7, #16]
 8005df4:	015a      	lsls	r2, r3, #5
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	4413      	add	r3, r2
 8005dfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dfe:	691b      	ldr	r3, [r3, #16]
 8005e00:	693a      	ldr	r2, [r7, #16]
 8005e02:	0151      	lsls	r1, r2, #5
 8005e04:	697a      	ldr	r2, [r7, #20]
 8005e06:	440a      	add	r2, r1
 8005e08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e0c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005e10:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005e14:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8005e16:	693b      	ldr	r3, [r7, #16]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d12f      	bne.n	8005e7c <USB_EPStartXfer+0x318>
    {
      if (ep->xfer_len > 0U)
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	691b      	ldr	r3, [r3, #16]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d003      	beq.n	8005e2c <USB_EPStartXfer+0x2c8>
      {
        ep->xfer_len = ep->maxpacket;
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	689a      	ldr	r2, [r3, #8]
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	689a      	ldr	r2, [r3, #8]
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005e34:	693b      	ldr	r3, [r7, #16]
 8005e36:	015a      	lsls	r2, r3, #5
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	4413      	add	r3, r2
 8005e3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e40:	691a      	ldr	r2, [r3, #16]
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	6a1b      	ldr	r3, [r3, #32]
 8005e46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e4a:	6939      	ldr	r1, [r7, #16]
 8005e4c:	0148      	lsls	r0, r1, #5
 8005e4e:	6979      	ldr	r1, [r7, #20]
 8005e50:	4401      	add	r1, r0
 8005e52:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005e56:	4313      	orrs	r3, r2
 8005e58:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	015a      	lsls	r2, r3, #5
 8005e5e:	697b      	ldr	r3, [r7, #20]
 8005e60:	4413      	add	r3, r2
 8005e62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e66:	691b      	ldr	r3, [r3, #16]
 8005e68:	693a      	ldr	r2, [r7, #16]
 8005e6a:	0151      	lsls	r1, r2, #5
 8005e6c:	697a      	ldr	r2, [r7, #20]
 8005e6e:	440a      	add	r2, r1
 8005e70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e74:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005e78:	6113      	str	r3, [r2, #16]
 8005e7a:	e061      	b.n	8005f40 <USB_EPStartXfer+0x3dc>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	691b      	ldr	r3, [r3, #16]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d125      	bne.n	8005ed0 <USB_EPStartXfer+0x36c>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005e84:	693b      	ldr	r3, [r7, #16]
 8005e86:	015a      	lsls	r2, r3, #5
 8005e88:	697b      	ldr	r3, [r7, #20]
 8005e8a:	4413      	add	r3, r2
 8005e8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e90:	691a      	ldr	r2, [r3, #16]
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	689b      	ldr	r3, [r3, #8]
 8005e96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e9a:	6939      	ldr	r1, [r7, #16]
 8005e9c:	0148      	lsls	r0, r1, #5
 8005e9e:	6979      	ldr	r1, [r7, #20]
 8005ea0:	4401      	add	r1, r0
 8005ea2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005eaa:	693b      	ldr	r3, [r7, #16]
 8005eac:	015a      	lsls	r2, r3, #5
 8005eae:	697b      	ldr	r3, [r7, #20]
 8005eb0:	4413      	add	r3, r2
 8005eb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eb6:	691b      	ldr	r3, [r3, #16]
 8005eb8:	693a      	ldr	r2, [r7, #16]
 8005eba:	0151      	lsls	r1, r2, #5
 8005ebc:	697a      	ldr	r2, [r7, #20]
 8005ebe:	440a      	add	r2, r1
 8005ec0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ec4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005ec8:	6113      	str	r3, [r2, #16]
 8005eca:	e039      	b.n	8005f40 <USB_EPStartXfer+0x3dc>
 8005ecc:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	691a      	ldr	r2, [r3, #16]
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	689b      	ldr	r3, [r3, #8]
 8005ed8:	4413      	add	r3, r2
 8005eda:	1e5a      	subs	r2, r3, #1
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	689b      	ldr	r3, [r3, #8]
 8005ee0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ee4:	81fb      	strh	r3, [r7, #14]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	689b      	ldr	r3, [r3, #8]
 8005eea:	89fa      	ldrh	r2, [r7, #14]
 8005eec:	fb03 f202 	mul.w	r2, r3, r2
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005ef4:	693b      	ldr	r3, [r7, #16]
 8005ef6:	015a      	lsls	r2, r3, #5
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	4413      	add	r3, r2
 8005efc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f00:	691a      	ldr	r2, [r3, #16]
 8005f02:	89fb      	ldrh	r3, [r7, #14]
 8005f04:	04d9      	lsls	r1, r3, #19
 8005f06:	4b2f      	ldr	r3, [pc, #188]	; (8005fc4 <USB_EPStartXfer+0x460>)
 8005f08:	400b      	ands	r3, r1
 8005f0a:	6939      	ldr	r1, [r7, #16]
 8005f0c:	0148      	lsls	r0, r1, #5
 8005f0e:	6979      	ldr	r1, [r7, #20]
 8005f10:	4401      	add	r1, r0
 8005f12:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005f16:	4313      	orrs	r3, r2
 8005f18:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	015a      	lsls	r2, r3, #5
 8005f1e:	697b      	ldr	r3, [r7, #20]
 8005f20:	4413      	add	r3, r2
 8005f22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f26:	691a      	ldr	r2, [r3, #16]
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	6a1b      	ldr	r3, [r3, #32]
 8005f2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f30:	6939      	ldr	r1, [r7, #16]
 8005f32:	0148      	lsls	r0, r1, #5
 8005f34:	6979      	ldr	r1, [r7, #20]
 8005f36:	4401      	add	r1, r0
 8005f38:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005f3c:	4313      	orrs	r3, r2
 8005f3e:	610b      	str	r3, [r1, #16]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	791b      	ldrb	r3, [r3, #4]
 8005f44:	2b01      	cmp	r3, #1
 8005f46:	d128      	bne.n	8005f9a <USB_EPStartXfer+0x436>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f4e:	689b      	ldr	r3, [r3, #8]
 8005f50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d110      	bne.n	8005f7a <USB_EPStartXfer+0x416>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005f58:	693b      	ldr	r3, [r7, #16]
 8005f5a:	015a      	lsls	r2, r3, #5
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	4413      	add	r3, r2
 8005f60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	693a      	ldr	r2, [r7, #16]
 8005f68:	0151      	lsls	r1, r2, #5
 8005f6a:	697a      	ldr	r2, [r7, #20]
 8005f6c:	440a      	add	r2, r1
 8005f6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f72:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005f76:	6013      	str	r3, [r2, #0]
 8005f78:	e00f      	b.n	8005f9a <USB_EPStartXfer+0x436>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005f7a:	693b      	ldr	r3, [r7, #16]
 8005f7c:	015a      	lsls	r2, r3, #5
 8005f7e:	697b      	ldr	r3, [r7, #20]
 8005f80:	4413      	add	r3, r2
 8005f82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	693a      	ldr	r2, [r7, #16]
 8005f8a:	0151      	lsls	r1, r2, #5
 8005f8c:	697a      	ldr	r2, [r7, #20]
 8005f8e:	440a      	add	r2, r1
 8005f90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f98:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005f9a:	693b      	ldr	r3, [r7, #16]
 8005f9c:	015a      	lsls	r2, r3, #5
 8005f9e:	697b      	ldr	r3, [r7, #20]
 8005fa0:	4413      	add	r3, r2
 8005fa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	693a      	ldr	r2, [r7, #16]
 8005faa:	0151      	lsls	r1, r2, #5
 8005fac:	697a      	ldr	r2, [r7, #20]
 8005fae:	440a      	add	r2, r1
 8005fb0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fb4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005fb8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005fba:	2300      	movs	r3, #0
}
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	3718      	adds	r7, #24
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	bd80      	pop	{r7, pc}
 8005fc4:	1ff80000 	.word	0x1ff80000

08005fc8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005fc8:	b480      	push	{r7}
 8005fca:	b087      	sub	sp, #28
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
 8005fd0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	785b      	ldrb	r3, [r3, #1]
 8005fe2:	2b01      	cmp	r3, #1
 8005fe4:	d14a      	bne.n	800607c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	781b      	ldrb	r3, [r3, #0]
 8005fea:	015a      	lsls	r2, r3, #5
 8005fec:	693b      	ldr	r3, [r7, #16]
 8005fee:	4413      	add	r3, r2
 8005ff0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ffa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ffe:	f040 8086 	bne.w	800610e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	781b      	ldrb	r3, [r3, #0]
 8006006:	015a      	lsls	r2, r3, #5
 8006008:	693b      	ldr	r3, [r7, #16]
 800600a:	4413      	add	r3, r2
 800600c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	683a      	ldr	r2, [r7, #0]
 8006014:	7812      	ldrb	r2, [r2, #0]
 8006016:	0151      	lsls	r1, r2, #5
 8006018:	693a      	ldr	r2, [r7, #16]
 800601a:	440a      	add	r2, r1
 800601c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006020:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006024:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	781b      	ldrb	r3, [r3, #0]
 800602a:	015a      	lsls	r2, r3, #5
 800602c:	693b      	ldr	r3, [r7, #16]
 800602e:	4413      	add	r3, r2
 8006030:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	683a      	ldr	r2, [r7, #0]
 8006038:	7812      	ldrb	r2, [r2, #0]
 800603a:	0151      	lsls	r1, r2, #5
 800603c:	693a      	ldr	r2, [r7, #16]
 800603e:	440a      	add	r2, r1
 8006040:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006044:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006048:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	3301      	adds	r3, #1
 800604e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	f242 7210 	movw	r2, #10000	; 0x2710
 8006056:	4293      	cmp	r3, r2
 8006058:	d902      	bls.n	8006060 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800605a:	2301      	movs	r3, #1
 800605c:	75fb      	strb	r3, [r7, #23]
          break;
 800605e:	e056      	b.n	800610e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	781b      	ldrb	r3, [r3, #0]
 8006064:	015a      	lsls	r2, r3, #5
 8006066:	693b      	ldr	r3, [r7, #16]
 8006068:	4413      	add	r3, r2
 800606a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006074:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006078:	d0e7      	beq.n	800604a <USB_EPStopXfer+0x82>
 800607a:	e048      	b.n	800610e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	781b      	ldrb	r3, [r3, #0]
 8006080:	015a      	lsls	r2, r3, #5
 8006082:	693b      	ldr	r3, [r7, #16]
 8006084:	4413      	add	r3, r2
 8006086:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006090:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006094:	d13b      	bne.n	800610e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	781b      	ldrb	r3, [r3, #0]
 800609a:	015a      	lsls	r2, r3, #5
 800609c:	693b      	ldr	r3, [r7, #16]
 800609e:	4413      	add	r3, r2
 80060a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	683a      	ldr	r2, [r7, #0]
 80060a8:	7812      	ldrb	r2, [r2, #0]
 80060aa:	0151      	lsls	r1, r2, #5
 80060ac:	693a      	ldr	r2, [r7, #16]
 80060ae:	440a      	add	r2, r1
 80060b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060b4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80060b8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	781b      	ldrb	r3, [r3, #0]
 80060be:	015a      	lsls	r2, r3, #5
 80060c0:	693b      	ldr	r3, [r7, #16]
 80060c2:	4413      	add	r3, r2
 80060c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	683a      	ldr	r2, [r7, #0]
 80060cc:	7812      	ldrb	r2, [r2, #0]
 80060ce:	0151      	lsls	r1, r2, #5
 80060d0:	693a      	ldr	r2, [r7, #16]
 80060d2:	440a      	add	r2, r1
 80060d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80060dc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	3301      	adds	r3, #1
 80060e2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	f242 7210 	movw	r2, #10000	; 0x2710
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d902      	bls.n	80060f4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80060ee:	2301      	movs	r3, #1
 80060f0:	75fb      	strb	r3, [r7, #23]
          break;
 80060f2:	e00c      	b.n	800610e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	781b      	ldrb	r3, [r3, #0]
 80060f8:	015a      	lsls	r2, r3, #5
 80060fa:	693b      	ldr	r3, [r7, #16]
 80060fc:	4413      	add	r3, r2
 80060fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006108:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800610c:	d0e7      	beq.n	80060de <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800610e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006110:	4618      	mov	r0, r3
 8006112:	371c      	adds	r7, #28
 8006114:	46bd      	mov	sp, r7
 8006116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611a:	4770      	bx	lr

0800611c <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 800611c:	b480      	push	{r7}
 800611e:	b089      	sub	sp, #36	; 0x24
 8006120:	af00      	add	r7, sp, #0
 8006122:	60f8      	str	r0, [r7, #12]
 8006124:	60b9      	str	r1, [r7, #8]
 8006126:	4611      	mov	r1, r2
 8006128:	461a      	mov	r2, r3
 800612a:	460b      	mov	r3, r1
 800612c:	71fb      	strb	r3, [r7, #7]
 800612e:	4613      	mov	r3, r2
 8006130:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 800613a:	88bb      	ldrh	r3, [r7, #4]
 800613c:	3303      	adds	r3, #3
 800613e:	089b      	lsrs	r3, r3, #2
 8006140:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8006142:	2300      	movs	r3, #0
 8006144:	61bb      	str	r3, [r7, #24]
 8006146:	e018      	b.n	800617a <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006148:	79fb      	ldrb	r3, [r7, #7]
 800614a:	031a      	lsls	r2, r3, #12
 800614c:	697b      	ldr	r3, [r7, #20]
 800614e:	4413      	add	r3, r2
 8006150:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006154:	461a      	mov	r2, r3
 8006156:	69fb      	ldr	r3, [r7, #28]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	6013      	str	r3, [r2, #0]
    pSrc++;
 800615c:	69fb      	ldr	r3, [r7, #28]
 800615e:	3301      	adds	r3, #1
 8006160:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8006162:	69fb      	ldr	r3, [r7, #28]
 8006164:	3301      	adds	r3, #1
 8006166:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8006168:	69fb      	ldr	r3, [r7, #28]
 800616a:	3301      	adds	r3, #1
 800616c:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800616e:	69fb      	ldr	r3, [r7, #28]
 8006170:	3301      	adds	r3, #1
 8006172:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8006174:	69bb      	ldr	r3, [r7, #24]
 8006176:	3301      	adds	r3, #1
 8006178:	61bb      	str	r3, [r7, #24]
 800617a:	69ba      	ldr	r2, [r7, #24]
 800617c:	693b      	ldr	r3, [r7, #16]
 800617e:	429a      	cmp	r2, r3
 8006180:	d3e2      	bcc.n	8006148 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8006182:	2300      	movs	r3, #0
}
 8006184:	4618      	mov	r0, r3
 8006186:	3724      	adds	r7, #36	; 0x24
 8006188:	46bd      	mov	sp, r7
 800618a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618e:	4770      	bx	lr

08006190 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006190:	b480      	push	{r7}
 8006192:	b08b      	sub	sp, #44	; 0x2c
 8006194:	af00      	add	r7, sp, #0
 8006196:	60f8      	str	r0, [r7, #12]
 8006198:	60b9      	str	r1, [r7, #8]
 800619a:	4613      	mov	r3, r2
 800619c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80061a6:	88fb      	ldrh	r3, [r7, #6]
 80061a8:	089b      	lsrs	r3, r3, #2
 80061aa:	b29b      	uxth	r3, r3
 80061ac:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80061ae:	88fb      	ldrh	r3, [r7, #6]
 80061b0:	f003 0303 	and.w	r3, r3, #3
 80061b4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80061b6:	2300      	movs	r3, #0
 80061b8:	623b      	str	r3, [r7, #32]
 80061ba:	e014      	b.n	80061e6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80061bc:	69bb      	ldr	r3, [r7, #24]
 80061be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80061c2:	681a      	ldr	r2, [r3, #0]
 80061c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c6:	601a      	str	r2, [r3, #0]
    pDest++;
 80061c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ca:	3301      	adds	r3, #1
 80061cc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80061ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d0:	3301      	adds	r3, #1
 80061d2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80061d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d6:	3301      	adds	r3, #1
 80061d8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80061da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061dc:	3301      	adds	r3, #1
 80061de:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80061e0:	6a3b      	ldr	r3, [r7, #32]
 80061e2:	3301      	adds	r3, #1
 80061e4:	623b      	str	r3, [r7, #32]
 80061e6:	6a3a      	ldr	r2, [r7, #32]
 80061e8:	697b      	ldr	r3, [r7, #20]
 80061ea:	429a      	cmp	r2, r3
 80061ec:	d3e6      	bcc.n	80061bc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80061ee:	8bfb      	ldrh	r3, [r7, #30]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d01e      	beq.n	8006232 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80061f4:	2300      	movs	r3, #0
 80061f6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80061f8:	69bb      	ldr	r3, [r7, #24]
 80061fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80061fe:	461a      	mov	r2, r3
 8006200:	f107 0310 	add.w	r3, r7, #16
 8006204:	6812      	ldr	r2, [r2, #0]
 8006206:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006208:	693a      	ldr	r2, [r7, #16]
 800620a:	6a3b      	ldr	r3, [r7, #32]
 800620c:	b2db      	uxtb	r3, r3
 800620e:	00db      	lsls	r3, r3, #3
 8006210:	fa22 f303 	lsr.w	r3, r2, r3
 8006214:	b2da      	uxtb	r2, r3
 8006216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006218:	701a      	strb	r2, [r3, #0]
      i++;
 800621a:	6a3b      	ldr	r3, [r7, #32]
 800621c:	3301      	adds	r3, #1
 800621e:	623b      	str	r3, [r7, #32]
      pDest++;
 8006220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006222:	3301      	adds	r3, #1
 8006224:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006226:	8bfb      	ldrh	r3, [r7, #30]
 8006228:	3b01      	subs	r3, #1
 800622a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800622c:	8bfb      	ldrh	r3, [r7, #30]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d1ea      	bne.n	8006208 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006234:	4618      	mov	r0, r3
 8006236:	372c      	adds	r7, #44	; 0x2c
 8006238:	46bd      	mov	sp, r7
 800623a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623e:	4770      	bx	lr

08006240 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006240:	b480      	push	{r7}
 8006242:	b085      	sub	sp, #20
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
 8006248:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	781b      	ldrb	r3, [r3, #0]
 8006252:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	785b      	ldrb	r3, [r3, #1]
 8006258:	2b01      	cmp	r3, #1
 800625a:	d12c      	bne.n	80062b6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	015a      	lsls	r2, r3, #5
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	4413      	add	r3, r2
 8006264:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	2b00      	cmp	r3, #0
 800626c:	db12      	blt.n	8006294 <USB_EPSetStall+0x54>
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d00f      	beq.n	8006294 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	015a      	lsls	r2, r3, #5
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	4413      	add	r3, r2
 800627c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	68ba      	ldr	r2, [r7, #8]
 8006284:	0151      	lsls	r1, r2, #5
 8006286:	68fa      	ldr	r2, [r7, #12]
 8006288:	440a      	add	r2, r1
 800628a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800628e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006292:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	015a      	lsls	r2, r3, #5
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	4413      	add	r3, r2
 800629c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	68ba      	ldr	r2, [r7, #8]
 80062a4:	0151      	lsls	r1, r2, #5
 80062a6:	68fa      	ldr	r2, [r7, #12]
 80062a8:	440a      	add	r2, r1
 80062aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062ae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80062b2:	6013      	str	r3, [r2, #0]
 80062b4:	e02b      	b.n	800630e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	015a      	lsls	r2, r3, #5
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	4413      	add	r3, r2
 80062be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	db12      	blt.n	80062ee <USB_EPSetStall+0xae>
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d00f      	beq.n	80062ee <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	015a      	lsls	r2, r3, #5
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	4413      	add	r3, r2
 80062d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	68ba      	ldr	r2, [r7, #8]
 80062de:	0151      	lsls	r1, r2, #5
 80062e0:	68fa      	ldr	r2, [r7, #12]
 80062e2:	440a      	add	r2, r1
 80062e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062e8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80062ec:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	015a      	lsls	r2, r3, #5
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	4413      	add	r3, r2
 80062f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	68ba      	ldr	r2, [r7, #8]
 80062fe:	0151      	lsls	r1, r2, #5
 8006300:	68fa      	ldr	r2, [r7, #12]
 8006302:	440a      	add	r2, r1
 8006304:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006308:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800630c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800630e:	2300      	movs	r3, #0
}
 8006310:	4618      	mov	r0, r3
 8006312:	3714      	adds	r7, #20
 8006314:	46bd      	mov	sp, r7
 8006316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631a:	4770      	bx	lr

0800631c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800631c:	b480      	push	{r7}
 800631e:	b085      	sub	sp, #20
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
 8006324:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	781b      	ldrb	r3, [r3, #0]
 800632e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	785b      	ldrb	r3, [r3, #1]
 8006334:	2b01      	cmp	r3, #1
 8006336:	d128      	bne.n	800638a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	015a      	lsls	r2, r3, #5
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	4413      	add	r3, r2
 8006340:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	68ba      	ldr	r2, [r7, #8]
 8006348:	0151      	lsls	r1, r2, #5
 800634a:	68fa      	ldr	r2, [r7, #12]
 800634c:	440a      	add	r2, r1
 800634e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006352:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006356:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	791b      	ldrb	r3, [r3, #4]
 800635c:	2b03      	cmp	r3, #3
 800635e:	d003      	beq.n	8006368 <USB_EPClearStall+0x4c>
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	791b      	ldrb	r3, [r3, #4]
 8006364:	2b02      	cmp	r3, #2
 8006366:	d138      	bne.n	80063da <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	015a      	lsls	r2, r3, #5
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	4413      	add	r3, r2
 8006370:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	68ba      	ldr	r2, [r7, #8]
 8006378:	0151      	lsls	r1, r2, #5
 800637a:	68fa      	ldr	r2, [r7, #12]
 800637c:	440a      	add	r2, r1
 800637e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006382:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006386:	6013      	str	r3, [r2, #0]
 8006388:	e027      	b.n	80063da <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	015a      	lsls	r2, r3, #5
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	4413      	add	r3, r2
 8006392:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	68ba      	ldr	r2, [r7, #8]
 800639a:	0151      	lsls	r1, r2, #5
 800639c:	68fa      	ldr	r2, [r7, #12]
 800639e:	440a      	add	r2, r1
 80063a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063a4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80063a8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	791b      	ldrb	r3, [r3, #4]
 80063ae:	2b03      	cmp	r3, #3
 80063b0:	d003      	beq.n	80063ba <USB_EPClearStall+0x9e>
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	791b      	ldrb	r3, [r3, #4]
 80063b6:	2b02      	cmp	r3, #2
 80063b8:	d10f      	bne.n	80063da <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80063ba:	68bb      	ldr	r3, [r7, #8]
 80063bc:	015a      	lsls	r2, r3, #5
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	4413      	add	r3, r2
 80063c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	68ba      	ldr	r2, [r7, #8]
 80063ca:	0151      	lsls	r1, r2, #5
 80063cc:	68fa      	ldr	r2, [r7, #12]
 80063ce:	440a      	add	r2, r1
 80063d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063d8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80063da:	2300      	movs	r3, #0
}
 80063dc:	4618      	mov	r0, r3
 80063de:	3714      	adds	r7, #20
 80063e0:	46bd      	mov	sp, r7
 80063e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e6:	4770      	bx	lr

080063e8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80063e8:	b480      	push	{r7}
 80063ea:	b085      	sub	sp, #20
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
 80063f0:	460b      	mov	r3, r1
 80063f2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	68fa      	ldr	r2, [r7, #12]
 8006402:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006406:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800640a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006412:	681a      	ldr	r2, [r3, #0]
 8006414:	78fb      	ldrb	r3, [r7, #3]
 8006416:	011b      	lsls	r3, r3, #4
 8006418:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800641c:	68f9      	ldr	r1, [r7, #12]
 800641e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006422:	4313      	orrs	r3, r2
 8006424:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006426:	2300      	movs	r3, #0
}
 8006428:	4618      	mov	r0, r3
 800642a:	3714      	adds	r7, #20
 800642c:	46bd      	mov	sp, r7
 800642e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006432:	4770      	bx	lr

08006434 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006434:	b480      	push	{r7}
 8006436:	b085      	sub	sp, #20
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	68fa      	ldr	r2, [r7, #12]
 800644a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800644e:	f023 0303 	bic.w	r3, r3, #3
 8006452:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800645a:	685b      	ldr	r3, [r3, #4]
 800645c:	68fa      	ldr	r2, [r7, #12]
 800645e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006462:	f023 0302 	bic.w	r3, r3, #2
 8006466:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006468:	2300      	movs	r3, #0
}
 800646a:	4618      	mov	r0, r3
 800646c:	3714      	adds	r7, #20
 800646e:	46bd      	mov	sp, r7
 8006470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006474:	4770      	bx	lr

08006476 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006476:	b480      	push	{r7}
 8006478:	b085      	sub	sp, #20
 800647a:	af00      	add	r7, sp, #0
 800647c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	68fa      	ldr	r2, [r7, #12]
 800648c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006490:	f023 0303 	bic.w	r3, r3, #3
 8006494:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800649c:	685b      	ldr	r3, [r3, #4]
 800649e:	68fa      	ldr	r2, [r7, #12]
 80064a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80064a4:	f043 0302 	orr.w	r3, r3, #2
 80064a8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80064aa:	2300      	movs	r3, #0
}
 80064ac:	4618      	mov	r0, r3
 80064ae:	3714      	adds	r7, #20
 80064b0:	46bd      	mov	sp, r7
 80064b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b6:	4770      	bx	lr

080064b8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80064b8:	b480      	push	{r7}
 80064ba:	b085      	sub	sp, #20
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	695b      	ldr	r3, [r3, #20]
 80064c4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	699b      	ldr	r3, [r3, #24]
 80064ca:	68fa      	ldr	r2, [r7, #12]
 80064cc:	4013      	ands	r3, r2
 80064ce:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80064d0:	68fb      	ldr	r3, [r7, #12]
}
 80064d2:	4618      	mov	r0, r3
 80064d4:	3714      	adds	r7, #20
 80064d6:	46bd      	mov	sp, r7
 80064d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064dc:	4770      	bx	lr

080064de <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80064de:	b480      	push	{r7}
 80064e0:	b085      	sub	sp, #20
 80064e2:	af00      	add	r7, sp, #0
 80064e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064f0:	699b      	ldr	r3, [r3, #24]
 80064f2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064fa:	69db      	ldr	r3, [r3, #28]
 80064fc:	68ba      	ldr	r2, [r7, #8]
 80064fe:	4013      	ands	r3, r2
 8006500:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	0c1b      	lsrs	r3, r3, #16
}
 8006506:	4618      	mov	r0, r3
 8006508:	3714      	adds	r7, #20
 800650a:	46bd      	mov	sp, r7
 800650c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006510:	4770      	bx	lr

08006512 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006512:	b480      	push	{r7}
 8006514:	b085      	sub	sp, #20
 8006516:	af00      	add	r7, sp, #0
 8006518:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006524:	699b      	ldr	r3, [r3, #24]
 8006526:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800652e:	69db      	ldr	r3, [r3, #28]
 8006530:	68ba      	ldr	r2, [r7, #8]
 8006532:	4013      	ands	r3, r2
 8006534:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006536:	68bb      	ldr	r3, [r7, #8]
 8006538:	b29b      	uxth	r3, r3
}
 800653a:	4618      	mov	r0, r3
 800653c:	3714      	adds	r7, #20
 800653e:	46bd      	mov	sp, r7
 8006540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006544:	4770      	bx	lr

08006546 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006546:	b480      	push	{r7}
 8006548:	b085      	sub	sp, #20
 800654a:	af00      	add	r7, sp, #0
 800654c:	6078      	str	r0, [r7, #4]
 800654e:	460b      	mov	r3, r1
 8006550:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006556:	78fb      	ldrb	r3, [r7, #3]
 8006558:	015a      	lsls	r2, r3, #5
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	4413      	add	r3, r2
 800655e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006562:	689b      	ldr	r3, [r3, #8]
 8006564:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800656c:	695b      	ldr	r3, [r3, #20]
 800656e:	68ba      	ldr	r2, [r7, #8]
 8006570:	4013      	ands	r3, r2
 8006572:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006574:	68bb      	ldr	r3, [r7, #8]
}
 8006576:	4618      	mov	r0, r3
 8006578:	3714      	adds	r7, #20
 800657a:	46bd      	mov	sp, r7
 800657c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006580:	4770      	bx	lr

08006582 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006582:	b480      	push	{r7}
 8006584:	b087      	sub	sp, #28
 8006586:	af00      	add	r7, sp, #0
 8006588:	6078      	str	r0, [r7, #4]
 800658a:	460b      	mov	r3, r1
 800658c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006592:	697b      	ldr	r3, [r7, #20]
 8006594:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006598:	691b      	ldr	r3, [r3, #16]
 800659a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065a4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80065a6:	78fb      	ldrb	r3, [r7, #3]
 80065a8:	f003 030f 	and.w	r3, r3, #15
 80065ac:	68fa      	ldr	r2, [r7, #12]
 80065ae:	fa22 f303 	lsr.w	r3, r2, r3
 80065b2:	01db      	lsls	r3, r3, #7
 80065b4:	b2db      	uxtb	r3, r3
 80065b6:	693a      	ldr	r2, [r7, #16]
 80065b8:	4313      	orrs	r3, r2
 80065ba:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80065bc:	78fb      	ldrb	r3, [r7, #3]
 80065be:	015a      	lsls	r2, r3, #5
 80065c0:	697b      	ldr	r3, [r7, #20]
 80065c2:	4413      	add	r3, r2
 80065c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065c8:	689b      	ldr	r3, [r3, #8]
 80065ca:	693a      	ldr	r2, [r7, #16]
 80065cc:	4013      	ands	r3, r2
 80065ce:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80065d0:	68bb      	ldr	r3, [r7, #8]
}
 80065d2:	4618      	mov	r0, r3
 80065d4:	371c      	adds	r7, #28
 80065d6:	46bd      	mov	sp, r7
 80065d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065dc:	4770      	bx	lr

080065de <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80065de:	b480      	push	{r7}
 80065e0:	b083      	sub	sp, #12
 80065e2:	af00      	add	r7, sp, #0
 80065e4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	695b      	ldr	r3, [r3, #20]
 80065ea:	f003 0301 	and.w	r3, r3, #1
}
 80065ee:	4618      	mov	r0, r3
 80065f0:	370c      	adds	r7, #12
 80065f2:	46bd      	mov	sp, r7
 80065f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f8:	4770      	bx	lr

080065fa <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80065fa:	b480      	push	{r7}
 80065fc:	b085      	sub	sp, #20
 80065fe:	af00      	add	r7, sp, #0
 8006600:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	68fa      	ldr	r2, [r7, #12]
 8006610:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006614:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006618:	f023 0307 	bic.w	r3, r3, #7
 800661c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006624:	685b      	ldr	r3, [r3, #4]
 8006626:	68fa      	ldr	r2, [r7, #12]
 8006628:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800662c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006630:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006632:	2300      	movs	r3, #0
}
 8006634:	4618      	mov	r0, r3
 8006636:	3714      	adds	r7, #20
 8006638:	46bd      	mov	sp, r7
 800663a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663e:	4770      	bx	lr

08006640 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 8006640:	b480      	push	{r7}
 8006642:	b085      	sub	sp, #20
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
 8006648:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	333c      	adds	r3, #60	; 0x3c
 8006652:	3304      	adds	r3, #4
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	4a1c      	ldr	r2, [pc, #112]	; (80066cc <USB_EP0_OutStart+0x8c>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d90a      	bls.n	8006676 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800666c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006670:	d101      	bne.n	8006676 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 8006672:	2300      	movs	r3, #0
 8006674:	e024      	b.n	80066c0 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800667c:	461a      	mov	r2, r3
 800667e:	2300      	movs	r3, #0
 8006680:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006688:	691b      	ldr	r3, [r3, #16]
 800668a:	68fa      	ldr	r2, [r7, #12]
 800668c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006690:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006694:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800669c:	691b      	ldr	r3, [r3, #16]
 800669e:	68fa      	ldr	r2, [r7, #12]
 80066a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066a4:	f043 0318 	orr.w	r3, r3, #24
 80066a8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066b0:	691b      	ldr	r3, [r3, #16]
 80066b2:	68fa      	ldr	r2, [r7, #12]
 80066b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066b8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80066bc:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 80066be:	2300      	movs	r3, #0
}
 80066c0:	4618      	mov	r0, r3
 80066c2:	3714      	adds	r7, #20
 80066c4:	46bd      	mov	sp, r7
 80066c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ca:	4770      	bx	lr
 80066cc:	4f54300a 	.word	0x4f54300a

080066d0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80066d0:	b480      	push	{r7}
 80066d2:	b085      	sub	sp, #20
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80066d8:	2300      	movs	r3, #0
 80066da:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	3301      	adds	r3, #1
 80066e0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	4a13      	ldr	r2, [pc, #76]	; (8006734 <USB_CoreReset+0x64>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d901      	bls.n	80066ee <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80066ea:	2303      	movs	r3, #3
 80066ec:	e01b      	b.n	8006726 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	691b      	ldr	r3, [r3, #16]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	daf2      	bge.n	80066dc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80066f6:	2300      	movs	r3, #0
 80066f8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	691b      	ldr	r3, [r3, #16]
 80066fe:	f043 0201 	orr.w	r2, r3, #1
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	3301      	adds	r3, #1
 800670a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	4a09      	ldr	r2, [pc, #36]	; (8006734 <USB_CoreReset+0x64>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d901      	bls.n	8006718 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006714:	2303      	movs	r3, #3
 8006716:	e006      	b.n	8006726 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	691b      	ldr	r3, [r3, #16]
 800671c:	f003 0301 	and.w	r3, r3, #1
 8006720:	2b01      	cmp	r3, #1
 8006722:	d0f0      	beq.n	8006706 <USB_CoreReset+0x36>

  return HAL_OK;
 8006724:	2300      	movs	r3, #0
}
 8006726:	4618      	mov	r0, r3
 8006728:	3714      	adds	r7, #20
 800672a:	46bd      	mov	sp, r7
 800672c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006730:	4770      	bx	lr
 8006732:	bf00      	nop
 8006734:	00030d40 	.word	0x00030d40

08006738 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b084      	sub	sp, #16
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
 8006740:	460b      	mov	r3, r1
 8006742:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8006744:	2010      	movs	r0, #16
 8006746:	f005 f845 	bl	800b7d4 <USBD_static_malloc>
 800674a:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d109      	bne.n	8006766 <USBD_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	32b0      	adds	r2, #176	; 0xb0
 800675c:	2100      	movs	r1, #0
 800675e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006762:	2302      	movs	r3, #2
 8006764:	e048      	b.n	80067f8 <USBD_HID_Init+0xc0>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	32b0      	adds	r2, #176	; 0xb0
 8006770:	68f9      	ldr	r1, [r7, #12]
 8006772:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	32b0      	adds	r2, #176	; 0xb0
 8006780:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	7c1b      	ldrb	r3, [r3, #16]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d10d      	bne.n	80067ae <USBD_HID_Init+0x76>
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 8006792:	4b1b      	ldr	r3, [pc, #108]	; (8006800 <USBD_HID_Init+0xc8>)
 8006794:	781b      	ldrb	r3, [r3, #0]
 8006796:	f003 020f 	and.w	r2, r3, #15
 800679a:	6879      	ldr	r1, [r7, #4]
 800679c:	4613      	mov	r3, r2
 800679e:	009b      	lsls	r3, r3, #2
 80067a0:	4413      	add	r3, r2
 80067a2:	009b      	lsls	r3, r3, #2
 80067a4:	440b      	add	r3, r1
 80067a6:	3326      	adds	r3, #38	; 0x26
 80067a8:	2207      	movs	r2, #7
 80067aa:	801a      	strh	r2, [r3, #0]
 80067ac:	e00c      	b.n	80067c8 <USBD_HID_Init+0x90>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 80067ae:	4b14      	ldr	r3, [pc, #80]	; (8006800 <USBD_HID_Init+0xc8>)
 80067b0:	781b      	ldrb	r3, [r3, #0]
 80067b2:	f003 020f 	and.w	r2, r3, #15
 80067b6:	6879      	ldr	r1, [r7, #4]
 80067b8:	4613      	mov	r3, r2
 80067ba:	009b      	lsls	r3, r3, #2
 80067bc:	4413      	add	r3, r2
 80067be:	009b      	lsls	r3, r3, #2
 80067c0:	440b      	add	r3, r1
 80067c2:	3326      	adds	r3, #38	; 0x26
 80067c4:	220a      	movs	r2, #10
 80067c6:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 80067c8:	4b0d      	ldr	r3, [pc, #52]	; (8006800 <USBD_HID_Init+0xc8>)
 80067ca:	7819      	ldrb	r1, [r3, #0]
 80067cc:	2304      	movs	r3, #4
 80067ce:	2203      	movs	r2, #3
 80067d0:	6878      	ldr	r0, [r7, #4]
 80067d2:	f004 fdff 	bl	800b3d4 <USBD_LL_OpenEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 80067d6:	4b0a      	ldr	r3, [pc, #40]	; (8006800 <USBD_HID_Init+0xc8>)
 80067d8:	781b      	ldrb	r3, [r3, #0]
 80067da:	f003 020f 	and.w	r2, r3, #15
 80067de:	6879      	ldr	r1, [r7, #4]
 80067e0:	4613      	mov	r3, r2
 80067e2:	009b      	lsls	r3, r3, #2
 80067e4:	4413      	add	r3, r2
 80067e6:	009b      	lsls	r3, r3, #2
 80067e8:	440b      	add	r3, r1
 80067ea:	3324      	adds	r3, #36	; 0x24
 80067ec:	2201      	movs	r2, #1
 80067ee:	801a      	strh	r2, [r3, #0]

  hhid->state = USBD_HID_IDLE;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	2200      	movs	r2, #0
 80067f4:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 80067f6:	2300      	movs	r3, #0
}
 80067f8:	4618      	mov	r0, r3
 80067fa:	3710      	adds	r7, #16
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bd80      	pop	{r7, pc}
 8006800:	200000bf 	.word	0x200000bf

08006804 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b082      	sub	sp, #8
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
 800680c:	460b      	mov	r3, r1
 800680e:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 8006810:	4b1f      	ldr	r3, [pc, #124]	; (8006890 <USBD_HID_DeInit+0x8c>)
 8006812:	781b      	ldrb	r3, [r3, #0]
 8006814:	4619      	mov	r1, r3
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f004 fe1a 	bl	800b450 <USBD_LL_CloseEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 800681c:	4b1c      	ldr	r3, [pc, #112]	; (8006890 <USBD_HID_DeInit+0x8c>)
 800681e:	781b      	ldrb	r3, [r3, #0]
 8006820:	f003 020f 	and.w	r2, r3, #15
 8006824:	6879      	ldr	r1, [r7, #4]
 8006826:	4613      	mov	r3, r2
 8006828:	009b      	lsls	r3, r3, #2
 800682a:	4413      	add	r3, r2
 800682c:	009b      	lsls	r3, r3, #2
 800682e:	440b      	add	r3, r1
 8006830:	3324      	adds	r3, #36	; 0x24
 8006832:	2200      	movs	r2, #0
 8006834:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 8006836:	4b16      	ldr	r3, [pc, #88]	; (8006890 <USBD_HID_DeInit+0x8c>)
 8006838:	781b      	ldrb	r3, [r3, #0]
 800683a:	f003 020f 	and.w	r2, r3, #15
 800683e:	6879      	ldr	r1, [r7, #4]
 8006840:	4613      	mov	r3, r2
 8006842:	009b      	lsls	r3, r3, #2
 8006844:	4413      	add	r3, r2
 8006846:	009b      	lsls	r3, r3, #2
 8006848:	440b      	add	r3, r1
 800684a:	3326      	adds	r3, #38	; 0x26
 800684c:	2200      	movs	r2, #0
 800684e:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	32b0      	adds	r2, #176	; 0xb0
 800685a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d011      	beq.n	8006886 <USBD_HID_DeInit+0x82>
  {
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	32b0      	adds	r2, #176	; 0xb0
 800686c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006870:	4618      	mov	r0, r3
 8006872:	f004 ffbd 	bl	800b7f0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	32b0      	adds	r2, #176	; 0xb0
 8006880:	2100      	movs	r1, #0
 8006882:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)USBD_OK;
 8006886:	2300      	movs	r3, #0
}
 8006888:	4618      	mov	r0, r3
 800688a:	3708      	adds	r7, #8
 800688c:	46bd      	mov	sp, r7
 800688e:	bd80      	pop	{r7, pc}
 8006890:	200000bf 	.word	0x200000bf

08006894 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b086      	sub	sp, #24
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
 800689c:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	32b0      	adds	r2, #176	; 0xb0
 80068a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068ac:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 80068ae:	2300      	movs	r3, #0
 80068b0:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 80068b2:	2300      	movs	r3, #0
 80068b4:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d101      	bne.n	80068c0 <USBD_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 80068bc:	2303      	movs	r3, #3
 80068be:	e0e8      	b.n	8006a92 <USBD_HID_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	781b      	ldrb	r3, [r3, #0]
 80068c4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d046      	beq.n	800695a <USBD_HID_Setup+0xc6>
 80068cc:	2b20      	cmp	r3, #32
 80068ce:	f040 80d8 	bne.w	8006a82 <USBD_HID_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	785b      	ldrb	r3, [r3, #1]
 80068d6:	3b02      	subs	r3, #2
 80068d8:	2b09      	cmp	r3, #9
 80068da:	d836      	bhi.n	800694a <USBD_HID_Setup+0xb6>
 80068dc:	a201      	add	r2, pc, #4	; (adr r2, 80068e4 <USBD_HID_Setup+0x50>)
 80068de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068e2:	bf00      	nop
 80068e4:	0800693b 	.word	0x0800693b
 80068e8:	0800691b 	.word	0x0800691b
 80068ec:	0800694b 	.word	0x0800694b
 80068f0:	0800694b 	.word	0x0800694b
 80068f4:	0800694b 	.word	0x0800694b
 80068f8:	0800694b 	.word	0x0800694b
 80068fc:	0800694b 	.word	0x0800694b
 8006900:	0800694b 	.word	0x0800694b
 8006904:	08006929 	.word	0x08006929
 8006908:	0800690d 	.word	0x0800690d
      {
        case USBD_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	885b      	ldrh	r3, [r3, #2]
 8006910:	b2db      	uxtb	r3, r3
 8006912:	461a      	mov	r2, r3
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	601a      	str	r2, [r3, #0]
          break;
 8006918:	e01e      	b.n	8006958 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	2201      	movs	r2, #1
 800691e:	4619      	mov	r1, r3
 8006920:	6878      	ldr	r0, [r7, #4]
 8006922:	f001 fc05 	bl	8008130 <USBD_CtlSendData>
          break;
 8006926:	e017      	b.n	8006958 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	885b      	ldrh	r3, [r3, #2]
 800692c:	0a1b      	lsrs	r3, r3, #8
 800692e:	b29b      	uxth	r3, r3
 8006930:	b2db      	uxtb	r3, r3
 8006932:	461a      	mov	r2, r3
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	605a      	str	r2, [r3, #4]
          break;
 8006938:	e00e      	b.n	8006958 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	3304      	adds	r3, #4
 800693e:	2201      	movs	r2, #1
 8006940:	4619      	mov	r1, r3
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	f001 fbf4 	bl	8008130 <USBD_CtlSendData>
          break;
 8006948:	e006      	b.n	8006958 <USBD_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800694a:	6839      	ldr	r1, [r7, #0]
 800694c:	6878      	ldr	r0, [r7, #4]
 800694e:	f001 fb7e 	bl	800804e <USBD_CtlError>
          ret = USBD_FAIL;
 8006952:	2303      	movs	r3, #3
 8006954:	75fb      	strb	r3, [r7, #23]
          break;
 8006956:	bf00      	nop
      }
      break;
 8006958:	e09a      	b.n	8006a90 <USBD_HID_Setup+0x1fc>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	785b      	ldrb	r3, [r3, #1]
 800695e:	2b0b      	cmp	r3, #11
 8006960:	f200 8086 	bhi.w	8006a70 <USBD_HID_Setup+0x1dc>
 8006964:	a201      	add	r2, pc, #4	; (adr r2, 800696c <USBD_HID_Setup+0xd8>)
 8006966:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800696a:	bf00      	nop
 800696c:	0800699d 	.word	0x0800699d
 8006970:	08006a7f 	.word	0x08006a7f
 8006974:	08006a71 	.word	0x08006a71
 8006978:	08006a71 	.word	0x08006a71
 800697c:	08006a71 	.word	0x08006a71
 8006980:	08006a71 	.word	0x08006a71
 8006984:	080069c7 	.word	0x080069c7
 8006988:	08006a71 	.word	0x08006a71
 800698c:	08006a71 	.word	0x08006a71
 8006990:	08006a71 	.word	0x08006a71
 8006994:	08006a1f 	.word	0x08006a1f
 8006998:	08006a49 	.word	0x08006a49
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069a2:	b2db      	uxtb	r3, r3
 80069a4:	2b03      	cmp	r3, #3
 80069a6:	d107      	bne.n	80069b8 <USBD_HID_Setup+0x124>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80069a8:	f107 030a 	add.w	r3, r7, #10
 80069ac:	2202      	movs	r2, #2
 80069ae:	4619      	mov	r1, r3
 80069b0:	6878      	ldr	r0, [r7, #4]
 80069b2:	f001 fbbd 	bl	8008130 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80069b6:	e063      	b.n	8006a80 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 80069b8:	6839      	ldr	r1, [r7, #0]
 80069ba:	6878      	ldr	r0, [r7, #4]
 80069bc:	f001 fb47 	bl	800804e <USBD_CtlError>
            ret = USBD_FAIL;
 80069c0:	2303      	movs	r3, #3
 80069c2:	75fb      	strb	r3, [r7, #23]
          break;
 80069c4:	e05c      	b.n	8006a80 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	885b      	ldrh	r3, [r3, #2]
 80069ca:	0a1b      	lsrs	r3, r3, #8
 80069cc:	b29b      	uxth	r3, r3
 80069ce:	2b22      	cmp	r3, #34	; 0x22
 80069d0:	d108      	bne.n	80069e4 <USBD_HID_Setup+0x150>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	88db      	ldrh	r3, [r3, #6]
 80069d6:	2b3f      	cmp	r3, #63	; 0x3f
 80069d8:	bf28      	it	cs
 80069da:	233f      	movcs	r3, #63	; 0x3f
 80069dc:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 80069de:	4b2f      	ldr	r3, [pc, #188]	; (8006a9c <USBD_HID_Setup+0x208>)
 80069e0:	613b      	str	r3, [r7, #16]
 80069e2:	e015      	b.n	8006a10 <USBD_HID_Setup+0x17c>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	885b      	ldrh	r3, [r3, #2]
 80069e8:	0a1b      	lsrs	r3, r3, #8
 80069ea:	b29b      	uxth	r3, r3
 80069ec:	2b21      	cmp	r3, #33	; 0x21
 80069ee:	d108      	bne.n	8006a02 <USBD_HID_Setup+0x16e>
          {
            pbuf = USBD_HID_Desc;
 80069f0:	4b2b      	ldr	r3, [pc, #172]	; (8006aa0 <USBD_HID_Setup+0x20c>)
 80069f2:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	88db      	ldrh	r3, [r3, #6]
 80069f8:	2b09      	cmp	r3, #9
 80069fa:	bf28      	it	cs
 80069fc:	2309      	movcs	r3, #9
 80069fe:	82bb      	strh	r3, [r7, #20]
 8006a00:	e006      	b.n	8006a10 <USBD_HID_Setup+0x17c>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8006a02:	6839      	ldr	r1, [r7, #0]
 8006a04:	6878      	ldr	r0, [r7, #4]
 8006a06:	f001 fb22 	bl	800804e <USBD_CtlError>
            ret = USBD_FAIL;
 8006a0a:	2303      	movs	r3, #3
 8006a0c:	75fb      	strb	r3, [r7, #23]
            break;
 8006a0e:	e037      	b.n	8006a80 <USBD_HID_Setup+0x1ec>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8006a10:	8abb      	ldrh	r3, [r7, #20]
 8006a12:	461a      	mov	r2, r3
 8006a14:	6939      	ldr	r1, [r7, #16]
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f001 fb8a 	bl	8008130 <USBD_CtlSendData>
          break;
 8006a1c:	e030      	b.n	8006a80 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a24:	b2db      	uxtb	r3, r3
 8006a26:	2b03      	cmp	r3, #3
 8006a28:	d107      	bne.n	8006a3a <USBD_HID_Setup+0x1a6>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	3308      	adds	r3, #8
 8006a2e:	2201      	movs	r2, #1
 8006a30:	4619      	mov	r1, r3
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f001 fb7c 	bl	8008130 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006a38:	e022      	b.n	8006a80 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8006a3a:	6839      	ldr	r1, [r7, #0]
 8006a3c:	6878      	ldr	r0, [r7, #4]
 8006a3e:	f001 fb06 	bl	800804e <USBD_CtlError>
            ret = USBD_FAIL;
 8006a42:	2303      	movs	r3, #3
 8006a44:	75fb      	strb	r3, [r7, #23]
          break;
 8006a46:	e01b      	b.n	8006a80 <USBD_HID_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a4e:	b2db      	uxtb	r3, r3
 8006a50:	2b03      	cmp	r3, #3
 8006a52:	d106      	bne.n	8006a62 <USBD_HID_Setup+0x1ce>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	885b      	ldrh	r3, [r3, #2]
 8006a58:	b2db      	uxtb	r3, r3
 8006a5a:	461a      	mov	r2, r3
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006a60:	e00e      	b.n	8006a80 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8006a62:	6839      	ldr	r1, [r7, #0]
 8006a64:	6878      	ldr	r0, [r7, #4]
 8006a66:	f001 faf2 	bl	800804e <USBD_CtlError>
            ret = USBD_FAIL;
 8006a6a:	2303      	movs	r3, #3
 8006a6c:	75fb      	strb	r3, [r7, #23]
          break;
 8006a6e:	e007      	b.n	8006a80 <USBD_HID_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006a70:	6839      	ldr	r1, [r7, #0]
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	f001 faeb 	bl	800804e <USBD_CtlError>
          ret = USBD_FAIL;
 8006a78:	2303      	movs	r3, #3
 8006a7a:	75fb      	strb	r3, [r7, #23]
          break;
 8006a7c:	e000      	b.n	8006a80 <USBD_HID_Setup+0x1ec>
          break;
 8006a7e:	bf00      	nop
      }
      break;
 8006a80:	e006      	b.n	8006a90 <USBD_HID_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 8006a82:	6839      	ldr	r1, [r7, #0]
 8006a84:	6878      	ldr	r0, [r7, #4]
 8006a86:	f001 fae2 	bl	800804e <USBD_CtlError>
      ret = USBD_FAIL;
 8006a8a:	2303      	movs	r3, #3
 8006a8c:	75fb      	strb	r3, [r7, #23]
      break;
 8006a8e:	bf00      	nop
  }

  return (uint8_t)ret;
 8006a90:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a92:	4618      	mov	r0, r3
 8006a94:	3718      	adds	r7, #24
 8006a96:	46bd      	mov	sp, r7
 8006a98:	bd80      	pop	{r7, pc}
 8006a9a:	bf00      	nop
 8006a9c:	20000080 	.word	0x20000080
 8006aa0:	20000068 	.word	0x20000068

08006aa4 <USBD_HID_SendReport>:
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len, uint8_t ClassId)
{
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b086      	sub	sp, #24
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	60f8      	str	r0, [r7, #12]
 8006aac:	60b9      	str	r1, [r7, #8]
 8006aae:	4613      	mov	r3, r2
 8006ab0:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	32b0      	adds	r2, #176	; 0xb0
 8006abc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ac0:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hhid == NULL)
 8006ac2:	697b      	ldr	r3, [r7, #20]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d101      	bne.n	8006acc <USBD_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8006ac8:	2303      	movs	r3, #3
 8006aca:	e014      	b.n	8006af6 <USBD_HID_SendReport+0x52>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, ClassId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ad2:	b2db      	uxtb	r3, r3
 8006ad4:	2b03      	cmp	r3, #3
 8006ad6:	d10d      	bne.n	8006af4 <USBD_HID_SendReport+0x50>
  {
    if (hhid->state == USBD_HID_IDLE)
 8006ad8:	697b      	ldr	r3, [r7, #20]
 8006ada:	7b1b      	ldrb	r3, [r3, #12]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d109      	bne.n	8006af4 <USBD_HID_SendReport+0x50>
    {
      hhid->state = USBD_HID_BUSY;
 8006ae0:	697b      	ldr	r3, [r7, #20]
 8006ae2:	2201      	movs	r2, #1
 8006ae4:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HIDInEpAdd, report, len);
 8006ae6:	4b06      	ldr	r3, [pc, #24]	; (8006b00 <USBD_HID_SendReport+0x5c>)
 8006ae8:	7819      	ldrb	r1, [r3, #0]
 8006aea:	88fb      	ldrh	r3, [r7, #6]
 8006aec:	68ba      	ldr	r2, [r7, #8]
 8006aee:	68f8      	ldr	r0, [r7, #12]
 8006af0:	f004 fdb2 	bl	800b658 <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 8006af4:	2300      	movs	r3, #0
}
 8006af6:	4618      	mov	r0, r3
 8006af8:	3718      	adds	r7, #24
 8006afa:	46bd      	mov	sp, r7
 8006afc:	bd80      	pop	{r7, pc}
 8006afe:	bf00      	nop
 8006b00:	200000bf 	.word	0x200000bf

08006b04 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b084      	sub	sp, #16
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8006b0c:	2181      	movs	r1, #129	; 0x81
 8006b0e:	4809      	ldr	r0, [pc, #36]	; (8006b34 <USBD_HID_GetFSCfgDesc+0x30>)
 8006b10:	f000 fc3b 	bl	800738a <USBD_GetEpDesc>
 8006b14:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d002      	beq.n	8006b22 <USBD_HID_GetFSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	220a      	movs	r2, #10
 8006b20:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2222      	movs	r2, #34	; 0x22
 8006b26:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8006b28:	4b02      	ldr	r3, [pc, #8]	; (8006b34 <USBD_HID_GetFSCfgDesc+0x30>)
}
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	3710      	adds	r7, #16
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	bd80      	pop	{r7, pc}
 8006b32:	bf00      	nop
 8006b34:	20000044 	.word	0x20000044

08006b38 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b084      	sub	sp, #16
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8006b40:	2181      	movs	r1, #129	; 0x81
 8006b42:	4809      	ldr	r0, [pc, #36]	; (8006b68 <USBD_HID_GetHSCfgDesc+0x30>)
 8006b44:	f000 fc21 	bl	800738a <USBD_GetEpDesc>
 8006b48:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d002      	beq.n	8006b56 <USBD_HID_GetHSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_HS_BINTERVAL;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	2207      	movs	r2, #7
 8006b54:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2222      	movs	r2, #34	; 0x22
 8006b5a:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8006b5c:	4b02      	ldr	r3, [pc, #8]	; (8006b68 <USBD_HID_GetHSCfgDesc+0x30>)
}
 8006b5e:	4618      	mov	r0, r3
 8006b60:	3710      	adds	r7, #16
 8006b62:	46bd      	mov	sp, r7
 8006b64:	bd80      	pop	{r7, pc}
 8006b66:	bf00      	nop
 8006b68:	20000044 	.word	0x20000044

08006b6c <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b084      	sub	sp, #16
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8006b74:	2181      	movs	r1, #129	; 0x81
 8006b76:	4809      	ldr	r0, [pc, #36]	; (8006b9c <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
 8006b78:	f000 fc07 	bl	800738a <USBD_GetEpDesc>
 8006b7c:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d002      	beq.n	8006b8a <USBD_HID_GetOtherSpeedCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	220a      	movs	r2, #10
 8006b88:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2222      	movs	r2, #34	; 0x22
 8006b8e:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8006b90:	4b02      	ldr	r3, [pc, #8]	; (8006b9c <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
}
 8006b92:	4618      	mov	r0, r3
 8006b94:	3710      	adds	r7, #16
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bd80      	pop	{r7, pc}
 8006b9a:	bf00      	nop
 8006b9c:	20000044 	.word	0x20000044

08006ba0 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	b083      	sub	sp, #12
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
 8006ba8:	460b      	mov	r3, r1
 8006baa:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = USBD_HID_IDLE;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	32b0      	adds	r2, #176	; 0xb0
 8006bb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8006bbe:	2300      	movs	r3, #0
}
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	370c      	adds	r7, #12
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bca:	4770      	bx	lr

08006bcc <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8006bcc:	b480      	push	{r7}
 8006bce:	b083      	sub	sp, #12
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	220a      	movs	r2, #10
 8006bd8:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 8006bda:	4b03      	ldr	r3, [pc, #12]	; (8006be8 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8006bdc:	4618      	mov	r0, r3
 8006bde:	370c      	adds	r7, #12
 8006be0:	46bd      	mov	sp, r7
 8006be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be6:	4770      	bx	lr
 8006be8:	20000074 	.word	0x20000074

08006bec <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b086      	sub	sp, #24
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	60f8      	str	r0, [r7, #12]
 8006bf4:	60b9      	str	r1, [r7, #8]
 8006bf6:	4613      	mov	r3, r2
 8006bf8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d101      	bne.n	8006c04 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006c00:	2303      	movs	r3, #3
 8006c02:	e01f      	b.n	8006c44 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	2200      	movs	r2, #0
 8006c08:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	2200      	movs	r2, #0
 8006c10:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	2200      	movs	r2, #0
 8006c18:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d003      	beq.n	8006c2a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	68ba      	ldr	r2, [r7, #8]
 8006c26:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	2201      	movs	r2, #1
 8006c2e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	79fa      	ldrb	r2, [r7, #7]
 8006c36:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006c38:	68f8      	ldr	r0, [r7, #12]
 8006c3a:	f004 fb4d 	bl	800b2d8 <USBD_LL_Init>
 8006c3e:	4603      	mov	r3, r0
 8006c40:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006c42:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c44:	4618      	mov	r0, r3
 8006c46:	3718      	adds	r7, #24
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	bd80      	pop	{r7, pc}

08006c4c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b084      	sub	sp, #16
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
 8006c54:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006c56:	2300      	movs	r3, #0
 8006c58:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d101      	bne.n	8006c64 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006c60:	2303      	movs	r3, #3
 8006c62:	e025      	b.n	8006cb0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	683a      	ldr	r2, [r7, #0]
 8006c68:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	32ae      	adds	r2, #174	; 0xae
 8006c76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d00f      	beq.n	8006ca0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	32ae      	adds	r2, #174	; 0xae
 8006c8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c90:	f107 020e 	add.w	r2, r7, #14
 8006c94:	4610      	mov	r0, r2
 8006c96:	4798      	blx	r3
 8006c98:	4602      	mov	r2, r0
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8006ca6:	1c5a      	adds	r2, r3, #1
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8006cae:	2300      	movs	r3, #0
}
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	3710      	adds	r7, #16
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	bd80      	pop	{r7, pc}

08006cb8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b082      	sub	sp, #8
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006cc0:	6878      	ldr	r0, [r7, #4]
 8006cc2:	f004 fb55 	bl	800b370 <USBD_LL_Start>
 8006cc6:	4603      	mov	r3, r0
}
 8006cc8:	4618      	mov	r0, r3
 8006cca:	3708      	adds	r7, #8
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	bd80      	pop	{r7, pc}

08006cd0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006cd0:	b480      	push	{r7}
 8006cd2:	b083      	sub	sp, #12
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006cd8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006cda:	4618      	mov	r0, r3
 8006cdc:	370c      	adds	r7, #12
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce4:	4770      	bx	lr

08006ce6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006ce6:	b580      	push	{r7, lr}
 8006ce8:	b084      	sub	sp, #16
 8006cea:	af00      	add	r7, sp, #0
 8006cec:	6078      	str	r0, [r7, #4]
 8006cee:	460b      	mov	r3, r1
 8006cf0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d009      	beq.n	8006d14 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	78fa      	ldrb	r2, [r7, #3]
 8006d0a:	4611      	mov	r1, r2
 8006d0c:	6878      	ldr	r0, [r7, #4]
 8006d0e:	4798      	blx	r3
 8006d10:	4603      	mov	r3, r0
 8006d12:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006d14:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d16:	4618      	mov	r0, r3
 8006d18:	3710      	adds	r7, #16
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	bd80      	pop	{r7, pc}

08006d1e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006d1e:	b580      	push	{r7, lr}
 8006d20:	b084      	sub	sp, #16
 8006d22:	af00      	add	r7, sp, #0
 8006d24:	6078      	str	r0, [r7, #4]
 8006d26:	460b      	mov	r3, r1
 8006d28:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d34:	685b      	ldr	r3, [r3, #4]
 8006d36:	78fa      	ldrb	r2, [r7, #3]
 8006d38:	4611      	mov	r1, r2
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	4798      	blx	r3
 8006d3e:	4603      	mov	r3, r0
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d001      	beq.n	8006d48 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006d44:	2303      	movs	r3, #3
 8006d46:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006d48:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	3710      	adds	r7, #16
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	bd80      	pop	{r7, pc}

08006d52 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006d52:	b580      	push	{r7, lr}
 8006d54:	b084      	sub	sp, #16
 8006d56:	af00      	add	r7, sp, #0
 8006d58:	6078      	str	r0, [r7, #4]
 8006d5a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006d62:	6839      	ldr	r1, [r7, #0]
 8006d64:	4618      	mov	r0, r3
 8006d66:	f001 f938 	bl	8007fda <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2201      	movs	r2, #1
 8006d6e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006d78:	461a      	mov	r2, r3
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006d86:	f003 031f 	and.w	r3, r3, #31
 8006d8a:	2b02      	cmp	r3, #2
 8006d8c:	d01a      	beq.n	8006dc4 <USBD_LL_SetupStage+0x72>
 8006d8e:	2b02      	cmp	r3, #2
 8006d90:	d822      	bhi.n	8006dd8 <USBD_LL_SetupStage+0x86>
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d002      	beq.n	8006d9c <USBD_LL_SetupStage+0x4a>
 8006d96:	2b01      	cmp	r3, #1
 8006d98:	d00a      	beq.n	8006db0 <USBD_LL_SetupStage+0x5e>
 8006d9a:	e01d      	b.n	8006dd8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006da2:	4619      	mov	r1, r3
 8006da4:	6878      	ldr	r0, [r7, #4]
 8006da6:	f000 fb65 	bl	8007474 <USBD_StdDevReq>
 8006daa:	4603      	mov	r3, r0
 8006dac:	73fb      	strb	r3, [r7, #15]
      break;
 8006dae:	e020      	b.n	8006df2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006db6:	4619      	mov	r1, r3
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	f000 fbcd 	bl	8007558 <USBD_StdItfReq>
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	73fb      	strb	r3, [r7, #15]
      break;
 8006dc2:	e016      	b.n	8006df2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006dca:	4619      	mov	r1, r3
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	f000 fc2f 	bl	8007630 <USBD_StdEPReq>
 8006dd2:	4603      	mov	r3, r0
 8006dd4:	73fb      	strb	r3, [r7, #15]
      break;
 8006dd6:	e00c      	b.n	8006df2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006dde:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006de2:	b2db      	uxtb	r3, r3
 8006de4:	4619      	mov	r1, r3
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	f004 fb68 	bl	800b4bc <USBD_LL_StallEP>
 8006dec:	4603      	mov	r3, r0
 8006dee:	73fb      	strb	r3, [r7, #15]
      break;
 8006df0:	bf00      	nop
  }

  return ret;
 8006df2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006df4:	4618      	mov	r0, r3
 8006df6:	3710      	adds	r7, #16
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	bd80      	pop	{r7, pc}

08006dfc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b086      	sub	sp, #24
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	60f8      	str	r0, [r7, #12]
 8006e04:	460b      	mov	r3, r1
 8006e06:	607a      	str	r2, [r7, #4]
 8006e08:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006e0e:	7afb      	ldrb	r3, [r7, #11]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d16e      	bne.n	8006ef2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006e1a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006e22:	2b03      	cmp	r3, #3
 8006e24:	f040 8098 	bne.w	8006f58 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006e28:	693b      	ldr	r3, [r7, #16]
 8006e2a:	689a      	ldr	r2, [r3, #8]
 8006e2c:	693b      	ldr	r3, [r7, #16]
 8006e2e:	68db      	ldr	r3, [r3, #12]
 8006e30:	429a      	cmp	r2, r3
 8006e32:	d913      	bls.n	8006e5c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006e34:	693b      	ldr	r3, [r7, #16]
 8006e36:	689a      	ldr	r2, [r3, #8]
 8006e38:	693b      	ldr	r3, [r7, #16]
 8006e3a:	68db      	ldr	r3, [r3, #12]
 8006e3c:	1ad2      	subs	r2, r2, r3
 8006e3e:	693b      	ldr	r3, [r7, #16]
 8006e40:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006e42:	693b      	ldr	r3, [r7, #16]
 8006e44:	68da      	ldr	r2, [r3, #12]
 8006e46:	693b      	ldr	r3, [r7, #16]
 8006e48:	689b      	ldr	r3, [r3, #8]
 8006e4a:	4293      	cmp	r3, r2
 8006e4c:	bf28      	it	cs
 8006e4e:	4613      	movcs	r3, r2
 8006e50:	461a      	mov	r2, r3
 8006e52:	6879      	ldr	r1, [r7, #4]
 8006e54:	68f8      	ldr	r0, [r7, #12]
 8006e56:	f001 f997 	bl	8008188 <USBD_CtlContinueRx>
 8006e5a:	e07d      	b.n	8006f58 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006e62:	f003 031f 	and.w	r3, r3, #31
 8006e66:	2b02      	cmp	r3, #2
 8006e68:	d014      	beq.n	8006e94 <USBD_LL_DataOutStage+0x98>
 8006e6a:	2b02      	cmp	r3, #2
 8006e6c:	d81d      	bhi.n	8006eaa <USBD_LL_DataOutStage+0xae>
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d002      	beq.n	8006e78 <USBD_LL_DataOutStage+0x7c>
 8006e72:	2b01      	cmp	r3, #1
 8006e74:	d003      	beq.n	8006e7e <USBD_LL_DataOutStage+0x82>
 8006e76:	e018      	b.n	8006eaa <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006e78:	2300      	movs	r3, #0
 8006e7a:	75bb      	strb	r3, [r7, #22]
            break;
 8006e7c:	e018      	b.n	8006eb0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006e84:	b2db      	uxtb	r3, r3
 8006e86:	4619      	mov	r1, r3
 8006e88:	68f8      	ldr	r0, [r7, #12]
 8006e8a:	f000 fa64 	bl	8007356 <USBD_CoreFindIF>
 8006e8e:	4603      	mov	r3, r0
 8006e90:	75bb      	strb	r3, [r7, #22]
            break;
 8006e92:	e00d      	b.n	8006eb0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006e9a:	b2db      	uxtb	r3, r3
 8006e9c:	4619      	mov	r1, r3
 8006e9e:	68f8      	ldr	r0, [r7, #12]
 8006ea0:	f000 fa66 	bl	8007370 <USBD_CoreFindEP>
 8006ea4:	4603      	mov	r3, r0
 8006ea6:	75bb      	strb	r3, [r7, #22]
            break;
 8006ea8:	e002      	b.n	8006eb0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006eaa:	2300      	movs	r3, #0
 8006eac:	75bb      	strb	r3, [r7, #22]
            break;
 8006eae:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006eb0:	7dbb      	ldrb	r3, [r7, #22]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d119      	bne.n	8006eea <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ebc:	b2db      	uxtb	r3, r3
 8006ebe:	2b03      	cmp	r3, #3
 8006ec0:	d113      	bne.n	8006eea <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006ec2:	7dba      	ldrb	r2, [r7, #22]
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	32ae      	adds	r2, #174	; 0xae
 8006ec8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ecc:	691b      	ldr	r3, [r3, #16]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d00b      	beq.n	8006eea <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006ed2:	7dba      	ldrb	r2, [r7, #22]
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006eda:	7dba      	ldrb	r2, [r7, #22]
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	32ae      	adds	r2, #174	; 0xae
 8006ee0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ee4:	691b      	ldr	r3, [r3, #16]
 8006ee6:	68f8      	ldr	r0, [r7, #12]
 8006ee8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006eea:	68f8      	ldr	r0, [r7, #12]
 8006eec:	f001 f95d 	bl	80081aa <USBD_CtlSendStatus>
 8006ef0:	e032      	b.n	8006f58 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006ef2:	7afb      	ldrb	r3, [r7, #11]
 8006ef4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ef8:	b2db      	uxtb	r3, r3
 8006efa:	4619      	mov	r1, r3
 8006efc:	68f8      	ldr	r0, [r7, #12]
 8006efe:	f000 fa37 	bl	8007370 <USBD_CoreFindEP>
 8006f02:	4603      	mov	r3, r0
 8006f04:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006f06:	7dbb      	ldrb	r3, [r7, #22]
 8006f08:	2bff      	cmp	r3, #255	; 0xff
 8006f0a:	d025      	beq.n	8006f58 <USBD_LL_DataOutStage+0x15c>
 8006f0c:	7dbb      	ldrb	r3, [r7, #22]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d122      	bne.n	8006f58 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f18:	b2db      	uxtb	r3, r3
 8006f1a:	2b03      	cmp	r3, #3
 8006f1c:	d117      	bne.n	8006f4e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006f1e:	7dba      	ldrb	r2, [r7, #22]
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	32ae      	adds	r2, #174	; 0xae
 8006f24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f28:	699b      	ldr	r3, [r3, #24]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d00f      	beq.n	8006f4e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006f2e:	7dba      	ldrb	r2, [r7, #22]
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006f36:	7dba      	ldrb	r2, [r7, #22]
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	32ae      	adds	r2, #174	; 0xae
 8006f3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f40:	699b      	ldr	r3, [r3, #24]
 8006f42:	7afa      	ldrb	r2, [r7, #11]
 8006f44:	4611      	mov	r1, r2
 8006f46:	68f8      	ldr	r0, [r7, #12]
 8006f48:	4798      	blx	r3
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006f4e:	7dfb      	ldrb	r3, [r7, #23]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d001      	beq.n	8006f58 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006f54:	7dfb      	ldrb	r3, [r7, #23]
 8006f56:	e000      	b.n	8006f5a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006f58:	2300      	movs	r3, #0
}
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	3718      	adds	r7, #24
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	bd80      	pop	{r7, pc}

08006f62 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006f62:	b580      	push	{r7, lr}
 8006f64:	b086      	sub	sp, #24
 8006f66:	af00      	add	r7, sp, #0
 8006f68:	60f8      	str	r0, [r7, #12]
 8006f6a:	460b      	mov	r3, r1
 8006f6c:	607a      	str	r2, [r7, #4]
 8006f6e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006f70:	7afb      	ldrb	r3, [r7, #11]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d16f      	bne.n	8007056 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	3314      	adds	r3, #20
 8006f7a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006f82:	2b02      	cmp	r3, #2
 8006f84:	d15a      	bne.n	800703c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006f86:	693b      	ldr	r3, [r7, #16]
 8006f88:	689a      	ldr	r2, [r3, #8]
 8006f8a:	693b      	ldr	r3, [r7, #16]
 8006f8c:	68db      	ldr	r3, [r3, #12]
 8006f8e:	429a      	cmp	r2, r3
 8006f90:	d914      	bls.n	8006fbc <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006f92:	693b      	ldr	r3, [r7, #16]
 8006f94:	689a      	ldr	r2, [r3, #8]
 8006f96:	693b      	ldr	r3, [r7, #16]
 8006f98:	68db      	ldr	r3, [r3, #12]
 8006f9a:	1ad2      	subs	r2, r2, r3
 8006f9c:	693b      	ldr	r3, [r7, #16]
 8006f9e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006fa0:	693b      	ldr	r3, [r7, #16]
 8006fa2:	689b      	ldr	r3, [r3, #8]
 8006fa4:	461a      	mov	r2, r3
 8006fa6:	6879      	ldr	r1, [r7, #4]
 8006fa8:	68f8      	ldr	r0, [r7, #12]
 8006faa:	f001 f8dc 	bl	8008166 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006fae:	2300      	movs	r3, #0
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	2100      	movs	r1, #0
 8006fb4:	68f8      	ldr	r0, [r7, #12]
 8006fb6:	f004 fb87 	bl	800b6c8 <USBD_LL_PrepareReceive>
 8006fba:	e03f      	b.n	800703c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006fbc:	693b      	ldr	r3, [r7, #16]
 8006fbe:	68da      	ldr	r2, [r3, #12]
 8006fc0:	693b      	ldr	r3, [r7, #16]
 8006fc2:	689b      	ldr	r3, [r3, #8]
 8006fc4:	429a      	cmp	r2, r3
 8006fc6:	d11c      	bne.n	8007002 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006fc8:	693b      	ldr	r3, [r7, #16]
 8006fca:	685a      	ldr	r2, [r3, #4]
 8006fcc:	693b      	ldr	r3, [r7, #16]
 8006fce:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006fd0:	429a      	cmp	r2, r3
 8006fd2:	d316      	bcc.n	8007002 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006fd4:	693b      	ldr	r3, [r7, #16]
 8006fd6:	685a      	ldr	r2, [r3, #4]
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006fde:	429a      	cmp	r2, r3
 8006fe0:	d20f      	bcs.n	8007002 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	2100      	movs	r1, #0
 8006fe6:	68f8      	ldr	r0, [r7, #12]
 8006fe8:	f001 f8bd 	bl	8008166 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	2200      	movs	r2, #0
 8006ff0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	2100      	movs	r1, #0
 8006ffa:	68f8      	ldr	r0, [r7, #12]
 8006ffc:	f004 fb64 	bl	800b6c8 <USBD_LL_PrepareReceive>
 8007000:	e01c      	b.n	800703c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007008:	b2db      	uxtb	r3, r3
 800700a:	2b03      	cmp	r3, #3
 800700c:	d10f      	bne.n	800702e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007014:	68db      	ldr	r3, [r3, #12]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d009      	beq.n	800702e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	2200      	movs	r2, #0
 800701e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007028:	68db      	ldr	r3, [r3, #12]
 800702a:	68f8      	ldr	r0, [r7, #12]
 800702c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800702e:	2180      	movs	r1, #128	; 0x80
 8007030:	68f8      	ldr	r0, [r7, #12]
 8007032:	f004 fa43 	bl	800b4bc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007036:	68f8      	ldr	r0, [r7, #12]
 8007038:	f001 f8ca 	bl	80081d0 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007042:	2b00      	cmp	r3, #0
 8007044:	d03a      	beq.n	80070bc <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007046:	68f8      	ldr	r0, [r7, #12]
 8007048:	f7ff fe42 	bl	8006cd0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	2200      	movs	r2, #0
 8007050:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007054:	e032      	b.n	80070bc <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007056:	7afb      	ldrb	r3, [r7, #11]
 8007058:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800705c:	b2db      	uxtb	r3, r3
 800705e:	4619      	mov	r1, r3
 8007060:	68f8      	ldr	r0, [r7, #12]
 8007062:	f000 f985 	bl	8007370 <USBD_CoreFindEP>
 8007066:	4603      	mov	r3, r0
 8007068:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800706a:	7dfb      	ldrb	r3, [r7, #23]
 800706c:	2bff      	cmp	r3, #255	; 0xff
 800706e:	d025      	beq.n	80070bc <USBD_LL_DataInStage+0x15a>
 8007070:	7dfb      	ldrb	r3, [r7, #23]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d122      	bne.n	80070bc <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800707c:	b2db      	uxtb	r3, r3
 800707e:	2b03      	cmp	r3, #3
 8007080:	d11c      	bne.n	80070bc <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007082:	7dfa      	ldrb	r2, [r7, #23]
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	32ae      	adds	r2, #174	; 0xae
 8007088:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800708c:	695b      	ldr	r3, [r3, #20]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d014      	beq.n	80070bc <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007092:	7dfa      	ldrb	r2, [r7, #23]
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800709a:	7dfa      	ldrb	r2, [r7, #23]
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	32ae      	adds	r2, #174	; 0xae
 80070a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070a4:	695b      	ldr	r3, [r3, #20]
 80070a6:	7afa      	ldrb	r2, [r7, #11]
 80070a8:	4611      	mov	r1, r2
 80070aa:	68f8      	ldr	r0, [r7, #12]
 80070ac:	4798      	blx	r3
 80070ae:	4603      	mov	r3, r0
 80070b0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80070b2:	7dbb      	ldrb	r3, [r7, #22]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d001      	beq.n	80070bc <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80070b8:	7dbb      	ldrb	r3, [r7, #22]
 80070ba:	e000      	b.n	80070be <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80070bc:	2300      	movs	r3, #0
}
 80070be:	4618      	mov	r0, r3
 80070c0:	3718      	adds	r7, #24
 80070c2:	46bd      	mov	sp, r7
 80070c4:	bd80      	pop	{r7, pc}

080070c6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80070c6:	b580      	push	{r7, lr}
 80070c8:	b084      	sub	sp, #16
 80070ca:	af00      	add	r7, sp, #0
 80070cc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80070ce:	2300      	movs	r3, #0
 80070d0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2201      	movs	r2, #1
 80070d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2200      	movs	r2, #0
 80070de:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2200      	movs	r2, #0
 80070e6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2200      	movs	r2, #0
 80070ec:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2200      	movs	r2, #0
 80070f4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d014      	beq.n	800712c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007108:	685b      	ldr	r3, [r3, #4]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d00e      	beq.n	800712c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007114:	685b      	ldr	r3, [r3, #4]
 8007116:	687a      	ldr	r2, [r7, #4]
 8007118:	6852      	ldr	r2, [r2, #4]
 800711a:	b2d2      	uxtb	r2, r2
 800711c:	4611      	mov	r1, r2
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	4798      	blx	r3
 8007122:	4603      	mov	r3, r0
 8007124:	2b00      	cmp	r3, #0
 8007126:	d001      	beq.n	800712c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007128:	2303      	movs	r3, #3
 800712a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800712c:	2340      	movs	r3, #64	; 0x40
 800712e:	2200      	movs	r2, #0
 8007130:	2100      	movs	r1, #0
 8007132:	6878      	ldr	r0, [r7, #4]
 8007134:	f004 f94e 	bl	800b3d4 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2201      	movs	r2, #1
 800713c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2240      	movs	r2, #64	; 0x40
 8007144:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007148:	2340      	movs	r3, #64	; 0x40
 800714a:	2200      	movs	r2, #0
 800714c:	2180      	movs	r1, #128	; 0x80
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f004 f940 	bl	800b3d4 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2201      	movs	r2, #1
 8007158:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2240      	movs	r2, #64	; 0x40
 800715e:	621a      	str	r2, [r3, #32]

  return ret;
 8007160:	7bfb      	ldrb	r3, [r7, #15]
}
 8007162:	4618      	mov	r0, r3
 8007164:	3710      	adds	r7, #16
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}

0800716a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800716a:	b480      	push	{r7}
 800716c:	b083      	sub	sp, #12
 800716e:	af00      	add	r7, sp, #0
 8007170:	6078      	str	r0, [r7, #4]
 8007172:	460b      	mov	r3, r1
 8007174:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	78fa      	ldrb	r2, [r7, #3]
 800717a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800717c:	2300      	movs	r3, #0
}
 800717e:	4618      	mov	r0, r3
 8007180:	370c      	adds	r7, #12
 8007182:	46bd      	mov	sp, r7
 8007184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007188:	4770      	bx	lr

0800718a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800718a:	b480      	push	{r7}
 800718c:	b083      	sub	sp, #12
 800718e:	af00      	add	r7, sp, #0
 8007190:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007198:	b2db      	uxtb	r3, r3
 800719a:	2b04      	cmp	r3, #4
 800719c:	d006      	beq.n	80071ac <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071a4:	b2da      	uxtb	r2, r3
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2204      	movs	r2, #4
 80071b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80071b4:	2300      	movs	r3, #0
}
 80071b6:	4618      	mov	r0, r3
 80071b8:	370c      	adds	r7, #12
 80071ba:	46bd      	mov	sp, r7
 80071bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c0:	4770      	bx	lr

080071c2 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80071c2:	b480      	push	{r7}
 80071c4:	b083      	sub	sp, #12
 80071c6:	af00      	add	r7, sp, #0
 80071c8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071d0:	b2db      	uxtb	r3, r3
 80071d2:	2b04      	cmp	r3, #4
 80071d4:	d106      	bne.n	80071e4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80071dc:	b2da      	uxtb	r2, r3
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80071e4:	2300      	movs	r3, #0
}
 80071e6:	4618      	mov	r0, r3
 80071e8:	370c      	adds	r7, #12
 80071ea:	46bd      	mov	sp, r7
 80071ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f0:	4770      	bx	lr

080071f2 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80071f2:	b580      	push	{r7, lr}
 80071f4:	b082      	sub	sp, #8
 80071f6:	af00      	add	r7, sp, #0
 80071f8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007200:	b2db      	uxtb	r3, r3
 8007202:	2b03      	cmp	r3, #3
 8007204:	d110      	bne.n	8007228 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800720c:	2b00      	cmp	r3, #0
 800720e:	d00b      	beq.n	8007228 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007216:	69db      	ldr	r3, [r3, #28]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d005      	beq.n	8007228 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007222:	69db      	ldr	r3, [r3, #28]
 8007224:	6878      	ldr	r0, [r7, #4]
 8007226:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007228:	2300      	movs	r3, #0
}
 800722a:	4618      	mov	r0, r3
 800722c:	3708      	adds	r7, #8
 800722e:	46bd      	mov	sp, r7
 8007230:	bd80      	pop	{r7, pc}

08007232 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007232:	b580      	push	{r7, lr}
 8007234:	b082      	sub	sp, #8
 8007236:	af00      	add	r7, sp, #0
 8007238:	6078      	str	r0, [r7, #4]
 800723a:	460b      	mov	r3, r1
 800723c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	32ae      	adds	r2, #174	; 0xae
 8007248:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d101      	bne.n	8007254 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007250:	2303      	movs	r3, #3
 8007252:	e01c      	b.n	800728e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800725a:	b2db      	uxtb	r3, r3
 800725c:	2b03      	cmp	r3, #3
 800725e:	d115      	bne.n	800728c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	32ae      	adds	r2, #174	; 0xae
 800726a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800726e:	6a1b      	ldr	r3, [r3, #32]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d00b      	beq.n	800728c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	32ae      	adds	r2, #174	; 0xae
 800727e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007282:	6a1b      	ldr	r3, [r3, #32]
 8007284:	78fa      	ldrb	r2, [r7, #3]
 8007286:	4611      	mov	r1, r2
 8007288:	6878      	ldr	r0, [r7, #4]
 800728a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800728c:	2300      	movs	r3, #0
}
 800728e:	4618      	mov	r0, r3
 8007290:	3708      	adds	r7, #8
 8007292:	46bd      	mov	sp, r7
 8007294:	bd80      	pop	{r7, pc}

08007296 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007296:	b580      	push	{r7, lr}
 8007298:	b082      	sub	sp, #8
 800729a:	af00      	add	r7, sp, #0
 800729c:	6078      	str	r0, [r7, #4]
 800729e:	460b      	mov	r3, r1
 80072a0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	32ae      	adds	r2, #174	; 0xae
 80072ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d101      	bne.n	80072b8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80072b4:	2303      	movs	r3, #3
 80072b6:	e01c      	b.n	80072f2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072be:	b2db      	uxtb	r3, r3
 80072c0:	2b03      	cmp	r3, #3
 80072c2:	d115      	bne.n	80072f0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	32ae      	adds	r2, #174	; 0xae
 80072ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d00b      	beq.n	80072f0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	32ae      	adds	r2, #174	; 0xae
 80072e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072e8:	78fa      	ldrb	r2, [r7, #3]
 80072ea:	4611      	mov	r1, r2
 80072ec:	6878      	ldr	r0, [r7, #4]
 80072ee:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80072f0:	2300      	movs	r3, #0
}
 80072f2:	4618      	mov	r0, r3
 80072f4:	3708      	adds	r7, #8
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bd80      	pop	{r7, pc}

080072fa <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80072fa:	b480      	push	{r7}
 80072fc:	b083      	sub	sp, #12
 80072fe:	af00      	add	r7, sp, #0
 8007300:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007302:	2300      	movs	r3, #0
}
 8007304:	4618      	mov	r0, r3
 8007306:	370c      	adds	r7, #12
 8007308:	46bd      	mov	sp, r7
 800730a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730e:	4770      	bx	lr

08007310 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b084      	sub	sp, #16
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007318:	2300      	movs	r3, #0
 800731a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2201      	movs	r2, #1
 8007320:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800732a:	2b00      	cmp	r3, #0
 800732c:	d00e      	beq.n	800734c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007334:	685b      	ldr	r3, [r3, #4]
 8007336:	687a      	ldr	r2, [r7, #4]
 8007338:	6852      	ldr	r2, [r2, #4]
 800733a:	b2d2      	uxtb	r2, r2
 800733c:	4611      	mov	r1, r2
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	4798      	blx	r3
 8007342:	4603      	mov	r3, r0
 8007344:	2b00      	cmp	r3, #0
 8007346:	d001      	beq.n	800734c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007348:	2303      	movs	r3, #3
 800734a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800734c:	7bfb      	ldrb	r3, [r7, #15]
}
 800734e:	4618      	mov	r0, r3
 8007350:	3710      	adds	r7, #16
 8007352:	46bd      	mov	sp, r7
 8007354:	bd80      	pop	{r7, pc}

08007356 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007356:	b480      	push	{r7}
 8007358:	b083      	sub	sp, #12
 800735a:	af00      	add	r7, sp, #0
 800735c:	6078      	str	r0, [r7, #4]
 800735e:	460b      	mov	r3, r1
 8007360:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007362:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007364:	4618      	mov	r0, r3
 8007366:	370c      	adds	r7, #12
 8007368:	46bd      	mov	sp, r7
 800736a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736e:	4770      	bx	lr

08007370 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007370:	b480      	push	{r7}
 8007372:	b083      	sub	sp, #12
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
 8007378:	460b      	mov	r3, r1
 800737a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800737c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800737e:	4618      	mov	r0, r3
 8007380:	370c      	adds	r7, #12
 8007382:	46bd      	mov	sp, r7
 8007384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007388:	4770      	bx	lr

0800738a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800738a:	b580      	push	{r7, lr}
 800738c:	b086      	sub	sp, #24
 800738e:	af00      	add	r7, sp, #0
 8007390:	6078      	str	r0, [r7, #4]
 8007392:	460b      	mov	r3, r1
 8007394:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800739e:	2300      	movs	r3, #0
 80073a0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	885b      	ldrh	r3, [r3, #2]
 80073a6:	b29a      	uxth	r2, r3
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	781b      	ldrb	r3, [r3, #0]
 80073ac:	b29b      	uxth	r3, r3
 80073ae:	429a      	cmp	r2, r3
 80073b0:	d920      	bls.n	80073f4 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	781b      	ldrb	r3, [r3, #0]
 80073b6:	b29b      	uxth	r3, r3
 80073b8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80073ba:	e013      	b.n	80073e4 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80073bc:	f107 030a 	add.w	r3, r7, #10
 80073c0:	4619      	mov	r1, r3
 80073c2:	6978      	ldr	r0, [r7, #20]
 80073c4:	f000 f81b 	bl	80073fe <USBD_GetNextDesc>
 80073c8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80073ca:	697b      	ldr	r3, [r7, #20]
 80073cc:	785b      	ldrb	r3, [r3, #1]
 80073ce:	2b05      	cmp	r3, #5
 80073d0:	d108      	bne.n	80073e4 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80073d2:	697b      	ldr	r3, [r7, #20]
 80073d4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80073d6:	693b      	ldr	r3, [r7, #16]
 80073d8:	789b      	ldrb	r3, [r3, #2]
 80073da:	78fa      	ldrb	r2, [r7, #3]
 80073dc:	429a      	cmp	r2, r3
 80073de:	d008      	beq.n	80073f2 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80073e0:	2300      	movs	r3, #0
 80073e2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	885b      	ldrh	r3, [r3, #2]
 80073e8:	b29a      	uxth	r2, r3
 80073ea:	897b      	ldrh	r3, [r7, #10]
 80073ec:	429a      	cmp	r2, r3
 80073ee:	d8e5      	bhi.n	80073bc <USBD_GetEpDesc+0x32>
 80073f0:	e000      	b.n	80073f4 <USBD_GetEpDesc+0x6a>
          break;
 80073f2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80073f4:	693b      	ldr	r3, [r7, #16]
}
 80073f6:	4618      	mov	r0, r3
 80073f8:	3718      	adds	r7, #24
 80073fa:	46bd      	mov	sp, r7
 80073fc:	bd80      	pop	{r7, pc}

080073fe <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80073fe:	b480      	push	{r7}
 8007400:	b085      	sub	sp, #20
 8007402:	af00      	add	r7, sp, #0
 8007404:	6078      	str	r0, [r7, #4]
 8007406:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	881a      	ldrh	r2, [r3, #0]
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	781b      	ldrb	r3, [r3, #0]
 8007414:	b29b      	uxth	r3, r3
 8007416:	4413      	add	r3, r2
 8007418:	b29a      	uxth	r2, r3
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	781b      	ldrb	r3, [r3, #0]
 8007422:	461a      	mov	r2, r3
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	4413      	add	r3, r2
 8007428:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800742a:	68fb      	ldr	r3, [r7, #12]
}
 800742c:	4618      	mov	r0, r3
 800742e:	3714      	adds	r7, #20
 8007430:	46bd      	mov	sp, r7
 8007432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007436:	4770      	bx	lr

08007438 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007438:	b480      	push	{r7}
 800743a:	b087      	sub	sp, #28
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007444:	697b      	ldr	r3, [r7, #20]
 8007446:	781b      	ldrb	r3, [r3, #0]
 8007448:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800744a:	697b      	ldr	r3, [r7, #20]
 800744c:	3301      	adds	r3, #1
 800744e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007450:	697b      	ldr	r3, [r7, #20]
 8007452:	781b      	ldrb	r3, [r3, #0]
 8007454:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007456:	8a3b      	ldrh	r3, [r7, #16]
 8007458:	021b      	lsls	r3, r3, #8
 800745a:	b21a      	sxth	r2, r3
 800745c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007460:	4313      	orrs	r3, r2
 8007462:	b21b      	sxth	r3, r3
 8007464:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007466:	89fb      	ldrh	r3, [r7, #14]
}
 8007468:	4618      	mov	r0, r3
 800746a:	371c      	adds	r7, #28
 800746c:	46bd      	mov	sp, r7
 800746e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007472:	4770      	bx	lr

08007474 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b084      	sub	sp, #16
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
 800747c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800747e:	2300      	movs	r3, #0
 8007480:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	781b      	ldrb	r3, [r3, #0]
 8007486:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800748a:	2b40      	cmp	r3, #64	; 0x40
 800748c:	d005      	beq.n	800749a <USBD_StdDevReq+0x26>
 800748e:	2b40      	cmp	r3, #64	; 0x40
 8007490:	d857      	bhi.n	8007542 <USBD_StdDevReq+0xce>
 8007492:	2b00      	cmp	r3, #0
 8007494:	d00f      	beq.n	80074b6 <USBD_StdDevReq+0x42>
 8007496:	2b20      	cmp	r3, #32
 8007498:	d153      	bne.n	8007542 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	32ae      	adds	r2, #174	; 0xae
 80074a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074a8:	689b      	ldr	r3, [r3, #8]
 80074aa:	6839      	ldr	r1, [r7, #0]
 80074ac:	6878      	ldr	r0, [r7, #4]
 80074ae:	4798      	blx	r3
 80074b0:	4603      	mov	r3, r0
 80074b2:	73fb      	strb	r3, [r7, #15]
      break;
 80074b4:	e04a      	b.n	800754c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	785b      	ldrb	r3, [r3, #1]
 80074ba:	2b09      	cmp	r3, #9
 80074bc:	d83b      	bhi.n	8007536 <USBD_StdDevReq+0xc2>
 80074be:	a201      	add	r2, pc, #4	; (adr r2, 80074c4 <USBD_StdDevReq+0x50>)
 80074c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074c4:	08007519 	.word	0x08007519
 80074c8:	0800752d 	.word	0x0800752d
 80074cc:	08007537 	.word	0x08007537
 80074d0:	08007523 	.word	0x08007523
 80074d4:	08007537 	.word	0x08007537
 80074d8:	080074f7 	.word	0x080074f7
 80074dc:	080074ed 	.word	0x080074ed
 80074e0:	08007537 	.word	0x08007537
 80074e4:	0800750f 	.word	0x0800750f
 80074e8:	08007501 	.word	0x08007501
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80074ec:	6839      	ldr	r1, [r7, #0]
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	f000 fa3c 	bl	800796c <USBD_GetDescriptor>
          break;
 80074f4:	e024      	b.n	8007540 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80074f6:	6839      	ldr	r1, [r7, #0]
 80074f8:	6878      	ldr	r0, [r7, #4]
 80074fa:	f000 fbcb 	bl	8007c94 <USBD_SetAddress>
          break;
 80074fe:	e01f      	b.n	8007540 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007500:	6839      	ldr	r1, [r7, #0]
 8007502:	6878      	ldr	r0, [r7, #4]
 8007504:	f000 fc0a 	bl	8007d1c <USBD_SetConfig>
 8007508:	4603      	mov	r3, r0
 800750a:	73fb      	strb	r3, [r7, #15]
          break;
 800750c:	e018      	b.n	8007540 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800750e:	6839      	ldr	r1, [r7, #0]
 8007510:	6878      	ldr	r0, [r7, #4]
 8007512:	f000 fcad 	bl	8007e70 <USBD_GetConfig>
          break;
 8007516:	e013      	b.n	8007540 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007518:	6839      	ldr	r1, [r7, #0]
 800751a:	6878      	ldr	r0, [r7, #4]
 800751c:	f000 fcde 	bl	8007edc <USBD_GetStatus>
          break;
 8007520:	e00e      	b.n	8007540 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007522:	6839      	ldr	r1, [r7, #0]
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	f000 fd0d 	bl	8007f44 <USBD_SetFeature>
          break;
 800752a:	e009      	b.n	8007540 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800752c:	6839      	ldr	r1, [r7, #0]
 800752e:	6878      	ldr	r0, [r7, #4]
 8007530:	f000 fd31 	bl	8007f96 <USBD_ClrFeature>
          break;
 8007534:	e004      	b.n	8007540 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007536:	6839      	ldr	r1, [r7, #0]
 8007538:	6878      	ldr	r0, [r7, #4]
 800753a:	f000 fd88 	bl	800804e <USBD_CtlError>
          break;
 800753e:	bf00      	nop
      }
      break;
 8007540:	e004      	b.n	800754c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007542:	6839      	ldr	r1, [r7, #0]
 8007544:	6878      	ldr	r0, [r7, #4]
 8007546:	f000 fd82 	bl	800804e <USBD_CtlError>
      break;
 800754a:	bf00      	nop
  }

  return ret;
 800754c:	7bfb      	ldrb	r3, [r7, #15]
}
 800754e:	4618      	mov	r0, r3
 8007550:	3710      	adds	r7, #16
 8007552:	46bd      	mov	sp, r7
 8007554:	bd80      	pop	{r7, pc}
 8007556:	bf00      	nop

08007558 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b084      	sub	sp, #16
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
 8007560:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007562:	2300      	movs	r3, #0
 8007564:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	781b      	ldrb	r3, [r3, #0]
 800756a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800756e:	2b40      	cmp	r3, #64	; 0x40
 8007570:	d005      	beq.n	800757e <USBD_StdItfReq+0x26>
 8007572:	2b40      	cmp	r3, #64	; 0x40
 8007574:	d852      	bhi.n	800761c <USBD_StdItfReq+0xc4>
 8007576:	2b00      	cmp	r3, #0
 8007578:	d001      	beq.n	800757e <USBD_StdItfReq+0x26>
 800757a:	2b20      	cmp	r3, #32
 800757c:	d14e      	bne.n	800761c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007584:	b2db      	uxtb	r3, r3
 8007586:	3b01      	subs	r3, #1
 8007588:	2b02      	cmp	r3, #2
 800758a:	d840      	bhi.n	800760e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	889b      	ldrh	r3, [r3, #4]
 8007590:	b2db      	uxtb	r3, r3
 8007592:	2b01      	cmp	r3, #1
 8007594:	d836      	bhi.n	8007604 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	889b      	ldrh	r3, [r3, #4]
 800759a:	b2db      	uxtb	r3, r3
 800759c:	4619      	mov	r1, r3
 800759e:	6878      	ldr	r0, [r7, #4]
 80075a0:	f7ff fed9 	bl	8007356 <USBD_CoreFindIF>
 80075a4:	4603      	mov	r3, r0
 80075a6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80075a8:	7bbb      	ldrb	r3, [r7, #14]
 80075aa:	2bff      	cmp	r3, #255	; 0xff
 80075ac:	d01d      	beq.n	80075ea <USBD_StdItfReq+0x92>
 80075ae:	7bbb      	ldrb	r3, [r7, #14]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d11a      	bne.n	80075ea <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80075b4:	7bba      	ldrb	r2, [r7, #14]
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	32ae      	adds	r2, #174	; 0xae
 80075ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075be:	689b      	ldr	r3, [r3, #8]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d00f      	beq.n	80075e4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80075c4:	7bba      	ldrb	r2, [r7, #14]
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80075cc:	7bba      	ldrb	r2, [r7, #14]
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	32ae      	adds	r2, #174	; 0xae
 80075d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075d6:	689b      	ldr	r3, [r3, #8]
 80075d8:	6839      	ldr	r1, [r7, #0]
 80075da:	6878      	ldr	r0, [r7, #4]
 80075dc:	4798      	blx	r3
 80075de:	4603      	mov	r3, r0
 80075e0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80075e2:	e004      	b.n	80075ee <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80075e4:	2303      	movs	r3, #3
 80075e6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80075e8:	e001      	b.n	80075ee <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80075ea:	2303      	movs	r3, #3
 80075ec:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	88db      	ldrh	r3, [r3, #6]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d110      	bne.n	8007618 <USBD_StdItfReq+0xc0>
 80075f6:	7bfb      	ldrb	r3, [r7, #15]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d10d      	bne.n	8007618 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	f000 fdd4 	bl	80081aa <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007602:	e009      	b.n	8007618 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007604:	6839      	ldr	r1, [r7, #0]
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f000 fd21 	bl	800804e <USBD_CtlError>
          break;
 800760c:	e004      	b.n	8007618 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800760e:	6839      	ldr	r1, [r7, #0]
 8007610:	6878      	ldr	r0, [r7, #4]
 8007612:	f000 fd1c 	bl	800804e <USBD_CtlError>
          break;
 8007616:	e000      	b.n	800761a <USBD_StdItfReq+0xc2>
          break;
 8007618:	bf00      	nop
      }
      break;
 800761a:	e004      	b.n	8007626 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800761c:	6839      	ldr	r1, [r7, #0]
 800761e:	6878      	ldr	r0, [r7, #4]
 8007620:	f000 fd15 	bl	800804e <USBD_CtlError>
      break;
 8007624:	bf00      	nop
  }

  return ret;
 8007626:	7bfb      	ldrb	r3, [r7, #15]
}
 8007628:	4618      	mov	r0, r3
 800762a:	3710      	adds	r7, #16
 800762c:	46bd      	mov	sp, r7
 800762e:	bd80      	pop	{r7, pc}

08007630 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007630:	b580      	push	{r7, lr}
 8007632:	b084      	sub	sp, #16
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
 8007638:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800763a:	2300      	movs	r3, #0
 800763c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	889b      	ldrh	r3, [r3, #4]
 8007642:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	781b      	ldrb	r3, [r3, #0]
 8007648:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800764c:	2b40      	cmp	r3, #64	; 0x40
 800764e:	d007      	beq.n	8007660 <USBD_StdEPReq+0x30>
 8007650:	2b40      	cmp	r3, #64	; 0x40
 8007652:	f200 817f 	bhi.w	8007954 <USBD_StdEPReq+0x324>
 8007656:	2b00      	cmp	r3, #0
 8007658:	d02a      	beq.n	80076b0 <USBD_StdEPReq+0x80>
 800765a:	2b20      	cmp	r3, #32
 800765c:	f040 817a 	bne.w	8007954 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007660:	7bbb      	ldrb	r3, [r7, #14]
 8007662:	4619      	mov	r1, r3
 8007664:	6878      	ldr	r0, [r7, #4]
 8007666:	f7ff fe83 	bl	8007370 <USBD_CoreFindEP>
 800766a:	4603      	mov	r3, r0
 800766c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800766e:	7b7b      	ldrb	r3, [r7, #13]
 8007670:	2bff      	cmp	r3, #255	; 0xff
 8007672:	f000 8174 	beq.w	800795e <USBD_StdEPReq+0x32e>
 8007676:	7b7b      	ldrb	r3, [r7, #13]
 8007678:	2b00      	cmp	r3, #0
 800767a:	f040 8170 	bne.w	800795e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800767e:	7b7a      	ldrb	r2, [r7, #13]
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007686:	7b7a      	ldrb	r2, [r7, #13]
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	32ae      	adds	r2, #174	; 0xae
 800768c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007690:	689b      	ldr	r3, [r3, #8]
 8007692:	2b00      	cmp	r3, #0
 8007694:	f000 8163 	beq.w	800795e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007698:	7b7a      	ldrb	r2, [r7, #13]
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	32ae      	adds	r2, #174	; 0xae
 800769e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076a2:	689b      	ldr	r3, [r3, #8]
 80076a4:	6839      	ldr	r1, [r7, #0]
 80076a6:	6878      	ldr	r0, [r7, #4]
 80076a8:	4798      	blx	r3
 80076aa:	4603      	mov	r3, r0
 80076ac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80076ae:	e156      	b.n	800795e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	785b      	ldrb	r3, [r3, #1]
 80076b4:	2b03      	cmp	r3, #3
 80076b6:	d008      	beq.n	80076ca <USBD_StdEPReq+0x9a>
 80076b8:	2b03      	cmp	r3, #3
 80076ba:	f300 8145 	bgt.w	8007948 <USBD_StdEPReq+0x318>
 80076be:	2b00      	cmp	r3, #0
 80076c0:	f000 809b 	beq.w	80077fa <USBD_StdEPReq+0x1ca>
 80076c4:	2b01      	cmp	r3, #1
 80076c6:	d03c      	beq.n	8007742 <USBD_StdEPReq+0x112>
 80076c8:	e13e      	b.n	8007948 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076d0:	b2db      	uxtb	r3, r3
 80076d2:	2b02      	cmp	r3, #2
 80076d4:	d002      	beq.n	80076dc <USBD_StdEPReq+0xac>
 80076d6:	2b03      	cmp	r3, #3
 80076d8:	d016      	beq.n	8007708 <USBD_StdEPReq+0xd8>
 80076da:	e02c      	b.n	8007736 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80076dc:	7bbb      	ldrb	r3, [r7, #14]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d00d      	beq.n	80076fe <USBD_StdEPReq+0xce>
 80076e2:	7bbb      	ldrb	r3, [r7, #14]
 80076e4:	2b80      	cmp	r3, #128	; 0x80
 80076e6:	d00a      	beq.n	80076fe <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80076e8:	7bbb      	ldrb	r3, [r7, #14]
 80076ea:	4619      	mov	r1, r3
 80076ec:	6878      	ldr	r0, [r7, #4]
 80076ee:	f003 fee5 	bl	800b4bc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80076f2:	2180      	movs	r1, #128	; 0x80
 80076f4:	6878      	ldr	r0, [r7, #4]
 80076f6:	f003 fee1 	bl	800b4bc <USBD_LL_StallEP>
 80076fa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80076fc:	e020      	b.n	8007740 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80076fe:	6839      	ldr	r1, [r7, #0]
 8007700:	6878      	ldr	r0, [r7, #4]
 8007702:	f000 fca4 	bl	800804e <USBD_CtlError>
              break;
 8007706:	e01b      	b.n	8007740 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	885b      	ldrh	r3, [r3, #2]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d10e      	bne.n	800772e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007710:	7bbb      	ldrb	r3, [r7, #14]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d00b      	beq.n	800772e <USBD_StdEPReq+0xfe>
 8007716:	7bbb      	ldrb	r3, [r7, #14]
 8007718:	2b80      	cmp	r3, #128	; 0x80
 800771a:	d008      	beq.n	800772e <USBD_StdEPReq+0xfe>
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	88db      	ldrh	r3, [r3, #6]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d104      	bne.n	800772e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007724:	7bbb      	ldrb	r3, [r7, #14]
 8007726:	4619      	mov	r1, r3
 8007728:	6878      	ldr	r0, [r7, #4]
 800772a:	f003 fec7 	bl	800b4bc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800772e:	6878      	ldr	r0, [r7, #4]
 8007730:	f000 fd3b 	bl	80081aa <USBD_CtlSendStatus>

              break;
 8007734:	e004      	b.n	8007740 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007736:	6839      	ldr	r1, [r7, #0]
 8007738:	6878      	ldr	r0, [r7, #4]
 800773a:	f000 fc88 	bl	800804e <USBD_CtlError>
              break;
 800773e:	bf00      	nop
          }
          break;
 8007740:	e107      	b.n	8007952 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007748:	b2db      	uxtb	r3, r3
 800774a:	2b02      	cmp	r3, #2
 800774c:	d002      	beq.n	8007754 <USBD_StdEPReq+0x124>
 800774e:	2b03      	cmp	r3, #3
 8007750:	d016      	beq.n	8007780 <USBD_StdEPReq+0x150>
 8007752:	e04b      	b.n	80077ec <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007754:	7bbb      	ldrb	r3, [r7, #14]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d00d      	beq.n	8007776 <USBD_StdEPReq+0x146>
 800775a:	7bbb      	ldrb	r3, [r7, #14]
 800775c:	2b80      	cmp	r3, #128	; 0x80
 800775e:	d00a      	beq.n	8007776 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007760:	7bbb      	ldrb	r3, [r7, #14]
 8007762:	4619      	mov	r1, r3
 8007764:	6878      	ldr	r0, [r7, #4]
 8007766:	f003 fea9 	bl	800b4bc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800776a:	2180      	movs	r1, #128	; 0x80
 800776c:	6878      	ldr	r0, [r7, #4]
 800776e:	f003 fea5 	bl	800b4bc <USBD_LL_StallEP>
 8007772:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007774:	e040      	b.n	80077f8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007776:	6839      	ldr	r1, [r7, #0]
 8007778:	6878      	ldr	r0, [r7, #4]
 800777a:	f000 fc68 	bl	800804e <USBD_CtlError>
              break;
 800777e:	e03b      	b.n	80077f8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	885b      	ldrh	r3, [r3, #2]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d136      	bne.n	80077f6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007788:	7bbb      	ldrb	r3, [r7, #14]
 800778a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800778e:	2b00      	cmp	r3, #0
 8007790:	d004      	beq.n	800779c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007792:	7bbb      	ldrb	r3, [r7, #14]
 8007794:	4619      	mov	r1, r3
 8007796:	6878      	ldr	r0, [r7, #4]
 8007798:	f003 fec6 	bl	800b528 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800779c:	6878      	ldr	r0, [r7, #4]
 800779e:	f000 fd04 	bl	80081aa <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80077a2:	7bbb      	ldrb	r3, [r7, #14]
 80077a4:	4619      	mov	r1, r3
 80077a6:	6878      	ldr	r0, [r7, #4]
 80077a8:	f7ff fde2 	bl	8007370 <USBD_CoreFindEP>
 80077ac:	4603      	mov	r3, r0
 80077ae:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80077b0:	7b7b      	ldrb	r3, [r7, #13]
 80077b2:	2bff      	cmp	r3, #255	; 0xff
 80077b4:	d01f      	beq.n	80077f6 <USBD_StdEPReq+0x1c6>
 80077b6:	7b7b      	ldrb	r3, [r7, #13]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d11c      	bne.n	80077f6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80077bc:	7b7a      	ldrb	r2, [r7, #13]
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80077c4:	7b7a      	ldrb	r2, [r7, #13]
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	32ae      	adds	r2, #174	; 0xae
 80077ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077ce:	689b      	ldr	r3, [r3, #8]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d010      	beq.n	80077f6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80077d4:	7b7a      	ldrb	r2, [r7, #13]
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	32ae      	adds	r2, #174	; 0xae
 80077da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077de:	689b      	ldr	r3, [r3, #8]
 80077e0:	6839      	ldr	r1, [r7, #0]
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	4798      	blx	r3
 80077e6:	4603      	mov	r3, r0
 80077e8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80077ea:	e004      	b.n	80077f6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80077ec:	6839      	ldr	r1, [r7, #0]
 80077ee:	6878      	ldr	r0, [r7, #4]
 80077f0:	f000 fc2d 	bl	800804e <USBD_CtlError>
              break;
 80077f4:	e000      	b.n	80077f8 <USBD_StdEPReq+0x1c8>
              break;
 80077f6:	bf00      	nop
          }
          break;
 80077f8:	e0ab      	b.n	8007952 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007800:	b2db      	uxtb	r3, r3
 8007802:	2b02      	cmp	r3, #2
 8007804:	d002      	beq.n	800780c <USBD_StdEPReq+0x1dc>
 8007806:	2b03      	cmp	r3, #3
 8007808:	d032      	beq.n	8007870 <USBD_StdEPReq+0x240>
 800780a:	e097      	b.n	800793c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800780c:	7bbb      	ldrb	r3, [r7, #14]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d007      	beq.n	8007822 <USBD_StdEPReq+0x1f2>
 8007812:	7bbb      	ldrb	r3, [r7, #14]
 8007814:	2b80      	cmp	r3, #128	; 0x80
 8007816:	d004      	beq.n	8007822 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007818:	6839      	ldr	r1, [r7, #0]
 800781a:	6878      	ldr	r0, [r7, #4]
 800781c:	f000 fc17 	bl	800804e <USBD_CtlError>
                break;
 8007820:	e091      	b.n	8007946 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007822:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007826:	2b00      	cmp	r3, #0
 8007828:	da0b      	bge.n	8007842 <USBD_StdEPReq+0x212>
 800782a:	7bbb      	ldrb	r3, [r7, #14]
 800782c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007830:	4613      	mov	r3, r2
 8007832:	009b      	lsls	r3, r3, #2
 8007834:	4413      	add	r3, r2
 8007836:	009b      	lsls	r3, r3, #2
 8007838:	3310      	adds	r3, #16
 800783a:	687a      	ldr	r2, [r7, #4]
 800783c:	4413      	add	r3, r2
 800783e:	3304      	adds	r3, #4
 8007840:	e00b      	b.n	800785a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007842:	7bbb      	ldrb	r3, [r7, #14]
 8007844:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007848:	4613      	mov	r3, r2
 800784a:	009b      	lsls	r3, r3, #2
 800784c:	4413      	add	r3, r2
 800784e:	009b      	lsls	r3, r3, #2
 8007850:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007854:	687a      	ldr	r2, [r7, #4]
 8007856:	4413      	add	r3, r2
 8007858:	3304      	adds	r3, #4
 800785a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	2200      	movs	r2, #0
 8007860:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007862:	68bb      	ldr	r3, [r7, #8]
 8007864:	2202      	movs	r2, #2
 8007866:	4619      	mov	r1, r3
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	f000 fc61 	bl	8008130 <USBD_CtlSendData>
              break;
 800786e:	e06a      	b.n	8007946 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007870:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007874:	2b00      	cmp	r3, #0
 8007876:	da11      	bge.n	800789c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007878:	7bbb      	ldrb	r3, [r7, #14]
 800787a:	f003 020f 	and.w	r2, r3, #15
 800787e:	6879      	ldr	r1, [r7, #4]
 8007880:	4613      	mov	r3, r2
 8007882:	009b      	lsls	r3, r3, #2
 8007884:	4413      	add	r3, r2
 8007886:	009b      	lsls	r3, r3, #2
 8007888:	440b      	add	r3, r1
 800788a:	3324      	adds	r3, #36	; 0x24
 800788c:	881b      	ldrh	r3, [r3, #0]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d117      	bne.n	80078c2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007892:	6839      	ldr	r1, [r7, #0]
 8007894:	6878      	ldr	r0, [r7, #4]
 8007896:	f000 fbda 	bl	800804e <USBD_CtlError>
                  break;
 800789a:	e054      	b.n	8007946 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800789c:	7bbb      	ldrb	r3, [r7, #14]
 800789e:	f003 020f 	and.w	r2, r3, #15
 80078a2:	6879      	ldr	r1, [r7, #4]
 80078a4:	4613      	mov	r3, r2
 80078a6:	009b      	lsls	r3, r3, #2
 80078a8:	4413      	add	r3, r2
 80078aa:	009b      	lsls	r3, r3, #2
 80078ac:	440b      	add	r3, r1
 80078ae:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80078b2:	881b      	ldrh	r3, [r3, #0]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d104      	bne.n	80078c2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80078b8:	6839      	ldr	r1, [r7, #0]
 80078ba:	6878      	ldr	r0, [r7, #4]
 80078bc:	f000 fbc7 	bl	800804e <USBD_CtlError>
                  break;
 80078c0:	e041      	b.n	8007946 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80078c2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	da0b      	bge.n	80078e2 <USBD_StdEPReq+0x2b2>
 80078ca:	7bbb      	ldrb	r3, [r7, #14]
 80078cc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80078d0:	4613      	mov	r3, r2
 80078d2:	009b      	lsls	r3, r3, #2
 80078d4:	4413      	add	r3, r2
 80078d6:	009b      	lsls	r3, r3, #2
 80078d8:	3310      	adds	r3, #16
 80078da:	687a      	ldr	r2, [r7, #4]
 80078dc:	4413      	add	r3, r2
 80078de:	3304      	adds	r3, #4
 80078e0:	e00b      	b.n	80078fa <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80078e2:	7bbb      	ldrb	r3, [r7, #14]
 80078e4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80078e8:	4613      	mov	r3, r2
 80078ea:	009b      	lsls	r3, r3, #2
 80078ec:	4413      	add	r3, r2
 80078ee:	009b      	lsls	r3, r3, #2
 80078f0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80078f4:	687a      	ldr	r2, [r7, #4]
 80078f6:	4413      	add	r3, r2
 80078f8:	3304      	adds	r3, #4
 80078fa:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80078fc:	7bbb      	ldrb	r3, [r7, #14]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d002      	beq.n	8007908 <USBD_StdEPReq+0x2d8>
 8007902:	7bbb      	ldrb	r3, [r7, #14]
 8007904:	2b80      	cmp	r3, #128	; 0x80
 8007906:	d103      	bne.n	8007910 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007908:	68bb      	ldr	r3, [r7, #8]
 800790a:	2200      	movs	r2, #0
 800790c:	601a      	str	r2, [r3, #0]
 800790e:	e00e      	b.n	800792e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007910:	7bbb      	ldrb	r3, [r7, #14]
 8007912:	4619      	mov	r1, r3
 8007914:	6878      	ldr	r0, [r7, #4]
 8007916:	f003 fe3d 	bl	800b594 <USBD_LL_IsStallEP>
 800791a:	4603      	mov	r3, r0
 800791c:	2b00      	cmp	r3, #0
 800791e:	d003      	beq.n	8007928 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007920:	68bb      	ldr	r3, [r7, #8]
 8007922:	2201      	movs	r2, #1
 8007924:	601a      	str	r2, [r3, #0]
 8007926:	e002      	b.n	800792e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007928:	68bb      	ldr	r3, [r7, #8]
 800792a:	2200      	movs	r2, #0
 800792c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800792e:	68bb      	ldr	r3, [r7, #8]
 8007930:	2202      	movs	r2, #2
 8007932:	4619      	mov	r1, r3
 8007934:	6878      	ldr	r0, [r7, #4]
 8007936:	f000 fbfb 	bl	8008130 <USBD_CtlSendData>
              break;
 800793a:	e004      	b.n	8007946 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800793c:	6839      	ldr	r1, [r7, #0]
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	f000 fb85 	bl	800804e <USBD_CtlError>
              break;
 8007944:	bf00      	nop
          }
          break;
 8007946:	e004      	b.n	8007952 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007948:	6839      	ldr	r1, [r7, #0]
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	f000 fb7f 	bl	800804e <USBD_CtlError>
          break;
 8007950:	bf00      	nop
      }
      break;
 8007952:	e005      	b.n	8007960 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007954:	6839      	ldr	r1, [r7, #0]
 8007956:	6878      	ldr	r0, [r7, #4]
 8007958:	f000 fb79 	bl	800804e <USBD_CtlError>
      break;
 800795c:	e000      	b.n	8007960 <USBD_StdEPReq+0x330>
      break;
 800795e:	bf00      	nop
  }

  return ret;
 8007960:	7bfb      	ldrb	r3, [r7, #15]
}
 8007962:	4618      	mov	r0, r3
 8007964:	3710      	adds	r7, #16
 8007966:	46bd      	mov	sp, r7
 8007968:	bd80      	pop	{r7, pc}
	...

0800796c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b084      	sub	sp, #16
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
 8007974:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007976:	2300      	movs	r3, #0
 8007978:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800797a:	2300      	movs	r3, #0
 800797c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800797e:	2300      	movs	r3, #0
 8007980:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	885b      	ldrh	r3, [r3, #2]
 8007986:	0a1b      	lsrs	r3, r3, #8
 8007988:	b29b      	uxth	r3, r3
 800798a:	3b01      	subs	r3, #1
 800798c:	2b0e      	cmp	r3, #14
 800798e:	f200 8152 	bhi.w	8007c36 <USBD_GetDescriptor+0x2ca>
 8007992:	a201      	add	r2, pc, #4	; (adr r2, 8007998 <USBD_GetDescriptor+0x2c>)
 8007994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007998:	08007a09 	.word	0x08007a09
 800799c:	08007a21 	.word	0x08007a21
 80079a0:	08007a61 	.word	0x08007a61
 80079a4:	08007c37 	.word	0x08007c37
 80079a8:	08007c37 	.word	0x08007c37
 80079ac:	08007bd7 	.word	0x08007bd7
 80079b0:	08007c03 	.word	0x08007c03
 80079b4:	08007c37 	.word	0x08007c37
 80079b8:	08007c37 	.word	0x08007c37
 80079bc:	08007c37 	.word	0x08007c37
 80079c0:	08007c37 	.word	0x08007c37
 80079c4:	08007c37 	.word	0x08007c37
 80079c8:	08007c37 	.word	0x08007c37
 80079cc:	08007c37 	.word	0x08007c37
 80079d0:	080079d5 	.word	0x080079d5
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079da:	69db      	ldr	r3, [r3, #28]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d00b      	beq.n	80079f8 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079e6:	69db      	ldr	r3, [r3, #28]
 80079e8:	687a      	ldr	r2, [r7, #4]
 80079ea:	7c12      	ldrb	r2, [r2, #16]
 80079ec:	f107 0108 	add.w	r1, r7, #8
 80079f0:	4610      	mov	r0, r2
 80079f2:	4798      	blx	r3
 80079f4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80079f6:	e126      	b.n	8007c46 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80079f8:	6839      	ldr	r1, [r7, #0]
 80079fa:	6878      	ldr	r0, [r7, #4]
 80079fc:	f000 fb27 	bl	800804e <USBD_CtlError>
        err++;
 8007a00:	7afb      	ldrb	r3, [r7, #11]
 8007a02:	3301      	adds	r3, #1
 8007a04:	72fb      	strb	r3, [r7, #11]
      break;
 8007a06:	e11e      	b.n	8007c46 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	687a      	ldr	r2, [r7, #4]
 8007a12:	7c12      	ldrb	r2, [r2, #16]
 8007a14:	f107 0108 	add.w	r1, r7, #8
 8007a18:	4610      	mov	r0, r2
 8007a1a:	4798      	blx	r3
 8007a1c:	60f8      	str	r0, [r7, #12]
      break;
 8007a1e:	e112      	b.n	8007c46 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	7c1b      	ldrb	r3, [r3, #16]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d10d      	bne.n	8007a44 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a30:	f107 0208 	add.w	r2, r7, #8
 8007a34:	4610      	mov	r0, r2
 8007a36:	4798      	blx	r3
 8007a38:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	3301      	adds	r3, #1
 8007a3e:	2202      	movs	r2, #2
 8007a40:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007a42:	e100      	b.n	8007c46 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a4c:	f107 0208 	add.w	r2, r7, #8
 8007a50:	4610      	mov	r0, r2
 8007a52:	4798      	blx	r3
 8007a54:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	3301      	adds	r3, #1
 8007a5a:	2202      	movs	r2, #2
 8007a5c:	701a      	strb	r2, [r3, #0]
      break;
 8007a5e:	e0f2      	b.n	8007c46 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	885b      	ldrh	r3, [r3, #2]
 8007a64:	b2db      	uxtb	r3, r3
 8007a66:	2b05      	cmp	r3, #5
 8007a68:	f200 80ac 	bhi.w	8007bc4 <USBD_GetDescriptor+0x258>
 8007a6c:	a201      	add	r2, pc, #4	; (adr r2, 8007a74 <USBD_GetDescriptor+0x108>)
 8007a6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a72:	bf00      	nop
 8007a74:	08007a8d 	.word	0x08007a8d
 8007a78:	08007ac1 	.word	0x08007ac1
 8007a7c:	08007af5 	.word	0x08007af5
 8007a80:	08007b29 	.word	0x08007b29
 8007a84:	08007b5d 	.word	0x08007b5d
 8007a88:	08007b91 	.word	0x08007b91
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a92:	685b      	ldr	r3, [r3, #4]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d00b      	beq.n	8007ab0 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a9e:	685b      	ldr	r3, [r3, #4]
 8007aa0:	687a      	ldr	r2, [r7, #4]
 8007aa2:	7c12      	ldrb	r2, [r2, #16]
 8007aa4:	f107 0108 	add.w	r1, r7, #8
 8007aa8:	4610      	mov	r0, r2
 8007aaa:	4798      	blx	r3
 8007aac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007aae:	e091      	b.n	8007bd4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007ab0:	6839      	ldr	r1, [r7, #0]
 8007ab2:	6878      	ldr	r0, [r7, #4]
 8007ab4:	f000 facb 	bl	800804e <USBD_CtlError>
            err++;
 8007ab8:	7afb      	ldrb	r3, [r7, #11]
 8007aba:	3301      	adds	r3, #1
 8007abc:	72fb      	strb	r3, [r7, #11]
          break;
 8007abe:	e089      	b.n	8007bd4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ac6:	689b      	ldr	r3, [r3, #8]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d00b      	beq.n	8007ae4 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ad2:	689b      	ldr	r3, [r3, #8]
 8007ad4:	687a      	ldr	r2, [r7, #4]
 8007ad6:	7c12      	ldrb	r2, [r2, #16]
 8007ad8:	f107 0108 	add.w	r1, r7, #8
 8007adc:	4610      	mov	r0, r2
 8007ade:	4798      	blx	r3
 8007ae0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007ae2:	e077      	b.n	8007bd4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007ae4:	6839      	ldr	r1, [r7, #0]
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	f000 fab1 	bl	800804e <USBD_CtlError>
            err++;
 8007aec:	7afb      	ldrb	r3, [r7, #11]
 8007aee:	3301      	adds	r3, #1
 8007af0:	72fb      	strb	r3, [r7, #11]
          break;
 8007af2:	e06f      	b.n	8007bd4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007afa:	68db      	ldr	r3, [r3, #12]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d00b      	beq.n	8007b18 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b06:	68db      	ldr	r3, [r3, #12]
 8007b08:	687a      	ldr	r2, [r7, #4]
 8007b0a:	7c12      	ldrb	r2, [r2, #16]
 8007b0c:	f107 0108 	add.w	r1, r7, #8
 8007b10:	4610      	mov	r0, r2
 8007b12:	4798      	blx	r3
 8007b14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b16:	e05d      	b.n	8007bd4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007b18:	6839      	ldr	r1, [r7, #0]
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	f000 fa97 	bl	800804e <USBD_CtlError>
            err++;
 8007b20:	7afb      	ldrb	r3, [r7, #11]
 8007b22:	3301      	adds	r3, #1
 8007b24:	72fb      	strb	r3, [r7, #11]
          break;
 8007b26:	e055      	b.n	8007bd4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b2e:	691b      	ldr	r3, [r3, #16]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d00b      	beq.n	8007b4c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b3a:	691b      	ldr	r3, [r3, #16]
 8007b3c:	687a      	ldr	r2, [r7, #4]
 8007b3e:	7c12      	ldrb	r2, [r2, #16]
 8007b40:	f107 0108 	add.w	r1, r7, #8
 8007b44:	4610      	mov	r0, r2
 8007b46:	4798      	blx	r3
 8007b48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b4a:	e043      	b.n	8007bd4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007b4c:	6839      	ldr	r1, [r7, #0]
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	f000 fa7d 	bl	800804e <USBD_CtlError>
            err++;
 8007b54:	7afb      	ldrb	r3, [r7, #11]
 8007b56:	3301      	adds	r3, #1
 8007b58:	72fb      	strb	r3, [r7, #11]
          break;
 8007b5a:	e03b      	b.n	8007bd4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b62:	695b      	ldr	r3, [r3, #20]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d00b      	beq.n	8007b80 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b6e:	695b      	ldr	r3, [r3, #20]
 8007b70:	687a      	ldr	r2, [r7, #4]
 8007b72:	7c12      	ldrb	r2, [r2, #16]
 8007b74:	f107 0108 	add.w	r1, r7, #8
 8007b78:	4610      	mov	r0, r2
 8007b7a:	4798      	blx	r3
 8007b7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b7e:	e029      	b.n	8007bd4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007b80:	6839      	ldr	r1, [r7, #0]
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	f000 fa63 	bl	800804e <USBD_CtlError>
            err++;
 8007b88:	7afb      	ldrb	r3, [r7, #11]
 8007b8a:	3301      	adds	r3, #1
 8007b8c:	72fb      	strb	r3, [r7, #11]
          break;
 8007b8e:	e021      	b.n	8007bd4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b96:	699b      	ldr	r3, [r3, #24]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d00b      	beq.n	8007bb4 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ba2:	699b      	ldr	r3, [r3, #24]
 8007ba4:	687a      	ldr	r2, [r7, #4]
 8007ba6:	7c12      	ldrb	r2, [r2, #16]
 8007ba8:	f107 0108 	add.w	r1, r7, #8
 8007bac:	4610      	mov	r0, r2
 8007bae:	4798      	blx	r3
 8007bb0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007bb2:	e00f      	b.n	8007bd4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007bb4:	6839      	ldr	r1, [r7, #0]
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	f000 fa49 	bl	800804e <USBD_CtlError>
            err++;
 8007bbc:	7afb      	ldrb	r3, [r7, #11]
 8007bbe:	3301      	adds	r3, #1
 8007bc0:	72fb      	strb	r3, [r7, #11]
          break;
 8007bc2:	e007      	b.n	8007bd4 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007bc4:	6839      	ldr	r1, [r7, #0]
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	f000 fa41 	bl	800804e <USBD_CtlError>
          err++;
 8007bcc:	7afb      	ldrb	r3, [r7, #11]
 8007bce:	3301      	adds	r3, #1
 8007bd0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007bd2:	bf00      	nop
      }
      break;
 8007bd4:	e037      	b.n	8007c46 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	7c1b      	ldrb	r3, [r3, #16]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d109      	bne.n	8007bf2 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007be4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007be6:	f107 0208 	add.w	r2, r7, #8
 8007bea:	4610      	mov	r0, r2
 8007bec:	4798      	blx	r3
 8007bee:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007bf0:	e029      	b.n	8007c46 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007bf2:	6839      	ldr	r1, [r7, #0]
 8007bf4:	6878      	ldr	r0, [r7, #4]
 8007bf6:	f000 fa2a 	bl	800804e <USBD_CtlError>
        err++;
 8007bfa:	7afb      	ldrb	r3, [r7, #11]
 8007bfc:	3301      	adds	r3, #1
 8007bfe:	72fb      	strb	r3, [r7, #11]
      break;
 8007c00:	e021      	b.n	8007c46 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	7c1b      	ldrb	r3, [r3, #16]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d10d      	bne.n	8007c26 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c12:	f107 0208 	add.w	r2, r7, #8
 8007c16:	4610      	mov	r0, r2
 8007c18:	4798      	blx	r3
 8007c1a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	3301      	adds	r3, #1
 8007c20:	2207      	movs	r2, #7
 8007c22:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007c24:	e00f      	b.n	8007c46 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007c26:	6839      	ldr	r1, [r7, #0]
 8007c28:	6878      	ldr	r0, [r7, #4]
 8007c2a:	f000 fa10 	bl	800804e <USBD_CtlError>
        err++;
 8007c2e:	7afb      	ldrb	r3, [r7, #11]
 8007c30:	3301      	adds	r3, #1
 8007c32:	72fb      	strb	r3, [r7, #11]
      break;
 8007c34:	e007      	b.n	8007c46 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8007c36:	6839      	ldr	r1, [r7, #0]
 8007c38:	6878      	ldr	r0, [r7, #4]
 8007c3a:	f000 fa08 	bl	800804e <USBD_CtlError>
      err++;
 8007c3e:	7afb      	ldrb	r3, [r7, #11]
 8007c40:	3301      	adds	r3, #1
 8007c42:	72fb      	strb	r3, [r7, #11]
      break;
 8007c44:	bf00      	nop
  }

  if (err != 0U)
 8007c46:	7afb      	ldrb	r3, [r7, #11]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d11e      	bne.n	8007c8a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	88db      	ldrh	r3, [r3, #6]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d016      	beq.n	8007c82 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8007c54:	893b      	ldrh	r3, [r7, #8]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d00e      	beq.n	8007c78 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	88da      	ldrh	r2, [r3, #6]
 8007c5e:	893b      	ldrh	r3, [r7, #8]
 8007c60:	4293      	cmp	r3, r2
 8007c62:	bf28      	it	cs
 8007c64:	4613      	movcs	r3, r2
 8007c66:	b29b      	uxth	r3, r3
 8007c68:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007c6a:	893b      	ldrh	r3, [r7, #8]
 8007c6c:	461a      	mov	r2, r3
 8007c6e:	68f9      	ldr	r1, [r7, #12]
 8007c70:	6878      	ldr	r0, [r7, #4]
 8007c72:	f000 fa5d 	bl	8008130 <USBD_CtlSendData>
 8007c76:	e009      	b.n	8007c8c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007c78:	6839      	ldr	r1, [r7, #0]
 8007c7a:	6878      	ldr	r0, [r7, #4]
 8007c7c:	f000 f9e7 	bl	800804e <USBD_CtlError>
 8007c80:	e004      	b.n	8007c8c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007c82:	6878      	ldr	r0, [r7, #4]
 8007c84:	f000 fa91 	bl	80081aa <USBD_CtlSendStatus>
 8007c88:	e000      	b.n	8007c8c <USBD_GetDescriptor+0x320>
    return;
 8007c8a:	bf00      	nop
  }
}
 8007c8c:	3710      	adds	r7, #16
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	bd80      	pop	{r7, pc}
 8007c92:	bf00      	nop

08007c94 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b084      	sub	sp, #16
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
 8007c9c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	889b      	ldrh	r3, [r3, #4]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d131      	bne.n	8007d0a <USBD_SetAddress+0x76>
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	88db      	ldrh	r3, [r3, #6]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d12d      	bne.n	8007d0a <USBD_SetAddress+0x76>
 8007cae:	683b      	ldr	r3, [r7, #0]
 8007cb0:	885b      	ldrh	r3, [r3, #2]
 8007cb2:	2b7f      	cmp	r3, #127	; 0x7f
 8007cb4:	d829      	bhi.n	8007d0a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	885b      	ldrh	r3, [r3, #2]
 8007cba:	b2db      	uxtb	r3, r3
 8007cbc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007cc0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cc8:	b2db      	uxtb	r3, r3
 8007cca:	2b03      	cmp	r3, #3
 8007ccc:	d104      	bne.n	8007cd8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007cce:	6839      	ldr	r1, [r7, #0]
 8007cd0:	6878      	ldr	r0, [r7, #4]
 8007cd2:	f000 f9bc 	bl	800804e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cd6:	e01d      	b.n	8007d14 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	7bfa      	ldrb	r2, [r7, #15]
 8007cdc:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007ce0:	7bfb      	ldrb	r3, [r7, #15]
 8007ce2:	4619      	mov	r1, r3
 8007ce4:	6878      	ldr	r0, [r7, #4]
 8007ce6:	f003 fc81 	bl	800b5ec <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	f000 fa5d 	bl	80081aa <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007cf0:	7bfb      	ldrb	r3, [r7, #15]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d004      	beq.n	8007d00 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2202      	movs	r2, #2
 8007cfa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cfe:	e009      	b.n	8007d14 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2201      	movs	r2, #1
 8007d04:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d08:	e004      	b.n	8007d14 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007d0a:	6839      	ldr	r1, [r7, #0]
 8007d0c:	6878      	ldr	r0, [r7, #4]
 8007d0e:	f000 f99e 	bl	800804e <USBD_CtlError>
  }
}
 8007d12:	bf00      	nop
 8007d14:	bf00      	nop
 8007d16:	3710      	adds	r7, #16
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	bd80      	pop	{r7, pc}

08007d1c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b084      	sub	sp, #16
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
 8007d24:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007d26:	2300      	movs	r3, #0
 8007d28:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	885b      	ldrh	r3, [r3, #2]
 8007d2e:	b2da      	uxtb	r2, r3
 8007d30:	4b4e      	ldr	r3, [pc, #312]	; (8007e6c <USBD_SetConfig+0x150>)
 8007d32:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007d34:	4b4d      	ldr	r3, [pc, #308]	; (8007e6c <USBD_SetConfig+0x150>)
 8007d36:	781b      	ldrb	r3, [r3, #0]
 8007d38:	2b01      	cmp	r3, #1
 8007d3a:	d905      	bls.n	8007d48 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007d3c:	6839      	ldr	r1, [r7, #0]
 8007d3e:	6878      	ldr	r0, [r7, #4]
 8007d40:	f000 f985 	bl	800804e <USBD_CtlError>
    return USBD_FAIL;
 8007d44:	2303      	movs	r3, #3
 8007d46:	e08c      	b.n	8007e62 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d4e:	b2db      	uxtb	r3, r3
 8007d50:	2b02      	cmp	r3, #2
 8007d52:	d002      	beq.n	8007d5a <USBD_SetConfig+0x3e>
 8007d54:	2b03      	cmp	r3, #3
 8007d56:	d029      	beq.n	8007dac <USBD_SetConfig+0x90>
 8007d58:	e075      	b.n	8007e46 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007d5a:	4b44      	ldr	r3, [pc, #272]	; (8007e6c <USBD_SetConfig+0x150>)
 8007d5c:	781b      	ldrb	r3, [r3, #0]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d020      	beq.n	8007da4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007d62:	4b42      	ldr	r3, [pc, #264]	; (8007e6c <USBD_SetConfig+0x150>)
 8007d64:	781b      	ldrb	r3, [r3, #0]
 8007d66:	461a      	mov	r2, r3
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007d6c:	4b3f      	ldr	r3, [pc, #252]	; (8007e6c <USBD_SetConfig+0x150>)
 8007d6e:	781b      	ldrb	r3, [r3, #0]
 8007d70:	4619      	mov	r1, r3
 8007d72:	6878      	ldr	r0, [r7, #4]
 8007d74:	f7fe ffb7 	bl	8006ce6 <USBD_SetClassConfig>
 8007d78:	4603      	mov	r3, r0
 8007d7a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007d7c:	7bfb      	ldrb	r3, [r7, #15]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d008      	beq.n	8007d94 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007d82:	6839      	ldr	r1, [r7, #0]
 8007d84:	6878      	ldr	r0, [r7, #4]
 8007d86:	f000 f962 	bl	800804e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2202      	movs	r2, #2
 8007d8e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007d92:	e065      	b.n	8007e60 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007d94:	6878      	ldr	r0, [r7, #4]
 8007d96:	f000 fa08 	bl	80081aa <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2203      	movs	r2, #3
 8007d9e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007da2:	e05d      	b.n	8007e60 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007da4:	6878      	ldr	r0, [r7, #4]
 8007da6:	f000 fa00 	bl	80081aa <USBD_CtlSendStatus>
      break;
 8007daa:	e059      	b.n	8007e60 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007dac:	4b2f      	ldr	r3, [pc, #188]	; (8007e6c <USBD_SetConfig+0x150>)
 8007dae:	781b      	ldrb	r3, [r3, #0]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d112      	bne.n	8007dda <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2202      	movs	r2, #2
 8007db8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007dbc:	4b2b      	ldr	r3, [pc, #172]	; (8007e6c <USBD_SetConfig+0x150>)
 8007dbe:	781b      	ldrb	r3, [r3, #0]
 8007dc0:	461a      	mov	r2, r3
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007dc6:	4b29      	ldr	r3, [pc, #164]	; (8007e6c <USBD_SetConfig+0x150>)
 8007dc8:	781b      	ldrb	r3, [r3, #0]
 8007dca:	4619      	mov	r1, r3
 8007dcc:	6878      	ldr	r0, [r7, #4]
 8007dce:	f7fe ffa6 	bl	8006d1e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	f000 f9e9 	bl	80081aa <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007dd8:	e042      	b.n	8007e60 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007dda:	4b24      	ldr	r3, [pc, #144]	; (8007e6c <USBD_SetConfig+0x150>)
 8007ddc:	781b      	ldrb	r3, [r3, #0]
 8007dde:	461a      	mov	r2, r3
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	685b      	ldr	r3, [r3, #4]
 8007de4:	429a      	cmp	r2, r3
 8007de6:	d02a      	beq.n	8007e3e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	685b      	ldr	r3, [r3, #4]
 8007dec:	b2db      	uxtb	r3, r3
 8007dee:	4619      	mov	r1, r3
 8007df0:	6878      	ldr	r0, [r7, #4]
 8007df2:	f7fe ff94 	bl	8006d1e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007df6:	4b1d      	ldr	r3, [pc, #116]	; (8007e6c <USBD_SetConfig+0x150>)
 8007df8:	781b      	ldrb	r3, [r3, #0]
 8007dfa:	461a      	mov	r2, r3
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007e00:	4b1a      	ldr	r3, [pc, #104]	; (8007e6c <USBD_SetConfig+0x150>)
 8007e02:	781b      	ldrb	r3, [r3, #0]
 8007e04:	4619      	mov	r1, r3
 8007e06:	6878      	ldr	r0, [r7, #4]
 8007e08:	f7fe ff6d 	bl	8006ce6 <USBD_SetClassConfig>
 8007e0c:	4603      	mov	r3, r0
 8007e0e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007e10:	7bfb      	ldrb	r3, [r7, #15]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d00f      	beq.n	8007e36 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007e16:	6839      	ldr	r1, [r7, #0]
 8007e18:	6878      	ldr	r0, [r7, #4]
 8007e1a:	f000 f918 	bl	800804e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	685b      	ldr	r3, [r3, #4]
 8007e22:	b2db      	uxtb	r3, r3
 8007e24:	4619      	mov	r1, r3
 8007e26:	6878      	ldr	r0, [r7, #4]
 8007e28:	f7fe ff79 	bl	8006d1e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2202      	movs	r2, #2
 8007e30:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007e34:	e014      	b.n	8007e60 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	f000 f9b7 	bl	80081aa <USBD_CtlSendStatus>
      break;
 8007e3c:	e010      	b.n	8007e60 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007e3e:	6878      	ldr	r0, [r7, #4]
 8007e40:	f000 f9b3 	bl	80081aa <USBD_CtlSendStatus>
      break;
 8007e44:	e00c      	b.n	8007e60 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007e46:	6839      	ldr	r1, [r7, #0]
 8007e48:	6878      	ldr	r0, [r7, #4]
 8007e4a:	f000 f900 	bl	800804e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007e4e:	4b07      	ldr	r3, [pc, #28]	; (8007e6c <USBD_SetConfig+0x150>)
 8007e50:	781b      	ldrb	r3, [r3, #0]
 8007e52:	4619      	mov	r1, r3
 8007e54:	6878      	ldr	r0, [r7, #4]
 8007e56:	f7fe ff62 	bl	8006d1e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007e5a:	2303      	movs	r3, #3
 8007e5c:	73fb      	strb	r3, [r7, #15]
      break;
 8007e5e:	bf00      	nop
  }

  return ret;
 8007e60:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e62:	4618      	mov	r0, r3
 8007e64:	3710      	adds	r7, #16
 8007e66:	46bd      	mov	sp, r7
 8007e68:	bd80      	pop	{r7, pc}
 8007e6a:	bf00      	nop
 8007e6c:	20000304 	.word	0x20000304

08007e70 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b082      	sub	sp, #8
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
 8007e78:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007e7a:	683b      	ldr	r3, [r7, #0]
 8007e7c:	88db      	ldrh	r3, [r3, #6]
 8007e7e:	2b01      	cmp	r3, #1
 8007e80:	d004      	beq.n	8007e8c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007e82:	6839      	ldr	r1, [r7, #0]
 8007e84:	6878      	ldr	r0, [r7, #4]
 8007e86:	f000 f8e2 	bl	800804e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007e8a:	e023      	b.n	8007ed4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e92:	b2db      	uxtb	r3, r3
 8007e94:	2b02      	cmp	r3, #2
 8007e96:	dc02      	bgt.n	8007e9e <USBD_GetConfig+0x2e>
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	dc03      	bgt.n	8007ea4 <USBD_GetConfig+0x34>
 8007e9c:	e015      	b.n	8007eca <USBD_GetConfig+0x5a>
 8007e9e:	2b03      	cmp	r3, #3
 8007ea0:	d00b      	beq.n	8007eba <USBD_GetConfig+0x4a>
 8007ea2:	e012      	b.n	8007eca <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	3308      	adds	r3, #8
 8007eae:	2201      	movs	r2, #1
 8007eb0:	4619      	mov	r1, r3
 8007eb2:	6878      	ldr	r0, [r7, #4]
 8007eb4:	f000 f93c 	bl	8008130 <USBD_CtlSendData>
        break;
 8007eb8:	e00c      	b.n	8007ed4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	3304      	adds	r3, #4
 8007ebe:	2201      	movs	r2, #1
 8007ec0:	4619      	mov	r1, r3
 8007ec2:	6878      	ldr	r0, [r7, #4]
 8007ec4:	f000 f934 	bl	8008130 <USBD_CtlSendData>
        break;
 8007ec8:	e004      	b.n	8007ed4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007eca:	6839      	ldr	r1, [r7, #0]
 8007ecc:	6878      	ldr	r0, [r7, #4]
 8007ece:	f000 f8be 	bl	800804e <USBD_CtlError>
        break;
 8007ed2:	bf00      	nop
}
 8007ed4:	bf00      	nop
 8007ed6:	3708      	adds	r7, #8
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	bd80      	pop	{r7, pc}

08007edc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b082      	sub	sp, #8
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
 8007ee4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007eec:	b2db      	uxtb	r3, r3
 8007eee:	3b01      	subs	r3, #1
 8007ef0:	2b02      	cmp	r3, #2
 8007ef2:	d81e      	bhi.n	8007f32 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	88db      	ldrh	r3, [r3, #6]
 8007ef8:	2b02      	cmp	r3, #2
 8007efa:	d004      	beq.n	8007f06 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007efc:	6839      	ldr	r1, [r7, #0]
 8007efe:	6878      	ldr	r0, [r7, #4]
 8007f00:	f000 f8a5 	bl	800804e <USBD_CtlError>
        break;
 8007f04:	e01a      	b.n	8007f3c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	2201      	movs	r2, #1
 8007f0a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d005      	beq.n	8007f22 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	68db      	ldr	r3, [r3, #12]
 8007f1a:	f043 0202 	orr.w	r2, r3, #2
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	330c      	adds	r3, #12
 8007f26:	2202      	movs	r2, #2
 8007f28:	4619      	mov	r1, r3
 8007f2a:	6878      	ldr	r0, [r7, #4]
 8007f2c:	f000 f900 	bl	8008130 <USBD_CtlSendData>
      break;
 8007f30:	e004      	b.n	8007f3c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007f32:	6839      	ldr	r1, [r7, #0]
 8007f34:	6878      	ldr	r0, [r7, #4]
 8007f36:	f000 f88a 	bl	800804e <USBD_CtlError>
      break;
 8007f3a:	bf00      	nop
  }
}
 8007f3c:	bf00      	nop
 8007f3e:	3708      	adds	r7, #8
 8007f40:	46bd      	mov	sp, r7
 8007f42:	bd80      	pop	{r7, pc}

08007f44 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b082      	sub	sp, #8
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
 8007f4c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	885b      	ldrh	r3, [r3, #2]
 8007f52:	2b01      	cmp	r3, #1
 8007f54:	d107      	bne.n	8007f66 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2201      	movs	r2, #1
 8007f5a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007f5e:	6878      	ldr	r0, [r7, #4]
 8007f60:	f000 f923 	bl	80081aa <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007f64:	e013      	b.n	8007f8e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	885b      	ldrh	r3, [r3, #2]
 8007f6a:	2b02      	cmp	r3, #2
 8007f6c:	d10b      	bne.n	8007f86 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	889b      	ldrh	r3, [r3, #4]
 8007f72:	0a1b      	lsrs	r3, r3, #8
 8007f74:	b29b      	uxth	r3, r3
 8007f76:	b2da      	uxtb	r2, r3
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007f7e:	6878      	ldr	r0, [r7, #4]
 8007f80:	f000 f913 	bl	80081aa <USBD_CtlSendStatus>
}
 8007f84:	e003      	b.n	8007f8e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007f86:	6839      	ldr	r1, [r7, #0]
 8007f88:	6878      	ldr	r0, [r7, #4]
 8007f8a:	f000 f860 	bl	800804e <USBD_CtlError>
}
 8007f8e:	bf00      	nop
 8007f90:	3708      	adds	r7, #8
 8007f92:	46bd      	mov	sp, r7
 8007f94:	bd80      	pop	{r7, pc}

08007f96 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f96:	b580      	push	{r7, lr}
 8007f98:	b082      	sub	sp, #8
 8007f9a:	af00      	add	r7, sp, #0
 8007f9c:	6078      	str	r0, [r7, #4]
 8007f9e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fa6:	b2db      	uxtb	r3, r3
 8007fa8:	3b01      	subs	r3, #1
 8007faa:	2b02      	cmp	r3, #2
 8007fac:	d80b      	bhi.n	8007fc6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	885b      	ldrh	r3, [r3, #2]
 8007fb2:	2b01      	cmp	r3, #1
 8007fb4:	d10c      	bne.n	8007fd0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	2200      	movs	r2, #0
 8007fba:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	f000 f8f3 	bl	80081aa <USBD_CtlSendStatus>
      }
      break;
 8007fc4:	e004      	b.n	8007fd0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007fc6:	6839      	ldr	r1, [r7, #0]
 8007fc8:	6878      	ldr	r0, [r7, #4]
 8007fca:	f000 f840 	bl	800804e <USBD_CtlError>
      break;
 8007fce:	e000      	b.n	8007fd2 <USBD_ClrFeature+0x3c>
      break;
 8007fd0:	bf00      	nop
  }
}
 8007fd2:	bf00      	nop
 8007fd4:	3708      	adds	r7, #8
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	bd80      	pop	{r7, pc}

08007fda <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007fda:	b580      	push	{r7, lr}
 8007fdc:	b084      	sub	sp, #16
 8007fde:	af00      	add	r7, sp, #0
 8007fe0:	6078      	str	r0, [r7, #4]
 8007fe2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007fe4:	683b      	ldr	r3, [r7, #0]
 8007fe6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	781a      	ldrb	r2, [r3, #0]
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	3301      	adds	r3, #1
 8007ff4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	781a      	ldrb	r2, [r3, #0]
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	3301      	adds	r3, #1
 8008002:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008004:	68f8      	ldr	r0, [r7, #12]
 8008006:	f7ff fa17 	bl	8007438 <SWAPBYTE>
 800800a:	4603      	mov	r3, r0
 800800c:	461a      	mov	r2, r3
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	3301      	adds	r3, #1
 8008016:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	3301      	adds	r3, #1
 800801c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800801e:	68f8      	ldr	r0, [r7, #12]
 8008020:	f7ff fa0a 	bl	8007438 <SWAPBYTE>
 8008024:	4603      	mov	r3, r0
 8008026:	461a      	mov	r2, r3
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	3301      	adds	r3, #1
 8008030:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	3301      	adds	r3, #1
 8008036:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008038:	68f8      	ldr	r0, [r7, #12]
 800803a:	f7ff f9fd 	bl	8007438 <SWAPBYTE>
 800803e:	4603      	mov	r3, r0
 8008040:	461a      	mov	r2, r3
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	80da      	strh	r2, [r3, #6]
}
 8008046:	bf00      	nop
 8008048:	3710      	adds	r7, #16
 800804a:	46bd      	mov	sp, r7
 800804c:	bd80      	pop	{r7, pc}

0800804e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800804e:	b580      	push	{r7, lr}
 8008050:	b082      	sub	sp, #8
 8008052:	af00      	add	r7, sp, #0
 8008054:	6078      	str	r0, [r7, #4]
 8008056:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008058:	2180      	movs	r1, #128	; 0x80
 800805a:	6878      	ldr	r0, [r7, #4]
 800805c:	f003 fa2e 	bl	800b4bc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008060:	2100      	movs	r1, #0
 8008062:	6878      	ldr	r0, [r7, #4]
 8008064:	f003 fa2a 	bl	800b4bc <USBD_LL_StallEP>
}
 8008068:	bf00      	nop
 800806a:	3708      	adds	r7, #8
 800806c:	46bd      	mov	sp, r7
 800806e:	bd80      	pop	{r7, pc}

08008070 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b086      	sub	sp, #24
 8008074:	af00      	add	r7, sp, #0
 8008076:	60f8      	str	r0, [r7, #12]
 8008078:	60b9      	str	r1, [r7, #8]
 800807a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800807c:	2300      	movs	r3, #0
 800807e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d036      	beq.n	80080f4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800808a:	6938      	ldr	r0, [r7, #16]
 800808c:	f000 f836 	bl	80080fc <USBD_GetLen>
 8008090:	4603      	mov	r3, r0
 8008092:	3301      	adds	r3, #1
 8008094:	b29b      	uxth	r3, r3
 8008096:	005b      	lsls	r3, r3, #1
 8008098:	b29a      	uxth	r2, r3
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800809e:	7dfb      	ldrb	r3, [r7, #23]
 80080a0:	68ba      	ldr	r2, [r7, #8]
 80080a2:	4413      	add	r3, r2
 80080a4:	687a      	ldr	r2, [r7, #4]
 80080a6:	7812      	ldrb	r2, [r2, #0]
 80080a8:	701a      	strb	r2, [r3, #0]
  idx++;
 80080aa:	7dfb      	ldrb	r3, [r7, #23]
 80080ac:	3301      	adds	r3, #1
 80080ae:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80080b0:	7dfb      	ldrb	r3, [r7, #23]
 80080b2:	68ba      	ldr	r2, [r7, #8]
 80080b4:	4413      	add	r3, r2
 80080b6:	2203      	movs	r2, #3
 80080b8:	701a      	strb	r2, [r3, #0]
  idx++;
 80080ba:	7dfb      	ldrb	r3, [r7, #23]
 80080bc:	3301      	adds	r3, #1
 80080be:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80080c0:	e013      	b.n	80080ea <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80080c2:	7dfb      	ldrb	r3, [r7, #23]
 80080c4:	68ba      	ldr	r2, [r7, #8]
 80080c6:	4413      	add	r3, r2
 80080c8:	693a      	ldr	r2, [r7, #16]
 80080ca:	7812      	ldrb	r2, [r2, #0]
 80080cc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80080ce:	693b      	ldr	r3, [r7, #16]
 80080d0:	3301      	adds	r3, #1
 80080d2:	613b      	str	r3, [r7, #16]
    idx++;
 80080d4:	7dfb      	ldrb	r3, [r7, #23]
 80080d6:	3301      	adds	r3, #1
 80080d8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80080da:	7dfb      	ldrb	r3, [r7, #23]
 80080dc:	68ba      	ldr	r2, [r7, #8]
 80080de:	4413      	add	r3, r2
 80080e0:	2200      	movs	r2, #0
 80080e2:	701a      	strb	r2, [r3, #0]
    idx++;
 80080e4:	7dfb      	ldrb	r3, [r7, #23]
 80080e6:	3301      	adds	r3, #1
 80080e8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80080ea:	693b      	ldr	r3, [r7, #16]
 80080ec:	781b      	ldrb	r3, [r3, #0]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d1e7      	bne.n	80080c2 <USBD_GetString+0x52>
 80080f2:	e000      	b.n	80080f6 <USBD_GetString+0x86>
    return;
 80080f4:	bf00      	nop
  }
}
 80080f6:	3718      	adds	r7, #24
 80080f8:	46bd      	mov	sp, r7
 80080fa:	bd80      	pop	{r7, pc}

080080fc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80080fc:	b480      	push	{r7}
 80080fe:	b085      	sub	sp, #20
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008104:	2300      	movs	r3, #0
 8008106:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800810c:	e005      	b.n	800811a <USBD_GetLen+0x1e>
  {
    len++;
 800810e:	7bfb      	ldrb	r3, [r7, #15]
 8008110:	3301      	adds	r3, #1
 8008112:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008114:	68bb      	ldr	r3, [r7, #8]
 8008116:	3301      	adds	r3, #1
 8008118:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800811a:	68bb      	ldr	r3, [r7, #8]
 800811c:	781b      	ldrb	r3, [r3, #0]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d1f5      	bne.n	800810e <USBD_GetLen+0x12>
  }

  return len;
 8008122:	7bfb      	ldrb	r3, [r7, #15]
}
 8008124:	4618      	mov	r0, r3
 8008126:	3714      	adds	r7, #20
 8008128:	46bd      	mov	sp, r7
 800812a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812e:	4770      	bx	lr

08008130 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b084      	sub	sp, #16
 8008134:	af00      	add	r7, sp, #0
 8008136:	60f8      	str	r0, [r7, #12]
 8008138:	60b9      	str	r1, [r7, #8]
 800813a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	2202      	movs	r2, #2
 8008140:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	687a      	ldr	r2, [r7, #4]
 8008148:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	687a      	ldr	r2, [r7, #4]
 800814e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	68ba      	ldr	r2, [r7, #8]
 8008154:	2100      	movs	r1, #0
 8008156:	68f8      	ldr	r0, [r7, #12]
 8008158:	f003 fa7e 	bl	800b658 <USBD_LL_Transmit>

  return USBD_OK;
 800815c:	2300      	movs	r3, #0
}
 800815e:	4618      	mov	r0, r3
 8008160:	3710      	adds	r7, #16
 8008162:	46bd      	mov	sp, r7
 8008164:	bd80      	pop	{r7, pc}

08008166 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008166:	b580      	push	{r7, lr}
 8008168:	b084      	sub	sp, #16
 800816a:	af00      	add	r7, sp, #0
 800816c:	60f8      	str	r0, [r7, #12]
 800816e:	60b9      	str	r1, [r7, #8]
 8008170:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	68ba      	ldr	r2, [r7, #8]
 8008176:	2100      	movs	r1, #0
 8008178:	68f8      	ldr	r0, [r7, #12]
 800817a:	f003 fa6d 	bl	800b658 <USBD_LL_Transmit>

  return USBD_OK;
 800817e:	2300      	movs	r3, #0
}
 8008180:	4618      	mov	r0, r3
 8008182:	3710      	adds	r7, #16
 8008184:	46bd      	mov	sp, r7
 8008186:	bd80      	pop	{r7, pc}

08008188 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008188:	b580      	push	{r7, lr}
 800818a:	b084      	sub	sp, #16
 800818c:	af00      	add	r7, sp, #0
 800818e:	60f8      	str	r0, [r7, #12]
 8008190:	60b9      	str	r1, [r7, #8]
 8008192:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	68ba      	ldr	r2, [r7, #8]
 8008198:	2100      	movs	r1, #0
 800819a:	68f8      	ldr	r0, [r7, #12]
 800819c:	f003 fa94 	bl	800b6c8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80081a0:	2300      	movs	r3, #0
}
 80081a2:	4618      	mov	r0, r3
 80081a4:	3710      	adds	r7, #16
 80081a6:	46bd      	mov	sp, r7
 80081a8:	bd80      	pop	{r7, pc}

080081aa <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80081aa:	b580      	push	{r7, lr}
 80081ac:	b082      	sub	sp, #8
 80081ae:	af00      	add	r7, sp, #0
 80081b0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	2204      	movs	r2, #4
 80081b6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80081ba:	2300      	movs	r3, #0
 80081bc:	2200      	movs	r2, #0
 80081be:	2100      	movs	r1, #0
 80081c0:	6878      	ldr	r0, [r7, #4]
 80081c2:	f003 fa49 	bl	800b658 <USBD_LL_Transmit>

  return USBD_OK;
 80081c6:	2300      	movs	r3, #0
}
 80081c8:	4618      	mov	r0, r3
 80081ca:	3708      	adds	r7, #8
 80081cc:	46bd      	mov	sp, r7
 80081ce:	bd80      	pop	{r7, pc}

080081d0 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b082      	sub	sp, #8
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2205      	movs	r2, #5
 80081dc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80081e0:	2300      	movs	r3, #0
 80081e2:	2200      	movs	r2, #0
 80081e4:	2100      	movs	r1, #0
 80081e6:	6878      	ldr	r0, [r7, #4]
 80081e8:	f003 fa6e 	bl	800b6c8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80081ec:	2300      	movs	r3, #0
}
 80081ee:	4618      	mov	r0, r3
 80081f0:	3708      	adds	r7, #8
 80081f2:	46bd      	mov	sp, r7
 80081f4:	bd80      	pop	{r7, pc}
	...

080081f8 <__NVIC_SetPriority>:
{
 80081f8:	b480      	push	{r7}
 80081fa:	b083      	sub	sp, #12
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	4603      	mov	r3, r0
 8008200:	6039      	str	r1, [r7, #0]
 8008202:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008204:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008208:	2b00      	cmp	r3, #0
 800820a:	db0a      	blt.n	8008222 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	b2da      	uxtb	r2, r3
 8008210:	490c      	ldr	r1, [pc, #48]	; (8008244 <__NVIC_SetPriority+0x4c>)
 8008212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008216:	0112      	lsls	r2, r2, #4
 8008218:	b2d2      	uxtb	r2, r2
 800821a:	440b      	add	r3, r1
 800821c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008220:	e00a      	b.n	8008238 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	b2da      	uxtb	r2, r3
 8008226:	4908      	ldr	r1, [pc, #32]	; (8008248 <__NVIC_SetPriority+0x50>)
 8008228:	79fb      	ldrb	r3, [r7, #7]
 800822a:	f003 030f 	and.w	r3, r3, #15
 800822e:	3b04      	subs	r3, #4
 8008230:	0112      	lsls	r2, r2, #4
 8008232:	b2d2      	uxtb	r2, r2
 8008234:	440b      	add	r3, r1
 8008236:	761a      	strb	r2, [r3, #24]
}
 8008238:	bf00      	nop
 800823a:	370c      	adds	r7, #12
 800823c:	46bd      	mov	sp, r7
 800823e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008242:	4770      	bx	lr
 8008244:	e000e100 	.word	0xe000e100
 8008248:	e000ed00 	.word	0xe000ed00

0800824c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800824c:	b580      	push	{r7, lr}
 800824e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008250:	2100      	movs	r1, #0
 8008252:	f06f 0004 	mvn.w	r0, #4
 8008256:	f7ff ffcf 	bl	80081f8 <__NVIC_SetPriority>
#endif
}
 800825a:	bf00      	nop
 800825c:	bd80      	pop	{r7, pc}
	...

08008260 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008260:	b480      	push	{r7}
 8008262:	b083      	sub	sp, #12
 8008264:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008266:	f3ef 8305 	mrs	r3, IPSR
 800826a:	603b      	str	r3, [r7, #0]
  return(result);
 800826c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800826e:	2b00      	cmp	r3, #0
 8008270:	d003      	beq.n	800827a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008272:	f06f 0305 	mvn.w	r3, #5
 8008276:	607b      	str	r3, [r7, #4]
 8008278:	e00c      	b.n	8008294 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800827a:	4b0a      	ldr	r3, [pc, #40]	; (80082a4 <osKernelInitialize+0x44>)
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d105      	bne.n	800828e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008282:	4b08      	ldr	r3, [pc, #32]	; (80082a4 <osKernelInitialize+0x44>)
 8008284:	2201      	movs	r2, #1
 8008286:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008288:	2300      	movs	r3, #0
 800828a:	607b      	str	r3, [r7, #4]
 800828c:	e002      	b.n	8008294 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800828e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008292:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008294:	687b      	ldr	r3, [r7, #4]
}
 8008296:	4618      	mov	r0, r3
 8008298:	370c      	adds	r7, #12
 800829a:	46bd      	mov	sp, r7
 800829c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a0:	4770      	bx	lr
 80082a2:	bf00      	nop
 80082a4:	20000308 	.word	0x20000308

080082a8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b082      	sub	sp, #8
 80082ac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80082ae:	f3ef 8305 	mrs	r3, IPSR
 80082b2:	603b      	str	r3, [r7, #0]
  return(result);
 80082b4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d003      	beq.n	80082c2 <osKernelStart+0x1a>
    stat = osErrorISR;
 80082ba:	f06f 0305 	mvn.w	r3, #5
 80082be:	607b      	str	r3, [r7, #4]
 80082c0:	e010      	b.n	80082e4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80082c2:	4b0b      	ldr	r3, [pc, #44]	; (80082f0 <osKernelStart+0x48>)
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	2b01      	cmp	r3, #1
 80082c8:	d109      	bne.n	80082de <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80082ca:	f7ff ffbf 	bl	800824c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80082ce:	4b08      	ldr	r3, [pc, #32]	; (80082f0 <osKernelStart+0x48>)
 80082d0:	2202      	movs	r2, #2
 80082d2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80082d4:	f001 f866 	bl	80093a4 <vTaskStartScheduler>
      stat = osOK;
 80082d8:	2300      	movs	r3, #0
 80082da:	607b      	str	r3, [r7, #4]
 80082dc:	e002      	b.n	80082e4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80082de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80082e2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80082e4:	687b      	ldr	r3, [r7, #4]
}
 80082e6:	4618      	mov	r0, r3
 80082e8:	3708      	adds	r7, #8
 80082ea:	46bd      	mov	sp, r7
 80082ec:	bd80      	pop	{r7, pc}
 80082ee:	bf00      	nop
 80082f0:	20000308 	.word	0x20000308

080082f4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b08e      	sub	sp, #56	; 0x38
 80082f8:	af04      	add	r7, sp, #16
 80082fa:	60f8      	str	r0, [r7, #12]
 80082fc:	60b9      	str	r1, [r7, #8]
 80082fe:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008300:	2300      	movs	r3, #0
 8008302:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008304:	f3ef 8305 	mrs	r3, IPSR
 8008308:	617b      	str	r3, [r7, #20]
  return(result);
 800830a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800830c:	2b00      	cmp	r3, #0
 800830e:	d17e      	bne.n	800840e <osThreadNew+0x11a>
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d07b      	beq.n	800840e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8008316:	2380      	movs	r3, #128	; 0x80
 8008318:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800831a:	2318      	movs	r3, #24
 800831c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800831e:	2300      	movs	r3, #0
 8008320:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8008322:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008326:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d045      	beq.n	80083ba <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d002      	beq.n	800833c <osThreadNew+0x48>
        name = attr->name;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	699b      	ldr	r3, [r3, #24]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d002      	beq.n	800834a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	699b      	ldr	r3, [r3, #24]
 8008348:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800834a:	69fb      	ldr	r3, [r7, #28]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d008      	beq.n	8008362 <osThreadNew+0x6e>
 8008350:	69fb      	ldr	r3, [r7, #28]
 8008352:	2b38      	cmp	r3, #56	; 0x38
 8008354:	d805      	bhi.n	8008362 <osThreadNew+0x6e>
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	685b      	ldr	r3, [r3, #4]
 800835a:	f003 0301 	and.w	r3, r3, #1
 800835e:	2b00      	cmp	r3, #0
 8008360:	d001      	beq.n	8008366 <osThreadNew+0x72>
        return (NULL);
 8008362:	2300      	movs	r3, #0
 8008364:	e054      	b.n	8008410 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	695b      	ldr	r3, [r3, #20]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d003      	beq.n	8008376 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	695b      	ldr	r3, [r3, #20]
 8008372:	089b      	lsrs	r3, r3, #2
 8008374:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	689b      	ldr	r3, [r3, #8]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d00e      	beq.n	800839c <osThreadNew+0xa8>
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	68db      	ldr	r3, [r3, #12]
 8008382:	2b5b      	cmp	r3, #91	; 0x5b
 8008384:	d90a      	bls.n	800839c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800838a:	2b00      	cmp	r3, #0
 800838c:	d006      	beq.n	800839c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	695b      	ldr	r3, [r3, #20]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d002      	beq.n	800839c <osThreadNew+0xa8>
        mem = 1;
 8008396:	2301      	movs	r3, #1
 8008398:	61bb      	str	r3, [r7, #24]
 800839a:	e010      	b.n	80083be <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	689b      	ldr	r3, [r3, #8]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d10c      	bne.n	80083be <osThreadNew+0xca>
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	68db      	ldr	r3, [r3, #12]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d108      	bne.n	80083be <osThreadNew+0xca>
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	691b      	ldr	r3, [r3, #16]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d104      	bne.n	80083be <osThreadNew+0xca>
          mem = 0;
 80083b4:	2300      	movs	r3, #0
 80083b6:	61bb      	str	r3, [r7, #24]
 80083b8:	e001      	b.n	80083be <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80083ba:	2300      	movs	r3, #0
 80083bc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80083be:	69bb      	ldr	r3, [r7, #24]
 80083c0:	2b01      	cmp	r3, #1
 80083c2:	d110      	bne.n	80083e6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80083c8:	687a      	ldr	r2, [r7, #4]
 80083ca:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80083cc:	9202      	str	r2, [sp, #8]
 80083ce:	9301      	str	r3, [sp, #4]
 80083d0:	69fb      	ldr	r3, [r7, #28]
 80083d2:	9300      	str	r3, [sp, #0]
 80083d4:	68bb      	ldr	r3, [r7, #8]
 80083d6:	6a3a      	ldr	r2, [r7, #32]
 80083d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80083da:	68f8      	ldr	r0, [r7, #12]
 80083dc:	f000 fe0c 	bl	8008ff8 <xTaskCreateStatic>
 80083e0:	4603      	mov	r3, r0
 80083e2:	613b      	str	r3, [r7, #16]
 80083e4:	e013      	b.n	800840e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80083e6:	69bb      	ldr	r3, [r7, #24]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d110      	bne.n	800840e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80083ec:	6a3b      	ldr	r3, [r7, #32]
 80083ee:	b29a      	uxth	r2, r3
 80083f0:	f107 0310 	add.w	r3, r7, #16
 80083f4:	9301      	str	r3, [sp, #4]
 80083f6:	69fb      	ldr	r3, [r7, #28]
 80083f8:	9300      	str	r3, [sp, #0]
 80083fa:	68bb      	ldr	r3, [r7, #8]
 80083fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80083fe:	68f8      	ldr	r0, [r7, #12]
 8008400:	f000 fe57 	bl	80090b2 <xTaskCreate>
 8008404:	4603      	mov	r3, r0
 8008406:	2b01      	cmp	r3, #1
 8008408:	d001      	beq.n	800840e <osThreadNew+0x11a>
            hTask = NULL;
 800840a:	2300      	movs	r3, #0
 800840c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800840e:	693b      	ldr	r3, [r7, #16]
}
 8008410:	4618      	mov	r0, r3
 8008412:	3728      	adds	r7, #40	; 0x28
 8008414:	46bd      	mov	sp, r7
 8008416:	bd80      	pop	{r7, pc}

08008418 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008418:	b580      	push	{r7, lr}
 800841a:	b084      	sub	sp, #16
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008420:	f3ef 8305 	mrs	r3, IPSR
 8008424:	60bb      	str	r3, [r7, #8]
  return(result);
 8008426:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008428:	2b00      	cmp	r3, #0
 800842a:	d003      	beq.n	8008434 <osDelay+0x1c>
    stat = osErrorISR;
 800842c:	f06f 0305 	mvn.w	r3, #5
 8008430:	60fb      	str	r3, [r7, #12]
 8008432:	e007      	b.n	8008444 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008434:	2300      	movs	r3, #0
 8008436:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d002      	beq.n	8008444 <osDelay+0x2c>
      vTaskDelay(ticks);
 800843e:	6878      	ldr	r0, [r7, #4]
 8008440:	f000 ff7c 	bl	800933c <vTaskDelay>
    }
  }

  return (stat);
 8008444:	68fb      	ldr	r3, [r7, #12]
}
 8008446:	4618      	mov	r0, r3
 8008448:	3710      	adds	r7, #16
 800844a:	46bd      	mov	sp, r7
 800844c:	bd80      	pop	{r7, pc}
	...

08008450 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008450:	b480      	push	{r7}
 8008452:	b085      	sub	sp, #20
 8008454:	af00      	add	r7, sp, #0
 8008456:	60f8      	str	r0, [r7, #12]
 8008458:	60b9      	str	r1, [r7, #8]
 800845a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	4a07      	ldr	r2, [pc, #28]	; (800847c <vApplicationGetIdleTaskMemory+0x2c>)
 8008460:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008462:	68bb      	ldr	r3, [r7, #8]
 8008464:	4a06      	ldr	r2, [pc, #24]	; (8008480 <vApplicationGetIdleTaskMemory+0x30>)
 8008466:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2280      	movs	r2, #128	; 0x80
 800846c:	601a      	str	r2, [r3, #0]
}
 800846e:	bf00      	nop
 8008470:	3714      	adds	r7, #20
 8008472:	46bd      	mov	sp, r7
 8008474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008478:	4770      	bx	lr
 800847a:	bf00      	nop
 800847c:	2000030c 	.word	0x2000030c
 8008480:	20000368 	.word	0x20000368

08008484 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008484:	b480      	push	{r7}
 8008486:	b085      	sub	sp, #20
 8008488:	af00      	add	r7, sp, #0
 800848a:	60f8      	str	r0, [r7, #12]
 800848c:	60b9      	str	r1, [r7, #8]
 800848e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	4a07      	ldr	r2, [pc, #28]	; (80084b0 <vApplicationGetTimerTaskMemory+0x2c>)
 8008494:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008496:	68bb      	ldr	r3, [r7, #8]
 8008498:	4a06      	ldr	r2, [pc, #24]	; (80084b4 <vApplicationGetTimerTaskMemory+0x30>)
 800849a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80084a2:	601a      	str	r2, [r3, #0]
}
 80084a4:	bf00      	nop
 80084a6:	3714      	adds	r7, #20
 80084a8:	46bd      	mov	sp, r7
 80084aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ae:	4770      	bx	lr
 80084b0:	20000568 	.word	0x20000568
 80084b4:	200005c4 	.word	0x200005c4

080084b8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80084b8:	b480      	push	{r7}
 80084ba:	b083      	sub	sp, #12
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	f103 0208 	add.w	r2, r3, #8
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80084d0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	f103 0208 	add.w	r2, r3, #8
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	f103 0208 	add.w	r2, r3, #8
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	2200      	movs	r2, #0
 80084ea:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80084ec:	bf00      	nop
 80084ee:	370c      	adds	r7, #12
 80084f0:	46bd      	mov	sp, r7
 80084f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f6:	4770      	bx	lr

080084f8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80084f8:	b480      	push	{r7}
 80084fa:	b083      	sub	sp, #12
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	2200      	movs	r2, #0
 8008504:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008506:	bf00      	nop
 8008508:	370c      	adds	r7, #12
 800850a:	46bd      	mov	sp, r7
 800850c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008510:	4770      	bx	lr

08008512 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008512:	b480      	push	{r7}
 8008514:	b085      	sub	sp, #20
 8008516:	af00      	add	r7, sp, #0
 8008518:	6078      	str	r0, [r7, #4]
 800851a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	685b      	ldr	r3, [r3, #4]
 8008520:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008522:	683b      	ldr	r3, [r7, #0]
 8008524:	68fa      	ldr	r2, [r7, #12]
 8008526:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	689a      	ldr	r2, [r3, #8]
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	689b      	ldr	r3, [r3, #8]
 8008534:	683a      	ldr	r2, [r7, #0]
 8008536:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	683a      	ldr	r2, [r7, #0]
 800853c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800853e:	683b      	ldr	r3, [r7, #0]
 8008540:	687a      	ldr	r2, [r7, #4]
 8008542:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	1c5a      	adds	r2, r3, #1
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	601a      	str	r2, [r3, #0]
}
 800854e:	bf00      	nop
 8008550:	3714      	adds	r7, #20
 8008552:	46bd      	mov	sp, r7
 8008554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008558:	4770      	bx	lr

0800855a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800855a:	b480      	push	{r7}
 800855c:	b085      	sub	sp, #20
 800855e:	af00      	add	r7, sp, #0
 8008560:	6078      	str	r0, [r7, #4]
 8008562:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800856a:	68bb      	ldr	r3, [r7, #8]
 800856c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008570:	d103      	bne.n	800857a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	691b      	ldr	r3, [r3, #16]
 8008576:	60fb      	str	r3, [r7, #12]
 8008578:	e00c      	b.n	8008594 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	3308      	adds	r3, #8
 800857e:	60fb      	str	r3, [r7, #12]
 8008580:	e002      	b.n	8008588 <vListInsert+0x2e>
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	685b      	ldr	r3, [r3, #4]
 8008586:	60fb      	str	r3, [r7, #12]
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	685b      	ldr	r3, [r3, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	68ba      	ldr	r2, [r7, #8]
 8008590:	429a      	cmp	r2, r3
 8008592:	d2f6      	bcs.n	8008582 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	685a      	ldr	r2, [r3, #4]
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	685b      	ldr	r3, [r3, #4]
 80085a0:	683a      	ldr	r2, [r7, #0]
 80085a2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80085a4:	683b      	ldr	r3, [r7, #0]
 80085a6:	68fa      	ldr	r2, [r7, #12]
 80085a8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	683a      	ldr	r2, [r7, #0]
 80085ae:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80085b0:	683b      	ldr	r3, [r7, #0]
 80085b2:	687a      	ldr	r2, [r7, #4]
 80085b4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	1c5a      	adds	r2, r3, #1
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	601a      	str	r2, [r3, #0]
}
 80085c0:	bf00      	nop
 80085c2:	3714      	adds	r7, #20
 80085c4:	46bd      	mov	sp, r7
 80085c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ca:	4770      	bx	lr

080085cc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80085cc:	b480      	push	{r7}
 80085ce:	b085      	sub	sp, #20
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	691b      	ldr	r3, [r3, #16]
 80085d8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	685b      	ldr	r3, [r3, #4]
 80085de:	687a      	ldr	r2, [r7, #4]
 80085e0:	6892      	ldr	r2, [r2, #8]
 80085e2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	689b      	ldr	r3, [r3, #8]
 80085e8:	687a      	ldr	r2, [r7, #4]
 80085ea:	6852      	ldr	r2, [r2, #4]
 80085ec:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	685b      	ldr	r3, [r3, #4]
 80085f2:	687a      	ldr	r2, [r7, #4]
 80085f4:	429a      	cmp	r2, r3
 80085f6:	d103      	bne.n	8008600 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	689a      	ldr	r2, [r3, #8]
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2200      	movs	r2, #0
 8008604:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	1e5a      	subs	r2, r3, #1
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	681b      	ldr	r3, [r3, #0]
}
 8008614:	4618      	mov	r0, r3
 8008616:	3714      	adds	r7, #20
 8008618:	46bd      	mov	sp, r7
 800861a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861e:	4770      	bx	lr

08008620 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008620:	b580      	push	{r7, lr}
 8008622:	b084      	sub	sp, #16
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
 8008628:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d10a      	bne.n	800864a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008638:	f383 8811 	msr	BASEPRI, r3
 800863c:	f3bf 8f6f 	isb	sy
 8008640:	f3bf 8f4f 	dsb	sy
 8008644:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008646:	bf00      	nop
 8008648:	e7fe      	b.n	8008648 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800864a:	f002 f84b 	bl	800a6e4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	681a      	ldr	r2, [r3, #0]
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008656:	68f9      	ldr	r1, [r7, #12]
 8008658:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800865a:	fb01 f303 	mul.w	r3, r1, r3
 800865e:	441a      	add	r2, r3
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	2200      	movs	r2, #0
 8008668:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	681a      	ldr	r2, [r3, #0]
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	681a      	ldr	r2, [r3, #0]
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800867a:	3b01      	subs	r3, #1
 800867c:	68f9      	ldr	r1, [r7, #12]
 800867e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008680:	fb01 f303 	mul.w	r3, r1, r3
 8008684:	441a      	add	r2, r3
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	22ff      	movs	r2, #255	; 0xff
 800868e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	22ff      	movs	r2, #255	; 0xff
 8008696:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800869a:	683b      	ldr	r3, [r7, #0]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d114      	bne.n	80086ca <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	691b      	ldr	r3, [r3, #16]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d01a      	beq.n	80086de <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	3310      	adds	r3, #16
 80086ac:	4618      	mov	r0, r3
 80086ae:	f001 f903 	bl	80098b8 <xTaskRemoveFromEventList>
 80086b2:	4603      	mov	r3, r0
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d012      	beq.n	80086de <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80086b8:	4b0c      	ldr	r3, [pc, #48]	; (80086ec <xQueueGenericReset+0xcc>)
 80086ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086be:	601a      	str	r2, [r3, #0]
 80086c0:	f3bf 8f4f 	dsb	sy
 80086c4:	f3bf 8f6f 	isb	sy
 80086c8:	e009      	b.n	80086de <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	3310      	adds	r3, #16
 80086ce:	4618      	mov	r0, r3
 80086d0:	f7ff fef2 	bl	80084b8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	3324      	adds	r3, #36	; 0x24
 80086d8:	4618      	mov	r0, r3
 80086da:	f7ff feed 	bl	80084b8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80086de:	f002 f831 	bl	800a744 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80086e2:	2301      	movs	r3, #1
}
 80086e4:	4618      	mov	r0, r3
 80086e6:	3710      	adds	r7, #16
 80086e8:	46bd      	mov	sp, r7
 80086ea:	bd80      	pop	{r7, pc}
 80086ec:	e000ed04 	.word	0xe000ed04

080086f0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80086f0:	b580      	push	{r7, lr}
 80086f2:	b08e      	sub	sp, #56	; 0x38
 80086f4:	af02      	add	r7, sp, #8
 80086f6:	60f8      	str	r0, [r7, #12]
 80086f8:	60b9      	str	r1, [r7, #8]
 80086fa:	607a      	str	r2, [r7, #4]
 80086fc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d10a      	bne.n	800871a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008708:	f383 8811 	msr	BASEPRI, r3
 800870c:	f3bf 8f6f 	isb	sy
 8008710:	f3bf 8f4f 	dsb	sy
 8008714:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008716:	bf00      	nop
 8008718:	e7fe      	b.n	8008718 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d10a      	bne.n	8008736 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008724:	f383 8811 	msr	BASEPRI, r3
 8008728:	f3bf 8f6f 	isb	sy
 800872c:	f3bf 8f4f 	dsb	sy
 8008730:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008732:	bf00      	nop
 8008734:	e7fe      	b.n	8008734 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d002      	beq.n	8008742 <xQueueGenericCreateStatic+0x52>
 800873c:	68bb      	ldr	r3, [r7, #8]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d001      	beq.n	8008746 <xQueueGenericCreateStatic+0x56>
 8008742:	2301      	movs	r3, #1
 8008744:	e000      	b.n	8008748 <xQueueGenericCreateStatic+0x58>
 8008746:	2300      	movs	r3, #0
 8008748:	2b00      	cmp	r3, #0
 800874a:	d10a      	bne.n	8008762 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800874c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008750:	f383 8811 	msr	BASEPRI, r3
 8008754:	f3bf 8f6f 	isb	sy
 8008758:	f3bf 8f4f 	dsb	sy
 800875c:	623b      	str	r3, [r7, #32]
}
 800875e:	bf00      	nop
 8008760:	e7fe      	b.n	8008760 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d102      	bne.n	800876e <xQueueGenericCreateStatic+0x7e>
 8008768:	68bb      	ldr	r3, [r7, #8]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d101      	bne.n	8008772 <xQueueGenericCreateStatic+0x82>
 800876e:	2301      	movs	r3, #1
 8008770:	e000      	b.n	8008774 <xQueueGenericCreateStatic+0x84>
 8008772:	2300      	movs	r3, #0
 8008774:	2b00      	cmp	r3, #0
 8008776:	d10a      	bne.n	800878e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800877c:	f383 8811 	msr	BASEPRI, r3
 8008780:	f3bf 8f6f 	isb	sy
 8008784:	f3bf 8f4f 	dsb	sy
 8008788:	61fb      	str	r3, [r7, #28]
}
 800878a:	bf00      	nop
 800878c:	e7fe      	b.n	800878c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800878e:	2350      	movs	r3, #80	; 0x50
 8008790:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008792:	697b      	ldr	r3, [r7, #20]
 8008794:	2b50      	cmp	r3, #80	; 0x50
 8008796:	d00a      	beq.n	80087ae <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800879c:	f383 8811 	msr	BASEPRI, r3
 80087a0:	f3bf 8f6f 	isb	sy
 80087a4:	f3bf 8f4f 	dsb	sy
 80087a8:	61bb      	str	r3, [r7, #24]
}
 80087aa:	bf00      	nop
 80087ac:	e7fe      	b.n	80087ac <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80087ae:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80087b0:	683b      	ldr	r3, [r7, #0]
 80087b2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80087b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d00d      	beq.n	80087d6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80087ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087bc:	2201      	movs	r2, #1
 80087be:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80087c2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80087c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087c8:	9300      	str	r3, [sp, #0]
 80087ca:	4613      	mov	r3, r2
 80087cc:	687a      	ldr	r2, [r7, #4]
 80087ce:	68b9      	ldr	r1, [r7, #8]
 80087d0:	68f8      	ldr	r0, [r7, #12]
 80087d2:	f000 f805 	bl	80087e0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80087d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80087d8:	4618      	mov	r0, r3
 80087da:	3730      	adds	r7, #48	; 0x30
 80087dc:	46bd      	mov	sp, r7
 80087de:	bd80      	pop	{r7, pc}

080087e0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b084      	sub	sp, #16
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	60f8      	str	r0, [r7, #12]
 80087e8:	60b9      	str	r1, [r7, #8]
 80087ea:	607a      	str	r2, [r7, #4]
 80087ec:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80087ee:	68bb      	ldr	r3, [r7, #8]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d103      	bne.n	80087fc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80087f4:	69bb      	ldr	r3, [r7, #24]
 80087f6:	69ba      	ldr	r2, [r7, #24]
 80087f8:	601a      	str	r2, [r3, #0]
 80087fa:	e002      	b.n	8008802 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80087fc:	69bb      	ldr	r3, [r7, #24]
 80087fe:	687a      	ldr	r2, [r7, #4]
 8008800:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008802:	69bb      	ldr	r3, [r7, #24]
 8008804:	68fa      	ldr	r2, [r7, #12]
 8008806:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008808:	69bb      	ldr	r3, [r7, #24]
 800880a:	68ba      	ldr	r2, [r7, #8]
 800880c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800880e:	2101      	movs	r1, #1
 8008810:	69b8      	ldr	r0, [r7, #24]
 8008812:	f7ff ff05 	bl	8008620 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008816:	69bb      	ldr	r3, [r7, #24]
 8008818:	78fa      	ldrb	r2, [r7, #3]
 800881a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800881e:	bf00      	nop
 8008820:	3710      	adds	r7, #16
 8008822:	46bd      	mov	sp, r7
 8008824:	bd80      	pop	{r7, pc}
	...

08008828 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b08e      	sub	sp, #56	; 0x38
 800882c:	af00      	add	r7, sp, #0
 800882e:	60f8      	str	r0, [r7, #12]
 8008830:	60b9      	str	r1, [r7, #8]
 8008832:	607a      	str	r2, [r7, #4]
 8008834:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008836:	2300      	movs	r3, #0
 8008838:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800883e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008840:	2b00      	cmp	r3, #0
 8008842:	d10a      	bne.n	800885a <xQueueGenericSend+0x32>
	__asm volatile
 8008844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008848:	f383 8811 	msr	BASEPRI, r3
 800884c:	f3bf 8f6f 	isb	sy
 8008850:	f3bf 8f4f 	dsb	sy
 8008854:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008856:	bf00      	nop
 8008858:	e7fe      	b.n	8008858 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800885a:	68bb      	ldr	r3, [r7, #8]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d103      	bne.n	8008868 <xQueueGenericSend+0x40>
 8008860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008864:	2b00      	cmp	r3, #0
 8008866:	d101      	bne.n	800886c <xQueueGenericSend+0x44>
 8008868:	2301      	movs	r3, #1
 800886a:	e000      	b.n	800886e <xQueueGenericSend+0x46>
 800886c:	2300      	movs	r3, #0
 800886e:	2b00      	cmp	r3, #0
 8008870:	d10a      	bne.n	8008888 <xQueueGenericSend+0x60>
	__asm volatile
 8008872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008876:	f383 8811 	msr	BASEPRI, r3
 800887a:	f3bf 8f6f 	isb	sy
 800887e:	f3bf 8f4f 	dsb	sy
 8008882:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008884:	bf00      	nop
 8008886:	e7fe      	b.n	8008886 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008888:	683b      	ldr	r3, [r7, #0]
 800888a:	2b02      	cmp	r3, #2
 800888c:	d103      	bne.n	8008896 <xQueueGenericSend+0x6e>
 800888e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008890:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008892:	2b01      	cmp	r3, #1
 8008894:	d101      	bne.n	800889a <xQueueGenericSend+0x72>
 8008896:	2301      	movs	r3, #1
 8008898:	e000      	b.n	800889c <xQueueGenericSend+0x74>
 800889a:	2300      	movs	r3, #0
 800889c:	2b00      	cmp	r3, #0
 800889e:	d10a      	bne.n	80088b6 <xQueueGenericSend+0x8e>
	__asm volatile
 80088a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088a4:	f383 8811 	msr	BASEPRI, r3
 80088a8:	f3bf 8f6f 	isb	sy
 80088ac:	f3bf 8f4f 	dsb	sy
 80088b0:	623b      	str	r3, [r7, #32]
}
 80088b2:	bf00      	nop
 80088b4:	e7fe      	b.n	80088b4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80088b6:	f001 f9bd 	bl	8009c34 <xTaskGetSchedulerState>
 80088ba:	4603      	mov	r3, r0
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d102      	bne.n	80088c6 <xQueueGenericSend+0x9e>
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d101      	bne.n	80088ca <xQueueGenericSend+0xa2>
 80088c6:	2301      	movs	r3, #1
 80088c8:	e000      	b.n	80088cc <xQueueGenericSend+0xa4>
 80088ca:	2300      	movs	r3, #0
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d10a      	bne.n	80088e6 <xQueueGenericSend+0xbe>
	__asm volatile
 80088d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088d4:	f383 8811 	msr	BASEPRI, r3
 80088d8:	f3bf 8f6f 	isb	sy
 80088dc:	f3bf 8f4f 	dsb	sy
 80088e0:	61fb      	str	r3, [r7, #28]
}
 80088e2:	bf00      	nop
 80088e4:	e7fe      	b.n	80088e4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80088e6:	f001 fefd 	bl	800a6e4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80088ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80088ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088f2:	429a      	cmp	r2, r3
 80088f4:	d302      	bcc.n	80088fc <xQueueGenericSend+0xd4>
 80088f6:	683b      	ldr	r3, [r7, #0]
 80088f8:	2b02      	cmp	r3, #2
 80088fa:	d129      	bne.n	8008950 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80088fc:	683a      	ldr	r2, [r7, #0]
 80088fe:	68b9      	ldr	r1, [r7, #8]
 8008900:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008902:	f000 fa0b 	bl	8008d1c <prvCopyDataToQueue>
 8008906:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800890a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800890c:	2b00      	cmp	r3, #0
 800890e:	d010      	beq.n	8008932 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008912:	3324      	adds	r3, #36	; 0x24
 8008914:	4618      	mov	r0, r3
 8008916:	f000 ffcf 	bl	80098b8 <xTaskRemoveFromEventList>
 800891a:	4603      	mov	r3, r0
 800891c:	2b00      	cmp	r3, #0
 800891e:	d013      	beq.n	8008948 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008920:	4b3f      	ldr	r3, [pc, #252]	; (8008a20 <xQueueGenericSend+0x1f8>)
 8008922:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008926:	601a      	str	r2, [r3, #0]
 8008928:	f3bf 8f4f 	dsb	sy
 800892c:	f3bf 8f6f 	isb	sy
 8008930:	e00a      	b.n	8008948 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008934:	2b00      	cmp	r3, #0
 8008936:	d007      	beq.n	8008948 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008938:	4b39      	ldr	r3, [pc, #228]	; (8008a20 <xQueueGenericSend+0x1f8>)
 800893a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800893e:	601a      	str	r2, [r3, #0]
 8008940:	f3bf 8f4f 	dsb	sy
 8008944:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008948:	f001 fefc 	bl	800a744 <vPortExitCritical>
				return pdPASS;
 800894c:	2301      	movs	r3, #1
 800894e:	e063      	b.n	8008a18 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d103      	bne.n	800895e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008956:	f001 fef5 	bl	800a744 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800895a:	2300      	movs	r3, #0
 800895c:	e05c      	b.n	8008a18 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800895e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008960:	2b00      	cmp	r3, #0
 8008962:	d106      	bne.n	8008972 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008964:	f107 0314 	add.w	r3, r7, #20
 8008968:	4618      	mov	r0, r3
 800896a:	f001 f809 	bl	8009980 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800896e:	2301      	movs	r3, #1
 8008970:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008972:	f001 fee7 	bl	800a744 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008976:	f000 fd7b 	bl	8009470 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800897a:	f001 feb3 	bl	800a6e4 <vPortEnterCritical>
 800897e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008980:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008984:	b25b      	sxtb	r3, r3
 8008986:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800898a:	d103      	bne.n	8008994 <xQueueGenericSend+0x16c>
 800898c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800898e:	2200      	movs	r2, #0
 8008990:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008996:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800899a:	b25b      	sxtb	r3, r3
 800899c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80089a0:	d103      	bne.n	80089aa <xQueueGenericSend+0x182>
 80089a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089a4:	2200      	movs	r2, #0
 80089a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80089aa:	f001 fecb 	bl	800a744 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80089ae:	1d3a      	adds	r2, r7, #4
 80089b0:	f107 0314 	add.w	r3, r7, #20
 80089b4:	4611      	mov	r1, r2
 80089b6:	4618      	mov	r0, r3
 80089b8:	f000 fff8 	bl	80099ac <xTaskCheckForTimeOut>
 80089bc:	4603      	mov	r3, r0
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d124      	bne.n	8008a0c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80089c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80089c4:	f000 faa2 	bl	8008f0c <prvIsQueueFull>
 80089c8:	4603      	mov	r3, r0
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d018      	beq.n	8008a00 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80089ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089d0:	3310      	adds	r3, #16
 80089d2:	687a      	ldr	r2, [r7, #4]
 80089d4:	4611      	mov	r1, r2
 80089d6:	4618      	mov	r0, r3
 80089d8:	f000 ff1e 	bl	8009818 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80089dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80089de:	f000 fa2d 	bl	8008e3c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80089e2:	f000 fd53 	bl	800948c <xTaskResumeAll>
 80089e6:	4603      	mov	r3, r0
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	f47f af7c 	bne.w	80088e6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80089ee:	4b0c      	ldr	r3, [pc, #48]	; (8008a20 <xQueueGenericSend+0x1f8>)
 80089f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089f4:	601a      	str	r2, [r3, #0]
 80089f6:	f3bf 8f4f 	dsb	sy
 80089fa:	f3bf 8f6f 	isb	sy
 80089fe:	e772      	b.n	80088e6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008a00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008a02:	f000 fa1b 	bl	8008e3c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008a06:	f000 fd41 	bl	800948c <xTaskResumeAll>
 8008a0a:	e76c      	b.n	80088e6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008a0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008a0e:	f000 fa15 	bl	8008e3c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008a12:	f000 fd3b 	bl	800948c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008a16:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008a18:	4618      	mov	r0, r3
 8008a1a:	3738      	adds	r7, #56	; 0x38
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	bd80      	pop	{r7, pc}
 8008a20:	e000ed04 	.word	0xe000ed04

08008a24 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b090      	sub	sp, #64	; 0x40
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	60f8      	str	r0, [r7, #12]
 8008a2c:	60b9      	str	r1, [r7, #8]
 8008a2e:	607a      	str	r2, [r7, #4]
 8008a30:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8008a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d10a      	bne.n	8008a52 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a40:	f383 8811 	msr	BASEPRI, r3
 8008a44:	f3bf 8f6f 	isb	sy
 8008a48:	f3bf 8f4f 	dsb	sy
 8008a4c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008a4e:	bf00      	nop
 8008a50:	e7fe      	b.n	8008a50 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008a52:	68bb      	ldr	r3, [r7, #8]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d103      	bne.n	8008a60 <xQueueGenericSendFromISR+0x3c>
 8008a58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d101      	bne.n	8008a64 <xQueueGenericSendFromISR+0x40>
 8008a60:	2301      	movs	r3, #1
 8008a62:	e000      	b.n	8008a66 <xQueueGenericSendFromISR+0x42>
 8008a64:	2300      	movs	r3, #0
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d10a      	bne.n	8008a80 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8008a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a6e:	f383 8811 	msr	BASEPRI, r3
 8008a72:	f3bf 8f6f 	isb	sy
 8008a76:	f3bf 8f4f 	dsb	sy
 8008a7a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008a7c:	bf00      	nop
 8008a7e:	e7fe      	b.n	8008a7e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008a80:	683b      	ldr	r3, [r7, #0]
 8008a82:	2b02      	cmp	r3, #2
 8008a84:	d103      	bne.n	8008a8e <xQueueGenericSendFromISR+0x6a>
 8008a86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a8a:	2b01      	cmp	r3, #1
 8008a8c:	d101      	bne.n	8008a92 <xQueueGenericSendFromISR+0x6e>
 8008a8e:	2301      	movs	r3, #1
 8008a90:	e000      	b.n	8008a94 <xQueueGenericSendFromISR+0x70>
 8008a92:	2300      	movs	r3, #0
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d10a      	bne.n	8008aae <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008a98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a9c:	f383 8811 	msr	BASEPRI, r3
 8008aa0:	f3bf 8f6f 	isb	sy
 8008aa4:	f3bf 8f4f 	dsb	sy
 8008aa8:	623b      	str	r3, [r7, #32]
}
 8008aaa:	bf00      	nop
 8008aac:	e7fe      	b.n	8008aac <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008aae:	f001 fefb 	bl	800a8a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008ab2:	f3ef 8211 	mrs	r2, BASEPRI
 8008ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aba:	f383 8811 	msr	BASEPRI, r3
 8008abe:	f3bf 8f6f 	isb	sy
 8008ac2:	f3bf 8f4f 	dsb	sy
 8008ac6:	61fa      	str	r2, [r7, #28]
 8008ac8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008aca:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008acc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008ace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ad0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ad4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ad6:	429a      	cmp	r2, r3
 8008ad8:	d302      	bcc.n	8008ae0 <xQueueGenericSendFromISR+0xbc>
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	2b02      	cmp	r3, #2
 8008ade:	d12f      	bne.n	8008b40 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008ae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ae2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008ae6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008aea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008aee:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008af0:	683a      	ldr	r2, [r7, #0]
 8008af2:	68b9      	ldr	r1, [r7, #8]
 8008af4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008af6:	f000 f911 	bl	8008d1c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008afa:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8008afe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008b02:	d112      	bne.n	8008b2a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008b04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d016      	beq.n	8008b3a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008b0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b0e:	3324      	adds	r3, #36	; 0x24
 8008b10:	4618      	mov	r0, r3
 8008b12:	f000 fed1 	bl	80098b8 <xTaskRemoveFromEventList>
 8008b16:	4603      	mov	r3, r0
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d00e      	beq.n	8008b3a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d00b      	beq.n	8008b3a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	2201      	movs	r2, #1
 8008b26:	601a      	str	r2, [r3, #0]
 8008b28:	e007      	b.n	8008b3a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008b2a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008b2e:	3301      	adds	r3, #1
 8008b30:	b2db      	uxtb	r3, r3
 8008b32:	b25a      	sxtb	r2, r3
 8008b34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008b3a:	2301      	movs	r3, #1
 8008b3c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8008b3e:	e001      	b.n	8008b44 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008b40:	2300      	movs	r3, #0
 8008b42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008b44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b46:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008b48:	697b      	ldr	r3, [r7, #20]
 8008b4a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008b4e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008b50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008b52:	4618      	mov	r0, r3
 8008b54:	3740      	adds	r7, #64	; 0x40
 8008b56:	46bd      	mov	sp, r7
 8008b58:	bd80      	pop	{r7, pc}
	...

08008b5c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b08c      	sub	sp, #48	; 0x30
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	60f8      	str	r0, [r7, #12]
 8008b64:	60b9      	str	r1, [r7, #8]
 8008b66:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008b68:	2300      	movs	r3, #0
 8008b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d10a      	bne.n	8008b8c <xQueueReceive+0x30>
	__asm volatile
 8008b76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b7a:	f383 8811 	msr	BASEPRI, r3
 8008b7e:	f3bf 8f6f 	isb	sy
 8008b82:	f3bf 8f4f 	dsb	sy
 8008b86:	623b      	str	r3, [r7, #32]
}
 8008b88:	bf00      	nop
 8008b8a:	e7fe      	b.n	8008b8a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008b8c:	68bb      	ldr	r3, [r7, #8]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d103      	bne.n	8008b9a <xQueueReceive+0x3e>
 8008b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d101      	bne.n	8008b9e <xQueueReceive+0x42>
 8008b9a:	2301      	movs	r3, #1
 8008b9c:	e000      	b.n	8008ba0 <xQueueReceive+0x44>
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d10a      	bne.n	8008bba <xQueueReceive+0x5e>
	__asm volatile
 8008ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ba8:	f383 8811 	msr	BASEPRI, r3
 8008bac:	f3bf 8f6f 	isb	sy
 8008bb0:	f3bf 8f4f 	dsb	sy
 8008bb4:	61fb      	str	r3, [r7, #28]
}
 8008bb6:	bf00      	nop
 8008bb8:	e7fe      	b.n	8008bb8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008bba:	f001 f83b 	bl	8009c34 <xTaskGetSchedulerState>
 8008bbe:	4603      	mov	r3, r0
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d102      	bne.n	8008bca <xQueueReceive+0x6e>
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d101      	bne.n	8008bce <xQueueReceive+0x72>
 8008bca:	2301      	movs	r3, #1
 8008bcc:	e000      	b.n	8008bd0 <xQueueReceive+0x74>
 8008bce:	2300      	movs	r3, #0
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d10a      	bne.n	8008bea <xQueueReceive+0x8e>
	__asm volatile
 8008bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bd8:	f383 8811 	msr	BASEPRI, r3
 8008bdc:	f3bf 8f6f 	isb	sy
 8008be0:	f3bf 8f4f 	dsb	sy
 8008be4:	61bb      	str	r3, [r7, #24]
}
 8008be6:	bf00      	nop
 8008be8:	e7fe      	b.n	8008be8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008bea:	f001 fd7b 	bl	800a6e4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bf2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d01f      	beq.n	8008c3a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008bfa:	68b9      	ldr	r1, [r7, #8]
 8008bfc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008bfe:	f000 f8f7 	bl	8008df0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c04:	1e5a      	subs	r2, r3, #1
 8008c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c08:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c0c:	691b      	ldr	r3, [r3, #16]
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d00f      	beq.n	8008c32 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c14:	3310      	adds	r3, #16
 8008c16:	4618      	mov	r0, r3
 8008c18:	f000 fe4e 	bl	80098b8 <xTaskRemoveFromEventList>
 8008c1c:	4603      	mov	r3, r0
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d007      	beq.n	8008c32 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008c22:	4b3d      	ldr	r3, [pc, #244]	; (8008d18 <xQueueReceive+0x1bc>)
 8008c24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c28:	601a      	str	r2, [r3, #0]
 8008c2a:	f3bf 8f4f 	dsb	sy
 8008c2e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008c32:	f001 fd87 	bl	800a744 <vPortExitCritical>
				return pdPASS;
 8008c36:	2301      	movs	r3, #1
 8008c38:	e069      	b.n	8008d0e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d103      	bne.n	8008c48 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008c40:	f001 fd80 	bl	800a744 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008c44:	2300      	movs	r3, #0
 8008c46:	e062      	b.n	8008d0e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d106      	bne.n	8008c5c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008c4e:	f107 0310 	add.w	r3, r7, #16
 8008c52:	4618      	mov	r0, r3
 8008c54:	f000 fe94 	bl	8009980 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008c58:	2301      	movs	r3, #1
 8008c5a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008c5c:	f001 fd72 	bl	800a744 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008c60:	f000 fc06 	bl	8009470 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008c64:	f001 fd3e 	bl	800a6e4 <vPortEnterCritical>
 8008c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c6a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008c6e:	b25b      	sxtb	r3, r3
 8008c70:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008c74:	d103      	bne.n	8008c7e <xQueueReceive+0x122>
 8008c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c78:	2200      	movs	r2, #0
 8008c7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c80:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008c84:	b25b      	sxtb	r3, r3
 8008c86:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008c8a:	d103      	bne.n	8008c94 <xQueueReceive+0x138>
 8008c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c8e:	2200      	movs	r2, #0
 8008c90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008c94:	f001 fd56 	bl	800a744 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008c98:	1d3a      	adds	r2, r7, #4
 8008c9a:	f107 0310 	add.w	r3, r7, #16
 8008c9e:	4611      	mov	r1, r2
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	f000 fe83 	bl	80099ac <xTaskCheckForTimeOut>
 8008ca6:	4603      	mov	r3, r0
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d123      	bne.n	8008cf4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008cac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008cae:	f000 f917 	bl	8008ee0 <prvIsQueueEmpty>
 8008cb2:	4603      	mov	r3, r0
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d017      	beq.n	8008ce8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cba:	3324      	adds	r3, #36	; 0x24
 8008cbc:	687a      	ldr	r2, [r7, #4]
 8008cbe:	4611      	mov	r1, r2
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	f000 fda9 	bl	8009818 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008cc6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008cc8:	f000 f8b8 	bl	8008e3c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008ccc:	f000 fbde 	bl	800948c <xTaskResumeAll>
 8008cd0:	4603      	mov	r3, r0
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d189      	bne.n	8008bea <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8008cd6:	4b10      	ldr	r3, [pc, #64]	; (8008d18 <xQueueReceive+0x1bc>)
 8008cd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008cdc:	601a      	str	r2, [r3, #0]
 8008cde:	f3bf 8f4f 	dsb	sy
 8008ce2:	f3bf 8f6f 	isb	sy
 8008ce6:	e780      	b.n	8008bea <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008ce8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008cea:	f000 f8a7 	bl	8008e3c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008cee:	f000 fbcd 	bl	800948c <xTaskResumeAll>
 8008cf2:	e77a      	b.n	8008bea <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008cf4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008cf6:	f000 f8a1 	bl	8008e3c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008cfa:	f000 fbc7 	bl	800948c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008cfe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d00:	f000 f8ee 	bl	8008ee0 <prvIsQueueEmpty>
 8008d04:	4603      	mov	r3, r0
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	f43f af6f 	beq.w	8008bea <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008d0c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008d0e:	4618      	mov	r0, r3
 8008d10:	3730      	adds	r7, #48	; 0x30
 8008d12:	46bd      	mov	sp, r7
 8008d14:	bd80      	pop	{r7, pc}
 8008d16:	bf00      	nop
 8008d18:	e000ed04 	.word	0xe000ed04

08008d1c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b086      	sub	sp, #24
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	60f8      	str	r0, [r7, #12]
 8008d24:	60b9      	str	r1, [r7, #8]
 8008d26:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008d28:	2300      	movs	r3, #0
 8008d2a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d30:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d10d      	bne.n	8008d56 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d14d      	bne.n	8008dde <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	689b      	ldr	r3, [r3, #8]
 8008d46:	4618      	mov	r0, r3
 8008d48:	f000 ff92 	bl	8009c70 <xTaskPriorityDisinherit>
 8008d4c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	2200      	movs	r2, #0
 8008d52:	609a      	str	r2, [r3, #8]
 8008d54:	e043      	b.n	8008dde <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d119      	bne.n	8008d90 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	6858      	ldr	r0, [r3, #4]
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d64:	461a      	mov	r2, r3
 8008d66:	68b9      	ldr	r1, [r7, #8]
 8008d68:	f002 fd7e 	bl	800b868 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	685a      	ldr	r2, [r3, #4]
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d74:	441a      	add	r2, r3
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	685a      	ldr	r2, [r3, #4]
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	689b      	ldr	r3, [r3, #8]
 8008d82:	429a      	cmp	r2, r3
 8008d84:	d32b      	bcc.n	8008dde <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	681a      	ldr	r2, [r3, #0]
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	605a      	str	r2, [r3, #4]
 8008d8e:	e026      	b.n	8008dde <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	68d8      	ldr	r0, [r3, #12]
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d98:	461a      	mov	r2, r3
 8008d9a:	68b9      	ldr	r1, [r7, #8]
 8008d9c:	f002 fd64 	bl	800b868 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	68da      	ldr	r2, [r3, #12]
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008da8:	425b      	negs	r3, r3
 8008daa:	441a      	add	r2, r3
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	68da      	ldr	r2, [r3, #12]
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	429a      	cmp	r2, r3
 8008dba:	d207      	bcs.n	8008dcc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	689a      	ldr	r2, [r3, #8]
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dc4:	425b      	negs	r3, r3
 8008dc6:	441a      	add	r2, r3
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	2b02      	cmp	r3, #2
 8008dd0:	d105      	bne.n	8008dde <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008dd2:	693b      	ldr	r3, [r7, #16]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d002      	beq.n	8008dde <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008dd8:	693b      	ldr	r3, [r7, #16]
 8008dda:	3b01      	subs	r3, #1
 8008ddc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008dde:	693b      	ldr	r3, [r7, #16]
 8008de0:	1c5a      	adds	r2, r3, #1
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008de6:	697b      	ldr	r3, [r7, #20]
}
 8008de8:	4618      	mov	r0, r3
 8008dea:	3718      	adds	r7, #24
 8008dec:	46bd      	mov	sp, r7
 8008dee:	bd80      	pop	{r7, pc}

08008df0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b082      	sub	sp, #8
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
 8008df8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d018      	beq.n	8008e34 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	68da      	ldr	r2, [r3, #12]
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e0a:	441a      	add	r2, r3
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	68da      	ldr	r2, [r3, #12]
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	689b      	ldr	r3, [r3, #8]
 8008e18:	429a      	cmp	r2, r3
 8008e1a:	d303      	bcc.n	8008e24 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681a      	ldr	r2, [r3, #0]
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	68d9      	ldr	r1, [r3, #12]
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e2c:	461a      	mov	r2, r3
 8008e2e:	6838      	ldr	r0, [r7, #0]
 8008e30:	f002 fd1a 	bl	800b868 <memcpy>
	}
}
 8008e34:	bf00      	nop
 8008e36:	3708      	adds	r7, #8
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	bd80      	pop	{r7, pc}

08008e3c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	b084      	sub	sp, #16
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008e44:	f001 fc4e 	bl	800a6e4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008e4e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008e50:	e011      	b.n	8008e76 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d012      	beq.n	8008e80 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	3324      	adds	r3, #36	; 0x24
 8008e5e:	4618      	mov	r0, r3
 8008e60:	f000 fd2a 	bl	80098b8 <xTaskRemoveFromEventList>
 8008e64:	4603      	mov	r3, r0
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d001      	beq.n	8008e6e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008e6a:	f000 fe01 	bl	8009a70 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008e6e:	7bfb      	ldrb	r3, [r7, #15]
 8008e70:	3b01      	subs	r3, #1
 8008e72:	b2db      	uxtb	r3, r3
 8008e74:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008e76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	dce9      	bgt.n	8008e52 <prvUnlockQueue+0x16>
 8008e7e:	e000      	b.n	8008e82 <prvUnlockQueue+0x46>
					break;
 8008e80:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	22ff      	movs	r2, #255	; 0xff
 8008e86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008e8a:	f001 fc5b 	bl	800a744 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008e8e:	f001 fc29 	bl	800a6e4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008e98:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008e9a:	e011      	b.n	8008ec0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	691b      	ldr	r3, [r3, #16]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d012      	beq.n	8008eca <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	3310      	adds	r3, #16
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	f000 fd05 	bl	80098b8 <xTaskRemoveFromEventList>
 8008eae:	4603      	mov	r3, r0
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d001      	beq.n	8008eb8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008eb4:	f000 fddc 	bl	8009a70 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008eb8:	7bbb      	ldrb	r3, [r7, #14]
 8008eba:	3b01      	subs	r3, #1
 8008ebc:	b2db      	uxtb	r3, r3
 8008ebe:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008ec0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	dce9      	bgt.n	8008e9c <prvUnlockQueue+0x60>
 8008ec8:	e000      	b.n	8008ecc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008eca:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	22ff      	movs	r2, #255	; 0xff
 8008ed0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008ed4:	f001 fc36 	bl	800a744 <vPortExitCritical>
}
 8008ed8:	bf00      	nop
 8008eda:	3710      	adds	r7, #16
 8008edc:	46bd      	mov	sp, r7
 8008ede:	bd80      	pop	{r7, pc}

08008ee0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b084      	sub	sp, #16
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008ee8:	f001 fbfc 	bl	800a6e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d102      	bne.n	8008efa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008ef4:	2301      	movs	r3, #1
 8008ef6:	60fb      	str	r3, [r7, #12]
 8008ef8:	e001      	b.n	8008efe <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008efa:	2300      	movs	r3, #0
 8008efc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008efe:	f001 fc21 	bl	800a744 <vPortExitCritical>

	return xReturn;
 8008f02:	68fb      	ldr	r3, [r7, #12]
}
 8008f04:	4618      	mov	r0, r3
 8008f06:	3710      	adds	r7, #16
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	bd80      	pop	{r7, pc}

08008f0c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b084      	sub	sp, #16
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008f14:	f001 fbe6 	bl	800a6e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f20:	429a      	cmp	r2, r3
 8008f22:	d102      	bne.n	8008f2a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008f24:	2301      	movs	r3, #1
 8008f26:	60fb      	str	r3, [r7, #12]
 8008f28:	e001      	b.n	8008f2e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008f2e:	f001 fc09 	bl	800a744 <vPortExitCritical>

	return xReturn;
 8008f32:	68fb      	ldr	r3, [r7, #12]
}
 8008f34:	4618      	mov	r0, r3
 8008f36:	3710      	adds	r7, #16
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	bd80      	pop	{r7, pc}

08008f3c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008f3c:	b480      	push	{r7}
 8008f3e:	b085      	sub	sp, #20
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]
 8008f44:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008f46:	2300      	movs	r3, #0
 8008f48:	60fb      	str	r3, [r7, #12]
 8008f4a:	e014      	b.n	8008f76 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008f4c:	4a0f      	ldr	r2, [pc, #60]	; (8008f8c <vQueueAddToRegistry+0x50>)
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d10b      	bne.n	8008f70 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008f58:	490c      	ldr	r1, [pc, #48]	; (8008f8c <vQueueAddToRegistry+0x50>)
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	683a      	ldr	r2, [r7, #0]
 8008f5e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008f62:	4a0a      	ldr	r2, [pc, #40]	; (8008f8c <vQueueAddToRegistry+0x50>)
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	00db      	lsls	r3, r3, #3
 8008f68:	4413      	add	r3, r2
 8008f6a:	687a      	ldr	r2, [r7, #4]
 8008f6c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008f6e:	e006      	b.n	8008f7e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	3301      	adds	r3, #1
 8008f74:	60fb      	str	r3, [r7, #12]
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	2b07      	cmp	r3, #7
 8008f7a:	d9e7      	bls.n	8008f4c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008f7c:	bf00      	nop
 8008f7e:	bf00      	nop
 8008f80:	3714      	adds	r7, #20
 8008f82:	46bd      	mov	sp, r7
 8008f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f88:	4770      	bx	lr
 8008f8a:	bf00      	nop
 8008f8c:	200009c4 	.word	0x200009c4

08008f90 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008f90:	b580      	push	{r7, lr}
 8008f92:	b086      	sub	sp, #24
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	60f8      	str	r0, [r7, #12]
 8008f98:	60b9      	str	r1, [r7, #8]
 8008f9a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008fa0:	f001 fba0 	bl	800a6e4 <vPortEnterCritical>
 8008fa4:	697b      	ldr	r3, [r7, #20]
 8008fa6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008faa:	b25b      	sxtb	r3, r3
 8008fac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008fb0:	d103      	bne.n	8008fba <vQueueWaitForMessageRestricted+0x2a>
 8008fb2:	697b      	ldr	r3, [r7, #20]
 8008fb4:	2200      	movs	r2, #0
 8008fb6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008fba:	697b      	ldr	r3, [r7, #20]
 8008fbc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008fc0:	b25b      	sxtb	r3, r3
 8008fc2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008fc6:	d103      	bne.n	8008fd0 <vQueueWaitForMessageRestricted+0x40>
 8008fc8:	697b      	ldr	r3, [r7, #20]
 8008fca:	2200      	movs	r2, #0
 8008fcc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008fd0:	f001 fbb8 	bl	800a744 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008fd4:	697b      	ldr	r3, [r7, #20]
 8008fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d106      	bne.n	8008fea <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008fdc:	697b      	ldr	r3, [r7, #20]
 8008fde:	3324      	adds	r3, #36	; 0x24
 8008fe0:	687a      	ldr	r2, [r7, #4]
 8008fe2:	68b9      	ldr	r1, [r7, #8]
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	f000 fc3b 	bl	8009860 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008fea:	6978      	ldr	r0, [r7, #20]
 8008fec:	f7ff ff26 	bl	8008e3c <prvUnlockQueue>
	}
 8008ff0:	bf00      	nop
 8008ff2:	3718      	adds	r7, #24
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	bd80      	pop	{r7, pc}

08008ff8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b08e      	sub	sp, #56	; 0x38
 8008ffc:	af04      	add	r7, sp, #16
 8008ffe:	60f8      	str	r0, [r7, #12]
 8009000:	60b9      	str	r1, [r7, #8]
 8009002:	607a      	str	r2, [r7, #4]
 8009004:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009006:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009008:	2b00      	cmp	r3, #0
 800900a:	d10a      	bne.n	8009022 <xTaskCreateStatic+0x2a>
	__asm volatile
 800900c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009010:	f383 8811 	msr	BASEPRI, r3
 8009014:	f3bf 8f6f 	isb	sy
 8009018:	f3bf 8f4f 	dsb	sy
 800901c:	623b      	str	r3, [r7, #32]
}
 800901e:	bf00      	nop
 8009020:	e7fe      	b.n	8009020 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009024:	2b00      	cmp	r3, #0
 8009026:	d10a      	bne.n	800903e <xTaskCreateStatic+0x46>
	__asm volatile
 8009028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800902c:	f383 8811 	msr	BASEPRI, r3
 8009030:	f3bf 8f6f 	isb	sy
 8009034:	f3bf 8f4f 	dsb	sy
 8009038:	61fb      	str	r3, [r7, #28]
}
 800903a:	bf00      	nop
 800903c:	e7fe      	b.n	800903c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800903e:	235c      	movs	r3, #92	; 0x5c
 8009040:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009042:	693b      	ldr	r3, [r7, #16]
 8009044:	2b5c      	cmp	r3, #92	; 0x5c
 8009046:	d00a      	beq.n	800905e <xTaskCreateStatic+0x66>
	__asm volatile
 8009048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800904c:	f383 8811 	msr	BASEPRI, r3
 8009050:	f3bf 8f6f 	isb	sy
 8009054:	f3bf 8f4f 	dsb	sy
 8009058:	61bb      	str	r3, [r7, #24]
}
 800905a:	bf00      	nop
 800905c:	e7fe      	b.n	800905c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800905e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009062:	2b00      	cmp	r3, #0
 8009064:	d01e      	beq.n	80090a4 <xTaskCreateStatic+0xac>
 8009066:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009068:	2b00      	cmp	r3, #0
 800906a:	d01b      	beq.n	80090a4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800906c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800906e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009072:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009074:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009078:	2202      	movs	r2, #2
 800907a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800907e:	2300      	movs	r3, #0
 8009080:	9303      	str	r3, [sp, #12]
 8009082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009084:	9302      	str	r3, [sp, #8]
 8009086:	f107 0314 	add.w	r3, r7, #20
 800908a:	9301      	str	r3, [sp, #4]
 800908c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800908e:	9300      	str	r3, [sp, #0]
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	687a      	ldr	r2, [r7, #4]
 8009094:	68b9      	ldr	r1, [r7, #8]
 8009096:	68f8      	ldr	r0, [r7, #12]
 8009098:	f000 f850 	bl	800913c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800909c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800909e:	f000 f8dd 	bl	800925c <prvAddNewTaskToReadyList>
 80090a2:	e001      	b.n	80090a8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80090a4:	2300      	movs	r3, #0
 80090a6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80090a8:	697b      	ldr	r3, [r7, #20]
	}
 80090aa:	4618      	mov	r0, r3
 80090ac:	3728      	adds	r7, #40	; 0x28
 80090ae:	46bd      	mov	sp, r7
 80090b0:	bd80      	pop	{r7, pc}

080090b2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80090b2:	b580      	push	{r7, lr}
 80090b4:	b08c      	sub	sp, #48	; 0x30
 80090b6:	af04      	add	r7, sp, #16
 80090b8:	60f8      	str	r0, [r7, #12]
 80090ba:	60b9      	str	r1, [r7, #8]
 80090bc:	603b      	str	r3, [r7, #0]
 80090be:	4613      	mov	r3, r2
 80090c0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80090c2:	88fb      	ldrh	r3, [r7, #6]
 80090c4:	009b      	lsls	r3, r3, #2
 80090c6:	4618      	mov	r0, r3
 80090c8:	f001 fc2e 	bl	800a928 <pvPortMalloc>
 80090cc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80090ce:	697b      	ldr	r3, [r7, #20]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d00e      	beq.n	80090f2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80090d4:	205c      	movs	r0, #92	; 0x5c
 80090d6:	f001 fc27 	bl	800a928 <pvPortMalloc>
 80090da:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80090dc:	69fb      	ldr	r3, [r7, #28]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d003      	beq.n	80090ea <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80090e2:	69fb      	ldr	r3, [r7, #28]
 80090e4:	697a      	ldr	r2, [r7, #20]
 80090e6:	631a      	str	r2, [r3, #48]	; 0x30
 80090e8:	e005      	b.n	80090f6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80090ea:	6978      	ldr	r0, [r7, #20]
 80090ec:	f001 fce8 	bl	800aac0 <vPortFree>
 80090f0:	e001      	b.n	80090f6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80090f2:	2300      	movs	r3, #0
 80090f4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80090f6:	69fb      	ldr	r3, [r7, #28]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d017      	beq.n	800912c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80090fc:	69fb      	ldr	r3, [r7, #28]
 80090fe:	2200      	movs	r2, #0
 8009100:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009104:	88fa      	ldrh	r2, [r7, #6]
 8009106:	2300      	movs	r3, #0
 8009108:	9303      	str	r3, [sp, #12]
 800910a:	69fb      	ldr	r3, [r7, #28]
 800910c:	9302      	str	r3, [sp, #8]
 800910e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009110:	9301      	str	r3, [sp, #4]
 8009112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009114:	9300      	str	r3, [sp, #0]
 8009116:	683b      	ldr	r3, [r7, #0]
 8009118:	68b9      	ldr	r1, [r7, #8]
 800911a:	68f8      	ldr	r0, [r7, #12]
 800911c:	f000 f80e 	bl	800913c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009120:	69f8      	ldr	r0, [r7, #28]
 8009122:	f000 f89b 	bl	800925c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009126:	2301      	movs	r3, #1
 8009128:	61bb      	str	r3, [r7, #24]
 800912a:	e002      	b.n	8009132 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800912c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009130:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009132:	69bb      	ldr	r3, [r7, #24]
	}
 8009134:	4618      	mov	r0, r3
 8009136:	3720      	adds	r7, #32
 8009138:	46bd      	mov	sp, r7
 800913a:	bd80      	pop	{r7, pc}

0800913c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800913c:	b580      	push	{r7, lr}
 800913e:	b088      	sub	sp, #32
 8009140:	af00      	add	r7, sp, #0
 8009142:	60f8      	str	r0, [r7, #12]
 8009144:	60b9      	str	r1, [r7, #8]
 8009146:	607a      	str	r2, [r7, #4]
 8009148:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800914a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800914c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	009b      	lsls	r3, r3, #2
 8009152:	461a      	mov	r2, r3
 8009154:	21a5      	movs	r1, #165	; 0xa5
 8009156:	f002 fb5b 	bl	800b810 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800915a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800915c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009164:	3b01      	subs	r3, #1
 8009166:	009b      	lsls	r3, r3, #2
 8009168:	4413      	add	r3, r2
 800916a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800916c:	69bb      	ldr	r3, [r7, #24]
 800916e:	f023 0307 	bic.w	r3, r3, #7
 8009172:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009174:	69bb      	ldr	r3, [r7, #24]
 8009176:	f003 0307 	and.w	r3, r3, #7
 800917a:	2b00      	cmp	r3, #0
 800917c:	d00a      	beq.n	8009194 <prvInitialiseNewTask+0x58>
	__asm volatile
 800917e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009182:	f383 8811 	msr	BASEPRI, r3
 8009186:	f3bf 8f6f 	isb	sy
 800918a:	f3bf 8f4f 	dsb	sy
 800918e:	617b      	str	r3, [r7, #20]
}
 8009190:	bf00      	nop
 8009192:	e7fe      	b.n	8009192 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009194:	68bb      	ldr	r3, [r7, #8]
 8009196:	2b00      	cmp	r3, #0
 8009198:	d01f      	beq.n	80091da <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800919a:	2300      	movs	r3, #0
 800919c:	61fb      	str	r3, [r7, #28]
 800919e:	e012      	b.n	80091c6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80091a0:	68ba      	ldr	r2, [r7, #8]
 80091a2:	69fb      	ldr	r3, [r7, #28]
 80091a4:	4413      	add	r3, r2
 80091a6:	7819      	ldrb	r1, [r3, #0]
 80091a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80091aa:	69fb      	ldr	r3, [r7, #28]
 80091ac:	4413      	add	r3, r2
 80091ae:	3334      	adds	r3, #52	; 0x34
 80091b0:	460a      	mov	r2, r1
 80091b2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80091b4:	68ba      	ldr	r2, [r7, #8]
 80091b6:	69fb      	ldr	r3, [r7, #28]
 80091b8:	4413      	add	r3, r2
 80091ba:	781b      	ldrb	r3, [r3, #0]
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d006      	beq.n	80091ce <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80091c0:	69fb      	ldr	r3, [r7, #28]
 80091c2:	3301      	adds	r3, #1
 80091c4:	61fb      	str	r3, [r7, #28]
 80091c6:	69fb      	ldr	r3, [r7, #28]
 80091c8:	2b0f      	cmp	r3, #15
 80091ca:	d9e9      	bls.n	80091a0 <prvInitialiseNewTask+0x64>
 80091cc:	e000      	b.n	80091d0 <prvInitialiseNewTask+0x94>
			{
				break;
 80091ce:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80091d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091d2:	2200      	movs	r2, #0
 80091d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80091d8:	e003      	b.n	80091e2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80091da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091dc:	2200      	movs	r2, #0
 80091de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80091e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091e4:	2b37      	cmp	r3, #55	; 0x37
 80091e6:	d901      	bls.n	80091ec <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80091e8:	2337      	movs	r3, #55	; 0x37
 80091ea:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80091ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80091f0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80091f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80091f6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80091f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091fa:	2200      	movs	r2, #0
 80091fc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80091fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009200:	3304      	adds	r3, #4
 8009202:	4618      	mov	r0, r3
 8009204:	f7ff f978 	bl	80084f8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800920a:	3318      	adds	r3, #24
 800920c:	4618      	mov	r0, r3
 800920e:	f7ff f973 	bl	80084f8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009214:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009216:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800921a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800921e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009220:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009224:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009226:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800922a:	2200      	movs	r2, #0
 800922c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800922e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009230:	2200      	movs	r2, #0
 8009232:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009236:	683a      	ldr	r2, [r7, #0]
 8009238:	68f9      	ldr	r1, [r7, #12]
 800923a:	69b8      	ldr	r0, [r7, #24]
 800923c:	f001 f928 	bl	800a490 <pxPortInitialiseStack>
 8009240:	4602      	mov	r2, r0
 8009242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009244:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009248:	2b00      	cmp	r3, #0
 800924a:	d002      	beq.n	8009252 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800924c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800924e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009250:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009252:	bf00      	nop
 8009254:	3720      	adds	r7, #32
 8009256:	46bd      	mov	sp, r7
 8009258:	bd80      	pop	{r7, pc}
	...

0800925c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800925c:	b580      	push	{r7, lr}
 800925e:	b082      	sub	sp, #8
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009264:	f001 fa3e 	bl	800a6e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009268:	4b2d      	ldr	r3, [pc, #180]	; (8009320 <prvAddNewTaskToReadyList+0xc4>)
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	3301      	adds	r3, #1
 800926e:	4a2c      	ldr	r2, [pc, #176]	; (8009320 <prvAddNewTaskToReadyList+0xc4>)
 8009270:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009272:	4b2c      	ldr	r3, [pc, #176]	; (8009324 <prvAddNewTaskToReadyList+0xc8>)
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d109      	bne.n	800928e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800927a:	4a2a      	ldr	r2, [pc, #168]	; (8009324 <prvAddNewTaskToReadyList+0xc8>)
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009280:	4b27      	ldr	r3, [pc, #156]	; (8009320 <prvAddNewTaskToReadyList+0xc4>)
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	2b01      	cmp	r3, #1
 8009286:	d110      	bne.n	80092aa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009288:	f000 fc16 	bl	8009ab8 <prvInitialiseTaskLists>
 800928c:	e00d      	b.n	80092aa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800928e:	4b26      	ldr	r3, [pc, #152]	; (8009328 <prvAddNewTaskToReadyList+0xcc>)
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	2b00      	cmp	r3, #0
 8009294:	d109      	bne.n	80092aa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009296:	4b23      	ldr	r3, [pc, #140]	; (8009324 <prvAddNewTaskToReadyList+0xc8>)
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092a0:	429a      	cmp	r2, r3
 80092a2:	d802      	bhi.n	80092aa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80092a4:	4a1f      	ldr	r2, [pc, #124]	; (8009324 <prvAddNewTaskToReadyList+0xc8>)
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80092aa:	4b20      	ldr	r3, [pc, #128]	; (800932c <prvAddNewTaskToReadyList+0xd0>)
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	3301      	adds	r3, #1
 80092b0:	4a1e      	ldr	r2, [pc, #120]	; (800932c <prvAddNewTaskToReadyList+0xd0>)
 80092b2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80092b4:	4b1d      	ldr	r3, [pc, #116]	; (800932c <prvAddNewTaskToReadyList+0xd0>)
 80092b6:	681a      	ldr	r2, [r3, #0]
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092c0:	4b1b      	ldr	r3, [pc, #108]	; (8009330 <prvAddNewTaskToReadyList+0xd4>)
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	429a      	cmp	r2, r3
 80092c6:	d903      	bls.n	80092d0 <prvAddNewTaskToReadyList+0x74>
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092cc:	4a18      	ldr	r2, [pc, #96]	; (8009330 <prvAddNewTaskToReadyList+0xd4>)
 80092ce:	6013      	str	r3, [r2, #0]
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092d4:	4613      	mov	r3, r2
 80092d6:	009b      	lsls	r3, r3, #2
 80092d8:	4413      	add	r3, r2
 80092da:	009b      	lsls	r3, r3, #2
 80092dc:	4a15      	ldr	r2, [pc, #84]	; (8009334 <prvAddNewTaskToReadyList+0xd8>)
 80092de:	441a      	add	r2, r3
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	3304      	adds	r3, #4
 80092e4:	4619      	mov	r1, r3
 80092e6:	4610      	mov	r0, r2
 80092e8:	f7ff f913 	bl	8008512 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80092ec:	f001 fa2a 	bl	800a744 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80092f0:	4b0d      	ldr	r3, [pc, #52]	; (8009328 <prvAddNewTaskToReadyList+0xcc>)
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d00e      	beq.n	8009316 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80092f8:	4b0a      	ldr	r3, [pc, #40]	; (8009324 <prvAddNewTaskToReadyList+0xc8>)
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009302:	429a      	cmp	r2, r3
 8009304:	d207      	bcs.n	8009316 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009306:	4b0c      	ldr	r3, [pc, #48]	; (8009338 <prvAddNewTaskToReadyList+0xdc>)
 8009308:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800930c:	601a      	str	r2, [r3, #0]
 800930e:	f3bf 8f4f 	dsb	sy
 8009312:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009316:	bf00      	nop
 8009318:	3708      	adds	r7, #8
 800931a:	46bd      	mov	sp, r7
 800931c:	bd80      	pop	{r7, pc}
 800931e:	bf00      	nop
 8009320:	20000ed8 	.word	0x20000ed8
 8009324:	20000a04 	.word	0x20000a04
 8009328:	20000ee4 	.word	0x20000ee4
 800932c:	20000ef4 	.word	0x20000ef4
 8009330:	20000ee0 	.word	0x20000ee0
 8009334:	20000a08 	.word	0x20000a08
 8009338:	e000ed04 	.word	0xe000ed04

0800933c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800933c:	b580      	push	{r7, lr}
 800933e:	b084      	sub	sp, #16
 8009340:	af00      	add	r7, sp, #0
 8009342:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009344:	2300      	movs	r3, #0
 8009346:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d017      	beq.n	800937e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800934e:	4b13      	ldr	r3, [pc, #76]	; (800939c <vTaskDelay+0x60>)
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	2b00      	cmp	r3, #0
 8009354:	d00a      	beq.n	800936c <vTaskDelay+0x30>
	__asm volatile
 8009356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800935a:	f383 8811 	msr	BASEPRI, r3
 800935e:	f3bf 8f6f 	isb	sy
 8009362:	f3bf 8f4f 	dsb	sy
 8009366:	60bb      	str	r3, [r7, #8]
}
 8009368:	bf00      	nop
 800936a:	e7fe      	b.n	800936a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800936c:	f000 f880 	bl	8009470 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009370:	2100      	movs	r1, #0
 8009372:	6878      	ldr	r0, [r7, #4]
 8009374:	f000 fcea 	bl	8009d4c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009378:	f000 f888 	bl	800948c <xTaskResumeAll>
 800937c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	2b00      	cmp	r3, #0
 8009382:	d107      	bne.n	8009394 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009384:	4b06      	ldr	r3, [pc, #24]	; (80093a0 <vTaskDelay+0x64>)
 8009386:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800938a:	601a      	str	r2, [r3, #0]
 800938c:	f3bf 8f4f 	dsb	sy
 8009390:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009394:	bf00      	nop
 8009396:	3710      	adds	r7, #16
 8009398:	46bd      	mov	sp, r7
 800939a:	bd80      	pop	{r7, pc}
 800939c:	20000f00 	.word	0x20000f00
 80093a0:	e000ed04 	.word	0xe000ed04

080093a4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80093a4:	b580      	push	{r7, lr}
 80093a6:	b08a      	sub	sp, #40	; 0x28
 80093a8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80093aa:	2300      	movs	r3, #0
 80093ac:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80093ae:	2300      	movs	r3, #0
 80093b0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80093b2:	463a      	mov	r2, r7
 80093b4:	1d39      	adds	r1, r7, #4
 80093b6:	f107 0308 	add.w	r3, r7, #8
 80093ba:	4618      	mov	r0, r3
 80093bc:	f7ff f848 	bl	8008450 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80093c0:	6839      	ldr	r1, [r7, #0]
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	68ba      	ldr	r2, [r7, #8]
 80093c6:	9202      	str	r2, [sp, #8]
 80093c8:	9301      	str	r3, [sp, #4]
 80093ca:	2300      	movs	r3, #0
 80093cc:	9300      	str	r3, [sp, #0]
 80093ce:	2300      	movs	r3, #0
 80093d0:	460a      	mov	r2, r1
 80093d2:	4921      	ldr	r1, [pc, #132]	; (8009458 <vTaskStartScheduler+0xb4>)
 80093d4:	4821      	ldr	r0, [pc, #132]	; (800945c <vTaskStartScheduler+0xb8>)
 80093d6:	f7ff fe0f 	bl	8008ff8 <xTaskCreateStatic>
 80093da:	4603      	mov	r3, r0
 80093dc:	4a20      	ldr	r2, [pc, #128]	; (8009460 <vTaskStartScheduler+0xbc>)
 80093de:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80093e0:	4b1f      	ldr	r3, [pc, #124]	; (8009460 <vTaskStartScheduler+0xbc>)
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d002      	beq.n	80093ee <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80093e8:	2301      	movs	r3, #1
 80093ea:	617b      	str	r3, [r7, #20]
 80093ec:	e001      	b.n	80093f2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80093ee:	2300      	movs	r3, #0
 80093f0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80093f2:	697b      	ldr	r3, [r7, #20]
 80093f4:	2b01      	cmp	r3, #1
 80093f6:	d102      	bne.n	80093fe <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80093f8:	f000 fcfc 	bl	8009df4 <xTimerCreateTimerTask>
 80093fc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80093fe:	697b      	ldr	r3, [r7, #20]
 8009400:	2b01      	cmp	r3, #1
 8009402:	d116      	bne.n	8009432 <vTaskStartScheduler+0x8e>
	__asm volatile
 8009404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009408:	f383 8811 	msr	BASEPRI, r3
 800940c:	f3bf 8f6f 	isb	sy
 8009410:	f3bf 8f4f 	dsb	sy
 8009414:	613b      	str	r3, [r7, #16]
}
 8009416:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009418:	4b12      	ldr	r3, [pc, #72]	; (8009464 <vTaskStartScheduler+0xc0>)
 800941a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800941e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009420:	4b11      	ldr	r3, [pc, #68]	; (8009468 <vTaskStartScheduler+0xc4>)
 8009422:	2201      	movs	r2, #1
 8009424:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009426:	4b11      	ldr	r3, [pc, #68]	; (800946c <vTaskStartScheduler+0xc8>)
 8009428:	2200      	movs	r2, #0
 800942a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800942c:	f001 f8b8 	bl	800a5a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009430:	e00e      	b.n	8009450 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009432:	697b      	ldr	r3, [r7, #20]
 8009434:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009438:	d10a      	bne.n	8009450 <vTaskStartScheduler+0xac>
	__asm volatile
 800943a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800943e:	f383 8811 	msr	BASEPRI, r3
 8009442:	f3bf 8f6f 	isb	sy
 8009446:	f3bf 8f4f 	dsb	sy
 800944a:	60fb      	str	r3, [r7, #12]
}
 800944c:	bf00      	nop
 800944e:	e7fe      	b.n	800944e <vTaskStartScheduler+0xaa>
}
 8009450:	bf00      	nop
 8009452:	3718      	adds	r7, #24
 8009454:	46bd      	mov	sp, r7
 8009456:	bd80      	pop	{r7, pc}
 8009458:	0800b8b8 	.word	0x0800b8b8
 800945c:	08009a89 	.word	0x08009a89
 8009460:	20000efc 	.word	0x20000efc
 8009464:	20000ef8 	.word	0x20000ef8
 8009468:	20000ee4 	.word	0x20000ee4
 800946c:	20000edc 	.word	0x20000edc

08009470 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009470:	b480      	push	{r7}
 8009472:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009474:	4b04      	ldr	r3, [pc, #16]	; (8009488 <vTaskSuspendAll+0x18>)
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	3301      	adds	r3, #1
 800947a:	4a03      	ldr	r2, [pc, #12]	; (8009488 <vTaskSuspendAll+0x18>)
 800947c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800947e:	bf00      	nop
 8009480:	46bd      	mov	sp, r7
 8009482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009486:	4770      	bx	lr
 8009488:	20000f00 	.word	0x20000f00

0800948c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800948c:	b580      	push	{r7, lr}
 800948e:	b084      	sub	sp, #16
 8009490:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009492:	2300      	movs	r3, #0
 8009494:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009496:	2300      	movs	r3, #0
 8009498:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800949a:	4b42      	ldr	r3, [pc, #264]	; (80095a4 <xTaskResumeAll+0x118>)
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d10a      	bne.n	80094b8 <xTaskResumeAll+0x2c>
	__asm volatile
 80094a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094a6:	f383 8811 	msr	BASEPRI, r3
 80094aa:	f3bf 8f6f 	isb	sy
 80094ae:	f3bf 8f4f 	dsb	sy
 80094b2:	603b      	str	r3, [r7, #0]
}
 80094b4:	bf00      	nop
 80094b6:	e7fe      	b.n	80094b6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80094b8:	f001 f914 	bl	800a6e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80094bc:	4b39      	ldr	r3, [pc, #228]	; (80095a4 <xTaskResumeAll+0x118>)
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	3b01      	subs	r3, #1
 80094c2:	4a38      	ldr	r2, [pc, #224]	; (80095a4 <xTaskResumeAll+0x118>)
 80094c4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80094c6:	4b37      	ldr	r3, [pc, #220]	; (80095a4 <xTaskResumeAll+0x118>)
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d162      	bne.n	8009594 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80094ce:	4b36      	ldr	r3, [pc, #216]	; (80095a8 <xTaskResumeAll+0x11c>)
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d05e      	beq.n	8009594 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80094d6:	e02f      	b.n	8009538 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80094d8:	4b34      	ldr	r3, [pc, #208]	; (80095ac <xTaskResumeAll+0x120>)
 80094da:	68db      	ldr	r3, [r3, #12]
 80094dc:	68db      	ldr	r3, [r3, #12]
 80094de:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	3318      	adds	r3, #24
 80094e4:	4618      	mov	r0, r3
 80094e6:	f7ff f871 	bl	80085cc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	3304      	adds	r3, #4
 80094ee:	4618      	mov	r0, r3
 80094f0:	f7ff f86c 	bl	80085cc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094f8:	4b2d      	ldr	r3, [pc, #180]	; (80095b0 <xTaskResumeAll+0x124>)
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	429a      	cmp	r2, r3
 80094fe:	d903      	bls.n	8009508 <xTaskResumeAll+0x7c>
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009504:	4a2a      	ldr	r2, [pc, #168]	; (80095b0 <xTaskResumeAll+0x124>)
 8009506:	6013      	str	r3, [r2, #0]
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800950c:	4613      	mov	r3, r2
 800950e:	009b      	lsls	r3, r3, #2
 8009510:	4413      	add	r3, r2
 8009512:	009b      	lsls	r3, r3, #2
 8009514:	4a27      	ldr	r2, [pc, #156]	; (80095b4 <xTaskResumeAll+0x128>)
 8009516:	441a      	add	r2, r3
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	3304      	adds	r3, #4
 800951c:	4619      	mov	r1, r3
 800951e:	4610      	mov	r0, r2
 8009520:	f7fe fff7 	bl	8008512 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009528:	4b23      	ldr	r3, [pc, #140]	; (80095b8 <xTaskResumeAll+0x12c>)
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800952e:	429a      	cmp	r2, r3
 8009530:	d302      	bcc.n	8009538 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8009532:	4b22      	ldr	r3, [pc, #136]	; (80095bc <xTaskResumeAll+0x130>)
 8009534:	2201      	movs	r2, #1
 8009536:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009538:	4b1c      	ldr	r3, [pc, #112]	; (80095ac <xTaskResumeAll+0x120>)
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	2b00      	cmp	r3, #0
 800953e:	d1cb      	bne.n	80094d8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	2b00      	cmp	r3, #0
 8009544:	d001      	beq.n	800954a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009546:	f000 fb55 	bl	8009bf4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800954a:	4b1d      	ldr	r3, [pc, #116]	; (80095c0 <xTaskResumeAll+0x134>)
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	2b00      	cmp	r3, #0
 8009554:	d010      	beq.n	8009578 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009556:	f000 f847 	bl	80095e8 <xTaskIncrementTick>
 800955a:	4603      	mov	r3, r0
 800955c:	2b00      	cmp	r3, #0
 800955e:	d002      	beq.n	8009566 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009560:	4b16      	ldr	r3, [pc, #88]	; (80095bc <xTaskResumeAll+0x130>)
 8009562:	2201      	movs	r2, #1
 8009564:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	3b01      	subs	r3, #1
 800956a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d1f1      	bne.n	8009556 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8009572:	4b13      	ldr	r3, [pc, #76]	; (80095c0 <xTaskResumeAll+0x134>)
 8009574:	2200      	movs	r2, #0
 8009576:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009578:	4b10      	ldr	r3, [pc, #64]	; (80095bc <xTaskResumeAll+0x130>)
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d009      	beq.n	8009594 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009580:	2301      	movs	r3, #1
 8009582:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009584:	4b0f      	ldr	r3, [pc, #60]	; (80095c4 <xTaskResumeAll+0x138>)
 8009586:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800958a:	601a      	str	r2, [r3, #0]
 800958c:	f3bf 8f4f 	dsb	sy
 8009590:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009594:	f001 f8d6 	bl	800a744 <vPortExitCritical>

	return xAlreadyYielded;
 8009598:	68bb      	ldr	r3, [r7, #8]
}
 800959a:	4618      	mov	r0, r3
 800959c:	3710      	adds	r7, #16
 800959e:	46bd      	mov	sp, r7
 80095a0:	bd80      	pop	{r7, pc}
 80095a2:	bf00      	nop
 80095a4:	20000f00 	.word	0x20000f00
 80095a8:	20000ed8 	.word	0x20000ed8
 80095ac:	20000e98 	.word	0x20000e98
 80095b0:	20000ee0 	.word	0x20000ee0
 80095b4:	20000a08 	.word	0x20000a08
 80095b8:	20000a04 	.word	0x20000a04
 80095bc:	20000eec 	.word	0x20000eec
 80095c0:	20000ee8 	.word	0x20000ee8
 80095c4:	e000ed04 	.word	0xe000ed04

080095c8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80095c8:	b480      	push	{r7}
 80095ca:	b083      	sub	sp, #12
 80095cc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80095ce:	4b05      	ldr	r3, [pc, #20]	; (80095e4 <xTaskGetTickCount+0x1c>)
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80095d4:	687b      	ldr	r3, [r7, #4]
}
 80095d6:	4618      	mov	r0, r3
 80095d8:	370c      	adds	r7, #12
 80095da:	46bd      	mov	sp, r7
 80095dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e0:	4770      	bx	lr
 80095e2:	bf00      	nop
 80095e4:	20000edc 	.word	0x20000edc

080095e8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b086      	sub	sp, #24
 80095ec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80095ee:	2300      	movs	r3, #0
 80095f0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80095f2:	4b4f      	ldr	r3, [pc, #316]	; (8009730 <xTaskIncrementTick+0x148>)
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	f040 808f 	bne.w	800971a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80095fc:	4b4d      	ldr	r3, [pc, #308]	; (8009734 <xTaskIncrementTick+0x14c>)
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	3301      	adds	r3, #1
 8009602:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009604:	4a4b      	ldr	r2, [pc, #300]	; (8009734 <xTaskIncrementTick+0x14c>)
 8009606:	693b      	ldr	r3, [r7, #16]
 8009608:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800960a:	693b      	ldr	r3, [r7, #16]
 800960c:	2b00      	cmp	r3, #0
 800960e:	d120      	bne.n	8009652 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009610:	4b49      	ldr	r3, [pc, #292]	; (8009738 <xTaskIncrementTick+0x150>)
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d00a      	beq.n	8009630 <xTaskIncrementTick+0x48>
	__asm volatile
 800961a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800961e:	f383 8811 	msr	BASEPRI, r3
 8009622:	f3bf 8f6f 	isb	sy
 8009626:	f3bf 8f4f 	dsb	sy
 800962a:	603b      	str	r3, [r7, #0]
}
 800962c:	bf00      	nop
 800962e:	e7fe      	b.n	800962e <xTaskIncrementTick+0x46>
 8009630:	4b41      	ldr	r3, [pc, #260]	; (8009738 <xTaskIncrementTick+0x150>)
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	60fb      	str	r3, [r7, #12]
 8009636:	4b41      	ldr	r3, [pc, #260]	; (800973c <xTaskIncrementTick+0x154>)
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	4a3f      	ldr	r2, [pc, #252]	; (8009738 <xTaskIncrementTick+0x150>)
 800963c:	6013      	str	r3, [r2, #0]
 800963e:	4a3f      	ldr	r2, [pc, #252]	; (800973c <xTaskIncrementTick+0x154>)
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	6013      	str	r3, [r2, #0]
 8009644:	4b3e      	ldr	r3, [pc, #248]	; (8009740 <xTaskIncrementTick+0x158>)
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	3301      	adds	r3, #1
 800964a:	4a3d      	ldr	r2, [pc, #244]	; (8009740 <xTaskIncrementTick+0x158>)
 800964c:	6013      	str	r3, [r2, #0]
 800964e:	f000 fad1 	bl	8009bf4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009652:	4b3c      	ldr	r3, [pc, #240]	; (8009744 <xTaskIncrementTick+0x15c>)
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	693a      	ldr	r2, [r7, #16]
 8009658:	429a      	cmp	r2, r3
 800965a:	d349      	bcc.n	80096f0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800965c:	4b36      	ldr	r3, [pc, #216]	; (8009738 <xTaskIncrementTick+0x150>)
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	2b00      	cmp	r3, #0
 8009664:	d104      	bne.n	8009670 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009666:	4b37      	ldr	r3, [pc, #220]	; (8009744 <xTaskIncrementTick+0x15c>)
 8009668:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800966c:	601a      	str	r2, [r3, #0]
					break;
 800966e:	e03f      	b.n	80096f0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009670:	4b31      	ldr	r3, [pc, #196]	; (8009738 <xTaskIncrementTick+0x150>)
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	68db      	ldr	r3, [r3, #12]
 8009676:	68db      	ldr	r3, [r3, #12]
 8009678:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800967a:	68bb      	ldr	r3, [r7, #8]
 800967c:	685b      	ldr	r3, [r3, #4]
 800967e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009680:	693a      	ldr	r2, [r7, #16]
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	429a      	cmp	r2, r3
 8009686:	d203      	bcs.n	8009690 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009688:	4a2e      	ldr	r2, [pc, #184]	; (8009744 <xTaskIncrementTick+0x15c>)
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800968e:	e02f      	b.n	80096f0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009690:	68bb      	ldr	r3, [r7, #8]
 8009692:	3304      	adds	r3, #4
 8009694:	4618      	mov	r0, r3
 8009696:	f7fe ff99 	bl	80085cc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800969a:	68bb      	ldr	r3, [r7, #8]
 800969c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d004      	beq.n	80096ac <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80096a2:	68bb      	ldr	r3, [r7, #8]
 80096a4:	3318      	adds	r3, #24
 80096a6:	4618      	mov	r0, r3
 80096a8:	f7fe ff90 	bl	80085cc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80096ac:	68bb      	ldr	r3, [r7, #8]
 80096ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096b0:	4b25      	ldr	r3, [pc, #148]	; (8009748 <xTaskIncrementTick+0x160>)
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	429a      	cmp	r2, r3
 80096b6:	d903      	bls.n	80096c0 <xTaskIncrementTick+0xd8>
 80096b8:	68bb      	ldr	r3, [r7, #8]
 80096ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096bc:	4a22      	ldr	r2, [pc, #136]	; (8009748 <xTaskIncrementTick+0x160>)
 80096be:	6013      	str	r3, [r2, #0]
 80096c0:	68bb      	ldr	r3, [r7, #8]
 80096c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096c4:	4613      	mov	r3, r2
 80096c6:	009b      	lsls	r3, r3, #2
 80096c8:	4413      	add	r3, r2
 80096ca:	009b      	lsls	r3, r3, #2
 80096cc:	4a1f      	ldr	r2, [pc, #124]	; (800974c <xTaskIncrementTick+0x164>)
 80096ce:	441a      	add	r2, r3
 80096d0:	68bb      	ldr	r3, [r7, #8]
 80096d2:	3304      	adds	r3, #4
 80096d4:	4619      	mov	r1, r3
 80096d6:	4610      	mov	r0, r2
 80096d8:	f7fe ff1b 	bl	8008512 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80096dc:	68bb      	ldr	r3, [r7, #8]
 80096de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096e0:	4b1b      	ldr	r3, [pc, #108]	; (8009750 <xTaskIncrementTick+0x168>)
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096e6:	429a      	cmp	r2, r3
 80096e8:	d3b8      	bcc.n	800965c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80096ea:	2301      	movs	r3, #1
 80096ec:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80096ee:	e7b5      	b.n	800965c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80096f0:	4b17      	ldr	r3, [pc, #92]	; (8009750 <xTaskIncrementTick+0x168>)
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096f6:	4915      	ldr	r1, [pc, #84]	; (800974c <xTaskIncrementTick+0x164>)
 80096f8:	4613      	mov	r3, r2
 80096fa:	009b      	lsls	r3, r3, #2
 80096fc:	4413      	add	r3, r2
 80096fe:	009b      	lsls	r3, r3, #2
 8009700:	440b      	add	r3, r1
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	2b01      	cmp	r3, #1
 8009706:	d901      	bls.n	800970c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009708:	2301      	movs	r3, #1
 800970a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800970c:	4b11      	ldr	r3, [pc, #68]	; (8009754 <xTaskIncrementTick+0x16c>)
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	2b00      	cmp	r3, #0
 8009712:	d007      	beq.n	8009724 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009714:	2301      	movs	r3, #1
 8009716:	617b      	str	r3, [r7, #20]
 8009718:	e004      	b.n	8009724 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800971a:	4b0f      	ldr	r3, [pc, #60]	; (8009758 <xTaskIncrementTick+0x170>)
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	3301      	adds	r3, #1
 8009720:	4a0d      	ldr	r2, [pc, #52]	; (8009758 <xTaskIncrementTick+0x170>)
 8009722:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009724:	697b      	ldr	r3, [r7, #20]
}
 8009726:	4618      	mov	r0, r3
 8009728:	3718      	adds	r7, #24
 800972a:	46bd      	mov	sp, r7
 800972c:	bd80      	pop	{r7, pc}
 800972e:	bf00      	nop
 8009730:	20000f00 	.word	0x20000f00
 8009734:	20000edc 	.word	0x20000edc
 8009738:	20000e90 	.word	0x20000e90
 800973c:	20000e94 	.word	0x20000e94
 8009740:	20000ef0 	.word	0x20000ef0
 8009744:	20000ef8 	.word	0x20000ef8
 8009748:	20000ee0 	.word	0x20000ee0
 800974c:	20000a08 	.word	0x20000a08
 8009750:	20000a04 	.word	0x20000a04
 8009754:	20000eec 	.word	0x20000eec
 8009758:	20000ee8 	.word	0x20000ee8

0800975c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800975c:	b480      	push	{r7}
 800975e:	b085      	sub	sp, #20
 8009760:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009762:	4b28      	ldr	r3, [pc, #160]	; (8009804 <vTaskSwitchContext+0xa8>)
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	2b00      	cmp	r3, #0
 8009768:	d003      	beq.n	8009772 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800976a:	4b27      	ldr	r3, [pc, #156]	; (8009808 <vTaskSwitchContext+0xac>)
 800976c:	2201      	movs	r2, #1
 800976e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009770:	e041      	b.n	80097f6 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8009772:	4b25      	ldr	r3, [pc, #148]	; (8009808 <vTaskSwitchContext+0xac>)
 8009774:	2200      	movs	r2, #0
 8009776:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009778:	4b24      	ldr	r3, [pc, #144]	; (800980c <vTaskSwitchContext+0xb0>)
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	60fb      	str	r3, [r7, #12]
 800977e:	e010      	b.n	80097a2 <vTaskSwitchContext+0x46>
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	2b00      	cmp	r3, #0
 8009784:	d10a      	bne.n	800979c <vTaskSwitchContext+0x40>
	__asm volatile
 8009786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800978a:	f383 8811 	msr	BASEPRI, r3
 800978e:	f3bf 8f6f 	isb	sy
 8009792:	f3bf 8f4f 	dsb	sy
 8009796:	607b      	str	r3, [r7, #4]
}
 8009798:	bf00      	nop
 800979a:	e7fe      	b.n	800979a <vTaskSwitchContext+0x3e>
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	3b01      	subs	r3, #1
 80097a0:	60fb      	str	r3, [r7, #12]
 80097a2:	491b      	ldr	r1, [pc, #108]	; (8009810 <vTaskSwitchContext+0xb4>)
 80097a4:	68fa      	ldr	r2, [r7, #12]
 80097a6:	4613      	mov	r3, r2
 80097a8:	009b      	lsls	r3, r3, #2
 80097aa:	4413      	add	r3, r2
 80097ac:	009b      	lsls	r3, r3, #2
 80097ae:	440b      	add	r3, r1
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d0e4      	beq.n	8009780 <vTaskSwitchContext+0x24>
 80097b6:	68fa      	ldr	r2, [r7, #12]
 80097b8:	4613      	mov	r3, r2
 80097ba:	009b      	lsls	r3, r3, #2
 80097bc:	4413      	add	r3, r2
 80097be:	009b      	lsls	r3, r3, #2
 80097c0:	4a13      	ldr	r2, [pc, #76]	; (8009810 <vTaskSwitchContext+0xb4>)
 80097c2:	4413      	add	r3, r2
 80097c4:	60bb      	str	r3, [r7, #8]
 80097c6:	68bb      	ldr	r3, [r7, #8]
 80097c8:	685b      	ldr	r3, [r3, #4]
 80097ca:	685a      	ldr	r2, [r3, #4]
 80097cc:	68bb      	ldr	r3, [r7, #8]
 80097ce:	605a      	str	r2, [r3, #4]
 80097d0:	68bb      	ldr	r3, [r7, #8]
 80097d2:	685a      	ldr	r2, [r3, #4]
 80097d4:	68bb      	ldr	r3, [r7, #8]
 80097d6:	3308      	adds	r3, #8
 80097d8:	429a      	cmp	r2, r3
 80097da:	d104      	bne.n	80097e6 <vTaskSwitchContext+0x8a>
 80097dc:	68bb      	ldr	r3, [r7, #8]
 80097de:	685b      	ldr	r3, [r3, #4]
 80097e0:	685a      	ldr	r2, [r3, #4]
 80097e2:	68bb      	ldr	r3, [r7, #8]
 80097e4:	605a      	str	r2, [r3, #4]
 80097e6:	68bb      	ldr	r3, [r7, #8]
 80097e8:	685b      	ldr	r3, [r3, #4]
 80097ea:	68db      	ldr	r3, [r3, #12]
 80097ec:	4a09      	ldr	r2, [pc, #36]	; (8009814 <vTaskSwitchContext+0xb8>)
 80097ee:	6013      	str	r3, [r2, #0]
 80097f0:	4a06      	ldr	r2, [pc, #24]	; (800980c <vTaskSwitchContext+0xb0>)
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	6013      	str	r3, [r2, #0]
}
 80097f6:	bf00      	nop
 80097f8:	3714      	adds	r7, #20
 80097fa:	46bd      	mov	sp, r7
 80097fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009800:	4770      	bx	lr
 8009802:	bf00      	nop
 8009804:	20000f00 	.word	0x20000f00
 8009808:	20000eec 	.word	0x20000eec
 800980c:	20000ee0 	.word	0x20000ee0
 8009810:	20000a08 	.word	0x20000a08
 8009814:	20000a04 	.word	0x20000a04

08009818 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009818:	b580      	push	{r7, lr}
 800981a:	b084      	sub	sp, #16
 800981c:	af00      	add	r7, sp, #0
 800981e:	6078      	str	r0, [r7, #4]
 8009820:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	2b00      	cmp	r3, #0
 8009826:	d10a      	bne.n	800983e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800982c:	f383 8811 	msr	BASEPRI, r3
 8009830:	f3bf 8f6f 	isb	sy
 8009834:	f3bf 8f4f 	dsb	sy
 8009838:	60fb      	str	r3, [r7, #12]
}
 800983a:	bf00      	nop
 800983c:	e7fe      	b.n	800983c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800983e:	4b07      	ldr	r3, [pc, #28]	; (800985c <vTaskPlaceOnEventList+0x44>)
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	3318      	adds	r3, #24
 8009844:	4619      	mov	r1, r3
 8009846:	6878      	ldr	r0, [r7, #4]
 8009848:	f7fe fe87 	bl	800855a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800984c:	2101      	movs	r1, #1
 800984e:	6838      	ldr	r0, [r7, #0]
 8009850:	f000 fa7c 	bl	8009d4c <prvAddCurrentTaskToDelayedList>
}
 8009854:	bf00      	nop
 8009856:	3710      	adds	r7, #16
 8009858:	46bd      	mov	sp, r7
 800985a:	bd80      	pop	{r7, pc}
 800985c:	20000a04 	.word	0x20000a04

08009860 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009860:	b580      	push	{r7, lr}
 8009862:	b086      	sub	sp, #24
 8009864:	af00      	add	r7, sp, #0
 8009866:	60f8      	str	r0, [r7, #12]
 8009868:	60b9      	str	r1, [r7, #8]
 800986a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	2b00      	cmp	r3, #0
 8009870:	d10a      	bne.n	8009888 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8009872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009876:	f383 8811 	msr	BASEPRI, r3
 800987a:	f3bf 8f6f 	isb	sy
 800987e:	f3bf 8f4f 	dsb	sy
 8009882:	617b      	str	r3, [r7, #20]
}
 8009884:	bf00      	nop
 8009886:	e7fe      	b.n	8009886 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009888:	4b0a      	ldr	r3, [pc, #40]	; (80098b4 <vTaskPlaceOnEventListRestricted+0x54>)
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	3318      	adds	r3, #24
 800988e:	4619      	mov	r1, r3
 8009890:	68f8      	ldr	r0, [r7, #12]
 8009892:	f7fe fe3e 	bl	8008512 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	2b00      	cmp	r3, #0
 800989a:	d002      	beq.n	80098a2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800989c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80098a0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80098a2:	6879      	ldr	r1, [r7, #4]
 80098a4:	68b8      	ldr	r0, [r7, #8]
 80098a6:	f000 fa51 	bl	8009d4c <prvAddCurrentTaskToDelayedList>
	}
 80098aa:	bf00      	nop
 80098ac:	3718      	adds	r7, #24
 80098ae:	46bd      	mov	sp, r7
 80098b0:	bd80      	pop	{r7, pc}
 80098b2:	bf00      	nop
 80098b4:	20000a04 	.word	0x20000a04

080098b8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b086      	sub	sp, #24
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	68db      	ldr	r3, [r3, #12]
 80098c4:	68db      	ldr	r3, [r3, #12]
 80098c6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80098c8:	693b      	ldr	r3, [r7, #16]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d10a      	bne.n	80098e4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80098ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098d2:	f383 8811 	msr	BASEPRI, r3
 80098d6:	f3bf 8f6f 	isb	sy
 80098da:	f3bf 8f4f 	dsb	sy
 80098de:	60fb      	str	r3, [r7, #12]
}
 80098e0:	bf00      	nop
 80098e2:	e7fe      	b.n	80098e2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80098e4:	693b      	ldr	r3, [r7, #16]
 80098e6:	3318      	adds	r3, #24
 80098e8:	4618      	mov	r0, r3
 80098ea:	f7fe fe6f 	bl	80085cc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80098ee:	4b1e      	ldr	r3, [pc, #120]	; (8009968 <xTaskRemoveFromEventList+0xb0>)
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d11d      	bne.n	8009932 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80098f6:	693b      	ldr	r3, [r7, #16]
 80098f8:	3304      	adds	r3, #4
 80098fa:	4618      	mov	r0, r3
 80098fc:	f7fe fe66 	bl	80085cc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009900:	693b      	ldr	r3, [r7, #16]
 8009902:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009904:	4b19      	ldr	r3, [pc, #100]	; (800996c <xTaskRemoveFromEventList+0xb4>)
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	429a      	cmp	r2, r3
 800990a:	d903      	bls.n	8009914 <xTaskRemoveFromEventList+0x5c>
 800990c:	693b      	ldr	r3, [r7, #16]
 800990e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009910:	4a16      	ldr	r2, [pc, #88]	; (800996c <xTaskRemoveFromEventList+0xb4>)
 8009912:	6013      	str	r3, [r2, #0]
 8009914:	693b      	ldr	r3, [r7, #16]
 8009916:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009918:	4613      	mov	r3, r2
 800991a:	009b      	lsls	r3, r3, #2
 800991c:	4413      	add	r3, r2
 800991e:	009b      	lsls	r3, r3, #2
 8009920:	4a13      	ldr	r2, [pc, #76]	; (8009970 <xTaskRemoveFromEventList+0xb8>)
 8009922:	441a      	add	r2, r3
 8009924:	693b      	ldr	r3, [r7, #16]
 8009926:	3304      	adds	r3, #4
 8009928:	4619      	mov	r1, r3
 800992a:	4610      	mov	r0, r2
 800992c:	f7fe fdf1 	bl	8008512 <vListInsertEnd>
 8009930:	e005      	b.n	800993e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009932:	693b      	ldr	r3, [r7, #16]
 8009934:	3318      	adds	r3, #24
 8009936:	4619      	mov	r1, r3
 8009938:	480e      	ldr	r0, [pc, #56]	; (8009974 <xTaskRemoveFromEventList+0xbc>)
 800993a:	f7fe fdea 	bl	8008512 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800993e:	693b      	ldr	r3, [r7, #16]
 8009940:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009942:	4b0d      	ldr	r3, [pc, #52]	; (8009978 <xTaskRemoveFromEventList+0xc0>)
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009948:	429a      	cmp	r2, r3
 800994a:	d905      	bls.n	8009958 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800994c:	2301      	movs	r3, #1
 800994e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009950:	4b0a      	ldr	r3, [pc, #40]	; (800997c <xTaskRemoveFromEventList+0xc4>)
 8009952:	2201      	movs	r2, #1
 8009954:	601a      	str	r2, [r3, #0]
 8009956:	e001      	b.n	800995c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009958:	2300      	movs	r3, #0
 800995a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800995c:	697b      	ldr	r3, [r7, #20]
}
 800995e:	4618      	mov	r0, r3
 8009960:	3718      	adds	r7, #24
 8009962:	46bd      	mov	sp, r7
 8009964:	bd80      	pop	{r7, pc}
 8009966:	bf00      	nop
 8009968:	20000f00 	.word	0x20000f00
 800996c:	20000ee0 	.word	0x20000ee0
 8009970:	20000a08 	.word	0x20000a08
 8009974:	20000e98 	.word	0x20000e98
 8009978:	20000a04 	.word	0x20000a04
 800997c:	20000eec 	.word	0x20000eec

08009980 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009980:	b480      	push	{r7}
 8009982:	b083      	sub	sp, #12
 8009984:	af00      	add	r7, sp, #0
 8009986:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009988:	4b06      	ldr	r3, [pc, #24]	; (80099a4 <vTaskInternalSetTimeOutState+0x24>)
 800998a:	681a      	ldr	r2, [r3, #0]
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009990:	4b05      	ldr	r3, [pc, #20]	; (80099a8 <vTaskInternalSetTimeOutState+0x28>)
 8009992:	681a      	ldr	r2, [r3, #0]
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	605a      	str	r2, [r3, #4]
}
 8009998:	bf00      	nop
 800999a:	370c      	adds	r7, #12
 800999c:	46bd      	mov	sp, r7
 800999e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a2:	4770      	bx	lr
 80099a4:	20000ef0 	.word	0x20000ef0
 80099a8:	20000edc 	.word	0x20000edc

080099ac <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80099ac:	b580      	push	{r7, lr}
 80099ae:	b088      	sub	sp, #32
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	6078      	str	r0, [r7, #4]
 80099b4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d10a      	bne.n	80099d2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80099bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099c0:	f383 8811 	msr	BASEPRI, r3
 80099c4:	f3bf 8f6f 	isb	sy
 80099c8:	f3bf 8f4f 	dsb	sy
 80099cc:	613b      	str	r3, [r7, #16]
}
 80099ce:	bf00      	nop
 80099d0:	e7fe      	b.n	80099d0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80099d2:	683b      	ldr	r3, [r7, #0]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d10a      	bne.n	80099ee <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80099d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099dc:	f383 8811 	msr	BASEPRI, r3
 80099e0:	f3bf 8f6f 	isb	sy
 80099e4:	f3bf 8f4f 	dsb	sy
 80099e8:	60fb      	str	r3, [r7, #12]
}
 80099ea:	bf00      	nop
 80099ec:	e7fe      	b.n	80099ec <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80099ee:	f000 fe79 	bl	800a6e4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80099f2:	4b1d      	ldr	r3, [pc, #116]	; (8009a68 <xTaskCheckForTimeOut+0xbc>)
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	685b      	ldr	r3, [r3, #4]
 80099fc:	69ba      	ldr	r2, [r7, #24]
 80099fe:	1ad3      	subs	r3, r2, r3
 8009a00:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009a02:	683b      	ldr	r3, [r7, #0]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009a0a:	d102      	bne.n	8009a12 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009a0c:	2300      	movs	r3, #0
 8009a0e:	61fb      	str	r3, [r7, #28]
 8009a10:	e023      	b.n	8009a5a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681a      	ldr	r2, [r3, #0]
 8009a16:	4b15      	ldr	r3, [pc, #84]	; (8009a6c <xTaskCheckForTimeOut+0xc0>)
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	429a      	cmp	r2, r3
 8009a1c:	d007      	beq.n	8009a2e <xTaskCheckForTimeOut+0x82>
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	685b      	ldr	r3, [r3, #4]
 8009a22:	69ba      	ldr	r2, [r7, #24]
 8009a24:	429a      	cmp	r2, r3
 8009a26:	d302      	bcc.n	8009a2e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009a28:	2301      	movs	r3, #1
 8009a2a:	61fb      	str	r3, [r7, #28]
 8009a2c:	e015      	b.n	8009a5a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009a2e:	683b      	ldr	r3, [r7, #0]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	697a      	ldr	r2, [r7, #20]
 8009a34:	429a      	cmp	r2, r3
 8009a36:	d20b      	bcs.n	8009a50 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009a38:	683b      	ldr	r3, [r7, #0]
 8009a3a:	681a      	ldr	r2, [r3, #0]
 8009a3c:	697b      	ldr	r3, [r7, #20]
 8009a3e:	1ad2      	subs	r2, r2, r3
 8009a40:	683b      	ldr	r3, [r7, #0]
 8009a42:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009a44:	6878      	ldr	r0, [r7, #4]
 8009a46:	f7ff ff9b 	bl	8009980 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	61fb      	str	r3, [r7, #28]
 8009a4e:	e004      	b.n	8009a5a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009a50:	683b      	ldr	r3, [r7, #0]
 8009a52:	2200      	movs	r2, #0
 8009a54:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009a56:	2301      	movs	r3, #1
 8009a58:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009a5a:	f000 fe73 	bl	800a744 <vPortExitCritical>

	return xReturn;
 8009a5e:	69fb      	ldr	r3, [r7, #28]
}
 8009a60:	4618      	mov	r0, r3
 8009a62:	3720      	adds	r7, #32
 8009a64:	46bd      	mov	sp, r7
 8009a66:	bd80      	pop	{r7, pc}
 8009a68:	20000edc 	.word	0x20000edc
 8009a6c:	20000ef0 	.word	0x20000ef0

08009a70 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009a70:	b480      	push	{r7}
 8009a72:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009a74:	4b03      	ldr	r3, [pc, #12]	; (8009a84 <vTaskMissedYield+0x14>)
 8009a76:	2201      	movs	r2, #1
 8009a78:	601a      	str	r2, [r3, #0]
}
 8009a7a:	bf00      	nop
 8009a7c:	46bd      	mov	sp, r7
 8009a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a82:	4770      	bx	lr
 8009a84:	20000eec 	.word	0x20000eec

08009a88 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009a88:	b580      	push	{r7, lr}
 8009a8a:	b082      	sub	sp, #8
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009a90:	f000 f852 	bl	8009b38 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009a94:	4b06      	ldr	r3, [pc, #24]	; (8009ab0 <prvIdleTask+0x28>)
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	2b01      	cmp	r3, #1
 8009a9a:	d9f9      	bls.n	8009a90 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009a9c:	4b05      	ldr	r3, [pc, #20]	; (8009ab4 <prvIdleTask+0x2c>)
 8009a9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009aa2:	601a      	str	r2, [r3, #0]
 8009aa4:	f3bf 8f4f 	dsb	sy
 8009aa8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009aac:	e7f0      	b.n	8009a90 <prvIdleTask+0x8>
 8009aae:	bf00      	nop
 8009ab0:	20000a08 	.word	0x20000a08
 8009ab4:	e000ed04 	.word	0xe000ed04

08009ab8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009ab8:	b580      	push	{r7, lr}
 8009aba:	b082      	sub	sp, #8
 8009abc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009abe:	2300      	movs	r3, #0
 8009ac0:	607b      	str	r3, [r7, #4]
 8009ac2:	e00c      	b.n	8009ade <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009ac4:	687a      	ldr	r2, [r7, #4]
 8009ac6:	4613      	mov	r3, r2
 8009ac8:	009b      	lsls	r3, r3, #2
 8009aca:	4413      	add	r3, r2
 8009acc:	009b      	lsls	r3, r3, #2
 8009ace:	4a12      	ldr	r2, [pc, #72]	; (8009b18 <prvInitialiseTaskLists+0x60>)
 8009ad0:	4413      	add	r3, r2
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	f7fe fcf0 	bl	80084b8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	3301      	adds	r3, #1
 8009adc:	607b      	str	r3, [r7, #4]
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	2b37      	cmp	r3, #55	; 0x37
 8009ae2:	d9ef      	bls.n	8009ac4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009ae4:	480d      	ldr	r0, [pc, #52]	; (8009b1c <prvInitialiseTaskLists+0x64>)
 8009ae6:	f7fe fce7 	bl	80084b8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009aea:	480d      	ldr	r0, [pc, #52]	; (8009b20 <prvInitialiseTaskLists+0x68>)
 8009aec:	f7fe fce4 	bl	80084b8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009af0:	480c      	ldr	r0, [pc, #48]	; (8009b24 <prvInitialiseTaskLists+0x6c>)
 8009af2:	f7fe fce1 	bl	80084b8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009af6:	480c      	ldr	r0, [pc, #48]	; (8009b28 <prvInitialiseTaskLists+0x70>)
 8009af8:	f7fe fcde 	bl	80084b8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009afc:	480b      	ldr	r0, [pc, #44]	; (8009b2c <prvInitialiseTaskLists+0x74>)
 8009afe:	f7fe fcdb 	bl	80084b8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009b02:	4b0b      	ldr	r3, [pc, #44]	; (8009b30 <prvInitialiseTaskLists+0x78>)
 8009b04:	4a05      	ldr	r2, [pc, #20]	; (8009b1c <prvInitialiseTaskLists+0x64>)
 8009b06:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009b08:	4b0a      	ldr	r3, [pc, #40]	; (8009b34 <prvInitialiseTaskLists+0x7c>)
 8009b0a:	4a05      	ldr	r2, [pc, #20]	; (8009b20 <prvInitialiseTaskLists+0x68>)
 8009b0c:	601a      	str	r2, [r3, #0]
}
 8009b0e:	bf00      	nop
 8009b10:	3708      	adds	r7, #8
 8009b12:	46bd      	mov	sp, r7
 8009b14:	bd80      	pop	{r7, pc}
 8009b16:	bf00      	nop
 8009b18:	20000a08 	.word	0x20000a08
 8009b1c:	20000e68 	.word	0x20000e68
 8009b20:	20000e7c 	.word	0x20000e7c
 8009b24:	20000e98 	.word	0x20000e98
 8009b28:	20000eac 	.word	0x20000eac
 8009b2c:	20000ec4 	.word	0x20000ec4
 8009b30:	20000e90 	.word	0x20000e90
 8009b34:	20000e94 	.word	0x20000e94

08009b38 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b082      	sub	sp, #8
 8009b3c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009b3e:	e019      	b.n	8009b74 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009b40:	f000 fdd0 	bl	800a6e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b44:	4b10      	ldr	r3, [pc, #64]	; (8009b88 <prvCheckTasksWaitingTermination+0x50>)
 8009b46:	68db      	ldr	r3, [r3, #12]
 8009b48:	68db      	ldr	r3, [r3, #12]
 8009b4a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	3304      	adds	r3, #4
 8009b50:	4618      	mov	r0, r3
 8009b52:	f7fe fd3b 	bl	80085cc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009b56:	4b0d      	ldr	r3, [pc, #52]	; (8009b8c <prvCheckTasksWaitingTermination+0x54>)
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	3b01      	subs	r3, #1
 8009b5c:	4a0b      	ldr	r2, [pc, #44]	; (8009b8c <prvCheckTasksWaitingTermination+0x54>)
 8009b5e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009b60:	4b0b      	ldr	r3, [pc, #44]	; (8009b90 <prvCheckTasksWaitingTermination+0x58>)
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	3b01      	subs	r3, #1
 8009b66:	4a0a      	ldr	r2, [pc, #40]	; (8009b90 <prvCheckTasksWaitingTermination+0x58>)
 8009b68:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009b6a:	f000 fdeb 	bl	800a744 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009b6e:	6878      	ldr	r0, [r7, #4]
 8009b70:	f000 f810 	bl	8009b94 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009b74:	4b06      	ldr	r3, [pc, #24]	; (8009b90 <prvCheckTasksWaitingTermination+0x58>)
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d1e1      	bne.n	8009b40 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009b7c:	bf00      	nop
 8009b7e:	bf00      	nop
 8009b80:	3708      	adds	r7, #8
 8009b82:	46bd      	mov	sp, r7
 8009b84:	bd80      	pop	{r7, pc}
 8009b86:	bf00      	nop
 8009b88:	20000eac 	.word	0x20000eac
 8009b8c:	20000ed8 	.word	0x20000ed8
 8009b90:	20000ec0 	.word	0x20000ec0

08009b94 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b084      	sub	sp, #16
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d108      	bne.n	8009bb8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009baa:	4618      	mov	r0, r3
 8009bac:	f000 ff88 	bl	800aac0 <vPortFree>
				vPortFree( pxTCB );
 8009bb0:	6878      	ldr	r0, [r7, #4]
 8009bb2:	f000 ff85 	bl	800aac0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009bb6:	e018      	b.n	8009bea <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009bbe:	2b01      	cmp	r3, #1
 8009bc0:	d103      	bne.n	8009bca <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009bc2:	6878      	ldr	r0, [r7, #4]
 8009bc4:	f000 ff7c 	bl	800aac0 <vPortFree>
	}
 8009bc8:	e00f      	b.n	8009bea <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009bd0:	2b02      	cmp	r3, #2
 8009bd2:	d00a      	beq.n	8009bea <prvDeleteTCB+0x56>
	__asm volatile
 8009bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bd8:	f383 8811 	msr	BASEPRI, r3
 8009bdc:	f3bf 8f6f 	isb	sy
 8009be0:	f3bf 8f4f 	dsb	sy
 8009be4:	60fb      	str	r3, [r7, #12]
}
 8009be6:	bf00      	nop
 8009be8:	e7fe      	b.n	8009be8 <prvDeleteTCB+0x54>
	}
 8009bea:	bf00      	nop
 8009bec:	3710      	adds	r7, #16
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	bd80      	pop	{r7, pc}
	...

08009bf4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009bf4:	b480      	push	{r7}
 8009bf6:	b083      	sub	sp, #12
 8009bf8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009bfa:	4b0c      	ldr	r3, [pc, #48]	; (8009c2c <prvResetNextTaskUnblockTime+0x38>)
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d104      	bne.n	8009c0e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009c04:	4b0a      	ldr	r3, [pc, #40]	; (8009c30 <prvResetNextTaskUnblockTime+0x3c>)
 8009c06:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009c0a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009c0c:	e008      	b.n	8009c20 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c0e:	4b07      	ldr	r3, [pc, #28]	; (8009c2c <prvResetNextTaskUnblockTime+0x38>)
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	68db      	ldr	r3, [r3, #12]
 8009c14:	68db      	ldr	r3, [r3, #12]
 8009c16:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	685b      	ldr	r3, [r3, #4]
 8009c1c:	4a04      	ldr	r2, [pc, #16]	; (8009c30 <prvResetNextTaskUnblockTime+0x3c>)
 8009c1e:	6013      	str	r3, [r2, #0]
}
 8009c20:	bf00      	nop
 8009c22:	370c      	adds	r7, #12
 8009c24:	46bd      	mov	sp, r7
 8009c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c2a:	4770      	bx	lr
 8009c2c:	20000e90 	.word	0x20000e90
 8009c30:	20000ef8 	.word	0x20000ef8

08009c34 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009c34:	b480      	push	{r7}
 8009c36:	b083      	sub	sp, #12
 8009c38:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009c3a:	4b0b      	ldr	r3, [pc, #44]	; (8009c68 <xTaskGetSchedulerState+0x34>)
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d102      	bne.n	8009c48 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009c42:	2301      	movs	r3, #1
 8009c44:	607b      	str	r3, [r7, #4]
 8009c46:	e008      	b.n	8009c5a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009c48:	4b08      	ldr	r3, [pc, #32]	; (8009c6c <xTaskGetSchedulerState+0x38>)
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d102      	bne.n	8009c56 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009c50:	2302      	movs	r3, #2
 8009c52:	607b      	str	r3, [r7, #4]
 8009c54:	e001      	b.n	8009c5a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009c56:	2300      	movs	r3, #0
 8009c58:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009c5a:	687b      	ldr	r3, [r7, #4]
	}
 8009c5c:	4618      	mov	r0, r3
 8009c5e:	370c      	adds	r7, #12
 8009c60:	46bd      	mov	sp, r7
 8009c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c66:	4770      	bx	lr
 8009c68:	20000ee4 	.word	0x20000ee4
 8009c6c:	20000f00 	.word	0x20000f00

08009c70 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009c70:	b580      	push	{r7, lr}
 8009c72:	b086      	sub	sp, #24
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d056      	beq.n	8009d34 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009c86:	4b2e      	ldr	r3, [pc, #184]	; (8009d40 <xTaskPriorityDisinherit+0xd0>)
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	693a      	ldr	r2, [r7, #16]
 8009c8c:	429a      	cmp	r2, r3
 8009c8e:	d00a      	beq.n	8009ca6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c94:	f383 8811 	msr	BASEPRI, r3
 8009c98:	f3bf 8f6f 	isb	sy
 8009c9c:	f3bf 8f4f 	dsb	sy
 8009ca0:	60fb      	str	r3, [r7, #12]
}
 8009ca2:	bf00      	nop
 8009ca4:	e7fe      	b.n	8009ca4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009ca6:	693b      	ldr	r3, [r7, #16]
 8009ca8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d10a      	bne.n	8009cc4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cb2:	f383 8811 	msr	BASEPRI, r3
 8009cb6:	f3bf 8f6f 	isb	sy
 8009cba:	f3bf 8f4f 	dsb	sy
 8009cbe:	60bb      	str	r3, [r7, #8]
}
 8009cc0:	bf00      	nop
 8009cc2:	e7fe      	b.n	8009cc2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009cc4:	693b      	ldr	r3, [r7, #16]
 8009cc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009cc8:	1e5a      	subs	r2, r3, #1
 8009cca:	693b      	ldr	r3, [r7, #16]
 8009ccc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009cce:	693b      	ldr	r3, [r7, #16]
 8009cd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cd2:	693b      	ldr	r3, [r7, #16]
 8009cd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009cd6:	429a      	cmp	r2, r3
 8009cd8:	d02c      	beq.n	8009d34 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009cda:	693b      	ldr	r3, [r7, #16]
 8009cdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d128      	bne.n	8009d34 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009ce2:	693b      	ldr	r3, [r7, #16]
 8009ce4:	3304      	adds	r3, #4
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	f7fe fc70 	bl	80085cc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009cec:	693b      	ldr	r3, [r7, #16]
 8009cee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009cf0:	693b      	ldr	r3, [r7, #16]
 8009cf2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009cf4:	693b      	ldr	r3, [r7, #16]
 8009cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cf8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009cfc:	693b      	ldr	r3, [r7, #16]
 8009cfe:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009d00:	693b      	ldr	r3, [r7, #16]
 8009d02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d04:	4b0f      	ldr	r3, [pc, #60]	; (8009d44 <xTaskPriorityDisinherit+0xd4>)
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	429a      	cmp	r2, r3
 8009d0a:	d903      	bls.n	8009d14 <xTaskPriorityDisinherit+0xa4>
 8009d0c:	693b      	ldr	r3, [r7, #16]
 8009d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d10:	4a0c      	ldr	r2, [pc, #48]	; (8009d44 <xTaskPriorityDisinherit+0xd4>)
 8009d12:	6013      	str	r3, [r2, #0]
 8009d14:	693b      	ldr	r3, [r7, #16]
 8009d16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d18:	4613      	mov	r3, r2
 8009d1a:	009b      	lsls	r3, r3, #2
 8009d1c:	4413      	add	r3, r2
 8009d1e:	009b      	lsls	r3, r3, #2
 8009d20:	4a09      	ldr	r2, [pc, #36]	; (8009d48 <xTaskPriorityDisinherit+0xd8>)
 8009d22:	441a      	add	r2, r3
 8009d24:	693b      	ldr	r3, [r7, #16]
 8009d26:	3304      	adds	r3, #4
 8009d28:	4619      	mov	r1, r3
 8009d2a:	4610      	mov	r0, r2
 8009d2c:	f7fe fbf1 	bl	8008512 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009d30:	2301      	movs	r3, #1
 8009d32:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009d34:	697b      	ldr	r3, [r7, #20]
	}
 8009d36:	4618      	mov	r0, r3
 8009d38:	3718      	adds	r7, #24
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	bd80      	pop	{r7, pc}
 8009d3e:	bf00      	nop
 8009d40:	20000a04 	.word	0x20000a04
 8009d44:	20000ee0 	.word	0x20000ee0
 8009d48:	20000a08 	.word	0x20000a08

08009d4c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	b084      	sub	sp, #16
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]
 8009d54:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009d56:	4b21      	ldr	r3, [pc, #132]	; (8009ddc <prvAddCurrentTaskToDelayedList+0x90>)
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009d5c:	4b20      	ldr	r3, [pc, #128]	; (8009de0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	3304      	adds	r3, #4
 8009d62:	4618      	mov	r0, r3
 8009d64:	f7fe fc32 	bl	80085cc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009d6e:	d10a      	bne.n	8009d86 <prvAddCurrentTaskToDelayedList+0x3a>
 8009d70:	683b      	ldr	r3, [r7, #0]
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d007      	beq.n	8009d86 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009d76:	4b1a      	ldr	r3, [pc, #104]	; (8009de0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	3304      	adds	r3, #4
 8009d7c:	4619      	mov	r1, r3
 8009d7e:	4819      	ldr	r0, [pc, #100]	; (8009de4 <prvAddCurrentTaskToDelayedList+0x98>)
 8009d80:	f7fe fbc7 	bl	8008512 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009d84:	e026      	b.n	8009dd4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009d86:	68fa      	ldr	r2, [r7, #12]
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	4413      	add	r3, r2
 8009d8c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009d8e:	4b14      	ldr	r3, [pc, #80]	; (8009de0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	68ba      	ldr	r2, [r7, #8]
 8009d94:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009d96:	68ba      	ldr	r2, [r7, #8]
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	429a      	cmp	r2, r3
 8009d9c:	d209      	bcs.n	8009db2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009d9e:	4b12      	ldr	r3, [pc, #72]	; (8009de8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009da0:	681a      	ldr	r2, [r3, #0]
 8009da2:	4b0f      	ldr	r3, [pc, #60]	; (8009de0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	3304      	adds	r3, #4
 8009da8:	4619      	mov	r1, r3
 8009daa:	4610      	mov	r0, r2
 8009dac:	f7fe fbd5 	bl	800855a <vListInsert>
}
 8009db0:	e010      	b.n	8009dd4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009db2:	4b0e      	ldr	r3, [pc, #56]	; (8009dec <prvAddCurrentTaskToDelayedList+0xa0>)
 8009db4:	681a      	ldr	r2, [r3, #0]
 8009db6:	4b0a      	ldr	r3, [pc, #40]	; (8009de0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	3304      	adds	r3, #4
 8009dbc:	4619      	mov	r1, r3
 8009dbe:	4610      	mov	r0, r2
 8009dc0:	f7fe fbcb 	bl	800855a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009dc4:	4b0a      	ldr	r3, [pc, #40]	; (8009df0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	68ba      	ldr	r2, [r7, #8]
 8009dca:	429a      	cmp	r2, r3
 8009dcc:	d202      	bcs.n	8009dd4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009dce:	4a08      	ldr	r2, [pc, #32]	; (8009df0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009dd0:	68bb      	ldr	r3, [r7, #8]
 8009dd2:	6013      	str	r3, [r2, #0]
}
 8009dd4:	bf00      	nop
 8009dd6:	3710      	adds	r7, #16
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	bd80      	pop	{r7, pc}
 8009ddc:	20000edc 	.word	0x20000edc
 8009de0:	20000a04 	.word	0x20000a04
 8009de4:	20000ec4 	.word	0x20000ec4
 8009de8:	20000e94 	.word	0x20000e94
 8009dec:	20000e90 	.word	0x20000e90
 8009df0:	20000ef8 	.word	0x20000ef8

08009df4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009df4:	b580      	push	{r7, lr}
 8009df6:	b08a      	sub	sp, #40	; 0x28
 8009df8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009dfe:	f000 fb07 	bl	800a410 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009e02:	4b1c      	ldr	r3, [pc, #112]	; (8009e74 <xTimerCreateTimerTask+0x80>)
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d021      	beq.n	8009e4e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009e0e:	2300      	movs	r3, #0
 8009e10:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009e12:	1d3a      	adds	r2, r7, #4
 8009e14:	f107 0108 	add.w	r1, r7, #8
 8009e18:	f107 030c 	add.w	r3, r7, #12
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	f7fe fb31 	bl	8008484 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009e22:	6879      	ldr	r1, [r7, #4]
 8009e24:	68bb      	ldr	r3, [r7, #8]
 8009e26:	68fa      	ldr	r2, [r7, #12]
 8009e28:	9202      	str	r2, [sp, #8]
 8009e2a:	9301      	str	r3, [sp, #4]
 8009e2c:	2302      	movs	r3, #2
 8009e2e:	9300      	str	r3, [sp, #0]
 8009e30:	2300      	movs	r3, #0
 8009e32:	460a      	mov	r2, r1
 8009e34:	4910      	ldr	r1, [pc, #64]	; (8009e78 <xTimerCreateTimerTask+0x84>)
 8009e36:	4811      	ldr	r0, [pc, #68]	; (8009e7c <xTimerCreateTimerTask+0x88>)
 8009e38:	f7ff f8de 	bl	8008ff8 <xTaskCreateStatic>
 8009e3c:	4603      	mov	r3, r0
 8009e3e:	4a10      	ldr	r2, [pc, #64]	; (8009e80 <xTimerCreateTimerTask+0x8c>)
 8009e40:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009e42:	4b0f      	ldr	r3, [pc, #60]	; (8009e80 <xTimerCreateTimerTask+0x8c>)
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d001      	beq.n	8009e4e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009e4a:	2301      	movs	r3, #1
 8009e4c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009e4e:	697b      	ldr	r3, [r7, #20]
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d10a      	bne.n	8009e6a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e58:	f383 8811 	msr	BASEPRI, r3
 8009e5c:	f3bf 8f6f 	isb	sy
 8009e60:	f3bf 8f4f 	dsb	sy
 8009e64:	613b      	str	r3, [r7, #16]
}
 8009e66:	bf00      	nop
 8009e68:	e7fe      	b.n	8009e68 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009e6a:	697b      	ldr	r3, [r7, #20]
}
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	3718      	adds	r7, #24
 8009e70:	46bd      	mov	sp, r7
 8009e72:	bd80      	pop	{r7, pc}
 8009e74:	20000f34 	.word	0x20000f34
 8009e78:	0800b8c0 	.word	0x0800b8c0
 8009e7c:	08009fb9 	.word	0x08009fb9
 8009e80:	20000f38 	.word	0x20000f38

08009e84 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009e84:	b580      	push	{r7, lr}
 8009e86:	b08a      	sub	sp, #40	; 0x28
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	60f8      	str	r0, [r7, #12]
 8009e8c:	60b9      	str	r1, [r7, #8]
 8009e8e:	607a      	str	r2, [r7, #4]
 8009e90:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009e92:	2300      	movs	r3, #0
 8009e94:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d10a      	bne.n	8009eb2 <xTimerGenericCommand+0x2e>
	__asm volatile
 8009e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ea0:	f383 8811 	msr	BASEPRI, r3
 8009ea4:	f3bf 8f6f 	isb	sy
 8009ea8:	f3bf 8f4f 	dsb	sy
 8009eac:	623b      	str	r3, [r7, #32]
}
 8009eae:	bf00      	nop
 8009eb0:	e7fe      	b.n	8009eb0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009eb2:	4b1a      	ldr	r3, [pc, #104]	; (8009f1c <xTimerGenericCommand+0x98>)
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d02a      	beq.n	8009f10 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009eba:	68bb      	ldr	r3, [r7, #8]
 8009ebc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009ec6:	68bb      	ldr	r3, [r7, #8]
 8009ec8:	2b05      	cmp	r3, #5
 8009eca:	dc18      	bgt.n	8009efe <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009ecc:	f7ff feb2 	bl	8009c34 <xTaskGetSchedulerState>
 8009ed0:	4603      	mov	r3, r0
 8009ed2:	2b02      	cmp	r3, #2
 8009ed4:	d109      	bne.n	8009eea <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009ed6:	4b11      	ldr	r3, [pc, #68]	; (8009f1c <xTimerGenericCommand+0x98>)
 8009ed8:	6818      	ldr	r0, [r3, #0]
 8009eda:	f107 0110 	add.w	r1, r7, #16
 8009ede:	2300      	movs	r3, #0
 8009ee0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009ee2:	f7fe fca1 	bl	8008828 <xQueueGenericSend>
 8009ee6:	6278      	str	r0, [r7, #36]	; 0x24
 8009ee8:	e012      	b.n	8009f10 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009eea:	4b0c      	ldr	r3, [pc, #48]	; (8009f1c <xTimerGenericCommand+0x98>)
 8009eec:	6818      	ldr	r0, [r3, #0]
 8009eee:	f107 0110 	add.w	r1, r7, #16
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	2200      	movs	r2, #0
 8009ef6:	f7fe fc97 	bl	8008828 <xQueueGenericSend>
 8009efa:	6278      	str	r0, [r7, #36]	; 0x24
 8009efc:	e008      	b.n	8009f10 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009efe:	4b07      	ldr	r3, [pc, #28]	; (8009f1c <xTimerGenericCommand+0x98>)
 8009f00:	6818      	ldr	r0, [r3, #0]
 8009f02:	f107 0110 	add.w	r1, r7, #16
 8009f06:	2300      	movs	r3, #0
 8009f08:	683a      	ldr	r2, [r7, #0]
 8009f0a:	f7fe fd8b 	bl	8008a24 <xQueueGenericSendFromISR>
 8009f0e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009f12:	4618      	mov	r0, r3
 8009f14:	3728      	adds	r7, #40	; 0x28
 8009f16:	46bd      	mov	sp, r7
 8009f18:	bd80      	pop	{r7, pc}
 8009f1a:	bf00      	nop
 8009f1c:	20000f34 	.word	0x20000f34

08009f20 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009f20:	b580      	push	{r7, lr}
 8009f22:	b088      	sub	sp, #32
 8009f24:	af02      	add	r7, sp, #8
 8009f26:	6078      	str	r0, [r7, #4]
 8009f28:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f2a:	4b22      	ldr	r3, [pc, #136]	; (8009fb4 <prvProcessExpiredTimer+0x94>)
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	68db      	ldr	r3, [r3, #12]
 8009f30:	68db      	ldr	r3, [r3, #12]
 8009f32:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009f34:	697b      	ldr	r3, [r7, #20]
 8009f36:	3304      	adds	r3, #4
 8009f38:	4618      	mov	r0, r3
 8009f3a:	f7fe fb47 	bl	80085cc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009f3e:	697b      	ldr	r3, [r7, #20]
 8009f40:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009f44:	f003 0304 	and.w	r3, r3, #4
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d022      	beq.n	8009f92 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009f4c:	697b      	ldr	r3, [r7, #20]
 8009f4e:	699a      	ldr	r2, [r3, #24]
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	18d1      	adds	r1, r2, r3
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	683a      	ldr	r2, [r7, #0]
 8009f58:	6978      	ldr	r0, [r7, #20]
 8009f5a:	f000 f8d1 	bl	800a100 <prvInsertTimerInActiveList>
 8009f5e:	4603      	mov	r3, r0
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d01f      	beq.n	8009fa4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009f64:	2300      	movs	r3, #0
 8009f66:	9300      	str	r3, [sp, #0]
 8009f68:	2300      	movs	r3, #0
 8009f6a:	687a      	ldr	r2, [r7, #4]
 8009f6c:	2100      	movs	r1, #0
 8009f6e:	6978      	ldr	r0, [r7, #20]
 8009f70:	f7ff ff88 	bl	8009e84 <xTimerGenericCommand>
 8009f74:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009f76:	693b      	ldr	r3, [r7, #16]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d113      	bne.n	8009fa4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f80:	f383 8811 	msr	BASEPRI, r3
 8009f84:	f3bf 8f6f 	isb	sy
 8009f88:	f3bf 8f4f 	dsb	sy
 8009f8c:	60fb      	str	r3, [r7, #12]
}
 8009f8e:	bf00      	nop
 8009f90:	e7fe      	b.n	8009f90 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009f92:	697b      	ldr	r3, [r7, #20]
 8009f94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009f98:	f023 0301 	bic.w	r3, r3, #1
 8009f9c:	b2da      	uxtb	r2, r3
 8009f9e:	697b      	ldr	r3, [r7, #20]
 8009fa0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009fa4:	697b      	ldr	r3, [r7, #20]
 8009fa6:	6a1b      	ldr	r3, [r3, #32]
 8009fa8:	6978      	ldr	r0, [r7, #20]
 8009faa:	4798      	blx	r3
}
 8009fac:	bf00      	nop
 8009fae:	3718      	adds	r7, #24
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	bd80      	pop	{r7, pc}
 8009fb4:	20000f2c 	.word	0x20000f2c

08009fb8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	b084      	sub	sp, #16
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009fc0:	f107 0308 	add.w	r3, r7, #8
 8009fc4:	4618      	mov	r0, r3
 8009fc6:	f000 f857 	bl	800a078 <prvGetNextExpireTime>
 8009fca:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009fcc:	68bb      	ldr	r3, [r7, #8]
 8009fce:	4619      	mov	r1, r3
 8009fd0:	68f8      	ldr	r0, [r7, #12]
 8009fd2:	f000 f803 	bl	8009fdc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009fd6:	f000 f8d5 	bl	800a184 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009fda:	e7f1      	b.n	8009fc0 <prvTimerTask+0x8>

08009fdc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009fdc:	b580      	push	{r7, lr}
 8009fde:	b084      	sub	sp, #16
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	6078      	str	r0, [r7, #4]
 8009fe4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009fe6:	f7ff fa43 	bl	8009470 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009fea:	f107 0308 	add.w	r3, r7, #8
 8009fee:	4618      	mov	r0, r3
 8009ff0:	f000 f866 	bl	800a0c0 <prvSampleTimeNow>
 8009ff4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009ff6:	68bb      	ldr	r3, [r7, #8]
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d130      	bne.n	800a05e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009ffc:	683b      	ldr	r3, [r7, #0]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d10a      	bne.n	800a018 <prvProcessTimerOrBlockTask+0x3c>
 800a002:	687a      	ldr	r2, [r7, #4]
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	429a      	cmp	r2, r3
 800a008:	d806      	bhi.n	800a018 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a00a:	f7ff fa3f 	bl	800948c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a00e:	68f9      	ldr	r1, [r7, #12]
 800a010:	6878      	ldr	r0, [r7, #4]
 800a012:	f7ff ff85 	bl	8009f20 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a016:	e024      	b.n	800a062 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a018:	683b      	ldr	r3, [r7, #0]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d008      	beq.n	800a030 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a01e:	4b13      	ldr	r3, [pc, #76]	; (800a06c <prvProcessTimerOrBlockTask+0x90>)
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	2b00      	cmp	r3, #0
 800a026:	d101      	bne.n	800a02c <prvProcessTimerOrBlockTask+0x50>
 800a028:	2301      	movs	r3, #1
 800a02a:	e000      	b.n	800a02e <prvProcessTimerOrBlockTask+0x52>
 800a02c:	2300      	movs	r3, #0
 800a02e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a030:	4b0f      	ldr	r3, [pc, #60]	; (800a070 <prvProcessTimerOrBlockTask+0x94>)
 800a032:	6818      	ldr	r0, [r3, #0]
 800a034:	687a      	ldr	r2, [r7, #4]
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	1ad3      	subs	r3, r2, r3
 800a03a:	683a      	ldr	r2, [r7, #0]
 800a03c:	4619      	mov	r1, r3
 800a03e:	f7fe ffa7 	bl	8008f90 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a042:	f7ff fa23 	bl	800948c <xTaskResumeAll>
 800a046:	4603      	mov	r3, r0
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d10a      	bne.n	800a062 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a04c:	4b09      	ldr	r3, [pc, #36]	; (800a074 <prvProcessTimerOrBlockTask+0x98>)
 800a04e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a052:	601a      	str	r2, [r3, #0]
 800a054:	f3bf 8f4f 	dsb	sy
 800a058:	f3bf 8f6f 	isb	sy
}
 800a05c:	e001      	b.n	800a062 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a05e:	f7ff fa15 	bl	800948c <xTaskResumeAll>
}
 800a062:	bf00      	nop
 800a064:	3710      	adds	r7, #16
 800a066:	46bd      	mov	sp, r7
 800a068:	bd80      	pop	{r7, pc}
 800a06a:	bf00      	nop
 800a06c:	20000f30 	.word	0x20000f30
 800a070:	20000f34 	.word	0x20000f34
 800a074:	e000ed04 	.word	0xe000ed04

0800a078 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a078:	b480      	push	{r7}
 800a07a:	b085      	sub	sp, #20
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a080:	4b0e      	ldr	r3, [pc, #56]	; (800a0bc <prvGetNextExpireTime+0x44>)
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	2b00      	cmp	r3, #0
 800a088:	d101      	bne.n	800a08e <prvGetNextExpireTime+0x16>
 800a08a:	2201      	movs	r2, #1
 800a08c:	e000      	b.n	800a090 <prvGetNextExpireTime+0x18>
 800a08e:	2200      	movs	r2, #0
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d105      	bne.n	800a0a8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a09c:	4b07      	ldr	r3, [pc, #28]	; (800a0bc <prvGetNextExpireTime+0x44>)
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	68db      	ldr	r3, [r3, #12]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	60fb      	str	r3, [r7, #12]
 800a0a6:	e001      	b.n	800a0ac <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a0a8:	2300      	movs	r3, #0
 800a0aa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a0ac:	68fb      	ldr	r3, [r7, #12]
}
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	3714      	adds	r7, #20
 800a0b2:	46bd      	mov	sp, r7
 800a0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b8:	4770      	bx	lr
 800a0ba:	bf00      	nop
 800a0bc:	20000f2c 	.word	0x20000f2c

0800a0c0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a0c0:	b580      	push	{r7, lr}
 800a0c2:	b084      	sub	sp, #16
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a0c8:	f7ff fa7e 	bl	80095c8 <xTaskGetTickCount>
 800a0cc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a0ce:	4b0b      	ldr	r3, [pc, #44]	; (800a0fc <prvSampleTimeNow+0x3c>)
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	68fa      	ldr	r2, [r7, #12]
 800a0d4:	429a      	cmp	r2, r3
 800a0d6:	d205      	bcs.n	800a0e4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a0d8:	f000 f936 	bl	800a348 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	2201      	movs	r2, #1
 800a0e0:	601a      	str	r2, [r3, #0]
 800a0e2:	e002      	b.n	800a0ea <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	2200      	movs	r2, #0
 800a0e8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a0ea:	4a04      	ldr	r2, [pc, #16]	; (800a0fc <prvSampleTimeNow+0x3c>)
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a0f0:	68fb      	ldr	r3, [r7, #12]
}
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	3710      	adds	r7, #16
 800a0f6:	46bd      	mov	sp, r7
 800a0f8:	bd80      	pop	{r7, pc}
 800a0fa:	bf00      	nop
 800a0fc:	20000f3c 	.word	0x20000f3c

0800a100 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a100:	b580      	push	{r7, lr}
 800a102:	b086      	sub	sp, #24
 800a104:	af00      	add	r7, sp, #0
 800a106:	60f8      	str	r0, [r7, #12]
 800a108:	60b9      	str	r1, [r7, #8]
 800a10a:	607a      	str	r2, [r7, #4]
 800a10c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a10e:	2300      	movs	r3, #0
 800a110:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	68ba      	ldr	r2, [r7, #8]
 800a116:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	68fa      	ldr	r2, [r7, #12]
 800a11c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a11e:	68ba      	ldr	r2, [r7, #8]
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	429a      	cmp	r2, r3
 800a124:	d812      	bhi.n	800a14c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a126:	687a      	ldr	r2, [r7, #4]
 800a128:	683b      	ldr	r3, [r7, #0]
 800a12a:	1ad2      	subs	r2, r2, r3
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	699b      	ldr	r3, [r3, #24]
 800a130:	429a      	cmp	r2, r3
 800a132:	d302      	bcc.n	800a13a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a134:	2301      	movs	r3, #1
 800a136:	617b      	str	r3, [r7, #20]
 800a138:	e01b      	b.n	800a172 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a13a:	4b10      	ldr	r3, [pc, #64]	; (800a17c <prvInsertTimerInActiveList+0x7c>)
 800a13c:	681a      	ldr	r2, [r3, #0]
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	3304      	adds	r3, #4
 800a142:	4619      	mov	r1, r3
 800a144:	4610      	mov	r0, r2
 800a146:	f7fe fa08 	bl	800855a <vListInsert>
 800a14a:	e012      	b.n	800a172 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a14c:	687a      	ldr	r2, [r7, #4]
 800a14e:	683b      	ldr	r3, [r7, #0]
 800a150:	429a      	cmp	r2, r3
 800a152:	d206      	bcs.n	800a162 <prvInsertTimerInActiveList+0x62>
 800a154:	68ba      	ldr	r2, [r7, #8]
 800a156:	683b      	ldr	r3, [r7, #0]
 800a158:	429a      	cmp	r2, r3
 800a15a:	d302      	bcc.n	800a162 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a15c:	2301      	movs	r3, #1
 800a15e:	617b      	str	r3, [r7, #20]
 800a160:	e007      	b.n	800a172 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a162:	4b07      	ldr	r3, [pc, #28]	; (800a180 <prvInsertTimerInActiveList+0x80>)
 800a164:	681a      	ldr	r2, [r3, #0]
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	3304      	adds	r3, #4
 800a16a:	4619      	mov	r1, r3
 800a16c:	4610      	mov	r0, r2
 800a16e:	f7fe f9f4 	bl	800855a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a172:	697b      	ldr	r3, [r7, #20]
}
 800a174:	4618      	mov	r0, r3
 800a176:	3718      	adds	r7, #24
 800a178:	46bd      	mov	sp, r7
 800a17a:	bd80      	pop	{r7, pc}
 800a17c:	20000f30 	.word	0x20000f30
 800a180:	20000f2c 	.word	0x20000f2c

0800a184 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a184:	b580      	push	{r7, lr}
 800a186:	b08e      	sub	sp, #56	; 0x38
 800a188:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a18a:	e0ca      	b.n	800a322 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	da18      	bge.n	800a1c4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a192:	1d3b      	adds	r3, r7, #4
 800a194:	3304      	adds	r3, #4
 800a196:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d10a      	bne.n	800a1b4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800a19e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1a2:	f383 8811 	msr	BASEPRI, r3
 800a1a6:	f3bf 8f6f 	isb	sy
 800a1aa:	f3bf 8f4f 	dsb	sy
 800a1ae:	61fb      	str	r3, [r7, #28]
}
 800a1b0:	bf00      	nop
 800a1b2:	e7fe      	b.n	800a1b2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a1b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a1ba:	6850      	ldr	r0, [r2, #4]
 800a1bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a1be:	6892      	ldr	r2, [r2, #8]
 800a1c0:	4611      	mov	r1, r2
 800a1c2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	f2c0 80ab 	blt.w	800a322 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a1d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1d2:	695b      	ldr	r3, [r3, #20]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d004      	beq.n	800a1e2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a1d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1da:	3304      	adds	r3, #4
 800a1dc:	4618      	mov	r0, r3
 800a1de:	f7fe f9f5 	bl	80085cc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a1e2:	463b      	mov	r3, r7
 800a1e4:	4618      	mov	r0, r3
 800a1e6:	f7ff ff6b 	bl	800a0c0 <prvSampleTimeNow>
 800a1ea:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	2b09      	cmp	r3, #9
 800a1f0:	f200 8096 	bhi.w	800a320 <prvProcessReceivedCommands+0x19c>
 800a1f4:	a201      	add	r2, pc, #4	; (adr r2, 800a1fc <prvProcessReceivedCommands+0x78>)
 800a1f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1fa:	bf00      	nop
 800a1fc:	0800a225 	.word	0x0800a225
 800a200:	0800a225 	.word	0x0800a225
 800a204:	0800a225 	.word	0x0800a225
 800a208:	0800a299 	.word	0x0800a299
 800a20c:	0800a2ad 	.word	0x0800a2ad
 800a210:	0800a2f7 	.word	0x0800a2f7
 800a214:	0800a225 	.word	0x0800a225
 800a218:	0800a225 	.word	0x0800a225
 800a21c:	0800a299 	.word	0x0800a299
 800a220:	0800a2ad 	.word	0x0800a2ad
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a226:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a22a:	f043 0301 	orr.w	r3, r3, #1
 800a22e:	b2da      	uxtb	r2, r3
 800a230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a232:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a236:	68ba      	ldr	r2, [r7, #8]
 800a238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a23a:	699b      	ldr	r3, [r3, #24]
 800a23c:	18d1      	adds	r1, r2, r3
 800a23e:	68bb      	ldr	r3, [r7, #8]
 800a240:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a242:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a244:	f7ff ff5c 	bl	800a100 <prvInsertTimerInActiveList>
 800a248:	4603      	mov	r3, r0
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d069      	beq.n	800a322 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a24e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a250:	6a1b      	ldr	r3, [r3, #32]
 800a252:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a254:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a258:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a25c:	f003 0304 	and.w	r3, r3, #4
 800a260:	2b00      	cmp	r3, #0
 800a262:	d05e      	beq.n	800a322 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a264:	68ba      	ldr	r2, [r7, #8]
 800a266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a268:	699b      	ldr	r3, [r3, #24]
 800a26a:	441a      	add	r2, r3
 800a26c:	2300      	movs	r3, #0
 800a26e:	9300      	str	r3, [sp, #0]
 800a270:	2300      	movs	r3, #0
 800a272:	2100      	movs	r1, #0
 800a274:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a276:	f7ff fe05 	bl	8009e84 <xTimerGenericCommand>
 800a27a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a27c:	6a3b      	ldr	r3, [r7, #32]
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d14f      	bne.n	800a322 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800a282:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a286:	f383 8811 	msr	BASEPRI, r3
 800a28a:	f3bf 8f6f 	isb	sy
 800a28e:	f3bf 8f4f 	dsb	sy
 800a292:	61bb      	str	r3, [r7, #24]
}
 800a294:	bf00      	nop
 800a296:	e7fe      	b.n	800a296 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a29a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a29e:	f023 0301 	bic.w	r3, r3, #1
 800a2a2:	b2da      	uxtb	r2, r3
 800a2a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a2aa:	e03a      	b.n	800a322 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a2ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a2b2:	f043 0301 	orr.w	r3, r3, #1
 800a2b6:	b2da      	uxtb	r2, r3
 800a2b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a2be:	68ba      	ldr	r2, [r7, #8]
 800a2c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2c2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a2c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2c6:	699b      	ldr	r3, [r3, #24]
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d10a      	bne.n	800a2e2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800a2cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2d0:	f383 8811 	msr	BASEPRI, r3
 800a2d4:	f3bf 8f6f 	isb	sy
 800a2d8:	f3bf 8f4f 	dsb	sy
 800a2dc:	617b      	str	r3, [r7, #20]
}
 800a2de:	bf00      	nop
 800a2e0:	e7fe      	b.n	800a2e0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a2e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2e4:	699a      	ldr	r2, [r3, #24]
 800a2e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2e8:	18d1      	adds	r1, r2, r3
 800a2ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a2f0:	f7ff ff06 	bl	800a100 <prvInsertTimerInActiveList>
					break;
 800a2f4:	e015      	b.n	800a322 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a2f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a2fc:	f003 0302 	and.w	r3, r3, #2
 800a300:	2b00      	cmp	r3, #0
 800a302:	d103      	bne.n	800a30c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800a304:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a306:	f000 fbdb 	bl	800aac0 <vPortFree>
 800a30a:	e00a      	b.n	800a322 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a30c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a30e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a312:	f023 0301 	bic.w	r3, r3, #1
 800a316:	b2da      	uxtb	r2, r3
 800a318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a31a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a31e:	e000      	b.n	800a322 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800a320:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a322:	4b08      	ldr	r3, [pc, #32]	; (800a344 <prvProcessReceivedCommands+0x1c0>)
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	1d39      	adds	r1, r7, #4
 800a328:	2200      	movs	r2, #0
 800a32a:	4618      	mov	r0, r3
 800a32c:	f7fe fc16 	bl	8008b5c <xQueueReceive>
 800a330:	4603      	mov	r3, r0
 800a332:	2b00      	cmp	r3, #0
 800a334:	f47f af2a 	bne.w	800a18c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800a338:	bf00      	nop
 800a33a:	bf00      	nop
 800a33c:	3730      	adds	r7, #48	; 0x30
 800a33e:	46bd      	mov	sp, r7
 800a340:	bd80      	pop	{r7, pc}
 800a342:	bf00      	nop
 800a344:	20000f34 	.word	0x20000f34

0800a348 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a348:	b580      	push	{r7, lr}
 800a34a:	b088      	sub	sp, #32
 800a34c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a34e:	e048      	b.n	800a3e2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a350:	4b2d      	ldr	r3, [pc, #180]	; (800a408 <prvSwitchTimerLists+0xc0>)
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	68db      	ldr	r3, [r3, #12]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a35a:	4b2b      	ldr	r3, [pc, #172]	; (800a408 <prvSwitchTimerLists+0xc0>)
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	68db      	ldr	r3, [r3, #12]
 800a360:	68db      	ldr	r3, [r3, #12]
 800a362:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	3304      	adds	r3, #4
 800a368:	4618      	mov	r0, r3
 800a36a:	f7fe f92f 	bl	80085cc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	6a1b      	ldr	r3, [r3, #32]
 800a372:	68f8      	ldr	r0, [r7, #12]
 800a374:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a37c:	f003 0304 	and.w	r3, r3, #4
 800a380:	2b00      	cmp	r3, #0
 800a382:	d02e      	beq.n	800a3e2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	699b      	ldr	r3, [r3, #24]
 800a388:	693a      	ldr	r2, [r7, #16]
 800a38a:	4413      	add	r3, r2
 800a38c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a38e:	68ba      	ldr	r2, [r7, #8]
 800a390:	693b      	ldr	r3, [r7, #16]
 800a392:	429a      	cmp	r2, r3
 800a394:	d90e      	bls.n	800a3b4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	68ba      	ldr	r2, [r7, #8]
 800a39a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	68fa      	ldr	r2, [r7, #12]
 800a3a0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a3a2:	4b19      	ldr	r3, [pc, #100]	; (800a408 <prvSwitchTimerLists+0xc0>)
 800a3a4:	681a      	ldr	r2, [r3, #0]
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	3304      	adds	r3, #4
 800a3aa:	4619      	mov	r1, r3
 800a3ac:	4610      	mov	r0, r2
 800a3ae:	f7fe f8d4 	bl	800855a <vListInsert>
 800a3b2:	e016      	b.n	800a3e2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a3b4:	2300      	movs	r3, #0
 800a3b6:	9300      	str	r3, [sp, #0]
 800a3b8:	2300      	movs	r3, #0
 800a3ba:	693a      	ldr	r2, [r7, #16]
 800a3bc:	2100      	movs	r1, #0
 800a3be:	68f8      	ldr	r0, [r7, #12]
 800a3c0:	f7ff fd60 	bl	8009e84 <xTimerGenericCommand>
 800a3c4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d10a      	bne.n	800a3e2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800a3cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3d0:	f383 8811 	msr	BASEPRI, r3
 800a3d4:	f3bf 8f6f 	isb	sy
 800a3d8:	f3bf 8f4f 	dsb	sy
 800a3dc:	603b      	str	r3, [r7, #0]
}
 800a3de:	bf00      	nop
 800a3e0:	e7fe      	b.n	800a3e0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a3e2:	4b09      	ldr	r3, [pc, #36]	; (800a408 <prvSwitchTimerLists+0xc0>)
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d1b1      	bne.n	800a350 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a3ec:	4b06      	ldr	r3, [pc, #24]	; (800a408 <prvSwitchTimerLists+0xc0>)
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a3f2:	4b06      	ldr	r3, [pc, #24]	; (800a40c <prvSwitchTimerLists+0xc4>)
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	4a04      	ldr	r2, [pc, #16]	; (800a408 <prvSwitchTimerLists+0xc0>)
 800a3f8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a3fa:	4a04      	ldr	r2, [pc, #16]	; (800a40c <prvSwitchTimerLists+0xc4>)
 800a3fc:	697b      	ldr	r3, [r7, #20]
 800a3fe:	6013      	str	r3, [r2, #0]
}
 800a400:	bf00      	nop
 800a402:	3718      	adds	r7, #24
 800a404:	46bd      	mov	sp, r7
 800a406:	bd80      	pop	{r7, pc}
 800a408:	20000f2c 	.word	0x20000f2c
 800a40c:	20000f30 	.word	0x20000f30

0800a410 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a410:	b580      	push	{r7, lr}
 800a412:	b082      	sub	sp, #8
 800a414:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a416:	f000 f965 	bl	800a6e4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a41a:	4b15      	ldr	r3, [pc, #84]	; (800a470 <prvCheckForValidListAndQueue+0x60>)
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d120      	bne.n	800a464 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a422:	4814      	ldr	r0, [pc, #80]	; (800a474 <prvCheckForValidListAndQueue+0x64>)
 800a424:	f7fe f848 	bl	80084b8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a428:	4813      	ldr	r0, [pc, #76]	; (800a478 <prvCheckForValidListAndQueue+0x68>)
 800a42a:	f7fe f845 	bl	80084b8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a42e:	4b13      	ldr	r3, [pc, #76]	; (800a47c <prvCheckForValidListAndQueue+0x6c>)
 800a430:	4a10      	ldr	r2, [pc, #64]	; (800a474 <prvCheckForValidListAndQueue+0x64>)
 800a432:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a434:	4b12      	ldr	r3, [pc, #72]	; (800a480 <prvCheckForValidListAndQueue+0x70>)
 800a436:	4a10      	ldr	r2, [pc, #64]	; (800a478 <prvCheckForValidListAndQueue+0x68>)
 800a438:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a43a:	2300      	movs	r3, #0
 800a43c:	9300      	str	r3, [sp, #0]
 800a43e:	4b11      	ldr	r3, [pc, #68]	; (800a484 <prvCheckForValidListAndQueue+0x74>)
 800a440:	4a11      	ldr	r2, [pc, #68]	; (800a488 <prvCheckForValidListAndQueue+0x78>)
 800a442:	2110      	movs	r1, #16
 800a444:	200a      	movs	r0, #10
 800a446:	f7fe f953 	bl	80086f0 <xQueueGenericCreateStatic>
 800a44a:	4603      	mov	r3, r0
 800a44c:	4a08      	ldr	r2, [pc, #32]	; (800a470 <prvCheckForValidListAndQueue+0x60>)
 800a44e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a450:	4b07      	ldr	r3, [pc, #28]	; (800a470 <prvCheckForValidListAndQueue+0x60>)
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	2b00      	cmp	r3, #0
 800a456:	d005      	beq.n	800a464 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a458:	4b05      	ldr	r3, [pc, #20]	; (800a470 <prvCheckForValidListAndQueue+0x60>)
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	490b      	ldr	r1, [pc, #44]	; (800a48c <prvCheckForValidListAndQueue+0x7c>)
 800a45e:	4618      	mov	r0, r3
 800a460:	f7fe fd6c 	bl	8008f3c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a464:	f000 f96e 	bl	800a744 <vPortExitCritical>
}
 800a468:	bf00      	nop
 800a46a:	46bd      	mov	sp, r7
 800a46c:	bd80      	pop	{r7, pc}
 800a46e:	bf00      	nop
 800a470:	20000f34 	.word	0x20000f34
 800a474:	20000f04 	.word	0x20000f04
 800a478:	20000f18 	.word	0x20000f18
 800a47c:	20000f2c 	.word	0x20000f2c
 800a480:	20000f30 	.word	0x20000f30
 800a484:	20000fe0 	.word	0x20000fe0
 800a488:	20000f40 	.word	0x20000f40
 800a48c:	0800b8c8 	.word	0x0800b8c8

0800a490 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a490:	b480      	push	{r7}
 800a492:	b085      	sub	sp, #20
 800a494:	af00      	add	r7, sp, #0
 800a496:	60f8      	str	r0, [r7, #12]
 800a498:	60b9      	str	r1, [r7, #8]
 800a49a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	3b04      	subs	r3, #4
 800a4a0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a4a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	3b04      	subs	r3, #4
 800a4ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a4b0:	68bb      	ldr	r3, [r7, #8]
 800a4b2:	f023 0201 	bic.w	r2, r3, #1
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	3b04      	subs	r3, #4
 800a4be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a4c0:	4a0c      	ldr	r2, [pc, #48]	; (800a4f4 <pxPortInitialiseStack+0x64>)
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	3b14      	subs	r3, #20
 800a4ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a4cc:	687a      	ldr	r2, [r7, #4]
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	3b04      	subs	r3, #4
 800a4d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	f06f 0202 	mvn.w	r2, #2
 800a4de:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	3b20      	subs	r3, #32
 800a4e4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a4e6:	68fb      	ldr	r3, [r7, #12]
}
 800a4e8:	4618      	mov	r0, r3
 800a4ea:	3714      	adds	r7, #20
 800a4ec:	46bd      	mov	sp, r7
 800a4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f2:	4770      	bx	lr
 800a4f4:	0800a4f9 	.word	0x0800a4f9

0800a4f8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a4f8:	b480      	push	{r7}
 800a4fa:	b085      	sub	sp, #20
 800a4fc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a4fe:	2300      	movs	r3, #0
 800a500:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a502:	4b12      	ldr	r3, [pc, #72]	; (800a54c <prvTaskExitError+0x54>)
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a50a:	d00a      	beq.n	800a522 <prvTaskExitError+0x2a>
	__asm volatile
 800a50c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a510:	f383 8811 	msr	BASEPRI, r3
 800a514:	f3bf 8f6f 	isb	sy
 800a518:	f3bf 8f4f 	dsb	sy
 800a51c:	60fb      	str	r3, [r7, #12]
}
 800a51e:	bf00      	nop
 800a520:	e7fe      	b.n	800a520 <prvTaskExitError+0x28>
	__asm volatile
 800a522:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a526:	f383 8811 	msr	BASEPRI, r3
 800a52a:	f3bf 8f6f 	isb	sy
 800a52e:	f3bf 8f4f 	dsb	sy
 800a532:	60bb      	str	r3, [r7, #8]
}
 800a534:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a536:	bf00      	nop
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d0fc      	beq.n	800a538 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a53e:	bf00      	nop
 800a540:	bf00      	nop
 800a542:	3714      	adds	r7, #20
 800a544:	46bd      	mov	sp, r7
 800a546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a54a:	4770      	bx	lr
 800a54c:	200000c0 	.word	0x200000c0

0800a550 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a550:	4b07      	ldr	r3, [pc, #28]	; (800a570 <pxCurrentTCBConst2>)
 800a552:	6819      	ldr	r1, [r3, #0]
 800a554:	6808      	ldr	r0, [r1, #0]
 800a556:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a55a:	f380 8809 	msr	PSP, r0
 800a55e:	f3bf 8f6f 	isb	sy
 800a562:	f04f 0000 	mov.w	r0, #0
 800a566:	f380 8811 	msr	BASEPRI, r0
 800a56a:	4770      	bx	lr
 800a56c:	f3af 8000 	nop.w

0800a570 <pxCurrentTCBConst2>:
 800a570:	20000a04 	.word	0x20000a04
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a574:	bf00      	nop
 800a576:	bf00      	nop

0800a578 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a578:	4808      	ldr	r0, [pc, #32]	; (800a59c <prvPortStartFirstTask+0x24>)
 800a57a:	6800      	ldr	r0, [r0, #0]
 800a57c:	6800      	ldr	r0, [r0, #0]
 800a57e:	f380 8808 	msr	MSP, r0
 800a582:	f04f 0000 	mov.w	r0, #0
 800a586:	f380 8814 	msr	CONTROL, r0
 800a58a:	b662      	cpsie	i
 800a58c:	b661      	cpsie	f
 800a58e:	f3bf 8f4f 	dsb	sy
 800a592:	f3bf 8f6f 	isb	sy
 800a596:	df00      	svc	0
 800a598:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a59a:	bf00      	nop
 800a59c:	e000ed08 	.word	0xe000ed08

0800a5a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a5a0:	b580      	push	{r7, lr}
 800a5a2:	b086      	sub	sp, #24
 800a5a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a5a6:	4b46      	ldr	r3, [pc, #280]	; (800a6c0 <xPortStartScheduler+0x120>)
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	4a46      	ldr	r2, [pc, #280]	; (800a6c4 <xPortStartScheduler+0x124>)
 800a5ac:	4293      	cmp	r3, r2
 800a5ae:	d10a      	bne.n	800a5c6 <xPortStartScheduler+0x26>
	__asm volatile
 800a5b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5b4:	f383 8811 	msr	BASEPRI, r3
 800a5b8:	f3bf 8f6f 	isb	sy
 800a5bc:	f3bf 8f4f 	dsb	sy
 800a5c0:	613b      	str	r3, [r7, #16]
}
 800a5c2:	bf00      	nop
 800a5c4:	e7fe      	b.n	800a5c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a5c6:	4b3e      	ldr	r3, [pc, #248]	; (800a6c0 <xPortStartScheduler+0x120>)
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	4a3f      	ldr	r2, [pc, #252]	; (800a6c8 <xPortStartScheduler+0x128>)
 800a5cc:	4293      	cmp	r3, r2
 800a5ce:	d10a      	bne.n	800a5e6 <xPortStartScheduler+0x46>
	__asm volatile
 800a5d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5d4:	f383 8811 	msr	BASEPRI, r3
 800a5d8:	f3bf 8f6f 	isb	sy
 800a5dc:	f3bf 8f4f 	dsb	sy
 800a5e0:	60fb      	str	r3, [r7, #12]
}
 800a5e2:	bf00      	nop
 800a5e4:	e7fe      	b.n	800a5e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a5e6:	4b39      	ldr	r3, [pc, #228]	; (800a6cc <xPortStartScheduler+0x12c>)
 800a5e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a5ea:	697b      	ldr	r3, [r7, #20]
 800a5ec:	781b      	ldrb	r3, [r3, #0]
 800a5ee:	b2db      	uxtb	r3, r3
 800a5f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a5f2:	697b      	ldr	r3, [r7, #20]
 800a5f4:	22ff      	movs	r2, #255	; 0xff
 800a5f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a5f8:	697b      	ldr	r3, [r7, #20]
 800a5fa:	781b      	ldrb	r3, [r3, #0]
 800a5fc:	b2db      	uxtb	r3, r3
 800a5fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a600:	78fb      	ldrb	r3, [r7, #3]
 800a602:	b2db      	uxtb	r3, r3
 800a604:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a608:	b2da      	uxtb	r2, r3
 800a60a:	4b31      	ldr	r3, [pc, #196]	; (800a6d0 <xPortStartScheduler+0x130>)
 800a60c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a60e:	4b31      	ldr	r3, [pc, #196]	; (800a6d4 <xPortStartScheduler+0x134>)
 800a610:	2207      	movs	r2, #7
 800a612:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a614:	e009      	b.n	800a62a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a616:	4b2f      	ldr	r3, [pc, #188]	; (800a6d4 <xPortStartScheduler+0x134>)
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	3b01      	subs	r3, #1
 800a61c:	4a2d      	ldr	r2, [pc, #180]	; (800a6d4 <xPortStartScheduler+0x134>)
 800a61e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a620:	78fb      	ldrb	r3, [r7, #3]
 800a622:	b2db      	uxtb	r3, r3
 800a624:	005b      	lsls	r3, r3, #1
 800a626:	b2db      	uxtb	r3, r3
 800a628:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a62a:	78fb      	ldrb	r3, [r7, #3]
 800a62c:	b2db      	uxtb	r3, r3
 800a62e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a632:	2b80      	cmp	r3, #128	; 0x80
 800a634:	d0ef      	beq.n	800a616 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a636:	4b27      	ldr	r3, [pc, #156]	; (800a6d4 <xPortStartScheduler+0x134>)
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	f1c3 0307 	rsb	r3, r3, #7
 800a63e:	2b04      	cmp	r3, #4
 800a640:	d00a      	beq.n	800a658 <xPortStartScheduler+0xb8>
	__asm volatile
 800a642:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a646:	f383 8811 	msr	BASEPRI, r3
 800a64a:	f3bf 8f6f 	isb	sy
 800a64e:	f3bf 8f4f 	dsb	sy
 800a652:	60bb      	str	r3, [r7, #8]
}
 800a654:	bf00      	nop
 800a656:	e7fe      	b.n	800a656 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a658:	4b1e      	ldr	r3, [pc, #120]	; (800a6d4 <xPortStartScheduler+0x134>)
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	021b      	lsls	r3, r3, #8
 800a65e:	4a1d      	ldr	r2, [pc, #116]	; (800a6d4 <xPortStartScheduler+0x134>)
 800a660:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a662:	4b1c      	ldr	r3, [pc, #112]	; (800a6d4 <xPortStartScheduler+0x134>)
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a66a:	4a1a      	ldr	r2, [pc, #104]	; (800a6d4 <xPortStartScheduler+0x134>)
 800a66c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	b2da      	uxtb	r2, r3
 800a672:	697b      	ldr	r3, [r7, #20]
 800a674:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a676:	4b18      	ldr	r3, [pc, #96]	; (800a6d8 <xPortStartScheduler+0x138>)
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	4a17      	ldr	r2, [pc, #92]	; (800a6d8 <xPortStartScheduler+0x138>)
 800a67c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a680:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a682:	4b15      	ldr	r3, [pc, #84]	; (800a6d8 <xPortStartScheduler+0x138>)
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	4a14      	ldr	r2, [pc, #80]	; (800a6d8 <xPortStartScheduler+0x138>)
 800a688:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a68c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a68e:	f000 f8dd 	bl	800a84c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a692:	4b12      	ldr	r3, [pc, #72]	; (800a6dc <xPortStartScheduler+0x13c>)
 800a694:	2200      	movs	r2, #0
 800a696:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a698:	f000 f8fc 	bl	800a894 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a69c:	4b10      	ldr	r3, [pc, #64]	; (800a6e0 <xPortStartScheduler+0x140>)
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	4a0f      	ldr	r2, [pc, #60]	; (800a6e0 <xPortStartScheduler+0x140>)
 800a6a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a6a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a6a8:	f7ff ff66 	bl	800a578 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a6ac:	f7ff f856 	bl	800975c <vTaskSwitchContext>
	prvTaskExitError();
 800a6b0:	f7ff ff22 	bl	800a4f8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a6b4:	2300      	movs	r3, #0
}
 800a6b6:	4618      	mov	r0, r3
 800a6b8:	3718      	adds	r7, #24
 800a6ba:	46bd      	mov	sp, r7
 800a6bc:	bd80      	pop	{r7, pc}
 800a6be:	bf00      	nop
 800a6c0:	e000ed00 	.word	0xe000ed00
 800a6c4:	410fc271 	.word	0x410fc271
 800a6c8:	410fc270 	.word	0x410fc270
 800a6cc:	e000e400 	.word	0xe000e400
 800a6d0:	20001030 	.word	0x20001030
 800a6d4:	20001034 	.word	0x20001034
 800a6d8:	e000ed20 	.word	0xe000ed20
 800a6dc:	200000c0 	.word	0x200000c0
 800a6e0:	e000ef34 	.word	0xe000ef34

0800a6e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a6e4:	b480      	push	{r7}
 800a6e6:	b083      	sub	sp, #12
 800a6e8:	af00      	add	r7, sp, #0
	__asm volatile
 800a6ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6ee:	f383 8811 	msr	BASEPRI, r3
 800a6f2:	f3bf 8f6f 	isb	sy
 800a6f6:	f3bf 8f4f 	dsb	sy
 800a6fa:	607b      	str	r3, [r7, #4]
}
 800a6fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a6fe:	4b0f      	ldr	r3, [pc, #60]	; (800a73c <vPortEnterCritical+0x58>)
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	3301      	adds	r3, #1
 800a704:	4a0d      	ldr	r2, [pc, #52]	; (800a73c <vPortEnterCritical+0x58>)
 800a706:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a708:	4b0c      	ldr	r3, [pc, #48]	; (800a73c <vPortEnterCritical+0x58>)
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	2b01      	cmp	r3, #1
 800a70e:	d10f      	bne.n	800a730 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a710:	4b0b      	ldr	r3, [pc, #44]	; (800a740 <vPortEnterCritical+0x5c>)
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	b2db      	uxtb	r3, r3
 800a716:	2b00      	cmp	r3, #0
 800a718:	d00a      	beq.n	800a730 <vPortEnterCritical+0x4c>
	__asm volatile
 800a71a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a71e:	f383 8811 	msr	BASEPRI, r3
 800a722:	f3bf 8f6f 	isb	sy
 800a726:	f3bf 8f4f 	dsb	sy
 800a72a:	603b      	str	r3, [r7, #0]
}
 800a72c:	bf00      	nop
 800a72e:	e7fe      	b.n	800a72e <vPortEnterCritical+0x4a>
	}
}
 800a730:	bf00      	nop
 800a732:	370c      	adds	r7, #12
 800a734:	46bd      	mov	sp, r7
 800a736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a73a:	4770      	bx	lr
 800a73c:	200000c0 	.word	0x200000c0
 800a740:	e000ed04 	.word	0xe000ed04

0800a744 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a744:	b480      	push	{r7}
 800a746:	b083      	sub	sp, #12
 800a748:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a74a:	4b12      	ldr	r3, [pc, #72]	; (800a794 <vPortExitCritical+0x50>)
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d10a      	bne.n	800a768 <vPortExitCritical+0x24>
	__asm volatile
 800a752:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a756:	f383 8811 	msr	BASEPRI, r3
 800a75a:	f3bf 8f6f 	isb	sy
 800a75e:	f3bf 8f4f 	dsb	sy
 800a762:	607b      	str	r3, [r7, #4]
}
 800a764:	bf00      	nop
 800a766:	e7fe      	b.n	800a766 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a768:	4b0a      	ldr	r3, [pc, #40]	; (800a794 <vPortExitCritical+0x50>)
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	3b01      	subs	r3, #1
 800a76e:	4a09      	ldr	r2, [pc, #36]	; (800a794 <vPortExitCritical+0x50>)
 800a770:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a772:	4b08      	ldr	r3, [pc, #32]	; (800a794 <vPortExitCritical+0x50>)
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	2b00      	cmp	r3, #0
 800a778:	d105      	bne.n	800a786 <vPortExitCritical+0x42>
 800a77a:	2300      	movs	r3, #0
 800a77c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a77e:	683b      	ldr	r3, [r7, #0]
 800a780:	f383 8811 	msr	BASEPRI, r3
}
 800a784:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a786:	bf00      	nop
 800a788:	370c      	adds	r7, #12
 800a78a:	46bd      	mov	sp, r7
 800a78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a790:	4770      	bx	lr
 800a792:	bf00      	nop
 800a794:	200000c0 	.word	0x200000c0
	...

0800a7a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a7a0:	f3ef 8009 	mrs	r0, PSP
 800a7a4:	f3bf 8f6f 	isb	sy
 800a7a8:	4b15      	ldr	r3, [pc, #84]	; (800a800 <pxCurrentTCBConst>)
 800a7aa:	681a      	ldr	r2, [r3, #0]
 800a7ac:	f01e 0f10 	tst.w	lr, #16
 800a7b0:	bf08      	it	eq
 800a7b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a7b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7ba:	6010      	str	r0, [r2, #0]
 800a7bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a7c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a7c4:	f380 8811 	msr	BASEPRI, r0
 800a7c8:	f3bf 8f4f 	dsb	sy
 800a7cc:	f3bf 8f6f 	isb	sy
 800a7d0:	f7fe ffc4 	bl	800975c <vTaskSwitchContext>
 800a7d4:	f04f 0000 	mov.w	r0, #0
 800a7d8:	f380 8811 	msr	BASEPRI, r0
 800a7dc:	bc09      	pop	{r0, r3}
 800a7de:	6819      	ldr	r1, [r3, #0]
 800a7e0:	6808      	ldr	r0, [r1, #0]
 800a7e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7e6:	f01e 0f10 	tst.w	lr, #16
 800a7ea:	bf08      	it	eq
 800a7ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a7f0:	f380 8809 	msr	PSP, r0
 800a7f4:	f3bf 8f6f 	isb	sy
 800a7f8:	4770      	bx	lr
 800a7fa:	bf00      	nop
 800a7fc:	f3af 8000 	nop.w

0800a800 <pxCurrentTCBConst>:
 800a800:	20000a04 	.word	0x20000a04
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a804:	bf00      	nop
 800a806:	bf00      	nop

0800a808 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a808:	b580      	push	{r7, lr}
 800a80a:	b082      	sub	sp, #8
 800a80c:	af00      	add	r7, sp, #0
	__asm volatile
 800a80e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a812:	f383 8811 	msr	BASEPRI, r3
 800a816:	f3bf 8f6f 	isb	sy
 800a81a:	f3bf 8f4f 	dsb	sy
 800a81e:	607b      	str	r3, [r7, #4]
}
 800a820:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a822:	f7fe fee1 	bl	80095e8 <xTaskIncrementTick>
 800a826:	4603      	mov	r3, r0
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d003      	beq.n	800a834 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a82c:	4b06      	ldr	r3, [pc, #24]	; (800a848 <xPortSysTickHandler+0x40>)
 800a82e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a832:	601a      	str	r2, [r3, #0]
 800a834:	2300      	movs	r3, #0
 800a836:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a838:	683b      	ldr	r3, [r7, #0]
 800a83a:	f383 8811 	msr	BASEPRI, r3
}
 800a83e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a840:	bf00      	nop
 800a842:	3708      	adds	r7, #8
 800a844:	46bd      	mov	sp, r7
 800a846:	bd80      	pop	{r7, pc}
 800a848:	e000ed04 	.word	0xe000ed04

0800a84c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a84c:	b480      	push	{r7}
 800a84e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a850:	4b0b      	ldr	r3, [pc, #44]	; (800a880 <vPortSetupTimerInterrupt+0x34>)
 800a852:	2200      	movs	r2, #0
 800a854:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a856:	4b0b      	ldr	r3, [pc, #44]	; (800a884 <vPortSetupTimerInterrupt+0x38>)
 800a858:	2200      	movs	r2, #0
 800a85a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a85c:	4b0a      	ldr	r3, [pc, #40]	; (800a888 <vPortSetupTimerInterrupt+0x3c>)
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	4a0a      	ldr	r2, [pc, #40]	; (800a88c <vPortSetupTimerInterrupt+0x40>)
 800a862:	fba2 2303 	umull	r2, r3, r2, r3
 800a866:	099b      	lsrs	r3, r3, #6
 800a868:	4a09      	ldr	r2, [pc, #36]	; (800a890 <vPortSetupTimerInterrupt+0x44>)
 800a86a:	3b01      	subs	r3, #1
 800a86c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a86e:	4b04      	ldr	r3, [pc, #16]	; (800a880 <vPortSetupTimerInterrupt+0x34>)
 800a870:	2207      	movs	r2, #7
 800a872:	601a      	str	r2, [r3, #0]
}
 800a874:	bf00      	nop
 800a876:	46bd      	mov	sp, r7
 800a878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a87c:	4770      	bx	lr
 800a87e:	bf00      	nop
 800a880:	e000e010 	.word	0xe000e010
 800a884:	e000e018 	.word	0xe000e018
 800a888:	20000000 	.word	0x20000000
 800a88c:	10624dd3 	.word	0x10624dd3
 800a890:	e000e014 	.word	0xe000e014

0800a894 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a894:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a8a4 <vPortEnableVFP+0x10>
 800a898:	6801      	ldr	r1, [r0, #0]
 800a89a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a89e:	6001      	str	r1, [r0, #0]
 800a8a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a8a2:	bf00      	nop
 800a8a4:	e000ed88 	.word	0xe000ed88

0800a8a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a8a8:	b480      	push	{r7}
 800a8aa:	b085      	sub	sp, #20
 800a8ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a8ae:	f3ef 8305 	mrs	r3, IPSR
 800a8b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	2b0f      	cmp	r3, #15
 800a8b8:	d914      	bls.n	800a8e4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a8ba:	4a17      	ldr	r2, [pc, #92]	; (800a918 <vPortValidateInterruptPriority+0x70>)
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	4413      	add	r3, r2
 800a8c0:	781b      	ldrb	r3, [r3, #0]
 800a8c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a8c4:	4b15      	ldr	r3, [pc, #84]	; (800a91c <vPortValidateInterruptPriority+0x74>)
 800a8c6:	781b      	ldrb	r3, [r3, #0]
 800a8c8:	7afa      	ldrb	r2, [r7, #11]
 800a8ca:	429a      	cmp	r2, r3
 800a8cc:	d20a      	bcs.n	800a8e4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a8ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8d2:	f383 8811 	msr	BASEPRI, r3
 800a8d6:	f3bf 8f6f 	isb	sy
 800a8da:	f3bf 8f4f 	dsb	sy
 800a8de:	607b      	str	r3, [r7, #4]
}
 800a8e0:	bf00      	nop
 800a8e2:	e7fe      	b.n	800a8e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a8e4:	4b0e      	ldr	r3, [pc, #56]	; (800a920 <vPortValidateInterruptPriority+0x78>)
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a8ec:	4b0d      	ldr	r3, [pc, #52]	; (800a924 <vPortValidateInterruptPriority+0x7c>)
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	429a      	cmp	r2, r3
 800a8f2:	d90a      	bls.n	800a90a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a8f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8f8:	f383 8811 	msr	BASEPRI, r3
 800a8fc:	f3bf 8f6f 	isb	sy
 800a900:	f3bf 8f4f 	dsb	sy
 800a904:	603b      	str	r3, [r7, #0]
}
 800a906:	bf00      	nop
 800a908:	e7fe      	b.n	800a908 <vPortValidateInterruptPriority+0x60>
	}
 800a90a:	bf00      	nop
 800a90c:	3714      	adds	r7, #20
 800a90e:	46bd      	mov	sp, r7
 800a910:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a914:	4770      	bx	lr
 800a916:	bf00      	nop
 800a918:	e000e3f0 	.word	0xe000e3f0
 800a91c:	20001030 	.word	0x20001030
 800a920:	e000ed0c 	.word	0xe000ed0c
 800a924:	20001034 	.word	0x20001034

0800a928 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a928:	b580      	push	{r7, lr}
 800a92a:	b08a      	sub	sp, #40	; 0x28
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a930:	2300      	movs	r3, #0
 800a932:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a934:	f7fe fd9c 	bl	8009470 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a938:	4b5b      	ldr	r3, [pc, #364]	; (800aaa8 <pvPortMalloc+0x180>)
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d101      	bne.n	800a944 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a940:	f000 f920 	bl	800ab84 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a944:	4b59      	ldr	r3, [pc, #356]	; (800aaac <pvPortMalloc+0x184>)
 800a946:	681a      	ldr	r2, [r3, #0]
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	4013      	ands	r3, r2
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	f040 8093 	bne.w	800aa78 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	2b00      	cmp	r3, #0
 800a956:	d01d      	beq.n	800a994 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a958:	2208      	movs	r2, #8
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	4413      	add	r3, r2
 800a95e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	f003 0307 	and.w	r3, r3, #7
 800a966:	2b00      	cmp	r3, #0
 800a968:	d014      	beq.n	800a994 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	f023 0307 	bic.w	r3, r3, #7
 800a970:	3308      	adds	r3, #8
 800a972:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	f003 0307 	and.w	r3, r3, #7
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d00a      	beq.n	800a994 <pvPortMalloc+0x6c>
	__asm volatile
 800a97e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a982:	f383 8811 	msr	BASEPRI, r3
 800a986:	f3bf 8f6f 	isb	sy
 800a98a:	f3bf 8f4f 	dsb	sy
 800a98e:	617b      	str	r3, [r7, #20]
}
 800a990:	bf00      	nop
 800a992:	e7fe      	b.n	800a992 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	2b00      	cmp	r3, #0
 800a998:	d06e      	beq.n	800aa78 <pvPortMalloc+0x150>
 800a99a:	4b45      	ldr	r3, [pc, #276]	; (800aab0 <pvPortMalloc+0x188>)
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	687a      	ldr	r2, [r7, #4]
 800a9a0:	429a      	cmp	r2, r3
 800a9a2:	d869      	bhi.n	800aa78 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a9a4:	4b43      	ldr	r3, [pc, #268]	; (800aab4 <pvPortMalloc+0x18c>)
 800a9a6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a9a8:	4b42      	ldr	r3, [pc, #264]	; (800aab4 <pvPortMalloc+0x18c>)
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a9ae:	e004      	b.n	800a9ba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a9b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9b2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a9b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a9ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9bc:	685b      	ldr	r3, [r3, #4]
 800a9be:	687a      	ldr	r2, [r7, #4]
 800a9c0:	429a      	cmp	r2, r3
 800a9c2:	d903      	bls.n	800a9cc <pvPortMalloc+0xa4>
 800a9c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d1f1      	bne.n	800a9b0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a9cc:	4b36      	ldr	r3, [pc, #216]	; (800aaa8 <pvPortMalloc+0x180>)
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a9d2:	429a      	cmp	r2, r3
 800a9d4:	d050      	beq.n	800aa78 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a9d6:	6a3b      	ldr	r3, [r7, #32]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	2208      	movs	r2, #8
 800a9dc:	4413      	add	r3, r2
 800a9de:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a9e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9e2:	681a      	ldr	r2, [r3, #0]
 800a9e4:	6a3b      	ldr	r3, [r7, #32]
 800a9e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a9e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9ea:	685a      	ldr	r2, [r3, #4]
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	1ad2      	subs	r2, r2, r3
 800a9f0:	2308      	movs	r3, #8
 800a9f2:	005b      	lsls	r3, r3, #1
 800a9f4:	429a      	cmp	r2, r3
 800a9f6:	d91f      	bls.n	800aa38 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a9f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	4413      	add	r3, r2
 800a9fe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800aa00:	69bb      	ldr	r3, [r7, #24]
 800aa02:	f003 0307 	and.w	r3, r3, #7
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d00a      	beq.n	800aa20 <pvPortMalloc+0xf8>
	__asm volatile
 800aa0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa0e:	f383 8811 	msr	BASEPRI, r3
 800aa12:	f3bf 8f6f 	isb	sy
 800aa16:	f3bf 8f4f 	dsb	sy
 800aa1a:	613b      	str	r3, [r7, #16]
}
 800aa1c:	bf00      	nop
 800aa1e:	e7fe      	b.n	800aa1e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800aa20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa22:	685a      	ldr	r2, [r3, #4]
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	1ad2      	subs	r2, r2, r3
 800aa28:	69bb      	ldr	r3, [r7, #24]
 800aa2a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800aa2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa2e:	687a      	ldr	r2, [r7, #4]
 800aa30:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800aa32:	69b8      	ldr	r0, [r7, #24]
 800aa34:	f000 f908 	bl	800ac48 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800aa38:	4b1d      	ldr	r3, [pc, #116]	; (800aab0 <pvPortMalloc+0x188>)
 800aa3a:	681a      	ldr	r2, [r3, #0]
 800aa3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa3e:	685b      	ldr	r3, [r3, #4]
 800aa40:	1ad3      	subs	r3, r2, r3
 800aa42:	4a1b      	ldr	r2, [pc, #108]	; (800aab0 <pvPortMalloc+0x188>)
 800aa44:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800aa46:	4b1a      	ldr	r3, [pc, #104]	; (800aab0 <pvPortMalloc+0x188>)
 800aa48:	681a      	ldr	r2, [r3, #0]
 800aa4a:	4b1b      	ldr	r3, [pc, #108]	; (800aab8 <pvPortMalloc+0x190>)
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	429a      	cmp	r2, r3
 800aa50:	d203      	bcs.n	800aa5a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800aa52:	4b17      	ldr	r3, [pc, #92]	; (800aab0 <pvPortMalloc+0x188>)
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	4a18      	ldr	r2, [pc, #96]	; (800aab8 <pvPortMalloc+0x190>)
 800aa58:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800aa5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa5c:	685a      	ldr	r2, [r3, #4]
 800aa5e:	4b13      	ldr	r3, [pc, #76]	; (800aaac <pvPortMalloc+0x184>)
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	431a      	orrs	r2, r3
 800aa64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa66:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800aa68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa6a:	2200      	movs	r2, #0
 800aa6c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800aa6e:	4b13      	ldr	r3, [pc, #76]	; (800aabc <pvPortMalloc+0x194>)
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	3301      	adds	r3, #1
 800aa74:	4a11      	ldr	r2, [pc, #68]	; (800aabc <pvPortMalloc+0x194>)
 800aa76:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800aa78:	f7fe fd08 	bl	800948c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800aa7c:	69fb      	ldr	r3, [r7, #28]
 800aa7e:	f003 0307 	and.w	r3, r3, #7
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d00a      	beq.n	800aa9c <pvPortMalloc+0x174>
	__asm volatile
 800aa86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa8a:	f383 8811 	msr	BASEPRI, r3
 800aa8e:	f3bf 8f6f 	isb	sy
 800aa92:	f3bf 8f4f 	dsb	sy
 800aa96:	60fb      	str	r3, [r7, #12]
}
 800aa98:	bf00      	nop
 800aa9a:	e7fe      	b.n	800aa9a <pvPortMalloc+0x172>
	return pvReturn;
 800aa9c:	69fb      	ldr	r3, [r7, #28]
}
 800aa9e:	4618      	mov	r0, r3
 800aaa0:	3728      	adds	r7, #40	; 0x28
 800aaa2:	46bd      	mov	sp, r7
 800aaa4:	bd80      	pop	{r7, pc}
 800aaa6:	bf00      	nop
 800aaa8:	20001bf8 	.word	0x20001bf8
 800aaac:	20001c0c 	.word	0x20001c0c
 800aab0:	20001bfc 	.word	0x20001bfc
 800aab4:	20001bf0 	.word	0x20001bf0
 800aab8:	20001c00 	.word	0x20001c00
 800aabc:	20001c04 	.word	0x20001c04

0800aac0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800aac0:	b580      	push	{r7, lr}
 800aac2:	b086      	sub	sp, #24
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d04d      	beq.n	800ab6e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800aad2:	2308      	movs	r3, #8
 800aad4:	425b      	negs	r3, r3
 800aad6:	697a      	ldr	r2, [r7, #20]
 800aad8:	4413      	add	r3, r2
 800aada:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800aadc:	697b      	ldr	r3, [r7, #20]
 800aade:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800aae0:	693b      	ldr	r3, [r7, #16]
 800aae2:	685a      	ldr	r2, [r3, #4]
 800aae4:	4b24      	ldr	r3, [pc, #144]	; (800ab78 <vPortFree+0xb8>)
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	4013      	ands	r3, r2
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d10a      	bne.n	800ab04 <vPortFree+0x44>
	__asm volatile
 800aaee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaf2:	f383 8811 	msr	BASEPRI, r3
 800aaf6:	f3bf 8f6f 	isb	sy
 800aafa:	f3bf 8f4f 	dsb	sy
 800aafe:	60fb      	str	r3, [r7, #12]
}
 800ab00:	bf00      	nop
 800ab02:	e7fe      	b.n	800ab02 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ab04:	693b      	ldr	r3, [r7, #16]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d00a      	beq.n	800ab22 <vPortFree+0x62>
	__asm volatile
 800ab0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab10:	f383 8811 	msr	BASEPRI, r3
 800ab14:	f3bf 8f6f 	isb	sy
 800ab18:	f3bf 8f4f 	dsb	sy
 800ab1c:	60bb      	str	r3, [r7, #8]
}
 800ab1e:	bf00      	nop
 800ab20:	e7fe      	b.n	800ab20 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ab22:	693b      	ldr	r3, [r7, #16]
 800ab24:	685a      	ldr	r2, [r3, #4]
 800ab26:	4b14      	ldr	r3, [pc, #80]	; (800ab78 <vPortFree+0xb8>)
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	4013      	ands	r3, r2
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d01e      	beq.n	800ab6e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ab30:	693b      	ldr	r3, [r7, #16]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d11a      	bne.n	800ab6e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ab38:	693b      	ldr	r3, [r7, #16]
 800ab3a:	685a      	ldr	r2, [r3, #4]
 800ab3c:	4b0e      	ldr	r3, [pc, #56]	; (800ab78 <vPortFree+0xb8>)
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	43db      	mvns	r3, r3
 800ab42:	401a      	ands	r2, r3
 800ab44:	693b      	ldr	r3, [r7, #16]
 800ab46:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ab48:	f7fe fc92 	bl	8009470 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ab4c:	693b      	ldr	r3, [r7, #16]
 800ab4e:	685a      	ldr	r2, [r3, #4]
 800ab50:	4b0a      	ldr	r3, [pc, #40]	; (800ab7c <vPortFree+0xbc>)
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	4413      	add	r3, r2
 800ab56:	4a09      	ldr	r2, [pc, #36]	; (800ab7c <vPortFree+0xbc>)
 800ab58:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ab5a:	6938      	ldr	r0, [r7, #16]
 800ab5c:	f000 f874 	bl	800ac48 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ab60:	4b07      	ldr	r3, [pc, #28]	; (800ab80 <vPortFree+0xc0>)
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	3301      	adds	r3, #1
 800ab66:	4a06      	ldr	r2, [pc, #24]	; (800ab80 <vPortFree+0xc0>)
 800ab68:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ab6a:	f7fe fc8f 	bl	800948c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ab6e:	bf00      	nop
 800ab70:	3718      	adds	r7, #24
 800ab72:	46bd      	mov	sp, r7
 800ab74:	bd80      	pop	{r7, pc}
 800ab76:	bf00      	nop
 800ab78:	20001c0c 	.word	0x20001c0c
 800ab7c:	20001bfc 	.word	0x20001bfc
 800ab80:	20001c08 	.word	0x20001c08

0800ab84 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ab84:	b480      	push	{r7}
 800ab86:	b085      	sub	sp, #20
 800ab88:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ab8a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800ab8e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ab90:	4b27      	ldr	r3, [pc, #156]	; (800ac30 <prvHeapInit+0xac>)
 800ab92:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	f003 0307 	and.w	r3, r3, #7
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d00c      	beq.n	800abb8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	3307      	adds	r3, #7
 800aba2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	f023 0307 	bic.w	r3, r3, #7
 800abaa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800abac:	68ba      	ldr	r2, [r7, #8]
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	1ad3      	subs	r3, r2, r3
 800abb2:	4a1f      	ldr	r2, [pc, #124]	; (800ac30 <prvHeapInit+0xac>)
 800abb4:	4413      	add	r3, r2
 800abb6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800abbc:	4a1d      	ldr	r2, [pc, #116]	; (800ac34 <prvHeapInit+0xb0>)
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800abc2:	4b1c      	ldr	r3, [pc, #112]	; (800ac34 <prvHeapInit+0xb0>)
 800abc4:	2200      	movs	r2, #0
 800abc6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	68ba      	ldr	r2, [r7, #8]
 800abcc:	4413      	add	r3, r2
 800abce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800abd0:	2208      	movs	r2, #8
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	1a9b      	subs	r3, r3, r2
 800abd6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	f023 0307 	bic.w	r3, r3, #7
 800abde:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	4a15      	ldr	r2, [pc, #84]	; (800ac38 <prvHeapInit+0xb4>)
 800abe4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800abe6:	4b14      	ldr	r3, [pc, #80]	; (800ac38 <prvHeapInit+0xb4>)
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	2200      	movs	r2, #0
 800abec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800abee:	4b12      	ldr	r3, [pc, #72]	; (800ac38 <prvHeapInit+0xb4>)
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	2200      	movs	r2, #0
 800abf4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800abfa:	683b      	ldr	r3, [r7, #0]
 800abfc:	68fa      	ldr	r2, [r7, #12]
 800abfe:	1ad2      	subs	r2, r2, r3
 800ac00:	683b      	ldr	r3, [r7, #0]
 800ac02:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ac04:	4b0c      	ldr	r3, [pc, #48]	; (800ac38 <prvHeapInit+0xb4>)
 800ac06:	681a      	ldr	r2, [r3, #0]
 800ac08:	683b      	ldr	r3, [r7, #0]
 800ac0a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ac0c:	683b      	ldr	r3, [r7, #0]
 800ac0e:	685b      	ldr	r3, [r3, #4]
 800ac10:	4a0a      	ldr	r2, [pc, #40]	; (800ac3c <prvHeapInit+0xb8>)
 800ac12:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ac14:	683b      	ldr	r3, [r7, #0]
 800ac16:	685b      	ldr	r3, [r3, #4]
 800ac18:	4a09      	ldr	r2, [pc, #36]	; (800ac40 <prvHeapInit+0xbc>)
 800ac1a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ac1c:	4b09      	ldr	r3, [pc, #36]	; (800ac44 <prvHeapInit+0xc0>)
 800ac1e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ac22:	601a      	str	r2, [r3, #0]
}
 800ac24:	bf00      	nop
 800ac26:	3714      	adds	r7, #20
 800ac28:	46bd      	mov	sp, r7
 800ac2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac2e:	4770      	bx	lr
 800ac30:	20001038 	.word	0x20001038
 800ac34:	20001bf0 	.word	0x20001bf0
 800ac38:	20001bf8 	.word	0x20001bf8
 800ac3c:	20001c00 	.word	0x20001c00
 800ac40:	20001bfc 	.word	0x20001bfc
 800ac44:	20001c0c 	.word	0x20001c0c

0800ac48 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ac48:	b480      	push	{r7}
 800ac4a:	b085      	sub	sp, #20
 800ac4c:	af00      	add	r7, sp, #0
 800ac4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ac50:	4b28      	ldr	r3, [pc, #160]	; (800acf4 <prvInsertBlockIntoFreeList+0xac>)
 800ac52:	60fb      	str	r3, [r7, #12]
 800ac54:	e002      	b.n	800ac5c <prvInsertBlockIntoFreeList+0x14>
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	60fb      	str	r3, [r7, #12]
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	687a      	ldr	r2, [r7, #4]
 800ac62:	429a      	cmp	r2, r3
 800ac64:	d8f7      	bhi.n	800ac56 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	685b      	ldr	r3, [r3, #4]
 800ac6e:	68ba      	ldr	r2, [r7, #8]
 800ac70:	4413      	add	r3, r2
 800ac72:	687a      	ldr	r2, [r7, #4]
 800ac74:	429a      	cmp	r2, r3
 800ac76:	d108      	bne.n	800ac8a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	685a      	ldr	r2, [r3, #4]
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	685b      	ldr	r3, [r3, #4]
 800ac80:	441a      	add	r2, r3
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	685b      	ldr	r3, [r3, #4]
 800ac92:	68ba      	ldr	r2, [r7, #8]
 800ac94:	441a      	add	r2, r3
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	429a      	cmp	r2, r3
 800ac9c:	d118      	bne.n	800acd0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	681a      	ldr	r2, [r3, #0]
 800aca2:	4b15      	ldr	r3, [pc, #84]	; (800acf8 <prvInsertBlockIntoFreeList+0xb0>)
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	429a      	cmp	r2, r3
 800aca8:	d00d      	beq.n	800acc6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	685a      	ldr	r2, [r3, #4]
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	685b      	ldr	r3, [r3, #4]
 800acb4:	441a      	add	r2, r3
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	681a      	ldr	r2, [r3, #0]
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	601a      	str	r2, [r3, #0]
 800acc4:	e008      	b.n	800acd8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800acc6:	4b0c      	ldr	r3, [pc, #48]	; (800acf8 <prvInsertBlockIntoFreeList+0xb0>)
 800acc8:	681a      	ldr	r2, [r3, #0]
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	601a      	str	r2, [r3, #0]
 800acce:	e003      	b.n	800acd8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	681a      	ldr	r2, [r3, #0]
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800acd8:	68fa      	ldr	r2, [r7, #12]
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	429a      	cmp	r2, r3
 800acde:	d002      	beq.n	800ace6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	687a      	ldr	r2, [r7, #4]
 800ace4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ace6:	bf00      	nop
 800ace8:	3714      	adds	r7, #20
 800acea:	46bd      	mov	sp, r7
 800acec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf0:	4770      	bx	lr
 800acf2:	bf00      	nop
 800acf4:	20001bf0 	.word	0x20001bf0
 800acf8:	20001bf8 	.word	0x20001bf8

0800acfc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800acfc:	b580      	push	{r7, lr}
 800acfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800ad00:	2200      	movs	r2, #0
 800ad02:	490e      	ldr	r1, [pc, #56]	; (800ad3c <MX_USB_DEVICE_Init+0x40>)
 800ad04:	480e      	ldr	r0, [pc, #56]	; (800ad40 <MX_USB_DEVICE_Init+0x44>)
 800ad06:	f7fb ff71 	bl	8006bec <USBD_Init>
 800ad0a:	4603      	mov	r3, r0
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d001      	beq.n	800ad14 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800ad10:	f7f6 f890 	bl	8000e34 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 800ad14:	490b      	ldr	r1, [pc, #44]	; (800ad44 <MX_USB_DEVICE_Init+0x48>)
 800ad16:	480a      	ldr	r0, [pc, #40]	; (800ad40 <MX_USB_DEVICE_Init+0x44>)
 800ad18:	f7fb ff98 	bl	8006c4c <USBD_RegisterClass>
 800ad1c:	4603      	mov	r3, r0
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d001      	beq.n	800ad26 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800ad22:	f7f6 f887 	bl	8000e34 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800ad26:	4806      	ldr	r0, [pc, #24]	; (800ad40 <MX_USB_DEVICE_Init+0x44>)
 800ad28:	f7fb ffc6 	bl	8006cb8 <USBD_Start>
 800ad2c:	4603      	mov	r3, r0
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d001      	beq.n	800ad36 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 800ad32:	f7f6 f87f 	bl	8000e34 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ad36:	bf00      	nop
 800ad38:	bd80      	pop	{r7, pc}
 800ad3a:	bf00      	nop
 800ad3c:	200000c4 	.word	0x200000c4
 800ad40:	20001c10 	.word	0x20001c10
 800ad44:	2000000c 	.word	0x2000000c

0800ad48 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ad48:	b480      	push	{r7}
 800ad4a:	b083      	sub	sp, #12
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	4603      	mov	r3, r0
 800ad50:	6039      	str	r1, [r7, #0]
 800ad52:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800ad54:	683b      	ldr	r3, [r7, #0]
 800ad56:	2212      	movs	r2, #18
 800ad58:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800ad5a:	4b03      	ldr	r3, [pc, #12]	; (800ad68 <USBD_FS_DeviceDescriptor+0x20>)
}
 800ad5c:	4618      	mov	r0, r3
 800ad5e:	370c      	adds	r7, #12
 800ad60:	46bd      	mov	sp, r7
 800ad62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad66:	4770      	bx	lr
 800ad68:	200000e4 	.word	0x200000e4

0800ad6c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ad6c:	b480      	push	{r7}
 800ad6e:	b083      	sub	sp, #12
 800ad70:	af00      	add	r7, sp, #0
 800ad72:	4603      	mov	r3, r0
 800ad74:	6039      	str	r1, [r7, #0]
 800ad76:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ad78:	683b      	ldr	r3, [r7, #0]
 800ad7a:	2204      	movs	r2, #4
 800ad7c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ad7e:	4b03      	ldr	r3, [pc, #12]	; (800ad8c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800ad80:	4618      	mov	r0, r3
 800ad82:	370c      	adds	r7, #12
 800ad84:	46bd      	mov	sp, r7
 800ad86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad8a:	4770      	bx	lr
 800ad8c:	20000104 	.word	0x20000104

0800ad90 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ad90:	b580      	push	{r7, lr}
 800ad92:	b082      	sub	sp, #8
 800ad94:	af00      	add	r7, sp, #0
 800ad96:	4603      	mov	r3, r0
 800ad98:	6039      	str	r1, [r7, #0]
 800ad9a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ad9c:	79fb      	ldrb	r3, [r7, #7]
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d105      	bne.n	800adae <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ada2:	683a      	ldr	r2, [r7, #0]
 800ada4:	4907      	ldr	r1, [pc, #28]	; (800adc4 <USBD_FS_ProductStrDescriptor+0x34>)
 800ada6:	4808      	ldr	r0, [pc, #32]	; (800adc8 <USBD_FS_ProductStrDescriptor+0x38>)
 800ada8:	f7fd f962 	bl	8008070 <USBD_GetString>
 800adac:	e004      	b.n	800adb8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800adae:	683a      	ldr	r2, [r7, #0]
 800adb0:	4904      	ldr	r1, [pc, #16]	; (800adc4 <USBD_FS_ProductStrDescriptor+0x34>)
 800adb2:	4805      	ldr	r0, [pc, #20]	; (800adc8 <USBD_FS_ProductStrDescriptor+0x38>)
 800adb4:	f7fd f95c 	bl	8008070 <USBD_GetString>
  }
  return USBD_StrDesc;
 800adb8:	4b02      	ldr	r3, [pc, #8]	; (800adc4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800adba:	4618      	mov	r0, r3
 800adbc:	3708      	adds	r7, #8
 800adbe:	46bd      	mov	sp, r7
 800adc0:	bd80      	pop	{r7, pc}
 800adc2:	bf00      	nop
 800adc4:	20001eec 	.word	0x20001eec
 800adc8:	0800b8d0 	.word	0x0800b8d0

0800adcc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800adcc:	b580      	push	{r7, lr}
 800adce:	b082      	sub	sp, #8
 800add0:	af00      	add	r7, sp, #0
 800add2:	4603      	mov	r3, r0
 800add4:	6039      	str	r1, [r7, #0]
 800add6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800add8:	683a      	ldr	r2, [r7, #0]
 800adda:	4904      	ldr	r1, [pc, #16]	; (800adec <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800addc:	4804      	ldr	r0, [pc, #16]	; (800adf0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800adde:	f7fd f947 	bl	8008070 <USBD_GetString>
  return USBD_StrDesc;
 800ade2:	4b02      	ldr	r3, [pc, #8]	; (800adec <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800ade4:	4618      	mov	r0, r3
 800ade6:	3708      	adds	r7, #8
 800ade8:	46bd      	mov	sp, r7
 800adea:	bd80      	pop	{r7, pc}
 800adec:	20001eec 	.word	0x20001eec
 800adf0:	0800b8e8 	.word	0x0800b8e8

0800adf4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800adf4:	b580      	push	{r7, lr}
 800adf6:	b082      	sub	sp, #8
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	4603      	mov	r3, r0
 800adfc:	6039      	str	r1, [r7, #0]
 800adfe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ae00:	683b      	ldr	r3, [r7, #0]
 800ae02:	221a      	movs	r2, #26
 800ae04:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ae06:	f000 f855 	bl	800aeb4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800ae0a:	4b02      	ldr	r3, [pc, #8]	; (800ae14 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800ae0c:	4618      	mov	r0, r3
 800ae0e:	3708      	adds	r7, #8
 800ae10:	46bd      	mov	sp, r7
 800ae12:	bd80      	pop	{r7, pc}
 800ae14:	20000108 	.word	0x20000108

0800ae18 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ae18:	b580      	push	{r7, lr}
 800ae1a:	b082      	sub	sp, #8
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	4603      	mov	r3, r0
 800ae20:	6039      	str	r1, [r7, #0]
 800ae22:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ae24:	79fb      	ldrb	r3, [r7, #7]
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d105      	bne.n	800ae36 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ae2a:	683a      	ldr	r2, [r7, #0]
 800ae2c:	4907      	ldr	r1, [pc, #28]	; (800ae4c <USBD_FS_ConfigStrDescriptor+0x34>)
 800ae2e:	4808      	ldr	r0, [pc, #32]	; (800ae50 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ae30:	f7fd f91e 	bl	8008070 <USBD_GetString>
 800ae34:	e004      	b.n	800ae40 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ae36:	683a      	ldr	r2, [r7, #0]
 800ae38:	4904      	ldr	r1, [pc, #16]	; (800ae4c <USBD_FS_ConfigStrDescriptor+0x34>)
 800ae3a:	4805      	ldr	r0, [pc, #20]	; (800ae50 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ae3c:	f7fd f918 	bl	8008070 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ae40:	4b02      	ldr	r3, [pc, #8]	; (800ae4c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800ae42:	4618      	mov	r0, r3
 800ae44:	3708      	adds	r7, #8
 800ae46:	46bd      	mov	sp, r7
 800ae48:	bd80      	pop	{r7, pc}
 800ae4a:	bf00      	nop
 800ae4c:	20001eec 	.word	0x20001eec
 800ae50:	0800b8fc 	.word	0x0800b8fc

0800ae54 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ae54:	b580      	push	{r7, lr}
 800ae56:	b082      	sub	sp, #8
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	4603      	mov	r3, r0
 800ae5c:	6039      	str	r1, [r7, #0]
 800ae5e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ae60:	79fb      	ldrb	r3, [r7, #7]
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d105      	bne.n	800ae72 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ae66:	683a      	ldr	r2, [r7, #0]
 800ae68:	4907      	ldr	r1, [pc, #28]	; (800ae88 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ae6a:	4808      	ldr	r0, [pc, #32]	; (800ae8c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ae6c:	f7fd f900 	bl	8008070 <USBD_GetString>
 800ae70:	e004      	b.n	800ae7c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ae72:	683a      	ldr	r2, [r7, #0]
 800ae74:	4904      	ldr	r1, [pc, #16]	; (800ae88 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ae76:	4805      	ldr	r0, [pc, #20]	; (800ae8c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ae78:	f7fd f8fa 	bl	8008070 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ae7c:	4b02      	ldr	r3, [pc, #8]	; (800ae88 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800ae7e:	4618      	mov	r0, r3
 800ae80:	3708      	adds	r7, #8
 800ae82:	46bd      	mov	sp, r7
 800ae84:	bd80      	pop	{r7, pc}
 800ae86:	bf00      	nop
 800ae88:	20001eec 	.word	0x20001eec
 800ae8c:	0800b908 	.word	0x0800b908

0800ae90 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ae90:	b480      	push	{r7}
 800ae92:	b083      	sub	sp, #12
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	4603      	mov	r3, r0
 800ae98:	6039      	str	r1, [r7, #0]
 800ae9a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800ae9c:	683b      	ldr	r3, [r7, #0]
 800ae9e:	220c      	movs	r2, #12
 800aea0:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800aea2:	4b03      	ldr	r3, [pc, #12]	; (800aeb0 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800aea4:	4618      	mov	r0, r3
 800aea6:	370c      	adds	r7, #12
 800aea8:	46bd      	mov	sp, r7
 800aeaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeae:	4770      	bx	lr
 800aeb0:	200000f8 	.word	0x200000f8

0800aeb4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800aeb4:	b580      	push	{r7, lr}
 800aeb6:	b084      	sub	sp, #16
 800aeb8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800aeba:	4b0f      	ldr	r3, [pc, #60]	; (800aef8 <Get_SerialNum+0x44>)
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800aec0:	4b0e      	ldr	r3, [pc, #56]	; (800aefc <Get_SerialNum+0x48>)
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800aec6:	4b0e      	ldr	r3, [pc, #56]	; (800af00 <Get_SerialNum+0x4c>)
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800aecc:	68fa      	ldr	r2, [r7, #12]
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	4413      	add	r3, r2
 800aed2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d009      	beq.n	800aeee <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800aeda:	2208      	movs	r2, #8
 800aedc:	4909      	ldr	r1, [pc, #36]	; (800af04 <Get_SerialNum+0x50>)
 800aede:	68f8      	ldr	r0, [r7, #12]
 800aee0:	f000 f814 	bl	800af0c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800aee4:	2204      	movs	r2, #4
 800aee6:	4908      	ldr	r1, [pc, #32]	; (800af08 <Get_SerialNum+0x54>)
 800aee8:	68b8      	ldr	r0, [r7, #8]
 800aeea:	f000 f80f 	bl	800af0c <IntToUnicode>
  }
}
 800aeee:	bf00      	nop
 800aef0:	3710      	adds	r7, #16
 800aef2:	46bd      	mov	sp, r7
 800aef4:	bd80      	pop	{r7, pc}
 800aef6:	bf00      	nop
 800aef8:	1fff7590 	.word	0x1fff7590
 800aefc:	1fff7594 	.word	0x1fff7594
 800af00:	1fff7598 	.word	0x1fff7598
 800af04:	2000010a 	.word	0x2000010a
 800af08:	2000011a 	.word	0x2000011a

0800af0c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800af0c:	b480      	push	{r7}
 800af0e:	b087      	sub	sp, #28
 800af10:	af00      	add	r7, sp, #0
 800af12:	60f8      	str	r0, [r7, #12]
 800af14:	60b9      	str	r1, [r7, #8]
 800af16:	4613      	mov	r3, r2
 800af18:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800af1a:	2300      	movs	r3, #0
 800af1c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800af1e:	2300      	movs	r3, #0
 800af20:	75fb      	strb	r3, [r7, #23]
 800af22:	e027      	b.n	800af74 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	0f1b      	lsrs	r3, r3, #28
 800af28:	2b09      	cmp	r3, #9
 800af2a:	d80b      	bhi.n	800af44 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	0f1b      	lsrs	r3, r3, #28
 800af30:	b2da      	uxtb	r2, r3
 800af32:	7dfb      	ldrb	r3, [r7, #23]
 800af34:	005b      	lsls	r3, r3, #1
 800af36:	4619      	mov	r1, r3
 800af38:	68bb      	ldr	r3, [r7, #8]
 800af3a:	440b      	add	r3, r1
 800af3c:	3230      	adds	r2, #48	; 0x30
 800af3e:	b2d2      	uxtb	r2, r2
 800af40:	701a      	strb	r2, [r3, #0]
 800af42:	e00a      	b.n	800af5a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	0f1b      	lsrs	r3, r3, #28
 800af48:	b2da      	uxtb	r2, r3
 800af4a:	7dfb      	ldrb	r3, [r7, #23]
 800af4c:	005b      	lsls	r3, r3, #1
 800af4e:	4619      	mov	r1, r3
 800af50:	68bb      	ldr	r3, [r7, #8]
 800af52:	440b      	add	r3, r1
 800af54:	3237      	adds	r2, #55	; 0x37
 800af56:	b2d2      	uxtb	r2, r2
 800af58:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	011b      	lsls	r3, r3, #4
 800af5e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800af60:	7dfb      	ldrb	r3, [r7, #23]
 800af62:	005b      	lsls	r3, r3, #1
 800af64:	3301      	adds	r3, #1
 800af66:	68ba      	ldr	r2, [r7, #8]
 800af68:	4413      	add	r3, r2
 800af6a:	2200      	movs	r2, #0
 800af6c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800af6e:	7dfb      	ldrb	r3, [r7, #23]
 800af70:	3301      	adds	r3, #1
 800af72:	75fb      	strb	r3, [r7, #23]
 800af74:	7dfa      	ldrb	r2, [r7, #23]
 800af76:	79fb      	ldrb	r3, [r7, #7]
 800af78:	429a      	cmp	r2, r3
 800af7a:	d3d3      	bcc.n	800af24 <IntToUnicode+0x18>
  }
}
 800af7c:	bf00      	nop
 800af7e:	bf00      	nop
 800af80:	371c      	adds	r7, #28
 800af82:	46bd      	mov	sp, r7
 800af84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af88:	4770      	bx	lr
	...

0800af8c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800af8c:	b580      	push	{r7, lr}
 800af8e:	b0ae      	sub	sp, #184	; 0xb8
 800af90:	af00      	add	r7, sp, #0
 800af92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800af94:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800af98:	2200      	movs	r2, #0
 800af9a:	601a      	str	r2, [r3, #0]
 800af9c:	605a      	str	r2, [r3, #4]
 800af9e:	609a      	str	r2, [r3, #8]
 800afa0:	60da      	str	r2, [r3, #12]
 800afa2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800afa4:	f107 0318 	add.w	r3, r7, #24
 800afa8:	228c      	movs	r2, #140	; 0x8c
 800afaa:	2100      	movs	r1, #0
 800afac:	4618      	mov	r0, r3
 800afae:	f000 fc2f 	bl	800b810 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800afba:	f040 8085 	bne.w	800b0c8 <HAL_PCD_MspInit+0x13c>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800afbe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800afc2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800afc4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800afc8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800afcc:	2301      	movs	r3, #1
 800afce:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800afd0:	2301      	movs	r3, #1
 800afd2:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800afd4:	2318      	movs	r3, #24
 800afd6:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 800afd8:	2302      	movs	r3, #2
 800afda:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800afdc:	2302      	movs	r3, #2
 800afde:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800afe0:	2302      	movs	r3, #2
 800afe2:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800afe4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800afe8:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800afea:	f107 0318 	add.w	r3, r7, #24
 800afee:	4618      	mov	r0, r3
 800aff0:	f7f8 fc04 	bl	80037fc <HAL_RCCEx_PeriphCLKConfig>
 800aff4:	4603      	mov	r3, r0
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d001      	beq.n	800affe <HAL_PCD_MspInit+0x72>
    {
      Error_Handler();
 800affa:	f7f5 ff1b 	bl	8000e34 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800affe:	4b34      	ldr	r3, [pc, #208]	; (800b0d0 <HAL_PCD_MspInit+0x144>)
 800b000:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b002:	4a33      	ldr	r2, [pc, #204]	; (800b0d0 <HAL_PCD_MspInit+0x144>)
 800b004:	f043 0301 	orr.w	r3, r3, #1
 800b008:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b00a:	4b31      	ldr	r3, [pc, #196]	; (800b0d0 <HAL_PCD_MspInit+0x144>)
 800b00c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b00e:	f003 0301 	and.w	r3, r3, #1
 800b012:	617b      	str	r3, [r7, #20]
 800b014:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800b016:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800b01a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b01e:	2302      	movs	r3, #2
 800b020:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b024:	2300      	movs	r3, #0
 800b026:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b02a:	2303      	movs	r3, #3
 800b02c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b030:	230a      	movs	r3, #10
 800b032:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b036:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800b03a:	4619      	mov	r1, r3
 800b03c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b040:	f7f6 f9b8 	bl	80013b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800b044:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b048:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b04c:	2300      	movs	r3, #0
 800b04e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b052:	2300      	movs	r3, #0
 800b054:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800b058:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800b05c:	4619      	mov	r1, r3
 800b05e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b062:	f7f6 f9a7 	bl	80013b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b066:	4b1a      	ldr	r3, [pc, #104]	; (800b0d0 <HAL_PCD_MspInit+0x144>)
 800b068:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b06a:	4a19      	ldr	r2, [pc, #100]	; (800b0d0 <HAL_PCD_MspInit+0x144>)
 800b06c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b070:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b072:	4b17      	ldr	r3, [pc, #92]	; (800b0d0 <HAL_PCD_MspInit+0x144>)
 800b074:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b076:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b07a:	613b      	str	r3, [r7, #16]
 800b07c:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b07e:	4b14      	ldr	r3, [pc, #80]	; (800b0d0 <HAL_PCD_MspInit+0x144>)
 800b080:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b082:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b086:	2b00      	cmp	r3, #0
 800b088:	d114      	bne.n	800b0b4 <HAL_PCD_MspInit+0x128>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b08a:	4b11      	ldr	r3, [pc, #68]	; (800b0d0 <HAL_PCD_MspInit+0x144>)
 800b08c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b08e:	4a10      	ldr	r2, [pc, #64]	; (800b0d0 <HAL_PCD_MspInit+0x144>)
 800b090:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b094:	6593      	str	r3, [r2, #88]	; 0x58
 800b096:	4b0e      	ldr	r3, [pc, #56]	; (800b0d0 <HAL_PCD_MspInit+0x144>)
 800b098:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b09a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b09e:	60fb      	str	r3, [r7, #12]
 800b0a0:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 800b0a2:	f7f7 fd4d 	bl	8002b40 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800b0a6:	4b0a      	ldr	r3, [pc, #40]	; (800b0d0 <HAL_PCD_MspInit+0x144>)
 800b0a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b0aa:	4a09      	ldr	r2, [pc, #36]	; (800b0d0 <HAL_PCD_MspInit+0x144>)
 800b0ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b0b0:	6593      	str	r3, [r2, #88]	; 0x58
 800b0b2:	e001      	b.n	800b0b8 <HAL_PCD_MspInit+0x12c>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800b0b4:	f7f7 fd44 	bl	8002b40 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800b0b8:	2200      	movs	r2, #0
 800b0ba:	2105      	movs	r1, #5
 800b0bc:	2043      	movs	r0, #67	; 0x43
 800b0be:	f7f6 f942 	bl	8001346 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b0c2:	2043      	movs	r0, #67	; 0x43
 800b0c4:	f7f6 f95b 	bl	800137e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b0c8:	bf00      	nop
 800b0ca:	37b8      	adds	r7, #184	; 0xb8
 800b0cc:	46bd      	mov	sp, r7
 800b0ce:	bd80      	pop	{r7, pc}
 800b0d0:	40021000 	.word	0x40021000

0800b0d4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b0d4:	b580      	push	{r7, lr}
 800b0d6:	b082      	sub	sp, #8
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800b0e8:	4619      	mov	r1, r3
 800b0ea:	4610      	mov	r0, r2
 800b0ec:	f7fb fe31 	bl	8006d52 <USBD_LL_SetupStage>
}
 800b0f0:	bf00      	nop
 800b0f2:	3708      	adds	r7, #8
 800b0f4:	46bd      	mov	sp, r7
 800b0f6:	bd80      	pop	{r7, pc}

0800b0f8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b0f8:	b580      	push	{r7, lr}
 800b0fa:	b082      	sub	sp, #8
 800b0fc:	af00      	add	r7, sp, #0
 800b0fe:	6078      	str	r0, [r7, #4]
 800b100:	460b      	mov	r3, r1
 800b102:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800b10a:	78fa      	ldrb	r2, [r7, #3]
 800b10c:	6879      	ldr	r1, [r7, #4]
 800b10e:	4613      	mov	r3, r2
 800b110:	00db      	lsls	r3, r3, #3
 800b112:	4413      	add	r3, r2
 800b114:	009b      	lsls	r3, r3, #2
 800b116:	440b      	add	r3, r1
 800b118:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800b11c:	681a      	ldr	r2, [r3, #0]
 800b11e:	78fb      	ldrb	r3, [r7, #3]
 800b120:	4619      	mov	r1, r3
 800b122:	f7fb fe6b 	bl	8006dfc <USBD_LL_DataOutStage>
}
 800b126:	bf00      	nop
 800b128:	3708      	adds	r7, #8
 800b12a:	46bd      	mov	sp, r7
 800b12c:	bd80      	pop	{r7, pc}

0800b12e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b12e:	b580      	push	{r7, lr}
 800b130:	b082      	sub	sp, #8
 800b132:	af00      	add	r7, sp, #0
 800b134:	6078      	str	r0, [r7, #4]
 800b136:	460b      	mov	r3, r1
 800b138:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800b140:	78fa      	ldrb	r2, [r7, #3]
 800b142:	6879      	ldr	r1, [r7, #4]
 800b144:	4613      	mov	r3, r2
 800b146:	00db      	lsls	r3, r3, #3
 800b148:	4413      	add	r3, r2
 800b14a:	009b      	lsls	r3, r3, #2
 800b14c:	440b      	add	r3, r1
 800b14e:	3348      	adds	r3, #72	; 0x48
 800b150:	681a      	ldr	r2, [r3, #0]
 800b152:	78fb      	ldrb	r3, [r7, #3]
 800b154:	4619      	mov	r1, r3
 800b156:	f7fb ff04 	bl	8006f62 <USBD_LL_DataInStage>
}
 800b15a:	bf00      	nop
 800b15c:	3708      	adds	r7, #8
 800b15e:	46bd      	mov	sp, r7
 800b160:	bd80      	pop	{r7, pc}

0800b162 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b162:	b580      	push	{r7, lr}
 800b164:	b082      	sub	sp, #8
 800b166:	af00      	add	r7, sp, #0
 800b168:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b170:	4618      	mov	r0, r3
 800b172:	f7fc f83e 	bl	80071f2 <USBD_LL_SOF>
}
 800b176:	bf00      	nop
 800b178:	3708      	adds	r7, #8
 800b17a:	46bd      	mov	sp, r7
 800b17c:	bd80      	pop	{r7, pc}

0800b17e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b17e:	b580      	push	{r7, lr}
 800b180:	b084      	sub	sp, #16
 800b182:	af00      	add	r7, sp, #0
 800b184:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b186:	2301      	movs	r3, #1
 800b188:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	691b      	ldr	r3, [r3, #16]
 800b18e:	2b02      	cmp	r3, #2
 800b190:	d001      	beq.n	800b196 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b192:	f7f5 fe4f 	bl	8000e34 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b19c:	7bfa      	ldrb	r2, [r7, #15]
 800b19e:	4611      	mov	r1, r2
 800b1a0:	4618      	mov	r0, r3
 800b1a2:	f7fb ffe2 	bl	800716a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b1ac:	4618      	mov	r0, r3
 800b1ae:	f7fb ff8a 	bl	80070c6 <USBD_LL_Reset>
}
 800b1b2:	bf00      	nop
 800b1b4:	3710      	adds	r7, #16
 800b1b6:	46bd      	mov	sp, r7
 800b1b8:	bd80      	pop	{r7, pc}
	...

0800b1bc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b1bc:	b580      	push	{r7, lr}
 800b1be:	b082      	sub	sp, #8
 800b1c0:	af00      	add	r7, sp, #0
 800b1c2:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	687a      	ldr	r2, [r7, #4]
 800b1d0:	6812      	ldr	r2, [r2, #0]
 800b1d2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b1d6:	f043 0301 	orr.w	r3, r3, #1
 800b1da:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b1e2:	4618      	mov	r0, r3
 800b1e4:	f7fb ffd1 	bl	800718a <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	6a1b      	ldr	r3, [r3, #32]
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d005      	beq.n	800b1fc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b1f0:	4b04      	ldr	r3, [pc, #16]	; (800b204 <HAL_PCD_SuspendCallback+0x48>)
 800b1f2:	691b      	ldr	r3, [r3, #16]
 800b1f4:	4a03      	ldr	r2, [pc, #12]	; (800b204 <HAL_PCD_SuspendCallback+0x48>)
 800b1f6:	f043 0306 	orr.w	r3, r3, #6
 800b1fa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b1fc:	bf00      	nop
 800b1fe:	3708      	adds	r7, #8
 800b200:	46bd      	mov	sp, r7
 800b202:	bd80      	pop	{r7, pc}
 800b204:	e000ed00 	.word	0xe000ed00

0800b208 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b208:	b580      	push	{r7, lr}
 800b20a:	b082      	sub	sp, #8
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	687a      	ldr	r2, [r7, #4]
 800b21c:	6812      	ldr	r2, [r2, #0]
 800b21e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b222:	f023 0301 	bic.w	r3, r3, #1
 800b226:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	6a1b      	ldr	r3, [r3, #32]
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d007      	beq.n	800b240 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b230:	4b08      	ldr	r3, [pc, #32]	; (800b254 <HAL_PCD_ResumeCallback+0x4c>)
 800b232:	691b      	ldr	r3, [r3, #16]
 800b234:	4a07      	ldr	r2, [pc, #28]	; (800b254 <HAL_PCD_ResumeCallback+0x4c>)
 800b236:	f023 0306 	bic.w	r3, r3, #6
 800b23a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800b23c:	f000 fae2 	bl	800b804 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b246:	4618      	mov	r0, r3
 800b248:	f7fb ffbb 	bl	80071c2 <USBD_LL_Resume>
}
 800b24c:	bf00      	nop
 800b24e:	3708      	adds	r7, #8
 800b250:	46bd      	mov	sp, r7
 800b252:	bd80      	pop	{r7, pc}
 800b254:	e000ed00 	.word	0xe000ed00

0800b258 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b258:	b580      	push	{r7, lr}
 800b25a:	b082      	sub	sp, #8
 800b25c:	af00      	add	r7, sp, #0
 800b25e:	6078      	str	r0, [r7, #4]
 800b260:	460b      	mov	r3, r1
 800b262:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b26a:	78fa      	ldrb	r2, [r7, #3]
 800b26c:	4611      	mov	r1, r2
 800b26e:	4618      	mov	r0, r3
 800b270:	f7fc f811 	bl	8007296 <USBD_LL_IsoOUTIncomplete>
}
 800b274:	bf00      	nop
 800b276:	3708      	adds	r7, #8
 800b278:	46bd      	mov	sp, r7
 800b27a:	bd80      	pop	{r7, pc}

0800b27c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b27c:	b580      	push	{r7, lr}
 800b27e:	b082      	sub	sp, #8
 800b280:	af00      	add	r7, sp, #0
 800b282:	6078      	str	r0, [r7, #4]
 800b284:	460b      	mov	r3, r1
 800b286:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b28e:	78fa      	ldrb	r2, [r7, #3]
 800b290:	4611      	mov	r1, r2
 800b292:	4618      	mov	r0, r3
 800b294:	f7fb ffcd 	bl	8007232 <USBD_LL_IsoINIncomplete>
}
 800b298:	bf00      	nop
 800b29a:	3708      	adds	r7, #8
 800b29c:	46bd      	mov	sp, r7
 800b29e:	bd80      	pop	{r7, pc}

0800b2a0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b2a0:	b580      	push	{r7, lr}
 800b2a2:	b082      	sub	sp, #8
 800b2a4:	af00      	add	r7, sp, #0
 800b2a6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b2ae:	4618      	mov	r0, r3
 800b2b0:	f7fc f823 	bl	80072fa <USBD_LL_DevConnected>
}
 800b2b4:	bf00      	nop
 800b2b6:	3708      	adds	r7, #8
 800b2b8:	46bd      	mov	sp, r7
 800b2ba:	bd80      	pop	{r7, pc}

0800b2bc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b2bc:	b580      	push	{r7, lr}
 800b2be:	b082      	sub	sp, #8
 800b2c0:	af00      	add	r7, sp, #0
 800b2c2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b2ca:	4618      	mov	r0, r3
 800b2cc:	f7fc f820 	bl	8007310 <USBD_LL_DevDisconnected>
}
 800b2d0:	bf00      	nop
 800b2d2:	3708      	adds	r7, #8
 800b2d4:	46bd      	mov	sp, r7
 800b2d6:	bd80      	pop	{r7, pc}

0800b2d8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b2d8:	b580      	push	{r7, lr}
 800b2da:	b082      	sub	sp, #8
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	781b      	ldrb	r3, [r3, #0]
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d13c      	bne.n	800b362 <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800b2e8:	4a20      	ldr	r2, [pc, #128]	; (800b36c <USBD_LL_Init+0x94>)
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	4a1e      	ldr	r2, [pc, #120]	; (800b36c <USBD_LL_Init+0x94>)
 800b2f4:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b2f8:	4b1c      	ldr	r3, [pc, #112]	; (800b36c <USBD_LL_Init+0x94>)
 800b2fa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800b2fe:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800b300:	4b1a      	ldr	r3, [pc, #104]	; (800b36c <USBD_LL_Init+0x94>)
 800b302:	2206      	movs	r2, #6
 800b304:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800b306:	4b19      	ldr	r3, [pc, #100]	; (800b36c <USBD_LL_Init+0x94>)
 800b308:	2202      	movs	r2, #2
 800b30a:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b30c:	4b17      	ldr	r3, [pc, #92]	; (800b36c <USBD_LL_Init+0x94>)
 800b30e:	2202      	movs	r2, #2
 800b310:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800b312:	4b16      	ldr	r3, [pc, #88]	; (800b36c <USBD_LL_Init+0x94>)
 800b314:	2201      	movs	r2, #1
 800b316:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800b318:	4b14      	ldr	r3, [pc, #80]	; (800b36c <USBD_LL_Init+0x94>)
 800b31a:	2200      	movs	r2, #0
 800b31c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800b31e:	4b13      	ldr	r3, [pc, #76]	; (800b36c <USBD_LL_Init+0x94>)
 800b320:	2200      	movs	r2, #0
 800b322:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 800b324:	4b11      	ldr	r3, [pc, #68]	; (800b36c <USBD_LL_Init+0x94>)
 800b326:	2201      	movs	r2, #1
 800b328:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800b32a:	4b10      	ldr	r3, [pc, #64]	; (800b36c <USBD_LL_Init+0x94>)
 800b32c:	2200      	movs	r2, #0
 800b32e:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800b330:	4b0e      	ldr	r3, [pc, #56]	; (800b36c <USBD_LL_Init+0x94>)
 800b332:	2201      	movs	r2, #1
 800b334:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800b336:	480d      	ldr	r0, [pc, #52]	; (800b36c <USBD_LL_Init+0x94>)
 800b338:	f7f6 f9fe 	bl	8001738 <HAL_PCD_Init>
 800b33c:	4603      	mov	r3, r0
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d001      	beq.n	800b346 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800b342:	f7f5 fd77 	bl	8000e34 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800b346:	2180      	movs	r1, #128	; 0x80
 800b348:	4808      	ldr	r0, [pc, #32]	; (800b36c <USBD_LL_Init+0x94>)
 800b34a:	f7f7 fb50 	bl	80029ee <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800b34e:	2240      	movs	r2, #64	; 0x40
 800b350:	2100      	movs	r1, #0
 800b352:	4806      	ldr	r0, [pc, #24]	; (800b36c <USBD_LL_Init+0x94>)
 800b354:	f7f7 fb04 	bl	8002960 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800b358:	2280      	movs	r2, #128	; 0x80
 800b35a:	2101      	movs	r1, #1
 800b35c:	4803      	ldr	r0, [pc, #12]	; (800b36c <USBD_LL_Init+0x94>)
 800b35e:	f7f7 faff 	bl	8002960 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800b362:	2300      	movs	r3, #0
}
 800b364:	4618      	mov	r0, r3
 800b366:	3708      	adds	r7, #8
 800b368:	46bd      	mov	sp, r7
 800b36a:	bd80      	pop	{r7, pc}
 800b36c:	200020ec 	.word	0x200020ec

0800b370 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b370:	b580      	push	{r7, lr}
 800b372:	b084      	sub	sp, #16
 800b374:	af00      	add	r7, sp, #0
 800b376:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b378:	2300      	movs	r3, #0
 800b37a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b37c:	2300      	movs	r3, #0
 800b37e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b386:	4618      	mov	r0, r3
 800b388:	f7f6 fafa 	bl	8001980 <HAL_PCD_Start>
 800b38c:	4603      	mov	r3, r0
 800b38e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800b390:	7bbb      	ldrb	r3, [r7, #14]
 800b392:	2b03      	cmp	r3, #3
 800b394:	d816      	bhi.n	800b3c4 <USBD_LL_Start+0x54>
 800b396:	a201      	add	r2, pc, #4	; (adr r2, 800b39c <USBD_LL_Start+0x2c>)
 800b398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b39c:	0800b3ad 	.word	0x0800b3ad
 800b3a0:	0800b3b3 	.word	0x0800b3b3
 800b3a4:	0800b3b9 	.word	0x0800b3b9
 800b3a8:	0800b3bf 	.word	0x0800b3bf
    case HAL_OK :
      usb_status = USBD_OK;
 800b3ac:	2300      	movs	r3, #0
 800b3ae:	73fb      	strb	r3, [r7, #15]
    break;
 800b3b0:	e00b      	b.n	800b3ca <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b3b2:	2303      	movs	r3, #3
 800b3b4:	73fb      	strb	r3, [r7, #15]
    break;
 800b3b6:	e008      	b.n	800b3ca <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b3b8:	2301      	movs	r3, #1
 800b3ba:	73fb      	strb	r3, [r7, #15]
    break;
 800b3bc:	e005      	b.n	800b3ca <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b3be:	2303      	movs	r3, #3
 800b3c0:	73fb      	strb	r3, [r7, #15]
    break;
 800b3c2:	e002      	b.n	800b3ca <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800b3c4:	2303      	movs	r3, #3
 800b3c6:	73fb      	strb	r3, [r7, #15]
    break;
 800b3c8:	bf00      	nop
  }
  return usb_status;
 800b3ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3cc:	4618      	mov	r0, r3
 800b3ce:	3710      	adds	r7, #16
 800b3d0:	46bd      	mov	sp, r7
 800b3d2:	bd80      	pop	{r7, pc}

0800b3d4 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b3d4:	b580      	push	{r7, lr}
 800b3d6:	b084      	sub	sp, #16
 800b3d8:	af00      	add	r7, sp, #0
 800b3da:	6078      	str	r0, [r7, #4]
 800b3dc:	4608      	mov	r0, r1
 800b3de:	4611      	mov	r1, r2
 800b3e0:	461a      	mov	r2, r3
 800b3e2:	4603      	mov	r3, r0
 800b3e4:	70fb      	strb	r3, [r7, #3]
 800b3e6:	460b      	mov	r3, r1
 800b3e8:	70bb      	strb	r3, [r7, #2]
 800b3ea:	4613      	mov	r3, r2
 800b3ec:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b3ee:	2300      	movs	r3, #0
 800b3f0:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b3f2:	2300      	movs	r3, #0
 800b3f4:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b3fc:	78bb      	ldrb	r3, [r7, #2]
 800b3fe:	883a      	ldrh	r2, [r7, #0]
 800b400:	78f9      	ldrb	r1, [r7, #3]
 800b402:	f7f6 ffa4 	bl	800234e <HAL_PCD_EP_Open>
 800b406:	4603      	mov	r3, r0
 800b408:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800b40a:	7bbb      	ldrb	r3, [r7, #14]
 800b40c:	2b03      	cmp	r3, #3
 800b40e:	d817      	bhi.n	800b440 <USBD_LL_OpenEP+0x6c>
 800b410:	a201      	add	r2, pc, #4	; (adr r2, 800b418 <USBD_LL_OpenEP+0x44>)
 800b412:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b416:	bf00      	nop
 800b418:	0800b429 	.word	0x0800b429
 800b41c:	0800b42f 	.word	0x0800b42f
 800b420:	0800b435 	.word	0x0800b435
 800b424:	0800b43b 	.word	0x0800b43b
    case HAL_OK :
      usb_status = USBD_OK;
 800b428:	2300      	movs	r3, #0
 800b42a:	73fb      	strb	r3, [r7, #15]
    break;
 800b42c:	e00b      	b.n	800b446 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b42e:	2303      	movs	r3, #3
 800b430:	73fb      	strb	r3, [r7, #15]
    break;
 800b432:	e008      	b.n	800b446 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b434:	2301      	movs	r3, #1
 800b436:	73fb      	strb	r3, [r7, #15]
    break;
 800b438:	e005      	b.n	800b446 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b43a:	2303      	movs	r3, #3
 800b43c:	73fb      	strb	r3, [r7, #15]
    break;
 800b43e:	e002      	b.n	800b446 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800b440:	2303      	movs	r3, #3
 800b442:	73fb      	strb	r3, [r7, #15]
    break;
 800b444:	bf00      	nop
  }
  return usb_status;
 800b446:	7bfb      	ldrb	r3, [r7, #15]
}
 800b448:	4618      	mov	r0, r3
 800b44a:	3710      	adds	r7, #16
 800b44c:	46bd      	mov	sp, r7
 800b44e:	bd80      	pop	{r7, pc}

0800b450 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b450:	b580      	push	{r7, lr}
 800b452:	b084      	sub	sp, #16
 800b454:	af00      	add	r7, sp, #0
 800b456:	6078      	str	r0, [r7, #4]
 800b458:	460b      	mov	r3, r1
 800b45a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b45c:	2300      	movs	r3, #0
 800b45e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b460:	2300      	movs	r3, #0
 800b462:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b46a:	78fa      	ldrb	r2, [r7, #3]
 800b46c:	4611      	mov	r1, r2
 800b46e:	4618      	mov	r0, r3
 800b470:	f7f6 ffd5 	bl	800241e <HAL_PCD_EP_Close>
 800b474:	4603      	mov	r3, r0
 800b476:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800b478:	7bbb      	ldrb	r3, [r7, #14]
 800b47a:	2b03      	cmp	r3, #3
 800b47c:	d816      	bhi.n	800b4ac <USBD_LL_CloseEP+0x5c>
 800b47e:	a201      	add	r2, pc, #4	; (adr r2, 800b484 <USBD_LL_CloseEP+0x34>)
 800b480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b484:	0800b495 	.word	0x0800b495
 800b488:	0800b49b 	.word	0x0800b49b
 800b48c:	0800b4a1 	.word	0x0800b4a1
 800b490:	0800b4a7 	.word	0x0800b4a7
    case HAL_OK :
      usb_status = USBD_OK;
 800b494:	2300      	movs	r3, #0
 800b496:	73fb      	strb	r3, [r7, #15]
    break;
 800b498:	e00b      	b.n	800b4b2 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b49a:	2303      	movs	r3, #3
 800b49c:	73fb      	strb	r3, [r7, #15]
    break;
 800b49e:	e008      	b.n	800b4b2 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b4a0:	2301      	movs	r3, #1
 800b4a2:	73fb      	strb	r3, [r7, #15]
    break;
 800b4a4:	e005      	b.n	800b4b2 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b4a6:	2303      	movs	r3, #3
 800b4a8:	73fb      	strb	r3, [r7, #15]
    break;
 800b4aa:	e002      	b.n	800b4b2 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800b4ac:	2303      	movs	r3, #3
 800b4ae:	73fb      	strb	r3, [r7, #15]
    break;
 800b4b0:	bf00      	nop
  }
  return usb_status;
 800b4b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4b4:	4618      	mov	r0, r3
 800b4b6:	3710      	adds	r7, #16
 800b4b8:	46bd      	mov	sp, r7
 800b4ba:	bd80      	pop	{r7, pc}

0800b4bc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b4bc:	b580      	push	{r7, lr}
 800b4be:	b084      	sub	sp, #16
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	6078      	str	r0, [r7, #4]
 800b4c4:	460b      	mov	r3, r1
 800b4c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b4c8:	2300      	movs	r3, #0
 800b4ca:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b4cc:	2300      	movs	r3, #0
 800b4ce:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b4d6:	78fa      	ldrb	r2, [r7, #3]
 800b4d8:	4611      	mov	r1, r2
 800b4da:	4618      	mov	r0, r3
 800b4dc:	f7f7 f84c 	bl	8002578 <HAL_PCD_EP_SetStall>
 800b4e0:	4603      	mov	r3, r0
 800b4e2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800b4e4:	7bbb      	ldrb	r3, [r7, #14]
 800b4e6:	2b03      	cmp	r3, #3
 800b4e8:	d816      	bhi.n	800b518 <USBD_LL_StallEP+0x5c>
 800b4ea:	a201      	add	r2, pc, #4	; (adr r2, 800b4f0 <USBD_LL_StallEP+0x34>)
 800b4ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4f0:	0800b501 	.word	0x0800b501
 800b4f4:	0800b507 	.word	0x0800b507
 800b4f8:	0800b50d 	.word	0x0800b50d
 800b4fc:	0800b513 	.word	0x0800b513
    case HAL_OK :
      usb_status = USBD_OK;
 800b500:	2300      	movs	r3, #0
 800b502:	73fb      	strb	r3, [r7, #15]
    break;
 800b504:	e00b      	b.n	800b51e <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b506:	2303      	movs	r3, #3
 800b508:	73fb      	strb	r3, [r7, #15]
    break;
 800b50a:	e008      	b.n	800b51e <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b50c:	2301      	movs	r3, #1
 800b50e:	73fb      	strb	r3, [r7, #15]
    break;
 800b510:	e005      	b.n	800b51e <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b512:	2303      	movs	r3, #3
 800b514:	73fb      	strb	r3, [r7, #15]
    break;
 800b516:	e002      	b.n	800b51e <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800b518:	2303      	movs	r3, #3
 800b51a:	73fb      	strb	r3, [r7, #15]
    break;
 800b51c:	bf00      	nop
  }
  return usb_status;
 800b51e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b520:	4618      	mov	r0, r3
 800b522:	3710      	adds	r7, #16
 800b524:	46bd      	mov	sp, r7
 800b526:	bd80      	pop	{r7, pc}

0800b528 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b528:	b580      	push	{r7, lr}
 800b52a:	b084      	sub	sp, #16
 800b52c:	af00      	add	r7, sp, #0
 800b52e:	6078      	str	r0, [r7, #4]
 800b530:	460b      	mov	r3, r1
 800b532:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b534:	2300      	movs	r3, #0
 800b536:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b538:	2300      	movs	r3, #0
 800b53a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b542:	78fa      	ldrb	r2, [r7, #3]
 800b544:	4611      	mov	r1, r2
 800b546:	4618      	mov	r0, r3
 800b548:	f7f7 f878 	bl	800263c <HAL_PCD_EP_ClrStall>
 800b54c:	4603      	mov	r3, r0
 800b54e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800b550:	7bbb      	ldrb	r3, [r7, #14]
 800b552:	2b03      	cmp	r3, #3
 800b554:	d816      	bhi.n	800b584 <USBD_LL_ClearStallEP+0x5c>
 800b556:	a201      	add	r2, pc, #4	; (adr r2, 800b55c <USBD_LL_ClearStallEP+0x34>)
 800b558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b55c:	0800b56d 	.word	0x0800b56d
 800b560:	0800b573 	.word	0x0800b573
 800b564:	0800b579 	.word	0x0800b579
 800b568:	0800b57f 	.word	0x0800b57f
    case HAL_OK :
      usb_status = USBD_OK;
 800b56c:	2300      	movs	r3, #0
 800b56e:	73fb      	strb	r3, [r7, #15]
    break;
 800b570:	e00b      	b.n	800b58a <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b572:	2303      	movs	r3, #3
 800b574:	73fb      	strb	r3, [r7, #15]
    break;
 800b576:	e008      	b.n	800b58a <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b578:	2301      	movs	r3, #1
 800b57a:	73fb      	strb	r3, [r7, #15]
    break;
 800b57c:	e005      	b.n	800b58a <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b57e:	2303      	movs	r3, #3
 800b580:	73fb      	strb	r3, [r7, #15]
    break;
 800b582:	e002      	b.n	800b58a <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800b584:	2303      	movs	r3, #3
 800b586:	73fb      	strb	r3, [r7, #15]
    break;
 800b588:	bf00      	nop
  }
  return usb_status;
 800b58a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b58c:	4618      	mov	r0, r3
 800b58e:	3710      	adds	r7, #16
 800b590:	46bd      	mov	sp, r7
 800b592:	bd80      	pop	{r7, pc}

0800b594 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b594:	b480      	push	{r7}
 800b596:	b085      	sub	sp, #20
 800b598:	af00      	add	r7, sp, #0
 800b59a:	6078      	str	r0, [r7, #4]
 800b59c:	460b      	mov	r3, r1
 800b59e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b5a6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b5a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	da0b      	bge.n	800b5c8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b5b0:	78fb      	ldrb	r3, [r7, #3]
 800b5b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b5b6:	68f9      	ldr	r1, [r7, #12]
 800b5b8:	4613      	mov	r3, r2
 800b5ba:	00db      	lsls	r3, r3, #3
 800b5bc:	4413      	add	r3, r2
 800b5be:	009b      	lsls	r3, r3, #2
 800b5c0:	440b      	add	r3, r1
 800b5c2:	333e      	adds	r3, #62	; 0x3e
 800b5c4:	781b      	ldrb	r3, [r3, #0]
 800b5c6:	e00b      	b.n	800b5e0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b5c8:	78fb      	ldrb	r3, [r7, #3]
 800b5ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b5ce:	68f9      	ldr	r1, [r7, #12]
 800b5d0:	4613      	mov	r3, r2
 800b5d2:	00db      	lsls	r3, r3, #3
 800b5d4:	4413      	add	r3, r2
 800b5d6:	009b      	lsls	r3, r3, #2
 800b5d8:	440b      	add	r3, r1
 800b5da:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800b5de:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b5e0:	4618      	mov	r0, r3
 800b5e2:	3714      	adds	r7, #20
 800b5e4:	46bd      	mov	sp, r7
 800b5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ea:	4770      	bx	lr

0800b5ec <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b5ec:	b580      	push	{r7, lr}
 800b5ee:	b084      	sub	sp, #16
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	6078      	str	r0, [r7, #4]
 800b5f4:	460b      	mov	r3, r1
 800b5f6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b5f8:	2300      	movs	r3, #0
 800b5fa:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b5fc:	2300      	movs	r3, #0
 800b5fe:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b606:	78fa      	ldrb	r2, [r7, #3]
 800b608:	4611      	mov	r1, r2
 800b60a:	4618      	mov	r0, r3
 800b60c:	f7f6 fe7a 	bl	8002304 <HAL_PCD_SetAddress>
 800b610:	4603      	mov	r3, r0
 800b612:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800b614:	7bbb      	ldrb	r3, [r7, #14]
 800b616:	2b03      	cmp	r3, #3
 800b618:	d816      	bhi.n	800b648 <USBD_LL_SetUSBAddress+0x5c>
 800b61a:	a201      	add	r2, pc, #4	; (adr r2, 800b620 <USBD_LL_SetUSBAddress+0x34>)
 800b61c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b620:	0800b631 	.word	0x0800b631
 800b624:	0800b637 	.word	0x0800b637
 800b628:	0800b63d 	.word	0x0800b63d
 800b62c:	0800b643 	.word	0x0800b643
    case HAL_OK :
      usb_status = USBD_OK;
 800b630:	2300      	movs	r3, #0
 800b632:	73fb      	strb	r3, [r7, #15]
    break;
 800b634:	e00b      	b.n	800b64e <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b636:	2303      	movs	r3, #3
 800b638:	73fb      	strb	r3, [r7, #15]
    break;
 800b63a:	e008      	b.n	800b64e <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b63c:	2301      	movs	r3, #1
 800b63e:	73fb      	strb	r3, [r7, #15]
    break;
 800b640:	e005      	b.n	800b64e <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b642:	2303      	movs	r3, #3
 800b644:	73fb      	strb	r3, [r7, #15]
    break;
 800b646:	e002      	b.n	800b64e <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800b648:	2303      	movs	r3, #3
 800b64a:	73fb      	strb	r3, [r7, #15]
    break;
 800b64c:	bf00      	nop
  }
  return usb_status;
 800b64e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b650:	4618      	mov	r0, r3
 800b652:	3710      	adds	r7, #16
 800b654:	46bd      	mov	sp, r7
 800b656:	bd80      	pop	{r7, pc}

0800b658 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b658:	b580      	push	{r7, lr}
 800b65a:	b086      	sub	sp, #24
 800b65c:	af00      	add	r7, sp, #0
 800b65e:	60f8      	str	r0, [r7, #12]
 800b660:	607a      	str	r2, [r7, #4]
 800b662:	603b      	str	r3, [r7, #0]
 800b664:	460b      	mov	r3, r1
 800b666:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b668:	2300      	movs	r3, #0
 800b66a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b66c:	2300      	movs	r3, #0
 800b66e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b676:	7af9      	ldrb	r1, [r7, #11]
 800b678:	683b      	ldr	r3, [r7, #0]
 800b67a:	687a      	ldr	r2, [r7, #4]
 800b67c:	f7f6 ff4b 	bl	8002516 <HAL_PCD_EP_Transmit>
 800b680:	4603      	mov	r3, r0
 800b682:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800b684:	7dbb      	ldrb	r3, [r7, #22]
 800b686:	2b03      	cmp	r3, #3
 800b688:	d816      	bhi.n	800b6b8 <USBD_LL_Transmit+0x60>
 800b68a:	a201      	add	r2, pc, #4	; (adr r2, 800b690 <USBD_LL_Transmit+0x38>)
 800b68c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b690:	0800b6a1 	.word	0x0800b6a1
 800b694:	0800b6a7 	.word	0x0800b6a7
 800b698:	0800b6ad 	.word	0x0800b6ad
 800b69c:	0800b6b3 	.word	0x0800b6b3
    case HAL_OK :
      usb_status = USBD_OK;
 800b6a0:	2300      	movs	r3, #0
 800b6a2:	75fb      	strb	r3, [r7, #23]
    break;
 800b6a4:	e00b      	b.n	800b6be <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b6a6:	2303      	movs	r3, #3
 800b6a8:	75fb      	strb	r3, [r7, #23]
    break;
 800b6aa:	e008      	b.n	800b6be <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b6ac:	2301      	movs	r3, #1
 800b6ae:	75fb      	strb	r3, [r7, #23]
    break;
 800b6b0:	e005      	b.n	800b6be <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b6b2:	2303      	movs	r3, #3
 800b6b4:	75fb      	strb	r3, [r7, #23]
    break;
 800b6b6:	e002      	b.n	800b6be <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800b6b8:	2303      	movs	r3, #3
 800b6ba:	75fb      	strb	r3, [r7, #23]
    break;
 800b6bc:	bf00      	nop
  }
  return usb_status;
 800b6be:	7dfb      	ldrb	r3, [r7, #23]
}
 800b6c0:	4618      	mov	r0, r3
 800b6c2:	3718      	adds	r7, #24
 800b6c4:	46bd      	mov	sp, r7
 800b6c6:	bd80      	pop	{r7, pc}

0800b6c8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b6c8:	b580      	push	{r7, lr}
 800b6ca:	b086      	sub	sp, #24
 800b6cc:	af00      	add	r7, sp, #0
 800b6ce:	60f8      	str	r0, [r7, #12]
 800b6d0:	607a      	str	r2, [r7, #4]
 800b6d2:	603b      	str	r3, [r7, #0]
 800b6d4:	460b      	mov	r3, r1
 800b6d6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b6d8:	2300      	movs	r3, #0
 800b6da:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b6dc:	2300      	movs	r3, #0
 800b6de:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b6e6:	7af9      	ldrb	r1, [r7, #11]
 800b6e8:	683b      	ldr	r3, [r7, #0]
 800b6ea:	687a      	ldr	r2, [r7, #4]
 800b6ec:	f7f6 fee1 	bl	80024b2 <HAL_PCD_EP_Receive>
 800b6f0:	4603      	mov	r3, r0
 800b6f2:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800b6f4:	7dbb      	ldrb	r3, [r7, #22]
 800b6f6:	2b03      	cmp	r3, #3
 800b6f8:	d816      	bhi.n	800b728 <USBD_LL_PrepareReceive+0x60>
 800b6fa:	a201      	add	r2, pc, #4	; (adr r2, 800b700 <USBD_LL_PrepareReceive+0x38>)
 800b6fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b700:	0800b711 	.word	0x0800b711
 800b704:	0800b717 	.word	0x0800b717
 800b708:	0800b71d 	.word	0x0800b71d
 800b70c:	0800b723 	.word	0x0800b723
    case HAL_OK :
      usb_status = USBD_OK;
 800b710:	2300      	movs	r3, #0
 800b712:	75fb      	strb	r3, [r7, #23]
    break;
 800b714:	e00b      	b.n	800b72e <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b716:	2303      	movs	r3, #3
 800b718:	75fb      	strb	r3, [r7, #23]
    break;
 800b71a:	e008      	b.n	800b72e <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b71c:	2301      	movs	r3, #1
 800b71e:	75fb      	strb	r3, [r7, #23]
    break;
 800b720:	e005      	b.n	800b72e <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b722:	2303      	movs	r3, #3
 800b724:	75fb      	strb	r3, [r7, #23]
    break;
 800b726:	e002      	b.n	800b72e <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800b728:	2303      	movs	r3, #3
 800b72a:	75fb      	strb	r3, [r7, #23]
    break;
 800b72c:	bf00      	nop
  }
  return usb_status;
 800b72e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b730:	4618      	mov	r0, r3
 800b732:	3718      	adds	r7, #24
 800b734:	46bd      	mov	sp, r7
 800b736:	bd80      	pop	{r7, pc}

0800b738 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800b738:	b580      	push	{r7, lr}
 800b73a:	b082      	sub	sp, #8
 800b73c:	af00      	add	r7, sp, #0
 800b73e:	6078      	str	r0, [r7, #4]
 800b740:	460b      	mov	r3, r1
 800b742:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800b744:	78fb      	ldrb	r3, [r7, #3]
 800b746:	2b00      	cmp	r3, #0
 800b748:	d002      	beq.n	800b750 <HAL_PCDEx_LPM_Callback+0x18>
 800b74a:	2b01      	cmp	r3, #1
 800b74c:	d01f      	beq.n	800b78e <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800b74e:	e03b      	b.n	800b7c8 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	6a1b      	ldr	r3, [r3, #32]
 800b754:	2b00      	cmp	r3, #0
 800b756:	d007      	beq.n	800b768 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800b758:	f000 f854 	bl	800b804 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b75c:	4b1c      	ldr	r3, [pc, #112]	; (800b7d0 <HAL_PCDEx_LPM_Callback+0x98>)
 800b75e:	691b      	ldr	r3, [r3, #16]
 800b760:	4a1b      	ldr	r2, [pc, #108]	; (800b7d0 <HAL_PCDEx_LPM_Callback+0x98>)
 800b762:	f023 0306 	bic.w	r3, r3, #6
 800b766:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	687a      	ldr	r2, [r7, #4]
 800b774:	6812      	ldr	r2, [r2, #0]
 800b776:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b77a:	f023 0301 	bic.w	r3, r3, #1
 800b77e:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b786:	4618      	mov	r0, r3
 800b788:	f7fb fd1b 	bl	80071c2 <USBD_LL_Resume>
    break;
 800b78c:	e01c      	b.n	800b7c8 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	687a      	ldr	r2, [r7, #4]
 800b79a:	6812      	ldr	r2, [r2, #0]
 800b79c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b7a0:	f043 0301 	orr.w	r3, r3, #1
 800b7a4:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b7ac:	4618      	mov	r0, r3
 800b7ae:	f7fb fcec 	bl	800718a <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	6a1b      	ldr	r3, [r3, #32]
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d005      	beq.n	800b7c6 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b7ba:	4b05      	ldr	r3, [pc, #20]	; (800b7d0 <HAL_PCDEx_LPM_Callback+0x98>)
 800b7bc:	691b      	ldr	r3, [r3, #16]
 800b7be:	4a04      	ldr	r2, [pc, #16]	; (800b7d0 <HAL_PCDEx_LPM_Callback+0x98>)
 800b7c0:	f043 0306 	orr.w	r3, r3, #6
 800b7c4:	6113      	str	r3, [r2, #16]
    break;
 800b7c6:	bf00      	nop
}
 800b7c8:	bf00      	nop
 800b7ca:	3708      	adds	r7, #8
 800b7cc:	46bd      	mov	sp, r7
 800b7ce:	bd80      	pop	{r7, pc}
 800b7d0:	e000ed00 	.word	0xe000ed00

0800b7d4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b7d4:	b480      	push	{r7}
 800b7d6:	b083      	sub	sp, #12
 800b7d8:	af00      	add	r7, sp, #0
 800b7da:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b7dc:	4b03      	ldr	r3, [pc, #12]	; (800b7ec <USBD_static_malloc+0x18>)
}
 800b7de:	4618      	mov	r0, r3
 800b7e0:	370c      	adds	r7, #12
 800b7e2:	46bd      	mov	sp, r7
 800b7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e8:	4770      	bx	lr
 800b7ea:	bf00      	nop
 800b7ec:	200025f8 	.word	0x200025f8

0800b7f0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b7f0:	b480      	push	{r7}
 800b7f2:	b083      	sub	sp, #12
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	6078      	str	r0, [r7, #4]

}
 800b7f8:	bf00      	nop
 800b7fa:	370c      	adds	r7, #12
 800b7fc:	46bd      	mov	sp, r7
 800b7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b802:	4770      	bx	lr

0800b804 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800b804:	b580      	push	{r7, lr}
 800b806:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800b808:	f7f4 ffa8 	bl	800075c <SystemClock_Config>
}
 800b80c:	bf00      	nop
 800b80e:	bd80      	pop	{r7, pc}

0800b810 <memset>:
 800b810:	4402      	add	r2, r0
 800b812:	4603      	mov	r3, r0
 800b814:	4293      	cmp	r3, r2
 800b816:	d100      	bne.n	800b81a <memset+0xa>
 800b818:	4770      	bx	lr
 800b81a:	f803 1b01 	strb.w	r1, [r3], #1
 800b81e:	e7f9      	b.n	800b814 <memset+0x4>

0800b820 <__libc_init_array>:
 800b820:	b570      	push	{r4, r5, r6, lr}
 800b822:	4d0d      	ldr	r5, [pc, #52]	; (800b858 <__libc_init_array+0x38>)
 800b824:	4c0d      	ldr	r4, [pc, #52]	; (800b85c <__libc_init_array+0x3c>)
 800b826:	1b64      	subs	r4, r4, r5
 800b828:	10a4      	asrs	r4, r4, #2
 800b82a:	2600      	movs	r6, #0
 800b82c:	42a6      	cmp	r6, r4
 800b82e:	d109      	bne.n	800b844 <__libc_init_array+0x24>
 800b830:	4d0b      	ldr	r5, [pc, #44]	; (800b860 <__libc_init_array+0x40>)
 800b832:	4c0c      	ldr	r4, [pc, #48]	; (800b864 <__libc_init_array+0x44>)
 800b834:	f000 f826 	bl	800b884 <_init>
 800b838:	1b64      	subs	r4, r4, r5
 800b83a:	10a4      	asrs	r4, r4, #2
 800b83c:	2600      	movs	r6, #0
 800b83e:	42a6      	cmp	r6, r4
 800b840:	d105      	bne.n	800b84e <__libc_init_array+0x2e>
 800b842:	bd70      	pop	{r4, r5, r6, pc}
 800b844:	f855 3b04 	ldr.w	r3, [r5], #4
 800b848:	4798      	blx	r3
 800b84a:	3601      	adds	r6, #1
 800b84c:	e7ee      	b.n	800b82c <__libc_init_array+0xc>
 800b84e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b852:	4798      	blx	r3
 800b854:	3601      	adds	r6, #1
 800b856:	e7f2      	b.n	800b83e <__libc_init_array+0x1e>
 800b858:	0800b9b0 	.word	0x0800b9b0
 800b85c:	0800b9b0 	.word	0x0800b9b0
 800b860:	0800b9b0 	.word	0x0800b9b0
 800b864:	0800b9b4 	.word	0x0800b9b4

0800b868 <memcpy>:
 800b868:	440a      	add	r2, r1
 800b86a:	4291      	cmp	r1, r2
 800b86c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800b870:	d100      	bne.n	800b874 <memcpy+0xc>
 800b872:	4770      	bx	lr
 800b874:	b510      	push	{r4, lr}
 800b876:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b87a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b87e:	4291      	cmp	r1, r2
 800b880:	d1f9      	bne.n	800b876 <memcpy+0xe>
 800b882:	bd10      	pop	{r4, pc}

0800b884 <_init>:
 800b884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b886:	bf00      	nop
 800b888:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b88a:	bc08      	pop	{r3}
 800b88c:	469e      	mov	lr, r3
 800b88e:	4770      	bx	lr

0800b890 <_fini>:
 800b890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b892:	bf00      	nop
 800b894:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b896:	bc08      	pop	{r3}
 800b898:	469e      	mov	lr, r3
 800b89a:	4770      	bx	lr
